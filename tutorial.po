# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2010, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2010-06-30 14:00\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 1.7.0\n"

msgid "Whetting Your Appetite"
msgstr "Mise en bouche"

msgid "If you do much work on computers, eventually you find that there's some task you'd like to automate.  For example, you may wish to perform a search-and-replace over a large number of text files, or rename and rearrange a bunch of photo files in a complicated way. Perhaps you'd like to write a small custom database, or a specialized GUI application, or a simple game."
msgstr ""
"Si vous faites beaucoup de travail sur ordinateur, vous finirez par vouloir "
"automatiser certaines tâches. Par exemple vous pouvez avoir besoin "
"d'effectuer une recherche et un remplacement sur un grand nombre de fichiers "
"de texte, ou de renommer et réorganiser des photos d'une manière "
"sophistiquée. Peut-être avez-vous besoin de créer une petite base de données "
"ou une application graphique, ou un simple jeu."

msgid "If you're a professional software developer, you may have to work with several C/C++/Java libraries but find the usual write/compile/test/re-compile cycle is too slow.  Perhaps you're writing a test suite for such a library and find writing the testing code a tedious task.  Or maybe you've written a program that could use an extension language, and you don't want to design and implement a whole new language for your application."
msgstr ""
"Si vous êtes un développeur professionnel, vous pouvez avoir besoin de "
"travailler avec certaines bibliothèques C/C++/Java, mais vous trouvez que le "
"cycle habituel écriture/compilation/test/recompilation est trop lourd. "
"Peut-être écrivez-vous une suite de tests pour une telle bibliothèque et "
"trouvez-vous que l'écriture du code de test est pénible. Ou bien vous avez "
"écrit un logiciel qui a besoin d'être extensible grâce à un langage de "
"script, mais vous ne voulez pas concevoir ni implémenter un nouveau langage "
"pour votre application."

msgid "Python is just the language for you."
msgstr "Python est le langage parfait pour vous."

msgid "You could write a Unix shell script or Windows batch files for some of these tasks, but shell scripts are best at moving around files and changing text data, not well-suited for GUI applications or games. You could write a C/C++/Java program, but it can take a lot of development time to get even a first-draft program.  Python is simpler to use, available on Windows, Mac OS X, and Unix operating systems, and will help you get the job done more quickly."
msgstr ""
"Vous pouvez écrire un script shell Unix ou des fichiers batch Windows pour "
"certaines de ces tâches. Les scripts shell sont appropriés pour déplacer des "
"fichiers et modifier des données textuelles, mais pas pour une application "
"ayant une interface graphique ni pour des jeux. Vous pouvez écrire un "
"programme en C/C++/Java, mais cela peut prendre beaucoup de temps, ne "
"serait-ce que pour avoir une première maquette. Python est plus facile à "
"utiliser, il est disponible sous Windows, Mac OS X et Unix, et il vous "
"aidera à terminer plus rapidement votre travail."

msgid "Python is simple to use, but it is a real programming language, offering much more structure and support for large programs than shell scripts or batch files can offer.  On the other hand, Python also offers much more error checking than C, and, being a *very-high-level language*, it has high-level data types built in, such as flexible arrays and dictionaries.  Because of its more general data types Python is applicable to a much larger problem domain than Awk or even Perl, yet many things are at least as easy in Python as in those languages."
msgstr ""
"Python est facile à utiliser, mais c'est un vrai langage de programmation, "
"offrant une bien meilleure structure et prise en charge des grands "
"programmes que les scripts shell ou les fichiers batch. D'un autre coté, "
"Python offre beaucoup plus de méthodes de vérification d'erreurs que le "
"langage C et, étant un *langage de très haut niveau*, il possède nativement "
"des types de données très évolués tels que des tableaux flexibles ou des "
"dictionnaires. Grâce à ses types de données plus universels, Python est "
"utilisable pour des domaines beaucoup plus variés que Awk ou même Perl. "
"Pourtant, de nombreuses choses sont au moins aussi faciles en Python que "
"dans ces langages."

msgid "Python allows you to split your program into modules that can be reused in other Python programs.  It comes with a large collection of standard modules that you can use as the basis of your programs --- or as examples to start learning to program in Python.  Some of these modules provide things like file I/O, system calls, sockets, and even interfaces to graphical user interface toolkits like Tk."
msgstr ""
"Python vous permet de découper votre programme en modules qui peuvent être "
"réutilisés dans d'autres programmes en Python. Il est fourni avec une vaste "
"collection de modules standards que vous pouvez utiliser comme base de vos "
"programmes, ou comme exemples pour apprendre à programmer. Certains de ces "
"modules fournissent des services tels que les entrées/sorties, les appels "
"système, les sockets, et même des accès aux outils comme Tk pour créer des "
"interfaces graphiques."

msgid "Python is an interpreted language, which can save you considerable time during program development because no compilation and linking is necessary.  The interpreter can be used interactively, which makes it easy to experiment with features of the language, to write throw-away programs, or to test functions during bottom-up program development. It is also a handy desk calculator."
msgstr ""
"Python est un langage interprêté, ce qui peut vous faire gagner un temps "
"considérable pendant le développement du programme car aucune compilation ni "
"édition de liens n'est nécessaire. L'interprète peut être utilisé de "
"manière interactive, pour vous permettre d'expérimenter avec les "
"fonctionnalités du langage, d'écrire des programmes jetables ou de tester "
"des fonctions lors d'un développement incrémental. Il constitue aussi une "
"calculatrice de bureau pratique."

msgid "Python enables programs to be written compactly and readably.  Programs written in Python are typically much shorter than equivalent C,  C++, or Java programs, for several reasons:"
msgstr ""
"Python permet d'écrire des programmes compacts et lisibles. Les programmes "
"écrits en Python sont généralement beaucoup plus court que l'équivalent en "
"C, C++, ou Java, pour plusieurs raisons :"

msgid "the high-level data types allow you to express complex operations in a single statement;"
msgstr ""
"les types de données de haut niveau vous permettent d'exprimer des "
"opérations complexes en une seule instruction ;"

msgid "statement grouping is done by indentation instead of beginning and ending brackets;"
msgstr ""
"les instructions sont regroupées entre elles grâce à l'indentation, plutôt "
"que par l'utilisation d'accolades ;"

msgid "no variable or argument declarations are necessary."
msgstr "aucune déclaration de variable ou d'argument n'est nécessaire."

msgid "Python is *extensible*: if you know how to program in C it is easy to add a new built-in function or module to the interpreter, either to perform critical operations at maximum speed, or to link Python programs to libraries that may only be available in binary form (such as a vendor-specific graphics library). Once you are really hooked, you can link the Python interpreter into an application written in C and use it as an extension or command language for that application."
msgstr ""
"Python est *extensible* : si vous savez écrire un programme en C, il est "
"aisé d'ajouter à l'interprète une nouvelle fonction primitive ou un module, "
"soit pour effectuer des opérations critiques à vitesse maximale, soit pour "
"lier des programmes en Python à des bibliothèques disponibles uniquement "
"sous forme binaire (par exemple des bibliothèques graphiques dédiées à un "
"matériel). Une fois que vous êtes à l'aise avec ces principes, vous pouvez "
"relier l'interprète Python à une application écrite en C et l'utiliser comme "
"un langage d'extensions ou de commandes pour cette application."

msgid "By the way, the language is named after the BBC show \"Monty Python's Flying Circus\" and has nothing to do with reptiles.  Making references to Monty Python skits in documentation is not only allowed, it is encouraged!"
msgstr ""
"À ce sujet, le nom du langage provient de l'émission de la BBC « Monty "
"Python's Flying Circus » et n'a rien à voir avec les reptiles. Faire "
"référence aux sketchs des Monty Python dans de la documentation n'est pas "
"seulement permis, c'est encouragé !"

msgid "Now that you are all excited about Python, you'll want to examine it in some more detail.  Since the best way to learn a language is to use it, the tutorial invites you to play with the Python interpreter as you read."
msgstr ""
"Votre soudain enthousiasme à propos de Python va vous pousser à l'examiner "
"un peu plus en détail. Comme la meilleure façon d'apprendre un langage est "
"de l'utiliser, le tutoriel vous invite à jouer avec l'interprète pendant la "
"lecture."

msgid "In the next chapter, the mechanics of using the interpreter are explained.  This is rather mundane information, but essential for trying out the examples shown later."
msgstr ""
"Dans le prochain chapitre, nous allons expliquer comment utiliser "
"l'interprète. Ce n'est pas la section la plus passionnante, mais c'est un "
"passage obligé pour tester les exemples montrés plus loin."

msgid "The rest of the tutorial introduces various features of the Python language and system through examples, beginning with simple expressions, statements and data types, through functions and modules, and finally touching upon advanced concepts like exceptions and user-defined classes."
msgstr ""
"Le reste du tutoriel présente diverses fonctionnalités du langage et du "
"système Python au travers d'exemples, depuis les simples expressions, "
"instructions ou types de données, jusqu'aux fonctions et modules, pour "
"finalement aborder des concepts avancés comme les exceptions et les classes."

msgid "Classes"
msgstr "Classes"

msgid "Python's class mechanism adds classes to the language with a minimum of new syntax and semantics.  It is a mixture of the class mechanisms found in C++ and Modula-3.  As is true for modules, classes in Python do not put an absolute barrier between definition and user, but rather rely on the politeness of the user not to \"break into the definition.\"  The most important features of classes are retained with full power, however: the class inheritance mechanism allows multiple base classes, a derived class can override any methods of its base class or classes, and a method can call the method of a base class with the same name.  Objects can contain an arbitrary amount of data."
msgstr ""
"Le mécanisme des classes Python ajoute au langage la notion de classes avec "
"un minimum de syntaxe et sémantique nouvelles. C'est un mélange des "
"mécanismes rencontrés dans C++ et Modula-3. De la même manière que pour les "
"modules, les classes Python ne posent pas de barrière rigide entre leur "
"définition et l'utilisateur, mais s'appuie sur le respect de l'utilisateur à "
"ne pas causer d'effraction dans la définition. Cependant, les "
"fonctionnalités les plus importantes des classes sont conservées avec toutes "
"leur puissance : le mécanisme d'héritage autorise d'avoir plusieurs classes "
"de base, une classe dérivée peut surcharger toutes les méthodes de sa (ou "
"ses) classe(s) de base et une méthode peut faire appel à la méthode d'une "
"classe de base portant le même nom. Les objets peuvent contenir un nombre "
"arbitraire de données."

msgid "In C++ terminology, normally class members (including the data members) are *public* (except see below :ref:`tut-private`), and all member functions are *virtual*.  As in Modula-3, there are no shorthands for referencing the object's members from its methods: the method function is declared with an explicit first argument representing the object, which is provided implicitly by the call.  As in Smalltalk, classes themselves are objects.  This provides semantics for importing and renaming.  Unlike C++ and Modula-3, built-in types can be used as base classes for extension by the user. Also, like in C++, most built-in operators with special syntax (arithmetic operators, subscripting etc.) can be redefined for class instances."
msgstr ""
"Dans la terminologie C++, les membres des classes (y compris les données) "
"sont *publics* (sauf exception, voir :ref:`tut-private`) et toutes les "
"fonctions membres sont *virtuelles*. Comme avec Modulo-3, il n'y a aucune "
"façon d'accéder aux membres d'un objet à partir de ses méthodes : une "
"méthode est déclarée avec un premier argument explicite représentant "
"l'objet, et cet argument est transmis de manière implicite lors de l'appel. "
"Comme avec Smalltalk, les classes elles-mêmes sont des objets. Il existe "
"ainsi une sémantique pour les importer et les renommer. Au contraire de C++ "
"et Modulo-3, les types de base peuvent être utilisés comme classes de base "
"pour que l'utilisateur puisse les étendre. Enfin, comme en C++, la plupart "
"des opérateurs de base avec une syntaxe spéciale (opérateurs arithmétiques, "
"sous-indiçage, etc.) peuvent être redéfinis pour les instances de classes."

msgid "(Lacking universally accepted terminology to talk about classes, I will make occasional use of Smalltalk and C++ terms.  I would use Modula-3 terms, since its object-oriented semantics are closer to those of Python than C++, but I expect that few readers have heard of it.)"
msgstr ""
"(Par manque d'une terminologie universellement acceptée pour parler des "
"classes, nous ferons un usage occasionnel des termes de Smalltalk et C++. "
"Nous voulions utiliser les termes de Modula-3 puisque sa sémantique orientée "
"objet est plus proche de celle de Python que de C++, mais petit nombre de "
"lecteurs est susceptibles de la connaître.)"

msgid "A Word About Names and Objects"
msgstr "Quelques mots au sujet des noms et objets"

msgid "Objects have individuality, and multiple names (in multiple scopes) can be bound to the same object.  This is known as aliasing in other languages.  This is usually not appreciated on a first glance at Python, and can be safely ignored when dealing with immutable basic types (numbers, strings, tuples).  However, aliasing has a possibly surprising effect on the semantics of Python code involving mutable objects such as lists, dictionaries, and most other types. This is usually used to the benefit of the program, since aliases behave like pointers in some respects.  For example, passing an object is cheap since only a pointer is passed by the implementation; and if a function modifies an object passed as an argument, the caller will see the change --- this eliminates the need for two different argument passing mechanisms as in Pascal."
msgstr ""
"Les objets possèdent une existence propre et plusieurs noms peuvent être "
"utilisés (dans divers contextes) pour faire référence au même objet. Ceux-ci "
"sont connus sous le nom d'alias dans d'autres langages. Ceci est "
"habituellement peu apprécié lors d'un premier coup d'œil à Python et peut "
"être ignoré lorsqu'on travaille avec des types de base non mutables "
"(nombres, chaînes, tuples). Cependant, les alias ont éventuellement des "
"effets surprenants sur la sémantique d'un code Python mettant en jeu des "
"objets mutables comme les listes, les dictionnaires et la plupart des autres "
"types. C'est généralement utilisé au bénéfice du programme car les alias se "
"comportent, d'un certain point de vue, comme des pointeurs. Par exemple, "
"transmettre un objet n'a aucun coût car c'est simplement un pointeur qui est "
"transmis par l'implémentation ; et si une fonction modifie un objet passé "
"en argument, le code à l'origine de l'appel verra le changement. Ceci "
"élimine le besoin d'avoir deux mécanismes de transmission d'arguments comme "
"en Pascal."

msgid "Python Scopes and Namespaces"
msgstr "Portées et espaces de noms en Python"

msgid "Before introducing classes, I first have to tell you something about Python's scope rules.  Class definitions play some neat tricks with namespaces, and you need to know how scopes and namespaces work to fully understand what's going on. Incidentally, knowledge about this subject is useful for any advanced Python programmer."
msgstr ""
"Avant de présenter les classes, nous devons parler un peu de la notion de "
"portée en Python. Les définitions de classes font d'habiles manipulations "
"avec les espaces de noms, et vous devez savoir comment les portées et les "
"espaces de noms fonctionnent. Soit dit en passant, toute connaissance sur ce "
"sujet est aussi utile aux développeurs Python expérimentés."

msgid "Let's begin with some definitions."
msgstr "Tout d'abord, quelques définitions."

msgid "A *namespace* is a mapping from names to objects.  Most namespaces are currently implemented as Python dictionaries, but that's normally not noticeable in any way (except for performance), and it may change in the future.  Examples of namespaces are: the set of built-in names (functions such as :func:`abs`, and built-in exception names); the global names in a module; and the local names in a function invocation.  In a sense the set of attributes of an object also form a namespace.  The important thing to know about namespaces is that there is absolutely no relation between names in different namespaces; for instance, two different modules may both define a function ``maximize`` without confusion --- users of the modules must prefix it with the module name."
msgstr ""
"Un *espace de nom* est une table de correspondance entre des noms et des "
"objets. La plupart des espaces de noms sont actuellement implémentés sous "
"forme de dictionnaires Python, mais ceci n'est normalement pas visible (sauf "
"pour les performances) et peut changer dans le futur. Comme exemples "
"d'espaces de noms, nous pouvons citer les primitives (fonctions comme "
":func:`abs`, et les noms des exceptions de base) ; les noms globaux dans un "
"module ; et les noms locaux lors d'un appel de fonction. D'une certaine "
"manière, l'ensemble des attributs d'un objet forme lui-même un espace de "
"noms. La chose importante à retenir à propos des espaces de noms est qu'il "
"n'y absolument aucun lien entre les noms de plusieurs espaces de noms ; par "
"exemple, deux modules différents peuvent définir une fonction ``maximize`` "
"sans qu'il y ait de confusion. Les utilisateurs des modules doivent préfixer "
"le nom de la fonction avec celui du module."

msgid "By the way, I use the word *attribute* for any name following a dot --- for example, in the expression ``z.real``, ``real`` is an attribute of the object ``z``.  Strictly speaking, references to names in modules are attribute references: in the expression ``modname.funcname``, ``modname`` is a module object and ``funcname`` is an attribute of it.  In this case there happens to be a straightforward mapping between the module's attributes and the global names defined in the module: they share the same namespace!  [#]_"
msgstr ""
"À ce propos, nous utilisons le mot *attribut* pour tout nom suivant un "
"point. Par exemple, dans l'expression ``z.real``, ``real`` est un attribut "
"de l'objet ``z``. Rigoureusement parlant, les références à des noms dans des "
"modules sont des références d'attributs : dans l'expression "
"``modname.funcname``, ``modname`` est un objet module et ``funcname`` est un "
"attribut de cet objet. Dans ces conditions, il existe une correspondance "
"directe entre les attributs du module et les noms globaux définis dans le "
"module : ils partagent le même espace de noms ! [#]_"

msgid "Attributes may be read-only or writable.  In the latter case, assignment to attributes is possible.  Module attributes are writable: you can write ``modname.the_answer = 42``.  Writable attributes may also be deleted with the :keyword:`del` statement.  For example, ``del modname.the_answer`` will remove the attribute :attr:`the_answer` from the object named by ``modname``."
msgstr ""
"Les attributs peuvent être seulement lisibles ou aussi modifiables. S'ils "
"sont modifiables, l'affectation à un attribut est possible. Les attributs de "
"modules sont modifiables : vous pouvez écrire ``modname.the_answer = 42``. "
"Les attributs modifiables peuvent aussi être effacés avec l'instruction "
":keyword:`del`. Par exemple, ``del modname.the_answer`` supprime l'attribut "
":attr:`the_answer` de l'objet nommé ``modname``."

msgid "Namespaces are created at different moments and have different lifetimes.  The namespace containing the built-in names is created when the Python interpreter starts up, and is never deleted.  The global namespace for a module is created when the module definition is read in; normally, module namespaces also last until the interpreter quits.  The statements executed by the top-level invocation of the interpreter, either read from a script file or interactively, are considered part of a module called :mod:`__main__`, so they have their own global namespace.  (The built-in names actually also live in a module; this is called :mod:`builtins`.)"
msgstr ""
"Les espaces de noms sont créés à différents moments et ont différentes "
"durées de vie. L'espace de noms contenant les primitives est créé au "
"démarrage de l'interprète Python et n'est jamais effacé. L'espace de nom "
"global pour un module est créé lorsque la définition du module est lue. "
"Habituellement, les espaces de noms des modules durent aussi jusqu'à l'arrêt "
"de l'interprète. Les instructions exécutées par la première invocation de "
"l'interprète, qu'ils soient lus depuis un fichier de script ou de manière "
"interactive, sont considérés comme faisant partie d'un module appelé "
":mod:`__main__`, de façon qu'elles possèdent leur propre espace de noms. "
"(les primitives vivent elles-mêmes dans un module, appelé :mod:`builtins`.)"

msgid "The local namespace for a function is created when the function is called, and deleted when the function returns or raises an exception that is not handled within the function.  (Actually, forgetting would be a better way to describe what actually happens.)  Of course, recursive invocations each have their own local namespace."
msgstr ""
"L'espace de noms local d'une fonction est créé lors de son appel, puis "
"effacé lorsqu'elle renvoie un résultat ou lève une exception non prise en "
"charge. (En fait, « oublier » serait une meilleure façon de décrire ce qui "
"se passe réellement). Bien sûr, des invocations récursives ont chacune leur "
"propre espace de noms."

msgid "A *scope* is a textual region of a Python program where a namespace is directly accessible.  \"Directly accessible\" here means that an unqualified reference to a name attempts to find the name in the namespace."
msgstr ""
"Une *portée* est une zone textuelle d'un programme Python où un espace de "
"noms est directement accessible. « Directement accessible » signifie ici "
"qu'une référence non qualifée à un nom sera recherchée dans l'espace de nom."

msgid "Although scopes are determined statically, they are used dynamically. At any time during execution, there are at least three nested scopes whose namespaces are directly accessible:"
msgstr ""
"Bien que les portées soient déterminées de manière statique, elles sont "
"utilisées de manière dynamique. À n'importe quel moment de l'exécution, il y "
"a au minimum trois portées imbriquées dont les espaces de noms sont "
"directement accessibles :"

msgid "the innermost scope, which is searched first, contains the local names"
msgstr ""
"La portée la plus au centre, celle qui est consultée en premier, contient "
"les noms locaux"

msgid "the scopes of any enclosing functions, which are searched starting with the nearest enclosing scope, contains non-local, but also non-global names"
msgstr ""
"les portées des fonctions englobantes, qui sont consultées en commençant "
"avec la portée englobante la plus proche, contiennent des noms non-locaux "
"mais aussi non-globaux"

msgid "the next-to-last scope contains the current module's global names"
msgstr "l'avant dernière portée contient les noms globaux du module courant"

msgid "the outermost scope (searched last) is the namespace containing built-in names"
msgstr ""
"la portée englobante, consultée en dernier, est l'espace de noms contenant "
"les primitives"

msgid "If a name is declared global, then all references and assignments go directly to the middle scope containing the module's global names.  To rebind variables found outside of the innermost scope, the :keyword:`nonlocal` statement can be used; if not declared nonlocal, those variable are read-only (an attempt to write to such a variable will simply create a *new* local variable in the innermost scope, leaving the identically named outer variable unchanged)."
msgstr ""
"Si un nom est déclaré global, toutes les références et affectations vont "
"directement dans la portée intermédiaire contenant les noms globaux du "
"module. Pour réattacher des variables trouvées en dehors de la portée la "
"plus au centre, l'instruction :keyword:`nonlocal` peut être utilisée. Si "
"elles ne sont pas déclarées « nonlocal », ces variables sont en lecture "
"seule (toute tentative de modifier une telle variable créera simplement une "
"*nouvelle* variable locale dans la portée la plus au centre, en laissant "
"inchangée la variable du même nom dans la portée englobante)."

msgid "Usually, the local scope references the local names of the (textually) current function.  Outside functions, the local scope references the same namespace as the global scope: the module's namespace. Class definitions place yet another namespace in the local scope."
msgstr ""
"Habituellement, la portée locale référence les noms locaux de la fonction "
"courante. En dehors des fonctions, la portée locale référence le même espace "
"de noms que la portée globale : l'espace de noms du module. Les définitions "
"de classes créent un nouvel espace de noms dans la portée locale."

msgid "It is important to realize that scopes are determined textually: the global scope of a function defined in a module is that module's namespace, no matter from where or by what alias the function is called.  On the other hand, the actual search for names is done dynamically, at run time --- however, the language definition is evolving towards static name resolution, at \"compile\" time, so don't rely on dynamic name resolution!  (In fact, local variables are already determined statically.)"
msgstr ""
"Il est important de réaliser que les portées sont déterminées de manière "
"textuelle : la portée globale d'une fonction définie dans un module est "
"l'espace de nom de ce module, quel que soit la provenance de cet appel. Par "
"contre, la recherche réelle des noms est faite dynamiquement au moment de "
"l'exécution. Cependant la définition du langage est en train d'évoluer vers "
"une résolution statique des noms au moment de la « compilation », donc sans "
"se baser sur une résolution dynamique ! (En réalité, les variables locales "
"sont déjà déterminées de manière statique)."

msgid "A special quirk of Python is that -- if no :keyword:`global` statement is in effect -- assignments to names always go into the innermost scope.  Assignments do not copy data --- they just bind names to objects.  The same is true for deletions: the statement ``del x`` removes the binding of ``x`` from the namespace referenced by the local scope.  In fact, all operations that introduce new names use the local scope: in particular, :keyword:`import` statements and function definitions bind the module or function name in the local scope."
msgstr ""
"Une particularité de Python est que si aucune instruction :keyword:`global` "
"n'est active, les affectations de noms vont toujours dans la portée la plus "
"proche. Les affectations ne copient aucune données : elles se contentent de "
"lier des noms à des objets. Ceci est également vrai pour l'effacement : "
"l'instruction ``del x`` supprime la liaison de ``x`` dans l'espace de noms "
"référencé par la portée locale. En réalité, toutes les opérations qui "
"impliquent des nouveaux noms utilisent la portée locale : en particulier, "
"les instructions keyword:`import` et les définitions de fonctions effectuent "
"une liaison du module ou du nom de fonction dans la portée locale."

msgid "The :keyword:`global` statement can be used to indicate that particular variables live in the global scope and should be rebound there; the :keyword:`nonlocal` statement indicates that particular variables live in an enclosing scope and should be rebound there."
msgstr ""
"L'instruction :keyword:`global` peut être utilisée pour indiquer que "
"certaines variables existent dans la portée globale et doivent être reliées "
"en local ; l'instruction :keyword:`nonlocal` indique que certaines variables "
"existent dans une portée supérieure et doivent être reliées en local."

msgid "Scopes and Namespaces Example"
msgstr "Exemple de portées et d'espaces de noms"

msgid "This is an example demonstrating how to reference the different scopes and namespaces, and how :keyword:`global` and :keyword:`nonlocal` affect variable binding::"
msgstr ""
"Ceci est un exemple montrant comment utiliser les différentes portées et "
"espaces de noms, et comment :keyword:`global` et :keyword:`nonlocal` "
"modifient l'affectation de variable ::"

msgid "def scope_test():     def do_local():         spam = \"local spam\"     def do_nonlocal():         nonlocal spam         spam = \"nonlocal spam\"     def do_global():         global spam         spam = \"global spam\"      spam = \"test spam\"     do_local()     print(\"After local assignment:\", spam)     do_nonlocal()     print(\"After nonlocal assignment:\", spam)     do_global()     print(\"After global assignment:\", spam)  scope_test() print(\"In global scope:\", spam)"
msgstr ""
"def scope_test():     def do_local():         spam = \"local spam\"     def "
"do_nonlocal():         nonlocal spam         spam = \"nonlocal spam\"     def "
"do_global():         global spam         spam = \"global spam\"      spam = "
"\"test spam\"     do_local()     print(\"After local assignment:\", spam)     "
"do_nonlocal()     print(\"After nonlocal assignment:\", spam)     do_global() "
"    print(\"After global assignment:\", spam)  scope_test() print(\"In global "
"scope:\", spam)"

msgid "The output of the example code is::"
msgstr "Ce code donne le résultat suivant ::"

msgid "After local assignment: test spam After nonlocal assignment: nonlocal spam After global assignment: nonlocal spam In global scope: global spam"
msgstr ""
"After local assignment: test spam After nonlocal assignment: nonlocal spam "
"After global assignment: nonlocal spam In global scope: global spam"

msgid "Note how the *local* assignment (which is default) didn't change *scope_test*\\'s binding of *spam*.  The :keyword:`nonlocal` assignment changed *scope_test*\\'s binding of *spam*, and the :keyword:`global` assignment changed the module-level binding."
msgstr ""
"Vous pouvez constater que l'affectation *locale* (qui est effectuée par "
"défaut) n'a pas modifié la liaison de *spam* dans *scope_test*. "
"L'affectation :keyword:`nonlocal` a changé la liaison de *spam* dans "
"*scope_test* et l'affectation :keyword:`global` a changé la liaison au "
"niveau du module."

msgid "You can also see that there was no previous binding for *spam* before the :keyword:`global` assignment."
msgstr ""
"Vous pouvez également voir qu'aucune liaison pour *spam* n'a été faite avant "
"l'affectation :keyword:`global`."

msgid "A First Look at Classes"
msgstr "Une première approche des classes"

msgid "Classes introduce a little bit of new syntax, three new object types, and some new semantics."
msgstr ""
"Le concept de classes introduit quelques nouveau éléments de syntaxe, trois "
"nouveaux types d'objets ainsi que de nouveaux éléments de sémantique"

msgid "Class Definition Syntax"
msgstr "Syntaxe de définition des classes"

msgid "The simplest form of class definition looks like this::"
msgstr "La forme la plus simple de définition de classe ressemble à ceci ::"

msgid "class ClassName:     <statement-1>     .     .     .     <statement-N>"
msgstr "class NomDeLaClasse: <déclaration-1>. . . <déclaration-N>"

msgid "Class definitions, like function definitions (:keyword:`def` statements) must be executed before they have any effect.  (You could conceivably place a class definition in a branch of an :keyword:`if` statement, or inside a function.)"
msgstr ""
"Les définitions de classes, comme les définitions de fonctions (définitions "
":keyword:`def`) doivent être exécutées avant d'avoir un effet. (Vous pouvez "
"tout à fait placer une définition de classe dans une branche d'une "
"instruction conditionnelle :keyword:`if` ou encore à l'intérieur d'une "
"fonction.)"

msgid "In practice, the statements inside a class definition will usually be function definitions, but other statements are allowed, and sometimes useful --- we'll come back to this later.  The function definitions inside a class normally have a peculiar form of argument list, dictated by the calling conventions for methods --- again, this is explained later."
msgstr ""
"Dans la pratique, les déclarations dans une définition de classe seront "
"généralement des définitions de fonctions, mais d'autres déclarations sont "
"permises, et parfois utiles --- Nous reviendrons sur ce point plus tard. Les "
"définitions de fonction à l'intérieur d'une classe ont normalement une "
"forme particulière de liste d'arguments, dictée par les conventions d'appel "
"aux méthodes --- Tout ceci sera expliqué plus tard."

msgid "When a class definition is entered, a new namespace is created, and used as the local scope --- thus, all assignments to local variables go into this new namespace.  In particular, function definitions bind the name of the new function here."
msgstr ""
"Quand une classe est définie, un nouvel espace de noms est créé et utilisé "
"comme portée locale --- Ainsi, toutes les affectations de variables locales "
"entrent dans ce nouvel espace de noms. En particulier, les définitions de "
"fonctions y lient le nom de la nouvelle fonction."

#, fuzzy
msgid "When a class definition is left normally (via the end), a *class object* is created.  This is basically a wrapper around the contents of the namespace created by the class definition; we'll learn more about class objects in the next section.  The original local scope (the one in effect just before the class definition was entered) is reinstated, and the class object is bound here to the class name given in the class definition header (:class:`ClassName` in the example)."
msgstr ""
"A la fin de la définition d'une classe, un *objet classe* est créé. C'est, "
"pour simplifier, une encapsulation du contenu de de l'espace de nom créé par "
"la définition de classe. Nous reparlerons des objets classes dans la "
"prochaine section. La portée locale initiale (celle qui prévaut avant le "
"début de la définition de la classe) est réinstanciée, et l'objet de classe "
"est lié ici au nom de classe donné dans l'en-tête de définition de classe "
"(:class:`NomDeLaClasse` dans l'exemple)."

msgid "Class Objects"
msgstr "Les objets classe"

msgid "Class objects support two kinds of operations: attribute references and instantiation."
msgstr ""
"Les objets classe prennent en charge deux types d'opérations: des références "
"à des attributs et l'instanciation."

msgid "*Attribute references* use the standard syntax used for all attribute references in Python: ``obj.name``.  Valid attribute names are all the names that were in the class's namespace when the class object was created.  So, if the class definition looked like this::"
msgstr ""
"Les *références d'attributs* utilisent la syntaxe standard utilisée pour "
"toutes les références d'attributs en Python: ``obj.nom``. Les noms "
"d'attribut valides sont tous les noms qui se trouvaient dans l'espace de "
"noms de la classe quand l'objet classe a été créé. Donc, si la définition de "
"classe ressemble à ceci ::"

msgid "class MyClass:     \"\"\"A simple example class\"\"\"     i = 12345     def f(self):         return 'hello world'"
msgstr ""
"class MaClasse: \"\"\"Une simple classe d'exemple\"\"\" i = 12345 def f(self): "
"return 'hello world'"

# docstring doit il rester en anglais ou être traduit ?
msgid "then ``MyClass.i`` and ``MyClass.f`` are valid attribute references, returning an integer and a function object, respectively. Class attributes can also be assigned to, so you can change the value of ``MyClass.i`` by assignment. :attr:`__doc__` is also a valid attribute, returning the docstring belonging to the class: ``\"A simple example class\"``."
msgstr ""
"alors ``MaClasse.i`` et ``MaClasse.f`` sont des références valides à des "
"attributs, renvoyant respectivement un entier et un objet fonction. Les "
"attributs de classes peuvent également être affectés, de sorte que vous "
"pouvez modifier la valeur de ``MaClasse.i`` par affectation. :attr:`__doc__` "
"est aussi un attribut valide, renvoyant la docstring appartenant à la "
"classe : ``\"Une simple classe d'exemple\"``."

msgid "Class *instantiation* uses function notation.  Just pretend that the class object is a parameterless function that returns a new instance of the class. For example (assuming the above class)::"
msgstr ""
"L'*instanciation* de classes utilise la notation des fonctions. Considérez "
"simplement que l'objet classe est une fonction sans paramètre qui renvoie "
"une nouvelle instance de la classe. Par exemple (en considérant la classe "
"définie ci-dessus) ::"

msgid "x = MyClass()"
msgstr "x = MaClasse()"

msgid "creates a new *instance* of the class and assigns this object to the local variable ``x``."
msgstr ""
"crée une nouvelle *instance* de la classe et affecte cet objet à la variable "
"locale ``x``."

msgid "The instantiation operation (\"calling\" a class object) creates an empty object. Many classes like to create objects with instances customized to a specific initial state. Therefore a class may define a special method named :meth:`__init__`, like this::"
msgstr ""
"L'opération d'instanciation (\"appelant\" un objet classe) crée un objet vide. "
"De nombreuses classes aiment créer des objets personnalisés avec des "
"instances personnalisées en fonction d'un état initial spécifique. Ainsi une "
"classe peut définir une méthode spéciale nommée: meth:`__init__`, comme "
"ceci ::"

msgid "def __init__(self):     self.data = []"
msgstr "def __init__(self): self.data = []"

msgid "When a class defines an :meth:`__init__` method, class instantiation automatically invokes :meth:`__init__` for the newly-created class instance.  So in this example, a new, initialized instance can be obtained by::"
msgstr ""
"Quand une classe définit une méthode :meth:`__init__`, l'instanciation de la "
"classe appelle automatiquement :meth:`__init__` pour la nouvelle instance "
"de la classe. Donc, dans cet exemple, l'initialisation d'une nouvelle "
"instance peut être obtenue par ::"

msgid "Of course, the :meth:`__init__` method may have arguments for greater flexibility.  In that case, arguments given to the class instantiation operator are passed on to :meth:`__init__`.  For example, ::"
msgstr ""
"Bien sûr, la méthode meth::`__init__` peut avoir des arguments pour une plus "
"grande flexibilité. Dans ce cas, les arguments donnés à l'opérateur "
"d'instanciation de classe sont transmis à :meth:`__init__`. Par exemple, ::"

msgid ">>> class Complex: ...     def __init__(self, realpart, imagpart): ...         self.r = realpart ...         self.i = imagpart ... >>> x = Complex(3.0, -4.5) >>> x.r, x.i (3.0, -4.5)"
msgstr ""
">>> class Complexe: ...     def __init__(self, partie_reelle, "
"partie_imaginaire): ...         self.r = partie_reelle ...         self.i = "
"partie_imaginaire ... >>> x = Complexe(3.0, -4.5) >>> x.r, x.i (3.0, -4.5)"

msgid "Instance Objects"
msgstr "Objets instance"

msgid "Now what can we do with instance objects?  The only operations understood by instance objects are attribute references.  There are two kinds of valid attribute names, data attributes and methods."
msgstr ""
"Maintenant, que pouvons-nous faire avec des objets instance ? Les seules "
"opérations comprises par objets instance sont des références d'attribut. Il "
"y a deux sortes de noms d'attributs valides, les attributs données et les "
"méthodes."

#, fuzzy
msgid "*data attributes* correspond to \"instance variables\" in Smalltalk, and to \"data members\" in C++.  Data attributes need not be declared; like local variables, they spring into existence when they are first assigned to.  For example, if ``x`` is the instance of :class:`MyClass` created above, the following piece of code will print the value ``16``, without leaving a trace::"
msgstr ""
"Les *attributs données* correspondent à des \"variables d'instance\" en "
"Smalltalk, et aux \"membres de données\" en C++. Les attributs données n'ont "
"pas à être déclarés. Comme les variables locales, ils existent dès lors "
"qu'ils sont attribués une première fois. Par exemple, si ``x`` est "
"l'instance de :class:`MaClasse` créée ci-dessus, le code suivant affiche la "
"valeur ``16 ``, sans laisser de traces ::"

msgid "x.counter = 1 while x.counter < 10:     x.counter = x.counter * 2 print(x.counter) del x.counter"
msgstr ""
"x.compteur = 1 while x.compteur < 10:     x.compteur = x.compteur * 2 "
"print(x.compteur) del x.compteur"

msgid "The other kind of instance attribute reference is a *method*. A method is a function that \"belongs to\" an object.  (In Python, the term method is not unique to class instances: other object types can have methods as well.  For example, list objects have methods called append, insert, remove, sort, and so on. However, in the following discussion, we'll use the term method exclusively to mean methods of class instance objects, unless explicitly stated otherwise.)"
msgstr ""
"L'autre type de référence à un attribut d'instance est une *méthode*. Une "
"méthode est une fonction qui \"appartient à\" un objet. (En Python, le terme "
"de méthode n'est pas unique aux instances de classe: d'autres types d'objets "
"peuvent aussi avoir des méthodes. Par exemple, les objets liste ont des "
"méthodes appelées append, insert, remove, sort, et ainsi de suite. "
"Toutefois, dans la discussion qui suit, sauf indication contraire, nous "
"allons utiliser le terme de méthode exclusivement en référence à des "
"méthodes d'objets instance de classe.)"

msgid "Valid method names of an instance object depend on its class.  By definition, all attributes of a class that are function  objects define corresponding methods of its instances.  So in our example, ``x.f`` is a valid method reference, since ``MyClass.f`` is a function, but ``x.i`` is not, since ``MyClass.i`` is not.  But ``x.f`` is not the same thing as ``MyClass.f`` --- it is a *method object*, not a function object."
msgstr ""
"Les noms de méthodes valides d'un objet instance dépendent de sa classe. Par "
"définition, tous les attributs d'une classe qui sont des objets  fonction "
"définissent les méthodes correspondantes de ses instances. Donc, dans notre "
"exemple, ``x.f`` est une méthode de référence valide, car ``MaClasse.f`` est "
"une fonction, mais pas ``x.i`` car ``MaClasse.i`` n'en est pas une. "
"Attention cependant, ``x.f`` n'est pas la même chose que ``MaClasse.f`` --- "
"Il s'agit d'un *objet méthode*, pas d'un objet fonction."

msgid "Method Objects"
msgstr "Les objets méthode"

msgid "Usually, a method is called right after it is bound::"
msgstr ""

msgid "x.f()"
msgstr ""

#, fuzzy
msgid "In the :class:`MyClass` example, this will return the string ``'hello world'``. However, it is not necessary to call a method right away: ``x.f`` is a method object, and can be stored away and called at a later time.  For example::"
msgstr ""
"Dans l'exemple de la class :class! `MaClass`, cela va retourner la chaine de "
"caractère ``hello world``. Toutefois, il n'est pas nécessaire d'appeler la "
"méthode directement: ``x.f`` est un objet methode, il peut être gardé de "
"coté et être appelé plus tard. Par exemple::"

#, fuzzy
msgid "xf = x.f while True:     print(xf())"
msgstr "xf = x.f while True: print(xf())"

#, fuzzy
msgid "will continue to print ``hello world`` until the end of time."
msgstr "va afficher ``hello world`` jusqu'à la fin des temps."

#, fuzzy
msgid "What exactly happens when a method is called?  You may have noticed that ``x.f()`` was called without an argument above, even though the function definition for :meth:`f` specified an argument.  What happened to the argument? Surely Python raises an exception when a function that requires an argument is called without any --- even if the argument isn't actually used..."
msgstr ""
"Que ce passe-t-il exactement quand une méthode est appelé ? Vous avez du "
"remarqué que ``x.f()`` a été appelé dans le code au dessus sans argument, "
"alors que la définition de la méthode :meth: `f` spécifie bien qu'elle prend "
"un argument. Qu'est il arrivé à l'argument ? Python doit surement lever une "
"exception lorsqu'une fonction qui requiert un argument est appelé sans -- "
"même si l'argument n'est pas utilisé."

#, fuzzy
msgid "Actually, you may have guessed the answer: the special thing about methods is that the object is passed as the first argument of the function.  In our example, the call ``x.f()`` is exactly equivalent to ``MyClass.f(x)``.  In general, calling a method with a list of *n* arguments is equivalent to calling the corresponding function with an argument list that is created by inserting the method's object before the first argument."
msgstr ""
"En fait, vous aurez peut-être deviné la réponse: la particularité des "
"méthodes est que l'objet est passé comme premier argument de la fonction. "
"Dans notre exemple, l'appel ``x.f ()`` est exactement équivalent à "
"``MaClasse.f(x)``. En général, appeler une méthode avec une liste "
"d'arguments *n* est équivalent à appeler la fonction correspondante avec "
"cette liste d'arguments modulo l'insertion de l'objet de la méthode avant le "
"premier argument."

#, fuzzy
msgid "If you still don't understand how methods work, a look at the implementation can perhaps clarify matters.  When an instance attribute is referenced that isn't a data attribute, its class is searched.  If the name denotes a valid class attribute that is a function object, a method object is created by packing (pointers to) the instance object and the function object just found together in an abstract object: this is the method object.  When the method object is called with an argument list, a new argument list is constructed from the instance object and the argument list, and the function object is called with this new argument list."
msgstr ""
"Si vous ne comprenez toujours pas comment les méthodes fonctionnent, un coup "
"d'œil à l'implémentation vous aidera peut être. Lorsque l'instance d'un "
"attribut est référencé qui n'ai pas un attribut donnée, sa classe est "
"recherché. Si le nom de la classe correspond à un attribut valide qui est "
"une fonction, alors un objet abstrait qui pointe vers l'objet instance et "
"l'objet fonction que l'on a trouvé. Cette objet abstrait est l'objet "
"méthode. Lorsque l'objet méthode est appelé avec une liste d'argument, une "
"nouvelle liste d'argument est construite à partir de l'objet méthode et de "
"la liste des argument. L'objet fonction est appelé avec cette nouvelle liste "
"d'argument."

msgid "Random Remarks"
msgstr "Remarques diverses"

msgid "Data attributes override method attributes with the same name; to avoid accidental name conflicts, which may cause hard-to-find bugs in large programs, it is wise to use some kind of convention that minimizes the chance of conflicts.  Possible conventions include capitalizing method names, prefixing data attribute names with a small unique string (perhaps just an underscore), or using verbs for methods and nouns for data attributes."
msgstr ""
"Les attributs de données surchargent les méthodes avec le même nom; pour "
"éviter des conflits de nommage, qui peuvent causer des bugs difficiles à "
"trouver dans de grands programmes, il est sage d'adopter certaines "
"conventions qui minimisent les risques de conflits. Les conventions "
"possibles comprennent la mise en majuscule des noms de méthodes, le préfixe "
"des noms d'attributs de données par une chaîne courte et unique (parfois "
"juste la caractère souligné), ou l'utilisation de verbes pour les méthodes "
"et de noms pour les attributs de données."

msgid "Data attributes may be referenced by methods as well as by ordinary users (\"clients\") of an object.  In other words, classes are not usable to implement pure abstract data types.  In fact, nothing in Python makes it possible to enforce data hiding --- it is all based upon convention.  (On the other hand, the Python implementation, written in C, can completely hide implementation details and control access to an object if necessary; this can be used by extensions to Python written in C.)"
msgstr ""
"Les attributs de données peuvent être référencés par des méthodes comme par "
"des utilisateurs ordinaires (\"clients\") d'un objet. En d'autres termes, les "
"classes ne sont pas utilisables pour implémenter des types de données "
"purement abstraits. En fait, rien en Python ne rend possible d'imposer de "
"masquer des données --- tout est basé sur des conventions. (D'un autre coté, "
"l'implémentation Python, écrite en C, peut complètement masquer les détails "
"d'implémentation et contrôler l'accès à un objet si nécessaire ; ceci peut "
"être utilisé par des extensions de Python écrites en C.)"

msgid "Clients should use data attributes with care --- clients may mess up invariants maintained by the methods by stamping on their data attributes.  Note that clients may add data attributes of their own to an instance object without affecting the validity of the methods, as long as name conflicts are avoided --- again, a naming convention can save a lot of headaches here."
msgstr ""
"Les clients doivent utiliser les attributs de données avec précaution --- "
"ils pourraient mettre le désordre dans les invariants gérés par les méthodes "
"avec leurs propres valeurs d'attributs. Remarquez que les clients peuvent "
"ajouter leurs propres attributs de données à une instance d'objet sans "
"altérer la validité des méthodes, pour autant que les noms n'entrent pas en "
"conflit --- aussi, adopter une convention de nommage peut éviter bien des "
"problèmes."

#, fuzzy
msgid "There is no shorthand for referencing data attributes (or other methods!) from within methods.  I find that this actually increases the readability of methods: there is no chance of confusing local variables and instance variables when glancing through a method."
msgstr ""
"Il n'y a pas de notation abrégée pour référencer des attributs de données "
"(ou d'autres méthodes!) depuis les méthodes. Nous pensons que ceci améliore "
"en fait la lisibilité des méthodes : il n'y a aucune chance de confondre "
"variables locales et variables d'instances quand on regarde le code d'une "
"méthode."

msgid "Often, the first argument of a method is called ``self``.  This is nothing more than a convention: the name ``self`` has absolutely no special meaning to Python.  Note, however, that by not following the convention your code may be less readable to other Python programmers, and it is also conceivable that a *class browser* program might be written that relies upon such a convention."
msgstr ""
"Souvent, le premier argument d'une méthode est nommé ``self``. Ce n'est "
"qu'une convention : le nom ``self`` n'a aucune signification particulière en "
"Python. Notez cependant que si vous ne suivez pas cette convention, votre "
"code risque d'être moins lisible pour d'autres programmeurs Python, et il "
"est aussi possible qu'un programme qui fasse l'introspection de classes "
"repose sur une telle convention."

msgid "Any function object that is a class attribute defines a method for instances of that class.  It is not necessary that the function definition is textually enclosed in the class definition: assigning a function object to a local variable in the class is also ok.  For example::"
msgstr ""
"Tout objet fonction qui est un attribut de classe définit une méthode pour "
"des instances de cette classe. Il n'est pas nécessaire que le texte de "
"définition de la fonction soit dans la définition de la classe : il est "
"possible d'affecter un objet fonction à une variable locale de la classe. "
"Par exemple ::"

msgid "# Function defined outside the class def f1(self, x, y):     return min(x, x+y)  class C:     f = f1     def g(self):         return 'hello world'     h = g"
msgstr ""
"# Function définie à l'extérieur d'une classe def f1(self, x, y): return "
"min(x, x+y) class C: f = f1 def g(self): return 'bonjour tout le monde' h = "
"g"

#, fuzzy
msgid "Now ``f``, ``g`` and ``h`` are all attributes of class :class:`C` that refer to function objects, and consequently they are all methods of instances of :class:`C` --- ``h`` being exactly equivalent to ``g``.  Note that this practice usually only serves to confuse the reader of a program."
msgstr ""
"Maintenant, ``f``, ``g`` et ``h`` sont tous des attributs des classes "
":class:`C` faisant référence aux fonctions objets, et par conséquent sont "
"toutes des méthodes des instances de :class:`C` --- ``h`` est exactement "
"identique à ``g``. Remarquez qu'en pratique, ceci ne sert qu'à embrouiller "
"le lecteur d'un programme."

msgid "Methods may call other methods by using method attributes of the ``self`` argument::"
msgstr ""
"Les méthodes peuvent appeler d'autres méthodes en utilisant des méthodes qui "
"sont des attributs de l'argument ``self`` ::"

msgid "class Bag:     def __init__(self):         self.data = []     def add(self, x):         self.data.append(x)     def addtwice(self, x):         self.add(x)         self.add(x)"
msgstr ""

msgid "Methods may reference global names in the same way as ordinary functions.  The global scope associated with a method is the module containing the class definition.  (The class itself is never used as a global scope.)  While one rarely encounters a good reason for using global data in a method, there are many legitimate uses of the global scope: for one thing, functions and modules imported into the global scope can be used by methods, as well as functions and classes defined in it.  Usually, the class containing the method is itself defined in this global scope, and in the next section we'll find some good reasons why a method would want to reference its own class."
msgstr ""
"Les méthodes peuvent faire référence à des noms globaux de la même manière "
"que les fonctions. La portée globale associée à une méthode est le module "
"contenant la définition de la classe. (La classe elle même n'est jamais "
"utilisée en tant que portée globale.) Alors qu'on rencontre rarement une "
"bonne raison d'utiliser des données globales dans une méthode, il y a de "
"nombreuses utilisations légitimes d'une portée globale: par exemple, les "
"fonctions et modules importés dans une portée globale peuvent être utilisés "
"par des méthodes, de même que les fonctions et classes définies dans cette "
"même portée. Habituellement, la classe contenant la méthode est elle même "
"définie dans cette portée globale, et dans la section suivante, nous verrons "
"de bonnes raisons pour qu'une méthode référence sa propre classe."

msgid "Each value is an object, and therefore has a *class* (also called its *type*). It is stored as ``object.__class__``."
msgstr ""
"Toute valeur est un objet, et a donc une *classe* (appelé aussi son *type*). "
"Elle est stockée dans ``objet.__class__``."

msgid "Inheritance"
msgstr "L'héritage"

msgid "Of course, a language feature would not be worthy of the name \"class\" without supporting inheritance.  The syntax for a derived class definition looks like this::"
msgstr ""
"Bien sûr, ce terme de «classe» ne serait pas utilisé s'il n'y avait pas "
"l'héritage. La syntaxe pour définir une sous-classe ressemble à ceci ::"

msgid "class DerivedClassName(BaseClassName):     <statement-1>     .     .     .     <statement-N>"
msgstr ""
"class ClasseDerivee(ClasseDeBase): <déclaration-1> . . . <déclaration-N>"

msgid "The name :class:`BaseClassName` must be defined in a scope containing the derived class definition.  In place of a base class name, other arbitrary expressions are also allowed.  This can be useful, for example, when the base class is defined in another module::"
msgstr ""
"Le nom :class:`ClasseDeBase` doit être défini dans un espace contenant la "
"définition de la classe dérivée. A la place du nom d'une classe de base, une "
"expression est aussi autorisée. Ceci peut être utile, par exemple, lorsque "
"la classe est définie dans un autre module ::"

msgid "class DerivedClassName(modname.BaseClassName):"
msgstr "class ClasseDerivee(nommodule.ClasseDeBase):"

msgid "Execution of a derived class definition proceeds the same as for a base class. When the class object is constructed, the base class is remembered.  This is used for resolving attribute references: if a requested attribute is not found in the class, the search proceeds to look in the base class.  This rule is applied recursively if the base class itself is derived from some other class."
msgstr ""
"L'exécution d'une définition de classe dérivée se déroule comme pour une "
"classe de base. Quand l'objet de la classe est construit, la classe de base "
"est mémorisée. Elle est utilisé pour la résolution des références "
"d'attribut: si un attribut n'est pas trouvé dans la classe, la recherche "
"procède en regardant dans la classe de base. Cette règle est appliquée "
"récursivement si la classe de base est elle-même dérivée d'une autre classe."

msgid "There's nothing special about instantiation of derived classes: ``DerivedClassName()`` creates a new instance of the class.  Method references are resolved as follows: the corresponding class attribute is searched, descending down the chain of base classes if necessary, and the method reference is valid if this yields a function object."
msgstr ""

msgid "Derived classes may override methods of their base classes.  Because methods have no special privileges when calling other methods of the same object, a method of a base class that calls another method defined in the same base class may end up calling a method of a derived class that overrides it.  (For C++ programmers: all methods in Python are effectively ``virtual``.)"
msgstr ""
"Les classes dérivées peuvent surcharger des méthodes de leurs classes de "
"base. Comme les méthodes n'ont aucun privilège particulier quand elles "
"appellent d'autres méthodes d'un même objet, une méthode d'une classe de "
"base qui appelle une autre méthode définie dans la même classe peut en fait "
"appeler une méthode d'une classe dérivée qui la surcharge. (Pour les "
"programmeurs C++ : toutes les méthodes de Python sont en effet ``virtual``.)"

msgid "An overriding method in a derived class may in fact want to extend rather than simply replace the base class method of the same name. There is a simple way to call the base class method directly: just call ``BaseClassName.methodname(self, arguments)``.  This is occasionally useful to clients as well.  (Note that this only works if the base class is accessible as ``BaseClassName`` in the global scope.)"
msgstr ""

msgid "Python has two built-in functions that work with inheritance:"
msgstr ""

msgid "Use :func:`isinstance` to check an instance's type: ``isinstance(obj, int)`` will be ``True`` only if ``obj.__class__`` is :class:`int` or some class derived from :class:`int`."
msgstr ""

msgid "Use :func:`issubclass` to check class inheritance: ``issubclass(bool, int)`` is ``True`` since :class:`bool` is a subclass of :class:`int`.  However, ``issubclass(float, int)`` is ``False`` since :class:`float` is not a subclass of :class:`int`."
msgstr ""

msgid "Multiple Inheritance"
msgstr "L'héritage multiple"

#, fuzzy
msgid "Python supports a form of multiple inheritance as well.  A class definition with multiple base classes looks like this::"
msgstr ""
"Python propose également une forme d'héritage multiple. Une définition de "
"classe ayant plusieurs classes de base ressemble à ::"

#, fuzzy
msgid "class DerivedClassName(Base1, Base2, Base3):     <statement-1>     .     .     .     <statement-N>"
msgstr ""
"class NomDeLaClasseDerivee(Base1, Base2, Base3): <instruction-1> . . . "
"<instruction-N>"

#, fuzzy
msgid "For most purposes, in the simplest cases, you can think of the search for attributes inherited from a parent class as depth-first, left-to-right, not searching twice in the same class where there is an overlap in the hierarchy. Thus, if an attribute is not found in :class:`DerivedClassName`, it is searched for in :class:`Base1`, then (recursively) in the base classes of :class:`Base1`, and if it was not found there, it was searched for in :class:`Base2`, and so on."
msgstr ""
"Dans la plupart des utilisations, pour les cas les plus simples, vous pouvez "
"vous représenter la recherche des attributs hérités depuis une classe "
"parente sous forme en profondeur d'abord et de gauche à droite, sans "
"recherche en double lorsqu'il y a recouvrement dans la hiérarchie des "
"classes. Ainsi, si un attribut n'est pas trouvé dans "
":class:`NomDeLaClasseDerivee`, il est recherché dans :class: `Base1`,"

msgid "In fact, it is slightly more complex than that; the method resolution order changes dynamically to support cooperative calls to :func:`super`.  This approach is known in some other multiple-inheritance languages as call-next-method and is more powerful than the super call found in single-inheritance languages."
msgstr ""

msgid "Dynamic ordering is necessary because all cases of multiple inheritance exhibit one or more diamond relationships (where at least one of the parent classes can be accessed through multiple paths from the bottommost class).  For example, all classes inherit from :class:`object`, so any case of multiple inheritance provides more than one path to reach :class:`object`.  To keep the base classes from being accessed more than once, the dynamic algorithm linearizes the search order in a way that preserves the left-to-right ordering specified in each class, that calls each parent only once, and that is monotonic (meaning that a class can be subclassed without affecting the precedence order of its parents). Taken together, these properties make it possible to design reliable and extensible classes with multiple inheritance.  For more detail, see http://www.python.org/download/releases/2.3/mro/."
msgstr ""

msgid "Private Variables"
msgstr ""

msgid "\"Private\" instance variables that cannot be accessed except from inside an object don't exist in Python.  However, there is a convention that is followed by most Python code: a name prefixed with an underscore (e.g. ``_spam``) should be treated as a non-public part of the API (whether it is a function, a method or a data member).  It should be considered an implementation detail and subject to change without notice."
msgstr ""

msgid "Since there is a valid use-case for class-private members (namely to avoid name clashes of names with names defined by subclasses), there is limited support for such a mechanism, called :dfn:`name mangling`.  Any identifier of the form ``__spam`` (at least two leading underscores, at most one trailing underscore) is textually replaced with ``_classname__spam``, where ``classname`` is the current class name with leading underscore(s) stripped.  This mangling is done without regard to the syntactic position of the identifier, as long as it occurs within the definition of a class."
msgstr ""

msgid "Note that the mangling rules are designed mostly to avoid accidents; it still is possible to access or modify a variable that is considered private.  This can even be useful in special circumstances, such as in the debugger."
msgstr ""

msgid "Notice that code passed to ``exec()``, ``eval()`` or ``execfile()`` does not consider the classname of the invoking  class to be the current class; this is similar to the effect of the  ``global`` statement, the effect of which is likewise restricted to  code that is byte-compiled together.  The same restriction applies to ``getattr()``, ``setattr()`` and ``delattr()``, as well as when referencing ``__dict__`` directly."
msgstr ""

msgid "Odds and Ends"
msgstr ""

msgid "Sometimes it is useful to have a data type similar to the Pascal \"record\" or C \"struct\", bundling together a few named data items.  An empty class definition will do nicely::"
msgstr ""

msgid "class Employee:     pass  john = Employee() # Create an empty employee record  # Fill the fields of the record john.name = 'John Doe' john.dept = 'computer lab' john.salary = 1000"
msgstr ""

msgid "A piece of Python code that expects a particular abstract data type can often be passed a class that emulates the methods of that data type instead.  For instance, if you have a function that formats some data from a file object, you can define a class with methods :meth:`read` and :meth:`readline` that get the data from a string buffer instead, and pass it as an argument."
msgstr ""

msgid "Instance method objects have attributes, too: ``m.__self__`` is the instance object with the method :meth:`m`, and ``m.__func__`` is the function object corresponding to the method."
msgstr ""

msgid "Exceptions Are Classes Too"
msgstr ""

msgid "User-defined exceptions are identified by classes as well.  Using this mechanism it is possible to create extensible hierarchies of exceptions."
msgstr ""

msgid "There are two new valid (semantic) forms for the :keyword:`raise` statement::"
msgstr ""

msgid "raise Class  raise Instance"
msgstr ""

msgid "In the first form, ``Class`` must be an instance of :class:`type` or of a class derived from it.  The first form is a shorthand for::"
msgstr ""

msgid "raise Class()"
msgstr ""

msgid "A class in an :keyword:`except` clause is compatible with an exception if it is the same class or a base class thereof (but not the other way around --- an except clause listing a derived class is not compatible with a base class).  For example, the following code will print B, C, D in that order::"
msgstr ""

msgid "class B(Exception):     pass class C(B):     pass class D(C):     pass  for c in [B, C, D]:     try:         raise c()     except D:         print(\"D\")     except C:         print(\"C\")     except B:         print(\"B\")"
msgstr ""

msgid "Note that if the except clauses were reversed (with ``except B`` first), it would have printed B, B, B --- the first matching except clause is triggered."
msgstr ""

msgid "When an error message is printed for an unhandled exception, the exception's class name is printed, then a colon and a space, and finally the instance converted to a string using the built-in function :func:`str`."
msgstr ""

msgid "Iterators"
msgstr ""

msgid "By now you have probably noticed that most container objects can be looped over using a :keyword:`for` statement::"
msgstr ""

msgid "for element in [1, 2, 3]:     print(element) for element in (1, 2, 3):     print(element) for key in {'one':1, 'two':2}:     print(key) for char in \"123\":     print(char) for line in open(\"myfile.txt\"):     print(line)"
msgstr ""

msgid "This style of access is clear, concise, and convenient.  The use of iterators pervades and unifies Python.  Behind the scenes, the :keyword:`for` statement calls :func:`iter` on the container object.  The function returns an iterator object that defines the method :meth:`__next__` which accesses elements in the container one at a time.  When there are no more elements, :meth:`__next__` raises a :exc:`StopIteration` exception which tells the :keyword:`for` loop to terminate.  You can call the :meth:`__next__` method using the :func:`next` built-in function; this example shows how it all works::"
msgstr ""

msgid ">>> s = 'abc' >>> it = iter(s) >>> it <iterator object at 0x00A1DB50> >>> next(it) 'a' >>> next(it) 'b' >>> next(it) 'c' >>> next(it)  Traceback (most recent call last):   File \"<stdin>\", line 1, in ?     next(it) StopIteration"
msgstr ""

msgid "Having seen the mechanics behind the iterator protocol, it is easy to add iterator behavior to your classes.  Define a :meth:`__iter__` method which returns an object with a :meth:`__next__` method.  If the class defines :meth:`__next__`, then :meth:`__iter__` can just return ``self``::"
msgstr ""

msgid "class Reverse:     \"Iterator for looping over a sequence backwards\"     def __init__(self, data):         self.data = data         self.index = len(data)     def __iter__(self):         return self     def __next__(self):         if self.index == 0:             raise StopIteration         self.index = self.index - 1         return self.data[self.index]  >>> for char in Reverse('spam'): ...     print(char) ... m a p s"
msgstr ""

msgid "Generators"
msgstr ""

msgid ":term:`Generator`\\s are a simple and powerful tool for creating iterators.  They are written like regular functions but use the :keyword:`yield` statement whenever they want to return data.  Each time :func:`next` is called on it, the generator resumes where it left-off (it remembers all the data values and which statement was last executed).  An example shows that generators can be trivially easy to create::"
msgstr ""

msgid "def reverse(data):     for index in range(len(data)-1, -1, -1):         yield data[index]  >>> for char in reverse('golf'): ...     print(char) ... f l o g"
msgstr ""

msgid "Anything that can be done with generators can also be done with class based iterators as described in the previous section.  What makes generators so compact is that the :meth:`__iter__` and :meth:`__next__` methods are created automatically."
msgstr ""

msgid "Another key feature is that the local variables and execution state are automatically saved between calls.  This made the function easier to write and much more clear than an approach using instance variables like ``self.index`` and ``self.data``."
msgstr ""

msgid "In addition to automatic method creation and saving program state, when generators terminate, they automatically raise :exc:`StopIteration`. In combination, these features make it easy to create iterators with no more effort than writing a regular function."
msgstr ""

msgid "Generator Expressions"
msgstr ""

msgid "Some simple generators can be coded succinctly as expressions using a syntax similar to list comprehensions but with parentheses instead of brackets.  These expressions are designed for situations where the generator is used right away by an enclosing function.  Generator expressions are more compact but less versatile than full generator definitions and tend to be more memory friendly than equivalent list comprehensions."
msgstr ""

msgid "Examples::"
msgstr ""

msgid ">>> sum(i*i for i in range(10))                 # sum of squares 285  >>> xvec = [10, 20, 30] >>> yvec = [7, 5, 3] >>> sum(x*y for x,y in zip(xvec, yvec))         # dot product 260  >>> from math import pi, sin >>> sine_table = {x: sin(x*pi/180) for x in range(0, 91)}  >>> unique_words = set(word  for line in page  for word in line.split())  >>> valedictorian = max((student.gpa, student.name) for student in graduates)  >>> data = 'golf' >>> list(data[i] for i in range(len(data)-1, -1, -1)) ['f', 'l', 'o', 'g']"
msgstr ""

msgid "Footnotes"
msgstr ""

msgid "Except for one thing.  Module objects have a secret read-only attribute called :attr:`__dict__` which returns the dictionary used to implement the module's namespace; the name :attr:`__dict__` is an attribute but not a global name. Obviously, using this violates the abstraction of namespace implementation, and should be restricted to things like post-mortem debuggers."
msgstr ""

msgid "More Control Flow Tools"
msgstr ""

msgid "Besides the :keyword:`while` statement just introduced, Python knows the usual control flow statements known from other languages, with some twists."
msgstr ""

msgid ":keyword:`if` Statements"
msgstr ""

msgid "Perhaps the most well-known statement type is the :keyword:`if` statement.  For example::"
msgstr ""

msgid ">>> x = int(input(\"Please enter an integer: \")) Please enter an integer: 42 >>> if x < 0: ...      x = 0 ...      print('Negative changed to zero') ... elif x == 0: ...      print('Zero') ... elif x == 1: ...      print('Single') ... else: ...      print('More') ... More"
msgstr ""

msgid "There can be zero or more :keyword:`elif` parts, and the :keyword:`else` part is optional.  The keyword ':keyword:`elif`' is short for 'else if', and is useful to avoid excessive indentation.  An  :keyword:`if` ... :keyword:`elif` ... :keyword:`elif` ... sequence is a substitute for the ``switch`` or ``case`` statements found in other languages."
msgstr ""

msgid ":keyword:`for` Statements"
msgstr ""

msgid "The :keyword:`for` statement in Python differs a bit from what you may be used to in C or Pascal.  Rather than always iterating over an arithmetic progression of numbers (like in Pascal), or giving the user the ability to define both the iteration step and halting condition (as C), Python's :keyword:`for` statement iterates over the items of any sequence (a list or a string), in the order that they appear in the sequence.  For example (no pun intended):"
msgstr ""

msgid ">>> # Measure some strings: ... a = ['cat', 'window', 'defenestrate'] >>> for x in a: ...     print(x, len(x)) ... cat 3 window 6 defenestrate 12"
msgstr ""

msgid "It is not safe to modify the sequence being iterated over in the loop (this can only happen for mutable sequence types, such as lists).  If you need to modify the list you are iterating over (for example, to duplicate selected items) you must iterate over a copy.  The slice notation makes this particularly convenient::"
msgstr ""

msgid ">>> for x in a[:]: # make a slice copy of the entire list ...    if len(x) > 6: a.insert(0, x) ... >>> a ['defenestrate', 'cat', 'window', 'defenestrate']"
msgstr ""

msgid "The :func:`range` Function"
msgstr ""

msgid "If you do need to iterate over a sequence of numbers, the built-in function :func:`range` comes in handy.  It generates arithmetic progressions::"
msgstr ""

msgid ">>> for i in range(5): ...     print(i) ... 0 1 2 3 4"
msgstr ""

msgid "The given end point is never part of the generated sequence; ``range(10)`` generates 10 values, the legal indices for items of a sequence of length 10.  It is possible to let the range start at another number, or to specify a different increment (even negative; sometimes this is called the 'step')::"
msgstr ""

msgid "range(5, 10)    5 through 9  range(0, 10, 3)    0, 3, 6, 9  range(-10, -100, -30)   -10, -40, -70"
msgstr ""

msgid "To iterate over the indices of a sequence, you can combine :func:`range` and :func:`len` as follows::"
msgstr ""

msgid ">>> a = ['Mary', 'had', 'a', 'little', 'lamb'] >>> for i in range(len(a)): ...     print(i, a[i]) ... 0 Mary 1 had 2 a 3 little 4 lamb"
msgstr ""

msgid "In most such cases, however, it is convenient to use the :func:`enumerate` function, see :ref:`tut-loopidioms`."
msgstr ""

msgid "A strange thing happens if you just print a range::"
msgstr ""

msgid ">>> print(range(10)) range(0, 10)"
msgstr ""

msgid "In many ways the object returned by :func:`range` behaves as if it is a list, but in fact it isn't. It is an object which returns the successive items of the desired sequence when you iterate over it, but it doesn't really make the list, thus saving space."
msgstr ""

msgid "We say such an object is *iterable*, that is, suitable as a target for functions and constructs that expect something from which they can obtain successive items until the supply is exhausted. We have seen that the :keyword:`for` statement is such an *iterator*. The function :func:`list` is another; it creates lists from iterables::"
msgstr ""

msgid ">>> list(range(5)) [0, 1, 2, 3, 4]"
msgstr ""

msgid "Later we will see more functions that return iterables and take iterables as argument."
msgstr ""

msgid ":keyword:`break` and :keyword:`continue` Statements, and :keyword:`else` Clauses on Loops"
msgstr ""

msgid "The :keyword:`break` statement, like in C, breaks out of the smallest enclosing :keyword:`for` or :keyword:`while` loop."
msgstr ""

msgid "The :keyword:`continue` statement, also borrowed from C, continues with the next iteration of the loop."
msgstr ""

msgid "Loop statements may have an ``else`` clause; it is executed when the loop terminates through exhaustion of the list (with :keyword:`for`) or when the condition becomes false (with :keyword:`while`), but not when the loop is terminated by a :keyword:`break` statement.  This is exemplified by the following loop, which searches for prime numbers::"
msgstr ""

msgid ">>> for n in range(2, 10): ...     for x in range(2, n): ...         if n % x == 0: ...             print(n, 'equals', x, '*', n//x) ...             break ...     else: ...         # loop fell through without finding a factor ...         print(n, 'is a prime number') ... 2 is a prime number 3 is a prime number 4 equals 2 * 2 5 is a prime number 6 equals 2 * 3 7 is a prime number 8 equals 2 * 4 9 equals 3 * 3"
msgstr ""

msgid ":keyword:`pass` Statements"
msgstr ""

msgid "The :keyword:`pass` statement does nothing. It can be used when a statement is required syntactically but the program requires no action. For example::"
msgstr ""

msgid ">>> while True: ...     pass  # Busy-wait for keyboard interrupt (Ctrl+C) ..."
msgstr ""

msgid "This is commonly used for creating minimal classes::"
msgstr ""

msgid ">>> class MyEmptyClass: ...     pass ..."
msgstr ""

msgid "Another place :keyword:`pass` can be used is as a place-holder for a function or conditional body when you are working on new code, allowing you to keep thinking at a more abstract level.  The :keyword:`pass` is silently ignored::"
msgstr ""

msgid ">>> def initlog(*args): ...     pass   # Remember to implement this! ..."
msgstr ""

msgid "Defining Functions"
msgstr ""

msgid "We can create a function that writes the Fibonacci series to an arbitrary boundary::"
msgstr ""

msgid ">>> def fib(n):    # write Fibonacci series up to n ...     \"\"\"Print a Fibonacci series up to n.\"\"\" ...     a, b = 0, 1 ...     while a < n: ...         print(a, end=' ') ...         a, b = b, a+b ...     print() ... >>> # Now call the function we just defined: ... fib(2000) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597"
msgstr ""

msgid "The keyword :keyword:`def` introduces a function *definition*.  It must be followed by the function name and the parenthesized list of formal parameters. The statements that form the body of the function start at the next line, and must be indented."
msgstr ""

msgid "The first statement of the function body can optionally be a string literal; this string literal is the function's documentation string, or :dfn:`docstring`. (More about docstrings can be found in the section :ref:`tut-docstrings`.) There are tools which use docstrings to automatically produce online or printed documentation, or to let the user interactively browse through code; it's good practice to include docstrings in code that you write, so make a habit of it."
msgstr ""

msgid "The *execution* of a function introduces a new symbol table used for the local variables of the function.  More precisely, all variable assignments in a function store the value in the local symbol table; whereas variable references first look in the local symbol table, then in the local symbol tables of enclosing functions, then in the global symbol table, and finally in the table of built-in names. Thus, global variables cannot be directly assigned a value within a function (unless named in a :keyword:`global` statement), although they may be referenced."
msgstr ""

msgid "The actual parameters (arguments) to a function call are introduced in the local symbol table of the called function when it is called; thus, arguments are passed using *call by value* (where the *value* is always an object *reference*, not the value of the object). [#]_ When a function calls another function, a new local symbol table is created for that call."
msgstr ""

msgid "A function definition introduces the function name in the current symbol table. The value of the function name has a type that is recognized by the interpreter as a user-defined function.  This value can be assigned to another name which can then also be used as a function.  This serves as a general renaming mechanism::"
msgstr ""

msgid ">>> fib <function fib at 10042ed0> >>> f = fib >>> f(100) 0 1 1 2 3 5 8 13 21 34 55 89"
msgstr ""

msgid "Coming from other languages, you might object that ``fib`` is not a function but a procedure since it doesn't return a value.  In fact, even functions without a :keyword:`return` statement do return a value, albeit a rather boring one.  This value is called ``None`` (it's a built-in name).  Writing the value ``None`` is normally suppressed by the interpreter if it would be the only value written. You can see it if you really want to using :func:`print`::"
msgstr ""

msgid ">>> fib(0) >>> print(fib(0)) None"
msgstr ""

msgid "It is simple to write a function that returns a list of the numbers of the Fibonacci series, instead of printing it::"
msgstr ""

msgid ">>> def fib2(n): # return Fibonacci series up to n ...     \"\"\"Return a list containing the Fibonacci series up to n.\"\"\" ...     result = [] ...     a, b = 0, 1 ...     while a < n: ...         result.append(a)    # see below ...         a, b = b, a+b ...     return result ... >>> f100 = fib2(100)    # call it >>> f100                # write the result [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]"
msgstr ""

msgid "This example, as usual, demonstrates some new Python features:"
msgstr ""

msgid "The :keyword:`return` statement returns with a value from a function. :keyword:`return` without an expression argument returns ``None``. Falling off the end of a function also returns ``None``."
msgstr ""

msgid "The statement ``result.append(a)`` calls a *method* of the list object ``result``.  A method is a function that 'belongs' to an object and is named ``obj.methodname``, where ``obj`` is some object (this may be an expression), and ``methodname`` is the name of a method that is defined by the object's type. Different types define different methods.  Methods of different types may have the same name without causing ambiguity.  (It is possible to define your own object types and methods, using *classes*, see :ref:`tut-classes`) The method :meth:`append` shown in the example is defined for list objects; it adds a new element at the end of the list.  In this example it is equivalent to ``result = result + [a]``, but more efficient."
msgstr ""

msgid "More on Defining Functions"
msgstr ""

msgid "It is also possible to define functions with a variable number of arguments. There are three forms, which can be combined."
msgstr ""

msgid "Default Argument Values"
msgstr ""

msgid "The most useful form is to specify a default value for one or more arguments. This creates a function that can be called with fewer arguments than it is defined to allow.  For example::"
msgstr ""

msgid "def ask_ok(prompt, retries=4, complaint='Yes or no, please!'):     while True:         ok = input(prompt)         if ok in ('y', 'ye', 'yes'):             return True         if ok in ('n', 'no', 'nop', 'nope'):             return False         retries = retries - 1         if retries < 0:             raise IOError('refusenik user')         print(complaint)"
msgstr ""

msgid "This function can be called in several ways:"
msgstr ""

msgid "giving only the mandatory argument: ``ask_ok('Do you really want to quit?')``"
msgstr ""

msgid "giving one of the optional arguments: ``ask_ok('OK to overwrite the file?', 2)``"
msgstr ""

msgid "or even giving all arguments: ``ask_ok('OK to overwrite the file?', 2, 'Come on, only yes or no!')``"
msgstr ""

msgid "This example also introduces the :keyword:`in` keyword. This tests whether or not a sequence contains a certain value."
msgstr ""

msgid "The default values are evaluated at the point of function definition in the *defining* scope, so that ::"
msgstr ""

msgid "i = 5  def f(arg=i):     print(arg)  i = 6 f()"
msgstr ""

msgid "will print ``5``."
msgstr ""

msgid "**Important warning:**  The default value is evaluated only once. This makes a difference when the default is a mutable object such as a list, dictionary, or instances of most classes.  For example, the following function accumulates the arguments passed to it on subsequent calls::"
msgstr ""

msgid "def f(a, L=[]):     L.append(a)     return L  print(f(1)) print(f(2)) print(f(3))"
msgstr ""

msgid "This will print ::"
msgstr ""

msgid "[1] [1, 2] [1, 2, 3]"
msgstr ""

msgid "If you don't want the default to be shared between subsequent calls, you can write the function like this instead::"
msgstr ""

msgid "def f(a, L=None):     if L is None:         L = []     L.append(a)     return L"
msgstr ""

msgid "Keyword Arguments"
msgstr ""

msgid "Functions can also be called using keyword arguments of the form ``keyword = value``.  For instance, the following function::"
msgstr ""

msgid "def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):     print(\"-- This parrot wouldn't\", action, end=' ')     print(\"if you put\", voltage, \"volts through it.\")     print(\"-- Lovely plumage, the\", type)     print(\"-- It's\", state, \"!\")"
msgstr ""

msgid "could be called in any of the following ways::"
msgstr ""

msgid "parrot(1000) parrot(action = 'VOOOOOM', voltage = 1000000) parrot('a thousand', state = 'pushing up the daisies') parrot('a million', 'bereft of life', 'jump')"
msgstr ""

msgid "but the following calls would all be invalid::"
msgstr ""

msgid "parrot()                     # required argument missing parrot(voltage=5.0, 'dead')  # non-keyword argument following keyword parrot(110, voltage=220)     # duplicate value for argument parrot(actor='John Cleese')  # unknown keyword"
msgstr ""

msgid "In general, an argument list must have any positional arguments followed by any keyword arguments, where the keywords must be chosen from the formal parameter names.  It's not important whether a formal parameter has a default value or not.  No argument may receive a value more than once --- formal parameter names corresponding to positional arguments cannot be used as keywords in the same calls. Here's an example that fails due to this restriction::"
msgstr ""

msgid ">>> def function(a): ...     pass ... >>> function(0, a=0) Traceback (most recent call last):   File \"<stdin>\", line 1, in ? TypeError: function() got multiple values for keyword argument 'a'"
msgstr ""

msgid "When a final formal parameter of the form ``**name`` is present, it receives a dictionary (see :ref:`typesmapping`) containing all keyword arguments except for those corresponding to a formal parameter.  This may be combined with a formal parameter of the form ``*name`` (described in the next subsection) which receives a tuple containing the positional arguments beyond the formal parameter list.  (``*name`` must occur before ``**name``.) For example, if we define a function like this::"
msgstr ""

msgid "def cheeseshop(kind, *arguments, **keywords):     print(\"-- Do you have any\", kind, \"?\")     print(\"-- I'm sorry, we're all out of\", kind)     for arg in arguments: print(arg)     print(\"-\" * 40)     keys = sorted(keywords.keys())     for kw in keys: print(kw, \":\", keywords[kw])"
msgstr ""

msgid "It could be called like this::"
msgstr ""

msgid "cheeseshop(\"Limburger\", \"It's very runny, sir.\",            \"It's really very, VERY runny, sir.\",            shopkeeper=\"Michael Palin\",            client=\"John Cleese\",            sketch=\"Cheese Shop Sketch\")"
msgstr ""

msgid "and of course it would print::"
msgstr ""

msgid "-- Do you have any Limburger ? -- I'm sorry, we're all out of Limburger It's very runny, sir. It's really very, VERY runny, sir. ---------------------------------------- client : John Cleese shopkeeper : Michael Palin sketch : Cheese Shop Sketch"
msgstr ""

msgid "Note that the list of keyword argument names is created by sorting the result of the keywords dictionary's ``keys()`` method before printing its contents; if this is not done, the order in which the arguments are printed is undefined."
msgstr ""

msgid "Arbitrary Argument Lists"
msgstr ""

msgid "Finally, the least frequently used option is to specify that a function can be called with an arbitrary number of arguments.  These arguments will be wrapped up in a tuple (see :ref:`tut-tuples`).  Before the variable number of arguments, zero or more normal arguments may occur. ::"
msgstr ""

msgid "def write_multiple_items(file, separator, *args):     file.write(separator.join(args))"
msgstr ""

msgid "Normally, these ``variadic`` arguments will be last in the list of formal parameters, because they scoop up all remaining input arguments that are passed to the function. Any formal parameters which occur after the ``*args`` parameter are 'keyword-only' arguments, meaning that they can only be used as keywords rather than positional arguments. ::"
msgstr ""

msgid ">>> def concat(*args, sep=\"/\"): ...    return sep.join(args) ... >>> concat(\"earth\", \"mars\", \"venus\") 'earth/mars/venus' >>> concat(\"earth\", \"mars\", \"venus\", sep=\".\") 'earth.mars.venus'"
msgstr ""

msgid "Unpacking Argument Lists"
msgstr ""

msgid "The reverse situation occurs when the arguments are already in a list or tuple but need to be unpacked for a function call requiring separate positional arguments.  For instance, the built-in :func:`range` function expects separate *start* and *stop* arguments.  If they are not available separately, write the function call with the  ``*``\\ -operator to unpack the arguments out of a list or tuple::"
msgstr ""

msgid ">>> list(range(3, 6))            # normal call with separate arguments [3, 4, 5] >>> args = [3, 6] >>> list(range(*args))            # call with arguments unpacked from a list [3, 4, 5]"
msgstr ""

msgid "In the same fashion, dictionaries can deliver keyword arguments with the ``**``\\ -operator::"
msgstr ""

msgid ">>> def parrot(voltage, state='a stiff', action='voom'): ...     print(\"-- This parrot wouldn't\", action, end=' ') ...     print(\"if you put\", voltage, \"volts through it.\", end=' ') ...     print(\"E's\", state, \"!\") ... >>> d = {\"voltage\": \"four million\", \"state\": \"bleedin' demised\", \"action\": \"VOOM\"} >>> parrot(**d) -- This parrot wouldn't VOOM if you put four million volts through it. E's bleedin' demised !"
msgstr ""

msgid "Lambda Forms"
msgstr ""

msgid "By popular demand, a few features commonly found in functional programming languages like Lisp have been added to Python.  With the :keyword:`lambda` keyword, small anonymous functions can be created. Here's a function that returns the sum of its two arguments: ``lambda a, b: a+b``.  Lambda forms can be used wherever function objects are required.  They are syntactically restricted to a single expression.  Semantically, they are just syntactic sugar for a normal function definition.  Like nested function definitions, lambda forms can reference variables from the containing scope::"
msgstr ""

msgid ">>> def make_incrementor(n): ...     return lambda x: x + n ... >>> f = make_incrementor(42) >>> f(0) 42 >>> f(1) 43"
msgstr ""

msgid "Documentation Strings"
msgstr ""

msgid "Here are some conventions about the content and formatting of documentation strings."
msgstr ""

msgid "The first line should always be a short, concise summary of the object's purpose.  For brevity, it should not explicitly state the object's name or type, since these are available by other means (except if the name happens to be a verb describing a function's operation).  This line should begin with a capital letter and end with a period."
msgstr ""

msgid "If there are more lines in the documentation string, the second line should be blank, visually separating the summary from the rest of the description.  The following lines should be one or more paragraphs describing the object's calling conventions, its side effects, etc."
msgstr ""

msgid "The Python parser does not strip indentation from multi-line string literals in Python, so tools that process documentation have to strip indentation if desired.  This is done using the following convention. The first non-blank line *after* the first line of the string determines the amount of indentation for the entire documentation string.  (We can't use the first line since it is generally adjacent to the string's opening quotes so its indentation is not apparent in the string literal.)  Whitespace \"equivalent\" to this indentation is then stripped from the start of all lines of the string.  Lines that are indented less should not occur, but if they occur all their leading whitespace should be stripped.  Equivalence of whitespace should be tested after expansion of tabs (to 8 spaces, normally)."
msgstr ""

msgid "Here is an example of a multi-line docstring::"
msgstr ""

msgid ">>> def my_function(): ...     \"\"\"Do nothing, but document it. ... ...     No, really, it doesn't do anything. ...     \"\"\" ...     pass ... >>> print(my_function.__doc__) Do nothing, but document it.      No, really, it doesn't do anything."
msgstr ""

msgid "Intermezzo: Coding Style"
msgstr ""

msgid "Now that you are about to write longer, more complex pieces of Python, it is a good time to talk about *coding style*.  Most languages can be written (or more concise, *formatted*) in different styles; some are more readable than others. Making it easy for others to read your code is always a good idea, and adopting a nice coding style helps tremendously for that."
msgstr ""

msgid "For Python, :pep:`8` has emerged as the style guide that most projects adhere to; it promotes a very readable and eye-pleasing coding style.  Every Python developer should read it at some point; here are the most important points extracted for you:"
msgstr ""

msgid "Use 4-space indentation, and no tabs."
msgstr ""

msgid "4 spaces are a good compromise between small indentation (allows greater nesting depth) and large indentation (easier to read).  Tabs introduce confusion, and are best left out."
msgstr ""

msgid "Wrap lines so that they don't exceed 79 characters."
msgstr ""

msgid "This helps users with small displays and makes it possible to have several code files side-by-side on larger displays."
msgstr ""

msgid "Use blank lines to separate functions and classes, and larger blocks of code inside functions."
msgstr ""

msgid "When possible, put comments on a line of their own."
msgstr ""

msgid "Use docstrings."
msgstr ""

msgid "Use spaces around operators and after commas, but not directly inside bracketing constructs: ``a = f(1, 2) + g(3, 4)``."
msgstr ""

msgid "Name your classes and functions consistently; the convention is to use ``CamelCase`` for classes and ``lower_case_with_underscores`` for functions and methods.  Always use ``self`` as the name for the first method argument (see :ref:`tut-firstclasses` for more on classes and methods)."
msgstr ""

msgid "Don't use fancy encodings if your code is meant to be used in international environments.  Python's default, UTF-8, or even plain ASCII work best in any case."
msgstr ""

msgid "Likewise, don't use non-ASCII characters in identifiers if there is only the slightest chance people speaking a different language will read or maintain the code."
msgstr ""

msgid "Actually, *call by object reference* would be a better description, since if a mutable object is passed, the caller will see any changes the callee makes to it (items inserted into a list)."
msgstr ""

msgid "Data Structures"
msgstr ""

msgid "This chapter describes some things you've learned about already in more detail, and adds some new things as well."
msgstr ""

msgid "More on Lists"
msgstr ""

msgid "The list data type has some more methods.  Here are all of the methods of list objects:"
msgstr ""

msgid "Add an item to the end of the list; equivalent to ``a[len(a):] = [x]``."
msgstr ""

msgid "Extend the list by appending all the items in the given list; equivalent to ``a[len(a):] = L``."
msgstr ""

msgid "Insert an item at a given position.  The first argument is the index of the element before which to insert, so ``a.insert(0, x)`` inserts at the front of the list, and ``a.insert(len(a), x)`` is equivalent to ``a.append(x)``."
msgstr ""

msgid "Remove the first item from the list whose value is *x*. It is an error if there is no such item."
msgstr ""

msgid "Remove the item at the given position in the list, and return it.  If no index is specified, ``a.pop()`` removes and returns the last item in the list.  (The square brackets around the *i* in the method signature denote that the parameter is optional, not that you should type square brackets at that position.  You will see this notation frequently in the Python Library Reference.)"
msgstr ""

msgid "Return the index in the list of the first item whose value is *x*. It is an error if there is no such item."
msgstr ""

msgid "Return the number of times *x* appears in the list."
msgstr ""

msgid "Sort the items of the list, in place."
msgstr ""

msgid "Reverse the elements of the list, in place."
msgstr ""

msgid "An example that uses most of the list methods::"
msgstr ""

msgid ">>> a = [66.25, 333, 333, 1, 1234.5] >>> print(a.count(333), a.count(66.25), a.count('x')) 2 1 0 >>> a.insert(2, -1) >>> a.append(333) >>> a [66.25, 333, -1, 333, 1, 1234.5, 333] >>> a.index(333) 1 >>> a.remove(333) >>> a [66.25, -1, 333, 1, 1234.5, 333] >>> a.reverse() >>> a [333, 1234.5, 1, 333, -1, 66.25] >>> a.sort() >>> a [-1, 1, 66.25, 333, 333, 1234.5]"
msgstr ""

msgid "Using Lists as Stacks"
msgstr ""

msgid "The list methods make it very easy to use a list as a stack, where the last element added is the first element retrieved (\"last-in, first-out\").  To add an item to the top of the stack, use :meth:`append`.  To retrieve an item from the top of the stack, use :meth:`pop` without an explicit index.  For example::"
msgstr ""

msgid ">>> stack = [3, 4, 5] >>> stack.append(6) >>> stack.append(7) >>> stack [3, 4, 5, 6, 7] >>> stack.pop() 7 >>> stack [3, 4, 5, 6] >>> stack.pop() 6 >>> stack.pop() 5 >>> stack [3, 4]"
msgstr ""

msgid "Using Lists as Queues"
msgstr ""

msgid "It is also possible to use a list as a queue, where the first element added is the first element retrieved (\"first-in, first-out\"); however, lists are not efficient for this purpose.  While appends and pops from the end of list are fast, doing inserts or pops from the beginning of a list is slow (because all of the other elements have to be shifted by one)."
msgstr ""

msgid "To implement a queue, use :class:`collections.deque` which was designed to have fast appends and pops from both ends.  For example::"
msgstr ""

msgid ">>> from collections import deque >>> queue = deque([\"Eric\", \"John\", \"Michael\"]) >>> queue.append(\"Terry\")           # Terry arrives >>> queue.append(\"Graham\")          # Graham arrives >>> queue.popleft()                 # The first to arrive now leaves 'Eric' >>> queue.popleft()                 # The second to arrive now leaves 'John' >>> queue                           # Remaining queue in order of arrival deque(['Michael', 'Terry', 'Graham'])"
msgstr ""

msgid "List Comprehensions"
msgstr ""

msgid "List comprehensions provide a concise way to create lists from sequences. Common applications are to make lists where each element is the result of some operations applied to each member of the sequence, or to create a subsequence of those elements that satisfy a certain condition."
msgstr ""

msgid "A list comprehension consists of brackets containing an expression followed by a :keyword:`for` clause, then zero or more :keyword:`for` or :keyword:`if` clauses.  The result will be a list resulting from evaluating the expression in the context of the :keyword:`for` and :keyword:`if` clauses which follow it.  If the expression would evaluate to a tuple, it must be parenthesized."
msgstr ""

msgid "Here we take a list of numbers and return a list of three times each number::"
msgstr ""

msgid ">>> vec = [2, 4, 6] >>> [3*x for x in vec] [6, 12, 18]"
msgstr ""

msgid "Now we get a little fancier::"
msgstr ""

msgid ">>> [[x, x**2] for x in vec] [[2, 4], [4, 16], [6, 36]]"
msgstr ""

msgid "Here we apply a method call to each item in a sequence::"
msgstr ""

msgid ">>> freshfruit = ['  banana', '  loganberry ', 'passion fruit  '] >>> [weapon.strip() for weapon in freshfruit] ['banana', 'loganberry', 'passion fruit']"
msgstr ""

msgid "Using the :keyword:`if` clause we can filter the stream::"
msgstr ""

msgid ">>> [3*x for x in vec if x > 3] [12, 18] >>> [3*x for x in vec if x < 2] []"
msgstr ""

msgid "Tuples can often be created without their parentheses, but not here::"
msgstr ""

msgid ">>> [x, x**2 for x in vec]  # error - parens required for tuples   File \"<stdin>\", line 1, in ?     [x, x**2 for x in vec]                ^ SyntaxError: invalid syntax >>> [(x, x**2) for x in vec] [(2, 4), (4, 16), (6, 36)]"
msgstr ""

msgid "Here are some nested for loops and other fancy behavior::"
msgstr ""

msgid ">>> vec1 = [2, 4, 6] >>> vec2 = [4, 3, -9] >>> [x*y for x in vec1 for y in vec2] [8, 6, -18, 16, 12, -36, 24, 18, -54] >>> [x+y for x in vec1 for y in vec2] [6, 5, -7, 8, 7, -5, 10, 9, -3] >>> [vec1[i]*vec2[i] for i in range(len(vec1))] [8, 12, -54]"
msgstr ""

msgid "List comprehensions can be applied to complex expressions and nested functions::"
msgstr ""

msgid ">>> [str(round(355/113, i)) for i in range(1, 6)] ['3.1', '3.14', '3.142', '3.1416', '3.14159']"
msgstr ""

msgid "Nested List Comprehensions"
msgstr ""

msgid "If you've got the stomach for it, list comprehensions can be nested. They are a powerful tool but -- like all powerful tools -- they need to be used carefully, if at all."
msgstr ""

msgid "Consider the following example of a 3x3 matrix held as a list containing three lists, one list per row::"
msgstr ""

msgid ">>> mat = [ ...        [1, 2, 3], ...        [4, 5, 6], ...        [7, 8, 9], ...       ]"
msgstr ""

msgid "Now, if you wanted to swap rows and columns, you could use a list comprehension::"
msgstr ""

msgid ">>> print([[row[i] for row in mat] for i in [0, 1, 2]]) [[1, 4, 7], [2, 5, 8], [3, 6, 9]]"
msgstr ""

msgid "Special care has to be taken for the *nested* list comprehension:"
msgstr ""

msgid "To avoid apprehension when nesting list comprehensions, read from right to left."
msgstr ""

msgid "A more verbose version of this snippet shows the flow explicitly::"
msgstr ""

msgid "for i in [0, 1, 2]:     for row in mat:         print(row[i], end=\"\")     print()"
msgstr ""

msgid "In real world, you should prefer built-in functions to complex flow statements. The :func:`zip` function would do a great job for this use case::"
msgstr ""

msgid ">>> list(zip(*mat)) [(1, 4, 7), (2, 5, 8), (3, 6, 9)]"
msgstr ""

msgid "See :ref:`tut-unpacking-arguments` for details on the asterisk in this line."
msgstr ""

msgid "The :keyword:`del` statement"
msgstr ""

msgid "There is a way to remove an item from a list given its index instead of its value: the :keyword:`del` statement.  This differs from the :meth:`pop` method which returns a value.  The :keyword:`del` statement can also be used to remove slices from a list or clear the entire list (which we did earlier by assignment of an empty list to the slice).  For example::"
msgstr ""

msgid ">>> a = [-1, 1, 66.25, 333, 333, 1234.5] >>> del a[0] >>> a [1, 66.25, 333, 333, 1234.5] >>> del a[2:4] >>> a [1, 66.25, 1234.5] >>> del a[:] >>> a []"
msgstr ""

msgid ":keyword:`del` can also be used to delete entire variables::"
msgstr ""

msgid ">>> del a"
msgstr ""

msgid "Referencing the name ``a`` hereafter is an error (at least until another value is assigned to it).  We'll find other uses for :keyword:`del` later."
msgstr ""

msgid "Tuples and Sequences"
msgstr ""

msgid "We saw that lists and strings have many common properties, such as indexing and slicing operations.  They are two examples of *sequence* data types (see :ref:`typesseq`).  Since Python is an evolving language, other sequence data types may be added.  There is also another standard sequence data type: the *tuple*."
msgstr ""

msgid "A tuple consists of a number of values separated by commas, for instance::"
msgstr ""

msgid ">>> t = 12345, 54321, 'hello!' >>> t[0] 12345 >>> t (12345, 54321, 'hello!') >>> # Tuples may be nested: ... u = t, (1, 2, 3, 4, 5) >>> u ((12345, 54321, 'hello!'), (1, 2, 3, 4, 5))"
msgstr ""

msgid "As you see, on output tuples are always enclosed in parentheses, so that nested tuples are interpreted correctly; they may be input with or without surrounding parentheses, although often parentheses are necessary anyway (if the tuple is part of a larger expression)."
msgstr ""

msgid "Tuples have many uses.  For example: (x, y) coordinate pairs, employee records from a database, etc.  Tuples, like strings, are immutable: it is not possible to assign to the individual items of a tuple (you can simulate much of the same effect with slicing and concatenation, though).  It is also possible to create tuples which contain mutable objects, such as lists."
msgstr ""

msgid "A special problem is the construction of tuples containing 0 or 1 items: the syntax has some extra quirks to accommodate these.  Empty tuples are constructed by an empty pair of parentheses; a tuple with one item is constructed by following a value with a comma (it is not sufficient to enclose a single value in parentheses). Ugly, but effective.  For example::"
msgstr ""

msgid ">>> empty = () >>> singleton = 'hello',    # <-- note trailing comma >>> len(empty) 0 >>> len(singleton) 1 >>> singleton ('hello',)"
msgstr ""

msgid "The statement ``t = 12345, 54321, 'hello!'`` is an example of *tuple packing*: the values ``12345``, ``54321`` and ``'hello!'`` are packed together in a tuple. The reverse operation is also possible::"
msgstr ""

msgid ">>> x, y, z = t"
msgstr ""

msgid "This is called, appropriately enough, *sequence unpacking* and works for any sequence on the right-hand side.  Sequence unpacking requires that there are as many variables on the left side of the equals sign as there are elements in the sequence.  Note that multiple assignment is really just a combination of tuple packing and sequence unpacking."
msgstr ""

msgid "Sets"
msgstr ""

msgid "Python also includes a data type for *sets*.  A set is an unordered collection with no duplicate elements.  Basic uses include membership testing and eliminating duplicate entries.  Set objects also support mathematical operations like union, intersection, difference, and symmetric difference."
msgstr ""

msgid "Curly braces or the :func:`set` function can be use to create sets. Note: To create an empty set you have to use ``set()``, not ``{}``; the latter creates an empty dictionary, a data structure that we discuss in the next section."
msgstr ""

msgid "Here is a brief demonstration::"
msgstr ""

msgid ">>> basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana'] >>> fruit = set(basket)               # create a set without duplicates >>> fruit {'orange', 'pear', 'apple', 'banana'} >>> fruit = {'orange', 'apple'}       # {} syntax is equivalent to [] for lists >>> fruit {'orange', 'apple'} >>> 'orange' in fruit                 # fast membership testing True >>> 'crabgrass' in fruit False  >>> # Demonstrate set operations on unique letters from two words ... >>> a = set('abracadabra') >>> b = set('alacazam') >>> a                                  # unique letters in a {'a', 'r', 'b', 'c', 'd'} >>> a - b                              # letters in a but not in b {'r', 'd', 'b'} >>> a | b                              # letters in either a or b {'a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'} >>> a & b                              # letters in both a and b {'a', 'c'} >>> a ^ b                              # letters in a or b but not both {'r', 'd', 'b', 'm', 'z', 'l'}"
msgstr ""

msgid "Like :ref:`for lists <tut-listcomps>`, there is a set comprehension syntax::"
msgstr ""

msgid ">>> a = {x for x in 'abracadabra' if x not in 'abc'} >>> a {'r', 'd'}"
msgstr ""

msgid "Dictionaries"
msgstr ""

msgid "Another useful data type built into Python is the *dictionary* (see :ref:`typesmapping`). Dictionaries are sometimes found in other languages as \"associative memories\" or \"associative arrays\".  Unlike sequences, which are indexed by a range of numbers, dictionaries are indexed by *keys*, which can be any immutable type; strings and numbers can always be keys.  Tuples can be used as keys if they contain only strings, numbers, or tuples; if a tuple contains any mutable object either directly or indirectly, it cannot be used as a key. You can't use lists as keys, since lists can be modified in place using index assignments, slice assignments, or methods like :meth:`append` and :meth:`extend`."
msgstr ""

msgid "It is best to think of a dictionary as an unordered set of *key: value* pairs, with the requirement that the keys are unique (within one dictionary). A pair of braces creates an empty dictionary: ``{}``. Placing a comma-separated list of key:value pairs within the braces adds initial key:value pairs to the dictionary; this is also the way dictionaries are written on output."
msgstr ""

msgid "The main operations on a dictionary are storing a value with some key and extracting the value given the key.  It is also possible to delete a key:value pair with ``del``. If you store using a key that is already in use, the old value associated with that key is forgotten.  It is an error to extract a value using a non-existent key."
msgstr ""

msgid "Performing ``list(d.keys())`` on a dictionary returns a list of all the keys used in the dictionary, in arbitrary order (if you want it sorted, just use ``sorted(d.keys())`` instead). [1]_  To check whether a single key is in the dictionary, use the :keyword:`in` keyword."
msgstr ""

msgid "Here is a small example using a dictionary::"
msgstr ""

msgid ">>> tel = {'jack': 4098, 'sape': 4139} >>> tel['guido'] = 4127 >>> tel {'sape': 4139, 'guido': 4127, 'jack': 4098} >>> tel['jack'] 4098 >>> del tel['sape'] >>> tel['irv'] = 4127 >>> tel {'guido': 4127, 'irv': 4127, 'jack': 4098} >>> list(tel.keys()) ['irv', 'guido', 'jack'] >>> sorted(tel.keys()) ['guido', 'irv', 'jack'] >>> 'guido' in tel True >>> 'jack' not in tel False"
msgstr ""

msgid "The :func:`dict` constructor builds dictionaries directly from sequences of key-value pairs::"
msgstr ""

msgid ">>> dict([('sape', 4139), ('guido', 4127), ('jack', 4098)]) {'sape': 4139, 'jack': 4098, 'guido': 4127}"
msgstr ""

msgid "In addition, dict comprehensions can be used to create dictionaries from arbitrary key and value expressions::"
msgstr ""

msgid ">>> {x: x**2 for x in (2, 4, 6)} {2: 4, 4: 16, 6: 36}"
msgstr ""

msgid "When the keys are simple strings, it is sometimes easier to specify pairs using keyword arguments::"
msgstr ""

msgid ">>> dict(sape=4139, guido=4127, jack=4098) {'sape': 4139, 'jack': 4098, 'guido': 4127}"
msgstr ""

msgid "Looping Techniques"
msgstr ""

msgid "When looping through dictionaries, the key and corresponding value can be retrieved at the same time using the :meth:`items` method. ::"
msgstr ""

msgid ">>> knights = {'gallahad': 'the pure', 'robin': 'the brave'} >>> for k, v in knights.items(): ...     print(k, v) ... gallahad the pure robin the brave"
msgstr ""

msgid "When looping through a sequence, the position index and corresponding value can be retrieved at the same time using the :func:`enumerate` function. ::"
msgstr ""

msgid ">>> for i, v in enumerate(['tic', 'tac', 'toe']): ...     print(i, v) ... 0 tic 1 tac 2 toe"
msgstr ""

msgid "To loop over two or more sequences at the same time, the entries can be paired with the :func:`zip` function. ::"
msgstr ""

msgid ">>> questions = ['name', 'quest', 'favorite color'] >>> answers = ['lancelot', 'the holy grail', 'blue'] >>> for q, a in zip(questions, answers): ...     print('What is your {0}?  It is {1}.'.format(q, a)) ... What is your name?  It is lancelot. What is your quest?  It is the holy grail. What is your favorite color?  It is blue."
msgstr ""

msgid "To loop over a sequence in reverse, first specify the sequence in a forward direction and then call the :func:`reversed` function. ::"
msgstr ""

msgid ">>> for i in reversed(range(1, 10, 2)): ...     print(i) ... 9 7 5 3 1"
msgstr ""

msgid "To loop over a sequence in sorted order, use the :func:`sorted` function which returns a new sorted list while leaving the source unaltered. ::"
msgstr ""

msgid ">>> basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana'] >>> for f in sorted(set(basket)): ...     print(f) ... apple banana orange pear"
msgstr ""

msgid "More on Conditions"
msgstr ""

msgid "The conditions used in ``while`` and ``if`` statements can contain any operators, not just comparisons."
msgstr ""

msgid "The comparison operators ``in`` and ``not in`` check whether a value occurs (does not occur) in a sequence.  The operators ``is`` and ``is not`` compare whether two objects are really the same object; this only matters for mutable objects like lists.  All comparison operators have the same priority, which is lower than that of all numerical operators."
msgstr ""

msgid "Comparisons can be chained.  For example, ``a < b == c`` tests whether ``a`` is less than ``b`` and moreover ``b`` equals ``c``."
msgstr ""

msgid "Comparisons may be combined using the Boolean operators ``and`` and ``or``, and the outcome of a comparison (or of any other Boolean expression) may be negated with ``not``.  These have lower priorities than comparison operators; between them, ``not`` has the highest priority and ``or`` the lowest, so that ``A and not B or C`` is equivalent to ``(A and (not B)) or C``. As always, parentheses can be used to express the desired composition."
msgstr ""

msgid "The Boolean operators ``and`` and ``or`` are so-called *short-circuit* operators: their arguments are evaluated from left to right, and evaluation stops as soon as the outcome is determined.  For example, if ``A`` and ``C`` are true but ``B`` is false, ``A and B and C`` does not evaluate the expression ``C``.  When used as a general value and not as a Boolean, the return value of a short-circuit operator is the last evaluated argument."
msgstr ""

msgid "It is possible to assign the result of a comparison or other Boolean expression to a variable.  For example, ::"
msgstr ""

msgid ">>> string1, string2, string3 = '', 'Trondheim', 'Hammer Dance' >>> non_null = string1 or string2 or string3 >>> non_null 'Trondheim'"
msgstr ""

msgid "Note that in Python, unlike C, assignment cannot occur inside expressions. C programmers may grumble about this, but it avoids a common class of problems encountered in C programs: typing ``=`` in an expression when ``==`` was intended."
msgstr ""

msgid "Comparing Sequences and Other Types"
msgstr ""

msgid "Sequence objects may be compared to other objects with the same sequence type. The comparison uses *lexicographical* ordering: first the first two items are compared, and if they differ this determines the outcome of the comparison; if they are equal, the next two items are compared, and so on, until either sequence is exhausted. If two items to be compared are themselves sequences of the same type, the lexicographical comparison is carried out recursively.  If all items of two sequences compare equal, the sequences are considered equal. If one sequence is an initial sub-sequence of the other, the shorter sequence is the smaller (lesser) one.  Lexicographical ordering for strings uses the Unicode codepoint number to order individual characters.  Some examples of comparisons between sequences of the same type::"
msgstr ""

msgid "(1, 2, 3)              < (1, 2, 4) [1, 2, 3]              < [1, 2, 4] 'ABC' < 'C' < 'Pascal' < 'Python' (1, 2, 3, 4)           < (1, 2, 4) (1, 2)                 < (1, 2, -1) (1, 2, 3)             == (1.0, 2.0, 3.0) (1, 2, ('aa', 'ab'))   < (1, 2, ('abc', 'a'), 4)"
msgstr ""

msgid "Note that comparing objects of different types with ``<`` or ``>`` is legal provided that the objects have appropriate comparison methods.  For example, mixed numeric types are compared according to their numeric value, so 0 equals 0.0, etc.  Otherwise, rather than providing an arbitrary ordering, the interpreter will raise a :exc:`TypeError` exception."
msgstr ""

msgid "Calling ``d.keys()`` will return a :dfn:`dictionary view` object.  It supports operations like membership test and iteration, but its contents are not independent of the original dictionary -- it is only a *view*."
msgstr ""

msgid "Errors and Exceptions"
msgstr ""

msgid "Until now error messages haven't been more than mentioned, but if you have tried out the examples you have probably seen some.  There are (at least) two distinguishable kinds of errors: *syntax errors* and *exceptions*."
msgstr ""

msgid "Syntax Errors"
msgstr ""

msgid "Syntax errors, also known as parsing errors, are perhaps the most common kind of complaint you get while you are still learning Python::"
msgstr ""

msgid ">>> while True print('Hello world')   File \"<stdin>\", line 1, in ?     while True print('Hello world')                    ^ SyntaxError: invalid syntax"
msgstr ""

msgid "The parser repeats the offending line and displays a little 'arrow' pointing at the earliest point in the line where the error was detected.  The error is caused by (or at least detected at) the token *preceding* the arrow: in the example, the error is detected at the function :func:`print`, since a colon (``':'``) is missing before it.  File name and line number are printed so you know where to look in case the input came from a script."
msgstr ""

msgid "Exceptions"
msgstr ""

msgid "Even if a statement or expression is syntactically correct, it may cause an error when an attempt is made to execute it. Errors detected during execution are called *exceptions* and are not unconditionally fatal: you will soon learn how to handle them in Python programs.  Most exceptions are not handled by programs, however, and result in error messages as shown here::"
msgstr ""

msgid ">>> 10 * (1/0) Traceback (most recent call last):   File \"<stdin>\", line 1, in ? ZeroDivisionError: int division or modulo by zero >>> 4 + spam*3 Traceback (most recent call last):   File \"<stdin>\", line 1, in ? NameError: name 'spam' is not defined >>> '2' + 2 Traceback (most recent call last):   File \"<stdin>\", line 1, in ? TypeError: Can't convert 'int' object to str implicitly"
msgstr ""

msgid "The last line of the error message indicates what happened. Exceptions come in different types, and the type is printed as part of the message: the types in the example are :exc:`ZeroDivisionError`, :exc:`NameError` and :exc:`TypeError`. The string printed as the exception type is the name of the built-in exception that occurred.  This is true for all built-in exceptions, but need not be true for user-defined exceptions (although it is a useful convention). Standard exception names are built-in identifiers (not reserved keywords)."
msgstr ""

msgid "The rest of the line provides detail based on the type of exception and what caused it."
msgstr ""

msgid "The preceding part of the error message shows the context where the exception happened, in the form of a stack traceback. In general it contains a stack traceback listing source lines; however, it will not display lines read from standard input."
msgstr ""

msgid ":ref:`bltin-exceptions` lists the built-in exceptions and their meanings."
msgstr ""

msgid "Handling Exceptions"
msgstr ""

msgid "It is possible to write programs that handle selected exceptions. Look at the following example, which asks the user for input until a valid integer has been entered, but allows the user to interrupt the program (using :kbd:`Control-C` or whatever the operating system supports); note that a user-generated interruption is signalled by raising the :exc:`KeyboardInterrupt` exception. ::"
msgstr ""

msgid ">>> while True: ...     try: ...         x = int(input(\"Please enter a number: \")) ...         break ...     except ValueError: ...         print(\"Oops!  That was no valid number.  Try again...\") ..."
msgstr ""

msgid "The :keyword:`try` statement works as follows."
msgstr ""

msgid "First, the *try clause* (the statement(s) between the :keyword:`try` and :keyword:`except` keywords) is executed."
msgstr ""

msgid "If no exception occurs, the *except clause* is skipped and execution of the :keyword:`try` statement is finished."
msgstr ""

msgid "If an exception occurs during execution of the try clause, the rest of the clause is skipped.  Then if its type matches the exception named after the :keyword:`except` keyword, the except clause is executed, and then execution continues after the :keyword:`try` statement."
msgstr ""

msgid "If an exception occurs which does not match the exception named in the except clause, it is passed on to outer :keyword:`try` statements; if no handler is found, it is an *unhandled exception* and execution stops with a message as shown above."
msgstr ""

msgid "A :keyword:`try` statement may have more than one except clause, to specify handlers for different exceptions.  At most one handler will be executed. Handlers only handle exceptions that occur in the corresponding try clause, not in other handlers of the same :keyword:`try` statement.  An except clause may name multiple exceptions as a parenthesized tuple, for example::"
msgstr ""

msgid "... except (RuntimeError, TypeError, NameError): ...     pass"
msgstr ""

msgid "The last except clause may omit the exception name(s), to serve as a wildcard. Use this with extreme caution, since it is easy to mask a real programming error in this way!  It can also be used to print an error message and then re-raise the exception (allowing a caller to handle the exception as well)::"
msgstr ""

msgid "import sys  try:     f = open('myfile.txt')     s = f.readline()     i = int(s.strip()) except IOError as err:     print(\"I/O error: {0}\".format(err)) except ValueError:     print(\"Could not convert data to an integer.\") except:     print(\"Unexpected error:\", sys.exc_info()[0])     raise"
msgstr ""

msgid "The :keyword:`try` ... :keyword:`except` statement has an optional *else clause*, which, when present, must follow all except clauses.  It is useful for code that must be executed if the try clause does not raise an exception.  For example::"
msgstr ""

msgid "for arg in sys.argv[1:]:     try:         f = open(arg, 'r')     except IOError:         print('cannot open', arg)     else:         print(arg, 'has', len(f.readlines()), 'lines')         f.close()"
msgstr ""

msgid "The use of the :keyword:`else` clause is better than adding additional code to the :keyword:`try` clause because it avoids accidentally catching an exception that wasn't raised by the code being protected by the :keyword:`try` ... :keyword:`except` statement."
msgstr ""

msgid "When an exception occurs, it may have an associated value, also known as the exception's *argument*. The presence and type of the argument depend on the exception type."
msgstr ""

msgid "The except clause may specify a variable after the exception name.  The variable is bound to an exception instance with the arguments stored in ``instance.args``.  For convenience, the exception instance defines :meth:`__str__` so the arguments can be printed directly without having to reference ``.args``.  One may also instantiate an exception first before raising it and add any attributes to it as desired. ::"
msgstr ""

msgid ">>> try: ...    raise Exception('spam', 'eggs') ... except Exception as inst: ...    print(type(inst))    # the exception instance ...    print(inst.args)     # arguments stored in .args ...    print(inst)          # __str__ allows args to be printed directly, ...                         # but may be overridden in exception subclasses ...    x, y = inst.args     # unpack args ...    print('x =', x) ...    print('y =', y) ... <class 'Exception'> ('spam', 'eggs') ('spam', 'eggs') x = spam y = eggs"
msgstr ""

msgid "If an exception has arguments, they are printed as the last part ('detail') of the message for unhandled exceptions."
msgstr ""

msgid "Exception handlers don't just handle exceptions if they occur immediately in the try clause, but also if they occur inside functions that are called (even indirectly) in the try clause. For example::"
msgstr ""

msgid ">>> def this_fails(): ...     x = 1/0 ... >>> try: ...     this_fails() ... except ZeroDivisionError as err: ...     print('Handling run-time error:', err) ... Handling run-time error: int division or modulo by zero"
msgstr ""

msgid "Raising Exceptions"
msgstr ""

msgid "The :keyword:`raise` statement allows the programmer to force a specified exception to occur. For example::"
msgstr ""

msgid ">>> raise NameError('HiThere') Traceback (most recent call last):   File \"<stdin>\", line 1, in ? NameError: HiThere"
msgstr ""

msgid "The sole argument to :keyword:`raise` indicates the exception to be raised. This must be either an exception instance or an exception class (a class that derives from :class:`Exception`)."
msgstr ""

msgid "If you need to determine whether an exception was raised but don't intend to handle it, a simpler form of the :keyword:`raise` statement allows you to re-raise the exception::"
msgstr ""

msgid ">>> try: ...     raise NameError('HiThere') ... except NameError: ...     print('An exception flew by!') ...     raise ... An exception flew by! Traceback (most recent call last):   File \"<stdin>\", line 2, in ? NameError: HiThere"
msgstr ""

msgid "User-defined Exceptions"
msgstr ""

msgid "Programs may name their own exceptions by creating a new exception class (see :ref:`tut-classes` for more about Python classes).  Exceptions should typically be derived from the :exc:`Exception` class, either directly or indirectly.  For example::"
msgstr ""

msgid ">>> class MyError(Exception): ...     def __init__(self, value): ...         self.value = value ...     def __str__(self): ...         return repr(self.value) ... >>> try: ...     raise MyError(2*2) ... except MyError as e: ...     print('My exception occurred, value:', e.value) ... My exception occurred, value: 4 >>> raise MyError('oops!') Traceback (most recent call last):   File \"<stdin>\", line 1, in ? __main__.MyError: 'oops!'"
msgstr ""

msgid "In this example, the default :meth:`__init__` of :class:`Exception` has been overridden.  The new behavior simply creates the *value* attribute.  This replaces the default behavior of creating the *args* attribute."
msgstr ""

msgid "Exception classes can be defined which do anything any other class can do, but are usually kept simple, often only offering a number of attributes that allow information about the error to be extracted by handlers for the exception.  When creating a module that can raise several distinct errors, a common practice is to create a base class for exceptions defined by that module, and subclass that to create specific exception classes for different error conditions::"
msgstr ""

msgid "class Error(Exception):     \"\"\"Base class for exceptions in this module.\"\"\"     pass  class InputError(Error):     \"\"\"Exception raised for errors in the input.      Attributes:         expression -- input expression in which the error occurred         message -- explanation of the error     \"\"\"      def __init__(self, expression, message):         self.expression = expression         self.message = message  class TransitionError(Error):     \"\"\"Raised when an operation attempts a state transition that's not     allowed.      Attributes:         previous -- state at beginning of transition         next -- attempted new state         message -- explanation of why the specific transition is not allowed     \"\"\"      def __init__(self, previous, next, message):         self.previous = previous         self.next = next         self.message = message"
msgstr ""

msgid "Most exceptions are defined with names that end in \"Error,\" similar to the naming of the standard exceptions."
msgstr ""

msgid "Many standard modules define their own exceptions to report errors that may occur in functions they define.  More information on classes is presented in chapter :ref:`tut-classes`."
msgstr ""

msgid "Defining Clean-up Actions"
msgstr ""

msgid "The :keyword:`try` statement has another optional clause which is intended to define clean-up actions that must be executed under all circumstances.  For example::"
msgstr ""

msgid ">>> try: ...     raise KeyboardInterrupt ... finally: ...     print('Goodbye, world!') ... Goodbye, world! Traceback (most recent call last):   File \"<stdin>\", line 2, in ? KeyboardInterrupt"
msgstr ""

msgid "A *finally clause* is always executed before leaving the :keyword:`try` statement, whether an exception has occurred or not. When an exception has occurred in the :keyword:`try` clause and has not been handled by an :keyword:`except` clause (or it has occurred in a :keyword:`except` or :keyword:`else` clause), it is re-raised after the :keyword:`finally` clause has been executed.  The :keyword:`finally` clause is also executed \"on the way out\" when any other clause of the :keyword:`try` statement is left via a :keyword:`break`, :keyword:`continue` or :keyword:`return` statement.  A more complicated example::"
msgstr ""

msgid ">>> def divide(x, y): ...     try: ...         result = x / y ...     except ZeroDivisionError: ...         print(\"division by zero!\") ...     else: ...         print(\"result is\", result) ...     finally: ...         print(\"executing finally clause\") ... >>> divide(2, 1) result is 2.0 executing finally clause >>> divide(2, 0) division by zero! executing finally clause >>> divide(\"2\", \"1\") executing finally clause Traceback (most recent call last):   File \"<stdin>\", line 1, in ?   File \"<stdin>\", line 3, in divide TypeError: unsupported operand type(s) for /: 'str' and 'str'"
msgstr ""

msgid "As you can see, the :keyword:`finally` clause is executed in any event.  The :exc:`TypeError` raised by dividing two strings is not handled by the :keyword:`except` clause and therefore re-raised after the :keyword:`finally` clause has been executed."
msgstr ""

msgid "In real world applications, the :keyword:`finally` clause is useful for releasing external resources (such as files or network connections), regardless of whether the use of the resource was successful."
msgstr ""

msgid "Predefined Clean-up Actions"
msgstr ""

msgid "Some objects define standard clean-up actions to be undertaken when the object is no longer needed, regardless of whether or not the operation using the object succeeded or failed. Look at the following example, which tries to open a file and print its contents to the screen. ::"
msgstr ""

msgid "for line in open(\"myfile.txt\"):     print(line)"
msgstr ""

msgid "The problem with this code is that it leaves the file open for an indeterminate amount of time after this part of the code has finished executing. This is not an issue in simple scripts, but can be a problem for larger applications. The :keyword:`with` statement allows objects like files to be used in a way that ensures they are always cleaned up promptly and correctly. ::"
msgstr ""

msgid "with open(\"myfile.txt\") as f:     for line in f:         print(line)"
msgstr ""

msgid "After the statement is executed, the file *f* is always closed, even if a problem was encountered while processing the lines. Objects which, like files, provide predefined clean-up actions will indicate this in their documentation."
msgstr ""

msgid "Floating Point Arithmetic:  Issues and Limitations"
msgstr ""

msgid "Floating-point numbers are represented in computer hardware as base 2 (binary) fractions.  For example, the decimal fraction ::"
msgstr ""

msgid "0.125"
msgstr ""

msgid "has value 1/10 + 2/100 + 5/1000, and in the same way the binary fraction ::"
msgstr ""

msgid "0.001"
msgstr ""

msgid "has value 0/2 + 0/4 + 1/8.  These two fractions have identical values, the only real difference being that the first is written in base 10 fractional notation, and the second in base 2."
msgstr ""

msgid "Unfortunately, most decimal fractions cannot be represented exactly as binary fractions.  A consequence is that, in general, the decimal floating-point numbers you enter are only approximated by the binary floating-point numbers actually stored in the machine."
msgstr ""

msgid "The problem is easier to understand at first in base 10.  Consider the fraction 1/3.  You can approximate that as a base 10 fraction::"
msgstr ""

msgid "0.3"
msgstr ""

msgid "or, better, ::"
msgstr ""

msgid "0.33"
msgstr ""

msgid "0.333"
msgstr ""

msgid "and so on.  No matter how many digits you're willing to write down, the result will never be exactly 1/3, but will be an increasingly better approximation of 1/3."
msgstr ""

msgid "In the same way, no matter how many base 2 digits you're willing to use, the decimal value 0.1 cannot be represented exactly as a base 2 fraction.  In base 2, 1/10 is the infinitely repeating fraction ::"
msgstr ""

msgid "0.0001100110011001100110011001100110011001100110011..."
msgstr ""

msgid "Stop at any finite number of bits, and you get an approximation.  On most machines today, floats are approximated using a binary fraction with the numerator using the first 53 bits starting with the most significant bit and with the denominator as a power of two.  In the case of 1/10, the binary fraction is ``3602879701896397 / 2 ** 55`` which is close to but not exactly equal to the true value of 1/10."
msgstr ""

msgid "Many users are not aware of the approximation because of the way values are displayed.  Python only prints a decimal approximation to the true decimal value of the binary approximation stored by the machine.  On most machines, if Python were to print the true decimal value of the binary approximation stored for 0.1, it would have to display ::"
msgstr ""

msgid ">>> 0.1 0.1000000000000000055511151231257827021181583404541015625"
msgstr ""

msgid "That is more digits than most people find useful, so Python keeps the number of digits manageable by displaying a rounded value instead ::"
msgstr ""

msgid ">>> 1 / 10 0.1"
msgstr ""

msgid "Just remember, even though the printed result looks like the exact value of 1/10, the actual stored value is the nearest representable binary fraction."
msgstr ""

msgid "Interestingly, there are many different decimal numbers that share the same nearest approximate binary fraction.  For example, the numbers ``0.1`` and ``0.10000000000000001`` and ``0.1000000000000000055511151231257827021181583404541015625`` are all approximated by ``3602879701896397 / 2 ** 55``.  Since all of these decimal values share the same approximation, any one of them could be displayed while still preserving the invariant ``eval(repr(x)) == x``."
msgstr ""

msgid "Historically, the Python prompt and built-in :func:`repr` function would chose the one with 17 significant digits, ``0.10000000000000001``.   Starting with Python 3.1, Python (on most systems) is now able to choose the shortest of these and simply display ``0.1``."
msgstr ""

msgid "Note that this is in the very nature of binary floating-point: this is not a bug in Python, and it is not a bug in your code either.  You'll see the same kind of thing in all languages that support your hardware's floating-point arithmetic (although some languages may not *display* the difference by default, or in all output modes)."
msgstr ""

msgid "Python's built-in :func:`str` function produces only 12 significant digits, and you may wish to use that instead.  It's unusual for ``eval(str(x))`` to reproduce *x*, but the output may be more pleasant to look at::"
msgstr ""

msgid ">>> str(math.pi) '3.14159265359'  >>> repr(math.pi) '3.141592653589793'  >>> format(math.pi, '.2f') '3.14'"
msgstr ""

msgid "It's important to realize that this is, in a real sense, an illusion: you're simply rounding the *display* of the true machine value."
msgstr ""

msgid "One illusion may beget another.  For example, since 0.1 is not exactly 1/10, summing three values of 0.1 may not yield exactly 0.3, either::"
msgstr ""

msgid ">>> .1 + .1 + .1 == .3 False"
msgstr ""

msgid "Also, since the 0.1 cannot get any closer to the exact value of 1/10 and 0.3 cannot get any closer to the exact value of 3/10, then pre-rounding with :func:`round` function cannot help::"
msgstr ""

msgid ">>> round(.1, 1) + round(.1, 1) + round(.1, 1) == round(.3, 1) False"
msgstr ""

msgid "Though the numbers cannot be made closer to their intended exact values, the :func:`round` function can be useful for post-rounding so that results with inexact values become comparable to one another::"
msgstr ""

msgid ">>> round(.1 + .1 + .1, 10) == round(.3, 10) True"
msgstr ""

msgid "Binary floating-point arithmetic holds many surprises like this.  The problem with \"0.1\" is explained in precise detail below, in the \"Representation Error\" section.  See `The Perils of Floating Point <http://www.lahey.com/float.htm>`_ for a more complete account of other common surprises."
msgstr ""

msgid "As that says near the end, \"there are no easy answers.\"  Still, don't be unduly wary of floating-point!  The errors in Python float operations are inherited from the floating-point hardware, and on most machines are on the order of no more than 1 part in 2\\*\\*53 per operation.  That's more than adequate for most tasks, but you do need to keep in mind that it's not decimal arithmetic and that every float operation can suffer a new rounding error."
msgstr ""

msgid "While pathological cases do exist, for most casual use of floating-point arithmetic you'll see the result you expect in the end if you simply round the display of your final results to the number of decimal digits you expect. :func:`str` usually suffices, and for finer control see the :meth:`str.format` method's format specifiers in :ref:`formatstrings`."
msgstr ""

msgid "For use cases which require exact decimal representation, try using the :mod:`decimal` module which implements decimal arithmetic suitable for accounting applications and high-precision applications."
msgstr ""

msgid "Another form of exact arithmetic is supported by the :mod:`fractions` module which implements arithmetic based on rational numbers (so the numbers like 1/3 can be represented exactly)."
msgstr ""

msgid "If you are a heavy user of floating point operations you should take a look at the Numerical Python package and many other packages for mathematical and statistical operations supplied by the SciPy project. See <http://scipy.org>."
msgstr ""

msgid "Python provides tools that may help on those rare occasions when you really *do* want to know the exact value of a float.  The :meth:`float.as_integer_ratio` method expresses the value of a float as a fraction::"
msgstr ""

msgid ">>> x = 3.14159 >>> x.as_integer_ratio() (3537115888337719, 1125899906842624)"
msgstr ""

msgid "Since the ratio is exact, it can be used to losslessly recreate the original value::"
msgstr ""

msgid ">>> x == 3537115888337719 / 1125899906842624 True"
msgstr ""

msgid "The :meth:`float.hex` method expresses a float in hexadecimal (base 16), again giving the exact value stored by your computer::"
msgstr ""

msgid ">>> x.hex() '0x1.921f9f01b866ep+1'"
msgstr ""

msgid "This precise hexadecimal representation can be used to reconstruct the float value exactly::"
msgstr ""

msgid ">>> x == float.fromhex('0x1.921f9f01b866ep+1') True"
msgstr ""

msgid "Since the representation is exact, it is useful for reliably porting values across different versions of Python (platform independence) and exchanging data with other languages that support the same format (such as Java and C99)."
msgstr ""

msgid "Another helpful tool is the :func:`math.fsum` function which helps mitigate loss-of-precision during summation.  It tracks \"lost digits\" as values are added onto a running total.  That can make a difference in overall accuracy so that the errors do not accumulate to the point where they affect the final total:"
msgstr ""

msgid ">>> sum([0.1] * 10) == 1.0 False >>> math.fsum([0.1] * 10) == 1.0 True"
msgstr ""

msgid "Representation Error"
msgstr ""

msgid "This section explains the \"0.1\" example in detail, and shows how you can perform an exact analysis of cases like this yourself.  Basic familiarity with binary floating-point representation is assumed."
msgstr ""

msgid ":dfn:`Representation error` refers to the fact that some (most, actually) decimal fractions cannot be represented exactly as binary (base 2) fractions. This is the chief reason why Python (or Perl, C, C++, Java, Fortran, and many others) often won't display the exact decimal number you expect."
msgstr ""

msgid "Why is that?  1/10 is not exactly representable as a binary fraction. Almost all machines today (November 2000) use IEEE-754 floating point arithmetic, and almost all platforms map Python floats to IEEE-754 \"double precision\".  754 doubles contain 53 bits of precision, so on input the computer strives to convert 0.1 to the closest fraction it can of the form *J*/2**\\ *N* where *J* is an integer containing exactly 53 bits.  Rewriting ::"
msgstr ""

msgid "1 / 10 ~= J / (2**N)"
msgstr ""

msgid "as ::"
msgstr ""

msgid "J ~= 2**N / 10"
msgstr ""

msgid "and recalling that *J* has exactly 53 bits (is ``>= 2**52`` but ``< 2**53``), the best value for *N* is 56::"
msgstr ""

msgid ">>> 2**52 <=  2**56 // 10  < 2**53 True"
msgstr ""

msgid "That is, 56 is the only value for *N* that leaves *J* with exactly 53 bits.  The best possible value for *J* is then that quotient rounded::"
msgstr ""

msgid ">>> q, r = divmod(2**56, 10) >>> r 6"
msgstr ""

msgid "Since the remainder is more than half of 10, the best approximation is obtained by rounding up::"
msgstr ""

msgid ">>> q+1 7205759403792794"
msgstr ""

msgid "Therefore the best possible approximation to 1/10 in 754 double precision is::"
msgstr ""

msgid "7205759403792794 / 2 ** 56"
msgstr ""

msgid "Dividing both the numerator and denominator by two reduces the fraction to::"
msgstr ""

msgid "3602879701896397 / 2 ** 55"
msgstr ""

msgid "Note that since we rounded up, this is actually a little bit larger than 1/10; if we had not rounded up, the quotient would have been a little bit smaller than 1/10.  But in no case can it be *exactly* 1/10!"
msgstr ""

msgid "So the computer never \"sees\" 1/10:  what it sees is the exact fraction given above, the best 754 double approximation it can get::"
msgstr ""

msgid ">>> 0.1 * 2 ** 55 3602879701896397.0"
msgstr ""

msgid "If we multiply that fraction by 10\\*\\*55, we can see the value out to 55 decimal digits::"
msgstr ""

msgid ">>> 3602879701896397 * 10 ** 55 // 2 ** 55 1000000000000000055511151231257827021181583404541015625"
msgstr ""

msgid "meaning that the exact number stored in the computer is equal to the decimal value 0.1000000000000000055511151231257827021181583404541015625. Instead of displaying the full decimal value, many languages (including older versions of Python), round the result to 17 significant digits::"
msgstr ""

msgid ">>> format(0.1, '.17f') '0.10000000000000001'"
msgstr ""

msgid "The :mod:`fractions` and :mod:`decimal` modules make these calculations easy::"
msgstr ""

msgid ">>> from decimal import Decimal >>> from fractions import Fraction  >>> Fraction.from_float(0.1) Fraction(3602879701896397, 36028797018963968)  >>> (0.1).as_integer_ratio() (3602879701896397, 36028797018963968)  >>> Decimal.from_float(0.1) Decimal('0.1000000000000000055511151231257827021181583404541015625')  >>> format(Decimal.from_float(0.1), '.17') '0.10000000000000001'"
msgstr ""

msgid "The Python Tutorial"
msgstr ""

msgid "Release"
msgstr ""

msgid "|version|"
msgstr ""

msgid "Date"
msgstr ""

msgid "|today|"
msgstr ""

msgid "Python is an easy to learn, powerful programming language. It has efficient high-level data structures and a simple but effective approach to object-oriented programming. Python's elegant syntax and dynamic typing, together with its interpreted nature, make it an ideal language for scripting and rapid application development in many areas on most platforms."
msgstr ""

msgid "The Python interpreter and the extensive standard library are freely available in source or binary form for all major platforms from the Python Web site, http://www.python.org/, and may be freely distributed. The same site also contains distributions of and pointers to many free third party Python modules, programs and tools, and additional documentation."
msgstr ""

msgid "The Python interpreter is easily extended with new functions and data types implemented in C or C++ (or other languages callable from C). Python is also suitable as an extension language for customizable applications."
msgstr ""

msgid "This tutorial introduces the reader informally to the basic concepts and features of the Python language and system. It helps to have a Python interpreter handy for hands-on experience, but all examples are self-contained, so the tutorial can be read off-line as well."
msgstr ""

msgid "For a description of standard objects and modules, see :ref:`library-index`. :ref:`reference-index` gives a more formal definition of the language.  To write extensions in C or C++, read :ref:`extending-index` and :ref:`c-api-index`. There are also several books covering Python in depth."
msgstr ""

msgid "This tutorial does not attempt to be comprehensive and cover every single feature, or even every commonly used feature. Instead, it introduces many of Python's most noteworthy features, and will give you a good idea of the language's flavor and style. After reading it, you will be able to read and write Python modules and programs, and you will be ready to learn more about the various Python library modules described in :ref:`library-index`."
msgstr ""

msgid "The :ref:`glossary` is also worth going through."
msgstr ""

msgid "Input and Output"
msgstr ""

msgid "There are several ways to present the output of a program; data can be printed in a human-readable form, or written to a file for future use. This chapter will discuss some of the possibilities."
msgstr ""

msgid "Fancier Output Formatting"
msgstr ""

msgid "So far we've encountered two ways of writing values: *expression statements* and the :func:`print` function.  (A third way is using the :meth:`write` method of file objects; the standard output file can be referenced as ``sys.stdout``. See the Library Reference for more information on this.)"
msgstr ""

msgid "Often you'll want more control over the formatting of your output than simply printing space-separated values.  There are two ways to format your output; the first way is to do all the string handling yourself; using string slicing and concatenation operations you can create any layout you can imagine.  The standard module :mod:`string` contains some useful operations for padding strings to a given column width; these will be discussed shortly.  The second way is to use the :meth:`str.format` method."
msgstr ""

msgid "The :mod:`string` module contains a class Template which offers yet another way to substitute values into strings."
msgstr ""

msgid "One question remains, of course: how do you convert values to strings? Luckily, Python has ways to convert any value to a string: pass it to the :func:`repr` or :func:`str` functions."
msgstr ""

msgid "The :func:`str` function is meant to return representations of values which are fairly human-readable, while :func:`repr` is meant to generate representations which can be read by the interpreter (or will force a :exc:`SyntaxError` if there is not equivalent syntax).  For objects which don't have a particular representation for human consumption, :func:`str` will return the same value as :func:`repr`.  Many values, such as numbers or structures like lists and dictionaries, have the same representation using either function.  Strings and floating point numbers, in particular, have two distinct representations."
msgstr ""

msgid "Some examples::"
msgstr ""

msgid ">>> s = 'Hello, world.' >>> str(s) 'Hello, world.' >>> repr(s) \"'Hello, world.'\" >>> str(1.0/7.0) '0.142857142857' >>> repr(1.0/7.0) '0.14285714285714285' >>> x = 10 * 3.25 >>> y = 200 * 200 >>> s = 'The value of x is ' + repr(x) + ', and y is ' + repr(y) + '...' >>> print(s) The value of x is 32.5, and y is 40000... >>> # The repr() of a string adds string quotes and backslashes: ... hello = 'hello, world\\n' >>> hellos = repr(hello) >>> print(hellos) 'hello, world\\n' >>> # The argument to repr() may be any Python object: ... repr((x, y, ('spam', 'eggs'))) \"(32.5, 40000, ('spam', 'eggs'))\""
msgstr ""

msgid "Here are two ways to write a table of squares and cubes::"
msgstr ""

msgid ">>> for x in range(1, 11): ...     print(repr(x).rjust(2), repr(x*x).rjust(3), end=' ') ...     # Note use of 'end' on previous line ...     print(repr(x*x*x).rjust(4)) ...  1   1    1  2   4    8  3   9   27  4  16   64  5  25  125  6  36  216  7  49  343  8  64  512  9  81  729 10 100 1000  >>> for x in range(1, 11): ...     print('{0:2d} {1:3d} {2:4d}'.format(x, x*x, x*x*x)) ...  1   1    1  2   4    8  3   9   27  4  16   64  5  25  125  6  36  216  7  49  343  8  64  512  9  81  729 10 100 1000"
msgstr ""

msgid "(Note that in the first example, one space between each column was added by the way :func:`print` works: it always adds spaces between its arguments.)"
msgstr ""

msgid "This example demonstrates the :meth:`rjust` method of string objects, which right-justifies a string in a field of a given width by padding it with spaces on the left.  There are similar methods :meth:`ljust` and :meth:`center`.  These methods do not write anything, they just return a new string.  If the input string is too long, they don't truncate it, but return it unchanged; this will mess up your column lay-out but that's usually better than the alternative, which would be lying about a value.  (If you really want truncation you can always add a slice operation, as in ``x.ljust(n)[:n]``.)"
msgstr ""

msgid "There is another method, :meth:`zfill`, which pads a numeric string on the left with zeros.  It understands about plus and minus signs::"
msgstr ""

msgid ">>> '12'.zfill(5) '00012' >>> '-3.14'.zfill(7) '-003.14' >>> '3.14159265359'.zfill(5) '3.14159265359'"
msgstr ""

msgid "Basic usage of the :meth:`str.format` method looks like this::"
msgstr ""

msgid ">>> print('We are the {} who say \"{}!\"'.format('knights', 'Ni')) We are the knights who say \"Ni!\""
msgstr ""

msgid "The brackets and characters within them (called format fields) are replaced with the objects passed into the :meth:`~str.format` method.  A number in the brackets can be used to refer to the position of the object passed into the :meth:`~str.format` method. ::"
msgstr ""

msgid ">>> print('{0} and {1}'.format('spam', 'eggs')) spam and eggs >>> print('{1} and {0}'.format('spam', 'eggs')) eggs and spam"
msgstr ""

msgid "If keyword arguments are used in the :meth:`~str.format` method, their values are referred to by using the name of the argument. ::"
msgstr ""

msgid ">>> print('This {food} is {adjective}.'.format( ...       food='spam', adjective='absolutely horrible')) This spam is absolutely horrible."
msgstr ""

msgid "Positional and keyword arguments can be arbitrarily combined::"
msgstr ""

msgid ">>> print('The story of {0}, {1}, and {other}.'.format('Bill', 'Manfred',                                                        other='Georg')) The story of Bill, Manfred, and Georg."
msgstr ""

msgid "``'!a'`` (apply :func:`ascii`), ``'!s'`` (apply :func:`str`) and ``'!r'`` (apply :func:`repr`) can be used to convert the value before it is formatted::"
msgstr ""

msgid ">>> import math >>> print('The value of PI is approximately {}.'.format(math.pi)) The value of PI is approximately 3.14159265359. >>> print('The value of PI is approximately {!r}.'.format(math.pi)) The value of PI is approximately 3.141592653589793."
msgstr ""

msgid "An optional ``':'`` and format specifier can follow the field name. This allows greater control over how the value is formatted.  The following example truncates Pi to three places after the decimal."
msgstr ""

msgid ">>> import math >>> print('The value of PI is approximately {0:.3f}.'.format(math.pi)) The value of PI is approximately 3.142."
msgstr ""

msgid "Passing an integer after the ``':'`` will cause that field to be a minimum number of characters wide.  This is useful for making tables pretty. ::"
msgstr ""

msgid ">>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 7678} >>> for name, phone in table.items(): ...     print('{0:10} ==> {1:10d}'.format(name, phone)) ... Jack       ==>       4098 Dcab       ==>       7678 Sjoerd     ==>       4127"
msgstr ""

msgid "If you have a really long format string that you don't want to split up, it would be nice if you could reference the variables to be formatted by name instead of by position.  This can be done by simply passing the dict and using square brackets ``'[]'`` to access the keys ::"
msgstr ""

msgid ">>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678} >>> print('Jack: {0[Jack]:d}; Sjoerd: {0[Sjoerd]:d}; '           'Dcab: {0[Dcab]:d}'.format(table)) Jack: 4098; Sjoerd: 4127; Dcab: 8637678"
msgstr ""

msgid "This could also be done by passing the table as keyword arguments with the '**' notation. ::"
msgstr ""

msgid ">>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678} >>> print('Jack: {Jack:d}; Sjoerd: {Sjoerd:d}; Dcab: {Dcab:d}'.format(**table)) Jack: 4098; Sjoerd: 4127; Dcab: 8637678"
msgstr ""

msgid "This is particularly useful in combination with the new built-in :func:`vars` function, which returns a dictionary containing all local variables."
msgstr ""

msgid "For a complete overview of string formatting with :meth:`str.format`, see :ref:`formatstrings`."
msgstr ""

msgid "Old string formatting"
msgstr ""

msgid "The ``%`` operator can also be used for string formatting. It interprets the left argument much like a :cfunc:`sprintf`\\ -style format string to be applied to the right argument, and returns the string resulting from this formatting operation. For example::"
msgstr ""

msgid ">>> import math >>> print('The value of PI is approximately %5.3f.' % math.pi) The value of PI is approximately 3.142."
msgstr ""

msgid "Since :meth:`str.format` is quite new, a lot of Python code still uses the ``%`` operator. However, because this old style of formatting will eventually be removed from the language, :meth:`str.format` should generally be used."
msgstr ""

msgid "More information can be found in the :ref:`old-string-formatting` section."
msgstr ""

msgid "Reading and Writing Files"
msgstr ""

msgid ":func:`open` returns a file object, and is most commonly used with two arguments: ``open(filename, mode)``."
msgstr ""

msgid ">>> f = open('/tmp/workfile', 'w')"
msgstr ""

msgid "The first argument is a string containing the filename.  The second argument is another string containing a few characters describing the way in which the file will be used.  *mode* can be ``'r'`` when the file will only be read, ``'w'`` for only writing (an existing file with the same name will be erased), and ``'a'`` opens the file for appending; any data written to the file is automatically added to the end.  ``'r+'`` opens the file for both reading and writing. The *mode* argument is optional; ``'r'`` will be assumed if it's omitted."
msgstr ""

msgid "Normally, files are opened in :dfn:`text mode`, that means, you read and write strings from and to the file, which are encoded in a specific encoding (the default being UTF-8).  ``'b'`` appended to the mode opens the file in :dfn:`binary mode`: now the data is read and written in the form of bytes objects.  This mode should be used for all files that don't contain text."
msgstr ""

msgid "In text mode, the default is to convert platform-specific line endings (``\\n`` on Unix, ``\\r\\n`` on Windows) to just ``\\n`` on reading and ``\\n`` back to platform-specific line endings on writing.  This behind-the-scenes modification to file data is fine for text files, but will corrupt binary data like that in :file:`JPEG` or :file:`EXE` files.  Be very careful to use binary mode when reading and writing such files."
msgstr ""

msgid "Methods of File Objects"
msgstr ""

msgid "The rest of the examples in this section will assume that a file object called ``f`` has already been created."
msgstr ""

msgid "To read a file's contents, call ``f.read(size)``, which reads some quantity of data and returns it as a string or bytes object.  *size* is an optional numeric argument.  When *size* is omitted or negative, the entire contents of the file will be read and returned; it's your problem if the file is twice as large as your machine's memory. Otherwise, at most *size* bytes are read and returned. If the end of the file has been reached, ``f.read()`` will return an empty string (``''``).  ::"
msgstr ""

msgid ">>> f.read() 'This is the entire file.\\n' >>> f.read() ''"
msgstr ""

msgid "``f.readline()`` reads a single line from the file; a newline character (``\\n``) is left at the end of the string, and is only omitted on the last line of the file if the file doesn't end in a newline.  This makes the return value unambiguous; if ``f.readline()`` returns an empty string, the end of the file has been reached, while a blank line is represented by ``'\\n'``, a string containing only a single newline.  ::"
msgstr ""

msgid ">>> f.readline() 'This is the first line of the file.\\n' >>> f.readline() 'Second line of the file\\n' >>> f.readline() ''"
msgstr ""

msgid "``f.readlines()`` returns a list containing all the lines of data in the file. If given an optional parameter *sizehint*, it reads that many bytes from the file and enough more to complete a line, and returns the lines from that.  This is often used to allow efficient reading of a large file by lines, but without having to load the entire file in memory.  Only complete lines will be returned. ::"
msgstr ""

msgid ">>> f.readlines() ['This is the first line of the file.\\n', 'Second line of the file\\n']"
msgstr ""

msgid "An alternative approach to reading lines is to loop over the file object. This is memory efficient, fast, and leads to simpler code::"
msgstr ""

msgid ">>> for line in f: ...     print(line, end='') ... This is the first line of the file. Second line of the file"
msgstr ""

msgid "The alternative approach is simpler but does not provide as fine-grained control.  Since the two approaches manage line buffering differently, they should not be mixed."
msgstr ""

msgid "``f.write(string)`` writes the contents of *string* to the file, returning the number of characters written. ::"
msgstr ""

msgid ">>> f.write('This is a test\\n') 15"
msgstr ""

msgid "To write something other than a string, it needs to be converted to a string first::"
msgstr ""

msgid ">>> value = ('the answer', 42) >>> s = str(value) >>> f.write(s) 18"
msgstr ""

msgid "``f.tell()`` returns an integer giving the file object's current position in the file, measured in bytes from the beginning of the file.  To change the file object's position, use ``f.seek(offset, from_what)``.  The position is computed from adding *offset* to a reference point; the reference point is selected by the *from_what* argument.  A *from_what* value of 0 measures from the beginning of the file, 1 uses the current file position, and 2 uses the end of the file as the reference point.  *from_what* can be omitted and defaults to 0, using the beginning of the file as the reference point. ::"
msgstr ""

msgid ">>> f = open('/tmp/workfile', 'rb+') >>> f.write(b'0123456789abcdef') 16 >>> f.seek(5)     # Go to the 6th byte in the file 5 >>> f.read(1) b'5' >>> f.seek(-3, 2) # Go to the 3rd byte before the end 13 >>> f.read(1) b'd'"
msgstr ""

msgid "In text files (those opened without a ``b`` in the mode string), only seeks relative to the beginning of the file are allowed (the exception being seeking to the very file end with ``seek(0, 2)``)."
msgstr ""

msgid "When you're done with a file, call ``f.close()`` to close it and free up any system resources taken up by the open file.  After calling ``f.close()``, attempts to use the file object will automatically fail. ::"
msgstr ""

msgid ">>> f.close() >>> f.read() Traceback (most recent call last):   File \"<stdin>\", line 1, in ? ValueError: I/O operation on closed file"
msgstr ""

msgid "It is good practice to use the :keyword:`with` keyword when dealing with file objects.  This has the advantage that the file is properly closed after its suite finishes, even if an exception is raised on the way.  It is also much shorter than writing equivalent :keyword:`try`\\ -\\ :keyword:`finally` blocks::"
msgstr ""

msgid ">>> with open('/tmp/workfile', 'r') as f: ...     read_data = f.read() >>> f.closed True"
msgstr ""

msgid "File objects have some additional methods, such as :meth:`~file.isatty` and :meth:`~file.truncate` which are less frequently used; consult the Library Reference for a complete guide to file objects."
msgstr ""

msgid "The :mod:`pickle` Module"
msgstr ""

msgid "Strings can easily be written to and read from a file. Numbers take a bit more effort, since the :meth:`read` method only returns strings, which will have to be passed to a function like :func:`int`, which takes a string like ``'123'`` and returns its numeric value 123.  However, when you want to save more complex data types like lists, dictionaries, or class instances, things get a lot more complicated."
msgstr ""

msgid "Rather than have users be constantly writing and debugging code to save complicated data types, Python provides a standard module called :mod:`pickle`. This is an amazing module that can take almost any Python object (even some forms of Python code!), and convert it to a string representation; this process is called :dfn:`pickling`.  Reconstructing the object from the string representation is called :dfn:`unpickling`.  Between pickling and unpickling, the string representing the object may have been stored in a file or data, or sent over a network connection to some distant machine."
msgstr ""

msgid "If you have an object ``x``, and a file object ``f`` that's been opened for writing, the simplest way to pickle the object takes only one line of code::"
msgstr ""

msgid "pickle.dump(x, f)"
msgstr ""

msgid "To unpickle the object again, if ``f`` is a file object which has been opened for reading::"
msgstr ""

msgid "x = pickle.load(f)"
msgstr ""

msgid "(There are other variants of this, used when pickling many objects or when you don't want to write the pickled data to a file; consult the complete documentation for :mod:`pickle` in the Python Library Reference.)"
msgstr ""

msgid ":mod:`pickle` is the standard way to make Python objects which can be stored and reused by other programs or by a future invocation of the same program; the technical term for this is a :dfn:`persistent` object.  Because :mod:`pickle` is so widely used, many authors who write Python extensions take care to ensure that new data types such as matrices can be properly pickled and unpickled."
msgstr ""

msgid "Interactive Input Editing and History Substitution"
msgstr ""

msgid "Some versions of the Python interpreter support editing of the current input line and history substitution, similar to facilities found in the Korn shell and the GNU Bash shell.  This is implemented using the `GNU Readline`_ library, which supports Emacs-style and vi-style editing.  This library has its own documentation which I won't duplicate here; however, the basics are easily explained.  The interactive editing and history described here are optionally available in the Unix and Cygwin versions of the interpreter."
msgstr ""

msgid "This chapter does *not* document the editing facilities of Mark Hammond's PythonWin package or the Tk-based environment, IDLE, distributed with Python. The command line history recall which operates within DOS boxes on NT and some other DOS and Windows flavors  is yet another beast."
msgstr ""

msgid "Line Editing"
msgstr ""

msgid "If supported, input line editing is active whenever the interpreter prints a primary or secondary prompt.  The current line can be edited using the conventional Emacs control characters.  The most important of these are: :kbd:`C-A` (Control-A) moves the cursor to the beginning of the line, :kbd:`C-E` to the end, :kbd:`C-B` moves it one position to the left, :kbd:`C-F` to the right.  Backspace erases the character to the left of the cursor, :kbd:`C-D` the character to its right. :kbd:`C-K` kills (erases) the rest of the line to the right of the cursor, :kbd:`C-Y` yanks back the last killed string. :kbd:`C-underscore` undoes the last change you made; it can be repeated for cumulative effect."
msgstr ""

msgid "History Substitution"
msgstr ""

msgid "History substitution works as follows.  All non-empty input lines issued are saved in a history buffer, and when a new prompt is given you are positioned on a new line at the bottom of this buffer. :kbd:`C-P` moves one line up (back) in the history buffer, :kbd:`C-N` moves one down.  Any line in the history buffer can be edited; an asterisk appears in front of the prompt to mark a line as modified.  Pressing the :kbd:`Return` key passes the current line to the interpreter.  :kbd:`C-R` starts an incremental reverse search; :kbd:`C-S` starts a forward search."
msgstr ""

msgid "Key Bindings"
msgstr ""

msgid "The key bindings and some other parameters of the Readline library can be customized by placing commands in an initialization file called :file:`~/.inputrc`.  Key bindings have the form ::"
msgstr ""

msgid "key-name: function-name"
msgstr ""

msgid "or ::"
msgstr ""

msgid "\"string\": function-name"
msgstr ""

msgid "and options can be set with ::"
msgstr ""

msgid "set option-name value"
msgstr ""

msgid "For example::"
msgstr ""

msgid "# I prefer vi-style editing: set editing-mode vi  # Edit using a single line: set horizontal-scroll-mode On  # Rebind some keys: Meta-h: backward-kill-word \"\\C-u\": universal-argument \"\\C-x\\C-r\": re-read-init-file"
msgstr ""

msgid "Note that the default binding for :kbd:`Tab` in Python is to insert a :kbd:`Tab` character instead of Readline's default filename completion function.  If you insist, you can override this by putting ::"
msgstr ""

msgid "Tab: complete"
msgstr ""

msgid "in your :file:`~/.inputrc`.  (Of course, this makes it harder to type indented continuation lines if you're accustomed to using :kbd:`Tab` for that purpose.)"
msgstr ""

msgid "Automatic completion of variable and module names is optionally available.  To enable it in the interpreter's interactive mode, add the following to your startup file: [#]_  ::"
msgstr ""

msgid "import rlcompleter, readline readline.parse_and_bind('tab: complete')"
msgstr ""

msgid "This binds the :kbd:`Tab` key to the completion function, so hitting the :kbd:`Tab` key twice suggests completions; it looks at Python statement names, the current local variables, and the available module names.  For dotted expressions such as ``string.a``, it will evaluate the expression up to the final ``'.'`` and then suggest completions from the attributes of the resulting object.  Note that this may execute application-defined code if an object with a :meth:`__getattr__` method is part of the expression."
msgstr ""

msgid "A more capable startup file might look like this example.  Note that this deletes the names it creates once they are no longer needed; this is done since the startup file is executed in the same namespace as the interactive commands, and removing the names avoids creating side effects in the interactive environment.  You may find it convenient to keep some of the imported modules, such as :mod:`os`, which turn out to be needed in most sessions with the interpreter. ::"
msgstr ""

msgid "# Add auto-completion and a stored history file of commands to your Python # interactive interpreter. Requires Python 2.0+, readline. Autocomplete is # bound to the Esc key by default (you can change it - see readline docs). # # Store the file in ~/.pystartup, and set an environment variable to point # to it:  \"export PYTHONSTARTUP=/home/user/.pystartup\" in bash. # # Note that PYTHONSTARTUP does *not* expand \"~\", so you have to put in the # full path to your home directory.  import atexit import os import readline import rlcompleter  historyPath = os.path.expanduser(\"~/.pyhistory\")  def save_history(historyPath=historyPath):     import readline     readline.write_history_file(historyPath)  if os.path.exists(historyPath):     readline.read_history_file(historyPath)  atexit.register(save_history) del os, atexit, readline, rlcompleter, save_history, historyPath"
msgstr ""

msgid "Alternatives to the Interactive Interpreter"
msgstr ""

msgid "This facility is an enormous step forward compared to earlier versions of the interpreter; however, some wishes are left: It would be nice if the proper indentation were suggested on continuation lines (the parser knows if an indent token is required next).  The completion mechanism might use the interpreter's symbol table.  A command to check (or even suggest) matching parentheses, quotes, etc., would also be useful."
msgstr ""

msgid "One alternative enhanced interactive interpreter that has been around for quite some time is `IPython`_, which features tab completion, object exploration and advanced history management.  It can also be thoroughly customized and embedded into other applications.  Another similar enhanced interactive environment is `bpython`_."
msgstr ""

msgid "Python will execute the contents of a file identified by the :envvar:`PYTHONSTARTUP` environment variable when you start an interactive interpreter."
msgstr ""

msgid "Using the Python Interpreter"
msgstr ""

msgid "Invoking the Interpreter"
msgstr ""

msgid "The Python interpreter is usually installed as :file:`/usr/local/bin/python3.2` on those machines where it is available; putting :file:`/usr/local/bin` in your Unix shell's search path makes it possible to start it by typing the command ::"
msgstr ""

msgid "python3.2"
msgstr ""

msgid "to the shell. [#]_ Since the choice of the directory where the interpreter lives is an installation option, other places are possible; check with your local Python guru or system administrator.  (E.g., :file:`/usr/local/python` is a popular alternative location.)"
msgstr ""

msgid "On Windows machines, the Python installation is usually placed in :file:`C:\\\\Python32`, though you can change this when you're running the installer.  To add this directory to your path,  you can type the following command into the command prompt in a DOS box::"
msgstr ""

msgid "set path=%path%;C:\\python32"
msgstr ""

msgid "Typing an end-of-file character (:kbd:`Control-D` on Unix, :kbd:`Control-Z` on Windows) at the primary prompt causes the interpreter to exit with a zero exit status.  If that doesn't work, you can exit the interpreter by typing the following command: ``quit()``."
msgstr ""

msgid "The interpreter's line-editing features usually aren't very sophisticated.  On Unix, whoever installed the interpreter may have enabled support for the GNU readline library, which adds more elaborate interactive editing and history features. Perhaps the quickest check to see whether command line editing is supported is typing Control-P to the first Python prompt you get.  If it beeps, you have command line editing; see Appendix :ref:`tut-interacting` for an introduction to the keys.  If nothing appears to happen, or if ``^P`` is echoed, command line editing isn't available; you'll only be able to use backspace to remove characters from the current line."
msgstr ""

msgid "The interpreter operates somewhat like the Unix shell: when called with standard input connected to a tty device, it reads and executes commands interactively; when called with a file name argument or with a file as standard input, it reads and executes a *script* from that file."
msgstr ""

msgid "A second way of starting the interpreter is ``python -c command [arg] ...``, which executes the statement(s) in *command*, analogous to the shell's :option:`-c` option.  Since Python statements often contain spaces or other characters that are special to the shell, it is usually advised to quote *command* in its entirety with single quotes."
msgstr ""

msgid "Some Python modules are also useful as scripts.  These can be invoked using ``python -m module [arg] ...``, which executes the source file for *module* as if you had spelled out its full name on the command line."
msgstr ""

msgid "Note that there is a difference between ``python file`` and ``python <file``.  In the latter case, input requests from the program, such as calling ``sys.stdin.read()``, are satisfied from *file*.  Since this file has already been read until the end by the parser before the program starts executing, the program will encounter end-of-file immediately.  In the former case (which is usually what you want) they are satisfied from whatever file or device is connected to standard input of the Python interpreter."
msgstr ""

msgid "When a script file is used, it is sometimes useful to be able to run the script and enter interactive mode afterwards.  This can be done by passing :option:`-i` before the script.  (This does not work if the script is read from standard input, for the same reason as explained in the previous paragraph.)"
msgstr ""

msgid "Argument Passing"
msgstr ""

msgid "When known to the interpreter, the script name and additional arguments thereafter are passed to the script in the variable ``sys.argv``, which is a list of strings.  Its length is at least one; when no script and no arguments are given, ``sys.argv[0]`` is an empty string.  When the script name is given as ``'-'`` (meaning  standard input), ``sys.argv[0]`` is set to ``'-'``.  When :option:`-c` *command* is used, ``sys.argv[0]`` is set to ``'-c'``.  When :option:`-m` *module* is used, ``sys.argv[0]``  is set to the full name of the located module.  Options found after  :option:`-c` *command* or :option:`-m` *module* are not consumed  by the Python interpreter's option processing but left in ``sys.argv`` for  the command or module to handle."
msgstr ""

msgid "Interactive Mode"
msgstr ""

msgid "When commands are read from a tty, the interpreter is said to be in *interactive mode*.  In this mode it prompts for the next command with the *primary prompt*, usually three greater-than signs (``>>>``); for continuation lines it prompts with the *secondary prompt*, by default three dots (``...``). The interpreter prints a welcome message stating its version number and a copyright notice before printing the first prompt::"
msgstr ""

msgid "$ python3.2 Python 3.2 (py3k, Sep 12 2007, 12:21:02) [GCC 3.4.6 20060404 (Red Hat 3.4.6-8)] on linux2 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>>"
msgstr ""

msgid "Continuation lines are needed when entering a multi-line construct. As an example, take a look at this :keyword:`if` statement::"
msgstr ""

msgid ">>> the_world_is_flat = 1 >>> if the_world_is_flat: ...     print(\"Be careful not to fall off!\") ... Be careful not to fall off!"
msgstr ""

msgid "The Interpreter and Its Environment"
msgstr ""

msgid "Error Handling"
msgstr ""

msgid "When an error occurs, the interpreter prints an error message and a stack trace. In interactive mode, it then returns to the primary prompt; when input came from a file, it exits with a nonzero exit status after printing the stack trace. (Exceptions handled by an :keyword:`except` clause in a :keyword:`try` statement are not errors in this context.)  Some errors are unconditionally fatal and cause an exit with a nonzero exit; this applies to internal inconsistencies and some cases of running out of memory.  All error messages are written to the standard error stream; normal output from executed commands is written to standard output."
msgstr ""

msgid "Typing the interrupt character (usually Control-C or DEL) to the primary or secondary prompt cancels the input and returns to the primary prompt. [#]_ Typing an interrupt while a command is executing raises the :exc:`KeyboardInterrupt` exception, which may be handled by a :keyword:`try` statement."
msgstr ""

msgid "Executable Python Scripts"
msgstr ""

msgid "On BSD'ish Unix systems, Python scripts can be made directly executable, like shell scripts, by putting the line ::"
msgstr ""

msgid "#! /usr/bin/env python3.2"
msgstr ""

msgid "(assuming that the interpreter is on the user's :envvar:`PATH`) at the beginning of the script and giving the file an executable mode.  The ``#!`` must be the first two characters of the file.  On some platforms, this first line must end with a Unix-style line ending (``'\\n'``), not a Windows (``'\\r\\n'``) line ending.  Note that the hash, or pound, character, ``'#'``, is used to start a comment in Python."
msgstr ""

msgid "The script can be given an executable mode, or permission, using the :program:`chmod` command::"
msgstr ""

msgid "$ chmod +x myscript.py"
msgstr ""

msgid "On Windows systems, there is no notion of an \"executable mode\".  The Python installer automatically associates ``.py`` files with ``python.exe`` so that a double-click on a Python file will run it as a script.  The extension can also be ``.pyw``, in that case, the console window that normally appears is suppressed."
msgstr ""

msgid "Source Code Encoding"
msgstr ""

msgid "By default, Python source files are treated as encoded in UTF-8.  In that encoding, characters of most languages in the world can be used simultaneously in string literals, identifiers and comments --- although the standard library only uses ASCII characters for identifiers, a convention that any portable code should follow.  To display all these characters properly, your editor must recognize that the file is UTF-8, and it must use a font that supports all the characters in the file."
msgstr ""

msgid "It is also possible to specify a different encoding for source files.  In order to do this, put one more special comment line right after the ``#!`` line to define the source file encoding::"
msgstr ""

msgid "# -*- coding: encoding -*-"
msgstr ""

msgid "With that declaration, everything in the source file will be treated as having the encoding *encoding* instead of UTF-8.  The list of possible encodings can be found in the Python Library Reference, in the section on :mod:`codecs`."
msgstr ""

msgid "For example, if your editor of choice does not support UTF-8 encoded files and insists on using some other encoding, say Windows-1252, you can write::"
msgstr ""

msgid "# -*- coding: cp-1252 -*-"
msgstr ""

msgid "and still use all characters in the Windows-1252 character set in the source files.  The special encoding comment must be in the *first or second* line within the file."
msgstr ""

msgid "The Interactive Startup File"
msgstr ""

msgid "When you use Python interactively, it is frequently handy to have some standard commands executed every time the interpreter is started.  You can do this by setting an environment variable named :envvar:`PYTHONSTARTUP` to the name of a file containing your start-up commands.  This is similar to the :file:`.profile` feature of the Unix shells."
msgstr ""

msgid "This file is only read in interactive sessions, not when Python reads commands from a script, and not when :file:`/dev/tty` is given as the explicit source of commands (which otherwise behaves like an interactive session).  It is executed in the same namespace where interactive commands are executed, so that objects that it defines or imports can be used without qualification in the interactive session. You can also change the prompts ``sys.ps1`` and ``sys.ps2`` in this file."
msgstr ""

msgid "If you want to read an additional start-up file from the current directory, you can program this in the global start-up file using code like ``if os.path.isfile('.pythonrc.py'): exec(open('.pythonrc.py').read())``. If you want to use the startup file in a script, you must do this explicitly in the script::"
msgstr ""

msgid "import os filename = os.environ.get('PYTHONSTARTUP') if filename and os.path.isfile(filename):     exec(open(filename).read())"
msgstr ""

msgid "On Unix, the Python 3.x interpreter is by default not installed with the executable named ``python``, so that it does not conflict with a simultaneously installed Python 2.x executable."
msgstr ""

msgid "A problem with the GNU Readline package may prevent this."
msgstr ""

msgid "An Informal Introduction to Python"
msgstr ""

msgid "In the following examples, input and output are distinguished by the presence or absence of prompts (``>>>`` and ``...``): to repeat the example, you must type everything after the prompt, when the prompt appears; lines that do not begin with a prompt are output from the interpreter. Note that a secondary prompt on a line by itself in an example means you must type a blank line; this is used to end a multi-line command."
msgstr ""

msgid "Many of the examples in this manual, even those entered at the interactive prompt, include comments.  Comments in Python start with the hash character, ``#``, and extend to the end of the physical line.  A comment may appear at the start of a line or following whitespace or code, but not within a string literal.  A hash character within a string literal is just a hash character. Since comments are to clarify code and are not interpreted by Python, they may be omitted when typing in examples."
msgstr ""

msgid "# this is the first comment SPAM = 1                 # and this is the second comment                          # ... and now a third! STRING = \"# This is not a comment.\""
msgstr ""

msgid "Using Python as a Calculator"
msgstr ""

msgid "Let's try some simple Python commands.  Start the interpreter and wait for the primary prompt, ``>>>``.  (It shouldn't take long.)"
msgstr ""

msgid "Numbers"
msgstr ""

msgid "The interpreter acts as a simple calculator: you can type an expression at it and it will write the value.  Expression syntax is straightforward: the operators ``+``, ``-``, ``*`` and ``/`` work just like in most other languages (for example, Pascal or C); parentheses can be used for grouping.  For example::"
msgstr ""

msgid ">>> 2+2 4 >>> # This is a comment ... 2+2 4 >>> 2+2  # and a comment on the same line as code 4 >>> (50-5*6)/4 5.0 >>> 8/5 # Fractions aren't lost when dividing integers 1.6"
msgstr ""

msgid "Note: You might not see exactly the same result; floating point results can differ from one machine to another.  We will say more later about controlling the appearance of floating point output.  See also :ref:`tut-fp-issues` for a full discussion of some of the subtleties of floating point numbers and their representations."
msgstr ""

msgid "To do integer division and get an integer result, discarding any fractional result, there is another operator, ``//``::"
msgstr ""

msgid ">>> # Integer division returns the floor: ... 7//3 2 >>> 7//-3 -3"
msgstr ""

msgid "The equal sign (``'='``) is used to assign a value to a variable. Afterwards, no result is displayed before the next interactive prompt::"
msgstr ""

msgid ">>> width = 20 >>> height = 5*9 >>> width * height 900"
msgstr ""

msgid "A value can be assigned to several variables simultaneously::"
msgstr ""

msgid ">>> x = y = z = 0  # Zero x, y and z >>> x 0 >>> y 0 >>> z 0"
msgstr ""

msgid "Variables must be \"defined\" (assigned a value) before they can be used, or an error will occur::"
msgstr ""

msgid ">>> # try to access an undefined variable ... n Traceback (most recent call last):   File \"<stdin>\", line 1, in <module> NameError: name 'n' is not defined"
msgstr ""

msgid "There is full support for floating point; operators with mixed type operands convert the integer operand to floating point::"
msgstr ""

msgid ">>> 3 * 3.75 / 1.5 7.5 >>> 7.0 / 2 3.5"
msgstr ""

msgid "Complex numbers are also supported; imaginary numbers are written with a suffix of ``j`` or ``J``.  Complex numbers with a nonzero real component are written as ``(real+imagj)``, or can be created with the ``complex(real, imag)`` function. ::"
msgstr ""

msgid ">>> 1j * 1J (-1+0j) >>> 1j * complex(0, 1) (-1+0j) >>> 3+1j*3 (3+3j) >>> (3+1j)*3 (9+3j) >>> (1+2j)/(1+1j) (1.5+0.5j)"
msgstr ""

msgid "Complex numbers are always represented as two floating point numbers, the real and imaginary part.  To extract these parts from a complex number *z*, use ``z.real`` and ``z.imag``.   ::"
msgstr ""

msgid ">>> a=1.5+0.5j >>> a.real 1.5 >>> a.imag 0.5"
msgstr ""

msgid "The conversion functions to floating point and integer (:func:`float`, :func:`int`) don't work for complex numbers --- there is not one correct way to convert a complex number to a real number.  Use ``abs(z)`` to get its magnitude (as a float) or ``z.real`` to get its real part::"
msgstr ""

msgid ">>> a=3.0+4.0j >>> float(a) Traceback (most recent call last):   File \"<stdin>\", line 1, in ? TypeError: can't convert complex to float; use abs(z) >>> a.real 3.0 >>> a.imag 4.0 >>> abs(a)  # sqrt(a.real**2 + a.imag**2) 5.0"
msgstr ""

msgid "In interactive mode, the last printed expression is assigned to the variable ``_``.  This means that when you are using Python as a desk calculator, it is somewhat easier to continue calculations, for example::"
msgstr ""

msgid ">>> tax = 12.5 / 100 >>> price = 100.50 >>> price * tax 12.5625 >>> price + _ 113.0625 >>> round(_, 2) 113.06"
msgstr ""

msgid "This variable should be treated as read-only by the user.  Don't explicitly assign a value to it --- you would create an independent local variable with the same name masking the built-in variable with its magic behavior."
msgstr ""

msgid "Strings"
msgstr ""

msgid "Besides numbers, Python can also manipulate strings, which can be expressed in several ways.  They can be enclosed in single quotes or double quotes::"
msgstr ""

msgid ">>> 'spam eggs' 'spam eggs' >>> 'doesn\\'t' \"doesn't\" >>> \"doesn't\" \"doesn't\" >>> '\"Yes,\" he said.' '\"Yes,\" he said.' >>> \"\\\"Yes,\\\" he said.\" '\"Yes,\" he said.' >>> '\"Isn\\'t,\" she said.' '\"Isn\\'t,\" she said.'"
msgstr ""

msgid "The interpreter prints the result of string operations in the same way as they are typed for input: inside quotes, and with quotes and other funny characters escaped by backslashes, to show the precise value.  The string is enclosed in double quotes if the string contains a single quote and no double quotes, else it's enclosed in single quotes.  Once again, the :func:`print` function produces the more readable output."
msgstr ""

msgid "String literals can span multiple lines in several ways.  Continuation lines can be used, with a backslash as the last character on the line indicating that the next line is a logical continuation of the line::"
msgstr ""

msgid "hello = \"This is a rather long string containing\\n\\ several lines of text just as you would do in C.\\n\\     Note that whitespace at the beginning of the line is\\  significant.\"  print(hello)"
msgstr ""

msgid "Note that newlines still need to be embedded in the string using ``\\n`` -- the newline following the trailing backslash is discarded.  This example would print the following:"
msgstr ""

msgid "This is a rather long string containing several lines of text just as you would do in C.     Note that whitespace at the beginning of the line is significant."
msgstr ""

msgid "Or, strings can be surrounded in a pair of matching triple-quotes: ``\"\"\"`` or ``'''``.  End of lines do not need to be escaped when using triple-quotes, but they will be included in the string. ::"
msgstr ""

msgid "print(\"\"\" Usage: thingy [OPTIONS]      -h                        Display this usage message      -H hostname               Hostname to connect to \"\"\")"
msgstr ""

msgid "produces the following output:"
msgstr ""

msgid "Usage: thingy [OPTIONS]      -h                        Display this usage message      -H hostname               Hostname to connect to"
msgstr ""

msgid "If we make the string literal a \"raw\" string, ``\\n`` sequences are not converted to newlines, but the backslash at the end of the line, and the newline character in the source, are both included in the string as data.  Thus, the example::"
msgstr ""

msgid "hello = r\"This is a rather long string containing\\n\\ several lines of text much as you would do in C.\"  print(hello)"
msgstr ""

msgid "would print:"
msgstr ""

msgid "This is a rather long string containing\\n\\ several lines of text much as you would do in C."
msgstr ""

msgid "Strings can be concatenated (glued together) with the ``+`` operator, and repeated with ``*``::"
msgstr ""

msgid ">>> word = 'Help' + 'A' >>> word 'HelpA' >>> '<' + word*5 + '>' '<HelpAHelpAHelpAHelpAHelpA>'"
msgstr ""

msgid "Two string literals next to each other are automatically concatenated; the first line above could also have been written ``word = 'Help' 'A'``; this only works with two literals, not with arbitrary string expressions::"
msgstr ""

msgid ">>> 'str' 'ing'                   #  <-  This is ok 'string' >>> 'str'.strip() + 'ing'   #  <-  This is ok 'string' >>> 'str'.strip() 'ing'     #  <-  This is invalid   File \"<stdin>\", line 1, in ?     'str'.strip() 'ing'                       ^ SyntaxError: invalid syntax"
msgstr ""

msgid "Strings can be subscripted (indexed); like in C, the first character of a string has subscript (index) 0.  There is no separate character type; a character is simply a string of size one.  As in the Icon programming language, substrings can be specified with the *slice notation*: two indices separated by a colon. ::"
msgstr ""

msgid ">>> word[4] 'A' >>> word[0:2] 'He' >>> word[2:4] 'lp'"
msgstr ""

msgid "Slice indices have useful defaults; an omitted first index defaults to zero, an omitted second index defaults to the size of the string being sliced. ::"
msgstr ""

msgid ">>> word[:2]    # The first two characters 'He' >>> word[2:]    # Everything except the first two characters 'lpA'"
msgstr ""

msgid "Unlike a C string, Python strings cannot be changed.  Assigning to an indexed position in the string results in an error::"
msgstr ""

msgid ">>> word[0] = 'x' Traceback (most recent call last):   File \"<stdin>\", line 1, in ? TypeError: 'str' object does not support item assignment >>> word[:1] = 'Splat' Traceback (most recent call last):   File \"<stdin>\", line 1, in ? TypeError: 'str' object does not support slice assignment"
msgstr ""

msgid "However, creating a new string with the combined content is easy and efficient::"
msgstr ""

msgid ">>> 'x' + word[1:] 'xelpA' >>> 'Splat' + word[4] 'SplatA'"
msgstr ""

msgid "Here's a useful invariant of slice operations: ``s[:i] + s[i:]`` equals ``s``. ::"
msgstr ""

msgid ">>> word[:2] + word[2:] 'HelpA' >>> word[:3] + word[3:] 'HelpA'"
msgstr ""

msgid "Degenerate slice indices are handled gracefully: an index that is too large is replaced by the string size, an upper bound smaller than the lower bound returns an empty string. ::"
msgstr ""

msgid ">>> word[1:100] 'elpA' >>> word[10:] '' >>> word[2:1] ''"
msgstr ""

msgid "Indices may be negative numbers, to start counting from the right. For example::"
msgstr ""

msgid ">>> word[-1]     # The last character 'A' >>> word[-2]     # The last-but-one character 'p' >>> word[-2:]    # The last two characters 'pA' >>> word[:-2]    # Everything except the last two characters 'Hel'"
msgstr ""

msgid "But note that -0 is really the same as 0, so it does not count from the right! ::"
msgstr ""

msgid ">>> word[-0]     # (since -0 equals 0) 'H'"
msgstr ""

msgid "Out-of-range negative slice indices are truncated, but don't try this for single-element (non-slice) indices::"
msgstr ""

msgid ">>> word[-100:] 'HelpA' >>> word[-10]    # error Traceback (most recent call last):   File \"<stdin>\", line 1, in ? IndexError: string index out of range"
msgstr ""

msgid "One way to remember how slices work is to think of the indices as pointing *between* characters, with the left edge of the first character numbered 0. Then the right edge of the last character of a string of *n* characters has index *n*, for example::"
msgstr ""

msgid "+---+---+---+---+---+  | H | e | l | p | A |  +---+---+---+---+---+  0   1   2   3   4   5 -5  -4  -3  -2  -1"
msgstr ""

msgid "The first row of numbers gives the position of the indices 0...5 in the string; the second row gives the corresponding negative indices. The slice from *i* to *j* consists of all characters between the edges labeled *i* and *j*, respectively."
msgstr ""

msgid "For non-negative indices, the length of a slice is the difference of the indices, if both are within bounds.  For example, the length of ``word[1:3]`` is 2."
msgstr ""

msgid "The built-in function :func:`len` returns the length of a string::"
msgstr ""

msgid ">>> s = 'supercalifragilisticexpialidocious' >>> len(s) 34"
msgstr ""

msgid "See also"
msgstr ""

msgid "Strings are examples of *sequence types*, and support the common operations supported by such types."
msgstr ""

msgid "Strings support a large number of methods for basic transformations and searching."
msgstr ""

msgid "Information about string formatting with :meth:`str.format` is described here."
msgstr ""

msgid "The old formatting operations invoked when strings and Unicode strings are the left operand of the ``%`` operator are described in more detail here."
msgstr ""

msgid "About Unicode"
msgstr ""

msgid "Starting with Python 3.0 all strings support Unicode (see http://www.unicode.org/)."
msgstr ""

msgid "Unicode has the advantage of providing one ordinal for every character in every script used in modern and ancient texts. Previously, there were only 256 possible ordinals for script characters. Texts were typically bound to a code page which mapped the ordinals to script characters. This lead to very much confusion especially with respect to internationalization (usually written as ``i18n`` --- ``'i'`` + 18 characters + ``'n'``) of software.  Unicode solves these problems by defining one code page for all scripts."
msgstr ""

msgid "If you want to include special characters in a string, you can do so by using the Python *Unicode-Escape* encoding. The following example shows how::"
msgstr ""

msgid ">>> 'Hello\\u0020World !' 'Hello World !'"
msgstr ""

msgid "The escape sequence ``\\u0020`` indicates to insert the Unicode character with the ordinal value 0x0020 (the space character) at the given position."
msgstr ""

msgid "Other characters are interpreted by using their respective ordinal values directly as Unicode ordinals.  If you have literal strings in the standard Latin-1 encoding that is used in many Western countries, you will find it convenient that the lower 256 characters of Unicode are the same as the 256 characters of Latin-1."
msgstr ""

msgid "Apart from these standard encodings, Python provides a whole set of other ways of creating Unicode strings on the basis of a known encoding."
msgstr ""

msgid "To convert a string into a sequence of bytes using a specific encoding, string objects provide an :func:`encode` method that takes one argument, the name of the encoding.  Lowercase names for encodings are preferred. ::"
msgstr ""

msgid ">>> \"Äpfel\".encode('utf-8') b'\\xc3\\x84pfel'"
msgstr ""

msgid "Lists"
msgstr ""

msgid "Python knows a number of *compound* data types, used to group together other values.  The most versatile is the *list*, which can be written as a list of comma-separated values (items) between square brackets.  List items need not all have the same type. ::"
msgstr ""

msgid ">>> a = ['spam', 'eggs', 100, 1234] >>> a ['spam', 'eggs', 100, 1234]"
msgstr ""

msgid "Like string indices, list indices start at 0, and lists can be sliced, concatenated and so on::"
msgstr ""

msgid ">>> a[0] 'spam' >>> a[3] 1234 >>> a[-2] 100 >>> a[1:-1] ['eggs', 100] >>> a[:2] + ['bacon', 2*2] ['spam', 'eggs', 'bacon', 4] >>> 3*a[:3] + ['Boo!'] ['spam', 'eggs', 100, 'spam', 'eggs', 100, 'spam', 'eggs', 100, 'Boo!']"
msgstr ""

msgid "All slice operations return a new list containing the requested elements.  This means that the following slice returns a shallow copy of the list *a*::"
msgstr ""

msgid ">>> a[:] ['spam', 'eggs', 100, 1234]"
msgstr ""

msgid "Unlike strings, which are *immutable*, it is possible to change individual elements of a list::"
msgstr ""

msgid ">>> a ['spam', 'eggs', 100, 1234] >>> a[2] = a[2] + 23 >>> a ['spam', 'eggs', 123, 1234]"
msgstr ""

msgid "Assignment to slices is also possible, and this can even change the size of the list or clear it entirely::"
msgstr ""

msgid ">>> # Replace some items: ... a[0:2] = [1, 12] >>> a [1, 12, 123, 1234] >>> # Remove some: ... a[0:2] = [] >>> a [123, 1234] >>> # Insert some: ... a[1:1] = ['bletch', 'xyzzy'] >>> a [123, 'bletch', 'xyzzy', 1234] >>> # Insert (a copy of) itself at the beginning >>> a[:0] = a >>> a [123, 'bletch', 'xyzzy', 1234, 123, 'bletch', 'xyzzy', 1234] >>> # Clear the list: replace all items with an empty list >>> a[:] = [] >>> a []"
msgstr ""

msgid "The built-in function :func:`len` also applies to lists::"
msgstr ""

msgid ">>> a = ['a', 'b', 'c', 'd'] >>> len(a) 4"
msgstr ""

msgid "It is possible to nest lists (create lists containing other lists), for example::"
msgstr ""

msgid ">>> q = [2, 3] >>> p = [1, q, 4] >>> len(p) 3 >>> p[1] [2, 3] >>> p[1][0] 2"
msgstr ""

msgid "You can add something to the end of the list::"
msgstr ""

msgid ">>> p[1].append('xtra') >>> p [1, [2, 3, 'xtra'], 4] >>> q [2, 3, 'xtra']"
msgstr ""

msgid "Note that in the last example, ``p[1]`` and ``q`` really refer to the same object!  We'll come back to *object semantics* later."
msgstr ""

msgid "First Steps Towards Programming"
msgstr ""

msgid "Of course, we can use Python for more complicated tasks than adding two and two together.  For instance, we can write an initial sub-sequence of the *Fibonacci* series as follows::"
msgstr ""

msgid ">>> # Fibonacci series: ... # the sum of two elements defines the next ... a, b = 0, 1 >>> while b < 10: ...     print(b) ...     a, b = b, a+b ... 1 1 2 3 5 8"
msgstr ""

msgid "This example introduces several new features."
msgstr ""

msgid "The first line contains a *multiple assignment*: the variables ``a`` and ``b`` simultaneously get the new values 0 and 1.  On the last line this is used again, demonstrating that the expressions on the right-hand side are all evaluated first before any of the assignments take place.  The right-hand side expressions are evaluated  from the left to the right."
msgstr ""

msgid "The :keyword:`while` loop executes as long as the condition (here: ``b < 10``) remains true.  In Python, like in C, any non-zero integer value is true; zero is false.  The condition may also be a string or list value, in fact any sequence; anything with a non-zero length is true, empty sequences are false.  The test used in the example is a simple comparison.  The standard comparison operators are written the same as in C: ``<`` (less than), ``>`` (greater than), ``==`` (equal to), ``<=`` (less than or equal to), ``>=`` (greater than or equal to) and ``!=`` (not equal to)."
msgstr ""

msgid "The *body* of the loop is *indented*: indentation is Python's way of grouping statements.  Python does not (yet!) provide an intelligent input line editing facility, so you have to type a tab or space(s) for each indented line.  In practice you will prepare more complicated input for Python with a text editor; most text editors have an auto-indent facility.  When a compound statement is entered interactively, it must be followed by a blank line to indicate completion (since the parser cannot guess when you have typed the last line). Note that each line within a basic block must be indented by the same amount."
msgstr ""

msgid "The :func:`print` function writes the value of the expression(s) it is given.  It differs from just writing the expression you want to write (as we did earlier in the calculator examples) in the way it handles multiple expressions, floating point quantities, and strings.  Strings are printed without quotes, and a space is inserted between items, so you can format things nicely, like this::"
msgstr ""

msgid ">>> i = 256*256 >>> print('The value of i is', i) The value of i is 65536"
msgstr ""

msgid "The keyword *end* can be used to avoid the newline after the output, or end the output with a different string::"
msgstr ""

msgid ">>> a, b = 0, 1 >>> while b < 1000: ...     print(b, end=' ') ...     a, b = b, a+b ... 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987"
msgstr ""

msgid "Modules"
msgstr ""

msgid "If you quit from the Python interpreter and enter it again, the definitions you have made (functions and variables) are lost. Therefore, if you want to write a somewhat longer program, you are better off using a text editor to prepare the input for the interpreter and running it with that file as input instead.  This is known as creating a *script*.  As your program gets longer, you may want to split it into several files for easier maintenance.  You may also want to use a handy function that you've written in several programs without copying its definition into each program."
msgstr ""

msgid "To support this, Python has a way to put definitions in a file and use them in a script or in an interactive instance of the interpreter. Such a file is called a *module*; definitions from a module can be *imported* into other modules or into the *main* module (the collection of variables that you have access to in a script executed at the top level and in calculator mode)."
msgstr ""

msgid "A module is a file containing Python definitions and statements.  The file name is the module name with the suffix :file:`.py` appended.  Within a module, the module's name (as a string) is available as the value of the global variable ``__name__``.  For instance, use your favorite text editor to create a file called :file:`fibo.py` in the current directory with the following contents::"
msgstr ""

msgid "# Fibonacci numbers module  def fib(n):    # write Fibonacci series up to n     a, b = 0, 1     while b < n:         print(b, end=' ')         a, b = b, a+b     print()  def fib2(n): # return Fibonacci series up to n     result = []     a, b = 0, 1     while b < n:         result.append(b)         a, b = b, a+b     return result"
msgstr ""

msgid "Now enter the Python interpreter and import this module with the following command::"
msgstr ""

msgid ">>> import fibo"
msgstr ""

msgid "This does not enter the names of the functions defined in ``fibo``  directly in the current symbol table; it only enters the module name ``fibo`` there. Using the module name you can access the functions::"
msgstr ""

msgid ">>> fibo.fib(1000) 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 >>> fibo.fib2(100) [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] >>> fibo.__name__ 'fibo'"
msgstr ""

msgid "If you intend to use a function often you can assign it to a local name::"
msgstr ""

msgid ">>> fib = fibo.fib >>> fib(500) 1 1 2 3 5 8 13 21 34 55 89 144 233 377"
msgstr ""

msgid "More on Modules"
msgstr ""

msgid "A module can contain executable statements as well as function definitions. These statements are intended to initialize the module. They are executed only the *first* time the module is imported somewhere. [#]_"
msgstr ""

msgid "Each module has its own private symbol table, which is used as the global symbol table by all functions defined in the module. Thus, the author of a module can use global variables in the module without worrying about accidental clashes with a user's global variables. On the other hand, if you know what you are doing you can touch a module's global variables with the same notation used to refer to its functions, ``modname.itemname``."
msgstr ""

msgid "Modules can import other modules.  It is customary but not required to place all :keyword:`import` statements at the beginning of a module (or script, for that matter).  The imported module names are placed in the importing module's global symbol table."
msgstr ""

msgid "There is a variant of the :keyword:`import` statement that imports names from a module directly into the importing module's symbol table.  For example::"
msgstr ""

msgid ">>> from fibo import fib, fib2 >>> fib(500) 1 1 2 3 5 8 13 21 34 55 89 144 233 377"
msgstr ""

msgid "This does not introduce the module name from which the imports are taken in the local symbol table (so in the example, ``fibo`` is not defined)."
msgstr ""

msgid "There is even a variant to import all names that a module defines::"
msgstr ""

msgid ">>> from fibo import * >>> fib(500) 1 1 2 3 5 8 13 21 34 55 89 144 233 377"
msgstr ""

msgid "This imports all names except those beginning with an underscore (``_``). In most cases Python programmers do not use this facility since it introduces an unknown set of names into the interpreter, possibly hiding some things you have already defined."
msgstr ""

msgid "Note that in general the practice of importing ``*`` from a module or package is frowned upon, since it often causes poorly readable code. However, it is okay to use it to save typing in interactive sessions."
msgstr ""

msgid "For efficiency reasons, each module is only imported once per interpreter session.  Therefore, if you change your modules, you must restart the interpreter -- or, if it's just one module you want to test interactively, use :func:`imp.reload`, e.g. ``import imp; imp.reload(modulename)``."
msgstr ""

msgid "Executing modules as scripts"
msgstr ""

msgid "When you run a Python module with ::"
msgstr ""

msgid "python fibo.py <arguments>"
msgstr ""

msgid "the code in the module will be executed, just as if you imported it, but with the ``__name__`` set to ``\"__main__\"``.  That means that by adding this code at the end of your module::"
msgstr ""

msgid "if __name__ == \"__main__\":     import sys     fib(int(sys.argv[1]))"
msgstr ""

msgid "you can make the file usable as a script as well as an importable module, because the code that parses the command line only runs if the module is executed as the \"main\" file::"
msgstr ""

msgid "$ python fibo.py 50 1 1 2 3 5 8 13 21 34"
msgstr ""

msgid "If the module is imported, the code is not run::"
msgstr ""

msgid ">>> import fibo >>>"
msgstr ""

msgid "This is often used either to provide a convenient user interface to a module, or for testing purposes (running the module as a script executes a test suite)."
msgstr ""

msgid "The Module Search Path"
msgstr ""

msgid "When a module named :mod:`spam` is imported, the interpreter searches for a file named :file:`spam.py` in the current directory, and then in the list of directories specified by the environment variable :envvar:`PYTHONPATH`.  This has the same syntax as the shell variable :envvar:`PATH`, that is, a list of directory names.  When :envvar:`PYTHONPATH` is not set, or when the file is not found there, the search continues in an installation-dependent default path; on Unix, this is usually :file:`.:/usr/local/lib/python`."
msgstr ""

msgid "Actually, modules are searched in the list of directories given by the variable ``sys.path`` which is initialized from the directory containing the input script (or the current directory), :envvar:`PYTHONPATH` and the installation- dependent default.  This allows Python programs that know what they're doing to modify or replace the module search path.  Note that because the directory containing the script being run is on the search path, it is important that the script not have the same name as a standard module, or Python will attempt to load the script as a module when that module is imported. This will generally be an error.  See section :ref:`tut-standardmodules` for more information."
msgstr ""

msgid "\"Compiled\" Python files"
msgstr ""

msgid "As an important speed-up of the start-up time for short programs that use a lot of standard modules, if a file called :file:`spam.pyc` exists in the directory where :file:`spam.py` is found, this is assumed to contain an already-\"byte-compiled\" version of the module :mod:`spam`. The modification time of the version of :file:`spam.py` used to create :file:`spam.pyc` is recorded in :file:`spam.pyc`, and the :file:`.pyc` file is ignored if these don't match."
msgstr ""

msgid "Normally, you don't need to do anything to create the :file:`spam.pyc` file. Whenever :file:`spam.py` is successfully compiled, an attempt is made to write the compiled version to :file:`spam.pyc`.  It is not an error if this attempt fails; if for any reason the file is not written completely, the resulting :file:`spam.pyc` file will be recognized as invalid and thus ignored later.  The contents of the :file:`spam.pyc` file are platform independent, so a Python module directory can be shared by machines of different architectures."
msgstr ""

msgid "Some tips for experts:"
msgstr ""

msgid "When the Python interpreter is invoked with the :option:`-O` flag, optimized code is generated and stored in :file:`.pyo` files.  The optimizer currently doesn't help much; it only removes :keyword:`assert` statements.  When :option:`-O` is used, *all* :term:`bytecode` is optimized; ``.pyc`` files are ignored and ``.py`` files are compiled to optimized bytecode."
msgstr ""

msgid "Passing two :option:`-O` flags to the Python interpreter (:option:`-OO`) will cause the bytecode compiler to perform optimizations that could in some rare cases result in malfunctioning programs.  Currently only ``__doc__`` strings are removed from the bytecode, resulting in more compact :file:`.pyo` files.  Since some programs may rely on having these available, you should only use this option if you know what you're doing."
msgstr ""

msgid "A program doesn't run any faster when it is read from a :file:`.pyc` or :file:`.pyo` file than when it is read from a :file:`.py` file; the only thing that's faster about :file:`.pyc` or :file:`.pyo` files is the speed with which they are loaded."
msgstr ""

msgid "When a script is run by giving its name on the command line, the bytecode for the script is never written to a :file:`.pyc` or :file:`.pyo` file.  Thus, the startup time of a script may be reduced by moving most of its code to a module and having a small bootstrap script that imports that module.  It is also possible to name a :file:`.pyc` or :file:`.pyo` file directly on the command line."
msgstr ""

msgid "It is possible to have a file called :file:`spam.pyc` (or :file:`spam.pyo` when :option:`-O` is used) without a file :file:`spam.py` for the same module. This can be used to distribute a library of Python code in a form that is moderately hard to reverse engineer."
msgstr ""

msgid "The module :mod:`compileall` can create :file:`.pyc` files (or :file:`.pyo` files when :option:`-O` is used) for all modules in a directory."
msgstr ""

msgid "Standard Modules"
msgstr ""

msgid "Python comes with a library of standard modules, described in a separate document, the Python Library Reference (\"Library Reference\" hereafter).  Some modules are built into the interpreter; these provide access to operations that are not part of the core of the language but are nevertheless built in, either for efficiency or to provide access to operating system primitives such as system calls.  The set of such modules is a configuration option which also depends on the underlying platform For example, the :mod:`winreg` module is only provided on Windows systems. One particular module deserves some attention: :mod:`sys`, which is built into every Python interpreter.  The variables ``sys.ps1`` and ``sys.ps2`` define the strings used as primary and secondary prompts::"
msgstr ""

msgid ">>> import sys >>> sys.ps1 '>>> ' >>> sys.ps2 '... ' >>> sys.ps1 = 'C> ' C> print('Yuck!') Yuck! C>"
msgstr ""

msgid "These two variables are only defined if the interpreter is in interactive mode."
msgstr ""

msgid "The variable ``sys.path`` is a list of strings that determines the interpreter's search path for modules. It is initialized to a default path taken from the environment variable :envvar:`PYTHONPATH`, or from a built-in default if :envvar:`PYTHONPATH` is not set.  You can modify it using standard list operations::"
msgstr ""

msgid ">>> import sys >>> sys.path.append('/ufs/guido/lib/python')"
msgstr ""

msgid "The :func:`dir` Function"
msgstr ""

msgid "The built-in function :func:`dir` is used to find out which names a module defines.  It returns a sorted list of strings::"
msgstr ""

msgid ">>> import fibo, sys >>> dir(fibo) ['__name__', 'fib', 'fib2'] >>> dir(sys) ['__displayhook__', '__doc__', '__excepthook__', '__name__', '__stderr__',  '__stdin__', '__stdout__', '_getframe', 'api_version', 'argv',  'builtin_module_names', 'byteorder', 'callstats', 'copyright',  'displayhook', 'exc_info', 'excepthook',  'exec_prefix', 'executable', 'exit', 'getdefaultencoding', 'getdlopenflags',  'getrecursionlimit', 'getrefcount', 'hexversion', 'maxint', 'maxunicode',  'meta_path', 'modules', 'path', 'path_hooks', 'path_importer_cache',  'platform', 'prefix', 'ps1', 'ps2', 'setcheckinterval', 'setdlopenflags',  'setprofile', 'setrecursionlimit', 'settrace', 'stderr', 'stdin', 'stdout',  'version', 'version_info', 'warnoptions']"
msgstr ""

msgid "Without arguments, :func:`dir` lists the names you have defined currently::"
msgstr ""

msgid ">>> a = [1, 2, 3, 4, 5] >>> import fibo >>> fib = fibo.fib >>> dir() ['__builtins__', '__doc__', '__file__', '__name__', 'a', 'fib', 'fibo', 'sys']"
msgstr ""

msgid "Note that it lists all types of names: variables, modules, functions, etc."
msgstr ""

msgid ":func:`dir` does not list the names of built-in functions and variables.  If you want a list of those, they are defined in the standard module :mod:`builtins`::"
msgstr ""

msgid ">>> import builtins >>> dir(builtins)  ['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'Buffer Error', 'BytesWarning', 'DeprecationWarning', 'EOFError', 'Ellipsis', 'Environme ntError', 'Exception', 'False', 'FloatingPointError', 'FutureWarning', 'Generato rExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexErr or', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'NameError',  'None', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 'P endingDeprecationWarning', 'ReferenceError', 'RuntimeError', 'RuntimeWarning', ' StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'Ta bError', 'True', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'Unicod eEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserW arning', 'ValueError', 'Warning', 'ZeroDivisionError', '__build_class__', '__deb ug__', '__doc__', '__import__', '__name__', '__package__', 'abs', 'all', 'any', 'ascii', 'bin', 'bool', 'bytearray', 'bytes', 'chr', 'classmethod', 'compile', ' complex', 'copyright', 'credits', 'delattr', 'dict', 'dir', 'divmod', 'enumerate ', 'eval', 'exec', 'exit', 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance',  'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'map', 'max', 'memory view', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property' , 'quit', 'range', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sort ed', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars', 'zip']"
msgstr ""

msgid "Packages"
msgstr ""

msgid "Packages are a way of structuring Python's module namespace by using \"dotted module names\".  For example, the module name :mod:`A.B` designates a submodule named ``B`` in a package named ``A``.  Just like the use of modules saves the authors of different modules from having to worry about each other's global variable names, the use of dotted module names saves the authors of multi-module packages like NumPy or the Python Imaging Library from having to worry about each other's module names."
msgstr ""

msgid "Suppose you want to design a collection of modules (a \"package\") for the uniform handling of sound files and sound data.  There are many different sound file formats (usually recognized by their extension, for example: :file:`.wav`, :file:`.aiff`, :file:`.au`), so you may need to create and maintain a growing collection of modules for the conversion between the various file formats. There are also many different operations you might want to perform on sound data (such as mixing, adding echo, applying an equalizer function, creating an artificial stereo effect), so in addition you will be writing a never-ending stream of modules to perform these operations.  Here's a possible structure for your package (expressed in terms of a hierarchical filesystem)::"
msgstr ""

msgid "sound/                          Top-level package       __init__.py               Initialize the sound package       formats/                  Subpackage for file format conversions               __init__.py               wavread.py               wavwrite.py               aiffread.py               aiffwrite.py               auread.py               auwrite.py               ...       effects/                  Subpackage for sound effects               __init__.py               echo.py               surround.py               reverse.py               ...       filters/                  Subpackage for filters               __init__.py               equalizer.py               vocoder.py               karaoke.py               ..."
msgstr ""

msgid "When importing the package, Python searches through the directories on ``sys.path`` looking for the package subdirectory."
msgstr ""

msgid "The :file:`__init__.py` files are required to make Python treat the directories as containing packages; this is done to prevent directories with a common name, such as ``string``, from unintentionally hiding valid modules that occur later on the module search path. In the simplest case, :file:`__init__.py` can just be an empty file, but it can also execute initialization code for the package or set the ``__all__`` variable, described later."
msgstr ""

msgid "Users of the package can import individual modules from the package, for example::"
msgstr ""

msgid "import sound.effects.echo"
msgstr ""

msgid "This loads the submodule :mod:`sound.effects.echo`.  It must be referenced with its full name. ::"
msgstr ""

msgid "sound.effects.echo.echofilter(input, output, delay=0.7, atten=4)"
msgstr ""

msgid "An alternative way of importing the submodule is::"
msgstr ""

msgid "from sound.effects import echo"
msgstr ""

msgid "This also loads the submodule :mod:`echo`, and makes it available without its package prefix, so it can be used as follows::"
msgstr ""

msgid "echo.echofilter(input, output, delay=0.7, atten=4)"
msgstr ""

msgid "Yet another variation is to import the desired function or variable directly::"
msgstr ""

msgid "from sound.effects.echo import echofilter"
msgstr ""

msgid "Again, this loads the submodule :mod:`echo`, but this makes its function :func:`echofilter` directly available::"
msgstr ""

msgid "echofilter(input, output, delay=0.7, atten=4)"
msgstr ""

msgid "Note that when using ``from package import item``, the item can be either a submodule (or subpackage) of the package, or some  other name defined in the package, like a function, class or variable.  The ``import`` statement first tests whether the item is defined in the package; if not, it assumes it is a module and attempts to load it.  If it fails to find it, an :exc:`ImportError` exception is raised."
msgstr ""

msgid "Contrarily, when using syntax like ``import item.subitem.subsubitem``, each item except for the last must be a package; the last item can be a module or a package but can't be a class or function or variable defined in the previous item."
msgstr ""

msgid "Importing \\* From a Package"
msgstr ""

msgid "Now what happens when the user writes ``from sound.effects import *``?  Ideally, one would hope that this somehow goes out to the filesystem, finds which submodules are present in the package, and imports them all.  This could take a long time and importing sub-modules might have unwanted side-effects that should only happen when the sub-module is explicitly imported."
msgstr ""

msgid "The only solution is for the package author to provide an explicit index of the package.  The :keyword:`import` statement uses the following convention: if a package's :file:`__init__.py` code defines a list named ``__all__``, it is taken to be the list of module names that should be imported when ``from package import *`` is encountered.  It is up to the package author to keep this list up-to-date when a new version of the package is released.  Package authors may also decide not to support it, if they don't see a use for importing \\* from their package.  For example, the file :file:`sounds/effects/__init__.py` could contain the following code::"
msgstr ""

msgid "__all__ = [\"echo\", \"surround\", \"reverse\"]"
msgstr ""

msgid "This would mean that ``from sound.effects import *`` would import the three named submodules of the :mod:`sound` package."
msgstr ""

msgid "If ``__all__`` is not defined, the statement ``from sound.effects import *`` does *not* import all submodules from the package :mod:`sound.effects` into the current namespace; it only ensures that the package :mod:`sound.effects` has been imported (possibly running any initialization code in :file:`__init__.py`) and then imports whatever names are defined in the package.  This includes any names defined (and submodules explicitly loaded) by :file:`__init__.py`.  It also includes any submodules of the package that were explicitly loaded by previous :keyword:`import` statements.  Consider this code::"
msgstr ""

msgid "import sound.effects.echo import sound.effects.surround from sound.effects import *"
msgstr ""

msgid "In this example, the :mod:`echo` and :mod:`surround` modules are imported in the current namespace because they are defined in the :mod:`sound.effects` package when the ``from...import`` statement is executed.  (This also works when ``__all__`` is defined.)"
msgstr ""

msgid "Although certain modules are designed to export only names that follow certain patterns when you use ``import *``, it is still considered bad practise in production code."
msgstr ""

msgid "Remember, there is nothing wrong with using ``from Package import specific_submodule``!  In fact, this is the recommended notation unless the importing module needs to use submodules with the same name from different packages."
msgstr ""

msgid "Intra-package References"
msgstr ""

msgid "When packages are structured into subpackages (as with the :mod:`sound` package in the example), you can use absolute imports to refer to submodules of siblings packages.  For example, if the module :mod:`sound.filters.vocoder` needs to use the :mod:`echo` module in the :mod:`sound.effects` package, it can use ``from sound.effects import echo``."
msgstr ""

msgid "You can also write relative imports, with the ``from module import name`` form of import statement.  These imports use leading dots to indicate the current and parent packages involved in the relative import.  From the :mod:`surround` module for example, you might use::"
msgstr ""

msgid "from . import echo from .. import formats from ..filters import equalizer"
msgstr ""

msgid "Note that relative imports are based on the name of the current module.  Since the name of the main module is always ``\"__main__\"``, modules intended for use as the main module of a Python application must always use absolute imports."
msgstr ""

msgid "Packages in Multiple Directories"
msgstr ""

msgid "Packages support one more special attribute, :attr:`__path__`.  This is initialized to be a list containing the name of the directory holding the package's :file:`__init__.py` before the code in that file is executed.  This variable can be modified; doing so affects future searches for modules and subpackages contained in the package."
msgstr ""

msgid "While this feature is not often needed, it can be used to extend the set of modules found in a package."
msgstr ""

msgid "In fact function definitions are also 'statements' that are 'executed'; the execution of a module-level function enters the function name in the module's global symbol table."
msgstr ""

msgid "Brief Tour of the Standard Library"
msgstr ""

msgid "Operating System Interface"
msgstr ""

msgid "The :mod:`os` module provides dozens of functions for interacting with the operating system::"
msgstr ""

msgid ">>> import os >>> os.system('time 0:02') 0 >>> os.getcwd()      # Return the current working directory 'C:\\\\Python31' >>> os.chdir('/server/accesslogs')"
msgstr ""

msgid "Be sure to use the ``import os`` style instead of ``from os import *``.  This will keep :func:`os.open` from shadowing the built-in :func:`open` function which operates much differently."
msgstr ""

msgid "The built-in :func:`dir` and :func:`help` functions are useful as interactive aids for working with large modules like :mod:`os`::"
msgstr ""

msgid ">>> import os >>> dir(os) <returns a list of all module functions> >>> help(os) <returns an extensive manual page created from the module's docstrings>"
msgstr ""

msgid "For daily file and directory management tasks, the :mod:`shutil` module provides a higher level interface that is easier to use::"
msgstr ""

msgid ">>> import shutil >>> shutil.copyfile('data.db', 'archive.db') >>> shutil.move('/build/executables', 'installdir')"
msgstr ""

msgid "File Wildcards"
msgstr ""

msgid "The :mod:`glob` module provides a function for making file lists from directory wildcard searches::"
msgstr ""

msgid ">>> import glob >>> glob.glob('*.py') ['primes.py', 'random.py', 'quote.py']"
msgstr ""

msgid "Command Line Arguments"
msgstr ""

msgid "Common utility scripts often need to process command line arguments. These arguments are stored in the :mod:`sys` module's *argv* attribute as a list.  For instance the following output results from running ``python demo.py one two three`` at the command line::"
msgstr ""

msgid ">>> import sys >>> print(sys.argv) ['demo.py', 'one', 'two', 'three']"
msgstr ""

msgid "The :mod:`getopt` module processes *sys.argv* using the conventions of the Unix :func:`getopt` function.  More powerful and flexible command line processing is provided by the :mod:`argparse` module."
msgstr ""

msgid "Error Output Redirection and Program Termination"
msgstr ""

msgid "The :mod:`sys` module also has attributes for *stdin*, *stdout*, and *stderr*. The latter is useful for emitting warnings and error messages to make them visible even when *stdout* has been redirected::"
msgstr ""

msgid ">>> sys.stderr.write('Warning, log file not found starting a new one\\n') Warning, log file not found starting a new one"
msgstr ""

msgid "The most direct way to terminate a script is to use ``sys.exit()``."
msgstr ""

msgid "String Pattern Matching"
msgstr ""

msgid "The :mod:`re` module provides regular expression tools for advanced string processing. For complex matching and manipulation, regular expressions offer succinct, optimized solutions::"
msgstr ""

msgid ">>> import re >>> re.findall(r'\\bf[a-z]*', 'which foot or hand fell fastest') ['foot', 'fell', 'fastest'] >>> re.sub(r'(\\b[a-z]+) \\1', r'\\1', 'cat in the the hat') 'cat in the hat'"
msgstr ""

msgid "When only simple capabilities are needed, string methods are preferred because they are easier to read and debug::"
msgstr ""

msgid ">>> 'tea for too'.replace('too', 'two') 'tea for two'"
msgstr ""

msgid "Mathematics"
msgstr ""

msgid "The :mod:`math` module gives access to the underlying C library functions for floating point math::"
msgstr ""

msgid ">>> import math >>> math.cos(math.pi / 4) 0.70710678118654757 >>> math.log(1024, 2) 10.0"
msgstr ""

msgid "The :mod:`random` module provides tools for making random selections::"
msgstr ""

msgid ">>> import random >>> random.choice(['apple', 'pear', 'banana']) 'apple' >>> random.sample(range(100), 10)   # sampling without replacement [30, 83, 16, 4, 8, 81, 41, 50, 18, 33] >>> random.random()    # random float 0.17970987693706186 >>> random.randrange(6)    # random integer chosen from range(6) 4"
msgstr ""

msgid "The SciPy project <http://scipy.org> has many other modules for numerical computations."
msgstr ""

msgid "Internet Access"
msgstr ""

msgid "There are a number of modules for accessing the internet and processing internet protocols. Two of the simplest are :mod:`urllib.request` for retrieving data from urls and :mod:`smtplib` for sending mail::"
msgstr ""

msgid ">>> from urllib.request import urlopen >>> for line in urlopen('http://tycho.usno.navy.mil/cgi-bin/timer.pl'): ...     line = line.decode('utf-8')  # Decoding the binary data to text. ...     if 'EST' in line or 'EDT' in line:  # look for Eastern Time ...         print(line)  <BR>Nov. 25, 09:43:32 PM EST  >>> import smtplib >>> server = smtplib.SMTP('localhost') >>> server.sendmail('soothsayer@example.org', 'jcaesar@example.org', ... \"\"\"To: jcaesar@example.org ... From: soothsayer@example.org ... ... Beware the Ides of March. ... \"\"\") >>> server.quit()"
msgstr ""

msgid "(Note that the second example needs a mailserver running on localhost.)"
msgstr ""

msgid "Dates and Times"
msgstr ""

msgid "The :mod:`datetime` module supplies classes for manipulating dates and times in both simple and complex ways. While date and time arithmetic is supported, the focus of the implementation is on efficient member extraction for output formatting and manipulation.  The module also supports objects that are timezone aware. ::"
msgstr ""

msgid ">>> # dates are easily constructed and formatted >>> from datetime import date >>> now = date.today() >>> now datetime.date(2003, 12, 2) >>> now.strftime(\"%m-%d-%y. %d %b %Y is a %A on the %d day of %B.\") '12-02-03. 02 Dec 2003 is a Tuesday on the 02 day of December.'  >>> # dates support calendar arithmetic >>> birthday = date(1964, 7, 31) >>> age = now - birthday >>> age.days 14368"
msgstr ""

msgid "Data Compression"
msgstr ""

msgid "Common data archiving and compression formats are directly supported by modules including: :mod:`zlib`, :mod:`gzip`, :mod:`bz2`, :mod:`zipfile` and :mod:`tarfile`. ::"
msgstr ""

msgid ">>> import zlib >>> s = 'witch which has which witches wrist watch' >>> len(s) 41 >>> t = zlib.compress(s) >>> len(t) 37 >>> zlib.decompress(t) 'witch which has which witches wrist watch' >>> zlib.crc32(s) 226805979"
msgstr ""

msgid "Performance Measurement"
msgstr ""

msgid "Some Python users develop a deep interest in knowing the relative performance of different approaches to the same problem. Python provides a measurement tool that answers those questions immediately."
msgstr ""

msgid "For example, it may be tempting to use the tuple packing and unpacking feature instead of the traditional approach to swapping arguments. The :mod:`timeit` module quickly demonstrates a modest performance advantage::"
msgstr ""

msgid ">>> from timeit import Timer >>> Timer('t=a; a=b; b=t', 'a=1; b=2').timeit() 0.57535828626024577 >>> Timer('a,b = b,a', 'a=1; b=2').timeit() 0.54962537085770791"
msgstr ""

msgid "In contrast to :mod:`timeit`'s fine level of granularity, the :mod:`profile` and :mod:`pstats` modules provide tools for identifying time critical sections in larger blocks of code."
msgstr ""

msgid "Quality Control"
msgstr ""

msgid "One approach for developing high quality software is to write tests for each function as it is developed and to run those tests frequently during the development process."
msgstr ""

msgid "The :mod:`doctest` module provides a tool for scanning a module and validating tests embedded in a program's docstrings.  Test construction is as simple as cutting-and-pasting a typical call along with its results into the docstring. This improves the documentation by providing the user with an example and it allows the doctest module to make sure the code remains true to the documentation::"
msgstr ""

msgid "def average(values):     \"\"\"Computes the arithmetic mean of a list of numbers.      >>> print(average([20, 30, 70]))     40.0     \"\"\"     return sum(values) / len(values)  import doctest doctest.testmod()   # automatically validate the embedded tests"
msgstr ""

msgid "The :mod:`unittest` module is not as effortless as the :mod:`doctest` module, but it allows a more comprehensive set of tests to be maintained in a separate file::"
msgstr ""

msgid "import unittest  class TestStatisticalFunctions(unittest.TestCase):      def test_average(self):         self.assertEqual(average([20, 30, 70]), 40.0)         self.assertEqual(round(average([1, 5, 7]), 1), 4.3)         self.assertRaises(ZeroDivisionError, average, [])         self.assertRaises(TypeError, average, 20, 30, 70)  unittest.main() # Calling from the command line invokes all tests"
msgstr ""

msgid "Batteries Included"
msgstr ""

msgid "Python has a \"batteries included\" philosophy.  This is best seen through the sophisticated and robust capabilities of its larger packages. For example:"
msgstr ""

msgid "The :mod:`xmlrpc.client` and :mod:`xmlrpc.server` modules make implementing remote procedure calls into an almost trivial task.  Despite the modules names, no direct knowledge or handling of XML is needed."
msgstr ""

msgid "The :mod:`email` package is a library for managing email messages, including MIME and other RFC 2822-based message documents. Unlike :mod:`smtplib` and :mod:`poplib` which actually send and receive messages, the email package has a complete toolset for building or decoding complex message structures (including attachments) and for implementing internet encoding and header protocols."
msgstr ""

msgid "The :mod:`xml.dom` and :mod:`xml.sax` packages provide robust support for parsing this popular data interchange format. Likewise, the :mod:`csv` module supports direct reads and writes in a common database format. Together, these modules and packages greatly simplify data interchange between Python applications and other tools."
msgstr ""

msgid "Internationalization is supported by a number of modules including :mod:`gettext`, :mod:`locale`, and the :mod:`codecs` package."
msgstr ""

msgid "Brief Tour of the Standard Library -- Part II"
msgstr ""

msgid "This second tour covers more advanced modules that support professional programming needs.  These modules rarely occur in small scripts."
msgstr ""

msgid "Output Formatting"
msgstr ""

msgid "The :mod:`reprlib` module provides a version of :func:`repr` customized for abbreviated displays of large or deeply nested containers::"
msgstr ""

msgid ">>> import reprlib >>> reprlib.repr(set('supercalifragilisticexpialidocious')) \"set(['a', 'c', 'd', 'e', 'f', 'g', ...])\""
msgstr ""

msgid "The :mod:`pprint` module offers more sophisticated control over printing both built-in and user defined objects in a way that is readable by the interpreter. When the result is longer than one line, the \"pretty printer\" adds line breaks and indentation to more clearly reveal data structure::"
msgstr ""

msgid ">>> import pprint >>> t = [[[['black', 'cyan'], 'white', ['green', 'red']], [['magenta', ...     'yellow'], 'blue']]] ... >>> pprint.pprint(t, width=30) [[[['black', 'cyan'],    'white',    ['green', 'red']],   [['magenta', 'yellow'],    'blue']]]"
msgstr ""

msgid "The :mod:`textwrap` module formats paragraphs of text to fit a given screen width::"
msgstr ""

msgid ">>> import textwrap >>> doc = \"\"\"The wrap() method is just like fill() except that it returns ... a list of strings instead of one big string with newlines to separate ... the wrapped lines.\"\"\" ... >>> print(textwrap.fill(doc, width=40)) The wrap() method is just like fill() except that it returns a list of strings instead of one big string with newlines to separate the wrapped lines."
msgstr ""

msgid "The :mod:`locale` module accesses a database of culture specific data formats. The grouping attribute of locale's format function provides a direct way of formatting numbers with group separators::"
msgstr ""

msgid ">>> import locale >>> locale.setlocale(locale.LC_ALL, 'English_United States.1252') 'English_United States.1252' >>> conv = locale.localeconv()          # get a mapping of conventions >>> x = 1234567.8 >>> locale.format(\"%d\", x, grouping=True) '1,234,567' >>> locale.format_string(\"%s%.*f\", (conv['currency_symbol'], ...                      conv['frac_digits'], x), grouping=True) '$1,234,567.80'"
msgstr ""

msgid "Templating"
msgstr ""

msgid "The :mod:`string` module includes a versatile :class:`Template` class with a simplified syntax suitable for editing by end-users.  This allows users to customize their applications without having to alter the application."
msgstr ""

msgid "The format uses placeholder names formed by ``$`` with valid Python identifiers (alphanumeric characters and underscores).  Surrounding the placeholder with braces allows it to be followed by more alphanumeric letters with no intervening spaces.  Writing ``$$`` creates a single escaped ``$``::"
msgstr ""

msgid ">>> from string import Template >>> t = Template('${village}folk send $$10 to $cause.') >>> t.substitute(village='Nottingham', cause='the ditch fund') 'Nottinghamfolk send $10 to the ditch fund.'"
msgstr ""

msgid "The :meth:`substitute` method raises a :exc:`KeyError` when a placeholder is not supplied in a dictionary or a keyword argument. For mail-merge style applications, user supplied data may be incomplete and the :meth:`safe_substitute` method may be more appropriate --- it will leave placeholders unchanged if data is missing::"
msgstr ""

msgid ">>> t = Template('Return the $item to $owner.') >>> d = dict(item='unladen swallow') >>> t.substitute(d) Traceback (most recent call last):   . . . KeyError: 'owner' >>> t.safe_substitute(d) 'Return the unladen swallow to $owner.'"
msgstr ""

msgid "Template subclasses can specify a custom delimiter.  For example, a batch renaming utility for a photo browser may elect to use percent signs for placeholders such as the current date, image sequence number, or file format::"
msgstr ""

msgid ">>> import time, os.path >>> photofiles = ['img_1074.jpg', 'img_1076.jpg', 'img_1077.jpg'] >>> class BatchRename(Template): ...     delimiter = '%' >>> fmt = input('Enter rename style (%d-date %n-seqnum %f-format):  ') Enter rename style (%d-date %n-seqnum %f-format):  Ashley_%n%f  >>> t = BatchRename(fmt) >>> date = time.strftime('%d%b%y') >>> for i, filename in enumerate(photofiles): ...     base, ext = os.path.splitext(filename) ...     newname = t.substitute(d=date, n=i, f=ext) ...     print('{0} --> {1}'.format(filename, newname))  img_1074.jpg --> Ashley_0.jpg img_1076.jpg --> Ashley_1.jpg img_1077.jpg --> Ashley_2.jpg"
msgstr ""

msgid "Another application for templating is separating program logic from the details of multiple output formats.  This makes it possible to substitute custom templates for XML files, plain text reports, and HTML web reports."
msgstr ""

msgid "Working with Binary Data Record Layouts"
msgstr ""

msgid "The :mod:`struct` module provides :func:`pack` and :func:`unpack` functions for working with variable length binary record formats.  The following example shows how to loop through header information in a ZIP file without using the :mod:`zipfile` module.  Pack codes ``\"H\"`` and ``\"I\"`` represent two and four byte unsigned numbers respectively.  The ``\"<\"`` indicates that they are standard size and in little-endian byte order::"
msgstr ""

msgid "import struct  data = open('myfile.zip', 'rb').read() start = 0 for i in range(3):                      # show the first 3 file headers     start += 14     fields = struct.unpack('<IIIHH', data[start:start+16])     crc32, comp_size, uncomp_size, filenamesize, extra_size = fields      start += 16     filename = data[start:start+filenamesize]     start += filenamesize     extra = data[start:start+extra_size]     print(filename, hex(crc32), comp_size, uncomp_size)      start += extra_size + comp_size     # skip to the next header"
msgstr ""

msgid "Multi-threading"
msgstr ""

msgid "Threading is a technique for decoupling tasks which are not sequentially dependent.  Threads can be used to improve the responsiveness of applications that accept user input while other tasks run in the background.  A related use case is running I/O in parallel with computations in another thread."
msgstr ""

msgid "The following code shows how the high level :mod:`threading` module can run tasks in background while the main program continues to run::"
msgstr ""

msgid "import threading, zipfile  class AsyncZip(threading.Thread):     def __init__(self, infile, outfile):         threading.Thread.__init__(self)         self.infile = infile         self.outfile = outfile     def run(self):         f = zipfile.ZipFile(self.outfile, 'w', zipfile.ZIP_DEFLATED)         f.write(self.infile)         f.close()         print('Finished background zip of:', self.infile)  background = AsyncZip('mydata.txt', 'myarchive.zip') background.start() print('The main program continues to run in foreground.')  background.join()    # Wait for the background task to finish print('Main program waited until background was done.')"
msgstr ""

msgid "The principal challenge of multi-threaded applications is coordinating threads that share data or other resources.  To that end, the threading module provides a number of synchronization primitives including locks, events, condition variables, and semaphores."
msgstr ""

msgid "While those tools are powerful, minor design errors can result in problems that are difficult to reproduce.  So, the preferred approach to task coordination is to concentrate all access to a resource in a single thread and then use the :mod:`queue` module to feed that thread with requests from other threads. Applications using :class:`Queue` objects for inter-thread communication and coordination are easier to design, more readable, and more reliable."
msgstr ""

msgid "Logging"
msgstr ""

msgid "The :mod:`logging` module offers a full featured and flexible logging system. At its simplest, log messages are sent to a file or to ``sys.stderr``::"
msgstr ""

msgid "import logging logging.debug('Debugging information') logging.info('Informational message') logging.warning('Warning:config file %s not found', 'server.conf') logging.error('Error occurred') logging.critical('Critical error -- shutting down')"
msgstr ""

msgid "This produces the following output::"
msgstr ""

msgid "WARNING:root:Warning:config file server.conf not found ERROR:root:Error occurred CRITICAL:root:Critical error -- shutting down"
msgstr ""

msgid "By default, informational and debugging messages are suppressed and the output is sent to standard error.  Other output options include routing messages through email, datagrams, sockets, or to an HTTP Server.  New filters can select different routing based on message priority: :const:`DEBUG`, :const:`INFO`, :const:`WARNING`, :const:`ERROR`, and :const:`CRITICAL`."
msgstr ""

msgid "The logging system can be configured directly from Python or can be loaded from a user editable configuration file for customized logging without altering the application."
msgstr ""

msgid "Weak References"
msgstr ""

msgid "Python does automatic memory management (reference counting for most objects and :term:`garbage collection` to eliminate cycles).  The memory is freed shortly after the last reference to it has been eliminated."
msgstr ""

msgid "This approach works fine for most applications but occasionally there is a need to track objects only as long as they are being used by something else. Unfortunately, just tracking them creates a reference that makes them permanent. The :mod:`weakref` module provides tools for tracking objects without creating a reference.  When the object is no longer needed, it is automatically removed from a weakref table and a callback is triggered for weakref objects.  Typical applications include caching objects that are expensive to create::"
msgstr ""

msgid ">>> import weakref, gc >>> class A: ...     def __init__(self, value): ...             self.value = value ...     def __repr__(self): ...             return str(self.value) ... >>> a = A(10)                   # create a reference >>> d = weakref.WeakValueDictionary() >>> d['primary'] = a            # does not create a reference >>> d['primary']                # fetch the object if it is still alive 10 >>> del a                       # remove the one reference >>> gc.collect()                # run garbage collection right away 0 >>> d['primary']                # entry was automatically removed Traceback (most recent call last):   File \"<stdin>\", line 1, in <module>     d['primary']                # entry was automatically removed   File \"C:/python31/lib/weakref.py\", line 46, in __getitem__     o = self.data[key]() KeyError: 'primary'"
msgstr ""

msgid "Tools for Working with Lists"
msgstr ""

msgid "Many data structure needs can be met with the built-in list type. However, sometimes there is a need for alternative implementations with different performance trade-offs."
msgstr ""

msgid "The :mod:`array` module provides an :class:`array()` object that is like a list that stores only homogeneous data and stores it more compactly.  The following example shows an array of numbers stored as two byte unsigned binary numbers (typecode ``\"H\"``) rather than the usual 16 bytes per entry for regular lists of Python int objects::"
msgstr ""

msgid ">>> from array import array >>> a = array('H', [4000, 10, 700, 22222]) >>> sum(a) 26932 >>> a[1:3] array('H', [10, 700])"
msgstr ""

msgid "The :mod:`collections` module provides a :class:`deque()` object that is like a list with faster appends and pops from the left side but slower lookups in the middle. These objects are well suited for implementing queues and breadth first tree searches::"
msgstr ""

msgid ">>> from collections import deque >>> d = deque([\"task1\", \"task2\", \"task3\"]) >>> d.append(\"task4\") >>> print(\"Handling\", d.popleft()) Handling task1  unsearched = deque([starting_node]) def breadth_first_search(unsearched):     node = unsearched.popleft()     for m in gen_moves(node):         if is_goal(m):             return m         unsearched.append(m)"
msgstr ""

msgid "In addition to alternative list implementations, the library also offers other tools such as the :mod:`bisect` module with functions for manipulating sorted lists::"
msgstr ""

msgid ">>> import bisect >>> scores = [(100, 'perl'), (200, 'tcl'), (400, 'lua'), (500, 'python')] >>> bisect.insort(scores, (300, 'ruby')) >>> scores [(100, 'perl'), (200, 'tcl'), (300, 'ruby'), (400, 'lua'), (500, 'python')]"
msgstr ""

msgid "The :mod:`heapq` module provides functions for implementing heaps based on regular lists.  The lowest valued entry is always kept at position zero.  This is useful for applications which repeatedly access the smallest element but do not want to run a full list sort::"
msgstr ""

msgid ">>> from heapq import heapify, heappop, heappush >>> data = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0] >>> heapify(data)                      # rearrange the list into heap order >>> heappush(data, -5)                 # add a new entry >>> [heappop(data) for i in range(3)]  # fetch the three smallest entries [-5, 0, 1]"
msgstr ""

msgid "Decimal Floating Point Arithmetic"
msgstr ""

msgid "The :mod:`decimal` module offers a :class:`Decimal` datatype for decimal floating point arithmetic.  Compared to the built-in :class:`float` implementation of binary floating point, the class is especially helpful for"
msgstr ""

msgid "financial applications and other uses which require exact decimal representation,"
msgstr ""

msgid "control over precision,"
msgstr ""

msgid "control over rounding to meet legal or regulatory requirements,"
msgstr ""

msgid "tracking of significant decimal places, or"
msgstr ""

msgid "applications where the user expects the results to match calculations done by hand."
msgstr ""

msgid "For example, calculating a 5% tax on a 70 cent phone charge gives different results in decimal floating point and binary floating point. The difference becomes significant if the results are rounded to the nearest cent::"
msgstr ""

msgid ">>> from decimal import * >>> round(Decimal('0.70') * Decimal('1.05'), 2) Decimal('0.74') >>> round(.70 * 1.05, 2) 0.73"
msgstr ""

msgid "The :class:`Decimal` result keeps a trailing zero, automatically inferring four place significance from multiplicands with two place significance.  Decimal reproduces mathematics as done by hand and avoids issues that can arise when binary floating point cannot exactly represent decimal quantities."
msgstr ""

msgid "Exact representation enables the :class:`Decimal` class to perform modulo calculations and equality tests that are unsuitable for binary floating point::"
msgstr ""

msgid ">>> Decimal('1.00') % Decimal('.10') Decimal('0.00') >>> 1.00 % 0.10 0.09999999999999995  >>> sum([Decimal('0.1')]*10) == Decimal('1.0') True >>> sum([0.1]*10) == 1.0 False"
msgstr ""

msgid "The :mod:`decimal` module provides arithmetic with as much precision as needed::"
msgstr ""

msgid ">>> getcontext().prec = 36 >>> Decimal(1) / Decimal(7) Decimal('0.142857142857142857142857142857142857')"
msgstr ""

msgid "What Now?"
msgstr ""

msgid "Reading this tutorial has probably reinforced your interest in using Python --- you should be eager to apply Python to solving your real-world problems. Where should you go to learn more?"
msgstr ""

msgid "This tutorial is part of Python's documentation set.   Some other documents in the set are:"
msgstr ""

msgid ":ref:`library-index`:"
msgstr ""

msgid "You should browse through this manual, which gives complete (though terse) reference material about types, functions, and the modules in the standard library.  The standard Python distribution includes a *lot* of additional code. There are modules to read Unix mailboxes, retrieve documents via HTTP, generate random numbers, parse command-line options, write CGI programs, compress data, and many other tasks. Skimming through the Library Reference will give you an idea of what's available."
msgstr ""

msgid ":ref:`install-index` explains how to install external modules written by other Python users."
msgstr ""

msgid ":ref:`reference-index`: A detailed explanation of Python's syntax and semantics.  It's heavy reading, but is useful as a complete guide to the language itself."
msgstr ""

msgid "More Python resources:"
msgstr ""

msgid "http://www.python.org:  The major Python Web site.  It contains code, documentation, and pointers to Python-related pages around the Web.  This Web site is mirrored in various places around the world, such as Europe, Japan, and Australia; a mirror may be faster than the main site, depending on your geographical location."
msgstr ""

msgid "http://docs.python.org:  Fast access to Python's  documentation."
msgstr ""

msgid "http://pypi.python.org: The Python Package Index, previously also nicknamed the Cheese Shop, is an index of user-created Python modules that are available for download.  Once you begin releasing code, you can register it here so that others can find it."
msgstr ""

msgid "http://aspn.activestate.com/ASPN/Python/Cookbook/: The Python Cookbook is a sizable collection of code examples, larger modules, and useful scripts. Particularly notable contributions are collected in a book also titled Python Cookbook (O'Reilly & Associates, ISBN 0-596-00797-3.)"
msgstr ""

msgid "http://scipy.org: The Scientific Python project includes modules for fast array computations and manipulations plus a host of packages for such things as linear algebra, Fourier transforms, non-linear solvers, random number distributions, statistical analysis and the like."
msgstr ""

msgid "For Python-related questions and problem reports, you can post to the newsgroup :newsgroup:`comp.lang.python`, or send them to the mailing list at python-list@python.org.  The newsgroup and mailing list are gatewayed, so messages posted to one will automatically be forwarded to the other.  There are around 120 postings a day (with peaks up to several hundred), asking (and answering) questions, suggesting new features, and announcing new modules. Before posting, be sure to check the list of `Frequently Asked Questions <http://www.python.org/doc/faq/>`_ (also called the FAQ), or look for it in the :file:`Misc/` directory of the Python source distribution.  Mailing list archives are available at http://mail.python.org/pipermail/. The FAQ answers many of the questions that come up again and again, and may already contain the solution for your problem."
msgstr ""
