# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/using/windows.rst:7
msgid "Using Python on Windows"
msgstr "Utiliser Python sur Windows"

#: ../Doc/using/windows.rst:11
msgid ""
"This document aims to give an overview of Windows-specific behaviour you "
"should know about when using Python on Microsoft Windows."
msgstr ""

#: ../Doc/using/windows.rst:16
msgid "Installing Python"
msgstr "Installer Python"

#: ../Doc/using/windows.rst:18
msgid ""
"Unlike most Unix systems and services, Windows does not require Python "
"natively and thus does not pre-install a version of Python.  However, the "
"CPython team has compiled Windows installers (MSI packages) with every "
"`release <https://www.python.org/download/releases/>`_ for many years."
msgstr ""

#: ../Doc/using/windows.rst:23
msgid ""
"With ongoing development of Python, some platforms that used to be supported "
"earlier are no longer supported (due to the lack of users or developers). "
"Check :pep:`11` for details on all unsupported platforms."
msgstr ""

#: ../Doc/using/windows.rst:27
msgid ""
"DOS and Windows 3.x are deprecated since Python 2.0 and code specific to "
"these systems was removed in Python 2.1."
msgstr ""

#: ../Doc/using/windows.rst:29
msgid ""
"Up to 2.5, Python was still compatible with Windows 95, 98 and ME (but "
"already raised a deprecation warning on installation).  For Python 2.6 (and "
"all following releases), this support was dropped and new releases are just "
"expected to work on the Windows NT family."
msgstr ""

#: ../Doc/using/windows.rst:33
msgid "`Windows CE <http://pythonce.sourceforge.net/>`_ is still supported."
msgstr ""

#: ../Doc/using/windows.rst:34
msgid ""
"The `Cygwin <https://cygwin.com/>`_ installer offers to install the Python "
"interpreter as well (cf. `Cygwin package source <ftp://ftp.uni-erlangen.de/"
"pub/pc/gnuwin32/cygwin/mirrors/cygnus/ release/python>`_, `Maintainer "
"releases <http://www.tishler.net/jason/software/python/>`_)"
msgstr ""

#: ../Doc/using/windows.rst:40
msgid ""
"See `Python for Windows (and DOS) <https://www.python.org/download/windows/"
">`_ for detailed information about platforms with precompiled installers."
msgstr ""

#: ../Doc/using/windows.rst:47
msgid ""
"`Python on XP <http://dooling.com/index.php/2006/03/14/python-on-xp-7-"
"minutes-to-hello-world/>`_"
msgstr ""

#: ../Doc/using/windows.rst:46
msgid "\"7 Minutes to \"Hello World!\"\" by Richard Dooling, 2006"
msgstr ""

#: ../Doc/using/windows.rst:53
msgid ""
"`Installing on Windows <http://www.diveintopython.net/installing_python/"
"windows.html>`_"
msgstr ""

#: ../Doc/using/windows.rst:50
msgid ""
"in \"`Dive into Python: Python from novice to pro <http://www.diveintopython."
"net/>`_\" by Mark Pilgrim, 2004, ISBN 1-59059-356-1"
msgstr ""

#: ../Doc/using/windows.rst:57
msgid ""
"`For Windows users <http://python.swaroopch.com/installation."
"html#installation-on-windows>`_"
msgstr ""

#: ../Doc/using/windows.rst:56
msgid ""
"in \"Installing Python\" in \"`A Byte of Python <http://python.swaroopch.com/"
">`_\" by Swaroop C H, 2003"
msgstr ""

#: ../Doc/using/windows.rst:62
msgid "Alternative bundles"
msgstr ""

#: ../Doc/using/windows.rst:64
msgid ""
"Besides the standard CPython distribution, there are modified packages "
"including additional functionality.  The following is a list of popular "
"versions and their key features:"
msgstr ""

#: ../Doc/using/windows.rst:69
msgid "`ActivePython <https://www.activestate.com/activepython/>`_"
msgstr ""

#: ../Doc/using/windows.rst:69
msgid "Installer with multi-platform compatibility, documentation, PyWin32"
msgstr ""

#: ../Doc/using/windows.rst:73
msgid ""
"`Enthought Python Distribution <https://www.enthought.com/products/epd/>`_"
msgstr ""

#: ../Doc/using/windows.rst:72
msgid ""
"Popular modules (such as PyWin32) with their respective documentation, tool "
"suite for building extensible Python applications"
msgstr ""

#: ../Doc/using/windows.rst:75
msgid ""
"Notice that these packages are likely to install *older* versions of Python."
msgstr ""

#: ../Doc/using/windows.rst:80
msgid "Configuring Python"
msgstr ""

#: ../Doc/using/windows.rst:82
msgid ""
"In order to run Python flawlessly, you might have to change certain "
"environment settings in Windows."
msgstr ""

#: ../Doc/using/windows.rst:89
msgid "Excursus: Setting environment variables"
msgstr ""

#: ../Doc/using/windows.rst:91
msgid ""
"Windows has a built-in dialog for changing environment variables (following "
"guide applies to XP classical view): Right-click the icon for your machine "
"(usually located on your Desktop and called \"My Computer\") and choose :"
"menuselection:`Properties` there.  Then, open the :guilabel:`Advanced` tab "
"and click the :guilabel:`Environment Variables` button."
msgstr ""

#: ../Doc/using/windows.rst:97
msgid "In short, your path is:"
msgstr ""

#: ../Doc/using/windows.rst:99
msgid ""
":menuselection:`My Computer --> Properties --> Advanced --> Environment "
"Variables`"
msgstr ""

#: ../Doc/using/windows.rst:104
msgid ""
"In this dialog, you can add or modify User and System variables. To change "
"System variables, you need non-restricted access to your machine (i.e. "
"Administrator rights)."
msgstr ""

#: ../Doc/using/windows.rst:108
msgid ""
"Another way of adding variables to your environment is using the :command:"
"`set` command::"
msgstr ""

#: ../Doc/using/windows.rst:113
msgid ""
"To make this setting permanent, you could add the corresponding command line "
"to your :file:`autoexec.bat`. :program:`msconfig` is a graphical interface "
"to this file."
msgstr ""

#: ../Doc/using/windows.rst:117
msgid ""
"Viewing environment variables can also be done more straight-forward: The "
"command prompt will expand strings wrapped into percent signs automatically::"
msgstr ""

#: ../Doc/using/windows.rst:122
msgid "Consult :command:`set /?` for details on this behaviour."
msgstr ""

#: ../Doc/using/windows.rst:127
msgid "https://support.microsoft.com/kb/100843"
msgstr ""

#: ../Doc/using/windows.rst:127
msgid "Environment variables in Windows NT"
msgstr ""

#: ../Doc/using/windows.rst:130
msgid "https://support.microsoft.com/kb/310519"
msgstr ""

#: ../Doc/using/windows.rst:130
msgid "How To Manage Environment Variables in Windows XP"
msgstr "Comment gérer les variables d'environnement sous Windows XP"

#: ../Doc/using/windows.rst:132
msgid "https://www.chem.gla.ac.uk/~louis/software/faq/q1.html"
msgstr ""

#: ../Doc/using/windows.rst:133
msgid "Setting Environment variables, Louis J. Farrugia"
msgstr "Définir les variables d'environnement, Louis J. Farrugia"

#: ../Doc/using/windows.rst:137
msgid "Finding the Python executable"
msgstr "Trouver l'exécutable Python"

#: ../Doc/using/windows.rst:139
msgid ""
"Besides using the automatically created start menu entry for the Python "
"interpreter, you might want to start Python in the DOS prompt.  To make this "
"work, you need to set your :envvar:`%PATH%` environment variable to include "
"the directory of your Python distribution, delimited by a semicolon from "
"other entries.  An example variable could look like this (assuming the first "
"two entries are Windows' default)::"
msgstr ""

#: ../Doc/using/windows.rst:148
msgid ""
"Typing :command:`python` on your command prompt will now fire up the Python "
"interpreter.  Thus, you can also execute your scripts with command line "
"options, see :ref:`using-on-cmdline` documentation."
msgstr ""

#: ../Doc/using/windows.rst:154
msgid "Finding modules"
msgstr ""

#: ../Doc/using/windows.rst:156
msgid ""
"Python usually stores its library (and thereby your site-packages folder) in "
"the installation directory.  So, if you had installed Python to :file:`C:\\"
"\\Python\\\\`, the default library would reside in :file:`C:\\\\Python\\\\Lib"
"\\\\` and third-party modules should be stored in :file:`C:\\\\Python\\\\Lib"
"\\\\site-packages\\\\`."
msgstr ""

#: ../Doc/using/windows.rst:162
msgid "This is how :data:`sys.path` is populated on Windows:"
msgstr ""

#: ../Doc/using/windows.rst:164
msgid ""
"An empty entry is added at the start, which corresponds to the current "
"directory."
msgstr ""

#: ../Doc/using/windows.rst:167
msgid ""
"If the environment variable :envvar:`PYTHONPATH` exists, as described in :"
"ref:`using-on-envvars`, its entries are added next.  Note that on Windows, "
"paths in this variable must be separated by semicolons, to distinguish them "
"from the colon used in drive identifiers (``C:\\`` etc.)."
msgstr ""

#: ../Doc/using/windows.rst:172
msgid ""
"Additional \"application paths\" can be added in the registry as subkeys of :"
"samp:`\\\\SOFTWARE\\\\Python\\\\PythonCore\\\\{version}\\\\PythonPath` under "
"both the ``HKEY_CURRENT_USER`` and ``HKEY_LOCAL_MACHINE`` hives.  Subkeys "
"which have semicolon-delimited path strings as their default value will "
"cause each path to be added to :data:`sys.path`.  (Note that all known "
"installers only use HKLM, so HKCU is typically empty.)"
msgstr ""

#: ../Doc/using/windows.rst:179
msgid ""
"If the environment variable :envvar:`PYTHONHOME` is set, it is assumed as "
"\"Python Home\".  Otherwise, the path of the main Python executable is used "
"to locate a \"landmark file\" (``Lib\\os.py``) to deduce the \"Python Home"
"\".  If a Python home is found, the relevant sub-directories added to :data:"
"`sys.path` (``Lib``, ``plat-win``, etc) are based on that folder.  "
"Otherwise, the core Python path is constructed from the PythonPath stored in "
"the registry."
msgstr ""

#: ../Doc/using/windows.rst:186
msgid ""
"If the Python Home cannot be located, no :envvar:`PYTHONPATH` is specified "
"in the environment, and no registry entries can be found, a default path "
"with relative entries is used (e.g. ``.\\Lib;.\\plat-win``, etc)."
msgstr ""

#: ../Doc/using/windows.rst:190
msgid "The end result of all this is:"
msgstr ""

#: ../Doc/using/windows.rst:192
msgid ""
"When running :file:`python.exe`, or any other .exe in the main Python "
"directory (either an installed version, or directly from the PCbuild "
"directory), the core path is deduced, and the core paths in the registry are "
"ignored.  Other \"application paths\" in the registry are always read."
msgstr ""

#: ../Doc/using/windows.rst:197
msgid ""
"When Python is hosted in another .exe (different directory, embedded via "
"COM, etc), the \"Python Home\" will not be deduced, so the core path from "
"the registry is used.  Other \"application paths\" in the registry are "
"always read."
msgstr ""

#: ../Doc/using/windows.rst:201
msgid ""
"If Python can't find its home and there is no registry (eg, frozen .exe, "
"some very strange installation setup) you get a path with some default, but "
"relative, paths."
msgstr ""

#: ../Doc/using/windows.rst:207
msgid "Executing scripts"
msgstr ""

#: ../Doc/using/windows.rst:209
msgid ""
"Python scripts (files with the extension ``.py``) will be executed by :"
"program:`python.exe` by default.  This executable opens a terminal, which "
"stays open even if the program uses a GUI.  If you do not want this to "
"happen, use the extension ``.pyw`` which will cause the script to be "
"executed by :program:`pythonw.exe` by default (both executables are located "
"in the top-level of your Python installation directory).  This suppresses "
"the terminal window on startup."
msgstr ""

#: ../Doc/using/windows.rst:217
msgid ""
"You can also make all ``.py`` scripts execute with :program:`pythonw.exe`, "
"setting this through the usual facilities, for example (might require "
"administrative rights):"
msgstr ""

#: ../Doc/using/windows.rst:221
msgid "Launch a command prompt."
msgstr ""

#: ../Doc/using/windows.rst:222
msgid "Associate the correct file group with ``.py`` scripts::"
msgstr ""

#: ../Doc/using/windows.rst:226
msgid "Redirect all Python files to the new executable::"
msgstr ""

#: ../Doc/using/windows.rst:232
msgid "Additional modules"
msgstr ""

#: ../Doc/using/windows.rst:234
msgid ""
"Even though Python aims to be portable among all platforms, there are "
"features that are unique to Windows.  A couple of modules, both in the "
"standard library and external, and snippets exist to use these features."
msgstr ""

#: ../Doc/using/windows.rst:238
msgid ""
"The Windows-specific standard modules are documented in :ref:`mswin-specific-"
"services`."
msgstr ""

#: ../Doc/using/windows.rst:243
msgid "PyWin32"
msgstr "PyWin32"

#: ../Doc/using/windows.rst:245
msgid ""
"The `PyWin32 <https://pypi.python.org/pypi/pywin32>`_ module by Mark Hammond "
"is a collection of modules for advanced Windows-specific support.  This "
"includes utilities for:"
msgstr ""
"Le module `PyWin32 <https://pypi.python.org/pypi/pywin32>`_ de Mark Hammond "
"est une collection de modules pour un support avancé spécifique à Windows.  "
"Cela inclut les services pour :"

#: ../Doc/using/windows.rst:249
msgid "`Component Object Model <https://www.microsoft.com/com/>`_ (COM)"
msgstr "`Component Object Model <http://www.microsoft.com/com/>`_ (COM)"

#: ../Doc/using/windows.rst:250
msgid "Win32 API calls"
msgstr "Appels à l'API Win32"

#: ../Doc/using/windows.rst:251
msgid "Registry"
msgstr "Registre"

#: ../Doc/using/windows.rst:252
msgid "Event log"
msgstr "journal d'événement"

#: ../Doc/using/windows.rst:253
msgid ""
"`Microsoft Foundation Classes <https://msdn.microsoft.com/en-us/library/"
"fe1cf721%28VS.80%29.aspx>`_ (MFC) user interfaces"
msgstr ""
"`Microsoft Foundation Classes <http://msdn.microsoft.com/en-us/library/"
"fe1cf721%28VS.80%29.aspx>`_ (MFC) interfaces utilisateur"

#: ../Doc/using/windows.rst:256
msgid ""
"`PythonWin <https://web.archive.org/web/20060524042422/ https://www.python."
"org/windows/pythonwin/>`_ is a sample MFC application shipped with PyWin32.  "
"It is an embeddable IDE with a built-in debugger."
msgstr ""
"`PythonWin <http://web.archive.org/web/20060524042422/ http://www.python.org/"
"windows/pythonwin/>`_ est une exemple d'application MFC livrée avec PyWin32. "
"Il s'agit d'un IDE embarqué avec débogueur intégré."

#: ../Doc/using/windows.rst:263
msgid ""
"`Win32 How Do I...? <http://timgolden.me.uk/python/win32_how_do_i.html>`_"
msgstr ""

#: ../Doc/using/windows.rst:263
msgid "by Tim Golden"
msgstr "par Tim Golden"

#: ../Doc/using/windows.rst:265
msgid "`Python and COM <http://www.boddie.org.uk/python/COM.html>`_"
msgstr ""

#: ../Doc/using/windows.rst:266
msgid "by David and Paul Boddie"
msgstr "par David et Paul Boddie"

#: ../Doc/using/windows.rst:270
msgid "Py2exe"
msgstr "Py2exe"

#: ../Doc/using/windows.rst:272
msgid ""
"`Py2exe <http://www.py2exe.org/>`_ is a :mod:`distutils` extension (see :ref:"
"`extending-distutils`) which wraps Python scripts into executable Windows "
"programs (:file:`{*}.exe` files).  When you have done this, you can "
"distribute your application without requiring your users to install Python."
msgstr ""

#: ../Doc/using/windows.rst:279
msgid "WConio"
msgstr "WConio"

#: ../Doc/using/windows.rst:281
msgid ""
"Since Python's advanced terminal handling layer, :mod:`curses`, is "
"restricted to Unix-like systems, there is a library exclusive to Windows as "
"well: Windows Console I/O for Python."
msgstr ""

#: ../Doc/using/windows.rst:285
msgid ""
"`WConio <http://newcenturycomputers.net/projects/wconio.html>`_ is a wrapper "
"for Turbo-C's :file:`CONIO.H`, used to create text user interfaces."
msgstr ""

#: ../Doc/using/windows.rst:291
msgid "Compiling Python on Windows"
msgstr "Compiler Python sous Windows"

#: ../Doc/using/windows.rst:293
msgid ""
"If you want to compile CPython yourself, first thing you should do is get "
"the `source <https://www.python.org/downloads/source/>`_. You can download "
"either the latest release's source or just grab a fresh `checkout <https://"
"docs.python.org/devguide/setup.html#getting-the-source-code>`_."
msgstr ""

#: ../Doc/using/windows.rst:298
msgid ""
"For Microsoft Visual C++, which is the compiler with which official Python "
"releases are built, the source tree contains solutions/project files.  View "
"the :file:`readme.txt` in their respective directories:"
msgstr ""

#: ../Doc/using/windows.rst:303
msgid "Directory"
msgstr "Répertoire"

#: ../Doc/using/windows.rst:303
msgid "MSVC version"
msgstr "version de MSVC"

#: ../Doc/using/windows.rst:303
msgid "Visual Studio version"
msgstr "Version de Visual Studio"

#: ../Doc/using/windows.rst:305
msgid ":file:`PC/VC6/`"
msgstr ":file:`PC/VC6/`"

#: ../Doc/using/windows.rst:305
msgid "6.0"
msgstr "6.0"

#: ../Doc/using/windows.rst:305
msgid "97"
msgstr "97"

#: ../Doc/using/windows.rst:307
msgid ":file:`PC/VS7.1/`"
msgstr ":file:`PC/VS7.1/`"

#: ../Doc/using/windows.rst:307
msgid "7.1"
msgstr "7.1"

#: ../Doc/using/windows.rst:307
msgid "2003"
msgstr "2003"

#: ../Doc/using/windows.rst:309
msgid ":file:`PC/VS8.0/`"
msgstr ":file:`PC/VS8.0/`"

#: ../Doc/using/windows.rst:309
msgid "8.0"
msgstr "8.0"

#: ../Doc/using/windows.rst:309
msgid "2005"
msgstr "2005"

#: ../Doc/using/windows.rst:311
msgid ":file:`PCbuild/`"
msgstr ":file:`PCbuild/`"

#: ../Doc/using/windows.rst:311
msgid "9.0"
msgstr "9.0"

#: ../Doc/using/windows.rst:311
msgid "2008"
msgstr "2008"

#: ../Doc/using/windows.rst:314
msgid ""
"Note that not all of these build directories are fully supported.  Read the "
"release notes to see which compiler version the official releases for your "
"version are built with."
msgstr ""

#: ../Doc/using/windows.rst:318
msgid ""
"Check :file:`PC/readme.txt` for general information on the build process."
msgstr ""
"Vérifiez :file:`PC/readme.txt` pour des informations générales sur le "
"processus de construction."

#: ../Doc/using/windows.rst:321
msgid "For extension modules, consult :ref:`building-on-windows`."
msgstr ""

#: ../Doc/using/windows.rst:328
msgid ""
"`Python + Windows + distutils + SWIG + gcc MinGW <http://sebsauvage.net/"
"python/mingw.html>`_"
msgstr ""

#: ../Doc/using/windows.rst:326
msgid ""
"or \"Creating Python extensions in C/C++ with SWIG and compiling them with "
"MinGW gcc under Windows\" or \"Installing Python extension with distutils "
"and without Microsoft Visual C++\" by Sébastien Sauvage, 2003"
msgstr ""

#: ../Doc/using/windows.rst:330
msgid ""
"`MingW -- Python extensions <http://oldwiki.mingw.org/index.php/Python"
"%20extensions>`_"
msgstr ""

#: ../Doc/using/windows.rst:331
msgid "by Trent Apted et al, 2007"
msgstr "par Trent Apted et al, 2007"

#: ../Doc/using/windows.rst:335
msgid "Other resources"
msgstr "Autres ressources"

#: ../Doc/using/windows.rst:342
msgid ""
"`Python Programming On Win32 <http://shop.oreilly.com/product/9781565926219."
"do>`_"
msgstr ""

#: ../Doc/using/windows.rst:340
msgid ""
"\"Help for Windows Programmers\" by Mark Hammond and Andy Robinson, O'Reilly "
"Media, 2000, ISBN 1-56592-621-8"
msgstr ""
"\"Help for Windows Programmers\" de Mark Hammond et Andy Robinson, O'Reilly "
"Media, 2000, ISBN 1-56592-621-8"

#: ../Doc/using/windows.rst:344
msgid ""
"`A Python for Windows Tutorial <http://www.imladris.com/Scripts/"
"PythonForWindows.html>`_"
msgstr ""

#: ../Doc/using/windows.rst:345
msgid "by Amanda Birmingham, 2004"
msgstr "par Amanda Birmingham, 2004"
