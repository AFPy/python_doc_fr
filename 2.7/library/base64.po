# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/base64.rst:2
msgid ":mod:`base64` --- RFC 3548: Base16, Base32, Base64 Data Encodings"
msgstr ""

#: ../Doc/library/base64.rst:12
msgid ""
"This module provides data encoding and decoding as specified in :rfc:`3548`. "
"This standard defines the Base16, Base32, and Base64 algorithms for encoding "
"and decoding arbitrary binary strings into text strings that can be safely "
"sent by email, used as parts of URLs, or included as part of an HTTP POST "
"request.  The encoding algorithm is not the same as the :program:`uuencode` "
"program."
msgstr ""

#: ../Doc/library/base64.rst:18
msgid ""
"There are two interfaces provided by this module.  The modern interface "
"supports encoding and decoding string objects using both base-64 alphabets "
"defined in :rfc:`3548` (normal, and URL- and filesystem-safe).  The legacy "
"interface provides for encoding and decoding to and from file-like objects "
"as well as strings, but only using the Base64 standard alphabet."
msgstr ""

#: ../Doc/library/base64.rst:24
msgid "The modern interface, which was introduced in Python 2.4, provides:"
msgstr ""

#: ../Doc/library/base64.rst:29
msgid "Encode a string using Base64."
msgstr ""

#: ../Doc/library/base64.rst:31
msgid ""
"*s* is the string to encode.  Optional *altchars* must be a string of at "
"least length 2 (additional characters are ignored) which specifies an "
"alternative alphabet for the ``+`` and ``/`` characters.  This allows an "
"application to e.g. generate URL or filesystem safe Base64 strings.  The "
"default is ``None``, for which the standard Base64 alphabet is used."
msgstr ""

#: ../Doc/library/base64.rst:37
msgid "The encoded string is returned."
msgstr ""

#: ../Doc/library/base64.rst:42
msgid "Decode a Base64 encoded string."
msgstr ""

#: ../Doc/library/base64.rst:44
msgid ""
"*s* is the string to decode.  Optional *altchars* must be a string of at "
"least length 2 (additional characters are ignored) which specifies the "
"alternative alphabet used instead of the ``+`` and ``/`` characters."
msgstr ""

#: ../Doc/library/base64.rst:48
msgid ""
"The decoded string is returned.  A :exc:`TypeError` is raised if *s* is "
"incorrectly padded.  Characters that are neither in the normal base-64 "
"alphabet nor the alternative alphabet are discarded prior to the padding "
"check."
msgstr ""

#: ../Doc/library/base64.rst:56
msgid "Encode string *s* using the standard Base64 alphabet."
msgstr ""

#: ../Doc/library/base64.rst:61
msgid "Decode string *s* using the standard Base64 alphabet."
msgstr ""

#: ../Doc/library/base64.rst:66
msgid ""
"Encode string *s* using the URL- and filesystem-safe alphabet, which "
"substitutes ``-`` instead of ``+`` and ``_`` instead of ``/`` in the "
"standard Base64 alphabet.  The result can still contain ``=``."
msgstr ""

#: ../Doc/library/base64.rst:74
msgid ""
"Decode string *s* using the URL- and filesystem-safe alphabet, which "
"substitutes ``-`` instead of ``+`` and ``_`` instead of ``/`` in the "
"standard Base64 alphabet."
msgstr ""

#: ../Doc/library/base64.rst:81
msgid ""
"Encode a string using Base32.  *s* is the string to encode.  The encoded "
"string is returned."
msgstr ""

#: ../Doc/library/base64.rst:87
msgid "Decode a Base32 encoded string."
msgstr ""

#: ../Doc/library/base64.rst:89 ../Doc/library/base64.rst:116
msgid ""
"*s* is the string to decode.  Optional *casefold* is a flag specifying "
"whether a lowercase alphabet is acceptable as input.  For security purposes, "
"the default is ``False``."
msgstr ""

#: ../Doc/library/base64.rst:93
msgid ""
":rfc:`3548` allows for optional mapping of the digit 0 (zero) to the letter "
"O (oh), and for optional mapping of the digit 1 (one) to either the letter I "
"(eye) or letter L (el).  The optional argument *map01* when not ``None``, "
"specifies which letter the digit 1 should be mapped to (when *map01* is not "
"``None``, the digit 0 is always mapped to the letter O).  For security "
"purposes the default is ``None``, so that 0 and 1 are not allowed in the "
"input."
msgstr ""

#: ../Doc/library/base64.rst:100
msgid ""
"The decoded string is returned.  A :exc:`TypeError` is raised if *s* is "
"incorrectly padded or if there are non-alphabet characters present in the "
"string."
msgstr ""

#: ../Doc/library/base64.rst:107
msgid "Encode a string using Base16."
msgstr ""

#: ../Doc/library/base64.rst:109
msgid "*s* is the string to encode.  The encoded string is returned."
msgstr ""

#: ../Doc/library/base64.rst:114
msgid "Decode a Base16 encoded string."
msgstr ""

#: ../Doc/library/base64.rst:120
msgid ""
"The decoded string is returned.  A :exc:`TypeError` is raised if *s* were "
"incorrectly padded or if there are non-alphabet characters present in the "
"string."
msgstr ""

#: ../Doc/library/base64.rst:124
msgid "The legacy interface:"
msgstr "L'interface historique :"

#: ../Doc/library/base64.rst:129
msgid ""
"Decode the contents of the *input* file and write the resulting binary data "
"to the *output* file. *input* and *output* must either be file objects or "
"objects that mimic the file object interface. *input* will be read until "
"``input.read()`` returns an empty string."
msgstr ""

#: ../Doc/library/base64.rst:137
msgid ""
"Decode the string *s*, which must contain one or more lines of base64 "
"encoded data, and return a string containing the resulting binary data."
msgstr ""

#: ../Doc/library/base64.rst:143
msgid ""
"Encode the contents of the *input* file and write the resulting base64 "
"encoded data to the *output* file. *input* and *output* must either be file "
"objects or objects that mimic the file object interface. *input* will be "
"read until ``input.read()`` returns an empty string.  :func:`encode` returns "
"the encoded data plus a trailing newline character (``'\\n'``)."
msgstr ""

#: ../Doc/library/base64.rst:152
msgid ""
"Encode the string *s*, which can contain arbitrary binary data, and return a "
"string containing one or more lines of base64-encoded data. :func:"
"`encodestring` returns a string containing one or more lines of base64-"
"encoded data always including an extra trailing newline (``'\\n'``)."
msgstr ""

#: ../Doc/library/base64.rst:157
msgid "An example usage of the module:"
msgstr "Un exemple d'utilisation du module :"

#: ../Doc/library/base64.rst:171
msgid "Module :mod:`binascii`"
msgstr "Le module :mod:`binascii`"

#: ../Doc/library/base64.rst:171
msgid ""
"Support module containing ASCII-to-binary and binary-to-ASCII conversions."
msgstr ""

#: ../Doc/library/base64.rst:174
msgid ""
":rfc:`1521` - MIME (Multipurpose Internet Mail Extensions) Part One: "
"Mechanisms for Specifying and Describing the Format of Internet Message "
"Bodies"
msgstr ""

#: ../Doc/library/base64.rst:174
msgid ""
"Section 5.2, \"Base64 Content-Transfer-Encoding,\" provides the definition "
"of the base64 encoding."
msgstr ""
