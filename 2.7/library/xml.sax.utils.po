# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/xml.sax.utils.rst:3
msgid ":mod:`xml.sax.saxutils` --- SAX Utilities"
msgstr ""

#: ../Doc/library/xml.sax.utils.rst:13
msgid ""
"The module :mod:`xml.sax.saxutils` contains a number of classes and "
"functions that are commonly useful when creating SAX applications, either in "
"direct use, or as base classes."
msgstr ""

#: ../Doc/library/xml.sax.utils.rst:20
msgid "Escape ``'&'``, ``'<'``, and ``'>'`` in a string of data."
msgstr ""

#: ../Doc/library/xml.sax.utils.rst:22
msgid ""
"You can escape other strings of data by passing a dictionary as the optional "
"*entities* parameter.  The keys and values must all be strings; each key "
"will be replaced with its corresponding value.  The characters ``'&'``, "
"``'<'`` and ``'>'`` are always escaped, even if *entities* is provided."
msgstr ""

#: ../Doc/library/xml.sax.utils.rst:30
msgid "Unescape ``'&amp;'``, ``'&lt;'``, and ``'&gt;'`` in a string of data."
msgstr ""

#: ../Doc/library/xml.sax.utils.rst:32
msgid ""
"You can unescape other strings of data by passing a dictionary as the "
"optional *entities* parameter.  The keys and values must all be strings; "
"each key will be replaced with its corresponding value.  ``'&amp'``, "
"``'&lt;'``, and ``'&gt;'`` are always unescaped, even if *entities* is "
"provided."
msgstr ""

#: ../Doc/library/xml.sax.utils.rst:42
msgid ""
"Similar to :func:`escape`, but also prepares *data* to be used as an "
"attribute value.  The return value is a quoted version of *data* with any "
"additional required replacements. :func:`quoteattr` will select a quote "
"character based on the content of *data*, attempting to avoid encoding any "
"quote characters in the string.  If both single- and double-quote characters "
"are already in *data*, the double-quote characters will be encoded and "
"*data* will be wrapped in double-quotes.  The resulting string can be used "
"directly as an attribute value::"
msgstr ""

#: ../Doc/library/xml.sax.utils.rst:54
msgid ""
"This function is useful when generating attribute values for HTML or any "
"SGML using the reference concrete syntax."
msgstr ""

#: ../Doc/library/xml.sax.utils.rst:62
msgid ""
"This class implements the :class:`~xml.sax.handler.ContentHandler` interface "
"by writing SAX events back into an XML document. In other words, using an :"
"class:`XMLGenerator` as the content handler will reproduce the original "
"document being parsed. *out* should be a file-like object which will default "
"to *sys.stdout*. *encoding* is the encoding of the output stream which "
"defaults to ``'iso-8859-1'``."
msgstr ""

#: ../Doc/library/xml.sax.utils.rst:72
msgid ""
"This class is designed to sit between an :class:`~xml.sax.xmlreader."
"XMLReader` and the client application's event handlers.  By default, it does "
"nothing but pass requests up to the reader and events on to the handlers "
"unmodified, but subclasses can override specific methods to modify the event "
"stream or the configuration requests as they pass through."
msgstr ""

#: ../Doc/library/xml.sax.utils.rst:82
msgid ""
"This function takes an input source and an optional base URL and returns a "
"fully resolved :class:`~xml.sax.xmlreader.InputSource` object ready for "
"reading.  The input source can be given as a string, a file-like object, or "
"an :class:`~xml.sax.xmlreader.InputSource` object; parsers will use this "
"function to implement the polymorphic *source* argument to their :meth:"
"`parse` method."
msgstr ""
