# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/signal.rst:3
msgid ":mod:`signal` --- Set handlers for asynchronous events"
msgstr ""

#: ../Doc/library/signal.rst:9
msgid ""
"This module provides mechanisms to use signal handlers in Python. Some "
"general rules for working with signals and their handlers:"
msgstr ""

#: ../Doc/library/signal.rst:12
msgid ""
"A handler for a particular signal, once set, remains installed until it is "
"explicitly reset (Python emulates the BSD style interface regardless of the "
"underlying implementation), with the exception of the handler for :const:"
"`SIGCHLD`, which follows the underlying implementation."
msgstr ""

#: ../Doc/library/signal.rst:17
msgid ""
"There is no way to \"block\" signals temporarily from critical sections "
"(since this is not supported by all Unix flavors)."
msgstr ""

#: ../Doc/library/signal.rst:20
msgid ""
"Although Python signal handlers are called asynchronously as far as the "
"Python user is concerned, they can only occur between the \"atomic\" "
"instructions of the Python interpreter.  This means that signals arriving "
"during long calculations implemented purely in C (such as regular expression "
"matches on large bodies of text) may be delayed for an arbitrary amount of "
"time."
msgstr ""

#: ../Doc/library/signal.rst:26
msgid ""
"When a signal arrives during an I/O operation, it is possible that the I/O "
"operation raises an exception after the signal handler returns. This is "
"dependent on the underlying Unix system's semantics regarding interrupted "
"system calls."
msgstr ""

#: ../Doc/library/signal.rst:31
msgid ""
"Because the C signal handler always returns, it makes little sense to catch "
"synchronous errors like :const:`SIGFPE` or :const:`SIGSEGV`."
msgstr ""

#: ../Doc/library/signal.rst:34
msgid ""
"Python installs a small number of signal handlers by default: :const:"
"`SIGPIPE` is ignored (so write errors on pipes and sockets can be reported "
"as ordinary Python exceptions) and :const:`SIGINT` is translated into a :exc:"
"`KeyboardInterrupt` exception.  All of these can be overridden."
msgstr ""

#: ../Doc/library/signal.rst:39
msgid ""
"Some care must be taken if both signals and threads are used in the same "
"program.  The fundamental thing to remember in using signals and threads "
"simultaneously is: always perform :func:`signal` operations in the main "
"thread of execution.  Any thread can perform an :func:`alarm`, :func:"
"`getsignal`, :func:`pause`, :func:`setitimer` or :func:`getitimer`; only the "
"main thread can set a new signal handler, and the main thread will be the "
"only one to receive signals (this is enforced by the Python :mod:`signal` "
"module, even if the underlying thread implementation supports sending "
"signals to individual threads).  This means that signals can't be used as a "
"means of inter-thread communication.  Use locks instead."
msgstr ""

#: ../Doc/library/signal.rst:50
msgid "The variables defined in the :mod:`signal` module are:"
msgstr ""

#: ../Doc/library/signal.rst:55
msgid ""
"This is one of two standard signal handling options; it will simply perform "
"the default function for the signal.  For example, on most systems the "
"default action for :const:`SIGQUIT` is to dump core and exit, while the "
"default action for :const:`SIGCHLD` is to simply ignore it."
msgstr ""

#: ../Doc/library/signal.rst:63
msgid ""
"This is another standard signal handler, which will simply ignore the given "
"signal."
msgstr ""

#: ../Doc/library/signal.rst:69
msgid ""
"All the signal numbers are defined symbolically.  For example, the hangup "
"signal is defined as :const:`signal.SIGHUP`; the variable names are "
"identical to the names used in C programs, as found in ``<signal.h>``. The "
"Unix man page for ':c:func:`signal`' lists the existing signals (on some "
"systems this is :manpage:`signal(2)`, on others the list is in :manpage:"
"`signal(7)`). Note that not all systems define the same set of signal names; "
"only those names defined by the system are defined by this module."
msgstr ""

#: ../Doc/library/signal.rst:80
msgid ""
"The signal corresponding to the :kbd:`Ctrl+C` keystroke event. This signal "
"can only be used with :func:`os.kill`."
msgstr ""

#: ../Doc/library/signal.rst:83 ../Doc/library/signal.rst:93
msgid "Availability: Windows."
msgstr "Disponibilit√© : Windows."

#: ../Doc/library/signal.rst:90
msgid ""
"The signal corresponding to the :kbd:`Ctrl+Break` keystroke event. This "
"signal can only be used with :func:`os.kill`."
msgstr ""

#: ../Doc/library/signal.rst:100
msgid "One more than the number of the highest signal number."
msgstr ""

#: ../Doc/library/signal.rst:105
msgid ""
"Decrements interval timer in real time, and delivers :const:`SIGALRM` upon "
"expiration."
msgstr ""

#: ../Doc/library/signal.rst:110
msgid ""
"Decrements interval timer only when the process is executing, and delivers "
"SIGVTALRM upon expiration."
msgstr ""

#: ../Doc/library/signal.rst:116
msgid ""
"Decrements interval timer both when the process executes and when the system "
"is executing on behalf of the process. Coupled with ITIMER_VIRTUAL, this "
"timer is usually used to profile the time spent by the application in user "
"and kernel space. SIGPROF is delivered upon expiration."
msgstr ""

#: ../Doc/library/signal.rst:122
msgid "The :mod:`signal` module defines one exception:"
msgstr ""

#: ../Doc/library/signal.rst:126
msgid ""
"Raised to signal an error from the underlying :func:`setitimer` or :func:"
"`getitimer` implementation. Expect this error if an invalid interval timer "
"or a negative time is passed to :func:`setitimer`. This error is a subtype "
"of :exc:`IOError`."
msgstr ""

#: ../Doc/library/signal.rst:132
msgid "The :mod:`signal` module defines the following functions:"
msgstr ""

#: ../Doc/library/signal.rst:137
msgid ""
"If *time* is non-zero, this function requests that a :const:`SIGALRM` signal "
"be sent to the process in *time* seconds. Any previously scheduled alarm is "
"canceled (only one alarm can be scheduled at any time).  The returned value "
"is then the number of seconds before any previously set alarm was to have "
"been delivered. If *time* is zero, no alarm is scheduled, and any scheduled "
"alarm is canceled.  If the return value is zero, no alarm is currently "
"scheduled.  (See the Unix man page :manpage:`alarm(2)`.) Availability: Unix."
msgstr ""

#: ../Doc/library/signal.rst:148
msgid ""
"Return the current signal handler for the signal *signalnum*. The returned "
"value may be a callable Python object, or one of the special values :const:"
"`signal.SIG_IGN`, :const:`signal.SIG_DFL` or :const:`None`.  Here, :const:"
"`signal.SIG_IGN` means that the signal was previously ignored, :const:"
"`signal.SIG_DFL` means that the default way of handling the signal was "
"previously in use, and ``None`` means that the previous signal handler was "
"not installed from Python."
msgstr ""

#: ../Doc/library/signal.rst:159
msgid ""
"Cause the process to sleep until a signal is received; the appropriate "
"handler will then be called.  Returns nothing.  Not on Windows. (See the "
"Unix man page :manpage:`signal(2)`.)"
msgstr ""

#: ../Doc/library/signal.rst:166
msgid ""
"Sets given interval timer (one of :const:`signal.ITIMER_REAL`, :const:"
"`signal.ITIMER_VIRTUAL` or :const:`signal.ITIMER_PROF`) specified by *which* "
"to fire after *seconds* (float is accepted, different from :func:`alarm`) "
"and after that every *interval* seconds. The interval timer specified by "
"*which* can be cleared by setting seconds to zero."
msgstr ""

#: ../Doc/library/signal.rst:172
msgid ""
"When an interval timer fires, a signal is sent to the process. The signal "
"sent is dependent on the timer being used; :const:`signal.ITIMER_REAL` will "
"deliver :const:`SIGALRM`, :const:`signal.ITIMER_VIRTUAL` sends :const:"
"`SIGVTALRM`, and :const:`signal.ITIMER_PROF` will deliver :const:`SIGPROF`."
msgstr ""

#: ../Doc/library/signal.rst:178
msgid "The old values are returned as a tuple: (delay, interval)."
msgstr ""

#: ../Doc/library/signal.rst:180
msgid ""
"Attempting to pass an invalid interval timer will cause an :exc:"
"`ItimerError`.  Availability: Unix."
msgstr ""

#: ../Doc/library/signal.rst:188
msgid ""
"Returns current value of a given interval timer specified by *which*. "
"Availability: Unix."
msgstr ""

#: ../Doc/library/signal.rst:196
msgid ""
"Set the wakeup fd to *fd*.  When a signal is received, a ``'\\0'`` byte is "
"written to the fd.  This can be used by a library to wakeup a poll or select "
"call, allowing the signal to be fully processed."
msgstr ""

#: ../Doc/library/signal.rst:200
msgid ""
"The old wakeup fd is returned.  *fd* must be non-blocking.  It is up to the "
"library to remove any bytes before calling poll or select again."
msgstr ""

#: ../Doc/library/signal.rst:203 ../Doc/library/signal.rst:232
msgid ""
"When threads are enabled, this function can only be called from the main "
"thread; attempting to call it from other threads will cause a :exc:"
"`ValueError` exception to be raised."
msgstr ""

#: ../Doc/library/signal.rst:212
msgid ""
"Change system call restart behaviour: if *flag* is :const:`False`, system "
"calls will be restarted when interrupted by signal *signalnum*, otherwise "
"system calls will be interrupted.  Returns nothing.  Availability: Unix (see "
"the man page :manpage:`siginterrupt(3)` for further information)."
msgstr ""

#: ../Doc/library/signal.rst:217
msgid ""
"Note that installing a signal handler with :func:`signal` will reset the "
"restart behaviour to interruptible by implicitly calling :c:func:"
"`siginterrupt` with a true *flag* value for the given signal."
msgstr ""

#: ../Doc/library/signal.rst:226
msgid ""
"Set the handler for signal *signalnum* to the function *handler*.  *handler* "
"can be a callable Python object taking two arguments (see below), or one of "
"the special values :const:`signal.SIG_IGN` or :const:`signal.SIG_DFL`.  The "
"previous signal handler will be returned (see the description of :func:"
"`getsignal` above).  (See the Unix man page :manpage:`signal(2)`.)"
msgstr ""

#: ../Doc/library/signal.rst:236
msgid ""
"The *handler* is called with two arguments: the signal number and the "
"current stack frame (``None`` or a frame object; for a description of frame "
"objects, see the :ref:`description in the type hierarchy <frame-objects>` or "
"see the attribute descriptions in the :mod:`inspect` module)."
msgstr ""

#: ../Doc/library/signal.rst:241
msgid ""
"On Windows, :func:`signal` can only be called with :const:`SIGABRT`, :const:"
"`SIGFPE`, :const:`SIGILL`, :const:`SIGINT`, :const:`SIGSEGV`, or :const:"
"`SIGTERM`. A :exc:`ValueError` will be raised in any other case."
msgstr ""

#: ../Doc/library/signal.rst:249
msgid "Example"
msgstr "Exemple"

#: ../Doc/library/signal.rst:251
msgid ""
"Here is a minimal example program. It uses the :func:`alarm` function to "
"limit the time spent waiting to open a file; this is useful if the file is "
"for a serial device that may not be turned on, which would normally cause "
"the :func:`os.open` to hang indefinitely.  The solution is to set a 5-second "
"alarm before opening the file; if the operation takes too long, the alarm "
"signal will be sent, and the handler raises an exception. ::"
msgstr ""
