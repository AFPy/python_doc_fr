# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/email.errors.rst:2
msgid ":mod:`email.errors`: Exception and Defect classes"
msgstr ""

#: ../Doc/library/email.errors.rst:8
msgid ""
"The following exception classes are defined in the :mod:`email.errors` "
"module:"
msgstr ""

#: ../Doc/library/email.errors.rst:13
msgid ""
"This is the base class for all exceptions that the :mod:`email` package can "
"raise.  It is derived from the standard :exc:`Exception` class and defines "
"no additional methods."
msgstr ""

#: ../Doc/library/email.errors.rst:20
msgid ""
"This is the base class for exceptions raised by the :class:`~email.parser."
"Parser` class.  It is derived from :exc:`MessageError`."
msgstr ""

#: ../Doc/library/email.errors.rst:26 ../Doc/library/email.errors.rst:39
msgid ""
"Raised under some error conditions when parsing the :rfc:`2822` headers of a "
"message, this class is derived from :exc:`MessageParseError`. It can be "
"raised from the :meth:`Parser.parse <email.parser.Parser.parse>` or :meth:"
"`Parser.parsestr <email.parser.Parser.parsestr>` methods."
msgstr ""

#: ../Doc/library/email.errors.rst:31
msgid ""
"Situations where it can be raised include finding an envelope header after "
"the first :rfc:`2822` header of the message, finding a continuation line "
"before the first :rfc:`2822` header is found, or finding a line in the "
"headers which is neither a header or a continuation line."
msgstr ""

#: ../Doc/library/email.errors.rst:44
msgid ""
"Situations where it can be raised include not being able to find the "
"starting or terminating boundary in a :mimetype:`multipart/\\*` message when "
"strict parsing is used."
msgstr ""

#: ../Doc/library/email.errors.rst:51
msgid ""
"Raised when a payload is added to a :class:`~email.message.Message` object "
"using :meth:`add_payload`, but the payload is already a scalar and the "
"message's :mailheader:`Content-Type` main type is not either :mimetype:"
"`multipart` or missing.  :exc:`MultipartConversionError` multiply inherits "
"from :exc:`MessageError` and the built-in :exc:`TypeError`."
msgstr ""

#: ../Doc/library/email.errors.rst:57
msgid ""
"Since :meth:`Message.add_payload` is deprecated, this exception is rarely "
"raised in practice.  However the exception may also be raised if the :meth:"
"`~email.message.Message.attach` method is called on an instance of a class "
"derived from :class:`~email.mime.nonmultipart.MIMENonMultipart` (e.g. :class:"
"`~email.mime.image.MIMEImage`)."
msgstr ""

#: ../Doc/library/email.errors.rst:64
msgid ""
"Here's the list of the defects that the :class:`~email.parser.FeedParser` "
"can find while parsing messages.  Note that the defects are added to the "
"message where the problem was found, so for example, if a message nested "
"inside a :mimetype:`multipart/alternative` had a malformed header, that "
"nested message object would have a defect, but the containing messages would "
"not."
msgstr ""

#: ../Doc/library/email.errors.rst:70
msgid ""
"All defect classes are subclassed from :class:`email.errors.MessageDefect`, "
"but this class is *not* an exception!"
msgstr ""

#: ../Doc/library/email.errors.rst:73
msgid "All the defect classes were added."
msgstr ""

#: ../Doc/library/email.errors.rst:76
msgid ""
":class:`NoBoundaryInMultipartDefect` -- A message claimed to be a multipart, "
"but had no :mimetype:`boundary` parameter."
msgstr ""

#: ../Doc/library/email.errors.rst:79
msgid ""
":class:`StartBoundaryNotFoundDefect` -- The start boundary claimed in the :"
"mailheader:`Content-Type` header was never found."
msgstr ""

#: ../Doc/library/email.errors.rst:82
msgid ""
":class:`FirstHeaderLineIsContinuationDefect` -- The message had a "
"continuation line as its first header line."
msgstr ""

#: ../Doc/library/email.errors.rst:85
msgid ""
":class:`MisplacedEnvelopeHeaderDefect` - A \"Unix From\" header was found in "
"the middle of a header block."
msgstr ""

#: ../Doc/library/email.errors.rst:88
msgid ""
":class:`MalformedHeaderDefect` -- A header was found that was missing a "
"colon, or was otherwise malformed."
msgstr ""

#: ../Doc/library/email.errors.rst:91
msgid ""
":class:`MultipartInvariantViolationDefect` -- A message claimed to be a :"
"mimetype:`multipart`, but no subparts were found.  Note that when a message "
"has this defect, its :meth:`~email.message.Message.is_multipart` method may "
"return false even though its content type claims to be :mimetype:`multipart`."
msgstr ""
