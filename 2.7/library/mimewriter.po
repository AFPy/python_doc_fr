# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/mimewriter.rst:2
msgid ":mod:`MimeWriter` --- Generic MIME file writer"
msgstr ""

#: ../Doc/library/mimewriter.rst:11
msgid ""
"The :mod:`email` package should be used in preference to the :mod:"
"`MimeWriter` module.  This module is present only to maintain backward "
"compatibility."
msgstr ""

#: ../Doc/library/mimewriter.rst:15
msgid ""
"This module defines the class :class:`MimeWriter`.  The :class:`MimeWriter` "
"class implements a basic formatter for creating MIME multi-part files.  It "
"doesn't seek around the output file nor does it use large amounts of buffer "
"space. You must write the parts out in the order that they should occur in "
"the final file. :class:`MimeWriter` does buffer the headers you add, "
"allowing you to rearrange their order."
msgstr ""

#: ../Doc/library/mimewriter.rst:25
msgid ""
"Return a new instance of the :class:`MimeWriter` class.  The only argument "
"passed, *fp*, is a file object to be used for writing. Note that a :class:"
"`~StringIO.StringIO` object could also be used."
msgstr ""

#: ../Doc/library/mimewriter.rst:33
msgid "MimeWriter Objects"
msgstr ""

#: ../Doc/library/mimewriter.rst:35
msgid ":class:`MimeWriter` instances have the following methods:"
msgstr ""

#: ../Doc/library/mimewriter.rst:40
msgid ""
"Add a header line to the MIME message. The *key* is the name of the header, "
"where the *value* obviously provides the value of the header. The optional "
"argument *prefix* determines where the header  is inserted; ``0`` means "
"append at the end, ``1`` is insert at the start. The default is to append."
msgstr ""

#: ../Doc/library/mimewriter.rst:48
msgid ""
"Causes all headers accumulated so far to be written out (and forgotten). "
"This is useful if you don't need a body part at all, e.g. for a subpart of "
"type :mimetype:`message/rfc822` that's (mis)used to store some header-like "
"information."
msgstr ""

#: ../Doc/library/mimewriter.rst:56
msgid ""
"Returns a file-like object which can be used to write to the body of the "
"message.  The content-type is set to the provided *ctype*, and the optional "
"parameter *plist* provides additional parameters for the content-type "
"declaration. *prefix* functions as in :meth:`addheader` except that the "
"default is to insert at the start."
msgstr ""

#: ../Doc/library/mimewriter.rst:65
msgid ""
"Returns a file-like object which can be used to write to the body of the "
"message.  Additionally, this method initializes the multi-part code, where "
"*subtype* provides the multipart subtype, *boundary* may provide a user-"
"defined boundary specification, and *plist* provides optional parameters for "
"the subtype. *prefix* functions as in :meth:`startbody`.  Subparts should be "
"created using :meth:`nextpart`."
msgstr ""

#: ../Doc/library/mimewriter.rst:75
msgid ""
"Returns a new instance of :class:`MimeWriter` which represents an individual "
"part in a multipart message.  This may be used to write the  part as well as "
"used for creating recursively complex multipart messages. The message must "
"first be initialized with :meth:`startmultipartbody` before using :meth:"
"`nextpart`."
msgstr ""

#: ../Doc/library/mimewriter.rst:83
msgid ""
"This is used to designate the last part of a multipart message, and should "
"*always* be used when writing multipart messages."
msgstr ""
