# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/csv.rst:3
msgid ":mod:`csv` --- CSV File Reading and Writing"
msgstr ""

#: ../Doc/library/csv.rst:16
msgid ""
"The so-called CSV (Comma Separated Values) format is the most common import "
"and export format for spreadsheets and databases.  There is no \"CSV standard"
"\", so the format is operationally defined by the many applications which "
"read and write it.  The lack of a standard means that subtle differences "
"often exist in the data produced and consumed by different applications.  "
"These differences can make it annoying to process CSV files from multiple "
"sources.  Still, while the delimiters and quoting characters vary, the "
"overall format is similar enough that it is possible to write a single "
"module which can efficiently manipulate such data, hiding the details of "
"reading and writing the data from the programmer."
msgstr ""

#: ../Doc/library/csv.rst:27
msgid ""
"The :mod:`csv` module implements classes to read and write tabular data in "
"CSV format.  It allows programmers to say, \"write this data in the format "
"preferred by Excel,\" or \"read data from this file which was generated by "
"Excel,\" without knowing the precise details of the CSV format used by "
"Excel.  Programmers can also describe the CSV formats understood by other "
"applications or define their own special-purpose CSV formats."
msgstr ""

#: ../Doc/library/csv.rst:34
msgid ""
"The :mod:`csv` module's :class:`reader` and :class:`writer` objects read and "
"write sequences.  Programmers can also read and write data in dictionary "
"form using the :class:`DictReader` and :class:`DictWriter` classes."
msgstr ""

#: ../Doc/library/csv.rst:40
msgid ""
"This version of the :mod:`csv` module doesn't support Unicode input.  Also, "
"there are currently some issues regarding ASCII NUL characters.  "
"Accordingly, all input should be UTF-8 or printable ASCII to be safe; see "
"the examples in section :ref:`csv-examples`."
msgstr ""

#: ../Doc/library/csv.rst:48
msgid ":pep:`305` - CSV File API"
msgstr ""

#: ../Doc/library/csv.rst:49
msgid "The Python Enhancement Proposal which proposed this addition to Python."
msgstr ""

#: ../Doc/library/csv.rst:55
msgid "Module Contents"
msgstr ""

#: ../Doc/library/csv.rst:57
msgid "The :mod:`csv` module defines the following functions:"
msgstr ""

#: ../Doc/library/csv.rst:62
msgid ""
"Return a reader object which will iterate over lines in the given *csvfile*. "
"*csvfile* can be any object which supports the :term:`iterator` protocol and "
"returns a string each time its :meth:`!next` method is called --- file "
"objects and list objects are both suitable.   If *csvfile* is a file object, "
"it must be opened with the 'b' flag on platforms where that makes a "
"difference.  An optional *dialect* parameter can be given which is used to "
"define a set of parameters specific to a particular CSV dialect.  It may be "
"an instance of a subclass of the :class:`Dialect` class or one of the "
"strings returned by the :func:`list_dialects` function.  The other optional "
"*fmtparams* keyword arguments can be given to override individual formatting "
"parameters in the current dialect.  For full details about the dialect and "
"formatting parameters, see section :ref:`csv-fmt-params`."
msgstr ""

#: ../Doc/library/csv.rst:75
msgid ""
"Each row read from the csv file is returned as a list of strings.  No "
"automatic data type conversion is performed."
msgstr ""

#: ../Doc/library/csv.rst:78 ../Doc/library/csv.rst:118
#: ../Doc/library/csv.rst:184 ../Doc/library/csv.rst:218
msgid "A short usage example::"
msgstr ""

#: ../Doc/library/csv.rst:88
msgid ""
"The parser is now stricter with respect to multi-line quoted fields. "
"Previously, if a line ended within a quoted field without a terminating "
"newline character, a newline would be inserted into the returned field. This "
"behavior caused problems when reading files which contained carriage return "
"characters within fields. The behavior was changed to return the field "
"without inserting newlines. As a consequence, if newlines embedded within "
"fields are important, the input should be split into lines in a manner which "
"preserves the newline characters."
msgstr ""

#: ../Doc/library/csv.rst:100
msgid ""
"Return a writer object responsible for converting the user's data into "
"delimited strings on the given file-like object.  *csvfile* can be any "
"object with a :func:`write` method.  If *csvfile* is a file object, it must "
"be opened with the 'b' flag on platforms where that makes a difference.  An "
"optional *dialect* parameter can be given which is used to define a set of "
"parameters specific to a particular CSV dialect.  It may be an instance of a "
"subclass of the :class:`Dialect` class or one of the strings returned by "
"the :func:`list_dialects` function.  The other optional *fmtparams* keyword "
"arguments can be given to override individual formatting parameters in the "
"current dialect.  For full details about the dialect and formatting "
"parameters, see section :ref:`csv-fmt-params`. To make it as easy as "
"possible to interface with modules which implement the DB API, the value :"
"const:`None` is written as the empty string.  While this isn't a reversible "
"transformation, it makes it easier to dump SQL NULL data values to CSV files "
"without preprocessing the data returned from a ``cursor.fetch*`` call. "
"Floats are stringified with :func:`repr` before being written. All other non-"
"string data are stringified with :func:`str` before being written."
msgstr ""

#: ../Doc/library/csv.rst:130
msgid ""
"Associate *dialect* with *name*.  *name* must be a string or Unicode object. "
"The dialect can be specified either by passing a sub-class of :class:"
"`Dialect`, or by *fmtparams* keyword arguments, or both, with keyword "
"arguments overriding parameters of the dialect. For full details about the "
"dialect and formatting parameters, see section :ref:`csv-fmt-params`."
msgstr ""

#: ../Doc/library/csv.rst:139
msgid ""
"Delete the dialect associated with *name* from the dialect registry.  An :"
"exc:`Error` is raised if *name* is not a registered dialect name."
msgstr ""

#: ../Doc/library/csv.rst:145
msgid ""
"Return the dialect associated with *name*.  An :exc:`Error` is raised if "
"*name* is not a registered dialect name."
msgstr ""

#: ../Doc/library/csv.rst:148
msgid ""
"This function now returns an immutable :class:`Dialect`.  Previously an "
"instance of the requested dialect was returned.  Users could modify the "
"underlying class, changing the behavior of active readers and writers."
msgstr ""

#: ../Doc/library/csv.rst:155
msgid "Return the names of all registered dialects."
msgstr ""

#: ../Doc/library/csv.rst:160
msgid ""
"Returns the current maximum field size allowed by the parser. If *new_limit* "
"is given, this becomes the new limit."
msgstr ""

#: ../Doc/library/csv.rst:165
msgid "The :mod:`csv` module defines the following classes:"
msgstr ""

#: ../Doc/library/csv.rst:171
msgid ""
"Create an object which operates like a regular reader but maps the "
"information read into a dict whose keys are given by the optional "
"*fieldnames* parameter.  The *fieldnames* parameter is a :ref:`sequence "
"<collections-abstract-base-classes>` whose elements are associated with the "
"fields of the input data in order. These elements become the keys of the "
"resulting dictionary.  If the *fieldnames* parameter is omitted, the values "
"in the first row of the *csvfile* will be used as the fieldnames.  If the "
"row read has more fields than the fieldnames sequence, the remaining data is "
"added as a sequence keyed by the value of *restkey*.  If the row read has "
"fewer fields than the fieldnames sequence, the remaining keys take the value "
"of the optional *restval* parameter.  Any other optional or keyword "
"arguments are passed to the underlying :class:`reader` instance."
msgstr ""

#: ../Doc/library/csv.rst:200
msgid ""
"Create an object which operates like a regular writer but maps dictionaries "
"onto output rows.  The *fieldnames* parameter is a :ref:`sequence "
"<collections-abstract-base-classes>` of keys that identify the order in "
"which values in the dictionary passed to the :meth:`writerow` method are "
"written to the *csvfile*.  The optional *restval* parameter specifies the "
"value to be written if the dictionary is missing a key in *fieldnames*.  If "
"the dictionary passed to the :meth:`writerow` method contains a key not "
"found in *fieldnames*, the optional *extrasaction* parameter indicates what "
"action to take.  If it is set to ``'raise'`` a :exc:`ValueError` is raised. "
"If it is set to ``'ignore'``, extra values in the dictionary are ignored. "
"Any other optional or keyword arguments are passed to the underlying :class:"
"`writer` instance."
msgstr ""

#: ../Doc/library/csv.rst:213
msgid ""
"Note that unlike the :class:`DictReader` class, the *fieldnames* parameter "
"of the :class:`DictWriter` is not optional.  Since Python's :class:`dict` "
"objects are not ordered, there is not enough information available to deduce "
"the order in which the row should be written to the *csvfile*."
msgstr ""

#: ../Doc/library/csv.rst:234
msgid ""
"The :class:`Dialect` class is a container class relied on primarily for its "
"attributes, which are used to define the parameters for a specific :class:"
"`reader` or :class:`writer` instance."
msgstr ""

#: ../Doc/library/csv.rst:241
msgid ""
"The :class:`excel` class defines the usual properties of an Excel-generated "
"CSV file.  It is registered with the dialect name ``'excel'``."
msgstr ""

#: ../Doc/library/csv.rst:247
msgid ""
"The :class:`excel_tab` class defines the usual properties of an Excel-"
"generated TAB-delimited file.  It is registered with the dialect name "
"``'excel-tab'``."
msgstr ""

#: ../Doc/library/csv.rst:253
msgid "The :class:`Sniffer` class is used to deduce the format of a CSV file."
msgstr ""

#: ../Doc/library/csv.rst:255
msgid "The :class:`Sniffer` class provides two methods:"
msgstr ""

#: ../Doc/library/csv.rst:259
msgid ""
"Analyze the given *sample* and return a :class:`Dialect` subclass reflecting "
"the parameters found.  If the optional *delimiters* parameter is given, it "
"is interpreted as a string containing possible valid delimiter characters."
msgstr ""

#: ../Doc/library/csv.rst:267
msgid ""
"Analyze the sample text (presumed to be in CSV format) and return :const:"
"`True` if the first row appears to be a series of column headers."
msgstr ""

#: ../Doc/library/csv.rst:270
msgid "An example for :class:`Sniffer` use::"
msgstr ""

#: ../Doc/library/csv.rst:279
msgid "The :mod:`csv` module defines the following constants:"
msgstr ""

#: ../Doc/library/csv.rst:283
msgid "Instructs :class:`writer` objects to quote all fields."
msgstr ""

#: ../Doc/library/csv.rst:288
msgid ""
"Instructs :class:`writer` objects to only quote those fields which contain "
"special characters such as *delimiter*, *quotechar* or any of the characters "
"in *lineterminator*."
msgstr ""

#: ../Doc/library/csv.rst:295
msgid "Instructs :class:`writer` objects to quote all non-numeric fields."
msgstr ""

#: ../Doc/library/csv.rst:297
msgid "Instructs the reader to convert all non-quoted fields to type *float*."
msgstr ""

#: ../Doc/library/csv.rst:302
msgid ""
"Instructs :class:`writer` objects to never quote fields.  When the current "
"*delimiter* occurs in output data it is preceded by the current *escapechar* "
"character.  If *escapechar* is not set, the writer will raise :exc:`Error` "
"if any characters that require escaping are encountered."
msgstr ""

#: ../Doc/library/csv.rst:307
msgid ""
"Instructs :class:`reader` to perform no special processing of quote "
"characters."
msgstr ""

#: ../Doc/library/csv.rst:309
msgid "The :mod:`csv` module defines the following exception:"
msgstr ""

#: ../Doc/library/csv.rst:314
msgid "Raised by any of the functions when an error is detected."
msgstr ""

#: ../Doc/library/csv.rst:320
msgid "Dialects and Formatting Parameters"
msgstr ""

#: ../Doc/library/csv.rst:322
msgid ""
"To make it easier to specify the format of input and output records, "
"specific formatting parameters are grouped together into dialects.  A "
"dialect is a subclass of the :class:`Dialect` class having a set of specific "
"methods and a single :meth:`validate` method.  When creating :class:`reader` "
"or :class:`writer` objects, the programmer can specify a string or a "
"subclass of the :class:`Dialect` class as the dialect parameter.  In "
"addition to, or instead of, the *dialect* parameter, the programmer can also "
"specify individual formatting parameters, which have the same names as the "
"attributes defined below for the :class:`Dialect` class."
msgstr ""

#: ../Doc/library/csv.rst:332
msgid "Dialects support the following attributes:"
msgstr ""

#: ../Doc/library/csv.rst:337
msgid ""
"A one-character string used to separate fields.  It defaults to ``','``."
msgstr ""

#: ../Doc/library/csv.rst:342
msgid ""
"Controls how instances of *quotechar* appearing inside a field should "
"themselves be quoted.  When :const:`True`, the character is doubled. When :"
"const:`False`, the *escapechar* is used as a prefix to the *quotechar*.  It "
"defaults to :const:`True`."
msgstr ""

#: ../Doc/library/csv.rst:347
msgid ""
"On output, if *doublequote* is :const:`False` and no *escapechar* is set, :"
"exc:`Error` is raised if a *quotechar* is found in a field."
msgstr ""

#: ../Doc/library/csv.rst:353
msgid ""
"A one-character string used by the writer to escape the *delimiter* if "
"*quoting* is set to :const:`QUOTE_NONE` and the *quotechar* if *doublequote* "
"is :const:`False`. On reading, the *escapechar* removes any special meaning "
"from the following character. It defaults to :const:`None`, which disables "
"escaping."
msgstr ""

#: ../Doc/library/csv.rst:361
msgid ""
"The string used to terminate lines produced by the :class:`writer`. It "
"defaults to ``'\\r\\n'``."
msgstr ""

#: ../Doc/library/csv.rst:366
msgid ""
"The :class:`reader` is hard-coded to recognise either ``'\\r'`` or ``'\\n'`` "
"as end-of-line, and ignores *lineterminator*. This behavior may change in "
"the future."
msgstr ""

#: ../Doc/library/csv.rst:373
msgid ""
"A one-character string used to quote fields containing special characters, "
"such as the *delimiter* or *quotechar*, or which contain new-line "
"characters.  It defaults to ``'\"'``."
msgstr ""

#: ../Doc/library/csv.rst:380
msgid ""
"Controls when quotes should be generated by the writer and recognised by the "
"reader.  It can take on any of the :const:`QUOTE_\\*` constants (see "
"section :ref:`csv-contents`) and defaults to :const:`QUOTE_MINIMAL`."
msgstr ""

#: ../Doc/library/csv.rst:387
msgid ""
"When :const:`True`, whitespace immediately following the *delimiter* is "
"ignored. The default is :const:`False`."
msgstr ""

#: ../Doc/library/csv.rst:393
msgid ""
"When ``True``, raise exception :exc:`Error` on bad CSV input. The default is "
"``False``."
msgstr ""

#: ../Doc/library/csv.rst:397
msgid "Reader Objects"
msgstr ""

#: ../Doc/library/csv.rst:399
msgid ""
"Reader objects (:class:`DictReader` instances and objects returned by the :"
"func:`reader` function) have the following public methods:"
msgstr ""

#: ../Doc/library/csv.rst:405
msgid ""
"Return the next row of the reader's iterable object as a list, parsed "
"according to the current dialect."
msgstr ""

#: ../Doc/library/csv.rst:408
msgid "Reader objects have the following public attributes:"
msgstr ""

#: ../Doc/library/csv.rst:413
msgid "A read-only description of the dialect in use by the parser."
msgstr ""

#: ../Doc/library/csv.rst:418
msgid ""
"The number of lines read from the source iterator. This is not the same as "
"the number of records returned, as records can span multiple lines."
msgstr ""

#: ../Doc/library/csv.rst:424
msgid "DictReader objects have the following public attribute:"
msgstr ""

#: ../Doc/library/csv.rst:429
msgid ""
"If not passed as a parameter when creating the object, this attribute is "
"initialized upon first access or when the first record is read from the file."
msgstr ""

#: ../Doc/library/csv.rst:437
msgid "Writer Objects"
msgstr ""

#: ../Doc/library/csv.rst:439
msgid ""
":class:`Writer` objects (:class:`DictWriter` instances and objects returned "
"by the :func:`writer` function) have the following public methods.  A *row* "
"must be a sequence of strings or numbers for :class:`Writer` objects and a "
"dictionary mapping fieldnames to strings or numbers (by passing them "
"through :func:`str` first) for :class:`DictWriter` objects.  Note that "
"complex numbers are written out surrounded by parens. This may cause some "
"problems for other programs which read CSV files (assuming they support "
"complex numbers at all)."
msgstr ""

#: ../Doc/library/csv.rst:450
msgid ""
"Write the *row* parameter to the writer's file object, formatted according "
"to the current dialect."
msgstr ""

#: ../Doc/library/csv.rst:456
msgid ""
"Write all the *rows* parameters (a list of *row* objects as described above) "
"to the writer's file object, formatted according to the current dialect."
msgstr ""

#: ../Doc/library/csv.rst:459
msgid "Writer objects have the following public attribute:"
msgstr ""

#: ../Doc/library/csv.rst:464
msgid "A read-only description of the dialect in use by the writer."
msgstr ""

#: ../Doc/library/csv.rst:467
msgid "DictWriter objects have the following public method:"
msgstr ""

#: ../Doc/library/csv.rst:472
msgid "Write a row with the field names (as specified in the constructor)."
msgstr ""

#: ../Doc/library/csv.rst:480
msgid "Examples"
msgstr "Exemples"

#: ../Doc/library/csv.rst:482
msgid "The simplest example of reading a CSV file::"
msgstr ""

#: ../Doc/library/csv.rst:490
msgid "Reading a file with an alternate format::"
msgstr ""

#: ../Doc/library/csv.rst:498
msgid "The corresponding simplest possible writing example is::"
msgstr ""

#: ../Doc/library/csv.rst:505
msgid "Registering a new dialect::"
msgstr ""

#: ../Doc/library/csv.rst:512
msgid ""
"A slightly more advanced use of the reader --- catching and reporting "
"errors::"
msgstr ""

#: ../Doc/library/csv.rst:524
msgid ""
"And while the module doesn't directly support parsing strings, it can easily "
"be done::"
msgstr ""

#: ../Doc/library/csv.rst:531
msgid ""
"The :mod:`csv` module doesn't directly support reading and writing Unicode, "
"but it is 8-bit-clean save for some problems with ASCII NUL characters.  So "
"you can write functions or classes that handle the encoding and decoding for "
"you as long as you avoid encodings like UTF-16 that use NULs.  UTF-8 is "
"recommended."
msgstr ""

#: ../Doc/library/csv.rst:536
msgid ""
":func:`unicode_csv_reader` below is a :term:`generator` that wraps :class:"
"`csv.reader` to handle Unicode CSV data (a list of Unicode strings).  :func:"
"`utf_8_encoder` is a :term:`generator` that encodes the Unicode strings as "
"UTF-8, one string (or row) at a time.  The encoded strings are parsed by the "
"CSV reader, and :func:`unicode_csv_reader` decodes the UTF-8-encoded cells "
"back into Unicode::"
msgstr ""

#: ../Doc/library/csv.rst:556
msgid ""
"For all other encodings the following :class:`UnicodeReader` and :class:"
"`UnicodeWriter` classes can be used. They take an additional *encoding* "
"parameter in their constructor and make sure that the data passes the real "
"reader or writer encoded as UTF-8::"
msgstr ""
