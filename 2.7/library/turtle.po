# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/turtle.rst:3
msgid ":mod:`turtle` --- Turtle graphics for Tk"
msgstr ""

#: ../Doc/library/turtle.rst:15
msgid "Introduction"
msgstr "Introduction"

#: ../Doc/library/turtle.rst:17
msgid ""
"Turtle graphics is a popular way for introducing programming to kids.  It "
"was part of the original Logo programming language developed by Wally "
"Feurzig and Seymour Papert in 1966."
msgstr ""

#: ../Doc/library/turtle.rst:21
msgid ""
"Imagine a robotic turtle starting at (0, 0) in the x-y plane.  After an "
"``import turtle``, give it the command ``turtle.forward(15)``, and it moves "
"(on-screen!) 15 pixels in the direction it is facing, drawing a line as it "
"moves.  Give it the command ``turtle.right(25)``, and it rotates in-place 25 "
"degrees clockwise."
msgstr ""

#: ../Doc/library/turtle.rst:26
msgid ""
"By combining together these and similar commands, intricate shapes and "
"pictures can easily be drawn."
msgstr ""

#: ../Doc/library/turtle.rst:29
msgid ""
"The :mod:`turtle` module is an extended reimplementation of the same-named "
"module from the Python standard distribution up to version Python 2.5."
msgstr ""

#: ../Doc/library/turtle.rst:32
msgid ""
"It tries to keep the merits of the old turtle module and to be (nearly) 100% "
"compatible with it.  This means in the first place to enable the learning "
"programmer to use all the commands, classes and methods interactively when "
"using the module from within IDLE run with the ``-n`` switch."
msgstr ""

#: ../Doc/library/turtle.rst:37
msgid ""
"The turtle module provides turtle graphics primitives, in both object-"
"oriented and procedure-oriented ways.  Because it uses :mod:`Tkinter` for "
"the underlying graphics, it needs a version of Python installed with Tk "
"support."
msgstr ""

#: ../Doc/library/turtle.rst:41
msgid "The object-oriented interface uses essentially two+two classes:"
msgstr ""

#: ../Doc/library/turtle.rst:43
msgid ""
"The :class:`TurtleScreen` class defines graphics windows as a playground for "
"the drawing turtles.  Its constructor needs a :class:`Tkinter.Canvas` or a :"
"class:`ScrolledCanvas` as argument.  It should be used when :mod:`turtle` is "
"used as part of some application."
msgstr ""

#: ../Doc/library/turtle.rst:48
msgid ""
"The function :func:`Screen` returns a singleton object of a :class:"
"`TurtleScreen` subclass. This function should be used when :mod:`turtle` is "
"used as a standalone tool for doing graphics. As a singleton object, "
"inheriting from its class is not possible."
msgstr ""

#: ../Doc/library/turtle.rst:53
msgid ""
"All methods of TurtleScreen/Screen also exist as functions, i.e. as part of "
"the procedure-oriented interface."
msgstr ""

#: ../Doc/library/turtle.rst:56
msgid ""
":class:`RawTurtle` (alias: :class:`RawPen`) defines Turtle objects which "
"draw on a :class:`TurtleScreen`.  Its constructor needs a Canvas, "
"ScrolledCanvas or TurtleScreen as argument, so the RawTurtle objects know "
"where to draw."
msgstr ""

#: ../Doc/library/turtle.rst:60
msgid ""
"Derived from RawTurtle is the subclass :class:`Turtle` (alias: :class:"
"`Pen`), which draws on \"the\" :class:`Screen` - instance which is "
"automatically created, if not already present."
msgstr ""

#: ../Doc/library/turtle.rst:64
msgid ""
"All methods of RawTurtle/Turtle also exist as functions, i.e. part of the "
"procedure-oriented interface."
msgstr ""

#: ../Doc/library/turtle.rst:67
msgid ""
"The procedural interface provides functions which are derived from the "
"methods of the classes :class:`Screen` and :class:`Turtle`.  They have the "
"same names as the corresponding methods.  A screen object is automatically "
"created whenever a function derived from a Screen method is called.  An "
"(unnamed) turtle object is automatically created whenever any of the "
"functions derived from a Turtle method is called."
msgstr ""

#: ../Doc/library/turtle.rst:74
msgid ""
"To use multiple turtles an a screen one has to use the object-oriented "
"interface."
msgstr ""

#: ../Doc/library/turtle.rst:77
msgid ""
"In the following documentation the argument list for functions is given. "
"Methods, of course, have the additional first argument *self* which is "
"omitted here."
msgstr ""

#: ../Doc/library/turtle.rst:83
msgid "Overview over available Turtle and Screen methods"
msgstr ""

#: ../Doc/library/turtle.rst:86
msgid "Turtle methods"
msgstr ""

#: ../Doc/library/turtle.rst:117 ../Doc/library/turtle.rst:222
msgid "Turtle motion"
msgstr ""

#: ../Doc/library/turtle.rst:105
msgid "Move and draw"
msgstr ""

#: ../Doc/library/turtle.rst:0
msgid ":func:`forward` | :func:`fd`"
msgstr ":func:`forward` | :func:`fd`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`backward` | :func:`bk` | :func:`back`"
msgstr ":func:`backward` | :func:`bk` | :func:`back`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`right` | :func:`rt`"
msgstr ":func:`right` | :func:`rt`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`left` | :func:`lt`"
msgstr ":func:`left` | :func:`lt`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`goto` | :func:`setpos` | :func:`setposition`"
msgstr ":func:`goto` | :func:`setpos` | :func:`setposition`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`setx`"
msgstr ":func:`setx`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`sety`"
msgstr ":func:`sety`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`setheading` | :func:`seth`"
msgstr ":func:`setheading` | :func:`seth`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`home`"
msgstr ":func:`home`"

#: ../Doc/library/turtle.rst:0 ../Doc/library/turtle.rst:2222
msgid ":func:`circle`"
msgstr ":func:`circle`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`dot`"
msgstr ":func:`dot`"

#: ../Doc/library/turtle.rst:0 ../Doc/library/turtle.rst:2210
msgid ":func:`stamp`"
msgstr ":func:`stamp`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`clearstamp`"
msgstr ":func:`clearstamp`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`clearstamps`"
msgstr ":func:`clearstamps`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`undo`"
msgstr ":func:`undo`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`speed`"
msgstr ":func:`speed`"

#: ../Doc/library/turtle.rst:113 ../Doc/library/turtle.rst:603
msgid "Tell Turtle's state"
msgstr ""

#: ../Doc/library/turtle.rst:0
msgid ":func:`position` | :func:`pos`"
msgstr ":func:`position` | :func:`pos`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`towards`"
msgstr ":func:`towards`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`xcor`"
msgstr ":func:`xcor`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`ycor`"
msgstr ":func:`ycor`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`heading`"
msgstr ":func:`heading`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`distance`"
msgstr ":func:`distance`"

#: ../Doc/library/turtle.rst:117
msgid "Setting and measurement"
msgstr ""

#: ../Doc/library/turtle.rst:0
msgid ":func:`degrees`"
msgstr ":func:`degrees`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`radians`"
msgstr ":func:`radians`"

#: ../Doc/library/turtle.rst:140 ../Doc/library/turtle.rst:745
msgid "Pen control"
msgstr ""

#: ../Doc/library/turtle.rst:125 ../Doc/library/turtle.rst:748
msgid "Drawing state"
msgstr ""

#: ../Doc/library/turtle.rst:0
msgid ":func:`pendown` | :func:`pd` | :func:`down`"
msgstr ":func:`pendown` | :func:`pd` | :func:`down`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`penup` | :func:`pu` | :func:`up`"
msgstr ":func:`penup` | :func:`pu` | :func:`up`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`pensize` | :func:`width`"
msgstr ":func:`pensize` | :func:`width`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`pen`"
msgstr ":func:`pen`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`isdown`"
msgstr ":func:`isdown`"

#: ../Doc/library/turtle.rst:130 ../Doc/library/turtle.rst:841
msgid "Color control"
msgstr ""

#: ../Doc/library/turtle.rst:0
msgid ":func:`color`"
msgstr ":func:`color`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`pencolor`"
msgstr ":func:`pencolor`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`fillcolor`"
msgstr ":func:`fillcolor`"

#: ../Doc/library/turtle.rst:135 ../Doc/library/turtle.rst:971
msgid "Filling"
msgstr ""

#: ../Doc/library/turtle.rst:0
msgid ":func:`fill`"
msgstr ""

#: ../Doc/library/turtle.rst:0
msgid ":func:`begin_fill`"
msgstr ":func:`begin_fill`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`end_fill`"
msgstr ":func:`end_fill`"

#: ../Doc/library/turtle.rst:140 ../Doc/library/turtle.rst:1015
msgid "More drawing control"
msgstr ""

#: ../Doc/library/turtle.rst:0
msgid ":func:`reset`"
msgstr ":func:`reset`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`clear`"
msgstr ":func:`clear`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`write`"
msgstr ":func:`write`"

#: ../Doc/library/turtle.rst:154 ../Doc/library/turtle.rst:1060
msgid "Turtle state"
msgstr ""

#: ../Doc/library/turtle.rst:146 ../Doc/library/turtle.rst:1063
msgid "Visibility"
msgstr ""

#: ../Doc/library/turtle.rst:0
msgid ":func:`showturtle` | :func:`st`"
msgstr ":func:`showturtle` | :func:`st`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`hideturtle` | :func:`ht`"
msgstr ":func:`hideturtle` | :func:`ht`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`isvisible`"
msgstr ":func:`isvisible`"

#: ../Doc/library/turtle.rst:154 ../Doc/library/turtle.rst:1100
msgid "Appearance"
msgstr ""

#: ../Doc/library/turtle.rst:0
msgid ":func:`shape`"
msgstr ":func:`shape`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`resizemode`"
msgstr ":func:`resizemode`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`shapesize` | :func:`turtlesize`"
msgstr ":func:`shapesize` | :func:`turtlesize`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`settiltangle`"
msgstr ":func:`settiltangle`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`tiltangle`"
msgstr ":func:`tiltangle`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`tilt`"
msgstr ":func:`tilt`"

#: ../Doc/library/turtle.rst:160 ../Doc/library/turtle.rst:1226
msgid "Using events"
msgstr ""

#: ../Doc/library/turtle.rst:0 ../Doc/library/turtle.rst:2204
msgid ":func:`onclick`"
msgstr ":func:`onclick`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`onrelease`"
msgstr ":func:`onrelease`"

#: ../Doc/library/turtle.rst:0 ../Doc/library/turtle.rst:2193
msgid ":func:`ondrag`"
msgstr ":func:`ondrag`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`mainloop` | :func:`done`"
msgstr ":func:`mainloop` | :func:`done`"

#: ../Doc/library/turtle.rst:174 ../Doc/library/turtle.rst:1305
msgid "Special Turtle methods"
msgstr ""

#: ../Doc/library/turtle.rst:0
msgid ":func:`begin_poly`"
msgstr ":func:`begin_poly`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`end_poly`"
msgstr ":func:`end_poly`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`get_poly`"
msgstr ":func:`get_poly`"

#: ../Doc/library/turtle.rst:0 ../Doc/library/turtle.rst:2216
msgid ":func:`clone`"
msgstr ":func:`clone`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`getturtle` | :func:`getpen`"
msgstr ":func:`getturtle` | :func:`getpen`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`getscreen`"
msgstr ":func:`getscreen`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`setundobuffer`"
msgstr ":func:`setundobuffer`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`undobufferentries`"
msgstr ":func:`undobufferentries`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`tracer`"
msgstr ":func:`tracer`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`window_width`"
msgstr ":func:`window_width`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`window_height`"
msgstr ":func:`window_height`"

#: ../Doc/library/turtle.rst:177
msgid "Methods of TurtleScreen/Screen"
msgstr ""

#: ../Doc/library/turtle.rst:185 ../Doc/library/turtle.rst:1464
msgid "Window control"
msgstr ""

#: ../Doc/library/turtle.rst:0
msgid ":func:`bgcolor`"
msgstr ":func:`bgcolor`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`bgpic`"
msgstr ":func:`bgpic`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`clear` | :func:`clearscreen`"
msgstr ":func:`clear` | :func:`clearscreen`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`reset` | :func:`resetscreen`"
msgstr ":func:`reset` | :func:`resetscreen`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`screensize`"
msgstr ":func:`screensize`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`setworldcoordinates`"
msgstr ":func:`setworldcoordinates`"

#: ../Doc/library/turtle.rst:190 ../Doc/library/turtle.rst:1578
msgid "Animation control"
msgstr ""

#: ../Doc/library/turtle.rst:0
msgid ":func:`delay`"
msgstr ":func:`delay`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`update`"
msgstr ":func:`update`"

#: ../Doc/library/turtle.rst:196 ../Doc/library/turtle.rst:1627
msgid "Using screen events"
msgstr ""

#: ../Doc/library/turtle.rst:0
msgid ":func:`listen`"
msgstr ":func:`listen`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`onkey`"
msgstr ""

#: ../Doc/library/turtle.rst:0
msgid ":func:`onclick` | :func:`onscreenclick`"
msgstr ":func:`onclick` | :func:`onscreenclick`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`ontimer`"
msgstr ":func:`ontimer`"

#: ../Doc/library/turtle.rst:206 ../Doc/library/turtle.rst:1701
msgid "Settings and special methods"
msgstr ""

#: ../Doc/library/turtle.rst:0
msgid ":func:`mode`"
msgstr ""

#: ../Doc/library/turtle.rst:0
msgid ":func:`colormode`"
msgstr ":func:`colormode`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`getcanvas`"
msgstr ":func:`getcanvas`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`getshapes`"
msgstr ":func:`getshapes`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`register_shape` | :func:`addshape`"
msgstr ":func:`register_shape` | :func:`addshape`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`turtles`"
msgstr ":func:`turtles`"

#: ../Doc/library/turtle.rst:213
msgid "Methods specific to Screen"
msgstr ""

#: ../Doc/library/turtle.rst:0
msgid ":func:`bye`"
msgstr ":func:`bye`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`exitonclick`"
msgstr ":func:`exitonclick`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`setup`"
msgstr ":func:`setup`"

#: ../Doc/library/turtle.rst:0
msgid ":func:`title`"
msgstr ":func:`title`"

#: ../Doc/library/turtle.rst:216
msgid "Methods of RawTurtle/Turtle and corresponding functions"
msgstr ""

#: ../Doc/library/turtle.rst:218
msgid ""
"Most of the examples in this section refer to a Turtle instance called "
"``turtle``."
msgstr ""

#: ../Doc/library/turtle.rst:227 ../Doc/library/turtle.rst:270
#: ../Doc/library/turtle.rst:293 ../Doc/library/turtle.rst:349
#: ../Doc/library/turtle.rst:370 ../Doc/library/turtle.rst:391
msgid "a number (integer or float)"
msgstr ""

#: ../Doc/library/turtle.rst:229
msgid ""
"Move the turtle forward by the specified *distance*, in the direction the "
"turtle is headed."
msgstr ""

#: ../Doc/library/turtle.rst:248 ../Doc/library/turtle.rst:438
#: ../Doc/library/turtle.rst:701 ../Doc/library/turtle.rst:1175
#: ../Doc/library/turtle.rst:1193
msgid "a number"
msgstr ""

#: ../Doc/library/turtle.rst:250
msgid ""
"Move the turtle backward by *distance*, opposite to the direction the turtle "
"is headed.  Do not change the turtle's heading."
msgstr ""

#: ../Doc/library/turtle.rst:272
msgid ""
"Turn turtle right by *angle* units.  (Units are by default degrees, but can "
"be set via the :func:`degrees` and :func:`radians` functions.)  Angle "
"orientation depends on the turtle mode, see :func:`mode`."
msgstr ""

#: ../Doc/library/turtle.rst:295
msgid ""
"Turn turtle left by *angle* units.  (Units are by default degrees, but can "
"be set via the :func:`degrees` and :func:`radians` functions.)  Angle "
"orientation depends on the turtle mode, see :func:`mode`."
msgstr ""

#: ../Doc/library/turtle.rst:317
msgid "a number or a pair/vector of numbers"
msgstr ""

#: ../Doc/library/turtle.rst:318
msgid "a number or ``None``"
msgstr ""

#: ../Doc/library/turtle.rst:320
msgid ""
"If *y* is ``None``, *x* must be a pair of coordinates or a :class:`Vec2D` (e."
"g. as returned by :func:`pos`)."
msgstr ""

#: ../Doc/library/turtle.rst:323
msgid ""
"Move turtle to an absolute position.  If the pen is down, draw line.  Do not "
"change the turtle's orientation."
msgstr ""

#: ../Doc/library/turtle.rst:351
msgid ""
"Set the turtle's first coordinate to *x*, leave second coordinate unchanged."
msgstr ""

#: ../Doc/library/turtle.rst:372
msgid ""
"Set the turtle's second coordinate to *y*, leave first coordinate unchanged."
msgstr ""

#: ../Doc/library/turtle.rst:393
msgid ""
"Set the orientation of the turtle to *to_angle*.  Here are some common "
"directions in degrees:"
msgstr ""

#: ../Doc/library/turtle.rst:397
msgid "standard mode"
msgstr ""

#: ../Doc/library/turtle.rst:397
msgid "logo mode"
msgstr ""

#: ../Doc/library/turtle.rst:399
msgid "0 - east"
msgstr ""

#: ../Doc/library/turtle.rst:399
msgid "0 - north"
msgstr ""

#: ../Doc/library/turtle.rst:400
msgid "90 - north"
msgstr ""

#: ../Doc/library/turtle.rst:400
msgid "90 - east"
msgstr ""

#: ../Doc/library/turtle.rst:401
msgid "180 - west"
msgstr ""

#: ../Doc/library/turtle.rst:401
msgid "180 - south"
msgstr ""

#: ../Doc/library/turtle.rst:402
msgid "270 - south"
msgstr ""

#: ../Doc/library/turtle.rst:402
msgid "270 - west"
msgstr ""

#: ../Doc/library/turtle.rst:414
msgid ""
"Move turtle to the origin -- coordinates (0,0) -- and set its heading to its "
"start-orientation (which depends on the mode, see :func:`mode`)."
msgstr ""

#: ../Doc/library/turtle.rst:439
msgid "a number (or ``None``)"
msgstr ""

#: ../Doc/library/turtle.rst:440 ../Doc/library/turtle.rst:530
msgid "an integer (or ``None``)"
msgstr ""

#: ../Doc/library/turtle.rst:442
msgid ""
"Draw a circle with given *radius*.  The center is *radius* units left of the "
"turtle; *extent* -- an angle -- determines which part of the circle is "
"drawn.  If *extent* is not given, draw the entire circle.  If *extent* is "
"not a full circle, one endpoint of the arc is the current pen position.  "
"Draw the arc in counterclockwise direction if *radius* is positive, "
"otherwise in clockwise direction.  Finally the direction of the turtle is "
"changed by the amount of *extent*."
msgstr ""

#: ../Doc/library/turtle.rst:450
msgid ""
"As the circle is approximated by an inscribed regular polygon, *steps* "
"determines the number of steps to use.  If not given, it will be calculated "
"automatically.  May be used to draw regular polygons."
msgstr ""

#: ../Doc/library/turtle.rst:475
msgid "an integer >= 1 (if given)"
msgstr ""

#: ../Doc/library/turtle.rst:476
msgid "a colorstring or a numeric color tuple"
msgstr ""

#: ../Doc/library/turtle.rst:478
msgid ""
"Draw a circular dot with diameter *size*, using *color*.  If *size* is not "
"given, the maximum of pensize+4 and 2*pensize is used."
msgstr ""

#: ../Doc/library/turtle.rst:495
msgid ""
"Stamp a copy of the turtle shape onto the canvas at the current turtle "
"position.  Return a stamp_id for that stamp, which can be used to delete it "
"by calling ``clearstamp(stamp_id)``."
msgstr ""

#: ../Doc/library/turtle.rst:509
msgid "an integer, must be return value of previous :func:`stamp` call"
msgstr ""

#: ../Doc/library/turtle.rst:512
msgid "Delete stamp with given *stampid*."
msgstr ""

#: ../Doc/library/turtle.rst:532
msgid ""
"Delete all or first/last *n* of turtle's stamps.  If *n* is ``None``, delete "
"all stamps, if *n* > 0 delete first *n* stamps, else if *n* < 0 delete last "
"*n* stamps."
msgstr ""

#: ../Doc/library/turtle.rst:555
msgid ""
"Undo (repeatedly) the last turtle action(s).  Number of available undo "
"actions is determined by the size of the undobuffer."
msgstr ""

#: ../Doc/library/turtle.rst:569
msgid "an integer in the range 0..10 or a speedstring (see below)"
msgstr ""

#: ../Doc/library/turtle.rst:571
msgid ""
"Set the turtle's speed to an integer value in the range 0..10.  If no "
"argument is given, return current speed."
msgstr ""

#: ../Doc/library/turtle.rst:574
msgid ""
"If input is a number greater than 10 or smaller than 0.5, speed is set to "
"0.  Speedstrings are mapped to speedvalues as follows:"
msgstr ""

#: ../Doc/library/turtle.rst:577
msgid "\"fastest\":  0"
msgstr ""

#: ../Doc/library/turtle.rst:578
msgid "\"fast\":  10"
msgstr ""

#: ../Doc/library/turtle.rst:579
msgid "\"normal\":  6"
msgstr ""

#: ../Doc/library/turtle.rst:580
msgid "\"slow\":  3"
msgstr ""

#: ../Doc/library/turtle.rst:581
msgid "\"slowest\":  1"
msgstr ""

#: ../Doc/library/turtle.rst:583
msgid ""
"Speeds from 1 to 10 enforce increasingly faster animation of line drawing "
"and turtle turning."
msgstr ""

#: ../Doc/library/turtle.rst:586
msgid ""
"Attention: *speed* = 0 means that *no* animation takes place. forward/back "
"makes turtle jump and likewise left/right make the turtle turn instantly."
msgstr ""

#: ../Doc/library/turtle.rst:608
msgid ""
"Return the turtle's current location (x,y) (as a :class:`Vec2D` vector)."
msgstr ""

#: ../Doc/library/turtle.rst:618 ../Doc/library/turtle.rst:677
msgid "a number or a pair/vector of numbers or a turtle instance"
msgstr ""

#: ../Doc/library/turtle.rst:619 ../Doc/library/turtle.rst:678
msgid "a number if *x* is a number, else ``None``"
msgstr ""

#: ../Doc/library/turtle.rst:621
msgid ""
"Return the angle between the line from turtle position to position specified "
"by (x,y), the vector or the other turtle.  This depends on the turtle's "
"start orientation which depends on the mode - \"standard\"/\"world\" or "
"\"logo\")."
msgstr ""

#: ../Doc/library/turtle.rst:634
msgid "Return the turtle's x coordinate."
msgstr ""

#: ../Doc/library/turtle.rst:649
msgid "Return the turtle's y coordinate."
msgstr ""

#: ../Doc/library/turtle.rst:664
msgid ""
"Return the turtle's current heading (value depends on the turtle mode, see :"
"func:`mode`)."
msgstr ""

#: ../Doc/library/turtle.rst:680
msgid ""
"Return the distance from the turtle to (x,y), the given vector, or the given "
"other turtle, in turtle step units."
msgstr ""

#: ../Doc/library/turtle.rst:697
msgid "Settings for measurement"
msgstr ""

#: ../Doc/library/turtle.rst:703
msgid ""
"Set angle measurement units, i.e. set number of \"degrees\" for a full "
"circle. Default value is 360 degrees."
msgstr ""

#: ../Doc/library/turtle.rst:725
msgid ""
"Set the angle measurement units to radians.  Equivalent to ``degrees(2*math."
"pi)``."
msgstr ""

#: ../Doc/library/turtle.rst:754
msgid "Pull the pen down -- drawing when moving."
msgstr ""

#: ../Doc/library/turtle.rst:761
msgid "Pull the pen up -- no drawing when moving."
msgstr ""

#: ../Doc/library/turtle.rst:767
msgid "a positive number"
msgstr ""

#: ../Doc/library/turtle.rst:769
msgid ""
"Set the line thickness to *width* or return it.  If resizemode is set to "
"\"auto\" and turtleshape is a polygon, that polygon is drawn with the same "
"line thickness.  If no argument is given, the current pensize is returned."
msgstr ""

#: ../Doc/library/turtle.rst:782
msgid "a dictionary with some or all of the below listed keys"
msgstr ""

#: ../Doc/library/turtle.rst:783
msgid "one or more keyword-arguments with the below listed keys as keywords"
msgstr ""

#: ../Doc/library/turtle.rst:785
msgid ""
"Return or set the pen's attributes in a \"pen-dictionary\" with the "
"following key/value pairs:"
msgstr ""

#: ../Doc/library/turtle.rst:788
msgid "\"shown\": True/False"
msgstr ""

#: ../Doc/library/turtle.rst:789
msgid "\"pendown\": True/False"
msgstr ""

#: ../Doc/library/turtle.rst:790
msgid "\"pencolor\": color-string or color-tuple"
msgstr ""

#: ../Doc/library/turtle.rst:791
msgid "\"fillcolor\": color-string or color-tuple"
msgstr ""

#: ../Doc/library/turtle.rst:792
msgid "\"pensize\": positive number"
msgstr ""

#: ../Doc/library/turtle.rst:793
msgid "\"speed\": number in range 0..10"
msgstr ""

#: ../Doc/library/turtle.rst:794
msgid "\"resizemode\": \"auto\" or \"user\" or \"noresize\""
msgstr ""

#: ../Doc/library/turtle.rst:795
msgid "\"stretchfactor\": (positive number, positive number)"
msgstr ""

#: ../Doc/library/turtle.rst:796
msgid "\"outline\": positive number"
msgstr ""

#: ../Doc/library/turtle.rst:797
msgid "\"tilt\": number"
msgstr ""

#: ../Doc/library/turtle.rst:799
msgid ""
"This dictionary can be used as argument for a subsequent call to :func:`pen` "
"to restore the former pen-state.  Moreover one or more of these attributes "
"can be provided as keyword-arguments.  This can be used to set several pen "
"attributes in one statement."
msgstr ""

#: ../Doc/library/turtle.rst:828
msgid "Return ``True`` if pen is down, ``False`` if it's up."
msgstr ""

#: ../Doc/library/turtle.rst:845
msgid "Return or set the pencolor."
msgstr ""

#: ../Doc/library/turtle.rst:847 ../Doc/library/turtle.rst:895
msgid "Four input formats are allowed:"
msgstr ""

#: ../Doc/library/turtle.rst:852
msgid "``pencolor()``"
msgstr "``pencolor()``"

#: ../Doc/library/turtle.rst:850
msgid ""
"Return the current pencolor as color specification string or as a tuple (see "
"example).  May be used as input to another color/pencolor/fillcolor call."
msgstr ""

#: ../Doc/library/turtle.rst:856
msgid "``pencolor(colorstring)``"
msgstr "``pencolor(colorstring)``"

#: ../Doc/library/turtle.rst:855
msgid ""
"Set pencolor to *colorstring*, which is a Tk color specification string, "
"such as ``\"red\"``, ``\"yellow\"``, or ``\"#33cc8c\"``."
msgstr ""

#: ../Doc/library/turtle.rst:861
msgid "``pencolor((r, g, b))``"
msgstr "``pencolor((r, g, b))``"

#: ../Doc/library/turtle.rst:859
msgid ""
"Set pencolor to the RGB color represented by the tuple of *r*, *g*, and "
"*b*.  Each of *r*, *g*, and *b* must be in the range 0..colormode, where "
"colormode is either 1.0 or 255 (see :func:`colormode`)."
msgstr ""

#: ../Doc/library/turtle.rst:868
msgid "``pencolor(r, g, b)``"
msgstr "``pencolor(r, g, b)``"

#: ../Doc/library/turtle.rst:864
msgid ""
"Set pencolor to the RGB color represented by *r*, *g*, and *b*.  Each of "
"*r*, *g*, and *b* must be in the range 0..colormode."
msgstr ""

#: ../Doc/library/turtle.rst:867
msgid ""
"If turtleshape is a polygon, the outline of that polygon is drawn with the "
"newly set pencolor."
msgstr ""

#: ../Doc/library/turtle.rst:893
msgid "Return or set the fillcolor."
msgstr ""

#: ../Doc/library/turtle.rst:900
msgid "``fillcolor()``"
msgstr "``fillcolor()``"

#: ../Doc/library/turtle.rst:898
msgid ""
"Return the current fillcolor as color specification string, possibly in "
"tuple format (see example).  May be used as input to another color/pencolor/"
"fillcolor call."
msgstr ""

#: ../Doc/library/turtle.rst:904
msgid "``fillcolor(colorstring)``"
msgstr "``fillcolor(colorstring)``"

#: ../Doc/library/turtle.rst:903
msgid ""
"Set fillcolor to *colorstring*, which is a Tk color specification string, "
"such as ``\"red\"``, ``\"yellow\"``, or ``\"#33cc8c\"``."
msgstr ""

#: ../Doc/library/turtle.rst:909
msgid "``fillcolor((r, g, b))``"
msgstr "``fillcolor((r, g, b))``"

#: ../Doc/library/turtle.rst:907
msgid ""
"Set fillcolor to the RGB color represented by the tuple of *r*, *g*, and "
"*b*.  Each of *r*, *g*, and *b* must be in the range 0..colormode, where "
"colormode is either 1.0 or 255 (see :func:`colormode`)."
msgstr ""

#: ../Doc/library/turtle.rst:916
msgid "``fillcolor(r, g, b)``"
msgstr "``fillcolor(r, g, b)``"

#: ../Doc/library/turtle.rst:912
msgid ""
"Set fillcolor to the RGB color represented by *r*, *g*, and *b*.  Each of "
"*r*, *g*, and *b* must be in the range 0..colormode."
msgstr ""

#: ../Doc/library/turtle.rst:915
msgid ""
"If turtleshape is a polygon, the interior of that polygon is drawn with the "
"newly set fillcolor."
msgstr ""

#: ../Doc/library/turtle.rst:936
msgid "Return or set pencolor and fillcolor."
msgstr ""

#: ../Doc/library/turtle.rst:938
msgid ""
"Several input formats are allowed.  They use 0 to 3 arguments as follows:"
msgstr ""

#: ../Doc/library/turtle.rst:944
msgid "``color()``"
msgstr "``color()``"

#: ../Doc/library/turtle.rst:942
msgid ""
"Return the current pencolor and the current fillcolor as a pair of color "
"specification strings or tuples as returned by :func:`pencolor` and :func:"
"`fillcolor`."
msgstr ""

#: ../Doc/library/turtle.rst:948
msgid "``color(colorstring)``, ``color((r,g,b))``, ``color(r,g,b)``"
msgstr ""

#: ../Doc/library/turtle.rst:947
msgid ""
"Inputs as in :func:`pencolor`, set both, fillcolor and pencolor, to the "
"given value."
msgstr ""

#: ../Doc/library/turtle.rst:955
msgid ""
"``color(colorstring1, colorstring2)``, ``color((r1,g1,b1), (r2,g2,b2))``"
msgstr ""

#: ../Doc/library/turtle.rst:951
msgid ""
"Equivalent to ``pencolor(colorstring1)`` and ``fillcolor(colorstring2)`` and "
"analogously if the other input format is used."
msgstr ""

#: ../Doc/library/turtle.rst:954
msgid ""
"If turtleshape is a polygon, outline and interior of that polygon is drawn "
"with the newly set colors."
msgstr ""

#: ../Doc/library/turtle.rst:967
msgid "See also: Screen method :func:`colormode`."
msgstr ""

#: ../Doc/library/turtle.rst:980
msgid "True/False (or 1/0 respectively)"
msgstr ""

#: ../Doc/library/turtle.rst:982
msgid ""
"Call ``fill(True)`` before drawing the shape you want to fill, and "
"``fill(False)`` when done.  When used without argument: return fillstate "
"(``True`` if filling, ``False`` else)."
msgstr ""

#: ../Doc/library/turtle.rst:998
msgid ""
"Call just before drawing a shape to be filled.  Equivalent to ``fill(True)``."
msgstr ""

#: ../Doc/library/turtle.rst:1003
msgid ""
"Fill the shape drawn after the last call to :func:`begin_fill`.  Equivalent "
"to ``fill(False)``."
msgstr ""

#: ../Doc/library/turtle.rst:1019
msgid ""
"Delete the turtle's drawings from the screen, re-center the turtle and set "
"variables to the default values."
msgstr ""

#: ../Doc/library/turtle.rst:1039
msgid ""
"Delete the turtle's drawings from the screen.  Do not move turtle.  State "
"and position of the turtle as well as drawings of other turtles are not "
"affected."
msgstr ""

#: ../Doc/library/turtle.rst:1045
msgid "object to be written to the TurtleScreen"
msgstr ""

#: ../Doc/library/turtle.rst:1046
msgid "True/False"
msgstr ""

#: ../Doc/library/turtle.rst:1047
msgid "one of the strings \"left\", \"center\" or right\""
msgstr ""

#: ../Doc/library/turtle.rst:1048
msgid "a triple (fontname, fontsize, fonttype)"
msgstr ""

#: ../Doc/library/turtle.rst:1050
msgid ""
"Write text - the string representation of *arg* - at the current turtle "
"position according to *align* (\"left\", \"center\" or right\") and with the "
"given font.  If *move* is true, the pen is moved to the bottom-right corner "
"of the text.  By default, *move* is ``False``."
msgstr ""

#: ../Doc/library/turtle.rst:1068
msgid ""
"Make the turtle invisible.  It's a good idea to do this while you're in the "
"middle of doing some complex drawing, because hiding the turtle speeds up "
"the drawing observably."
msgstr ""

#: ../Doc/library/turtle.rst:1080
msgid "Make the turtle visible."
msgstr ""

#: ../Doc/library/turtle.rst:1089
msgid "Return ``True`` if the Turtle is shown, ``False`` if it's hidden."
msgstr ""

#: ../Doc/library/turtle.rst:1104
msgid "a string which is a valid shapename"
msgstr ""

#: ../Doc/library/turtle.rst:1106
msgid ""
"Set turtle shape to shape with given *name* or, if name is not given, return "
"name of current shape.  Shape with *name* must exist in the TurtleScreen's "
"shape dictionary.  Initially there are the following polygon shapes: \"arrow"
"\", \"turtle\", \"circle\", \"square\", \"triangle\", \"classic\".  To learn "
"about how to deal with shapes see Screen method :func:`register_shape`."
msgstr ""

#: ../Doc/library/turtle.rst:1123
msgid "one of the strings \"auto\", \"user\", \"noresize\""
msgstr ""

#: ../Doc/library/turtle.rst:1125
msgid ""
"Set resizemode to one of the values: \"auto\", \"user\", \"noresize\".  If "
"*rmode* is not given, return current resizemode.  Different resizemodes have "
"the following effects:"
msgstr ""

#: ../Doc/library/turtle.rst:1129
msgid ""
"\"auto\": adapts the appearance of the turtle corresponding to the value of "
"pensize."
msgstr ""

#: ../Doc/library/turtle.rst:1130
msgid ""
"\"user\": adapts the appearance of the turtle according to the values of "
"stretchfactor and outlinewidth (outline), which are set by :func:`shapesize`."
msgstr ""

#: ../Doc/library/turtle.rst:1133
msgid "\"noresize\": no adaption of the turtle's appearance takes place."
msgstr ""

#: ../Doc/library/turtle.rst:1135
msgid ""
"resizemode(\"user\") is called by :func:`shapesize` when used with arguments."
msgstr ""

#: ../Doc/library/turtle.rst:1149 ../Doc/library/turtle.rst:1150
#: ../Doc/library/turtle.rst:1151
msgid "positive number"
msgstr ""

#: ../Doc/library/turtle.rst:1153
msgid ""
"Return or set the pen's attributes x/y-stretchfactors and/or outline.  Set "
"resizemode to \"user\".  If and only if resizemode is set to \"user\", the "
"turtle will be displayed stretched according to its stretchfactors: "
"*stretch_wid* is stretchfactor perpendicular to its orientation, "
"*stretch_len* is stretchfactor in direction of its orientation, *outline* "
"determines the width of the shapes's outline."
msgstr ""

#: ../Doc/library/turtle.rst:1177
msgid ""
"Rotate the turtleshape by *angle* from its current tilt-angle, but do *not* "
"change the turtle's heading (direction of movement)."
msgstr ""

#: ../Doc/library/turtle.rst:1195
msgid ""
"Rotate the turtleshape to point in the direction specified by *angle*, "
"regardless of its current tilt-angle.  *Do not* change the turtle's heading "
"(direction of movement)."
msgstr ""

#: ../Doc/library/turtle.rst:1212
msgid ""
"Return the current tilt-angle, i.e. the angle between the orientation of the "
"turtleshape and the heading of the turtle (its direction of movement)."
msgstr ""

#: ../Doc/library/turtle.rst:1230 ../Doc/library/turtle.rst:1251
#: ../Doc/library/turtle.rst:1275 ../Doc/library/turtle.rst:1657
msgid ""
"a function with two arguments which will be called with the coordinates of "
"the clicked point on the canvas"
msgstr ""

#: ../Doc/library/turtle.rst:1232 ../Doc/library/turtle.rst:1253
#: ../Doc/library/turtle.rst:1277 ../Doc/library/turtle.rst:1659
msgid "number of the mouse-button, defaults to 1 (left mouse button)"
msgstr ""

#: ../Doc/library/turtle.rst:1233 ../Doc/library/turtle.rst:1254
#: ../Doc/library/turtle.rst:1278 ../Doc/library/turtle.rst:1660
msgid ""
"``True`` or ``False`` -- if ``True``, a new binding will be added, otherwise "
"it will replace a former binding"
msgstr ""

#: ../Doc/library/turtle.rst:1236
msgid ""
"Bind *fun* to mouse-click events on this turtle.  If *fun* is ``None``, "
"existing bindings are removed.  Example for the anonymous turtle, i.e. the "
"procedural way:"
msgstr ""

#: ../Doc/library/turtle.rst:1257
msgid ""
"Bind *fun* to mouse-button-release events on this turtle.  If *fun* is "
"``None``, existing bindings are removed."
msgstr ""

#: ../Doc/library/turtle.rst:1281
msgid ""
"Bind *fun* to mouse-move events on this turtle.  If *fun* is ``None``, "
"existing bindings are removed."
msgstr ""

#: ../Doc/library/turtle.rst:1284
msgid ""
"Remark: Every sequence of mouse-move-events on a turtle is preceded by a "
"mouse-click event on that turtle."
msgstr ""

#: ../Doc/library/turtle.rst:1291
msgid ""
"Subsequently, clicking and dragging the Turtle will move it across the "
"screen thereby producing handdrawings (if pen is down)."
msgstr ""

#: ../Doc/library/turtle.rst:1298
msgid ""
"Starts event loop - calling Tkinter's mainloop function. Must be the last "
"statement in a turtle graphics program."
msgstr ""

#: ../Doc/library/turtle.rst:1309
msgid ""
"Start recording the vertices of a polygon.  Current turtle position is first "
"vertex of polygon."
msgstr ""

#: ../Doc/library/turtle.rst:1315
msgid ""
"Stop recording the vertices of a polygon.  Current turtle position is last "
"vertex of polygon.  This will be connected with the first vertex."
msgstr ""

#: ../Doc/library/turtle.rst:1321
msgid "Return the last recorded polygon."
msgstr ""

#: ../Doc/library/turtle.rst:1339
msgid ""
"Create and return a clone of the turtle with same position, heading and "
"turtle properties."
msgstr ""

#: ../Doc/library/turtle.rst:1351
msgid ""
"Return the Turtle object itself.  Only reasonable use: as a function to "
"return the \"anonymous turtle\":"
msgstr ""

#: ../Doc/library/turtle.rst:1364
msgid ""
"Return the :class:`TurtleScreen` object the turtle is drawing on. "
"TurtleScreen methods can then be called for that object."
msgstr ""

#: ../Doc/library/turtle.rst:1377
msgid "an integer or ``None``"
msgstr ""

#: ../Doc/library/turtle.rst:1379
msgid ""
"Set or disable undobuffer.  If *size* is an integer an empty undobuffer of "
"given size is installed.  *size* gives the maximum number of turtle actions "
"that can be undone by the :func:`undo` method/function.  If *size* is "
"``None``, the undobuffer is disabled."
msgstr ""

#: ../Doc/library/turtle.rst:1391
msgid "Return number of entries in the undobuffer."
msgstr ""

#: ../Doc/library/turtle.rst:1401
msgid "A replica of the corresponding TurtleScreen method."
msgstr ""

#: ../Doc/library/turtle.rst:1409
msgid "Both are replicas of the corresponding TurtleScreen methods."
msgstr ""

#: ../Doc/library/turtle.rst:1417
msgid "Excursus about the use of compound shapes"
msgstr ""

#: ../Doc/library/turtle.rst:1419
msgid ""
"To use compound turtle shapes, which consist of several polygons of "
"different color, you must use the helper class :class:`Shape` explicitly as "
"described below:"
msgstr ""

#: ../Doc/library/turtle.rst:1423
msgid "Create an empty Shape object of type \"compound\"."
msgstr ""

#: ../Doc/library/turtle.rst:1424
msgid ""
"Add as many components to this object as desired, using the :meth:"
"`addcomponent` method."
msgstr ""

#: ../Doc/library/turtle.rst:1427
msgid "For example:"
msgstr "Par exemple : ::"

#: ../Doc/library/turtle.rst:1437
msgid "Now add the Shape to the Screen's shapelist and use it:"
msgstr ""

#: ../Doc/library/turtle.rst:1447
msgid ""
"The :class:`Shape` class is used internally by the :func:`register_shape` "
"method in different ways.  The application programmer has to deal with the "
"Shape class *only* when using compound shapes like shown above!"
msgstr ""

#: ../Doc/library/turtle.rst:1453
msgid "Methods of TurtleScreen/Screen and corresponding functions"
msgstr ""

#: ../Doc/library/turtle.rst:1455
msgid ""
"Most of the examples in this section refer to a TurtleScreen instance called "
"``screen``."
msgstr ""

#: ../Doc/library/turtle.rst:1468
msgid ""
"a color string or three numbers in the range 0..colormode or a 3-tuple of "
"such numbers"
msgstr ""

#: ../Doc/library/turtle.rst:1472
msgid "Set or return background color of the TurtleScreen."
msgstr ""

#: ../Doc/library/turtle.rst:1486
msgid "a string, name of a gif-file or ``\"nopic\"``, or ``None``"
msgstr ""

#: ../Doc/library/turtle.rst:1488
msgid ""
"Set background image or return name of current backgroundimage.  If "
"*picname* is a filename, set the corresponding image as background.  If "
"*picname* is ``\"nopic\"``, delete background image, if present.  If "
"*picname* is ``None``, return the filename of the current backgroundimage. ::"
msgstr ""

#: ../Doc/library/turtle.rst:1503
msgid ""
"Delete all drawings and all turtles from the TurtleScreen.  Reset the now "
"empty TurtleScreen to its initial state: white background, no background "
"image, no event bindings and tracing on."
msgstr ""

#: ../Doc/library/turtle.rst:1508
msgid ""
"This TurtleScreen method is available as a global function only under the "
"name ``clearscreen``.  The global function ``clear`` is another one derived "
"from the Turtle method ``clear``."
msgstr ""

#: ../Doc/library/turtle.rst:1516
msgid "Reset all Turtles on the Screen to their initial state."
msgstr ""

#: ../Doc/library/turtle.rst:1519
msgid ""
"This TurtleScreen method is available as a global function only under the "
"name ``resetscreen``.  The global function ``reset`` is another one derived "
"from the Turtle method ``reset``."
msgstr ""

#: ../Doc/library/turtle.rst:1526
msgid "positive integer, new width of canvas in pixels"
msgstr ""

#: ../Doc/library/turtle.rst:1527
msgid "positive integer, new height of canvas in pixels"
msgstr ""

#: ../Doc/library/turtle.rst:1528
msgid "colorstring or color-tuple, new background color"
msgstr ""

#: ../Doc/library/turtle.rst:1530
msgid ""
"If no arguments are given, return current (canvaswidth, canvasheight).  Else "
"resize the canvas the turtles are drawing on.  Do not alter the drawing "
"window.  To observe hidden parts of the canvas, use the scrollbars. With "
"this method, one can make visible those parts of a drawing which were "
"outside the canvas before."
msgstr ""

#: ../Doc/library/turtle.rst:1542
msgid "e.g. to search for an erroneously escaped turtle ;-)"
msgstr ""

#: ../Doc/library/turtle.rst:1547
msgid "a number, x-coordinate of lower left corner of canvas"
msgstr ""

#: ../Doc/library/turtle.rst:1548
msgid "a number, y-coordinate of lower left corner of canvas"
msgstr ""

#: ../Doc/library/turtle.rst:1549
msgid "a number, x-coordinate of upper right corner of canvas"
msgstr ""

#: ../Doc/library/turtle.rst:1550
msgid "a number, y-coordinate of upper right corner of canvas"
msgstr ""

#: ../Doc/library/turtle.rst:1552
msgid ""
"Set up user-defined coordinate system and switch to mode \"world\" if "
"necessary.  This performs a ``screen.reset()``.  If mode \"world\" is "
"already active, all drawings are redrawn according to the new coordinates."
msgstr ""

#: ../Doc/library/turtle.rst:1556
msgid ""
"**ATTENTION**: in user-defined coordinate systems angles may appear "
"distorted."
msgstr ""

#: ../Doc/library/turtle.rst:1582
msgid "positive integer"
msgstr ""

#: ../Doc/library/turtle.rst:1584
msgid ""
"Set or return the drawing *delay* in milliseconds.  (This is approximately "
"the time interval between two consecutive canvas updates.)  The longer the "
"drawing delay, the slower the animation."
msgstr ""

#: ../Doc/library/turtle.rst:1588
msgid "Optional argument:"
msgstr ""

#: ../Doc/library/turtle.rst:1601 ../Doc/library/turtle.rst:1602
msgid "nonnegative integer"
msgstr ""

#: ../Doc/library/turtle.rst:1604
msgid ""
"Turn turtle animation on/off and set delay for update drawings.  If *n* is "
"given, only each n-th regular screen update is really performed.  (Can be "
"used to accelerate the drawing of complex graphics.)  Second argument sets "
"delay value (see :func:`delay`)."
msgstr ""

#: ../Doc/library/turtle.rst:1621
msgid "Perform a TurtleScreen update. To be used when tracer is turned off."
msgstr ""

#: ../Doc/library/turtle.rst:1623
msgid "See also the RawTurtle/Turtle method :func:`speed`."
msgstr ""

#: ../Doc/library/turtle.rst:1631
msgid ""
"Set focus on TurtleScreen (in order to collect key-events).  Dummy arguments "
"are provided in order to be able to pass :func:`listen` to the onclick "
"method."
msgstr ""

#: ../Doc/library/turtle.rst:1637
msgid "a function with no arguments or ``None``"
msgstr ""

#: ../Doc/library/turtle.rst:1638
msgid "a string: key (e.g. \"a\") or key-symbol (e.g. \"space\")"
msgstr ""

#: ../Doc/library/turtle.rst:1640
msgid ""
"Bind *fun* to key-release event of key.  If *fun* is ``None``, event "
"bindings are removed. Remark: in order to be able to register key-events, "
"TurtleScreen must have the focus. (See method :func:`listen`.)"
msgstr ""

#: ../Doc/library/turtle.rst:1663
msgid ""
"Bind *fun* to mouse-click events on this screen.  If *fun* is ``None``, "
"existing bindings are removed."
msgstr ""

#: ../Doc/library/turtle.rst:1666
msgid ""
"Example for a TurtleScreen instance named ``screen`` and a Turtle instance "
"named turtle:"
msgstr ""

#: ../Doc/library/turtle.rst:1676
msgid ""
"This TurtleScreen method is available as a global function only under the "
"name ``onscreenclick``.  The global function ``onclick`` is another one "
"derived from the Turtle method ``onclick``."
msgstr ""

#: ../Doc/library/turtle.rst:1683
msgid "a function with no arguments"
msgstr ""

#: ../Doc/library/turtle.rst:1684
msgid "a number >= 0"
msgstr ""

#: ../Doc/library/turtle.rst:1686
msgid "Install a timer that calls *fun* after *t* milliseconds."
msgstr ""

#: ../Doc/library/turtle.rst:1705
msgid "one of the strings \"standard\", \"logo\" or \"world\""
msgstr ""

#: ../Doc/library/turtle.rst:1707
msgid ""
"Set turtle mode (\"standard\", \"logo\" or \"world\") and perform reset.  If "
"mode is not given, current mode is returned."
msgstr ""

#: ../Doc/library/turtle.rst:1710
msgid ""
"Mode \"standard\" is compatible with old :mod:`turtle`.  Mode \"logo\" is "
"compatible with most Logo turtle graphics.  Mode \"world\" uses user-defined "
"\"world coordinates\". **Attention**: in this mode angles appear distorted "
"if ``x/y`` unit-ratio doesn't equal 1."
msgstr ""

#: ../Doc/library/turtle.rst:1716
msgid "Mode"
msgstr ""

#: ../Doc/library/turtle.rst:1716
msgid "Initial turtle heading"
msgstr ""

#: ../Doc/library/turtle.rst:1716
msgid "positive angles"
msgstr ""

#: ../Doc/library/turtle.rst:1718
msgid "\"standard\""
msgstr ""

#: ../Doc/library/turtle.rst:1718
msgid "to the right (east)"
msgstr ""

#: ../Doc/library/turtle.rst:1718
msgid "counterclockwise"
msgstr ""

#: ../Doc/library/turtle.rst:1719
msgid "\"logo\""
msgstr ""

#: ../Doc/library/turtle.rst:1719
msgid "upward    (north)"
msgstr ""

#: ../Doc/library/turtle.rst:1719
msgid "clockwise"
msgstr ""

#: ../Doc/library/turtle.rst:1731
msgid "one of the values 1.0 or 255"
msgstr ""

#: ../Doc/library/turtle.rst:1733
msgid ""
"Return the colormode or set it to 1.0 or 255.  Subsequently *r*, *g*, *b* "
"values of color triples have to be in the range 0..\\ *cmode*."
msgstr ""

#: ../Doc/library/turtle.rst:1753
msgid ""
"Return the Canvas of this TurtleScreen.  Useful for insiders who know what "
"to do with a Tkinter Canvas."
msgstr ""

#: ../Doc/library/turtle.rst:1765
msgid "Return a list of names of all currently available turtle shapes."
msgstr ""

#: ../Doc/library/turtle.rst:1776
msgid "There are three different ways to call this function:"
msgstr ""

#: ../Doc/library/turtle.rst:1778
msgid ""
"*name* is the name of a gif-file and *shape* is ``None``: Install the "
"corresponding image shape. ::"
msgstr ""

#: ../Doc/library/turtle.rst:1784
msgid ""
"Image shapes *do not* rotate when turning the turtle, so they do not display "
"the heading of the turtle!"
msgstr ""

#: ../Doc/library/turtle.rst:1787
msgid ""
"*name* is an arbitrary string and *shape* is a tuple of pairs of "
"coordinates: Install the corresponding polygon shape."
msgstr ""

#: ../Doc/library/turtle.rst:1794
msgid ""
"*name* is an arbitrary string and shape is a (compound) :class:`Shape` "
"object: Install the corresponding compound shape."
msgstr ""

#: ../Doc/library/turtle.rst:1797
msgid ""
"Add a turtle shape to TurtleScreen's shapelist.  Only thusly registered "
"shapes can be used by issuing the command ``shape(shapename)``."
msgstr ""

#: ../Doc/library/turtle.rst:1803
msgid "Return the list of turtles on the screen."
msgstr ""

#: ../Doc/library/turtle.rst:1813
msgid "Return the height of the turtle window. ::"
msgstr ""

#: ../Doc/library/turtle.rst:1821
msgid "Return the width of the turtle window. ::"
msgstr ""

#: ../Doc/library/turtle.rst:1830
msgid "Methods specific to Screen, not inherited from TurtleScreen"
msgstr ""

#: ../Doc/library/turtle.rst:1834
msgid "Shut the turtlegraphics window."
msgstr ""

#: ../Doc/library/turtle.rst:1839
msgid "Bind bye() method to mouse clicks on the Screen."
msgstr ""

#: ../Doc/library/turtle.rst:1842
msgid ""
"If the value \"using_IDLE\" in the configuration dictionary is ``False`` "
"(default value), also enter mainloop.  Remark: If IDLE with the ``-n`` "
"switch (no subprocess) is used, this value should be set to ``True`` in :"
"file:`turtle.cfg`.  In this case IDLE's own mainloop is active also for the "
"client script."
msgstr ""

#: ../Doc/library/turtle.rst:1851
msgid ""
"Set the size and position of the main window.  Default values of arguments "
"are stored in the configuration dictionary and can be changed via a :file:"
"`turtle.cfg` file."
msgstr ""

#: ../Doc/library/turtle.rst:1855
msgid ""
"if an integer, a size in pixels, if a float, a fraction of the screen; "
"default is 50% of screen"
msgstr ""

#: ../Doc/library/turtle.rst:1857
msgid ""
"if an integer, the height in pixels, if a float, a fraction of the screen; "
"default is 75% of screen"
msgstr ""

#: ../Doc/library/turtle.rst:1859
msgid ""
"if positive, starting position in pixels from the left edge of the screen, "
"if negative from the right edge, if ``None``, center window horizontally"
msgstr ""

#: ../Doc/library/turtle.rst:1862
msgid ""
"if positive, starting position in pixels from the top edge of the screen, if "
"negative from the bottom edge, if ``None``, center window vertically"
msgstr ""

#: ../Doc/library/turtle.rst:1876
msgid "a string that is shown in the titlebar of the turtle graphics window"
msgstr ""

#: ../Doc/library/turtle.rst:1879
msgid "Set title of turtle window to *titlestring*."
msgstr ""

#: ../Doc/library/turtle.rst:1887
msgid "The public classes of the module :mod:`turtle`"
msgstr ""

#: ../Doc/library/turtle.rst:1893
msgid ""
"a :class:`Tkinter.Canvas`, a :class:`ScrolledCanvas` or a :class:"
"`TurtleScreen`"
msgstr ""

#: ../Doc/library/turtle.rst:1896
msgid ""
"Create a turtle.  The turtle has all methods described above as \"methods of "
"Turtle/RawTurtle\"."
msgstr ""

#: ../Doc/library/turtle.rst:1902
msgid ""
"Subclass of RawTurtle, has the same interface but draws on a default :class:"
"`Screen` object created automatically when needed for the first time."
msgstr ""

#: ../Doc/library/turtle.rst:1908
msgid "a :class:`Tkinter.Canvas`"
msgstr ""

#: ../Doc/library/turtle.rst:1910
msgid ""
"Provides screen oriented methods like :func:`setbg` etc. that are described "
"above."
msgstr ""

#: ../Doc/library/turtle.rst:1915
msgid ""
"Subclass of TurtleScreen, with :ref:`four methods added <screenspecific>`."
msgstr ""

#: ../Doc/library/turtle.rst:1920
msgid ""
"some Tkinter widget to contain the ScrolledCanvas, i.e. a Tkinter-canvas "
"with scrollbars added"
msgstr ""

#: ../Doc/library/turtle.rst:1923
msgid ""
"Used by class Screen, which thus automatically provides a ScrolledCanvas as "
"playground for the turtles."
msgstr ""

#: ../Doc/library/turtle.rst:1928
msgid "one of the strings \"polygon\", \"image\", \"compound\""
msgstr ""

#: ../Doc/library/turtle.rst:1930
msgid ""
"Data structure modeling shapes.  The pair ``(type_, data)`` must follow this "
"specification:"
msgstr ""

#: ../Doc/library/turtle.rst:1935
msgid "*type_*"
msgstr "*type_*"

#: ../Doc/library/turtle.rst:1935
msgid "*data*"
msgstr "*data*"

#: ../Doc/library/turtle.rst:1937
msgid "\"polygon\""
msgstr ""

#: ../Doc/library/turtle.rst:1937
msgid "a polygon-tuple, i.e. a tuple of pairs of coordinates"
msgstr ""

#: ../Doc/library/turtle.rst:1938
msgid "\"image\""
msgstr ""

#: ../Doc/library/turtle.rst:1938
msgid "an image  (in this form only used internally!)"
msgstr ""

#: ../Doc/library/turtle.rst:1939
msgid "\"compound\""
msgstr ""

#: ../Doc/library/turtle.rst:1939
msgid ""
"``None`` (a compound shape has to be constructed using the :meth:"
"`addcomponent` method)"
msgstr ""

#: ../Doc/library/turtle.rst:1945
msgid "a polygon, i.e. a tuple of pairs of numbers"
msgstr ""

#: ../Doc/library/turtle.rst:1946
msgid "a color the *poly* will be filled with"
msgstr ""

#: ../Doc/library/turtle.rst:1947
msgid "a color for the poly's outline (if given)"
msgstr ""

#: ../Doc/library/turtle.rst:1949
msgid "Example:"
msgstr "Exemple :"

#: ../Doc/library/turtle.rst:1958
msgid "See :ref:`compoundshapes`."
msgstr ""

#: ../Doc/library/turtle.rst:1963
msgid ""
"A two-dimensional vector class, used as a helper class for implementing "
"turtle graphics.  May be useful for turtle graphics programs too.  Derived "
"from tuple, so a vector is a tuple!"
msgstr ""

#: ../Doc/library/turtle.rst:1967
msgid "Provides (for *a*, *b* vectors, *k* number):"
msgstr ""

#: ../Doc/library/turtle.rst:1969
msgid "``a + b`` vector addition"
msgstr ""

#: ../Doc/library/turtle.rst:1970
msgid "``a - b`` vector subtraction"
msgstr ""

#: ../Doc/library/turtle.rst:1971
msgid "``a * b`` inner product"
msgstr ""

#: ../Doc/library/turtle.rst:1972
msgid "``k * a`` and ``a * k`` multiplication with scalar"
msgstr ""

#: ../Doc/library/turtle.rst:1973
msgid "``abs(a)`` absolute value of a"
msgstr ""

#: ../Doc/library/turtle.rst:1974
msgid "``a.rotate(angle)`` rotation"
msgstr ""

#: ../Doc/library/turtle.rst:1978
msgid "Help and configuration"
msgstr ""

#: ../Doc/library/turtle.rst:1981
msgid "How to use help"
msgstr ""

#: ../Doc/library/turtle.rst:1983
msgid ""
"The public methods of the Screen and Turtle classes are documented "
"extensively via docstrings.  So these can be used as online-help via the "
"Python help facilities:"
msgstr ""

#: ../Doc/library/turtle.rst:1987
msgid ""
"When using IDLE, tooltips show the signatures and first lines of the "
"docstrings of typed in function-/method calls."
msgstr ""

#: ../Doc/library/turtle.rst:1990
msgid "Calling :func:`help` on methods or functions displays the docstrings::"
msgstr ""

#: ../Doc/library/turtle.rst:2021
msgid ""
"The docstrings of the functions which are derived from methods have a "
"modified form::"
msgstr ""

#: ../Doc/library/turtle.rst:2055
msgid ""
"These modified docstrings are created automatically together with the "
"function definitions that are derived from the methods at import time."
msgstr ""

#: ../Doc/library/turtle.rst:2060
msgid "Translation of docstrings into different languages"
msgstr ""

#: ../Doc/library/turtle.rst:2062
msgid ""
"There is a utility to create a dictionary the keys of which are the method "
"names and the values of which are the docstrings of the public methods of "
"the classes Screen and Turtle."
msgstr ""

#: ../Doc/library/turtle.rst:2068
msgid "a string, used as filename"
msgstr ""

#: ../Doc/library/turtle.rst:2070
msgid ""
"Create and write docstring-dictionary to a Python script with the given "
"filename.  This function has to be called explicitly (it is not used by the "
"turtle graphics classes).  The docstring dictionary will be written to the "
"Python script :file:`{filename}.py`.  It is intended to serve as a template "
"for translation of the docstrings into different languages."
msgstr ""

#: ../Doc/library/turtle.rst:2076
msgid ""
"If you (or your students) want to use :mod:`turtle` with online help in your "
"native language, you have to translate the docstrings and save the resulting "
"file as e.g. :file:`turtle_docstringdict_german.py`."
msgstr ""

#: ../Doc/library/turtle.rst:2080
msgid ""
"If you have an appropriate entry in your :file:`turtle.cfg` file this "
"dictionary will be read in at import time and will replace the original "
"English docstrings."
msgstr ""

#: ../Doc/library/turtle.rst:2083
msgid ""
"At the time of this writing there are docstring dictionaries in German and "
"in Italian.  (Requests please to glingl@aon.at.)"
msgstr ""

#: ../Doc/library/turtle.rst:2089
msgid "How to configure Screen and Turtles"
msgstr ""

#: ../Doc/library/turtle.rst:2091
msgid ""
"The built-in default configuration mimics the appearance and behaviour of "
"the old turtle module in order to retain best possible compatibility with it."
msgstr ""

#: ../Doc/library/turtle.rst:2094
msgid ""
"If you want to use a different configuration which better reflects the "
"features of this module or which better fits to your needs, e.g. for use in "
"a classroom, you can prepare a configuration file ``turtle.cfg`` which will "
"be read at import time and modify the configuration according to its "
"settings."
msgstr ""

#: ../Doc/library/turtle.rst:2099
msgid ""
"The built in configuration would correspond to the following turtle.cfg::"
msgstr ""

#: ../Doc/library/turtle.rst:2122
msgid "Short explanation of selected entries:"
msgstr ""

#: ../Doc/library/turtle.rst:2124
msgid ""
"The first four lines correspond to the arguments of the :meth:`Screen.setup` "
"method."
msgstr ""

#: ../Doc/library/turtle.rst:2126
msgid ""
"Line 5 and 6 correspond to the arguments of the method :meth:`Screen."
"screensize`."
msgstr ""

#: ../Doc/library/turtle.rst:2128
msgid ""
"*shape* can be any of the built-in shapes, e.g: arrow, turtle, etc.  For "
"more info try ``help(shape)``."
msgstr ""

#: ../Doc/library/turtle.rst:2130
msgid ""
"If you want to use no fillcolor (i.e. make the turtle transparent), you have "
"to write ``fillcolor = \"\"`` (but all nonempty strings must not have quotes "
"in the cfg-file)."
msgstr ""

#: ../Doc/library/turtle.rst:2133
msgid ""
"If you want to reflect the turtle its state, you have to use ``resizemode = "
"auto``."
msgstr ""

#: ../Doc/library/turtle.rst:2135
msgid ""
"If you set e.g. ``language = italian`` the docstringdict :file:"
"`turtle_docstringdict_italian.py` will be loaded at import time (if present "
"on the import path, e.g. in the same directory as :mod:`turtle`."
msgstr ""

#: ../Doc/library/turtle.rst:2138
msgid ""
"The entries *exampleturtle* and *examplescreen* define the names of these "
"objects as they occur in the docstrings.  The transformation of method-"
"docstrings to function-docstrings will delete these names from the "
"docstrings."
msgstr ""

#: ../Doc/library/turtle.rst:2142
msgid ""
"*using_IDLE*: Set this to ``True`` if you regularly work with IDLE and its -"
"n switch (\"no subprocess\").  This will prevent :func:`exitonclick` to "
"enter the mainloop."
msgstr ""

#: ../Doc/library/turtle.rst:2146
msgid ""
"There can be a :file:`turtle.cfg` file in the directory where :mod:`turtle` "
"is stored and an additional one in the current working directory.  The "
"latter will override the settings of the first one."
msgstr ""

#: ../Doc/library/turtle.rst:2150
msgid ""
"The :file:`Demo/turtle` directory contains a :file:`turtle.cfg` file.  You "
"can study it as an example and see its effects when running the demos "
"(preferably not from within the demo-viewer)."
msgstr ""

#: ../Doc/library/turtle.rst:2156
msgid "Demo scripts"
msgstr ""

#: ../Doc/library/turtle.rst:2158
msgid ""
"There is a set of demo scripts in the turtledemo directory located in the :"
"file:`Demo/turtle` directory in the source distribution."
msgstr ""

#: ../Doc/library/turtle.rst:2161
msgid "It contains:"
msgstr ""

#: ../Doc/library/turtle.rst:2163
msgid ""
"a set of 15 demo scripts demonstrating different features of the new module :"
"mod:`turtle`"
msgstr ""

#: ../Doc/library/turtle.rst:2165
msgid ""
"a demo viewer :file:`turtleDemo.py` which can be used to view the sourcecode "
"of the scripts and run them at the same time. 14 of the examples can be "
"accessed via the Examples menu; all of them can also be run standalone."
msgstr ""

#: ../Doc/library/turtle.rst:2168
msgid ""
"The example :file:`turtledemo_two_canvases.py` demonstrates the simultaneous "
"use of two canvases with the turtle module.  Therefore it only can be run "
"standalone."
msgstr ""

#: ../Doc/library/turtle.rst:2171
msgid ""
"There is a :file:`turtle.cfg` file in this directory, which also serves as "
"an example for how to write and use such files."
msgstr ""

#: ../Doc/library/turtle.rst:2174
msgid "The demoscripts are:"
msgstr ""

#: ../Doc/library/turtle.rst:2179
msgid "Name"
msgstr "Nom"

#: ../Doc/library/turtle.rst:2179
msgid "Description"
msgstr "Description"

#: ../Doc/library/turtle.rst:2179
msgid "Features"
msgstr ""

#: ../Doc/library/turtle.rst:2181
msgid "bytedesign"
msgstr ""

#: ../Doc/library/turtle.rst:2181
msgid "complex classical turtlegraphics pattern"
msgstr ""

#: ../Doc/library/turtle.rst:2181
msgid ":func:`tracer`, delay, :func:`update`"
msgstr ""

#: ../Doc/library/turtle.rst:2184
msgid "chaos"
msgstr ""

#: ../Doc/library/turtle.rst:2184
msgid ""
"graphs Verhulst dynamics, shows that computer's computations can generate "
"results sometimes against the common sense expectations"
msgstr ""

#: ../Doc/library/turtle.rst:2184
msgid "world coordinates"
msgstr ""

#: ../Doc/library/turtle.rst:2190
msgid "clock"
msgstr ""

#: ../Doc/library/turtle.rst:2190
msgid "analog clock showing time of your computer"
msgstr ""

#: ../Doc/library/turtle.rst:2190
msgid "turtles as clock's hands, ontimer"
msgstr ""

#: ../Doc/library/turtle.rst:2193
msgid "colormixer"
msgstr ""

#: ../Doc/library/turtle.rst:2193
msgid "experiment with r, g, b"
msgstr ""

#: ../Doc/library/turtle.rst:2195
msgid "fractalcurves"
msgstr ""

#: ../Doc/library/turtle.rst:2195
msgid "Hilbert & Koch curves"
msgstr ""

#: ../Doc/library/turtle.rst:2195
msgid "recursion"
msgstr ""

#: ../Doc/library/turtle.rst:2197
msgid "lindenmayer"
msgstr ""

#: ../Doc/library/turtle.rst:2197
msgid "ethnomathematics (indian kolams)"
msgstr ""

#: ../Doc/library/turtle.rst:2197
msgid "L-System"
msgstr ""

#: ../Doc/library/turtle.rst:2200
msgid "minimal_hanoi"
msgstr ""

#: ../Doc/library/turtle.rst:2200
msgid "Towers of Hanoi"
msgstr ""

#: ../Doc/library/turtle.rst:2200
msgid "Rectangular Turtles as Hanoi discs (shape, shapesize)"
msgstr ""

#: ../Doc/library/turtle.rst:2204
msgid "paint"
msgstr ""

#: ../Doc/library/turtle.rst:2204
msgid "super minimalistic drawing program"
msgstr ""

#: ../Doc/library/turtle.rst:2207
msgid "peace"
msgstr ""

#: ../Doc/library/turtle.rst:2207
msgid "elementary"
msgstr ""

#: ../Doc/library/turtle.rst:2207
msgid "turtle: appearance and animation"
msgstr ""

#: ../Doc/library/turtle.rst:2210
msgid "penrose"
msgstr ""

#: ../Doc/library/turtle.rst:2210
msgid "aperiodic tiling with kites and darts"
msgstr ""

#: ../Doc/library/turtle.rst:2213
msgid "planet_and_moon"
msgstr ""

#: ../Doc/library/turtle.rst:2213
msgid "simulation of gravitational system"
msgstr ""

#: ../Doc/library/turtle.rst:2213
msgid "compound shapes, :class:`Vec2D`"
msgstr ""

#: ../Doc/library/turtle.rst:2216
msgid "tree"
msgstr ""

#: ../Doc/library/turtle.rst:2216
msgid "a (graphical) breadth first tree (using generators)"
msgstr ""

#: ../Doc/library/turtle.rst:2219
msgid "wikipedia"
msgstr ""

#: ../Doc/library/turtle.rst:2219
msgid "a pattern from the wikipedia article on turtle graphics"
msgstr ""

#: ../Doc/library/turtle.rst:2219
msgid ":func:`clone`, :func:`undo`"
msgstr ""

#: ../Doc/library/turtle.rst:2222
msgid "yingyang"
msgstr ""

#: ../Doc/library/turtle.rst:2222
msgid "another elementary example"
msgstr ""

#: ../Doc/library/turtle.rst:2225
msgid "Have fun!"
msgstr ""
