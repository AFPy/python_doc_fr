# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/miniaeframe.rst:3
msgid ":mod:`MiniAEFrame` --- Open Scripting Architecture server support"
msgstr ""

#: ../Doc/library/miniaeframe.rst:15
msgid ""
"The module :mod:`MiniAEFrame` provides a framework for an application that "
"can function as an Open Scripting Architecture  (OSA) server, i.e. receive "
"and process AppleEvents. It can be used in conjunction with :mod:`FrameWork` "
"or standalone. As an example, it is used in :program:`PythonCGISlave`."
msgstr ""

#: ../Doc/library/miniaeframe.rst:20
msgid "The :mod:`MiniAEFrame` module defines the following classes:"
msgstr ""

#: ../Doc/library/miniaeframe.rst:25
msgid ""
"A class that handles AppleEvent dispatch. Your application should subclass "
"this class together with either :class:`MiniApplication` or :class:"
"`FrameWork.Application`. Your :meth:`__init__` method should call the :meth:"
"`__init__` method for both classes."
msgstr ""

#: ../Doc/library/miniaeframe.rst:33
msgid ""
"A class that is more or less compatible with :class:`FrameWork.Application` "
"but with less functionality. Its event loop supports the apple menu, command-"
"dot and AppleEvents; other events are passed on to the Python interpreter "
"and/or Sioux. Useful if your application wants to use :class:`AEServer` but "
"does not provide its own windows, etc."
msgstr ""

#: ../Doc/library/miniaeframe.rst:43
msgid "AEServer Objects"
msgstr ""

#: ../Doc/library/miniaeframe.rst:48
msgid ""
"Installs an AppleEvent handler. *classe* and *type* are the four-character "
"OSA Class and Type designators, ``'****'`` wildcards are allowed. When a "
"matching AppleEvent is received the parameters are decoded and your callback "
"is invoked."
msgstr ""

#: ../Doc/library/miniaeframe.rst:55
msgid ""
"Your callback is called with the OSA Direct Object as first positional "
"parameter. The other parameters are passed as keyword arguments, with the 4-"
"character designator as name. Three extra keyword parameters are passed: "
"``_class`` and ``_type`` are the Class and Type designators and "
"``_attributes`` is a dictionary with the AppleEvent attributes."
msgstr ""

#: ../Doc/library/miniaeframe.rst:61
msgid ""
"The return value of your method is packed with :func:`aetools.packevent` and "
"sent as reply."
msgstr ""

#: ../Doc/library/miniaeframe.rst:64
msgid ""
"Note that there are some serious problems with the current design. "
"AppleEvents which have non-identifier 4-character designators for arguments "
"are not implementable, and it is not possible to return an error to the "
"originator. This will be addressed in a future release."
msgstr ""
