# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/fractions.rst:2
msgid ":mod:`fractions` --- Rational numbers"
msgstr ""

#: ../Doc/library/fractions.rst:10
msgid "**Source code:** :source:`Lib/fractions.py`"
msgstr "**Code source :** :source:`Lib/fractions.py`"

#: ../Doc/library/fractions.rst:14
msgid ""
"The :mod:`fractions` module provides support for rational number arithmetic."
msgstr ""

#: ../Doc/library/fractions.rst:17
msgid ""
"A Fraction instance can be constructed from a pair of integers, from another "
"rational number, or from a string."
msgstr ""

#: ../Doc/library/fractions.rst:26
msgid ""
"The first version requires that *numerator* and *denominator* are instances "
"of :class:`numbers.Rational` and returns a new :class:`Fraction` instance "
"with value ``numerator/denominator``. If *denominator* is :const:`0`, it "
"raises a :exc:`ZeroDivisionError`. The second version requires that "
"*other_fraction* is an instance of :class:`numbers.Rational` and returns a :"
"class:`Fraction` instance with the same value.  The next two versions accept "
"either a :class:`float` or a :class:`decimal.Decimal` instance, and return "
"a :class:`Fraction` instance with exactly the same value.  Note that due to "
"the usual issues with binary floating-point (see :ref:`tut-fp-issues`), the "
"argument to ``Fraction(1.1)`` is not exactly equal to 11/10, and so "
"``Fraction(1.1)`` does *not* return ``Fraction(11, 10)`` as one might "
"expect. (But see the documentation for the :meth:`limit_denominator` method "
"below.) The last version of the constructor expects a string or unicode "
"instance. The usual form for this instance is::"
msgstr ""

#: ../Doc/library/fractions.rst:43
msgid ""
"where the optional ``sign`` may be either '+' or '-' and ``numerator`` and "
"``denominator`` (if present) are strings of decimal digits.  In addition, "
"any string that represents a finite value and is accepted by the :class:"
"`float` constructor is also accepted by the :class:`Fraction` constructor.  "
"In either form the input string may also have leading and/or trailing "
"whitespace. Here are some examples::"
msgstr ""

#: ../Doc/library/fractions.rst:77
msgid ""
"The :class:`Fraction` class inherits from the abstract base class :class:"
"`numbers.Rational`, and implements all of the methods and operations from "
"that class.  :class:`Fraction` instances are hashable, and should be treated "
"as immutable.  In addition, :class:`Fraction` has the following methods:"
msgstr ""

#: ../Doc/library/fractions.rst:83
msgid ""
"The :class:`Fraction` constructor now accepts :class:`float` and :class:"
"`decimal.Decimal` instances."
msgstr ""

#: ../Doc/library/fractions.rst:90
msgid ""
"This class method constructs a :class:`Fraction` representing the exact "
"value of *flt*, which must be a :class:`float`. Beware that ``Fraction."
"from_float(0.3)`` is not the same value as ``Fraction(3, 10)``."
msgstr ""

#: ../Doc/library/fractions.rst:94
msgid ""
"From Python 2.7 onwards, you can also construct a :class:`Fraction` instance "
"directly from a :class:`float`."
msgstr ""

#: ../Doc/library/fractions.rst:100
msgid ""
"This class method constructs a :class:`Fraction` representing the exact "
"value of *dec*, which must be a :class:`decimal.Decimal`."
msgstr ""

#: ../Doc/library/fractions.rst:103
msgid ""
"From Python 2.7 onwards, you can also construct a :class:`Fraction` instance "
"directly from a :class:`decimal.Decimal` instance."
msgstr ""

#: ../Doc/library/fractions.rst:110
msgid ""
"Finds and returns the closest :class:`Fraction` to ``self`` that has "
"denominator at most max_denominator.  This method is useful for finding "
"rational approximations to a given floating-point number:"
msgstr ""

#: ../Doc/library/fractions.rst:118
msgid "or for recovering a rational number that's represented as a float:"
msgstr ""

#: ../Doc/library/fractions.rst:131
msgid ""
"Return the greatest common divisor of the integers *a* and *b*.  If either "
"*a* or *b* is nonzero, then the absolute value of ``gcd(a, b)`` is the "
"largest integer that divides both *a* and *b*.  ``gcd(a,b)`` has the same "
"sign as *b* if *b* is nonzero; otherwise it takes the sign of *a*.  ``gcd(0, "
"0)`` returns ``0``."
msgstr ""

#: ../Doc/library/fractions.rst:140
msgid "Module :mod:`numbers`"
msgstr ""

#: ../Doc/library/fractions.rst:141
msgid "The abstract base classes making up the numeric tower."
msgstr ""
