# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/framework.rst:3
msgid ":mod:`FrameWork` --- Interactive application framework"
msgstr ""

#: ../Doc/library/framework.rst:11
msgid ""
"The :mod:`FrameWork` module contains classes that together provide a "
"framework for an interactive Macintosh application. The programmer builds an "
"application by creating subclasses that override various methods of the "
"bases classes, thereby implementing the functionality wanted. Overriding "
"functionality can often be done on various different levels, i.e. to handle "
"clicks in a single dialog window in a non-standard way it is not necessary "
"to override the complete event handling."
msgstr ""

#: ../Doc/library/framework.rst:21
msgid "This module has been removed in Python 3.x."
msgstr ""

#: ../Doc/library/framework.rst:23
msgid ""
"Work on the :mod:`FrameWork` has pretty much stopped, now that :mod:`PyObjC` "
"is available for full Cocoa access from Python, and the documentation "
"describes only the most important functionality, and not in the most logical "
"manner at that. Examine the source or the examples for more details.  The "
"following are some comments posted on the MacPython newsgroup about the "
"strengths and limitations of :mod:`FrameWork`:"
msgstr ""

#: ../Doc/library/framework.rst:33
msgid ""
"The strong point of :mod:`FrameWork` is that it allows you to break into the "
"control-flow at many different places. :mod:`W`, for instance, uses a "
"different way to enable/disable menus and that plugs right in leaving the "
"rest intact. The weak points of :mod:`FrameWork` are that it has no abstract "
"command interface (but that shouldn't be difficult), that its dialog support "
"is minimal and that its control/toolbar support is non-existent."
msgstr ""

#: ../Doc/library/framework.rst:40
msgid "The :mod:`FrameWork` module defines the following functions:"
msgstr ""

#: ../Doc/library/framework.rst:45
msgid ""
"An object representing the complete application. See below for a description "
"of the methods. The default :meth:`__init__` routine creates an empty window "
"dictionary and a menu bar with an apple menu."
msgstr ""

#: ../Doc/library/framework.rst:52
msgid ""
"An object representing the menubar. This object is usually not created by "
"the user."
msgstr ""

#: ../Doc/library/framework.rst:58
msgid ""
"An object representing a menu. Upon creation you pass the ``MenuBar`` the "
"menu appears in, the *title* string and a position (1-based) *after* where "
"the menu should appear (default: at the end)."
msgstr ""

#: ../Doc/library/framework.rst:65
msgid ""
"Create a menu item object. The arguments are the menu to create, the item "
"title string and optionally the keyboard shortcut and a callback routine. "
"The callback is called with the arguments menu-id, item number within menu "
"(1-based), current front window and the event record."
msgstr ""

#: ../Doc/library/framework.rst:70
msgid ""
"Instead of a callable object the callback can also be a string. In this case "
"menu selection causes the lookup of a method in the topmost window and the "
"application. The method name is the callback string with ``'domenu_'`` "
"prepended."
msgstr ""

#: ../Doc/library/framework.rst:75
msgid ""
"Calling the ``MenuBar`` :meth:`fixmenudimstate` method sets the correct "
"dimming for all menu items based on the current front window."
msgstr ""

#: ../Doc/library/framework.rst:81
msgid "Add a separator to the end of a menu."
msgstr ""

#: ../Doc/library/framework.rst:86
msgid ""
"Create a submenu named *label* under menu *menu*. The menu object is "
"returned."
msgstr ""

#: ../Doc/library/framework.rst:91
msgid ""
"Creates a (modeless) window. *Parent* is the application object to which the "
"window belongs. The window is not displayed until later."
msgstr ""

#: ../Doc/library/framework.rst:97
msgid "Creates a modeless dialog window."
msgstr ""

#: ../Doc/library/framework.rst:102
msgid ""
"Return a ``(left, top, right, bottom)`` tuple suitable for creation of a "
"window of given width and height. The window will be staggered with respect "
"to previous windows, and an attempt is made to keep the whole window on-"
"screen. However, the window will however always be the exact size given, so "
"parts may be offscreen."
msgstr ""

#: ../Doc/library/framework.rst:110
msgid "Set the mouse cursor to a watch."
msgstr ""

#: ../Doc/library/framework.rst:115
msgid "Set the mouse cursor to an arrow."
msgstr ""

#: ../Doc/library/framework.rst:121
msgid "Application Objects"
msgstr ""

#: ../Doc/library/framework.rst:123
msgid "Application objects have the following methods, among others:"
msgstr ""

#: ../Doc/library/framework.rst:128
msgid ""
"Override this method if you need menus in your application. Append the menus "
"to the attribute :attr:`menubar`."
msgstr ""

#: ../Doc/library/framework.rst:134
msgid ""
"Override this method to return a text string describing your application. "
"Alternatively, override the :meth:`do_about` method for more elaborate "
"\"about\" messages."
msgstr ""

#: ../Doc/library/framework.rst:141
msgid ""
"This routine is the main event loop, call it to set your application "
"rolling. *Mask* is the mask of events you want to handle, *wait* is the "
"number of ticks you want to leave to other concurrent application (default "
"0, which is probably not a good idea). While raising *self* to exit the "
"mainloop is still supported it is not recommended: call ``self._quit()`` "
"instead."
msgstr ""

#: ../Doc/library/framework.rst:147
msgid ""
"The event loop is split into many small parts, each of which can be "
"overridden. The default methods take care of dispatching events to windows "
"and dialogs, handling drags and resizes, Apple Events, events for non-"
"FrameWork windows, etc."
msgstr ""

#: ../Doc/library/framework.rst:151
msgid ""
"In general, all event handlers should return ``1`` if the event is fully "
"handled and ``0`` otherwise (because the front window was not a FrameWork "
"window, for instance). This is needed so that update events and such can be "
"passed on to other windows like the Sioux console window. Calling :func:"
"`MacOS.HandleEvent` is not allowed within *our_dispatch* or its callees, "
"since this may result in an infinite loop if the code is called through the "
"Python inner-loop event handler."
msgstr ""

#: ../Doc/library/framework.rst:161
msgid ""
"Call this method with a nonzero parameter to enable asynchronous event "
"handling. This will tell the inner interpreter loop to call the application "
"event handler *async_dispatch* whenever events are available. This will "
"cause FrameWork window updates and the user interface to remain working "
"during long computations, but will slow the interpreter down and may cause "
"surprising results in non-reentrant code (such as FrameWork itself). By "
"default *async_dispatch* will immediately call *our_dispatch* but you may "
"override this to handle only certain events asynchronously. Events you do "
"not handle will be passed to Sioux and such."
msgstr ""

#: ../Doc/library/framework.rst:170
msgid "The old on/off value is returned."
msgstr ""

#: ../Doc/library/framework.rst:175
msgid ""
"Terminate the running :meth:`mainloop` call at the next convenient moment."
msgstr ""

#: ../Doc/library/framework.rst:180
msgid ""
"The user typed character *c*. The complete details of the event can be found "
"in the *event* structure. This method can also be provided in a ``Window`` "
"object, which overrides the application-wide handler if the window is "
"frontmost."
msgstr ""

#: ../Doc/library/framework.rst:187
msgid ""
"Called early in the event loop to handle modeless dialog events. The default "
"method simply dispatches the event to the relevant dialog (not through the "
"``DialogWindow`` object involved). Override if you need special handling of "
"dialog events (keyboard shortcuts, etc)."
msgstr ""

#: ../Doc/library/framework.rst:195
msgid ""
"Called by the main event loop when no events are available. The null-event "
"is passed (so you can look at mouse position, etc)."
msgstr ""

#: ../Doc/library/framework.rst:202
msgid "Window Objects"
msgstr ""

#: ../Doc/library/framework.rst:204
msgid "Window objects have the following methods, among others:"
msgstr ""

#: ../Doc/library/framework.rst:209
msgid ""
"Override this method to open a window. Store the Mac OS window-id in :attr:"
"`self.wid` and call the :meth:`do_postopen` method to register the window "
"with the parent application."
msgstr ""

#: ../Doc/library/framework.rst:216
msgid ""
"Override this method to do any special processing on window close. Call the :"
"meth:`do_postclose` method to cleanup the parent state."
msgstr ""

#: ../Doc/library/framework.rst:222
msgid ""
"Called after the window is resized. Override if more needs to be done than "
"calling ``InvalRect``."
msgstr ""

#: ../Doc/library/framework.rst:228
msgid ""
"The user clicked in the content part of a window. The arguments are the "
"coordinates (window-relative), the key modifiers and the raw event."
msgstr ""

#: ../Doc/library/framework.rst:234
msgid "An update event for the window was received. Redraw the window."
msgstr ""

#: ../Doc/library/framework.rst:239
msgid ""
"The window was activated (``activate == 1``) or deactivated (``activate == "
"0``). Handle things like focus highlighting, etc."
msgstr ""

#: ../Doc/library/framework.rst:246
msgid "ControlsWindow Object"
msgstr ""

#: ../Doc/library/framework.rst:248
msgid ""
"ControlsWindow objects have the following methods besides those of "
"``Window`` objects:"
msgstr ""

#: ../Doc/library/framework.rst:254
msgid ""
"Part *pcode* of control *control* was hit by the user. Tracking and such has "
"already been taken care of."
msgstr ""

#: ../Doc/library/framework.rst:261
msgid "ScrolledWindow Object"
msgstr ""

#: ../Doc/library/framework.rst:263
msgid ""
"ScrolledWindow objects are ControlsWindow objects with the following extra "
"methods:"
msgstr ""

#: ../Doc/library/framework.rst:269
msgid ""
"Create (or destroy) horizontal and vertical scrollbars. The arguments "
"specify which you want (default: both). The scrollbars always have minimum "
"``0`` and maximum ``32767``."
msgstr ""

#: ../Doc/library/framework.rst:276
msgid ""
"You must supply this method. It should return a tuple ``(x, y)`` giving the "
"current position of the scrollbars (between ``0`` and ``32767``). You can "
"return ``None`` for either to indicate the whole document is visible in that "
"direction."
msgstr ""

#: ../Doc/library/framework.rst:283
msgid ""
"Call this method when the document has changed. It will call :meth:"
"`getscrollbarvalues` and update the scrollbars."
msgstr ""

#: ../Doc/library/framework.rst:289
msgid ""
"Supplied by you and called after user interaction. *which* will be ``'x'`` "
"or ``'y'``, *what* will be ``'-'``, ``'--'``, ``'set'``, ``'++'`` or "
"``'+'``. For ``'set'``, *value* will contain the new scrollbar position."
msgstr ""

#: ../Doc/library/framework.rst:296
msgid ""
"Auxiliary method to help you calculate values to return from :meth:"
"`getscrollbarvalues`. You pass document minimum and maximum value and "
"topmost (leftmost) and bottommost (rightmost) visible values and it returns "
"the correct number or ``None``."
msgstr ""

#: ../Doc/library/framework.rst:304
msgid ""
"Takes care of dimming/highlighting scrollbars when a window becomes "
"frontmost. If you override this method, call this one at the end of your "
"method."
msgstr ""

#: ../Doc/library/framework.rst:310
msgid ""
"Moves scrollbars to the correct position. Call this method initially if you "
"override it."
msgstr ""

#: ../Doc/library/framework.rst:316
msgid ""
"Handles scrollbar interaction. If you override it call this method first, a "
"nonzero return value indicates the hit was in the scrollbars and has been "
"handled."
msgstr ""

#: ../Doc/library/framework.rst:324
msgid "DialogWindow Objects"
msgstr ""

#: ../Doc/library/framework.rst:326
msgid ""
"DialogWindow objects have the following methods besides those of ``Window`` "
"objects:"
msgstr ""

#: ../Doc/library/framework.rst:332
msgid ""
"Create the dialog window, from the DLOG resource with id *resid*. The dialog "
"object is stored in :attr:`self.wid`."
msgstr ""

#: ../Doc/library/framework.rst:338
msgid ""
"Item number *item* was hit. You are responsible for redrawing toggle "
"buttons, etc."
msgstr ""
