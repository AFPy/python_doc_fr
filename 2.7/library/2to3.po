# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/2to3.rst:4
msgid "2to3 - Automated Python 2 to 3 code translation"
msgstr "2to3 - Automatise la traduction du code de Python 2 vers Python 3"

#: ../Doc/library/2to3.rst:8
msgid ""
"2to3 is a Python program that reads Python 2.x source code and applies a "
"series of *fixers* to transform it into valid Python 3.x code.  The standard "
"library contains a rich set of fixers that will handle almost all code.  "
"2to3 supporting library :mod:`lib2to3` is, however, a flexible and generic "
"library, so it is possible to write your own fixers for 2to3.  :mod:"
"`lib2to3` could also be adapted to custom applications in which Python code "
"needs to be edited automatically."
msgstr ""

#: ../Doc/library/2to3.rst:20
msgid "Using 2to3"
msgstr "Utilisation de 2to3"

#: ../Doc/library/2to3.rst:22
msgid ""
"2to3 will usually be installed with the Python interpreter as a script.  It "
"is also located in the :file:`Tools/scripts` directory of the Python root."
msgstr ""
"2to3 sera généralement installé avec l'interpréteur Python en temps que "
"script. Il est également situé dans le dossier :file:`Tools/scripts` à "
"racine de Python."

#: ../Doc/library/2to3.rst:25
msgid ""
"2to3's basic arguments are a list of files or directories to transform.  The "
"directories are recursively traversed for Python sources."
msgstr ""

#: ../Doc/library/2to3.rst:28
msgid "Here is a sample Python 2.x source file, :file:`example.py`::"
msgstr "Voici un exemple de fichier source Python 2.x, :file:`example.py`::"

#: ../Doc/library/2to3.rst:36
msgid "It can be converted to Python 3.x code via 2to3 on the command line:"
msgstr ""

#: ../Doc/library/2to3.rst:42
msgid ""
"A diff against the original source file is printed.  2to3 can also write the "
"needed modifications right back to the source file.  (A backup of the "
"original file is made unless :option:`-n` is also given.)  Writing the "
"changes back is enabled with the :option:`-w` flag:"
msgstr ""

#: ../Doc/library/2to3.rst:51
msgid "After transformation, :file:`example.py` looks like this::"
msgstr "Après transformation, :file:`example.py` ressemble à : ::"

#: ../Doc/library/2to3.rst:59
msgid ""
"Comments and exact indentation are preserved throughout the translation "
"process."
msgstr ""
"Les commentaires et les retraits sont préservés tout au long du processus de "
"traduction."

#: ../Doc/library/2to3.rst:61
msgid ""
"By default, 2to3 runs a set of :ref:`predefined fixers <2to3-fixers>`.  The :"
"option:`-l` flag lists all available fixers.  An explicit set of fixers to "
"run can be given with :option:`-f`.  Likewise the :option:`!-x` explicitly "
"disables a fixer.  The following example runs only the ``imports`` and "
"``has_key`` fixers:"
msgstr ""

#: ../Doc/library/2to3.rst:70
msgid "This command runs every fixer except the ``apply`` fixer:"
msgstr ""

#: ../Doc/library/2to3.rst:76
msgid ""
"Some fixers are *explicit*, meaning they aren't run by default and must be "
"listed on the command line to be run.  Here, in addition to the default "
"fixers, the ``idioms`` fixer is run:"
msgstr ""

#: ../Doc/library/2to3.rst:84
msgid "Notice how passing ``all`` enables all default fixers."
msgstr ""

#: ../Doc/library/2to3.rst:86
msgid ""
"Sometimes 2to3 will find a place in your source code that needs to be "
"changed, but 2to3 cannot fix automatically.  In this case, 2to3 will print a "
"warning beneath the diff for a file.  You should address the warning in "
"order to have compliant 3.x code."
msgstr ""

#: ../Doc/library/2to3.rst:91
msgid ""
"2to3 can also refactor doctests.  To enable this mode, use the :option:`!-d` "
"flag.  Note that *only* doctests will be refactored.  This also doesn't "
"require the module to be valid Python.  For example, doctest like examples "
"in a reST document could also be refactored with this option."
msgstr ""

#: ../Doc/library/2to3.rst:96
msgid ""
"The :option:`!-v` option enables output of more information on the "
"translation process."
msgstr ""

#: ../Doc/library/2to3.rst:99
msgid ""
"Since some print statements can be parsed as function calls or statements, "
"2to3 cannot always read files containing the print function.  When 2to3 "
"detects the presence of the ``from __future__ import print_function`` "
"compiler directive, it modifies its internal grammar to interpret :func:"
"`print` as a function.  This change can also be enabled manually with the :"
"option:`-p` flag.  Use :option:`-p` to run fixers on code that already has "
"had its print statements converted."
msgstr ""

#: ../Doc/library/2to3.rst:107
msgid ""
"The :option:`-o` or :option:`--output-dir` option allows specification of an "
"alternate directory for processed output files to be written to.  The :"
"option:`-n` flag is required when using this as backup files do not make "
"sense when not overwriting the input files."
msgstr ""
"L'option :option:`-o` ou :option:`--output-dir` permet de donner autre "
"répertoire pour les fichiers de sortie en écriture. L'option :option:`-n` "
"est requis quand on les utilise comme fichiers de sauvegarde qui n'ont pas "
"de sens si les fichiers d'entrée ne sont pas écrasés."

#: ../Doc/library/2to3.rst:112
msgid "The :option:`-o` option was added."
msgstr "L'option :option:`-o` a été ajoutée."

#: ../Doc/library/2to3.rst:115
msgid ""
"The :option:`!-W` or :option:`--write-unchanged-files` flag tells 2to3 to "
"always write output files even if no changes were required to the file.  "
"This is most useful with :option:`-o` so that an entire Python source tree "
"is copied with translation from one directory to another. This option "
"implies the :option:`-w` flag as it would not make sense otherwise."
msgstr ""

#: ../Doc/library/2to3.rst:121
msgid "The :option:`!-W` flag was added."
msgstr ""

#: ../Doc/library/2to3.rst:124
msgid ""
"The :option:`--add-suffix` option specifies a string to append to all output "
"filenames.  The :option:`-n` flag is required when specifying this as "
"backups are not necessary when writing to different filenames.  Example:"
msgstr ""

#: ../Doc/library/2to3.rst:132
msgid "Will cause a converted file named ``example.py3`` to be written."
msgstr ""

#: ../Doc/library/2to3.rst:134
msgid "The :option:`--add-suffix` option was added."
msgstr "L'option :option:`--add-suffix` est ajoutée."

#: ../Doc/library/2to3.rst:137
msgid "To translate an entire project from one directory tree to another use:"
msgstr ""

#: ../Doc/library/2to3.rst:147
msgid "Fixers"
msgstr " Correcteurs"

#: ../Doc/library/2to3.rst:149
msgid ""
"Each step of transforming code is encapsulated in a fixer.  The command "
"``2to3 -l`` lists them.  As :ref:`documented above <2to3-using>`, each can "
"be turned on and off individually.  They are described here in more detail."
msgstr ""

#: ../Doc/library/2to3.rst:156
msgid ""
"Removes usage of :func:`apply`.  For example ``apply(function, *args, "
"**kwargs)`` is converted to ``function(*args, **kwargs)``."
msgstr ""

#: ../Doc/library/2to3.rst:161
msgid "Replaces deprecated :mod:`unittest` method names with the correct ones."
msgstr ""
"Remplace les noms de méthodes obsolètes du module :mod:`unittest` par les "
"bons."

#: ../Doc/library/2to3.rst:164
msgid "From"
msgstr "De"

#: ../Doc/library/2to3.rst:164
msgid "To"
msgstr "À"

#: ../Doc/library/2to3.rst:166
msgid "``failUnlessEqual(a, b)``"
msgstr "``failUnlessEqual(a, b)``"

#: ../Doc/library/2to3.rst:166 ../Doc/library/2to3.rst:168
msgid ":meth:`assertEqual(a, b) <unittest.TestCase.assertEqual>`"
msgstr ":meth:`assertEqual(a, b) <unittest.TestCase.assertEqual>`"

#: ../Doc/library/2to3.rst:168
msgid "``assertEquals(a, b)``"
msgstr "``assertEquals(a, b)``"

#: ../Doc/library/2to3.rst:170
msgid "``failIfEqual(a, b)``"
msgstr "``failIfEqual(a, b)``"

#: ../Doc/library/2to3.rst:170 ../Doc/library/2to3.rst:172
msgid ":meth:`assertNotEqual(a, b) <unittest.TestCase.assertNotEqual>`"
msgstr ":meth:`assertNotEqual(a, b) <unittest.TestCase.assertNotEqual>`"

#: ../Doc/library/2to3.rst:172
msgid "``assertNotEquals(a, b)``"
msgstr "``assertNotEquals(a, b)``"

#: ../Doc/library/2to3.rst:174
msgid "``failUnless(a)``"
msgstr "``failUnless(a)``"

#: ../Doc/library/2to3.rst:174 ../Doc/library/2to3.rst:176
msgid ":meth:`assertTrue(a) <unittest.TestCase.assertTrue>`"
msgstr ""

#: ../Doc/library/2to3.rst:176
msgid "``assert_(a)``"
msgstr "``assert_(a)``"

#: ../Doc/library/2to3.rst:178
msgid "``failIf(a)``"
msgstr "``failIf(a)``"

#: ../Doc/library/2to3.rst:178
msgid ":meth:`assertFalse(a) <unittest.TestCase.assertFalse>`"
msgstr ":meth:`assertFalse(a) <unittest.TestCase.assertFalse>`"

#: ../Doc/library/2to3.rst:180
msgid "``failUnlessRaises(exc, cal)``"
msgstr "``failUnlessRaises(exc, cal)``"

#: ../Doc/library/2to3.rst:180
msgid ":meth:`assertRaises(exc, cal) <unittest.TestCase.assertRaises>`"
msgstr ""

#: ../Doc/library/2to3.rst:182
msgid "``failUnlessAlmostEqual(a, b)``"
msgstr "``failUnlessAlmostEqual(a, b)``"

#: ../Doc/library/2to3.rst:182 ../Doc/library/2to3.rst:184
msgid ":meth:`assertAlmostEqual(a, b) <unittest.TestCase.assertAlmostEqual>`"
msgstr ""

#: ../Doc/library/2to3.rst:184
msgid "``assertAlmostEquals(a, b)``"
msgstr "``assertAlmostEquals(a, b)``"

#: ../Doc/library/2to3.rst:186
msgid "``failIfAlmostEqual(a, b)``"
msgstr "``failIfAlmostEqual(a, b)``"

#: ../Doc/library/2to3.rst:186 ../Doc/library/2to3.rst:188
msgid ""
":meth:`assertNotAlmostEqual(a, b) <unittest.TestCase.assertNotAlmostEqual>`"
msgstr ""

#: ../Doc/library/2to3.rst:188
msgid "``assertNotAlmostEquals(a, b)``"
msgstr "``assertNotAlmostEquals(a, b)``"

#: ../Doc/library/2to3.rst:194
msgid "Converts :class:`basestring` to :class:`str`."
msgstr "Convertit une :class:`basestring` en :class:`str`."

#: ../Doc/library/2to3.rst:198
msgid ""
"Converts :class:`buffer` to :class:`memoryview`.  This fixer is optional "
"because the :class:`memoryview` API is similar but not exactly the same as "
"that of :class:`buffer`."
msgstr ""

#: ../Doc/library/2to3.rst:204
msgid ""
"Converts ``callable(x)`` to ``isinstance(x, collections.Callable)``, adding "
"an import to :mod:`collections` if needed. Note ``callable(x)`` has returned "
"in Python 3.2, so if you do not intend to support Python 3.1, you can "
"disable this fixer."
msgstr ""

#: ../Doc/library/2to3.rst:211
msgid ""
"Fixes dictionary iteration methods.  :meth:`dict.iteritems` is converted to :"
"meth:`dict.items`, :meth:`dict.iterkeys` to :meth:`dict.keys`, and :meth:"
"`dict.itervalues` to :meth:`dict.values`.  Similarly, :meth:`dict."
"viewitems`, :meth:`dict.viewkeys` and :meth:`dict.viewvalues` are converted "
"respectively to :meth:`dict.items`, :meth:`dict.keys` and :meth:`dict."
"values`.  It also wraps existing usages of :meth:`dict.items`, :meth:`dict."
"keys`, and :meth:`dict.values` in a call to :class:`list`."
msgstr ""

#: ../Doc/library/2to3.rst:221
msgid "Converts ``except X, T`` to ``except X as T``."
msgstr "Convertit ``except X, T`` en ``except X as T``."

#: ../Doc/library/2to3.rst:225
msgid "Converts the :keyword:`exec` statement to the :func:`exec` function."
msgstr ""

#: ../Doc/library/2to3.rst:229
msgid ""
"Removes usage of :func:`execfile`.  The argument to :func:`execfile` is "
"wrapped in calls to :func:`open`, :func:`compile`, and :func:`exec`."
msgstr ""

#: ../Doc/library/2to3.rst:234
msgid ""
"Changes assignment of :attr:`sys.exitfunc` to use of the :mod:`atexit` "
"module."
msgstr ""
"change l'affectation de :attr:`sys.exitfunc` pour utiliser le module :mod:"
"`atexit`."

#: ../Doc/library/2to3.rst:239
msgid "Wraps :func:`filter` usage in a :class:`list` call."
msgstr ""

#: ../Doc/library/2to3.rst:243
msgid ""
"Fixes function attributes that have been renamed.  For example, "
"``my_function.func_closure`` is converted to ``my_function.__closure__``."
msgstr ""

#: ../Doc/library/2to3.rst:248
msgid "Removes ``from __future__ import new_feature`` statements."
msgstr ""

#: ../Doc/library/2to3.rst:252
msgid "Renames :func:`os.getcwdu` to :func:`os.getcwd`."
msgstr "Renomme :func:`os.getcwdu` en :func:`os.getcwd`."

#: ../Doc/library/2to3.rst:256
msgid "Changes ``dict.has_key(key)`` to ``key in dict``."
msgstr "Change ``dict.has_key(key)`` en ``key in dict``."

#: ../Doc/library/2to3.rst:260
msgid ""
"This optional fixer performs several transformations that make Python code "
"more idiomatic.  Type comparisons like ``type(x) is SomeClass`` and "
"``type(x) == SomeClass`` are converted to ``isinstance(x, SomeClass)``. "
"``while 1`` becomes ``while True``.  This fixer also tries to make use of :"
"func:`sorted` in appropriate places.  For example, this block ::"
msgstr ""

#: ../Doc/library/2to3.rst:269
msgid "is changed to ::"
msgstr "est transformé en : ::"

#: ../Doc/library/2to3.rst:275
msgid "Detects sibling imports and converts them to relative imports."
msgstr ""

#: ../Doc/library/2to3.rst:279
msgid "Handles module renames in the standard library."
msgstr "Gère les renommages de modules dans la bibliothèque standard."

#: ../Doc/library/2to3.rst:283
msgid ""
"Handles other modules renames in the standard library.  It is separate from "
"the :2to3fixer:`imports` fixer only because of technical limitations."
msgstr ""
"Gères d'autres renomages de modules dans la bibliothèque standard. Il est "
"distinct de :2to3fixer:`imports` seulement en raison de limitations "
"techniques."

#: ../Doc/library/2to3.rst:288
msgid "Converts ``input(prompt)`` to ``eval(input(prompt))``."
msgstr "Convertit ``input(prompt)`` en ``eval(input(prompt))``."

#: ../Doc/library/2to3.rst:292
msgid "Converts :func:`intern` to :func:`sys.intern`."
msgstr "Convertit :func:`intern` en :func:`sys.intern`."

#: ../Doc/library/2to3.rst:296
msgid ""
"Fixes duplicate types in the second argument of :func:`isinstance`.  For "
"example, ``isinstance(x, (int, int))`` is converted to ``isinstance(x, "
"(int))``."
msgstr ""

#: ../Doc/library/2to3.rst:302
msgid ""
"Removes imports of :func:`itertools.ifilter`, :func:`itertools.izip`, and :"
"func:`itertools.imap`.  Imports of :func:`itertools.ifilterfalse` are also "
"changed to :func:`itertools.filterfalse`."
msgstr ""

#: ../Doc/library/2to3.rst:308
msgid ""
"Changes usage of :func:`itertools.ifilter`, :func:`itertools.izip`, and :"
"func:`itertools.imap` to their built-in equivalents. :func:`itertools."
"ifilterfalse` is changed to :func:`itertools.filterfalse`."
msgstr ""

#: ../Doc/library/2to3.rst:314
msgid "Renames :class:`long` to :class:`int`."
msgstr "Renomme :class:`long` en :class:`int`."

#: ../Doc/library/2to3.rst:318
msgid ""
"Wraps :func:`map` in a :class:`list` call.  It also changes ``map(None, x)`` "
"to ``list(x)``.  Using ``from future_builtins import map`` disables this "
"fixer."
msgstr ""

#: ../Doc/library/2to3.rst:324
msgid ""
"Converts the old metaclass syntax (``__metaclass__ = Meta`` in the class "
"body) to the new (``class X(metaclass=Meta)``)."
msgstr ""
"Convertit l'ancienne syntaxe de métaclasse (``__metaclass__ = Meta`` dans le "
"corps de la classe) à la nouvelle (``class X(metaclasse=Meta)``)."

#: ../Doc/library/2to3.rst:329
msgid ""
"Fixes old method attribute names.  For example, ``meth.im_func`` is "
"converted to ``meth.__func__``."
msgstr ""

#: ../Doc/library/2to3.rst:334
msgid "Converts the old not-equal syntax, ``<>``, to ``!=``."
msgstr ""

#: ../Doc/library/2to3.rst:338
msgid ""
"Converts the use of iterator's :meth:`~iterator.next` methods to the :func:"
"`next` function.  It also renames :meth:`~iterator.next` methods to :meth:"
"`~iterator.__next__`."
msgstr ""

#: ../Doc/library/2to3.rst:344
msgid "Renames :meth:`__nonzero__` to :meth:`~object.__bool__`."
msgstr "Renomme  :meth:`__nonzero__` en :meth:`~object.__bool__`."

#: ../Doc/library/2to3.rst:348
msgid "Converts octal literals into the new syntax."
msgstr ""
"Convertit les nombre écrits littéralement en octal dans leur nouvelle "
"syntaxe."

#: ../Doc/library/2to3.rst:352
msgid ""
"Add extra parenthesis where they are required in list comprehensions.  For "
"example, ``[x for x in 1, 2]`` becomes ``[x for x in (1, 2)]``."
msgstr ""

#: ../Doc/library/2to3.rst:357
msgid "Converts the :keyword:`print` statement to the :func:`print` function."
msgstr ""

#: ../Doc/library/2to3.rst:361
msgid ""
"Converts ``raise E, V`` to ``raise E(V)``, and ``raise E, V, T`` to ``raise "
"E(V).with_traceback(T)``.  If ``E`` is a tuple, the translation will be "
"incorrect because substituting tuples for exceptions has been removed in "
"Python 3."
msgstr ""

#: ../Doc/library/2to3.rst:367
msgid "Converts :func:`raw_input` to :func:`input`."
msgstr "Convertit :func:`raw_input` en :func:`input`."

#: ../Doc/library/2to3.rst:371
msgid "Handles the move of :func:`reduce` to :func:`functools.reduce`."
msgstr ""

#: ../Doc/library/2to3.rst:375
msgid "Changes :data:`sys.maxint` to :data:`sys.maxsize`."
msgstr "Change :data:`sys.maxint` en :data:`sys.maxsize`."

#: ../Doc/library/2to3.rst:379
msgid "Replaces backtick repr with the :func:`repr` function."
msgstr ""
"Remplace les accents graves utilisés comme ``repr`` par des appels à :func:"
"`repr`."

#: ../Doc/library/2to3.rst:383
msgid ""
"Replaces use of the :class:`set` constructor with set literals.  This fixer "
"is optional."
msgstr ""

#: ../Doc/library/2to3.rst:388
msgid "Renames :exc:`StandardError` to :exc:`Exception`."
msgstr "Renomme :exc:`StandardError` en :exc:`Exception`."

#: ../Doc/library/2to3.rst:392
msgid ""
"Changes the deprecated :data:`sys.exc_value`, :data:`sys.exc_type`, :data:"
"`sys.exc_traceback` to use :func:`sys.exc_info`."
msgstr ""

#: ../Doc/library/2to3.rst:397
msgid "Fixes the API change in generator's :meth:`throw` method."
msgstr ""

#: ../Doc/library/2to3.rst:401
msgid ""
"Removes implicit tuple parameter unpacking.  This fixer inserts temporary "
"variables."
msgstr ""

#: ../Doc/library/2to3.rst:406
msgid ""
"Fixes code broken from the removal of some members in the :mod:`types` "
"module."
msgstr ""

#: ../Doc/library/2to3.rst:411
msgid "Renames :class:`unicode` to :class:`str`."
msgstr "Renomme :class:`unicode` en :class:`str`."

#: ../Doc/library/2to3.rst:415
msgid ""
"Handles the rename of :mod:`urllib` and :mod:`urllib2` to the :mod:`urllib` "
"package."
msgstr ""
"Gère le renommage des paquets :mod:`urllib` et :mod:`urllib2` en :mod:"
"`urllib`"

#: ../Doc/library/2to3.rst:420
msgid ""
"Removes excess whitespace from comma separated items.  This fixer is "
"optional."
msgstr ""

#: ../Doc/library/2to3.rst:425
msgid ""
"Renames :func:`xrange` to :func:`range` and wraps existing :func:`range` "
"calls with :class:`list`."
msgstr ""
"Renomme la fonction :func:`xrange` en :func:`range` et encapsule les appels "
"à la fonction :func:`range` avec des appels à :class:`list`."

#: ../Doc/library/2to3.rst:430
msgid "Changes ``for x in file.xreadlines()`` to ``for x in file``."
msgstr ""

#: ../Doc/library/2to3.rst:434
msgid ""
"Wraps :func:`zip` usage in a :class:`list` call.  This is disabled when "
"``from future_builtins import zip`` appears."
msgstr ""

#: ../Doc/library/2to3.rst:439
msgid ":mod:`lib2to3` - 2to3's library"
msgstr ":mod:`lib2to3` - la bibliothèque de 2to3"

#: ../Doc/library/2to3.rst:450
msgid ""
"The :mod:`lib2to3` API should be considered unstable and may change "
"drastically in the future."
msgstr ""
