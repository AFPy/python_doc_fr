# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/email.charset.rst:2
msgid ":mod:`email.charset`: Representing character sets"
msgstr ""

#: ../Doc/library/email.charset.rst:8
msgid ""
"This module provides a class :class:`Charset` for representing character "
"sets and character set conversions in email messages, as well as a character "
"set registry and several convenience methods for manipulating this registry. "
"Instances of :class:`Charset` are used in several other modules within the :"
"mod:`email` package."
msgstr ""

#: ../Doc/library/email.charset.rst:14
msgid "Import this class from the :mod:`email.charset` module."
msgstr ""

#: ../Doc/library/email.charset.rst:21
msgid "Map character sets to their email properties."
msgstr ""

#: ../Doc/library/email.charset.rst:23
msgid ""
"This class provides information about the requirements imposed on email for "
"a specific character set.  It also provides convenience routines for "
"converting between character sets, given the availability of the applicable "
"codecs.  Given a character set, it will do its best to provide information "
"on how to use that character set in an email message in an RFC-compliant way."
msgstr ""

#: ../Doc/library/email.charset.rst:29
msgid ""
"Certain character sets must be encoded with quoted-printable or base64 when "
"used in email headers or bodies.  Certain character sets must be converted "
"outright, and are not allowed in email."
msgstr ""

#: ../Doc/library/email.charset.rst:33
msgid ""
"Optional *input_charset* is as described below; it is always coerced to "
"lower case.  After being alias normalized it is also used as a lookup into "
"the registry of character sets to find out the header encoding, body "
"encoding, and output conversion codec to be used for the character set.  For "
"example, if *input_charset* is ``iso-8859-1``, then headers and bodies will "
"be encoded using quoted-printable and no output conversion codec is "
"necessary.  If *input_charset* is ``euc-jp``, then headers will be encoded "
"with base64, bodies will not be encoded, but output text will be converted "
"from the ``euc-jp`` character set to the ``iso-2022-jp`` character set."
msgstr ""

#: ../Doc/library/email.charset.rst:43
msgid ":class:`Charset` instances have the following data attributes:"
msgstr ""

#: ../Doc/library/email.charset.rst:48
msgid ""
"The initial character set specified.  Common aliases are converted to their "
"*official* email names (e.g. ``latin_1`` is converted to ``iso-8859-1``).  "
"Defaults to 7-bit ``us-ascii``."
msgstr ""

#: ../Doc/library/email.charset.rst:55
msgid ""
"If the character set must be encoded before it can be used in an email "
"header, this attribute will be set to ``Charset.QP`` (for quoted-printable), "
"``Charset.BASE64`` (for base64 encoding), or ``Charset.SHORTEST`` for the "
"shortest of QP or BASE64 encoding. Otherwise, it will be ``None``."
msgstr ""

#: ../Doc/library/email.charset.rst:64
msgid ""
"Same as *header_encoding*, but describes the encoding for the mail message's "
"body, which indeed may be different than the header encoding. ``Charset."
"SHORTEST`` is not allowed for *body_encoding*."
msgstr ""

#: ../Doc/library/email.charset.rst:71
msgid ""
"Some character sets must be converted before they can be used in email "
"headers or bodies.  If the *input_charset* is one of them, this attribute "
"will contain the name of the character set output will be converted to.  "
"Otherwise, it will be ``None``."
msgstr ""

#: ../Doc/library/email.charset.rst:79
msgid ""
"The name of the Python codec used to convert the *input_charset* to "
"Unicode.  If no conversion codec is necessary, this attribute will be "
"``None``."
msgstr ""

#: ../Doc/library/email.charset.rst:86
msgid ""
"The name of the Python codec used to convert Unicode to the "
"*output_charset*.  If no conversion codec is necessary, this attribute will "
"have the same value as the *input_codec*."
msgstr ""

#: ../Doc/library/email.charset.rst:90
msgid ":class:`Charset` instances also have the following methods:"
msgstr ""

#: ../Doc/library/email.charset.rst:95
msgid "Return the content transfer encoding used for body encoding."
msgstr ""

#: ../Doc/library/email.charset.rst:97
msgid ""
"This is either the string ``quoted-printable`` or ``base64`` depending on "
"the encoding used, or it is a function, in which case you should call the "
"function with a single argument, the Message object being encoded.  The "
"function should then set the :mailheader:`Content-Transfer-Encoding` header "
"itself to whatever is appropriate."
msgstr ""

#: ../Doc/library/email.charset.rst:103
msgid ""
"Returns the string ``quoted-printable`` if *body_encoding* is ``QP``, "
"returns the string ``base64`` if *body_encoding* is ``BASE64``, and returns "
"the string ``7bit`` otherwise."
msgstr ""

#: ../Doc/library/email.charset.rst:110
msgid "Convert the string *s* from the *input_codec* to the *output_codec*."
msgstr ""

#: ../Doc/library/email.charset.rst:115
msgid ""
"Convert a possibly multibyte string to a safely splittable format. *s* is "
"the string to split."
msgstr ""

#: ../Doc/library/email.charset.rst:118
msgid ""
"Uses the *input_codec* to try and convert the string to Unicode, so it can "
"be safely split on character boundaries (even for multibyte characters)."
msgstr ""

#: ../Doc/library/email.charset.rst:121
msgid ""
"Returns the string as-is if it isn't known how to convert *s* to Unicode "
"with the *input_charset*."
msgstr ""

#: ../Doc/library/email.charset.rst:124
msgid ""
"Characters that could not be converted to Unicode will be replaced with the "
"Unicode replacement character ``'U+FFFD'``."
msgstr ""

#: ../Doc/library/email.charset.rst:130
msgid ""
"Convert a splittable string back into an encoded string.  *ustr* is a "
"Unicode string to \"unsplit\"."
msgstr ""

#: ../Doc/library/email.charset.rst:133
msgid ""
"This method uses the proper codec to try and convert the string from Unicode "
"back into an encoded format.  Return the string as-is if it is not Unicode, "
"or if it could not be converted from Unicode."
msgstr ""

#: ../Doc/library/email.charset.rst:137
msgid ""
"Characters that could not be converted from Unicode will be replaced with an "
"appropriate character (usually ``'?'``)."
msgstr ""

#: ../Doc/library/email.charset.rst:140
msgid ""
"If *to_output* is ``True`` (the default), uses *output_codec* to convert to "
"an encoded format.  If *to_output* is ``False``, it uses *input_codec*."
msgstr ""

#: ../Doc/library/email.charset.rst:146
msgid "Return the output character set."
msgstr ""

#: ../Doc/library/email.charset.rst:148
msgid ""
"This is the *output_charset* attribute if that is not ``None``, otherwise it "
"is *input_charset*."
msgstr ""

#: ../Doc/library/email.charset.rst:154
msgid ""
"Return the length of the encoded header string, properly calculating for "
"quoted-printable or base64 encoding."
msgstr ""

#: ../Doc/library/email.charset.rst:160
msgid "Header-encode the string *s*."
msgstr ""

#: ../Doc/library/email.charset.rst:162
msgid ""
"If *convert* is ``True``, the string will be converted from the input "
"charset to the output charset automatically.  This is not useful for "
"multibyte character sets, which have line length issues (multibyte "
"characters must be split on a character, not a byte boundary); use the "
"higher-level :class:`~email.header.Header` class to deal with these issues "
"(see :mod:`email.header`).  *convert* defaults to ``False``."
msgstr ""

#: ../Doc/library/email.charset.rst:169
msgid ""
"The type of encoding (base64 or quoted-printable) will be based on the "
"*header_encoding* attribute."
msgstr ""

#: ../Doc/library/email.charset.rst:175
msgid "Body-encode the string *s*."
msgstr ""

#: ../Doc/library/email.charset.rst:177
msgid ""
"If *convert* is ``True`` (the default), the string will be converted from "
"the input charset to output charset automatically. Unlike :meth:"
"`header_encode`, there are no issues with byte boundaries and multibyte "
"charsets in email bodies, so this is usually pretty safe."
msgstr ""

#: ../Doc/library/email.charset.rst:182
msgid ""
"The type of encoding (base64 or quoted-printable) will be based on the "
"*body_encoding* attribute."
msgstr ""

#: ../Doc/library/email.charset.rst:185
msgid ""
"The :class:`Charset` class also provides a number of methods to support "
"standard operations and built-in functions."
msgstr ""

#: ../Doc/library/email.charset.rst:191
msgid ""
"Returns *input_charset* as a string coerced to lower case. :meth:`__repr__` "
"is an alias for :meth:`__str__`."
msgstr ""

#: ../Doc/library/email.charset.rst:197
msgid ""
"This method allows you to compare two :class:`Charset` instances for "
"equality."
msgstr ""

#: ../Doc/library/email.charset.rst:203
msgid ""
"This method allows you to compare two :class:`Charset` instances for "
"inequality."
msgstr ""

#: ../Doc/library/email.charset.rst:206
msgid ""
"The :mod:`email.charset` module also provides the following functions for "
"adding new entries to the global character set, alias, and codec registries:"
msgstr ""

#: ../Doc/library/email.charset.rst:212
msgid "Add character properties to the global registry."
msgstr ""

#: ../Doc/library/email.charset.rst:214
msgid ""
"*charset* is the input character set, and must be the canonical name of a "
"character set."
msgstr ""

#: ../Doc/library/email.charset.rst:217
msgid ""
"Optional *header_enc* and *body_enc* is either ``Charset.QP`` for quoted-"
"printable, ``Charset.BASE64`` for base64 encoding, ``Charset.SHORTEST`` for "
"the shortest of quoted-printable or base64 encoding, or ``None`` for no "
"encoding.  ``SHORTEST`` is only valid for *header_enc*. The default is "
"``None`` for no encoding."
msgstr ""

#: ../Doc/library/email.charset.rst:223
msgid ""
"Optional *output_charset* is the character set that the output should be in. "
"Conversions will proceed from input charset, to Unicode, to the output "
"charset when the method :meth:`Charset.convert` is called.  The default is "
"to output in the same character set as the input."
msgstr ""

#: ../Doc/library/email.charset.rst:228
msgid ""
"Both *input_charset* and *output_charset* must have Unicode codec entries in "
"the module's character set-to-codec mapping; use :func:`add_codec` to add "
"codecs the module does not know about.  See the :mod:`codecs` module's "
"documentation for more information."
msgstr ""

#: ../Doc/library/email.charset.rst:233
msgid ""
"The global character set registry is kept in the module global dictionary "
"``CHARSETS``."
msgstr ""

#: ../Doc/library/email.charset.rst:239
msgid ""
"Add a character set alias.  *alias* is the alias name, e.g. ``latin-1``. "
"*canonical* is the character set's canonical name, e.g. ``iso-8859-1``."
msgstr ""

#: ../Doc/library/email.charset.rst:242
msgid ""
"The global charset alias registry is kept in the module global dictionary "
"``ALIASES``."
msgstr ""

#: ../Doc/library/email.charset.rst:248
msgid ""
"Add a codec that map characters in the given character set to and from "
"Unicode."
msgstr ""

#: ../Doc/library/email.charset.rst:250
msgid ""
"*charset* is the canonical name of a character set. *codecname* is the name "
"of a Python codec, as appropriate for the second argument to the :func:"
"`unicode` built-in, or to the :meth:`~unicode.encode` method of a Unicode "
"string."
msgstr ""
