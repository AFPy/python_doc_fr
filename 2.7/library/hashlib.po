# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/hashlib.rst:2
msgid ":mod:`hashlib` --- Secure hashes and message digests"
msgstr ""

#: ../Doc/library/hashlib.rst:16
msgid "**Source code:** :source:`Lib/hashlib.py`"
msgstr "**Code source :** :source:`Lib/hashlib.py`"

#: ../Doc/library/hashlib.rst:20
msgid ""
"This module implements a common interface to many different secure hash and "
"message digest algorithms.  Included are the FIPS secure hash algorithms "
"SHA1, SHA224, SHA256, SHA384, and SHA512 (defined in FIPS 180-2) as well as "
"RSA's MD5 algorithm (defined in Internet :rfc:`1321`). The terms secure hash "
"and message digest are interchangeable.  Older algorithms were called "
"message digests.  The modern term is secure hash."
msgstr ""

#: ../Doc/library/hashlib.rst:29
msgid ""
"If you want the adler32 or crc32 hash functions, they are available in the :"
"mod:`zlib` module."
msgstr ""

#: ../Doc/library/hashlib.rst:34
msgid ""
"Some algorithms have known hash collision weaknesses, refer to the \"See also"
"\" section at the end."
msgstr ""

#: ../Doc/library/hashlib.rst:37
msgid ""
"There is one constructor method named for each type of :dfn:`hash`.  All "
"return a hash object with the same simple interface. For example: use :func:"
"`sha1` to create a SHA1 hash object. You can now feed this object with "
"arbitrary strings using the :meth:`update` method.  At any point you can ask "
"it for the :dfn:`digest` of the concatenation of the strings fed to it so "
"far using the :meth:`digest` or :meth:`hexdigest` methods."
msgstr ""

#: ../Doc/library/hashlib.rst:46
msgid ""
"Constructors for hash algorithms that are always present in this module are :"
"func:`md5`, :func:`sha1`, :func:`sha224`, :func:`sha256`, :func:`sha384`, "
"and :func:`sha512`.  Additional algorithms may also be available depending "
"upon the OpenSSL library that Python uses on your platform."
msgstr ""

#: ../Doc/library/hashlib.rst:51
msgid ""
"For example, to obtain the digest of the string ``'Nobody inspects the "
"spammish repetition'``:"
msgstr ""

#: ../Doc/library/hashlib.rst:65
msgid "More condensed:"
msgstr ""

#: ../Doc/library/hashlib.rst:70
msgid ""
"A generic :func:`new` constructor that takes the string name of the desired "
"algorithm as its first parameter also exists to allow access to the above "
"listed hashes as well as any other algorithms that your OpenSSL library may "
"offer.  The named constructors are much faster than :func:`new` and should "
"be preferred."
msgstr ""

#: ../Doc/library/hashlib.rst:75
msgid "Using :func:`new` with an algorithm provided by OpenSSL:"
msgstr ""

#: ../Doc/library/hashlib.rst:82
msgid "This module provides the following constant attribute:"
msgstr ""

#: ../Doc/library/hashlib.rst:86
msgid ""
"A tuple providing the names of the hash algorithms guaranteed to be "
"supported by this module."
msgstr ""

#: ../Doc/library/hashlib.rst:93
msgid ""
"A set containing the names of the hash algorithms guaranteed to be supported "
"by this module on all platforms."
msgstr ""

#: ../Doc/library/hashlib.rst:100
msgid ""
"A set containing the names of the hash algorithms that are available in the "
"running Python interpreter.  These names will be recognized when passed to :"
"func:`new`.  :attr:`algorithms_guaranteed` will always be a subset.  The "
"same algorithm may appear multiple times in this set under different names "
"(thanks to OpenSSL)."
msgstr ""

#: ../Doc/library/hashlib.rst:109
msgid ""
"The following values are provided as constant attributes of the hash objects "
"returned by the constructors:"
msgstr ""

#: ../Doc/library/hashlib.rst:115
msgid "The size of the resulting hash in bytes."
msgstr ""

#: ../Doc/library/hashlib.rst:119
msgid "The internal block size of the hash algorithm in bytes."
msgstr ""

#: ../Doc/library/hashlib.rst:121
msgid "A hash object has the following methods:"
msgstr ""

#: ../Doc/library/hashlib.rst:126
msgid ""
"Update the hash object with the string *arg*.  Repeated calls are equivalent "
"to a single call with the concatenation of all the arguments: ``m.update(a); "
"m.update(b)`` is equivalent to ``m.update(a+b)``."
msgstr ""

#: ../Doc/library/hashlib.rst:130
msgid ""
"The Python GIL is released to allow other threads to run while hash updates "
"on data larger than 2048 bytes is taking place when using hash algorithms "
"supplied by OpenSSL."
msgstr ""

#: ../Doc/library/hashlib.rst:138
msgid ""
"Return the digest of the strings passed to the :meth:`update` method so far. "
"This is a string of :attr:`digest_size` bytes which may contain non-ASCII "
"characters, including null bytes."
msgstr ""

#: ../Doc/library/hashlib.rst:145
msgid ""
"Like :meth:`digest` except the digest is returned as a string of double "
"length, containing only hexadecimal digits.  This may  be used to exchange "
"the value safely in email or other non-binary environments."
msgstr ""

#: ../Doc/library/hashlib.rst:152
msgid ""
"Return a copy (\"clone\") of the hash object.  This can be used to "
"efficiently compute the digests of strings that share a common initial "
"substring."
msgstr ""

#: ../Doc/library/hashlib.rst:157
msgid "Key derivation"
msgstr ""

#: ../Doc/library/hashlib.rst:159
msgid ""
"Key derivation and key stretching algorithms are designed for secure "
"password hashing. Naive algorithms such as ``sha1(password)`` are not "
"resistant against brute-force attacks. A good password hashing function must "
"be tunable, slow, and include a `salt <https://en.wikipedia.org/wiki/Salt_"
"%28cryptography%29>`_."
msgstr ""

#: ../Doc/library/hashlib.rst:167
msgid ""
"The function provides PKCS#5 password-based key derivation function 2. It "
"uses HMAC as pseudorandom function."
msgstr ""

#: ../Doc/library/hashlib.rst:170
msgid ""
"The string *name* is the desired name of the hash digest algorithm for HMAC, "
"e.g. 'sha1' or 'sha256'. *password* and *salt* are interpreted as buffers of "
"bytes. Applications and libraries should limit *password* to a sensible "
"value (e.g. 1024). *salt* should be about 16 or more bytes from a proper "
"source, e.g. :func:`os.urandom`."
msgstr ""

#: ../Doc/library/hashlib.rst:176
msgid ""
"The number of *rounds* should be chosen based on the hash algorithm and "
"computing power. As of 2013, at least 100,000 rounds of SHA-256 is suggested."
msgstr ""

#: ../Doc/library/hashlib.rst:179
msgid ""
"*dklen* is the length of the derived key. If *dklen* is ``None`` then the "
"digest size of the hash algorithm *name* is used, e.g. 64 for SHA-512."
msgstr ""

#: ../Doc/library/hashlib.rst:191
msgid ""
"A fast implementation of *pbkdf2_hmac* is available with OpenSSL.  The "
"Python implementation uses an inline version of :mod:`hmac`. It is about "
"three times slower and doesn't release the GIL."
msgstr ""

#: ../Doc/library/hashlib.rst:199
msgid "Module :mod:`hmac`"
msgstr ""

#: ../Doc/library/hashlib.rst:199
msgid "A module to generate message authentication codes using hashes."
msgstr ""

#: ../Doc/library/hashlib.rst:202
msgid "Module :mod:`base64`"
msgstr "Module :mod:`base64`"

#: ../Doc/library/hashlib.rst:202
msgid "Another way to encode binary hashes for non-binary environments."
msgstr ""

#: ../Doc/library/hashlib.rst:205
msgid "http://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf"
msgstr ""

#: ../Doc/library/hashlib.rst:205
msgid "The FIPS 180-2 publication on Secure Hash Algorithms."
msgstr ""

#: ../Doc/library/hashlib.rst:208
msgid ""
"https://en.wikipedia.org/wiki/"
"Cryptographic_hash_function#Cryptographic_hash_algorithms"
msgstr ""

#: ../Doc/library/hashlib.rst:208
msgid ""
"Wikipedia article with information on which algorithms have known issues and "
"what that means regarding their use."
msgstr ""
