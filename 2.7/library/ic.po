# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/ic.rst:2
msgid ":mod:`ic` --- Access to the Mac OS X Internet Config"
msgstr ""

#: ../Doc/library/ic.rst:10
msgid ""
"This module provides access to various internet-related preferences set "
"through :program:`System Preferences` or the :program:`Finder`."
msgstr ""

#: ../Doc/library/ic.rst:15
msgid "This module has been removed in Python 3.x."
msgstr ""

#: ../Doc/library/ic.rst:20
msgid ""
"There is a low-level companion module :mod:`icglue` which provides the basic "
"Internet Config access functionality.  This low-level module is not "
"documented, but the docstrings of the routines document the parameters and "
"the routine names are the same as for the Pascal or C API to Internet "
"Config, so the standard IC programmers' documentation can be used if this "
"module is needed."
msgstr ""

#: ../Doc/library/ic.rst:26
msgid ""
"The :mod:`ic` module defines the :exc:`error` exception and symbolic names "
"for all error codes Internet Config can produce; see the source for details."
msgstr ""

#: ../Doc/library/ic.rst:32
msgid "Exception raised on errors in the :mod:`ic` module."
msgstr ""

#: ../Doc/library/ic.rst:34
msgid "The :mod:`ic` module defines the following class and function:"
msgstr ""

#: ../Doc/library/ic.rst:39
msgid ""
"Create an Internet Config object. The signature is a 4-character creator "
"code of the current application (default ``'Pyth'``) which may influence "
"some of ICs settings. The optional *ic* argument is a low-level ``icglue."
"icinstance`` created beforehand, this may be useful if you want to get "
"preferences from a different config file, etc."
msgstr ""

#: ../Doc/library/ic.rst:52
msgid ""
"These functions are \"shortcuts\" to the methods of the same name, described "
"below."
msgstr ""

#: ../Doc/library/ic.rst:57
msgid "IC Objects"
msgstr ""

#: ../Doc/library/ic.rst:59
msgid ""
":class:`IC` objects have a mapping interface, hence to obtain the mail "
"address you simply get ``ic['MailAddress']``. Assignment also works, and "
"changes the option in the configuration file."
msgstr ""

#: ../Doc/library/ic.rst:63
msgid ""
"The module knows about various datatypes, and converts the internal IC "
"representation to a \"logical\" Python data structure. Running the :mod:`ic` "
"module standalone will run a test program that lists all keys and values in "
"your IC database, this will have to serve as documentation."
msgstr ""

#: ../Doc/library/ic.rst:68
msgid ""
"If the module does not know how to represent the data it returns an instance "
"of the ``ICOpaqueData`` type, with the raw data in its :attr:`data` "
"attribute. Objects of this type are also acceptable values for assignment."
msgstr ""

#: ../Doc/library/ic.rst:72
msgid ""
"Besides the dictionary interface, :class:`IC` objects have the following "
"methods:"
msgstr ""

#: ../Doc/library/ic.rst:78
msgid ""
"Parse the given URL, launch the correct application and pass it the URL. The "
"optional *hint* can be a scheme name such as ``'mailto:'``, in which case "
"incomplete URLs are completed with this scheme.  If *hint* is not provided, "
"incomplete URLs are invalid."
msgstr ""

#: ../Doc/library/ic.rst:86
msgid ""
"Find a URL somewhere in *data* and return start position, end position and "
"the URL. The optional *start* and *end* can be used to limit the search, so "
"for instance if a user clicks in a long text field you can pass the whole "
"text field and the click-position in *start* and this routine will return "
"the whole URL in which the user clicked.  As above, *hint* is an optional "
"scheme used to complete incomplete URLs."
msgstr ""

#: ../Doc/library/ic.rst:96
msgid ""
"Return the mapping entry for the given *file*, which can be passed as either "
"a filename or an :func:`FSSpec` result, and which need not exist."
msgstr ""

#: ../Doc/library/ic.rst:99
msgid ""
"The mapping entry is returned as a tuple ``(version, type, creator, "
"postcreator, flags, extension, appname, postappname, mimetype, entryname)``, "
"where *version* is the entry version number, *type* is the 4-character "
"filetype, *creator* is the 4-character creator type, *postcreator* is the 4-"
"character creator code of an optional application to post-process the file "
"after downloading, *flags* are various bits specifying whether to transfer "
"in binary or ascii and such, *extension* is the filename extension for this "
"file type, *appname* is the printable name of the application to which this "
"file belongs, *postappname* is the name of the postprocessing application, "
"*mimetype* is the MIME type of this file and *entryname* is the name of this "
"entry."
msgstr ""

#: ../Doc/library/ic.rst:113
msgid ""
"Return the mapping entry for files with given 4-character *type* and "
"*creator* codes. The optional *filename* may be specified to further help "
"finding the correct entry (if the creator code is ``'????'``, for instance)."
msgstr ""

#: ../Doc/library/ic.rst:117
msgid "The mapping entry is returned in the same format as for *mapfile*."
msgstr ""

#: ../Doc/library/ic.rst:122
msgid ""
"Given an existing *file*, specified either as a filename or as an :func:"
"`FSSpec` result, set its creator and type correctly based on its extension.  "
"The finder is told about the change, so the finder icon will be updated "
"quickly."
msgstr ""
