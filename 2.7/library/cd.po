# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/cd.rst:3
msgid ":mod:`cd` --- CD-ROM access on SGI systems"
msgstr ""

#: ../Doc/library/cd.rst:11
msgid "The :mod:`cd` module has been removed in Python 3."
msgstr ""

#: ../Doc/library/cd.rst:15
msgid ""
"This module provides an interface to the Silicon Graphics CD library. It is "
"available only on Silicon Graphics systems."
msgstr ""

#: ../Doc/library/cd.rst:18
msgid ""
"The way the library works is as follows.  A program opens the CD-ROM device "
"with :func:`.open` and creates a parser to parse the data from the CD with :"
"func:`createparser`.  The object returned by :func:`.open` can be used to "
"read data from the CD, but also to get status information for the CD-ROM "
"device, and to get information about the CD, such as the table of contents.  "
"Data from the CD is passed to the parser, which parses the frames, and calls "
"any callback functions that have previously been added."
msgstr ""

#: ../Doc/library/cd.rst:26
msgid ""
"An audio CD is divided into :dfn:`tracks` or :dfn:`programs` (the terms are "
"used interchangeably).  Tracks can be subdivided into :dfn:`indices`.  An "
"audio CD contains a :dfn:`table of contents` which gives the starts of the "
"tracks on the CD.  Index 0 is usually the pause before the start of a "
"track.  The start of the track as given by the table of contents is normally "
"the start of index 1."
msgstr ""

#: ../Doc/library/cd.rst:32
msgid ""
"Positions on a CD can be represented in two ways.  Either a frame number or "
"a tuple of three values, minutes, seconds and frames.  Most functions use "
"the latter representation.  Positions can be both relative to the beginning "
"of the CD, and to the beginning of the track."
msgstr ""

#: ../Doc/library/cd.rst:37
msgid "Module :mod:`cd` defines the following functions and constants:"
msgstr ""

#: ../Doc/library/cd.rst:42
msgid ""
"Create and return an opaque parser object.  The methods of the parser object "
"are described below."
msgstr ""

#: ../Doc/library/cd.rst:48
msgid ""
"Converts a ``(minutes, seconds, frames)`` triple representing time in "
"absolute time code into the corresponding CD frame number."
msgstr ""

#: ../Doc/library/cd.rst:54
msgid ""
"Open the CD-ROM device.  The return value is an opaque player object; "
"methods of the player object are described below.  The device is the name of "
"the SCSI device file, e.g. ``'/dev/scsi/sc0d4l0'``, or ``None``.  If omitted "
"or ``None``, the hardware inventory is consulted to locate a CD-ROM drive.  "
"The *mode*, if not omitted, should be the string ``'r'``."
msgstr ""

#: ../Doc/library/cd.rst:60
msgid "The module defines the following variables:"
msgstr ""

#: ../Doc/library/cd.rst:65
msgid "Exception raised on various errors."
msgstr ""

#: ../Doc/library/cd.rst:70
msgid ""
"The size of one frame's worth of audio data.  This is the size of the audio "
"data as passed to the callback of type ``audio``."
msgstr ""

#: ../Doc/library/cd.rst:76
msgid "The size of one uninterpreted frame of audio data."
msgstr ""

#: ../Doc/library/cd.rst:78
msgid "The following variables are states as returned by :func:`getstatus`:"
msgstr ""

#: ../Doc/library/cd.rst:83
msgid "The drive is ready for operation loaded with an audio CD."
msgstr ""

#: ../Doc/library/cd.rst:88
msgid "The drive does not have a CD loaded."
msgstr ""

#: ../Doc/library/cd.rst:93
msgid ""
"The drive is loaded with a CD-ROM.  Subsequent play or read operations will "
"return I/O errors."
msgstr ""

#: ../Doc/library/cd.rst:99
msgid ""
"An error occurred while trying to read the disc or its table of contents."
msgstr ""

#: ../Doc/library/cd.rst:104
msgid ""
"The drive is in CD player mode playing an audio CD through its audio jacks."
msgstr ""

#: ../Doc/library/cd.rst:109
msgid "The drive is in CD layer mode with play paused."
msgstr ""

#: ../Doc/library/cd.rst:114
msgid ""
"The equivalent of :const:`PAUSED` on older (non 3301) model Toshiba CD-ROM "
"drives.  Such drives have never been shipped by SGI."
msgstr ""

#: ../Doc/library/cd.rst:127
msgid ""
"Integer constants describing the various types of parser callbacks that can "
"be set by the :meth:`addcallback` method of CD parser objects (see below)."
msgstr ""

#: ../Doc/library/cd.rst:134
msgid "Player Objects"
msgstr ""

#: ../Doc/library/cd.rst:136
msgid "Player objects (returned by :func:`.open`) have the following methods:"
msgstr ""

#: ../Doc/library/cd.rst:141
msgid ""
"Unlocks the eject button on the CD-ROM drive permitting the user to eject "
"the caddy if desired."
msgstr ""

#: ../Doc/library/cd.rst:147
msgid ""
"Returns the best value to use for the *num_frames* parameter of the :meth:"
"`readda` method.  Best is defined as the value that permits a continuous "
"flow of data from the CD-ROM drive."
msgstr ""

#: ../Doc/library/cd.rst:154
msgid ""
"Frees the resources associated with the player object.  After calling :meth:"
"`close`, the methods of the object should no longer be used."
msgstr ""

#: ../Doc/library/cd.rst:160
msgid "Ejects the caddy from the CD-ROM drive."
msgstr ""

#: ../Doc/library/cd.rst:165
msgid ""
"Returns information pertaining to the current state of the CD-ROM drive.  "
"The returned information is a tuple with the following values: *state*, "
"*track*, *rtime*, *atime*, *ttime*, *first*, *last*, *scsi_audio*, "
"*cur_block*. *rtime* is the time relative to the start of the current track; "
"*atime* is the time relative to the beginning of the disc; *ttime* is the "
"total time on the disc. For more information on the meaning of the values, "
"see the man page :manpage:`CDgetstatus(3dm)`. The value of *state* is one of "
"the following: :const:`ERROR`, :const:`NODISC`, :const:`READY`, :const:"
"`PLAYING`, :const:`PAUSED`, :const:`STILL`, or :const:`CDROM`."
msgstr ""

#: ../Doc/library/cd.rst:178
msgid ""
"Returns information about the specified track.  The returned information is "
"a tuple consisting of two elements, the start time of the track and the "
"duration of the track."
msgstr ""

#: ../Doc/library/cd.rst:185
msgid ""
"Converts a minutes, seconds, frames triple representing a time in absolute "
"time code into the corresponding logical block number for the given CD-ROM "
"drive. You should use :func:`msftoframe` rather than :meth:`msftoblock` for "
"comparing times.  The logical block number differs from the frame number by "
"an offset required by certain CD-ROM drives."
msgstr ""

#: ../Doc/library/cd.rst:194
msgid ""
"Starts playback of an audio CD in the CD-ROM drive at the specified track.  "
"The audio output appears on the CD-ROM drive's headphone and audio jacks (if "
"fitted).  Play stops at the end of the disc. *start* is the number of the "
"track at which to start playing the CD; if *play* is 0, the CD will be set "
"to an initial paused state.  The method :meth:`togglepause` can then be used "
"to commence play."
msgstr ""

#: ../Doc/library/cd.rst:204
msgid ""
"Like :meth:`play`, except that the start is given in minutes, seconds, and "
"frames instead of a track number."
msgstr ""

#: ../Doc/library/cd.rst:210
msgid "Like :meth:`play`, except that playing stops at the end of the track."
msgstr ""

#: ../Doc/library/cd.rst:215
msgid ""
"Like :meth:`play`, except that playing begins at the specified absolute time "
"and ends at the end of the specified track."
msgstr ""

#: ../Doc/library/cd.rst:221
msgid ""
"Locks the eject button on the CD-ROM drive thus preventing the user from "
"arbitrarily ejecting the caddy."
msgstr ""

#: ../Doc/library/cd.rst:227
msgid ""
"Reads the specified number of frames from an audio CD mounted in the CD-ROM "
"drive.  The return value is a string representing the audio frames.  This "
"string can be passed unaltered to the :meth:`parseframe` method of the "
"parser object."
msgstr ""

#: ../Doc/library/cd.rst:234
msgid ""
"Sets the pointer that indicates the starting point of the next read of "
"digital audio data from a CD-ROM.  The pointer is set to an absolute time "
"code location specified in *minutes*, *seconds*, and *frames*.  The return "
"value is the logical block number to which the pointer has been set."
msgstr ""

#: ../Doc/library/cd.rst:242
msgid ""
"Sets the pointer that indicates the starting point of the next read of "
"digital audio data from a CD-ROM.  The pointer is set to the specified "
"logical block number.  The return value is the logical block number to which "
"the pointer has been set."
msgstr ""

#: ../Doc/library/cd.rst:250
msgid ""
"Sets the pointer that indicates the starting point of the next read of "
"digital audio data from a CD-ROM.  The pointer is set to the specified "
"track.  The return value is the logical block number to which the pointer "
"has been set."
msgstr ""

#: ../Doc/library/cd.rst:257
msgid "Stops the current playing operation."
msgstr ""

#: ../Doc/library/cd.rst:262
msgid "Pauses the CD if it is playing, and makes it play if it is paused."
msgstr ""

#: ../Doc/library/cd.rst:268
msgid "Parser Objects"
msgstr ""

#: ../Doc/library/cd.rst:270
msgid ""
"Parser objects (returned by :func:`createparser`) have the following methods:"
msgstr ""

#: ../Doc/library/cd.rst:275
msgid ""
"Adds a callback for the parser.  The parser has callbacks for eight "
"different types of data in the digital audio data stream.  Constants for "
"these types are defined at the :mod:`cd` module level (see above). The "
"callback is called as follows: ``func(arg, type, data)``, where *arg* is the "
"user supplied argument, *type* is the particular type of callback, and "
"*data* is the data returned for this *type* of callback.  The type of the "
"data depends on the *type* of callback as follows:"
msgstr ""

#: ../Doc/library/cd.rst:284
msgid "Type"
msgstr ""

#: ../Doc/library/cd.rst:284
msgid "Value"
msgstr "Valeur"

#: ../Doc/library/cd.rst:286
msgid "``audio``"
msgstr ""

#: ../Doc/library/cd.rst:286
msgid "String which can be passed unmodified to :func:`al.writesamps`."
msgstr ""

#: ../Doc/library/cd.rst:289
msgid "``pnum``"
msgstr ""

#: ../Doc/library/cd.rst:289
msgid "Integer giving the program (track) number."
msgstr ""

#: ../Doc/library/cd.rst:291
msgid "``index``"
msgstr ""

#: ../Doc/library/cd.rst:291
msgid "Integer giving the index number."
msgstr ""

#: ../Doc/library/cd.rst:293
msgid "``ptime``"
msgstr ""

#: ../Doc/library/cd.rst:293
msgid "Tuple consisting of the program time in minutes, seconds, and frames."
msgstr ""

#: ../Doc/library/cd.rst:296
msgid "``atime``"
msgstr ""

#: ../Doc/library/cd.rst:296
msgid "Tuple consisting of the absolute time in minutes, seconds, and frames."
msgstr ""

#: ../Doc/library/cd.rst:299
msgid "``catalog``"
msgstr ""

#: ../Doc/library/cd.rst:299
msgid "String of 13 characters, giving the catalog number of the CD."
msgstr ""

#: ../Doc/library/cd.rst:302
msgid "``ident``"
msgstr ""

#: ../Doc/library/cd.rst:302
msgid ""
"String of 12 characters, giving the ISRC identification number of the "
"recording. The string consists of two characters country code, three "
"characters owner code, two characters giving the year, and five characters "
"giving a serial number."
msgstr ""

#: ../Doc/library/cd.rst:309
msgid "``control``"
msgstr ""

#: ../Doc/library/cd.rst:309
msgid "Integer giving the control bits from the CD subcode data"
msgstr ""

#: ../Doc/library/cd.rst:316
msgid ""
"Deletes the parser and frees the memory it was using.  The object should not "
"be used after this call.  This call is done automatically when the last "
"reference to the object is removed."
msgstr ""

#: ../Doc/library/cd.rst:323
msgid ""
"Parses one or more frames of digital audio data from a CD such as returned "
"by :meth:`readda`.  It determines which subcodes are present in the data.  "
"If these subcodes have changed since the last frame, then :meth:`parseframe` "
"executes a callback of the appropriate type passing to it the subcode data "
"found in the frame. Unlike the C function, more than one frame of digital "
"audio data can be passed to this method."
msgstr ""

#: ../Doc/library/cd.rst:333
msgid "Removes the callback for the given *type*."
msgstr ""

#: ../Doc/library/cd.rst:338
msgid ""
"Resets the fields of the parser used for tracking subcodes to an initial "
"state. :meth:`resetparser` should be called after the disc has been changed."
msgstr ""
