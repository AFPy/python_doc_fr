# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/anydbm.rst:2
msgid ":mod:`anydbm` --- Generic access to DBM-style databases"
msgstr ""

#: ../Doc/library/anydbm.rst:9
msgid ""
"The :mod:`anydbm` module has been renamed to :mod:`dbm` in Python 3.  The :"
"term:`2to3` tool will automatically adapt imports when converting your "
"sources to Python 3."
msgstr ""

#: ../Doc/library/anydbm.rst:20
msgid ""
":mod:`anydbm` is a generic interface to variants of the DBM database --- :"
"mod:`dbhash` (requires :mod:`bsddb`), :mod:`gdbm`, or :mod:`dbm`.  If none "
"of these modules is installed, the slow-but-simple implementation in module :"
"mod:`dumbdbm` will be used."
msgstr ""

#: ../Doc/library/anydbm.rst:28
msgid "Open the database file *filename* and return a corresponding object."
msgstr ""

#: ../Doc/library/anydbm.rst:30
msgid ""
"If the database file already exists, the :mod:`whichdb` module is used to "
"determine its type and the appropriate module is used; if it does not exist, "
"the first module listed above that can be imported is used."
msgstr ""

#: ../Doc/library/anydbm.rst:34
msgid "The optional *flag* argument must be one of these values:"
msgstr ""

#: ../Doc/library/anydbm.rst:37
msgid "Value"
msgstr "Valeur"

#: ../Doc/library/anydbm.rst:37
msgid "Meaning"
msgstr "Signification"

#: ../Doc/library/anydbm.rst:39
msgid "``'r'``"
msgstr "``'r'``"

#: ../Doc/library/anydbm.rst:39
msgid "Open existing database for reading only (default)"
msgstr ""

#: ../Doc/library/anydbm.rst:42
msgid "``'w'``"
msgstr "``'w'``"

#: ../Doc/library/anydbm.rst:42
msgid "Open existing database for reading and writing"
msgstr ""

#: ../Doc/library/anydbm.rst:45
msgid "``'c'``"
msgstr "``'c'``"

#: ../Doc/library/anydbm.rst:45
msgid "Open database for reading and writing, creating it if it doesn't exist"
msgstr ""

#: ../Doc/library/anydbm.rst:48
msgid "``'n'``"
msgstr "``'n'``"

#: ../Doc/library/anydbm.rst:48
msgid "Always create a new, empty database, open for reading and writing"
msgstr ""

#: ../Doc/library/anydbm.rst:52
msgid "If not specified, the default value is ``'r'``."
msgstr ""

#: ../Doc/library/anydbm.rst:54
msgid ""
"The optional *mode* argument is the Unix mode of the file, used only when "
"the database has to be created.  It defaults to octal ``0666`` (and will be "
"modified by the prevailing umask)."
msgstr ""

#: ../Doc/library/anydbm.rst:61
msgid ""
"A tuple containing the exceptions that can be raised by each of the "
"supported modules, with a unique exception also named :exc:`anydbm.error` as "
"the first item --- the latter is used when :exc:`anydbm.error` is raised."
msgstr ""

#: ../Doc/library/anydbm.rst:65
msgid ""
"The object returned by :func:`.open` supports most of the same functionality "
"as dictionaries; keys and their corresponding values can be stored, "
"retrieved, and deleted, and the :meth:`has_key` and :meth:`keys` methods are "
"available.  Keys and values must always be strings."
msgstr ""

#: ../Doc/library/anydbm.rst:70
msgid ""
"The following example records some hostnames and a corresponding title,  and "
"then prints out the contents of the database::"
msgstr ""

#: ../Doc/library/anydbm.rst:95
msgid ""
"In addition to the dictionary-like methods, ``anydbm`` objects provide the "
"following method:"
msgstr ""

#: ../Doc/library/anydbm.rst:100
msgid "Close the ``anydbm`` database."
msgstr ""

#: ../Doc/library/anydbm.rst:106
msgid "Module :mod:`dbhash`"
msgstr ""

#: ../Doc/library/anydbm.rst:106
msgid "BSD ``db`` database interface."
msgstr ""

#: ../Doc/library/anydbm.rst:109
msgid "Module :mod:`dbm`"
msgstr ""

#: ../Doc/library/anydbm.rst:109
msgid "Standard Unix database interface."
msgstr ""

#: ../Doc/library/anydbm.rst:112
msgid "Module :mod:`dumbdbm`"
msgstr ""

#: ../Doc/library/anydbm.rst:112
msgid "Portable implementation of the ``dbm`` interface."
msgstr ""

#: ../Doc/library/anydbm.rst:115
msgid "Module :mod:`gdbm`"
msgstr ""

#: ../Doc/library/anydbm.rst:115
msgid "GNU database interface, based on the ``dbm`` interface."
msgstr ""

#: ../Doc/library/anydbm.rst:118
msgid "Module :mod:`shelve`"
msgstr ""

#: ../Doc/library/anydbm.rst:118
msgid ""
"General object persistence built on top of  the Python ``dbm`` interface."
msgstr ""

#: ../Doc/library/anydbm.rst:120
msgid "Module :mod:`whichdb`"
msgstr ""

#: ../Doc/library/anydbm.rst:121
msgid "Utility module used to determine the type of an existing database."
msgstr ""
