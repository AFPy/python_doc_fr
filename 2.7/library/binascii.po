# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/binascii.rst:3
msgid ":mod:`binascii` --- Convert between binary and ASCII"
msgstr ""

#: ../Doc/library/binascii.rst:15
msgid ""
"The :mod:`binascii` module contains a number of methods to convert between "
"binary and various ASCII-encoded binary representations. Normally, you will "
"not use these functions directly but use wrapper modules like :mod:`uu`, :"
"mod:`base64`, or :mod:`binhex` instead. The :mod:`binascii` module contains "
"low-level functions written in C for greater speed that are used by the "
"higher-level modules."
msgstr ""

#: ../Doc/library/binascii.rst:22
msgid "The :mod:`binascii` module defines the following functions:"
msgstr ""

#: ../Doc/library/binascii.rst:27
msgid ""
"Convert a single line of uuencoded data back to binary and return the binary "
"data. Lines normally contain 45 (binary) bytes, except for the last line. "
"Line data may be followed by whitespace."
msgstr ""

#: ../Doc/library/binascii.rst:34
msgid ""
"Convert binary data to a line of ASCII characters, the return value is the "
"converted line, including a newline char. The length of *data* should be at "
"most 45."
msgstr ""

#: ../Doc/library/binascii.rst:41
msgid ""
"Convert a block of base64 data back to binary and return the binary data. "
"More than one line may be passed at a time."
msgstr ""

#: ../Doc/library/binascii.rst:47
msgid ""
"Convert binary data to a line of ASCII characters in base64 coding. The "
"return value is the converted line, including a newline char.  The newline "
"is added because the original use case for this function was to feed it a "
"series of 57 byte input lines to get output lines that conform to the MIME-"
"base64 standard.  Otherwise the output conforms to :rfc:`3548`."
msgstr ""

#: ../Doc/library/binascii.rst:56
msgid ""
"Convert a block of quoted-printable data back to binary and return the "
"binary data. More than one line may be passed at a time. If the optional "
"argument *header* is present and true, underscores will be decoded as spaces."
msgstr ""

#: ../Doc/library/binascii.rst:63
msgid ""
"Convert binary data to a line(s) of ASCII characters in quoted-printable "
"encoding.  The return value is the converted line(s). If the optional "
"argument *quotetabs* is present and true, all tabs and spaces will be "
"encoded.   If the optional argument *istext* is present and true, newlines "
"are not encoded but trailing whitespace will be encoded. If the optional "
"argument *header* is present and true, spaces will be encoded as underscores "
"per RFC1522. If the optional argument *header* is present and false, newline "
"characters will be encoded as well; otherwise linefeed conversion might "
"corrupt the binary data stream."
msgstr ""

#: ../Doc/library/binascii.rst:76
msgid ""
"Convert binhex4 formatted ASCII data to binary, without doing RLE-"
"decompression. The string should contain a complete number of binary bytes, "
"or (in case of the last portion of the binhex4 data) have the remaining bits "
"zero."
msgstr ""

#: ../Doc/library/binascii.rst:83
msgid ""
"Perform RLE-decompression on the data, as per the binhex4 standard. The "
"algorithm uses ``0x90`` after a byte as a repeat indicator, followed by a "
"count. A count of ``0`` specifies a byte value of ``0x90``. The routine "
"returns the decompressed data, unless data input data ends in an orphaned "
"repeat indicator, in which case the :exc:`Incomplete` exception is raised."
msgstr ""

#: ../Doc/library/binascii.rst:92
msgid "Perform binhex4 style RLE-compression on *data* and return the result."
msgstr ""

#: ../Doc/library/binascii.rst:97
msgid ""
"Perform hexbin4 binary-to-ASCII translation and return the resulting string. "
"The argument should already be RLE-coded, and have a length divisible by 3 "
"(except possibly the last fragment)."
msgstr ""

#: ../Doc/library/binascii.rst:104
msgid ""
"Compute the binhex4 crc value of *data*, starting with an initial *crc* and "
"returning the result."
msgstr ""

#: ../Doc/library/binascii.rst:110
msgid ""
"Compute CRC-32, the 32-bit checksum of data, starting with an initial crc.  "
"This is consistent with the ZIP file checksum.  Since the algorithm is "
"designed for use as a checksum algorithm, it is not suitable for use as a "
"general hash algorithm.  Use as follows::"
msgstr ""

#: ../Doc/library/binascii.rst:122
msgid ""
"To generate the same numeric value across all Python versions and platforms "
"use crc32(data) & 0xffffffff.  If you are only using the checksum in packed "
"binary format this is not necessary as the return value is the correct 32bit "
"binary representation regardless of sign."
msgstr ""

#: ../Doc/library/binascii.rst:128
msgid ""
"The return value is in the range [-2**31, 2**31-1] regardless of platform.  "
"In the past the value would be signed on some platforms and unsigned on "
"others.  Use & 0xffffffff on the value if you want it to match Python 3 "
"behavior."
msgstr ""

#: ../Doc/library/binascii.rst:134
msgid ""
"The return value is unsigned and in the range [0, 2**32-1] regardless of "
"platform."
msgstr ""

#: ../Doc/library/binascii.rst:142
msgid ""
"Return the hexadecimal representation of the binary *data*.  Every byte of "
"*data* is converted into the corresponding 2-digit hex representation.  The "
"resulting string is therefore twice as long as the length of *data*."
msgstr ""

#: ../Doc/library/binascii.rst:150
msgid ""
"Return the binary data represented by the hexadecimal string *hexstr*.  This "
"function is the inverse of :func:`b2a_hex`. *hexstr* must contain an even "
"number of hexadecimal digits (which can be upper or lower case), otherwise "
"a :exc:`TypeError` is raised."
msgstr ""

#: ../Doc/library/binascii.rst:158
msgid "Exception raised on errors. These are usually programming errors."
msgstr ""

#: ../Doc/library/binascii.rst:163
msgid ""
"Exception raised on incomplete data. These are usually not programming "
"errors, but may be handled by reading a little more data and trying again."
msgstr ""

#: ../Doc/library/binascii.rst:170
msgid "Module :mod:`base64`"
msgstr "Module :mod:`base64`"

#: ../Doc/library/binascii.rst:170
msgid "Support for RFC compliant base64-style encoding in base 16, 32, and 64."
msgstr ""

#: ../Doc/library/binascii.rst:173
msgid "Module :mod:`binhex`"
msgstr "Module :mod:`binhex`"

#: ../Doc/library/binascii.rst:173
msgid "Support for the binhex format used on the Macintosh."
msgstr ""

#: ../Doc/library/binascii.rst:176
msgid "Module :mod:`uu`"
msgstr "Module :mod:`uu`"

#: ../Doc/library/binascii.rst:176
msgid "Support for UU encoding used on Unix."
msgstr "Gestion de l'encodage UU utilis√© sur UNIX."

#: ../Doc/library/binascii.rst:178
msgid "Module :mod:`quopri`"
msgstr "Module :mod:`quopri`"

#: ../Doc/library/binascii.rst:179
msgid "Support for quoted-printable encoding used in MIME email messages."
msgstr ""
