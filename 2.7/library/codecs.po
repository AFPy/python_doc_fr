# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/codecs.rst:3
msgid ":mod:`codecs` --- Codec registry and base classes"
msgstr ""

#: ../Doc/library/codecs.rst:20
msgid ""
"This module defines base classes for standard Python codecs (encoders and "
"decoders) and provides access to the internal Python codec registry which "
"manages the codec and error handling lookup process."
msgstr ""

#: ../Doc/library/codecs.rst:24
msgid "It defines the following functions:"
msgstr ""

#: ../Doc/library/codecs.rst:28
msgid ""
"Encodes *obj* using the codec registered for *encoding*. The default "
"encoding is ``'ascii'``."
msgstr ""

#: ../Doc/library/codecs.rst:31
msgid ""
"*Errors* may be given to set the desired error handling scheme. The default "
"error handler is ``'strict'`` meaning that encoding errors raise :exc:"
"`ValueError` (or a more codec specific subclass, such as :exc:"
"`UnicodeEncodeError`). Refer to :ref:`codec-base-classes` for more "
"information on codec error handling."
msgstr ""

#: ../Doc/library/codecs.rst:41
msgid ""
"Decodes *obj* using the codec registered for *encoding*. The default "
"encoding is ``'ascii'``."
msgstr ""

#: ../Doc/library/codecs.rst:44
msgid ""
"*Errors* may be given to set the desired error handling scheme. The default "
"error handler is ``'strict'`` meaning that decoding errors raise :exc:"
"`ValueError` (or a more codec specific subclass, such as :exc:"
"`UnicodeDecodeError`). Refer to :ref:`codec-base-classes` for more "
"information on codec error handling."
msgstr ""

#: ../Doc/library/codecs.rst:54
msgid ""
"Register a codec search function. Search functions are expected to take one "
"argument, the encoding name in all lower case letters, and return a :class:"
"`CodecInfo` object having the following attributes:"
msgstr ""

#: ../Doc/library/codecs.rst:58
msgid "``name`` The name of the encoding;"
msgstr ""

#: ../Doc/library/codecs.rst:60
msgid "``encode`` The stateless encoding function;"
msgstr ""

#: ../Doc/library/codecs.rst:62
msgid "``decode`` The stateless decoding function;"
msgstr ""

#: ../Doc/library/codecs.rst:64
msgid ""
"``incrementalencoder`` An incremental encoder class or factory function;"
msgstr ""

#: ../Doc/library/codecs.rst:66
msgid ""
"``incrementaldecoder`` An incremental decoder class or factory function;"
msgstr ""

#: ../Doc/library/codecs.rst:68
msgid "``streamwriter`` A stream writer class or factory function;"
msgstr ""

#: ../Doc/library/codecs.rst:70
msgid "``streamreader`` A stream reader class or factory function."
msgstr ""

#: ../Doc/library/codecs.rst:72
msgid "The various functions or classes take the following arguments:"
msgstr ""

#: ../Doc/library/codecs.rst:74
msgid ""
"*encode* and *decode*: These must be functions or methods which have the "
"same interface as the :meth:`~Codec.encode`/:meth:`~Codec.decode` methods of "
"Codec instances (see :ref:`Codec Interface <codec-objects>`). The functions/"
"methods are expected to work in a stateless mode."
msgstr ""

#: ../Doc/library/codecs.rst:79
msgid ""
"*incrementalencoder* and *incrementaldecoder*: These have to be factory "
"functions providing the following interface:"
msgstr ""

#: ../Doc/library/codecs.rst:82
msgid "``factory(errors='strict')``"
msgstr ""

#: ../Doc/library/codecs.rst:84
msgid ""
"The factory functions must return objects providing the interfaces defined "
"by the base classes :class:`IncrementalEncoder` and :class:"
"`IncrementalDecoder`, respectively. Incremental codecs can maintain state."
msgstr ""

#: ../Doc/library/codecs.rst:88
msgid ""
"*streamreader* and *streamwriter*: These have to be factory functions "
"providing the following interface:"
msgstr ""

#: ../Doc/library/codecs.rst:91
msgid "``factory(stream, errors='strict')``"
msgstr ""

#: ../Doc/library/codecs.rst:93
msgid ""
"The factory functions must return objects providing the interfaces defined "
"by the base classes :class:`StreamReader` and :class:`StreamWriter`, "
"respectively. Stream codecs can maintain state."
msgstr ""

#: ../Doc/library/codecs.rst:97
msgid "Possible values for errors are"
msgstr ""

#: ../Doc/library/codecs.rst:99
msgid "``'strict'``: raise an exception in case of an encoding error"
msgstr ""

#: ../Doc/library/codecs.rst:100
msgid ""
"``'replace'``: replace malformed data with a suitable replacement marker, "
"such as ``'?'`` or ``'\\ufffd'``"
msgstr ""

#: ../Doc/library/codecs.rst:102
msgid "``'ignore'``: ignore malformed data and continue without further notice"
msgstr ""

#: ../Doc/library/codecs.rst:103
msgid ""
"``'xmlcharrefreplace'``: replace with the appropriate XML character "
"reference (for encoding only)"
msgstr ""

#: ../Doc/library/codecs.rst:105
msgid ""
"``'backslashreplace'``: replace with backslashed escape sequences (for "
"encoding only)"
msgstr ""

#: ../Doc/library/codecs.rst:108
msgid ""
"as well as any other error handling name defined via :func:`register_error`."
msgstr ""

#: ../Doc/library/codecs.rst:110
msgid ""
"In case a search function cannot find a given encoding, it should return "
"``None``."
msgstr ""

#: ../Doc/library/codecs.rst:116
msgid ""
"Looks up the codec info in the Python codec registry and returns a :class:"
"`CodecInfo` object as defined above."
msgstr ""

#: ../Doc/library/codecs.rst:119
msgid ""
"Encodings are first looked up in the registry's cache. If not found, the "
"list of registered search functions is scanned. If no :class:`CodecInfo` "
"object is found, a :exc:`LookupError` is raised. Otherwise, the :class:"
"`CodecInfo` object is stored in the cache and returned to the caller."
msgstr ""

#: ../Doc/library/codecs.rst:124
msgid ""
"To simplify access to the various codecs, the module provides these "
"additional functions which use :func:`lookup` for the codec lookup:"
msgstr ""

#: ../Doc/library/codecs.rst:130
msgid ""
"Look up the codec for the given encoding and return its encoder function."
msgstr ""

#: ../Doc/library/codecs.rst:132 ../Doc/library/codecs.rst:139
#: ../Doc/library/codecs.rst:169 ../Doc/library/codecs.rst:177
msgid "Raises a :exc:`LookupError` in case the encoding cannot be found."
msgstr ""

#: ../Doc/library/codecs.rst:137
msgid ""
"Look up the codec for the given encoding and return its decoder function."
msgstr ""

#: ../Doc/library/codecs.rst:144
msgid ""
"Look up the codec for the given encoding and return its incremental encoder "
"class or factory function."
msgstr ""

#: ../Doc/library/codecs.rst:147
msgid ""
"Raises a :exc:`LookupError` in case the encoding cannot be found or the "
"codec doesn't support an incremental encoder."
msgstr ""

#: ../Doc/library/codecs.rst:155
msgid ""
"Look up the codec for the given encoding and return its incremental decoder "
"class or factory function."
msgstr ""

#: ../Doc/library/codecs.rst:158
msgid ""
"Raises a :exc:`LookupError` in case the encoding cannot be found or the "
"codec doesn't support an incremental decoder."
msgstr ""

#: ../Doc/library/codecs.rst:166
msgid ""
"Look up the codec for the given encoding and return its StreamReader class "
"or factory function."
msgstr ""

#: ../Doc/library/codecs.rst:174
msgid ""
"Look up the codec for the given encoding and return its StreamWriter class "
"or factory function."
msgstr ""

#: ../Doc/library/codecs.rst:182
msgid ""
"Register the error handling function *error_handler* under the name *name*. "
"*error_handler* will be called during encoding and decoding in case of an "
"error, when *name* is specified as the errors parameter."
msgstr ""

#: ../Doc/library/codecs.rst:186
msgid ""
"For encoding *error_handler* will be called with a :exc:`UnicodeEncodeError` "
"instance, which contains information about the location of the error. The "
"error handler must either raise this or a different exception or return a "
"tuple with a replacement for the unencodable part of the input and a "
"position where encoding should continue. The encoder will encode the "
"replacement and continue encoding the original input at the specified "
"position. Negative position values will be treated as being relative to the "
"end of the input string. If the resulting position is out of bound an :exc:"
"`IndexError` will be raised."
msgstr ""

#: ../Doc/library/codecs.rst:195
msgid ""
"Decoding and translating works similar, except :exc:`UnicodeDecodeError` or :"
"exc:`UnicodeTranslateError` will be passed to the handler and that the "
"replacement from the error handler will be put into the output directly."
msgstr ""

#: ../Doc/library/codecs.rst:202
msgid "Return the error handler previously registered under the name *name*."
msgstr ""

#: ../Doc/library/codecs.rst:204
msgid "Raises a :exc:`LookupError` in case the handler cannot be found."
msgstr ""

#: ../Doc/library/codecs.rst:209
msgid ""
"Implements the ``strict`` error handling: each encoding or decoding error "
"raises a :exc:`UnicodeError`."
msgstr ""

#: ../Doc/library/codecs.rst:215
msgid ""
"Implements the ``replace`` error handling: malformed data is replaced with a "
"suitable replacement character such as ``'?'`` in bytestrings and "
"``'\\ufffd'`` in Unicode strings."
msgstr ""

#: ../Doc/library/codecs.rst:222
msgid ""
"Implements the ``ignore`` error handling: malformed data is ignored and "
"encoding or decoding is continued without further notice."
msgstr ""

#: ../Doc/library/codecs.rst:228
msgid ""
"Implements the ``xmlcharrefreplace`` error handling (for encoding only): the "
"unencodable character is replaced by an appropriate XML character reference."
msgstr ""

#: ../Doc/library/codecs.rst:234
msgid ""
"Implements the ``backslashreplace`` error handling (for encoding only): the "
"unencodable character is replaced by a backslashed escape sequence."
msgstr ""

#: ../Doc/library/codecs.rst:237
msgid ""
"To simplify working with encoded files or stream, the module also defines "
"these utility functions:"
msgstr ""

#: ../Doc/library/codecs.rst:243
msgid ""
"Open an encoded file using the given *mode* and return a wrapped version "
"providing transparent encoding/decoding.  The default file mode is ``'r'`` "
"meaning to open the file in read mode."
msgstr ""

#: ../Doc/library/codecs.rst:249
msgid ""
"The wrapped version will only accept the object format defined by the "
"codecs, i.e. Unicode objects for most built-in codecs.  Output is also codec-"
"dependent and will usually be Unicode as well."
msgstr ""

#: ../Doc/library/codecs.rst:255
msgid ""
"Files are always opened in binary mode, even if no binary mode was "
"specified.  This is done to avoid data loss due to encodings using 8-bit "
"values.  This means that no automatic conversion of ``'\\n'`` is done on "
"reading and writing."
msgstr ""

#: ../Doc/library/codecs.rst:260
msgid "*encoding* specifies the encoding which is to be used for the file."
msgstr ""

#: ../Doc/library/codecs.rst:262
msgid ""
"*errors* may be given to define the error handling. It defaults to "
"``'strict'`` which causes a :exc:`ValueError` to be raised in case an "
"encoding error occurs."
msgstr ""

#: ../Doc/library/codecs.rst:265
msgid ""
"*buffering* has the same meaning as for the built-in :func:`open` function.  "
"It defaults to line buffered."
msgstr ""

#: ../Doc/library/codecs.rst:271
msgid ""
"Return a wrapped version of file which provides transparent encoding "
"translation."
msgstr ""

#: ../Doc/library/codecs.rst:274
msgid ""
"Strings written to the wrapped file are interpreted according to the given "
"*input* encoding and then written to the original file as strings using the "
"*output* encoding. The intermediate encoding will usually be Unicode but "
"depends on the specified codecs."
msgstr ""

#: ../Doc/library/codecs.rst:279
msgid "If *output* is not given, it defaults to *input*."
msgstr ""

#: ../Doc/library/codecs.rst:281
msgid ""
"*errors* may be given to define the error handling. It defaults to "
"``'strict'``, which causes :exc:`ValueError` to be raised in case an "
"encoding error occurs."
msgstr ""

#: ../Doc/library/codecs.rst:287
msgid ""
"Uses an incremental encoder to iteratively encode the input provided by "
"*iterable*. This function is a :term:`generator`.  *errors* (as well as any "
"other keyword argument) is passed through to the incremental encoder."
msgstr ""

#: ../Doc/library/codecs.rst:296
msgid ""
"Uses an incremental decoder to iteratively decode the input provided by "
"*iterable*. This function is a :term:`generator`.  *errors* (as well as any "
"other keyword argument) is passed through to the incremental decoder."
msgstr ""

#: ../Doc/library/codecs.rst:302
msgid ""
"The module also provides the following constants which are useful for "
"reading and writing to platform dependent files:"
msgstr ""

#: ../Doc/library/codecs.rst:317
msgid ""
"These constants define various encodings of the Unicode byte order mark "
"(BOM) used in UTF-16 and UTF-32 data streams to indicate the byte order used "
"in the stream or file and in UTF-8 as a Unicode signature. :const:"
"`BOM_UTF16` is either :const:`BOM_UTF16_BE` or :const:`BOM_UTF16_LE` "
"depending on the platform's native byte order, :const:`BOM` is an alias for :"
"const:`BOM_UTF16`, :const:`BOM_LE` for :const:`BOM_UTF16_LE` and :const:"
"`BOM_BE` for :const:`BOM_UTF16_BE`. The others represent the BOM in UTF-8 "
"and UTF-32 encodings."
msgstr ""

#: ../Doc/library/codecs.rst:330
msgid "Codec Base Classes"
msgstr ""

#: ../Doc/library/codecs.rst:332
msgid ""
"The :mod:`codecs` module defines a set of base classes which define the "
"interface and can also be used to easily write your own codecs for use in "
"Python."
msgstr ""

#: ../Doc/library/codecs.rst:336
msgid ""
"Each codec has to define four interfaces to make it usable as codec in "
"Python: stateless encoder, stateless decoder, stream reader and stream "
"writer. The stream reader and writers typically reuse the stateless encoder/"
"decoder to implement the file protocols."
msgstr ""

#: ../Doc/library/codecs.rst:341
msgid ""
"The :class:`Codec` class defines the interface for stateless encoders/"
"decoders."
msgstr ""

#: ../Doc/library/codecs.rst:343
msgid ""
"To simplify and standardize error handling, the :meth:`~Codec.encode` and :"
"meth:`~Codec.decode` methods may implement different error handling schemes "
"by providing the *errors* string argument.  The following string values are "
"defined and implemented by all standard Python codecs:"
msgstr ""

#: ../Doc/library/codecs.rst:351
msgid "Value"
msgstr "Valeur"

#: ../Doc/library/codecs.rst:351
msgid "Meaning"
msgstr "Signification"

#: ../Doc/library/codecs.rst:353
msgid "``'strict'``"
msgstr "``'strict'``"

#: ../Doc/library/codecs.rst:353
msgid "Raise :exc:`UnicodeError` (or a subclass); this is the default."
msgstr ""

#: ../Doc/library/codecs.rst:356
msgid "``'ignore'``"
msgstr "``'ignore'``"

#: ../Doc/library/codecs.rst:356
msgid "Ignore the character and continue with the next."
msgstr ""

#: ../Doc/library/codecs.rst:359
msgid "``'replace'``"
msgstr "``'replace'``"

#: ../Doc/library/codecs.rst:359
msgid ""
"Replace with a suitable replacement character; Python will use the official U"
"+FFFD REPLACEMENT CHARACTER for the built-in Unicode codecs on decoding and "
"'?' on encoding."
msgstr ""

#: ../Doc/library/codecs.rst:365
msgid "``'xmlcharrefreplace'``"
msgstr "``'xmlcharrefreplace'``"

#: ../Doc/library/codecs.rst:365
msgid ""
"Replace with the appropriate XML character reference (only for encoding)."
msgstr ""

#: ../Doc/library/codecs.rst:368
msgid "``'backslashreplace'``"
msgstr "``'backslashreplace'``"

#: ../Doc/library/codecs.rst:368
msgid "Replace with backslashed escape sequences (only for encoding)."
msgstr ""

#: ../Doc/library/codecs.rst:372
msgid "The set of allowed values can be extended via :meth:`register_error`."
msgstr ""

#: ../Doc/library/codecs.rst:378
msgid "Codec Objects"
msgstr ""

#: ../Doc/library/codecs.rst:380
msgid ""
"The :class:`Codec` class defines these methods which also define the "
"function interfaces of the stateless encoder and decoder:"
msgstr ""

#: ../Doc/library/codecs.rst:386
msgid ""
"Encodes the object *input* and returns a tuple (output object, length "
"consumed). While codecs are not restricted to use with Unicode, in a Unicode "
"context, encoding converts a Unicode object to a plain string using a "
"particular character set encoding (e.g., ``cp1252`` or ``iso-8859-1``)."
msgstr ""

#: ../Doc/library/codecs.rst:391 ../Doc/library/codecs.rst:412
msgid ""
"*errors* defines the error handling to apply. It defaults to ``'strict'`` "
"handling."
msgstr ""

#: ../Doc/library/codecs.rst:394
msgid ""
"The method may not store state in the :class:`Codec` instance. Use :class:"
"`StreamWriter` for codecs which have to keep state in order to make encoding "
"efficient."
msgstr ""

#: ../Doc/library/codecs.rst:398
msgid ""
"The encoder must be able to handle zero length input and return an empty "
"object of the output object type in this situation."
msgstr ""

#: ../Doc/library/codecs.rst:404
msgid ""
"Decodes the object *input* and returns a tuple (output object, length "
"consumed). In a Unicode context, decoding converts a plain string encoded "
"using a particular character set encoding to a Unicode object."
msgstr ""

#: ../Doc/library/codecs.rst:408
msgid ""
"*input* must be an object which provides the ``bf_getreadbuf`` buffer slot. "
"Python strings, buffer objects and memory mapped files are examples of "
"objects providing this slot."
msgstr ""

#: ../Doc/library/codecs.rst:415
msgid ""
"The method may not store state in the :class:`Codec` instance. Use :class:"
"`StreamReader` for codecs which have to keep state in order to make decoding "
"efficient."
msgstr ""

#: ../Doc/library/codecs.rst:419
msgid ""
"The decoder must be able to handle zero length input and return an empty "
"object of the output object type in this situation."
msgstr ""

#: ../Doc/library/codecs.rst:422
msgid ""
"The :class:`IncrementalEncoder` and :class:`IncrementalDecoder` classes "
"provide the basic interface for incremental encoding and decoding. Encoding/"
"decoding the input isn't done with one call to the stateless encoder/decoder "
"function, but with multiple calls to the :meth:`~IncrementalEncoder.encode`/:"
"meth:`~IncrementalDecoder.decode` method of the incremental encoder/decoder. "
"The incremental encoder/decoder keeps track of the encoding/decoding process "
"during method calls."
msgstr ""

#: ../Doc/library/codecs.rst:430
msgid ""
"The joined output of calls to the :meth:`~IncrementalEncoder.encode`/:meth:"
"`~IncrementalDecoder.decode` method is the same as if all the single inputs "
"were joined into one, and this input was encoded/decoded with the stateless "
"encoder/decoder."
msgstr ""

#: ../Doc/library/codecs.rst:439
msgid "IncrementalEncoder Objects"
msgstr ""

#: ../Doc/library/codecs.rst:443
msgid ""
"The :class:`IncrementalEncoder` class is used for encoding an input in "
"multiple steps. It defines the following methods which every incremental "
"encoder must define in order to be compatible with the Python codec registry."
msgstr ""

#: ../Doc/library/codecs.rst:450
msgid "Constructor for an :class:`IncrementalEncoder` instance."
msgstr ""

#: ../Doc/library/codecs.rst:452
msgid ""
"All incremental encoders must provide this constructor interface. They are "
"free to add additional keyword arguments, but only the ones defined here are "
"used by the Python codec registry."
msgstr ""

#: ../Doc/library/codecs.rst:456
msgid ""
"The :class:`IncrementalEncoder` may implement different error handling "
"schemes by providing the *errors* keyword argument. These parameters are "
"predefined:"
msgstr ""

#: ../Doc/library/codecs.rst:459 ../Doc/library/codecs.rst:511
#: ../Doc/library/codecs.rst:570 ../Doc/library/codecs.rst:635
msgid ""
"``'strict'`` Raise :exc:`ValueError` (or a subclass); this is the default."
msgstr ""

#: ../Doc/library/codecs.rst:461 ../Doc/library/codecs.rst:513
#: ../Doc/library/codecs.rst:572 ../Doc/library/codecs.rst:637
msgid "``'ignore'`` Ignore the character and continue with the next."
msgstr ""

#: ../Doc/library/codecs.rst:463 ../Doc/library/codecs.rst:574
msgid "``'replace'`` Replace with a suitable replacement character"
msgstr ""

#: ../Doc/library/codecs.rst:465 ../Doc/library/codecs.rst:576
msgid ""
"``'xmlcharrefreplace'`` Replace with the appropriate XML character reference"
msgstr ""

#: ../Doc/library/codecs.rst:467 ../Doc/library/codecs.rst:578
msgid "``'backslashreplace'`` Replace with backslashed escape sequences."
msgstr ""

#: ../Doc/library/codecs.rst:469
msgid ""
"The *errors* argument will be assigned to an attribute of the same name. "
"Assigning to this attribute makes it possible to switch between different "
"error handling strategies during the lifetime of the :class:"
"`IncrementalEncoder` object."
msgstr ""

#: ../Doc/library/codecs.rst:474 ../Doc/library/codecs.rst:522
#: ../Doc/library/codecs.rst:584 ../Doc/library/codecs.rst:645
msgid ""
"The set of allowed values for the *errors* argument can be extended with :"
"func:`register_error`."
msgstr ""

#: ../Doc/library/codecs.rst:480
msgid ""
"Encodes *object* (taking the current state of the encoder into account) and "
"returns the resulting encoded object. If this is the last call to :meth:"
"`encode` *final* must be true (the default is false)."
msgstr ""

#: ../Doc/library/codecs.rst:487
msgid "Reset the encoder to the initial state."
msgstr ""

#: ../Doc/library/codecs.rst:493
msgid "IncrementalDecoder Objects"
msgstr ""

#: ../Doc/library/codecs.rst:495
msgid ""
"The :class:`IncrementalDecoder` class is used for decoding an input in "
"multiple steps. It defines the following methods which every incremental "
"decoder must define in order to be compatible with the Python codec registry."
msgstr ""

#: ../Doc/library/codecs.rst:502
msgid "Constructor for an :class:`IncrementalDecoder` instance."
msgstr ""

#: ../Doc/library/codecs.rst:504
msgid ""
"All incremental decoders must provide this constructor interface. They are "
"free to add additional keyword arguments, but only the ones defined here are "
"used by the Python codec registry."
msgstr ""

#: ../Doc/library/codecs.rst:508
msgid ""
"The :class:`IncrementalDecoder` may implement different error handling "
"schemes by providing the *errors* keyword argument. These parameters are "
"predefined:"
msgstr ""

#: ../Doc/library/codecs.rst:515 ../Doc/library/codecs.rst:639
msgid "``'replace'`` Replace with a suitable replacement character."
msgstr ""

#: ../Doc/library/codecs.rst:517
msgid ""
"The *errors* argument will be assigned to an attribute of the same name. "
"Assigning to this attribute makes it possible to switch between different "
"error handling strategies during the lifetime of the :class:"
"`IncrementalDecoder` object."
msgstr ""

#: ../Doc/library/codecs.rst:528
msgid ""
"Decodes *object* (taking the current state of the decoder into account) and "
"returns the resulting decoded object. If this is the last call to :meth:"
"`decode` *final* must be true (the default is false). If *final* is true the "
"decoder must decode the input completely and must flush all buffers. If this "
"isn't possible (e.g. because of incomplete byte sequences at the end of the "
"input) it must initiate error handling just like in the stateless case "
"(which might raise an exception)."
msgstr ""

#: ../Doc/library/codecs.rst:539
msgid "Reset the decoder to the initial state."
msgstr ""

#: ../Doc/library/codecs.rst:542
msgid ""
"The :class:`StreamWriter` and :class:`StreamReader` classes provide generic "
"working interfaces which can be used to implement new encoding submodules "
"very easily. See :mod:`encodings.utf_8` for an example of how this is done."
msgstr ""

#: ../Doc/library/codecs.rst:550
msgid "StreamWriter Objects"
msgstr ""

#: ../Doc/library/codecs.rst:552
msgid ""
"The :class:`StreamWriter` class is a subclass of :class:`Codec` and defines "
"the following methods which every stream writer must define in order to be "
"compatible with the Python codec registry."
msgstr ""

#: ../Doc/library/codecs.rst:559
msgid "Constructor for a :class:`StreamWriter` instance."
msgstr ""

#: ../Doc/library/codecs.rst:561
msgid ""
"All stream writers must provide this constructor interface. They are free to "
"add additional keyword arguments, but only the ones defined here are used by "
"the Python codec registry."
msgstr ""

#: ../Doc/library/codecs.rst:565
msgid "*stream* must be a file-like object open for writing binary data."
msgstr ""

#: ../Doc/library/codecs.rst:567
msgid ""
"The :class:`StreamWriter` may implement different error handling schemes by "
"providing the *errors* keyword argument. These parameters are predefined:"
msgstr ""

#: ../Doc/library/codecs.rst:580
msgid ""
"The *errors* argument will be assigned to an attribute of the same name. "
"Assigning to this attribute makes it possible to switch between different "
"error handling strategies during the lifetime of the :class:`StreamWriter` "
"object."
msgstr ""

#: ../Doc/library/codecs.rst:590
msgid "Writes the object's contents encoded to the stream."
msgstr ""

#: ../Doc/library/codecs.rst:595
msgid ""
"Writes the concatenated list of strings to the stream (possibly by reusing "
"the :meth:`write` method)."
msgstr ""

#: ../Doc/library/codecs.rst:601
msgid "Flushes and resets the codec buffers used for keeping state."
msgstr ""

#: ../Doc/library/codecs.rst:603
msgid ""
"Calling this method should ensure that the data on the output is put into a "
"clean state that allows appending of new fresh data without having to rescan "
"the whole stream to recover state."
msgstr ""

#: ../Doc/library/codecs.rst:608
msgid ""
"In addition to the above methods, the :class:`StreamWriter` must also "
"inherit all other methods and attributes from the underlying stream."
msgstr ""

#: ../Doc/library/codecs.rst:615
msgid "StreamReader Objects"
msgstr ""

#: ../Doc/library/codecs.rst:617
msgid ""
"The :class:`StreamReader` class is a subclass of :class:`Codec` and defines "
"the following methods which every stream reader must define in order to be "
"compatible with the Python codec registry."
msgstr ""

#: ../Doc/library/codecs.rst:624
msgid "Constructor for a :class:`StreamReader` instance."
msgstr ""

#: ../Doc/library/codecs.rst:626
msgid ""
"All stream readers must provide this constructor interface. They are free to "
"add additional keyword arguments, but only the ones defined here are used by "
"the Python codec registry."
msgstr ""

#: ../Doc/library/codecs.rst:630
msgid "*stream* must be a file-like object open for reading (binary) data."
msgstr ""

#: ../Doc/library/codecs.rst:632
msgid ""
"The :class:`StreamReader` may implement different error handling schemes by "
"providing the *errors* keyword argument. These parameters are defined:"
msgstr ""

#: ../Doc/library/codecs.rst:641
msgid ""
"The *errors* argument will be assigned to an attribute of the same name. "
"Assigning to this attribute makes it possible to switch between different "
"error handling strategies during the lifetime of the :class:`StreamReader` "
"object."
msgstr ""

#: ../Doc/library/codecs.rst:651
msgid "Decodes data from the stream and returns the resulting object."
msgstr ""

#: ../Doc/library/codecs.rst:653
msgid ""
"*chars* indicates the number of characters to read from the stream. :func:"
"`read` will never return more than *chars* characters, but it might return "
"less, if there are not enough characters available."
msgstr ""

#: ../Doc/library/codecs.rst:657
msgid ""
"*size* indicates the approximate maximum number of bytes to read from the "
"stream for decoding purposes. The decoder can modify this setting as "
"appropriate. The default value -1 indicates to read and decode as much as "
"possible.  *size* is intended to prevent having to decode huge files in one "
"step."
msgstr ""

#: ../Doc/library/codecs.rst:663
msgid ""
"*firstline* indicates that it would be sufficient to only return the first "
"line, if there are decoding errors on later lines."
msgstr ""

#: ../Doc/library/codecs.rst:666
msgid ""
"The method should use a greedy read strategy meaning that it should read as "
"much data as is allowed within the definition of the encoding and the given "
"size, e.g.  if optional encoding endings or state markers are available on "
"the stream, these should be read too."
msgstr ""

#: ../Doc/library/codecs.rst:671
msgid "*chars* argument added."
msgstr ""

#: ../Doc/library/codecs.rst:674
msgid "*firstline* argument added."
msgstr ""

#: ../Doc/library/codecs.rst:680
msgid "Read one line from the input stream and return the decoded data."
msgstr ""

#: ../Doc/library/codecs.rst:682
msgid ""
"*size*, if given, is passed as size argument to the stream's :meth:`read` "
"method."
msgstr ""

#: ../Doc/library/codecs.rst:685
msgid ""
"If *keepends* is false line-endings will be stripped from the lines returned."
msgstr ""

#: ../Doc/library/codecs.rst:688
msgid "*keepends* argument added."
msgstr ""

#: ../Doc/library/codecs.rst:694
msgid ""
"Read all lines available on the input stream and return them as a list of "
"lines."
msgstr ""

#: ../Doc/library/codecs.rst:697
msgid ""
"Line-endings are implemented using the codec's decoder method and are "
"included in the list entries if *keepends* is true."
msgstr ""

#: ../Doc/library/codecs.rst:700
msgid ""
"*sizehint*, if given, is passed as the *size* argument to the stream's :meth:"
"`read` method."
msgstr ""

#: ../Doc/library/codecs.rst:706
msgid "Resets the codec buffers used for keeping state."
msgstr ""

#: ../Doc/library/codecs.rst:708
msgid ""
"Note that no stream repositioning should take place.  This method is "
"primarily intended to be able to recover from decoding errors."
msgstr ""

#: ../Doc/library/codecs.rst:712
msgid ""
"In addition to the above methods, the :class:`StreamReader` must also "
"inherit all other methods and attributes from the underlying stream."
msgstr ""

#: ../Doc/library/codecs.rst:715
msgid ""
"The next two base classes are included for convenience. They are not needed "
"by the codec registry, but may provide useful in practice."
msgstr ""

#: ../Doc/library/codecs.rst:722
msgid "StreamReaderWriter Objects"
msgstr ""

#: ../Doc/library/codecs.rst:724
msgid ""
"The :class:`StreamReaderWriter` allows wrapping streams which work in both "
"read and write modes."
msgstr ""

#: ../Doc/library/codecs.rst:727 ../Doc/library/codecs.rst:751
msgid ""
"The design is such that one can use the factory functions returned by the :"
"func:`lookup` function to construct the instance."
msgstr ""

#: ../Doc/library/codecs.rst:733
msgid ""
"Creates a :class:`StreamReaderWriter` instance. *stream* must be a file-like "
"object. *Reader* and *Writer* must be factory functions or classes providing "
"the :class:`StreamReader` and :class:`StreamWriter` interface resp. Error "
"handling is done in the same way as defined for the stream readers and "
"writers."
msgstr ""

#: ../Doc/library/codecs.rst:738
msgid ""
":class:`StreamReaderWriter` instances define the combined interfaces of :"
"class:`StreamReader` and :class:`StreamWriter` classes. They inherit all "
"other methods and attributes from the underlying stream."
msgstr ""

#: ../Doc/library/codecs.rst:746
msgid "StreamRecoder Objects"
msgstr ""

#: ../Doc/library/codecs.rst:748
msgid ""
"The :class:`StreamRecoder` provide a frontend - backend view of encoding "
"data which is sometimes useful when dealing with different encoding "
"environments."
msgstr ""

#: ../Doc/library/codecs.rst:757
msgid ""
"Creates a :class:`StreamRecoder` instance which implements a two-way "
"conversion: *encode* and *decode* work on the frontend (the input to :meth:"
"`read` and output of :meth:`write`) while *Reader* and *Writer* work on the "
"backend (reading and writing to the stream)."
msgstr ""

#: ../Doc/library/codecs.rst:762
msgid ""
"You can use these objects to do transparent direct recodings from e.g. "
"Latin-1 to UTF-8 and back."
msgstr ""

#: ../Doc/library/codecs.rst:765
msgid "*stream* must be a file-like object."
msgstr ""

#: ../Doc/library/codecs.rst:767
msgid ""
"*encode*, *decode* must adhere to the :class:`Codec` interface. *Reader*, "
"*Writer* must be factory functions or classes providing objects of the :"
"class:`StreamReader` and :class:`StreamWriter` interface respectively."
msgstr ""

#: ../Doc/library/codecs.rst:771
msgid ""
"*encode* and *decode* are needed for the frontend translation, *Reader* and "
"*Writer* for the backend translation.  The intermediate format used is "
"determined by the two sets of codecs, e.g. the Unicode codecs will use "
"Unicode as the intermediate encoding."
msgstr ""

#: ../Doc/library/codecs.rst:776
msgid ""
"Error handling is done in the same way as defined for the stream readers and "
"writers."
msgstr ""

#: ../Doc/library/codecs.rst:780
msgid ""
":class:`StreamRecoder` instances define the combined interfaces of :class:"
"`StreamReader` and :class:`StreamWriter` classes. They inherit all other "
"methods and attributes from the underlying stream."
msgstr ""

#: ../Doc/library/codecs.rst:788
msgid "Encodings and Unicode"
msgstr ""

#: ../Doc/library/codecs.rst:790
msgid ""
"Unicode strings are stored internally as sequences of code points (to be "
"precise as :c:type:`Py_UNICODE` arrays). Depending on the way Python is "
"compiled (either via ``--enable-unicode=ucs2`` or ``--enable-unicode=ucs4``, "
"with the former being the default) :c:type:`Py_UNICODE` is either a 16-bit "
"or 32-bit data type. Once a Unicode object is used outside of CPU and "
"memory, CPU endianness and how these arrays are stored as bytes become an "
"issue.  Transforming a unicode object into a sequence of bytes is called "
"encoding and recreating the unicode object from the sequence of bytes is "
"known as decoding.  There are many different methods for how this "
"transformation can be done (these methods are also called encodings). The "
"simplest method is to map the code points 0-255 to the bytes ``0x0``-"
"``0xff``. This means that a unicode object that contains code points above "
"``U+00FF`` can't be encoded with this method (which is called ``'latin-1'`` "
"or ``'iso-8859-1'``). :func:`unicode.encode` will raise a :exc:"
"`UnicodeEncodeError` that looks like this: ``UnicodeEncodeError: 'latin-1' "
"codec can't encode character u'\\u1234' in position 3: ordinal not in "
"range(256)``."
msgstr ""

#: ../Doc/library/codecs.rst:807
msgid ""
"There's another group of encodings (the so called charmap encodings) that "
"choose a different subset of all unicode code points and how these code "
"points are mapped to the bytes ``0x0``-``0xff``. To see how this is done "
"simply open e.g. :file:`encodings/cp1252.py` (which is an encoding that is "
"used primarily on Windows). There's a string constant with 256 characters "
"that shows you which character is mapped to which byte value."
msgstr ""

#: ../Doc/library/codecs.rst:814
msgid ""
"All of these encodings can only encode 256 of the 1114112 code points "
"defined in unicode. A simple and straightforward way that can store each "
"Unicode code point, is to store each code point as four consecutive bytes. "
"There are two possibilities: store the bytes in big endian or in little "
"endian order. These two encodings are called ``UTF-32-BE`` and ``UTF-32-LE`` "
"respectively. Their disadvantage is that if e.g. you use ``UTF-32-BE`` on a "
"little endian machine you will always have to swap bytes on encoding and "
"decoding. ``UTF-32`` avoids this problem: bytes will always be in natural "
"endianness. When these bytes are read by a CPU with a different endianness, "
"then bytes have to be swapped though. To be able to detect the endianness of "
"a ``UTF-16`` or ``UTF-32`` byte sequence, there's the so called BOM (\"Byte "
"Order Mark\"). This is the Unicode character ``U+FEFF``. This character can "
"be prepended to every ``UTF-16`` or ``UTF-32`` byte sequence. The byte "
"swapped version of this character (``0xFFFE``) is an illegal character that "
"may not appear in a Unicode text. So when the first character in an "
"``UTF-16`` or ``UTF-32`` byte sequence appears to be a ``U+FFFE`` the bytes "
"have to be swapped on decoding. Unfortunately the character ``U+FEFF`` had a "
"second purpose as a ``ZERO WIDTH NO-BREAK SPACE``: a character that has no "
"width and doesn't allow a word to be split. It can e.g. be used to give "
"hints to a ligature algorithm. With Unicode 4.0 using ``U+FEFF`` as a ``ZERO "
"WIDTH NO-BREAK SPACE`` has been deprecated (with ``U+2060`` (``WORD "
"JOINER``) assuming this role). Nevertheless Unicode software still must be "
"able to handle ``U+FEFF`` in both roles: as a BOM it's a device to determine "
"the storage layout of the encoded bytes, and vanishes once the byte sequence "
"has been decoded into a Unicode string; as a ``ZERO WIDTH NO-BREAK SPACE`` "
"it's a normal character that will be decoded like any other."
msgstr ""

#: ../Doc/library/codecs.rst:840
msgid ""
"There's another encoding that is able to encoding the full range of Unicode "
"characters: UTF-8. UTF-8 is an 8-bit encoding, which means there are no "
"issues with byte order in UTF-8. Each byte in a UTF-8 byte sequence consists "
"of two parts: marker bits (the most significant bits) and payload bits. The "
"marker bits are a sequence of zero to four ``1`` bits followed by a ``0`` "
"bit. Unicode characters are encoded like this (with x being payload bits, "
"which when concatenated give the Unicode character):"
msgstr ""

#: ../Doc/library/codecs.rst:849
msgid "Range"
msgstr "*Range*"

#: ../Doc/library/codecs.rst:849
msgid "Encoding"
msgstr ""

#: ../Doc/library/codecs.rst:851
msgid "``U-00000000`` ... ``U-0000007F``"
msgstr "``U-00000000`` ... ``U-0000007F``"

#: ../Doc/library/codecs.rst:851
msgid "0xxxxxxx"
msgstr "0xxxxxxx"

#: ../Doc/library/codecs.rst:853
msgid "``U-00000080`` ... ``U-000007FF``"
msgstr "``U-00000080`` ... ``U-000007FF``"

#: ../Doc/library/codecs.rst:853
msgid "110xxxxx 10xxxxxx"
msgstr "110xxxxx 10xxxxxx"

#: ../Doc/library/codecs.rst:855
msgid "``U-00000800`` ... ``U-0000FFFF``"
msgstr "``U-00000800`` ... ``U-0000FFFF``"

#: ../Doc/library/codecs.rst:855
msgid "1110xxxx 10xxxxxx 10xxxxxx"
msgstr "1110xxxx 10xxxxxx 10xxxxxx"

#: ../Doc/library/codecs.rst:857
msgid "``U-00010000`` ... ``U-0010FFFF``"
msgstr "``U-00010000`` ... ``U-0010FFFF``"

#: ../Doc/library/codecs.rst:857
msgid "11110xxx 10xxxxxx 10xxxxxx 10xxxxxx"
msgstr "11110xxx 10xxxxxx 10xxxxxx 10xxxxxx"

#: ../Doc/library/codecs.rst:860
msgid ""
"The least significant bit of the Unicode character is the rightmost x bit."
msgstr ""

#: ../Doc/library/codecs.rst:862
msgid ""
"As UTF-8 is an 8-bit encoding no BOM is required and any ``U+FEFF`` "
"character in the decoded Unicode string (even if it's the first character) "
"is treated as a ``ZERO WIDTH NO-BREAK SPACE``."
msgstr ""

#: ../Doc/library/codecs.rst:866
msgid ""
"Without external information it's impossible to reliably determine which "
"encoding was used for encoding a Unicode string. Each charmap encoding can "
"decode any random byte sequence. However that's not possible with UTF-8, as "
"UTF-8 byte sequences have a structure that doesn't allow arbitrary byte "
"sequences. To increase the reliability with which a UTF-8 encoding can be "
"detected, Microsoft invented a variant of UTF-8 (that Python 2.5 calls ``"
"\"utf-8-sig\"``) for its Notepad program: Before any of the Unicode "
"characters is written to the file, a UTF-8 encoded BOM (which looks like "
"this as a byte sequence: ``0xef``, ``0xbb``, ``0xbf``) is written. As it's "
"rather improbable that any charmap encoded file starts with these byte "
"values (which would e.g. map to"
msgstr ""

#: ../Doc/library/codecs.rst:0
msgid "LATIN SMALL LETTER I WITH DIAERESIS"
msgstr "LATIN SMALL LETTER I WITH DIAERESIS"

#: ../Doc/library/codecs.rst:0
msgid "RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK"
msgstr "RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK"

#: ../Doc/library/codecs.rst:0
msgid "INVERTED QUESTION MARK"
msgstr "INVERTED QUESTION MARK"

#: ../Doc/library/codecs.rst:882
msgid ""
"in iso-8859-1), this increases the probability that a ``utf-8-sig`` encoding "
"can be correctly guessed from the byte sequence. So here the BOM is not used "
"to be able to determine the byte order used for generating the byte "
"sequence, but as a signature that helps in guessing the encoding. On "
"encoding the utf-8-sig codec will write ``0xef``, ``0xbb``, ``0xbf`` as the "
"first three bytes to the file. On decoding ``utf-8-sig`` will skip those "
"three bytes if they appear as the first three bytes in the file.  In UTF-8, "
"the use of the BOM is discouraged and should generally be avoided."
msgstr ""

#: ../Doc/library/codecs.rst:895
msgid "Standard Encodings"
msgstr ""

#: ../Doc/library/codecs.rst:897
msgid ""
"Python comes with a number of codecs built-in, either implemented as C "
"functions or with dictionaries as mapping tables. The following table lists "
"the codecs by name, together with a few common aliases, and the languages "
"for which the encoding is likely used. Neither the list of aliases nor the "
"list of languages is meant to be exhaustive. Notice that spelling "
"alternatives that only differ in case or use a hyphen instead of an "
"underscore are also valid aliases; therefore, e.g. ``'utf-8'`` is a valid "
"alias for the ``'utf_8'`` codec."
msgstr ""

#: ../Doc/library/codecs.rst:905
msgid ""
"Many of the character sets support the same languages. They vary in "
"individual characters (e.g. whether the EURO SIGN is supported or not), and "
"in the assignment of characters to code positions. For the European "
"languages in particular, the following variants typically exist:"
msgstr ""

#: ../Doc/library/codecs.rst:910
msgid "an ISO 8859 codeset"
msgstr ""

#: ../Doc/library/codecs.rst:912
msgid ""
"a Microsoft Windows code page, which is typically derived from an 8859 "
"codeset, but replaces control characters with additional graphic characters"
msgstr ""

#: ../Doc/library/codecs.rst:915
msgid "an IBM EBCDIC code page"
msgstr ""

#: ../Doc/library/codecs.rst:917
msgid "an IBM PC code page, which is ASCII compatible"
msgstr ""

#: ../Doc/library/codecs.rst:922 ../Doc/library/codecs.rst:1147
#: ../Doc/library/codecs.rst:1196
msgid "Codec"
msgstr ""

#: ../Doc/library/codecs.rst:922 ../Doc/library/codecs.rst:1147
#: ../Doc/library/codecs.rst:1196
msgid "Aliases"
msgstr ""

#: ../Doc/library/codecs.rst:922
msgid "Languages"
msgstr ""

#: ../Doc/library/codecs.rst:924
msgid "ascii"
msgstr "ascii"

#: ../Doc/library/codecs.rst:924
msgid "646, us-ascii"
msgstr "646, us-ascii"

#: ../Doc/library/codecs.rst:924 ../Doc/library/codecs.rst:930
#: ../Doc/library/codecs.rst:934
msgid "English"
msgstr "Anglais"

#: ../Doc/library/codecs.rst:926
msgid "big5"
msgstr "big5"

#: ../Doc/library/codecs.rst:926
msgid "big5-tw, csbig5"
msgstr "big5-tw, csbig5"

#: ../Doc/library/codecs.rst:926 ../Doc/library/codecs.rst:928
#: ../Doc/library/codecs.rst:982
msgid "Traditional Chinese"
msgstr "Chinois Traditionnel"

#: ../Doc/library/codecs.rst:928
msgid "big5hkscs"
msgstr "big5hkscs"

#: ../Doc/library/codecs.rst:928
msgid "big5-hkscs, hkscs"
msgstr "big5-hkscs, hkscs"

#: ../Doc/library/codecs.rst:930
msgid "cp037"
msgstr "cp037"

#: ../Doc/library/codecs.rst:930
msgid "IBM037, IBM039"
msgstr "IBM037, IBM039"

#: ../Doc/library/codecs.rst:932
msgid "cp424"
msgstr "cp424"

#: ../Doc/library/codecs.rst:932
msgid "EBCDIC-CP-HE, IBM424"
msgstr "EBCDIC-CP-HE, IBM424"

#: ../Doc/library/codecs.rst:932 ../Doc/library/codecs.rst:952
#: ../Doc/library/codecs.rst:962 ../Doc/library/codecs.rst:1001
#: ../Doc/library/codecs.rst:1064
msgid "Hebrew"
msgstr "Hebreux"

#: ../Doc/library/codecs.rst:934
msgid "cp437"
msgstr "cp437"

#: ../Doc/library/codecs.rst:934
msgid "437, IBM437"
msgstr "437, IBM437"

#: ../Doc/library/codecs.rst:936
msgid "cp500"
msgstr "cp500"

#: ../Doc/library/codecs.rst:936
msgid "EBCDIC-CP-BE, EBCDIC-CP-CH, IBM500"
msgstr "EBCDIC-CP-BE, EBCDIC-CP-CH, IBM500"

#: ../Doc/library/codecs.rst:936 ../Doc/library/codecs.rst:945
#: ../Doc/library/codecs.rst:956 ../Doc/library/codecs.rst:988
#: ../Doc/library/codecs.rst:995 ../Doc/library/codecs.rst:1076
#: ../Doc/library/codecs.rst:1095
msgid "Western Europe"
msgstr "Europe de l'ouest"

#: ../Doc/library/codecs.rst:939
msgid "cp720"
msgstr "cp720"

#: ../Doc/library/codecs.rst:939 ../Doc/library/codecs.rst:966
#: ../Doc/library/codecs.rst:1003 ../Doc/library/codecs.rst:1060
msgid "Arabic"
msgstr "Arabe"

#: ../Doc/library/codecs.rst:941
msgid "cp737"
msgstr "cp737"

#: ../Doc/library/codecs.rst:941 ../Doc/library/codecs.rst:972
#: ../Doc/library/codecs.rst:976 ../Doc/library/codecs.rst:997
#: ../Doc/library/codecs.rst:1062 ../Doc/library/codecs.rst:1089
msgid "Greek"
msgstr "Grec"

#: ../Doc/library/codecs.rst:943
msgid "cp775"
msgstr "cp775"

#: ../Doc/library/codecs.rst:943
msgid "IBM775"
msgstr "IBM775"

#: ../Doc/library/codecs.rst:943 ../Doc/library/codecs.rst:1005
#: ../Doc/library/codecs.rst:1055 ../Doc/library/codecs.rst:1072
msgid "Baltic languages"
msgstr "Langues Baltiques"

#: ../Doc/library/codecs.rst:945
msgid "cp850"
msgstr "cp850"

#: ../Doc/library/codecs.rst:945
msgid "850, IBM850"
msgstr "850, IBM850"

#: ../Doc/library/codecs.rst:947
msgid "cp852"
msgstr "cp852"

#: ../Doc/library/codecs.rst:947
msgid "852, IBM852"
msgstr "852, IBM852"

#: ../Doc/library/codecs.rst:947 ../Doc/library/codecs.rst:990
#: ../Doc/library/codecs.rst:1051 ../Doc/library/codecs.rst:1093
msgid "Central and Eastern Europe"
msgstr "Europe centrale et Europe de l'Est"

#: ../Doc/library/codecs.rst:949
msgid "cp855"
msgstr "cp855"

#: ../Doc/library/codecs.rst:949
msgid "855, IBM855"
msgstr "855, IBM855"

#: ../Doc/library/codecs.rst:949 ../Doc/library/codecs.rst:992
#: ../Doc/library/codecs.rst:1057 ../Doc/library/codecs.rst:1086
msgid "Bulgarian, Byelorussian, Macedonian, Russian, Serbian"
msgstr "Bulgare, Biélorusse, Macédonien, Russe, Serbe"

#: ../Doc/library/codecs.rst:952
msgid "cp856"
msgstr "cp856"

#: ../Doc/library/codecs.rst:954
msgid "cp857"
msgstr "cp857"

#: ../Doc/library/codecs.rst:954
msgid "857, IBM857"
msgstr "857, IBM857"

#: ../Doc/library/codecs.rst:954 ../Doc/library/codecs.rst:986
#: ../Doc/library/codecs.rst:999 ../Doc/library/codecs.rst:1066
#: ../Doc/library/codecs.rst:1097
msgid "Turkish"
msgstr "Turc"

#: ../Doc/library/codecs.rst:956
msgid "cp858"
msgstr "cp858"

#: ../Doc/library/codecs.rst:956
msgid "858, IBM858"
msgstr "858, IBM858"

#: ../Doc/library/codecs.rst:958
msgid "cp860"
msgstr "cp860"

#: ../Doc/library/codecs.rst:958
msgid "860, IBM860"
msgstr "860, IBM860"

#: ../Doc/library/codecs.rst:958
msgid "Portuguese"
msgstr "Portugais"

#: ../Doc/library/codecs.rst:960
msgid "cp861"
msgstr "cp861"

#: ../Doc/library/codecs.rst:960
msgid "861, CP-IS, IBM861"
msgstr "861, CP-IS, IBM861"

#: ../Doc/library/codecs.rst:960 ../Doc/library/codecs.rst:1091
msgid "Icelandic"
msgstr "Islandais"

#: ../Doc/library/codecs.rst:962
msgid "cp862"
msgstr "cp862"

#: ../Doc/library/codecs.rst:962
msgid "862, IBM862"
msgstr "862, IBM862"

#: ../Doc/library/codecs.rst:964
msgid "cp863"
msgstr "cp863"

#: ../Doc/library/codecs.rst:964
msgid "863, IBM863"
msgstr "863, IBM863"

#: ../Doc/library/codecs.rst:964
msgid "Canadian"
msgstr "Canadien"

#: ../Doc/library/codecs.rst:966
msgid "cp864"
msgstr "cp864"

#: ../Doc/library/codecs.rst:966
msgid "IBM864"
msgstr "IBM864"

#: ../Doc/library/codecs.rst:968
msgid "cp865"
msgstr "cp865"

#: ../Doc/library/codecs.rst:968
msgid "865, IBM865"
msgstr "865, IBM865"

#: ../Doc/library/codecs.rst:968
msgid "Danish, Norwegian"
msgstr ""

#: ../Doc/library/codecs.rst:970
msgid "cp866"
msgstr "cp866"

#: ../Doc/library/codecs.rst:970
msgid "866, IBM866"
msgstr "866, IBM866"

#: ../Doc/library/codecs.rst:970 ../Doc/library/codecs.rst:1082
msgid "Russian"
msgstr "Russe"

#: ../Doc/library/codecs.rst:972
msgid "cp869"
msgstr "cp869"

#: ../Doc/library/codecs.rst:972
msgid "869, CP-GR, IBM869"
msgstr "869, CP-GR, IBM869"

#: ../Doc/library/codecs.rst:974
msgid "cp874"
msgstr "cp874"

#: ../Doc/library/codecs.rst:974
msgid "Thai"
msgstr ""

#: ../Doc/library/codecs.rst:976
msgid "cp875"
msgstr "cp875"

#: ../Doc/library/codecs.rst:978
msgid "cp932"
msgstr "cp932"

#: ../Doc/library/codecs.rst:978
msgid "932, ms932, mskanji, ms-kanji"
msgstr "932, ms932, mskanji, ms-kanji"

#: ../Doc/library/codecs.rst:978 ../Doc/library/codecs.rst:1009
#: ../Doc/library/codecs.rst:1011 ../Doc/library/codecs.rst:1013
#: ../Doc/library/codecs.rst:1030 ../Doc/library/codecs.rst:1033
#: ../Doc/library/codecs.rst:1038 ../Doc/library/codecs.rst:1041
#: ../Doc/library/codecs.rst:1043 ../Doc/library/codecs.rst:1102
#: ../Doc/library/codecs.rst:1105 ../Doc/library/codecs.rst:1108
msgid "Japanese"
msgstr ""

#: ../Doc/library/codecs.rst:980
msgid "cp949"
msgstr "cp949"

#: ../Doc/library/codecs.rst:980
msgid "949, ms949, uhc"
msgstr "949, ms949, uhc"

#: ../Doc/library/codecs.rst:980 ../Doc/library/codecs.rst:1015
#: ../Doc/library/codecs.rst:1045 ../Doc/library/codecs.rst:1080
msgid "Korean"
msgstr ""

#: ../Doc/library/codecs.rst:982
msgid "cp950"
msgstr "cp950"

#: ../Doc/library/codecs.rst:982
msgid "950, ms950"
msgstr "950, ms950"

#: ../Doc/library/codecs.rst:984
msgid "cp1006"
msgstr "cp1006"

#: ../Doc/library/codecs.rst:984
msgid "Urdu"
msgstr ""

#: ../Doc/library/codecs.rst:986
msgid "cp1026"
msgstr "cp1026"

#: ../Doc/library/codecs.rst:986
msgid "ibm1026"
msgstr "ibm1026"

#: ../Doc/library/codecs.rst:988
msgid "cp1140"
msgstr "cp1140"

#: ../Doc/library/codecs.rst:988
msgid "ibm1140"
msgstr "ibm1140"

#: ../Doc/library/codecs.rst:990
msgid "cp1250"
msgstr "cp1250"

#: ../Doc/library/codecs.rst:990
msgid "windows-1250"
msgstr "windows-1250"

#: ../Doc/library/codecs.rst:992
msgid "cp1251"
msgstr "cp1251"

#: ../Doc/library/codecs.rst:992
msgid "windows-1251"
msgstr "windows-1251"

#: ../Doc/library/codecs.rst:995
msgid "cp1252"
msgstr "cp1252"

#: ../Doc/library/codecs.rst:995
msgid "windows-1252"
msgstr "windows-1252"

#: ../Doc/library/codecs.rst:997
msgid "cp1253"
msgstr "cp1253"

#: ../Doc/library/codecs.rst:997
msgid "windows-1253"
msgstr "windows-1253"

#: ../Doc/library/codecs.rst:999
msgid "cp1254"
msgstr "cp1254"

#: ../Doc/library/codecs.rst:999
msgid "windows-1254"
msgstr "windows-1254"

#: ../Doc/library/codecs.rst:1001
msgid "cp1255"
msgstr "cp1255"

#: ../Doc/library/codecs.rst:1001
msgid "windows-1255"
msgstr "windows-1255"

#: ../Doc/library/codecs.rst:1003
msgid "cp1256"
msgstr "cp1256"

#: ../Doc/library/codecs.rst:1003
msgid "windows-1256"
msgstr "windows-1256"

#: ../Doc/library/codecs.rst:1005
msgid "cp1257"
msgstr "cp1257"

#: ../Doc/library/codecs.rst:1005
msgid "windows-1257"
msgstr "windows-1257"

#: ../Doc/library/codecs.rst:1007
msgid "cp1258"
msgstr "cp1258"

#: ../Doc/library/codecs.rst:1007
msgid "windows-1258"
msgstr "windows-1258"

#: ../Doc/library/codecs.rst:1007
msgid "Vietnamese"
msgstr ""

#: ../Doc/library/codecs.rst:1009
msgid "euc_jp"
msgstr "euc_jp"

#: ../Doc/library/codecs.rst:1009
msgid "eucjp, ujis, u-jis"
msgstr "eucjp, ujis, u-jis"

#: ../Doc/library/codecs.rst:1011
msgid "euc_jis_2004"
msgstr "euc_jis_2004"

#: ../Doc/library/codecs.rst:1011
msgid "jisx0213, eucjis2004"
msgstr "jisx0213, eucjis2004"

#: ../Doc/library/codecs.rst:1013
msgid "euc_jisx0213"
msgstr "euc_jisx0213"

#: ../Doc/library/codecs.rst:1013
msgid "eucjisx0213"
msgstr "eucjisx0213"

#: ../Doc/library/codecs.rst:1015
msgid "euc_kr"
msgstr "euc_kr"

#: ../Doc/library/codecs.rst:1015
msgid "euckr, korean, ksc5601, ks_c-5601, ks_c-5601-1987, ksx1001, ks_x-1001"
msgstr "euckr, korean, ksc5601, ks_c-5601, ks_c-5601-1987, ksx1001, ks_x-1001"

#: ../Doc/library/codecs.rst:1019
msgid "gb2312"
msgstr "gb2312"

#: ../Doc/library/codecs.rst:1019
msgid ""
"chinese, csiso58gb231280, euc- cn, euccn, eucgb2312-cn, gb2312-1980, "
"gb2312-80, iso- ir-58"
msgstr ""
"chinese, csiso58gb231280, euc- cn, euccn, eucgb2312-cn, gb2312-1980, "
"gb2312-80, iso- ir-58"

#: ../Doc/library/codecs.rst:1019 ../Doc/library/codecs.rst:1028
msgid "Simplified Chinese"
msgstr ""

#: ../Doc/library/codecs.rst:1024
msgid "gbk"
msgstr "gbk"

#: ../Doc/library/codecs.rst:1024
msgid "936, cp936, ms936"
msgstr "936, cp936, ms936"

#: ../Doc/library/codecs.rst:1024 ../Doc/library/codecs.rst:1026
msgid "Unified Chinese"
msgstr ""

#: ../Doc/library/codecs.rst:1026
msgid "gb18030"
msgstr "gb18030"

#: ../Doc/library/codecs.rst:1026
msgid "gb18030-2000"
msgstr "gb18030-2000"

#: ../Doc/library/codecs.rst:1028
msgid "hz"
msgstr "hz"

#: ../Doc/library/codecs.rst:1028
msgid "hzgb, hz-gb, hz-gb-2312"
msgstr "hzgb, hz-gb, hz-gb-2312"

#: ../Doc/library/codecs.rst:1030
msgid "iso2022_jp"
msgstr "iso2022_jp"

#: ../Doc/library/codecs.rst:1030
msgid "csiso2022jp, iso2022jp, iso-2022-jp"
msgstr "csiso2022jp, iso2022jp, iso-2022-jp"

#: ../Doc/library/codecs.rst:1033
msgid "iso2022_jp_1"
msgstr "iso2022_jp_1"

#: ../Doc/library/codecs.rst:1033
msgid "iso2022jp-1, iso-2022-jp-1"
msgstr "iso2022jp-1, iso-2022-jp-1"

#: ../Doc/library/codecs.rst:1035
msgid "iso2022_jp_2"
msgstr "iso2022_jp_2"

#: ../Doc/library/codecs.rst:1035
msgid "iso2022jp-2, iso-2022-jp-2"
msgstr "iso2022jp-2, iso-2022-jp-2"

#: ../Doc/library/codecs.rst:1035
msgid "Japanese, Korean, Simplified Chinese, Western Europe, Greek"
msgstr ""

#: ../Doc/library/codecs.rst:1038
msgid "iso2022_jp_2004"
msgstr "iso2022_jp_2004"

#: ../Doc/library/codecs.rst:1038
msgid "iso2022jp-2004, iso-2022-jp-2004"
msgstr "iso2022jp-2004, iso-2022-jp-2004"

#: ../Doc/library/codecs.rst:1041
msgid "iso2022_jp_3"
msgstr "iso2022_jp_3"

#: ../Doc/library/codecs.rst:1041
msgid "iso2022jp-3, iso-2022-jp-3"
msgstr "iso2022jp-3, iso-2022-jp-3"

#: ../Doc/library/codecs.rst:1043
msgid "iso2022_jp_ext"
msgstr "iso2022_jp_ext"

#: ../Doc/library/codecs.rst:1043
msgid "iso2022jp-ext, iso-2022-jp-ext"
msgstr "iso2022jp-ext, iso-2022-jp-ext"

#: ../Doc/library/codecs.rst:1045
msgid "iso2022_kr"
msgstr "iso2022_kr"

#: ../Doc/library/codecs.rst:1045
msgid "csiso2022kr, iso2022kr, iso-2022-kr"
msgstr "csiso2022kr, iso2022kr, iso-2022-kr"

#: ../Doc/library/codecs.rst:1048
msgid "latin_1"
msgstr "latin_1"

#: ../Doc/library/codecs.rst:1048
msgid "iso-8859-1, iso8859-1, 8859, cp819, latin, latin1, L1"
msgstr "iso-8859-1, iso8859-1, 8859, cp819, latin, latin1, L1"

#: ../Doc/library/codecs.rst:1048
msgid "West Europe"
msgstr "Europe de l'Ouest"

#: ../Doc/library/codecs.rst:1051
msgid "iso8859_2"
msgstr "iso8859_2"

#: ../Doc/library/codecs.rst:1051
msgid "iso-8859-2, latin2, L2"
msgstr "iso-8859-2, latin2, L2"

#: ../Doc/library/codecs.rst:1053
msgid "iso8859_3"
msgstr "iso8859_3"

#: ../Doc/library/codecs.rst:1053
msgid "iso-8859-3, latin3, L3"
msgstr "iso-8859-3, latin3, L3"

#: ../Doc/library/codecs.rst:1053
msgid "Esperanto, Maltese"
msgstr ""

#: ../Doc/library/codecs.rst:1055
msgid "iso8859_4"
msgstr "iso8859_4"

#: ../Doc/library/codecs.rst:1055
msgid "iso-8859-4, latin4, L4"
msgstr "iso-8859-4, latin4, L4"

#: ../Doc/library/codecs.rst:1057
msgid "iso8859_5"
msgstr "iso8859_5"

#: ../Doc/library/codecs.rst:1057
msgid "iso-8859-5, cyrillic"
msgstr "iso-8859-5, cyrillic"

#: ../Doc/library/codecs.rst:1060
msgid "iso8859_6"
msgstr "iso8859_6"

#: ../Doc/library/codecs.rst:1060
msgid "iso-8859-6, arabic"
msgstr "iso-8859-6, arabic"

#: ../Doc/library/codecs.rst:1062
msgid "iso8859_7"
msgstr "iso8859_7"

#: ../Doc/library/codecs.rst:1062
msgid "iso-8859-7, greek, greek8"
msgstr "iso-8859-7, greek, greek8"

#: ../Doc/library/codecs.rst:1064
msgid "iso8859_8"
msgstr "iso8859_8"

#: ../Doc/library/codecs.rst:1064
msgid "iso-8859-8, hebrew"
msgstr "iso-8859-8, hebrew"

#: ../Doc/library/codecs.rst:1066
msgid "iso8859_9"
msgstr "iso8859_9"

#: ../Doc/library/codecs.rst:1066
msgid "iso-8859-9, latin5, L5"
msgstr "iso-8859-9, latin5, L5"

#: ../Doc/library/codecs.rst:1068
msgid "iso8859_10"
msgstr "iso8859_10"

#: ../Doc/library/codecs.rst:1068
msgid "iso-8859-10, latin6, L6"
msgstr "iso-8859-10, latin6, L6"

#: ../Doc/library/codecs.rst:1068
msgid "Nordic languages"
msgstr ""

#: ../Doc/library/codecs.rst:1070
msgid "iso8859_11"
msgstr "iso8859_11"

#: ../Doc/library/codecs.rst:1070
msgid "iso-8859-11, thai"
msgstr "iso-8859-11, thai"

#: ../Doc/library/codecs.rst:1070
msgid "Thai languages"
msgstr ""

#: ../Doc/library/codecs.rst:1072
msgid "iso8859_13"
msgstr "iso8859_13"

#: ../Doc/library/codecs.rst:1072
msgid "iso-8859-13, latin7, L7"
msgstr "iso-8859-13, latin7, L7"

#: ../Doc/library/codecs.rst:1074
msgid "iso8859_14"
msgstr "iso8859_14"

#: ../Doc/library/codecs.rst:1074
msgid "iso-8859-14, latin8, L8"
msgstr "iso-8859-14, latin8, L8"

#: ../Doc/library/codecs.rst:1074
msgid "Celtic languages"
msgstr ""

#: ../Doc/library/codecs.rst:1076
msgid "iso8859_15"
msgstr "iso8859_15"

#: ../Doc/library/codecs.rst:1076
msgid "iso-8859-15, latin9, L9"
msgstr "iso-8859-15, latin9, L9"

#: ../Doc/library/codecs.rst:1078
msgid "iso8859_16"
msgstr "iso8859_16"

#: ../Doc/library/codecs.rst:1078
msgid "iso-8859-16, latin10, L10"
msgstr "iso-8859-16, latin10, L10"

#: ../Doc/library/codecs.rst:1078
msgid "South-Eastern Europe"
msgstr ""

#: ../Doc/library/codecs.rst:1080
msgid "johab"
msgstr "johab"

#: ../Doc/library/codecs.rst:1080
msgid "cp1361, ms1361"
msgstr "cp1361, ms1361"

#: ../Doc/library/codecs.rst:1082
msgid "koi8_r"
msgstr "koi8_r"

#: ../Doc/library/codecs.rst:1084
msgid "koi8_u"
msgstr "koi8_u"

#: ../Doc/library/codecs.rst:1084
msgid "Ukrainian"
msgstr ""

#: ../Doc/library/codecs.rst:1086
msgid "mac_cyrillic"
msgstr "mac_cyrillic"

#: ../Doc/library/codecs.rst:1086
msgid "maccyrillic"
msgstr "maccyrillic"

#: ../Doc/library/codecs.rst:1089
msgid "mac_greek"
msgstr "mac_greek"

#: ../Doc/library/codecs.rst:1089
msgid "macgreek"
msgstr "macgreek"

#: ../Doc/library/codecs.rst:1091
msgid "mac_iceland"
msgstr "mac_iceland"

#: ../Doc/library/codecs.rst:1091
msgid "maciceland"
msgstr "maciceland"

#: ../Doc/library/codecs.rst:1093
msgid "mac_latin2"
msgstr "mac_latin2"

#: ../Doc/library/codecs.rst:1093
msgid "maclatin2, maccentraleurope"
msgstr "maclatin2, maccentraleurope"

#: ../Doc/library/codecs.rst:1095
msgid "mac_roman"
msgstr "mac_roman"

#: ../Doc/library/codecs.rst:1095
msgid "macroman"
msgstr ""

#: ../Doc/library/codecs.rst:1097
msgid "mac_turkish"
msgstr "mac_turkish"

#: ../Doc/library/codecs.rst:1097
msgid "macturkish"
msgstr "macturkish"

#: ../Doc/library/codecs.rst:1099
msgid "ptcp154"
msgstr "ptcp154"

#: ../Doc/library/codecs.rst:1099
msgid "csptcp154, pt154, cp154, cyrillic-asian"
msgstr "csptcp154, pt154, cp154, cyrillic-asian"

#: ../Doc/library/codecs.rst:1099
msgid "Kazakh"
msgstr ""

#: ../Doc/library/codecs.rst:1102
msgid "shift_jis"
msgstr "shift_jis"

#: ../Doc/library/codecs.rst:1102
msgid "csshiftjis, shiftjis, sjis, s_jis"
msgstr "csshiftjis, shiftjis, sjis, s_jis"

#: ../Doc/library/codecs.rst:1105
msgid "shift_jis_2004"
msgstr "shift_jis_2004"

#: ../Doc/library/codecs.rst:1105
msgid "shiftjis2004, sjis_2004, sjis2004"
msgstr "shiftjis2004, sjis_2004, sjis2004"

#: ../Doc/library/codecs.rst:1108
msgid "shift_jisx0213"
msgstr "shift_jisx0213"

#: ../Doc/library/codecs.rst:1108
msgid "shiftjisx0213, sjisx0213, s_jisx0213"
msgstr "shiftjisx0213, sjisx0213, s_jisx0213"

#: ../Doc/library/codecs.rst:1111
msgid "utf_32"
msgstr "utf_32"

#: ../Doc/library/codecs.rst:1111
msgid "U32, utf32"
msgstr "U32, utf32"

#: ../Doc/library/codecs.rst:1111 ../Doc/library/codecs.rst:1113
#: ../Doc/library/codecs.rst:1115 ../Doc/library/codecs.rst:1117
#: ../Doc/library/codecs.rst:1123 ../Doc/library/codecs.rst:1125
#: ../Doc/library/codecs.rst:1127
msgid "all languages"
msgstr ""

#: ../Doc/library/codecs.rst:1113
msgid "utf_32_be"
msgstr "utf_32_be"

#: ../Doc/library/codecs.rst:1113
msgid "UTF-32BE"
msgstr "UTF-32BE"

#: ../Doc/library/codecs.rst:1115
msgid "utf_32_le"
msgstr "utf_32_le"

#: ../Doc/library/codecs.rst:1115
msgid "UTF-32LE"
msgstr "UTF-32LE"

#: ../Doc/library/codecs.rst:1117
msgid "utf_16"
msgstr "utf_16"

#: ../Doc/library/codecs.rst:1117
msgid "U16, utf16"
msgstr "U16, utf16"

#: ../Doc/library/codecs.rst:1119
msgid "utf_16_be"
msgstr "utf_16_be"

#: ../Doc/library/codecs.rst:1119
msgid "UTF-16BE"
msgstr "UTF-16BE"

#: ../Doc/library/codecs.rst:1119 ../Doc/library/codecs.rst:1121
msgid "all languages (BMP only)"
msgstr ""

#: ../Doc/library/codecs.rst:1121
msgid "utf_16_le"
msgstr "utf_16_le"

#: ../Doc/library/codecs.rst:1121
msgid "UTF-16LE"
msgstr "UTF-16LE"

#: ../Doc/library/codecs.rst:1123
msgid "utf_7"
msgstr "utf_7"

#: ../Doc/library/codecs.rst:1123
msgid "U7, unicode-1-1-utf-7"
msgstr "U7, unicode-1-1-utf-7"

#: ../Doc/library/codecs.rst:1125
msgid "utf_8"
msgstr "utf_8"

#: ../Doc/library/codecs.rst:1125
msgid "U8, UTF, utf8"
msgstr "U8, UTF, utf8"

#: ../Doc/library/codecs.rst:1127
msgid "utf_8_sig"
msgstr "utf_8_sig"

#: ../Doc/library/codecs.rst:1131
msgid "Python Specific Encodings"
msgstr ""

#: ../Doc/library/codecs.rst:1133
msgid ""
"A number of predefined codecs are specific to Python, so their codec names "
"have no meaning outside Python.  These are listed in the tables below based "
"on the expected input and output types (note that while text encodings are "
"the most common use case for codecs, the underlying codec infrastructure "
"supports arbitrary data transforms rather than just text encodings).  For "
"asymmetric codecs, the stated purpose describes the encoding direction."
msgstr ""

#: ../Doc/library/codecs.rst:1140
msgid ""
"The following codecs provide unicode-to-str encoding [#encoding-note]_ and "
"str-to-unicode decoding [#decoding-note]_, similar to the Unicode text "
"encodings."
msgstr ""

#: ../Doc/library/codecs.rst:1147 ../Doc/library/codecs.rst:1196
msgid "Purpose"
msgstr ""

#: ../Doc/library/codecs.rst:1149
msgid "idna"
msgstr "idna"

#: ../Doc/library/codecs.rst:1149
msgid "Implements :rfc:`3490`, see also :mod:`encodings.idna`"
msgstr ""

#: ../Doc/library/codecs.rst:1153
msgid "mbcs"
msgstr "mbcs"

#: ../Doc/library/codecs.rst:1153
msgid "dbcs"
msgstr "dbcs"

#: ../Doc/library/codecs.rst:1153
msgid "Windows only: Encode operand according to the ANSI codepage (CP_ACP)"
msgstr ""

#: ../Doc/library/codecs.rst:1157
msgid "palmos"
msgstr "palmos"

#: ../Doc/library/codecs.rst:1157
msgid "Encoding of PalmOS 3.5"
msgstr ""

#: ../Doc/library/codecs.rst:1159
msgid "punycode"
msgstr "punycode"

#: ../Doc/library/codecs.rst:1159
msgid "Implements :rfc:`3492`"
msgstr ""

#: ../Doc/library/codecs.rst:1161
msgid "raw_unicode_escape"
msgstr "raw_unicode_escape"

#: ../Doc/library/codecs.rst:1161
msgid ""
"Produce a string that is suitable as raw Unicode literal in Python source "
"code"
msgstr ""

#: ../Doc/library/codecs.rst:1166
msgid "rot_13"
msgstr "rot_13"

#: ../Doc/library/codecs.rst:1166
msgid "rot13"
msgstr "rot13"

#: ../Doc/library/codecs.rst:1166
msgid "Returns the Caesar-cypher encryption of the operand"
msgstr ""

#: ../Doc/library/codecs.rst:1169
msgid "undefined"
msgstr "undefined"

#: ../Doc/library/codecs.rst:1169
msgid ""
"Raise an exception for all conversions. Can be used as the system encoding "
"if no automatic :term:`coercion` between byte and Unicode strings is desired."
msgstr ""

#: ../Doc/library/codecs.rst:1177
msgid "unicode_escape"
msgstr "unicode_escape"

#: ../Doc/library/codecs.rst:1177
msgid ""
"Produce a string that is suitable as Unicode literal in Python source code"
msgstr ""

#: ../Doc/library/codecs.rst:1182
msgid "unicode_internal"
msgstr "unicode_internal"

#: ../Doc/library/codecs.rst:1182
msgid "Return the internal representation of the operand"
msgstr ""

#: ../Doc/library/codecs.rst:1187
msgid "The ``idna`` and ``punycode`` encodings."
msgstr ""

#: ../Doc/library/codecs.rst:1190
msgid ""
"The following codecs provide str-to-str encoding and decoding [#decoding-"
"note]_."
msgstr ""

#: ../Doc/library/codecs.rst:1196
msgid "Encoder/decoder"
msgstr ""

#: ../Doc/library/codecs.rst:1198
msgid "base64_codec"
msgstr ""

#: ../Doc/library/codecs.rst:1198
msgid "base64, base-64"
msgstr ""

#: ../Doc/library/codecs.rst:1198
msgid ""
"Convert operand to multiline MIME base64 (the result always includes a "
"trailing ``'\\n'``)"
msgstr ""

#: ../Doc/library/codecs.rst:1198
msgid ":meth:`base64.encodestring`, :meth:`base64.decodestring`"
msgstr ""

#: ../Doc/library/codecs.rst:1203
msgid "bz2_codec"
msgstr "bz2_codec"

#: ../Doc/library/codecs.rst:1203
msgid "bz2"
msgstr "bz2"

#: ../Doc/library/codecs.rst:1203
msgid "Compress the operand using bz2"
msgstr ""

#: ../Doc/library/codecs.rst:1203
msgid ":meth:`bz2.compress`, :meth:`bz2.decompress`"
msgstr ""

#: ../Doc/library/codecs.rst:1206
msgid "hex_codec"
msgstr "hex_codec"

#: ../Doc/library/codecs.rst:1206
msgid "hex"
msgstr "hex"

#: ../Doc/library/codecs.rst:1206
msgid "Convert operand to hexadecimal representation, with two digits per byte"
msgstr ""

#: ../Doc/library/codecs.rst:1206
msgid ":meth:`binascii.b2a_hex`, :meth:`binascii.a2b_hex`"
msgstr ""

#: ../Doc/library/codecs.rst:1211
msgid "quopri_codec"
msgstr "quopri_codec"

#: ../Doc/library/codecs.rst:1211
msgid "quopri, quoted-printable, quotedprintable"
msgstr ""

#: ../Doc/library/codecs.rst:1211
msgid "Convert operand to MIME quoted printable"
msgstr ""

#: ../Doc/library/codecs.rst:1211
msgid ":meth:`quopri.encode` with ``quotetabs=True``, :meth:`quopri.decode`"
msgstr ""

#: ../Doc/library/codecs.rst:1215
msgid "string_escape"
msgstr ""

#: ../Doc/library/codecs.rst:1215
msgid ""
"Produce a string that is suitable as string literal in Python source code"
msgstr ""

#: ../Doc/library/codecs.rst:1220
msgid "uu_codec"
msgstr "uu_codec"

#: ../Doc/library/codecs.rst:1220
msgid "uu"
msgstr "uu"

#: ../Doc/library/codecs.rst:1220
msgid "Convert the operand using uuencode"
msgstr ""

#: ../Doc/library/codecs.rst:1220
msgid ":meth:`uu.encode`, :meth:`uu.decode`"
msgstr ""

#: ../Doc/library/codecs.rst:1223
msgid "zlib_codec"
msgstr "zlib_codec"

#: ../Doc/library/codecs.rst:1223
msgid "zip, zlib"
msgstr "zip, zlib"

#: ../Doc/library/codecs.rst:1223
msgid "Compress the operand using gzip"
msgstr ""

#: ../Doc/library/codecs.rst:1223
msgid ":meth:`zlib.compress`, :meth:`zlib.decompress`"
msgstr ""

#: ../Doc/library/codecs.rst:1227
msgid ""
"str objects are also accepted as input in place of unicode objects.  They "
"are implicitly converted to unicode by decoding them using the default "
"encoding.  If this conversion fails, it may lead to encoding operations "
"raising :exc:`UnicodeDecodeError`."
msgstr ""

#: ../Doc/library/codecs.rst:1232
msgid ""
"unicode objects are also accepted as input in place of str objects.  They "
"are implicitly converted to str by encoding them using the default "
"encoding.  If this conversion fails, it may lead to decoding operations "
"raising :exc:`UnicodeEncodeError`."
msgstr ""

#: ../Doc/library/codecs.rst:1239
msgid ""
":mod:`encodings.idna` --- Internationalized Domain Names in Applications"
msgstr ""

#: ../Doc/library/codecs.rst:1247
msgid ""
"This module implements :rfc:`3490` (Internationalized Domain Names in "
"Applications) and :rfc:`3492` (Nameprep: A Stringprep Profile for "
"Internationalized Domain Names (IDN)). It builds upon the ``punycode`` "
"encoding and :mod:`stringprep`."
msgstr ""

#: ../Doc/library/codecs.rst:1252
msgid ""
"These RFCs together define a protocol to support non-ASCII characters in "
"domain names. A domain name containing non-ASCII characters (such as ``www."
"Alliancefrançaise.nu``) is converted into an ASCII-compatible encoding (ACE, "
"such as ``www.xn--alliancefranaise-npb.nu``). The ACE form of the domain "
"name is then used in all places where arbitrary characters are not allowed "
"by the protocol, such as DNS queries, HTTP :mailheader:`Host` fields, and so "
"on. This conversion is carried out in the application; if possible invisible "
"to the user: The application should transparently convert Unicode domain "
"labels to IDNA on the wire, and convert back ACE labels to Unicode before "
"presenting them to the user."
msgstr ""

#: ../Doc/library/codecs.rst:1263
msgid ""
"Python supports this conversion in several ways:  the ``idna`` codec "
"performs conversion between Unicode and ACE, separating an input string into "
"labels based on the separator characters defined in `section 3.1`_ (1) of :"
"rfc:`3490` and converting each label to ACE as required, and conversely "
"separating an input byte string into labels based on the ``.`` separator and "
"converting any ACE labels found into unicode.  Furthermore, the :mod:"
"`socket` module transparently converts Unicode host names to ACE, so that "
"applications need not be concerned about converting host names themselves "
"when they pass them to the socket module. On top of that, modules that have "
"host names as function parameters, such as :mod:`httplib` and :mod:`ftplib`, "
"accept Unicode host names (:mod:`httplib` then also transparently sends an "
"IDNA hostname in the :mailheader:`Host` field if it sends that field at all)."
msgstr ""

#: ../Doc/library/codecs.rst:1278
msgid ""
"When receiving host names from the wire (such as in reverse name lookup), no "
"automatic conversion to Unicode is performed: Applications wishing to "
"present such host names to the user should decode them to Unicode."
msgstr ""

#: ../Doc/library/codecs.rst:1282
msgid ""
"The module :mod:`encodings.idna` also implements the nameprep procedure, "
"which performs certain normalizations on host names, to achieve case-"
"insensitivity of international domain names, and to unify similar "
"characters. The nameprep functions can be used directly if desired."
msgstr ""

#: ../Doc/library/codecs.rst:1290
msgid ""
"Return the nameprepped version of *label*. The implementation currently "
"assumes query strings, so ``AllowUnassigned`` is true."
msgstr ""

#: ../Doc/library/codecs.rst:1296
msgid ""
"Convert a label to ASCII, as specified in :rfc:`3490`. ``UseSTD3ASCIIRules`` "
"is assumed to be false."
msgstr ""

#: ../Doc/library/codecs.rst:1302
msgid "Convert a label to Unicode, as specified in :rfc:`3490`."
msgstr ""

#: ../Doc/library/codecs.rst:1306
msgid ":mod:`encodings.utf_8_sig` --- UTF-8 codec with BOM signature"
msgstr ""

#: ../Doc/library/codecs.rst:1314
msgid ""
"This module implements a variant of the UTF-8 codec: On encoding a UTF-8 "
"encoded BOM will be prepended to the UTF-8 encoded bytes. For the stateful "
"encoder this is only done once (on the first write to the byte stream).  For "
"decoding an optional UTF-8 encoded BOM at the start of the data will be "
"skipped."
msgstr ""
