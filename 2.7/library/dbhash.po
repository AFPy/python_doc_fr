# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/dbhash.rst:2
msgid ":mod:`dbhash` --- DBM-style interface to the BSD database library"
msgstr ""

#: ../Doc/library/dbhash.rst:8
msgid "The :mod:`dbhash` module has been removed in Python 3."
msgstr ""

#: ../Doc/library/dbhash.rst:13
msgid ""
"The :mod:`dbhash` module provides a function to open databases using the BSD "
"``db`` library.  This module mirrors the interface of the other Python "
"database modules that provide access to DBM-style databases.  The :mod:"
"`bsddb` module is required  to use :mod:`dbhash`."
msgstr ""

#: ../Doc/library/dbhash.rst:18
msgid "This module provides an exception and a function:"
msgstr ""

#: ../Doc/library/dbhash.rst:23
msgid ""
"Exception raised on database errors other than :exc:`KeyError`.  It is a "
"synonym for :exc:`bsddb.error`."
msgstr ""

#: ../Doc/library/dbhash.rst:29
msgid ""
"Open a ``db`` database and return the database object.  The *path* argument "
"is the name of the database file."
msgstr ""

#: ../Doc/library/dbhash.rst:32
msgid "The *flag* argument can be:"
msgstr ""

#: ../Doc/library/dbhash.rst:35
msgid "Value"
msgstr "Valeur"

#: ../Doc/library/dbhash.rst:35
msgid "Meaning"
msgstr "Signification"

#: ../Doc/library/dbhash.rst:37
msgid "``'r'``"
msgstr "``'r'``"

#: ../Doc/library/dbhash.rst:37
msgid "Open existing database for reading only (default)"
msgstr ""

#: ../Doc/library/dbhash.rst:40
msgid "``'w'``"
msgstr "``'w'``"

#: ../Doc/library/dbhash.rst:40
msgid "Open existing database for reading and writing"
msgstr ""

#: ../Doc/library/dbhash.rst:43
msgid "``'c'``"
msgstr "``'c'``"

#: ../Doc/library/dbhash.rst:43
msgid "Open database for reading and writing, creating it if it doesn't exist"
msgstr ""

#: ../Doc/library/dbhash.rst:46
msgid "``'n'``"
msgstr "``'n'``"

#: ../Doc/library/dbhash.rst:46
msgid "Always create a new, empty database, open for reading and writing"
msgstr ""

#: ../Doc/library/dbhash.rst:50
msgid ""
"For platforms on which the BSD ``db`` library supports locking, an ``'l'`` "
"can be appended to indicate that locking should be used."
msgstr ""

#: ../Doc/library/dbhash.rst:53
msgid ""
"The optional *mode* parameter is used to indicate the Unix permission bits "
"that should be set if a new database must be created; this will be masked by "
"the current umask value for the process."
msgstr ""

#: ../Doc/library/dbhash.rst:61
msgid "Module :mod:`anydbm`"
msgstr ""

#: ../Doc/library/dbhash.rst:61
msgid "Generic interface to ``dbm``\\ -style databases."
msgstr ""

#: ../Doc/library/dbhash.rst:64
msgid "Module :mod:`bsddb`"
msgstr ""

#: ../Doc/library/dbhash.rst:64
msgid "Lower-level interface to the BSD ``db`` library."
msgstr ""

#: ../Doc/library/dbhash.rst:66
msgid "Module :mod:`whichdb`"
msgstr ""

#: ../Doc/library/dbhash.rst:67
msgid "Utility module used to determine the type of an existing database."
msgstr ""

#: ../Doc/library/dbhash.rst:73
msgid "Database Objects"
msgstr ""

#: ../Doc/library/dbhash.rst:75
msgid ""
"The database objects returned by :func:`.open` provide the methods  common "
"to all the DBM-style databases and mapping objects.  The following methods "
"are available in addition to the standard methods."
msgstr ""

#: ../Doc/library/dbhash.rst:82
msgid ""
"It's possible to loop over every key/value pair in the database using this "
"method and the :meth:`!next` method.  The traversal is ordered by the "
"databases internal hash values, and won't be sorted by the key values.  This "
"method returns the starting key."
msgstr ""

#: ../Doc/library/dbhash.rst:90
msgid ""
"Return the last key/value pair in a database traversal.  This may be used to "
"begin a reverse-order traversal; see :meth:`previous`."
msgstr ""

#: ../Doc/library/dbhash.rst:96
msgid ""
"Returns the key next key/value pair in a database traversal.  The following "
"code prints every key in the database ``db``, without having to create a "
"list in memory that contains them all::"
msgstr ""

#: ../Doc/library/dbhash.rst:107
msgid ""
"Returns the previous key/value pair in a forward-traversal of the database. "
"In conjunction with :meth:`last`, this may be used to implement a reverse-"
"order traversal."
msgstr ""

#: ../Doc/library/dbhash.rst:114
msgid "This method forces any unwritten data to be written to the disk."
msgstr ""
