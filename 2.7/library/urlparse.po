# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/urlparse.rst:2
msgid ":mod:`urlparse` --- Parse URLs into components"
msgstr ""

#: ../Doc/library/urlparse.rst:16
msgid ""
"The :mod:`urlparse` module is renamed to :mod:`urllib.parse` in Python 3. "
"The :term:`2to3` tool will automatically adapt imports when converting your "
"sources to Python 3."
msgstr ""

#: ../Doc/library/urlparse.rst:20
msgid "**Source code:** :source:`Lib/urlparse.py`"
msgstr ""

#: ../Doc/library/urlparse.rst:24
msgid ""
"This module defines a standard interface to break Uniform Resource Locator "
"(URL) strings up in components (addressing scheme, network location, path "
"etc.), to combine the components back into a URL string, and to convert a "
"\"relative URL\" to an absolute URL given a \"base URL.\""
msgstr ""

#: ../Doc/library/urlparse.rst:29
msgid ""
"The module has been designed to match the Internet RFC on Relative Uniform "
"Resource Locators. It supports the following URL schemes: ``file``, ``ftp``, "
"``gopher``, ``hdl``, ``http``, ``https``, ``imap``, ``mailto``, ``mms``, "
"``news``,  ``nntp``, ``prospero``, ``rsync``, ``rtsp``, ``rtspu``,  "
"``sftp``, ``shttp``, ``sip``, ``sips``, ``snews``, ``svn``,  ``svn+ssh``, "
"``telnet``, ``wais``."
msgstr ""

#: ../Doc/library/urlparse.rst:36
msgid "Support for the ``sftp`` and ``sips`` schemes."
msgstr ""

#: ../Doc/library/urlparse.rst:39
msgid "The :mod:`urlparse` module defines the following functions:"
msgstr ""

#: ../Doc/library/urlparse.rst:44
msgid ""
"Parse a URL into six components, returning a 6-tuple.  This corresponds to "
"the general structure of a URL: ``scheme://netloc/path;parameters?"
"query#fragment``. Each tuple item is a string, possibly empty. The "
"components are not broken up in smaller parts (for example, the network "
"location is a single string), and % escapes are not expanded. The delimiters "
"as shown above are not part of the result, except for a leading slash in the "
"*path* component, which is retained if present.  For example:"
msgstr ""

#: ../Doc/library/urlparse.rst:65
msgid ""
"Following the syntax specifications in :rfc:`1808`, urlparse recognizes a "
"netloc only if it is properly introduced by '//'.  Otherwise the input is "
"presumed to be a relative URL and thus to start with a path component."
msgstr ""

#: ../Doc/library/urlparse.rst:81
msgid ""
"If the *scheme* argument is specified, it gives the default addressing "
"scheme, to be used only if the URL does not specify one.  The default value "
"for this argument is the empty string."
msgstr ""

#: ../Doc/library/urlparse.rst:85
msgid ""
"If the *allow_fragments* argument is false, fragment identifiers are not "
"recognized and parsed as part of the preceding component, even if the URL's "
"addressing scheme normally does support them.  The default value for this "
"argument is :const:`True`."
msgstr ""

#: ../Doc/library/urlparse.rst:90 ../Doc/library/urlparse.rst:194
msgid ""
"The return value is actually an instance of a subclass of :class:`tuple`.  "
"This class has the following additional read-only convenience attributes:"
msgstr ""

#: ../Doc/library/urlparse.rst:94 ../Doc/library/urlparse.rst:198
msgid "Attribute"
msgstr "Attribut"

#: ../Doc/library/urlparse.rst:94 ../Doc/library/urlparse.rst:198
msgid "Index"
msgstr ""

#: ../Doc/library/urlparse.rst:94 ../Doc/library/urlparse.rst:198
msgid "Value"
msgstr "Valeur"

#: ../Doc/library/urlparse.rst:94 ../Doc/library/urlparse.rst:198
msgid "Value if not present"
msgstr ""

#: ../Doc/library/urlparse.rst:96 ../Doc/library/urlparse.rst:200
msgid ":attr:`scheme`"
msgstr ":attr:`scheme`"

#: ../Doc/library/urlparse.rst:96 ../Doc/library/urlparse.rst:200
msgid "0"
msgstr "0"

#: ../Doc/library/urlparse.rst:96 ../Doc/library/urlparse.rst:200
msgid "URL scheme specifier"
msgstr ""

#: ../Doc/library/urlparse.rst:96 ../Doc/library/urlparse.rst:200
msgid "*scheme* parameter"
msgstr ""

#: ../Doc/library/urlparse.rst:98 ../Doc/library/urlparse.rst:202
msgid ":attr:`netloc`"
msgstr ":attr:`netloc`"

#: ../Doc/library/urlparse.rst:98 ../Doc/library/urlparse.rst:202
msgid "1"
msgstr "1"

#: ../Doc/library/urlparse.rst:98 ../Doc/library/urlparse.rst:202
msgid "Network location part"
msgstr ""

#: ../Doc/library/urlparse.rst:98 ../Doc/library/urlparse.rst:100
#: ../Doc/library/urlparse.rst:102 ../Doc/library/urlparse.rst:105
#: ../Doc/library/urlparse.rst:107 ../Doc/library/urlparse.rst:202
#: ../Doc/library/urlparse.rst:204 ../Doc/library/urlparse.rst:206
#: ../Doc/library/urlparse.rst:208
msgid "empty string"
msgstr ""

#: ../Doc/library/urlparse.rst:100 ../Doc/library/urlparse.rst:204
msgid ":attr:`path`"
msgstr ":attr:`path`"

#: ../Doc/library/urlparse.rst:100 ../Doc/library/urlparse.rst:204
msgid "2"
msgstr "2"

#: ../Doc/library/urlparse.rst:100 ../Doc/library/urlparse.rst:204
msgid "Hierarchical path"
msgstr ""

#: ../Doc/library/urlparse.rst:102
msgid ":attr:`params`"
msgstr ":attr:`params`"

#: ../Doc/library/urlparse.rst:102 ../Doc/library/urlparse.rst:206
msgid "3"
msgstr "3"

#: ../Doc/library/urlparse.rst:102
msgid "Parameters for last path element"
msgstr ""

#: ../Doc/library/urlparse.rst:105 ../Doc/library/urlparse.rst:206
msgid ":attr:`query`"
msgstr ":attr:`query`"

#: ../Doc/library/urlparse.rst:105 ../Doc/library/urlparse.rst:208
msgid "4"
msgstr "4"

#: ../Doc/library/urlparse.rst:105 ../Doc/library/urlparse.rst:206
msgid "Query component"
msgstr ""

#: ../Doc/library/urlparse.rst:107 ../Doc/library/urlparse.rst:208
msgid ":attr:`fragment`"
msgstr ":attr:`fragment`"

#: ../Doc/library/urlparse.rst:107
msgid "5"
msgstr "5"

#: ../Doc/library/urlparse.rst:107 ../Doc/library/urlparse.rst:208
msgid "Fragment identifier"
msgstr ""

#: ../Doc/library/urlparse.rst:109 ../Doc/library/urlparse.rst:210
msgid ":attr:`username`"
msgstr ":attr:`username`"

#: ../Doc/library/urlparse.rst:109 ../Doc/library/urlparse.rst:210
msgid "User name"
msgstr ""

#: ../Doc/library/urlparse.rst:109 ../Doc/library/urlparse.rst:111
#: ../Doc/library/urlparse.rst:113 ../Doc/library/urlparse.rst:115
#: ../Doc/library/urlparse.rst:210 ../Doc/library/urlparse.rst:212
#: ../Doc/library/urlparse.rst:214 ../Doc/library/urlparse.rst:216
msgid ":const:`None`"
msgstr ""

#: ../Doc/library/urlparse.rst:111 ../Doc/library/urlparse.rst:212
msgid ":attr:`password`"
msgstr ":attr:`password`"

#: ../Doc/library/urlparse.rst:111 ../Doc/library/urlparse.rst:212
msgid "Password"
msgstr ""

#: ../Doc/library/urlparse.rst:113 ../Doc/library/urlparse.rst:214
msgid ":attr:`hostname`"
msgstr ":attr:`hostname`"

#: ../Doc/library/urlparse.rst:113 ../Doc/library/urlparse.rst:214
msgid "Host name (lower case)"
msgstr ""

#: ../Doc/library/urlparse.rst:115 ../Doc/library/urlparse.rst:216
msgid ":attr:`port`"
msgstr ":attr:`port`"

#: ../Doc/library/urlparse.rst:115 ../Doc/library/urlparse.rst:216
msgid "Port number as integer, if present"
msgstr ""

#: ../Doc/library/urlparse.rst:119 ../Doc/library/urlparse.rst:220
msgid ""
"See section :ref:`urlparse-result-object` for more information on the result "
"object."
msgstr ""

#: ../Doc/library/urlparse.rst:122 ../Doc/library/urlparse.rst:225
msgid "Added attributes to return value."
msgstr ""

#: ../Doc/library/urlparse.rst:125
msgid "Added IPv6 URL parsing capabilities."
msgstr ""

#: ../Doc/library/urlparse.rst:131
msgid ""
"Parse a query string given as a string argument (data of type :mimetype:"
"`application/x-www-form-urlencoded`).  Data are returned as a dictionary.  "
"The dictionary keys are the unique query variable names and the values are "
"lists of values for each name."
msgstr ""

#: ../Doc/library/urlparse.rst:136 ../Doc/library/urlparse.rst:159
msgid ""
"The optional argument *keep_blank_values* is a flag indicating whether blank "
"values in percent-encoded queries should be treated as blank strings.   A "
"true value indicates that blanks should be retained as  blank strings.  The "
"default false value indicates that blank values are to be ignored and "
"treated as if they were not included."
msgstr ""

#: ../Doc/library/urlparse.rst:142 ../Doc/library/urlparse.rst:165
msgid ""
"The optional argument *strict_parsing* is a flag indicating what to do with "
"parsing errors.  If false (the default), errors are silently ignored.  If "
"true, errors raise a :exc:`ValueError` exception."
msgstr ""

#: ../Doc/library/urlparse.rst:146
msgid ""
"Use the :func:`urllib.urlencode` function to convert such dictionaries into "
"query strings."
msgstr ""

#: ../Doc/library/urlparse.rst:149 ../Doc/library/urlparse.rst:172
msgid "Copied from the :mod:`cgi` module."
msgstr ""

#: ../Doc/library/urlparse.rst:155
msgid ""
"Parse a query string given as a string argument (data of type :mimetype:"
"`application/x-www-form-urlencoded`).  Data are returned as a list of name, "
"value pairs."
msgstr ""

#: ../Doc/library/urlparse.rst:169
msgid ""
"Use the :func:`urllib.urlencode` function to convert such lists of pairs "
"into query strings."
msgstr ""

#: ../Doc/library/urlparse.rst:178
msgid ""
"Construct a URL from a tuple as returned by ``urlparse()``. The *parts* "
"argument can be any six-item iterable. This may result in a slightly "
"different, but equivalent URL, if the URL that was parsed originally had "
"unnecessary delimiters (for example, a ? with an empty query; the RFC states "
"that these are equivalent)."
msgstr ""

#: ../Doc/library/urlparse.rst:187
msgid ""
"This is similar to :func:`urlparse`, but does not split the params from the "
"URL. This should generally be used instead of :func:`urlparse` if the more "
"recent URL syntax allowing parameters to be applied to each segment of the "
"*path* portion of the URL (see :rfc:`2396`) is wanted.  A separate function "
"is needed to separate the path segments and parameters.  This function "
"returns a 5-tuple: (addressing scheme, network location, path, query, "
"fragment identifier)."
msgstr ""

#: ../Doc/library/urlparse.rst:231
msgid ""
"Combine the elements of a tuple as returned by :func:`urlsplit` into a "
"complete URL as a string. The *parts* argument can be any five-item "
"iterable. This may result in a slightly different, but equivalent URL, if "
"the URL that was parsed originally had unnecessary delimiters (for example, "
"a ? with an empty query; the RFC states that these are equivalent)."
msgstr ""

#: ../Doc/library/urlparse.rst:242
msgid ""
"Construct a full (\"absolute\") URL by combining a \"base URL\" (*base*) "
"with another URL (*url*).  Informally, this uses components of the base URL, "
"in particular the addressing scheme, the network location and (part of) the "
"path, to provide missing components in the relative URL.  For example:"
msgstr ""

#: ../Doc/library/urlparse.rst:251
msgid ""
"The *allow_fragments* argument has the same meaning and default as for :func:"
"`urlparse`."
msgstr ""

#: ../Doc/library/urlparse.rst:256
msgid ""
"If *url* is an absolute URL (that is, starting with ``//`` or ``scheme://"
"``), the *url*'s host name and/or scheme will be present in the result.  For "
"example:"
msgstr ""

#: ../Doc/library/urlparse.rst:265
msgid ""
"If you do not want that behavior, preprocess the *url* with :func:`urlsplit` "
"and :func:`urlunsplit`, removing possible *scheme* and *netloc* parts."
msgstr ""

#: ../Doc/library/urlparse.rst:271
msgid ""
"If *url* contains a fragment identifier, returns a modified version of *url* "
"with no fragment identifier, and the fragment identifier as a separate "
"string. If there is no fragment identifier in *url*, returns *url* "
"unmodified and an empty string."
msgstr ""

#: ../Doc/library/urlparse.rst:283
msgid ":rfc:`3986` - Uniform Resource Identifiers"
msgstr ""

#: ../Doc/library/urlparse.rst:280
msgid ""
"This is the current standard (STD66). Any changes to urlparse module should "
"conform to this. Certain deviations could be observed, which are mostly for "
"backward compatibility purposes and for certain de-facto parsing "
"requirements as commonly observed in major browsers."
msgstr ""

#: ../Doc/library/urlparse.rst:286
msgid ":rfc:`2732` - Format for Literal IPv6 Addresses in URL's."
msgstr ""

#: ../Doc/library/urlparse.rst:286
msgid "This specifies the parsing requirements of IPv6 URLs."
msgstr ""

#: ../Doc/library/urlparse.rst:290
msgid ":rfc:`2396` - Uniform Resource Identifiers (URI): Generic Syntax"
msgstr ""

#: ../Doc/library/urlparse.rst:289
msgid ""
"Document describing the generic syntactic requirements for both Uniform "
"Resource Names (URNs) and Uniform Resource Locators (URLs)."
msgstr ""

#: ../Doc/library/urlparse.rst:293
msgid ":rfc:`2368` - The mailto URL scheme."
msgstr ""

#: ../Doc/library/urlparse.rst:293
msgid "Parsing requirements for mailto URL schemes."
msgstr ""

#: ../Doc/library/urlparse.rst:298
msgid ":rfc:`1808` - Relative Uniform Resource Locators"
msgstr ""

#: ../Doc/library/urlparse.rst:296
msgid ""
"This Request For Comments includes the rules for joining an absolute and a "
"relative URL, including a fair number of \"Abnormal Examples\" which govern "
"the treatment of border cases."
msgstr ""

#: ../Doc/library/urlparse.rst:300
msgid ":rfc:`1738` - Uniform Resource Locators (URL)"
msgstr ""

#: ../Doc/library/urlparse.rst:301
msgid "This specifies the formal syntax and semantics of absolute URLs."
msgstr ""

#: ../Doc/library/urlparse.rst:307
msgid "Results of :func:`urlparse` and :func:`urlsplit`"
msgstr ""

#: ../Doc/library/urlparse.rst:309
msgid ""
"The result objects from the :func:`urlparse` and :func:`urlsplit` functions "
"are subclasses of the :class:`tuple` type.  These subclasses add the "
"attributes described in those functions, as well as provide an additional "
"method:"
msgstr ""

#: ../Doc/library/urlparse.rst:316
msgid ""
"Return the re-combined version of the original URL as a string. This may "
"differ from the original URL in that the scheme will always be normalized to "
"lower case and empty components may be dropped. Specifically, empty "
"parameters, queries, and fragment identifiers will be removed."
msgstr ""

#: ../Doc/library/urlparse.rst:321
msgid ""
"The result of this method is a fixpoint if passed back through the original "
"parsing function:"
msgstr ""

#: ../Doc/library/urlparse.rst:337
msgid "The following classes provide the implementations of the parse results:"
msgstr ""

#: ../Doc/library/urlparse.rst:342
msgid "Concrete class for :func:`urlparse` results."
msgstr ""

#: ../Doc/library/urlparse.rst:347
msgid "Concrete class for :func:`urlsplit` results."
msgstr ""
