# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/configparser.rst:2
msgid ":mod:`ConfigParser` --- Configuration file parser"
msgstr ""

#: ../Doc/library/configparser.rst:14
msgid ""
"The :mod:`ConfigParser` module has been renamed to :mod:`configparser` in "
"Python 3.  The :term:`2to3` tool will automatically adapt imports when "
"converting your sources to Python 3."
msgstr ""

#: ../Doc/library/configparser.rst:24
msgid ""
"This module defines the class :class:`ConfigParser`.   The :class:"
"`ConfigParser` class implements a basic configuration file parser language "
"which provides a structure similar to what you would find on Microsoft "
"Windows INI files.  You can use this to write Python programs which can be "
"customized by end users easily."
msgstr ""

#: ../Doc/library/configparser.rst:32
msgid ""
"This library does *not* interpret or write the value-type prefixes used in "
"the Windows Registry extended version of INI syntax."
msgstr ""

#: ../Doc/library/configparser.rst:39 ../Doc/library/configparser.rst:224
msgid "Module :mod:`shlex`"
msgstr ""

#: ../Doc/library/configparser.rst:38 ../Doc/library/configparser.rst:224
msgid ""
"Support for a creating Unix shell-like mini-languages which can be used as "
"an alternate format for application configuration files."
msgstr ""

#: ../Doc/library/configparser.rst:42
msgid "Module :mod:`json`"
msgstr ""

#: ../Doc/library/configparser.rst:42
msgid ""
"The json module implements a subset of JavaScript syntax which can also be "
"used for this purpose."
msgstr ""

#: ../Doc/library/configparser.rst:45
msgid ""
"The configuration file consists of sections, led by a ``[section]`` header "
"and followed by ``name: value`` entries, with continuations in the style of :"
"rfc:`822` (see section 3.1.1, \"LONG HEADER FIELDS\"); ``name=value`` is "
"also accepted.  Note that leading whitespace is removed from values. The "
"optional values can contain format strings which refer to other values in "
"the same section, or values in a special ``DEFAULT`` section.  Additional "
"defaults can be provided on initialization and retrieval.  Lines beginning "
"with ``'#'`` or ``';'`` are ignored and may be used to provide comments."
msgstr ""

#: ../Doc/library/configparser.rst:54
msgid ""
"Configuration files may include comments, prefixed by specific characters "
"(``#`` and ``;``).  Comments may appear on their own in an otherwise empty "
"line, or may be entered in lines holding values or section names.  In the "
"latter case, they need to be preceded by a whitespace character to be "
"recognized as a comment. (For backwards compatibility, only ``;`` starts an "
"inline comment, while ``#`` does not.)"
msgstr ""

#: ../Doc/library/configparser.rst:61
msgid ""
"On top of the core functionality, :class:`SafeConfigParser` supports "
"interpolation.  This means values can contain format strings which refer to "
"other values in the same section, or values in a special ``DEFAULT`` "
"section. Additional defaults can be provided on initialization."
msgstr ""

#: ../Doc/library/configparser.rst:66
msgid "For example::"
msgstr "Par exemple : ::"

#: ../Doc/library/configparser.rst:74
msgid ""
"would resolve the ``%(dir)s`` to the value of ``dir`` (``frob`` in this "
"case). All reference expansions are done on demand."
msgstr ""

#: ../Doc/library/configparser.rst:77
msgid ""
"Default values can be specified by passing them into the :class:"
"`ConfigParser` constructor as a dictionary.  Additional defaults  may be "
"passed into the :meth:`get` method which will override all others."
msgstr ""

#: ../Doc/library/configparser.rst:81
msgid ""
"Sections are normally stored in a built-in dictionary. An alternative "
"dictionary type can be passed to the :class:`ConfigParser` constructor. For "
"example, if a dictionary type is passed that sorts its keys, the sections "
"will be sorted on write-back, as will be the keys within each section."
msgstr ""

#: ../Doc/library/configparser.rst:89
msgid ""
"The basic configuration object.  When *defaults* is given, it is initialized "
"into the dictionary of intrinsic defaults.  When *dict_type* is given, it "
"will be used to create the dictionary objects for the list of sections, for "
"the options within a section, and for the default values.  When "
"*allow_no_value* is true (default: ``False``), options without values are "
"accepted; the value presented for these is ``None``."
msgstr ""

#: ../Doc/library/configparser.rst:96
msgid "This class does not support the magical interpolation behavior."
msgstr ""

#: ../Doc/library/configparser.rst:99
msgid ""
"All option names are passed through the :meth:`optionxform` method.  Its "
"default implementation converts option names to lower case."
msgstr ""

#: ../Doc/library/configparser.rst:104 ../Doc/library/configparser.rst:128
#: ../Doc/library/configparser.rst:147
msgid "*dict_type* was added."
msgstr ""

#: ../Doc/library/configparser.rst:107 ../Doc/library/configparser.rst:131
#: ../Doc/library/configparser.rst:150
msgid ""
"The default *dict_type* is :class:`collections.OrderedDict`. "
"*allow_no_value* was added."
msgstr ""

#: ../Doc/library/configparser.rst:114
msgid ""
"Derived class of :class:`RawConfigParser` that implements the magical "
"interpolation feature and adds optional arguments to the :meth:`get` and :"
"meth:`items` methods.  The values in *defaults* must be appropriate for the "
"``%()s`` string interpolation.  Note that *__name__* is an intrinsic "
"default; its value is the section name, and will override any value provided "
"in *defaults*."
msgstr ""

#: ../Doc/library/configparser.rst:121
msgid ""
"All option names used in interpolation will be passed through the :meth:"
"`optionxform` method just like any other option name reference.  Using the "
"default implementation of :meth:`optionxform`, the values ``foo %(bar)s`` "
"and ``foo %(BAR)s`` are equivalent."
msgstr ""

#: ../Doc/library/configparser.rst:138
msgid ""
"Derived class of :class:`ConfigParser` that implements a more-sane variant "
"of the magical interpolation feature.  This implementation is more "
"predictable as well. New applications should prefer this version if they "
"don't need to be compatible with older versions of Python."
msgstr ""

#: ../Doc/library/configparser.rst:157
msgid "Base class for all other configparser exceptions."
msgstr ""

#: ../Doc/library/configparser.rst:162
msgid "Exception raised when a specified section is not found."
msgstr ""

#: ../Doc/library/configparser.rst:167
msgid ""
"Exception raised if :meth:`add_section` is called with the name of a section "
"that is already present."
msgstr ""

#: ../Doc/library/configparser.rst:173
msgid ""
"Exception raised when a specified option is not found in the specified  "
"section."
msgstr ""

#: ../Doc/library/configparser.rst:178
msgid ""
"Base class for exceptions raised when problems occur performing string "
"interpolation."
msgstr ""

#: ../Doc/library/configparser.rst:184
msgid ""
"Exception raised when string interpolation cannot be completed because the "
"number of iterations exceeds :const:`MAX_INTERPOLATION_DEPTH`. Subclass of :"
"exc:`InterpolationError`."
msgstr ""

#: ../Doc/library/configparser.rst:191
msgid ""
"Exception raised when an option referenced from a value does not exist. "
"Subclass of :exc:`InterpolationError`."
msgstr ""

#: ../Doc/library/configparser.rst:199
msgid ""
"Exception raised when the source text into which substitutions are made does "
"not conform to the required syntax. Subclass of :exc:`InterpolationError`."
msgstr ""

#: ../Doc/library/configparser.rst:207
msgid ""
"Exception raised when attempting to parse a file which has no section "
"headers."
msgstr ""

#: ../Doc/library/configparser.rst:212
msgid "Exception raised when errors occur attempting to parse a file."
msgstr ""

#: ../Doc/library/configparser.rst:217
msgid ""
"The maximum depth for recursive interpolation for :meth:`get` when the *raw* "
"parameter is false.  This is relevant only for the :class:`ConfigParser` "
"class."
msgstr ""

#: ../Doc/library/configparser.rst:231
msgid "RawConfigParser Objects"
msgstr ""

#: ../Doc/library/configparser.rst:233
msgid ":class:`RawConfigParser` instances have the following methods:"
msgstr ""

#: ../Doc/library/configparser.rst:238
msgid "Return a dictionary containing the instance-wide defaults."
msgstr ""

#: ../Doc/library/configparser.rst:243
msgid ""
"Return a list of the sections available; ``DEFAULT`` is not included in the "
"list."
msgstr ""

#: ../Doc/library/configparser.rst:249
msgid ""
"Add a section named *section* to the instance.  If a section by the given "
"name already exists, :exc:`DuplicateSectionError` is raised. If the name "
"``DEFAULT`` (or any of it's case-insensitive variants) is passed, :exc:"
"`ValueError` is raised."
msgstr ""

#: ../Doc/library/configparser.rst:256
msgid ""
"Indicates whether the named section is present in the configuration. The "
"``DEFAULT`` section is not acknowledged."
msgstr ""

#: ../Doc/library/configparser.rst:262
msgid "Returns a list of options available in the specified *section*."
msgstr ""

#: ../Doc/library/configparser.rst:267
msgid ""
"If the given section exists, and contains the given option, return :const:"
"`True`; otherwise return :const:`False`."
msgstr ""

#: ../Doc/library/configparser.rst:275
msgid ""
"Attempt to read and parse a list of filenames, returning a list of filenames "
"which were successfully parsed.  If *filenames* is a string or Unicode "
"string, it is treated as a single filename. If a file named in *filenames* "
"cannot be opened, that file will be ignored.  This is designed so that you "
"can specify a list of potential configuration file locations (for example, "
"the current directory, the user's home directory, and some system-wide "
"directory), and all existing configuration files in the list will be read.  "
"If none of the named files exist, the :class:`ConfigParser` instance will "
"contain an empty dataset. An application which requires initial values to be "
"loaded from a file should load the required file or files using :meth:"
"`readfp` before calling :meth:`read` for any optional files::"
msgstr ""

#: ../Doc/library/configparser.rst:293
msgid "Returns list of successfully parsed filenames."
msgstr ""

#: ../Doc/library/configparser.rst:299
msgid ""
"Read and parse configuration data from the file or file-like object in *fp* "
"(only the :meth:`readline` method is used).  If *filename* is omitted and "
"*fp* has a :attr:`name` attribute, that is used for *filename*; the default "
"is ``<???>``."
msgstr ""

#: ../Doc/library/configparser.rst:307
msgid "Get an *option* value for the named *section*."
msgstr ""

#: ../Doc/library/configparser.rst:312
msgid ""
"A convenience method which coerces the *option* in the specified *section* "
"to an integer."
msgstr ""

#: ../Doc/library/configparser.rst:318
msgid ""
"A convenience method which coerces the *option* in the specified *section* "
"to a floating point number."
msgstr ""

#: ../Doc/library/configparser.rst:324
msgid ""
"A convenience method which coerces the *option* in the specified *section* "
"to a Boolean value.  Note that the accepted values for the option are ``"
"\"1\"``, ``\"yes\"``, ``\"true\"``, and ``\"on\"``, which cause this method "
"to return ``True``, and ``\"0\"``, ``\"no\"``, ``\"false\"``, and ``\"off"
"\"``, which cause it to return ``False``.  These string values are checked "
"in a case-insensitive manner.  Any other value will cause it to raise :exc:"
"`ValueError`."
msgstr ""

#: ../Doc/library/configparser.rst:334
msgid ""
"Return a list of ``(name, value)`` pairs for each option in the given "
"*section*."
msgstr ""

#: ../Doc/library/configparser.rst:339
msgid ""
"If the given section exists, set the given option to the specified value; "
"otherwise raise :exc:`NoSectionError`.  While it is possible to use :class:"
"`RawConfigParser` (or :class:`ConfigParser` with *raw* parameters set to "
"true) for *internal* storage of non-string values, full functionality "
"(including interpolation and output to files) can only be achieved using "
"string values."
msgstr ""

#: ../Doc/library/configparser.rst:350
msgid ""
"Write a representation of the configuration to the specified file object.  "
"This representation can be parsed by a future :meth:`read` call."
msgstr ""

#: ../Doc/library/configparser.rst:358
msgid ""
"Remove the specified *option* from the specified *section*. If the section "
"does not exist, raise :exc:`NoSectionError`.  If the option existed to be "
"removed, return :const:`True`; otherwise return :const:`False`."
msgstr ""

#: ../Doc/library/configparser.rst:367
msgid ""
"Remove the specified *section* from the configuration. If the section in "
"fact existed, return ``True``. Otherwise return ``False``."
msgstr ""

#: ../Doc/library/configparser.rst:373
msgid ""
"Transforms the option name *option* as found in an input file or as passed "
"in by client code to the form that should be used in the internal "
"structures. The default implementation returns a lower-case version of "
"*option*; subclasses may override this or client code can set an attribute "
"of this name on instances to affect this behavior."
msgstr ""

#: ../Doc/library/configparser.rst:379
msgid ""
"You don't necessarily need to subclass a ConfigParser to use this method, "
"you can also re-set it on an instance, to a function that takes a string "
"argument.  Setting it to ``str``, for example, would make option names case "
"sensitive::"
msgstr ""

#: ../Doc/library/configparser.rst:388
msgid ""
"Note that when reading configuration files, whitespace around the option "
"names are stripped before :meth:`optionxform` is called."
msgstr ""

#: ../Doc/library/configparser.rst:395
msgid "ConfigParser Objects"
msgstr ""

#: ../Doc/library/configparser.rst:397
msgid ""
"The :class:`ConfigParser` class extends some methods of the :class:"
"`RawConfigParser` interface, adding some optional arguments."
msgstr ""

#: ../Doc/library/configparser.rst:403
msgid ""
"Get an *option* value for the named *section*.  If *vars* is provided, it "
"must be a dictionary.  The *option* is looked up in *vars* (if provided), "
"*section*, and in *defaults* in that order."
msgstr ""

#: ../Doc/library/configparser.rst:407
msgid ""
"All the ``'%'`` interpolations are expanded in the return values, unless the "
"*raw* argument is true.  Values for interpolation keys are looked up in the "
"same manner as the option."
msgstr ""

#: ../Doc/library/configparser.rst:413
msgid ""
"Return a list of ``(name, value)`` pairs for each option in the given "
"*section*. Optional arguments have the same meaning as for the :meth:`get` "
"method."
msgstr ""

#: ../Doc/library/configparser.rst:422
msgid "SafeConfigParser Objects"
msgstr ""

#: ../Doc/library/configparser.rst:424
msgid ""
"The :class:`SafeConfigParser` class implements the same extended interface "
"as :class:`ConfigParser`, with the following addition:"
msgstr ""

#: ../Doc/library/configparser.rst:430
msgid ""
"If the given section exists, set the given option to the specified value; "
"otherwise raise :exc:`NoSectionError`.  *value* must be a string (:class:"
"`str` or :class:`unicode`); if not, :exc:`TypeError` is raised."
msgstr ""

#: ../Doc/library/configparser.rst:438
msgid "Examples"
msgstr "Exemples"

#: ../Doc/library/configparser.rst:440
msgid "An example of writing to a configuration file::"
msgstr ""

#: ../Doc/library/configparser.rst:465
msgid "An example of reading the configuration file again::"
msgstr ""

#: ../Doc/library/configparser.rst:483
msgid ""
"To get interpolation, you will need to use a :class:`ConfigParser` or :class:"
"`SafeConfigParser`::"
msgstr ""

#: ../Doc/library/configparser.rst:500
msgid ""
"Defaults are available in all three types of ConfigParsers. They are used in "
"interpolation if an option used is not defined elsewhere. ::"
msgstr ""

#: ../Doc/library/configparser.rst:514
msgid ""
"The function ``opt_move`` below can be used to move options between "
"sections::"
msgstr ""

#: ../Doc/library/configparser.rst:526
msgid ""
"Some configuration files are known to include settings without values, but "
"which otherwise conform to the syntax supported by :mod:`ConfigParser`.  The "
"*allow_no_value* parameter to the constructor can be used to indicate that "
"such values should be accepted:"
msgstr ""
