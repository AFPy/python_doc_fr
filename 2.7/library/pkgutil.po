# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/pkgutil.rst:2
msgid ":mod:`pkgutil` --- Package extension utility"
msgstr ""

#: ../Doc/library/pkgutil.rst:9
msgid "**Source code:** :source:`Lib/pkgutil.py`"
msgstr "**Code source :** :source:`Lib/pkgutil.py`"

#: ../Doc/library/pkgutil.rst:13
msgid ""
"This module provides utilities for the import system, in particular package "
"support."
msgstr ""

#: ../Doc/library/pkgutil.rst:19
msgid ""
"Extend the search path for the modules which comprise a package.  Intended "
"use is to place the following code in a package's :file:`__init__.py`::"
msgstr ""

#: ../Doc/library/pkgutil.rst:25
msgid ""
"This will add to the package's ``__path__`` all subdirectories of "
"directories on ``sys.path`` named after the package.  This is useful if one "
"wants to distribute different parts of a single logical package as multiple "
"directories."
msgstr ""

#: ../Doc/library/pkgutil.rst:30
msgid ""
"It also looks for :file:`\\*.pkg` files beginning where ``*`` matches the "
"*name* argument.  This feature is similar to :file:`\\*.pth` files (see the :"
"mod:`site` module for more information), except that it doesn't special-case "
"lines starting with ``import``.  A :file:`\\*.pkg` file is trusted at face "
"value: apart from checking for duplicates, all entries found in a :file:`\\*."
"pkg` file are added to the path, regardless of whether they exist on the "
"filesystem.  (This is a feature.)"
msgstr ""

#: ../Doc/library/pkgutil.rst:38
msgid ""
"If the input path is not a list (as is the case for frozen packages) it is "
"returned unchanged.  The input path is not modified; an extended copy is "
"returned.  Items are only appended to the copy at the end."
msgstr ""

#: ../Doc/library/pkgutil.rst:42
msgid ""
"It is assumed that :data:`sys.path` is a sequence.  Items of :data:`sys."
"path` that are not (Unicode or 8-bit) strings referring to existing "
"directories are ignored.  Unicode items on :data:`sys.path` that cause "
"errors when used as filenames may cause this function to raise an exception "
"(in line with :func:`os.path.isdir` behavior)."
msgstr ""

#: ../Doc/library/pkgutil.rst:51
msgid ":pep:`302` Importer that wraps Python's \"classic\" import algorithm."
msgstr ""

#: ../Doc/library/pkgutil.rst:53
msgid ""
"If *dirname* is a string, a :pep:`302` importer is created that searches "
"that directory.  If *dirname* is ``None``, a :pep:`302` importer is created "
"that searches the current :data:`sys.path`, plus any modules that are frozen "
"or built-in."
msgstr ""

#: ../Doc/library/pkgutil.rst:58
msgid ""
"Note that :class:`ImpImporter` does not currently support being used by "
"placement on :data:`sys.meta_path`."
msgstr ""

#: ../Doc/library/pkgutil.rst:64
msgid ":pep:`302` Loader that wraps Python's \"classic\" import algorithm."
msgstr ""

#: ../Doc/library/pkgutil.rst:69
msgid "Find a :pep:`302` \"loader\" object for *fullname*."
msgstr ""

#: ../Doc/library/pkgutil.rst:71
msgid ""
"If *fullname* contains dots, path must be the containing package's "
"``__path__``.  Returns ``None`` if the module cannot be found or imported. "
"This function uses :func:`iter_importers`, and is thus subject to the same "
"limitations regarding platform-specific special import locations such as the "
"Windows registry."
msgstr ""

#: ../Doc/library/pkgutil.rst:80
msgid "Retrieve a :pep:`302` importer for the given *path_item*."
msgstr ""

#: ../Doc/library/pkgutil.rst:82
msgid ""
"The returned importer is cached in :data:`sys.path_importer_cache` if it was "
"newly created by a path hook."
msgstr ""

#: ../Doc/library/pkgutil.rst:85
msgid ""
"If there is no importer, a wrapper around the basic import machinery is "
"returned.  This wrapper is never inserted into the importer cache (``None`` "
"is inserted instead)."
msgstr ""

#: ../Doc/library/pkgutil.rst:89
msgid ""
"The cache (or part of it) can be cleared manually if a rescan of :data:`sys."
"path_hooks` is necessary."
msgstr ""

#: ../Doc/library/pkgutil.rst:95
msgid "Get a :pep:`302` \"loader\" object for *module_or_name*."
msgstr ""

#: ../Doc/library/pkgutil.rst:97
msgid ""
"If the module or package is accessible via the normal import mechanism, a "
"wrapper around the relevant part of that machinery is returned.  Returns "
"``None`` if the module cannot be found or imported.  If the named module is "
"not already imported, its containing package (if any) is imported, in order "
"to establish the package ``__path__``."
msgstr ""

#: ../Doc/library/pkgutil.rst:103
msgid ""
"This function uses :func:`iter_importers`, and is thus subject to the same "
"limitations regarding platform-specific special import locations such as the "
"Windows registry."
msgstr ""

#: ../Doc/library/pkgutil.rst:110
msgid "Yield :pep:`302` importers for the given module name."
msgstr ""

#: ../Doc/library/pkgutil.rst:112
msgid ""
"If fullname contains a '.', the importers will be for the package containing "
"fullname, otherwise they will be importers for :data:`sys.meta_path`, :data:"
"`sys.path`, and Python's \"classic\" import machinery, in that order.  If "
"the named module is in a package, that package is imported as a side effect "
"of invoking this function."
msgstr ""

#: ../Doc/library/pkgutil.rst:118
msgid ""
"Non-:pep:`302` mechanisms (e.g. the Windows registry) used by the standard "
"import machinery to find files in alternative locations are partially "
"supported, but are searched *after* :data:`sys.path`.  Normally, these "
"locations are searched *before* :data:`sys.path`, preventing :data:`sys."
"path` entries from shadowing them."
msgstr ""

#: ../Doc/library/pkgutil.rst:124
msgid ""
"For this to cause a visible difference in behaviour, there must be a module "
"or package name that is accessible via both :data:`sys.path` and one of the "
"non-:pep:`302` file system mechanisms.  In this case, the emulation will "
"find the former version, while the builtin import mechanism will find the "
"latter."
msgstr ""

#: ../Doc/library/pkgutil.rst:129
msgid ""
"Items of the following types can be affected by this discrepancy: ``imp."
"C_EXTENSION``, ``imp.PY_SOURCE``, ``imp.PY_COMPILED``, ``imp.PKG_DIRECTORY``."
msgstr ""

#: ../Doc/library/pkgutil.rst:136
msgid ""
"Yields ``(module_loader, name, ispkg)`` for all submodules on *path*, or, if "
"path is ``None``, all top-level modules on ``sys.path``."
msgstr ""

#: ../Doc/library/pkgutil.rst:139 ../Doc/library/pkgutil.rst:149
msgid ""
"*path* should be either ``None`` or a list of paths to look for modules in."
msgstr ""

#: ../Doc/library/pkgutil.rst:141 ../Doc/library/pkgutil.rst:151
msgid ""
"*prefix* is a string to output on the front of every module name on output."
msgstr ""

#: ../Doc/library/pkgutil.rst:146
msgid ""
"Yields ``(module_loader, name, ispkg)`` for all modules recursively on "
"*path*, or, if path is ``None``, all accessible modules."
msgstr ""

#: ../Doc/library/pkgutil.rst:153
msgid ""
"Note that this function must import all *packages* (*not* all modules!) on "
"the given *path*, in order to access the ``__path__`` attribute to find "
"submodules."
msgstr ""

#: ../Doc/library/pkgutil.rst:157
msgid ""
"*onerror* is a function which gets called with one argument (the name of the "
"package which was being imported) if any exception occurs while trying to "
"import a package.  If no *onerror* function is supplied, :exc:`ImportError`"
"\\s are caught and ignored, while all other exceptions are propagated, "
"terminating the search."
msgstr ""

#: ../Doc/library/pkgutil.rst:163
msgid "Examples::"
msgstr "Exemples : ::"

#: ../Doc/library/pkgutil.rst:174
msgid "Get a resource from a package."
msgstr ""

#: ../Doc/library/pkgutil.rst:176
msgid ""
"This is a wrapper for the :pep:`302` loader :func:`get_data` API.  The "
"*package* argument should be the name of a package, in standard module "
"format (``foo.bar``).  The *resource* argument should be in the form of a "
"relative filename, using ``/`` as the path separator.  The parent directory "
"name ``..`` is not allowed, and nor is a rooted name (starting with a ``/``)."
msgstr ""

#: ../Doc/library/pkgutil.rst:182
msgid ""
"The function returns a binary string that is the contents of the specified "
"resource."
msgstr ""

#: ../Doc/library/pkgutil.rst:185
msgid ""
"For packages located in the filesystem, which have already been imported, "
"this is the rough equivalent of::"
msgstr ""

#: ../Doc/library/pkgutil.rst:191
msgid ""
"If the package cannot be located or loaded, or it uses a :pep:`302` loader "
"which does not support :func:`get_data`, then ``None`` is returned."
msgstr ""
