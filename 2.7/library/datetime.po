# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/datetime.rst:2
msgid ":mod:`datetime` --- Basic date and time types"
msgstr ":mod:`datetime` --- Types de base pour la date et l'heure"

#: ../Doc/library/datetime.rst:14
msgid ""
"The :mod:`datetime` module supplies classes for manipulating dates and times "
"in both simple and complex ways.  While date and time arithmetic is "
"supported, the focus of the implementation is on efficient attribute "
"extraction for output formatting and manipulation. For related "
"functionality, see also the :mod:`time` and :mod:`calendar` modules."
msgstr ""
"Le module :mod:`datetime` fournit des classes pour manipuler de façon simple "
"ou plus complexe des dates et des heures. Bien que les calculs de date et "
"d'heure sont supportés, l'implémentation est essentiellement tournée vers "
"l'efficacité pour extraire des attributs pour les manipuler et les formater "
"pour l'affichage. Pour d'autres fonctionnalités associées, voir aussi les "
"modules :mod:`time` et :mod:`calendar`."

#: ../Doc/library/datetime.rst:20
msgid "There are two kinds of date and time objects: \"naive\" and \"aware\"."
msgstr ""
"Il y a deux sortes d'objets date et time : les \"naïfs\" et les \"avisés\"."

#: ../Doc/library/datetime.rst:22
msgid ""
"An aware object has sufficient knowledge of applicable algorithmic and "
"political time adjustments, such as time zone and daylight saving time "
"information, to locate itself relative to other aware objects.  An aware "
"object is used to represent a specific moment in time that is not open to "
"interpretation [#]_."
msgstr ""
"Un objet avisé possède suffisamment de connaissance des règles à appliquer "
"et des politiques d'ajustement de l'heure comme les informations sur les "
"fuseaux horaires et l'heure d'été pour se situer de façon relative par "
"rapport à d'autres objets avisés. Un objet avisé est utilisé pour représenté "
"un moment précis de l'histoire qui n'est pas ouvert à l'interprétation [#]_."

#: ../Doc/library/datetime.rst:28
msgid ""
"A naive object does not contain enough information to unambiguously locate "
"itself relative to other date/time objects.  Whether a naive object "
"represents Coordinated Universal Time (UTC), local time, or time in some "
"other timezone is purely up to the program, just like it's up to the program "
"whether a particular number represents metres, miles, or mass.  Naive "
"objects are easy to understand and to work with, at the cost of ignoring "
"some aspects of reality."
msgstr ""

#: ../Doc/library/datetime.rst:35
msgid ""
"For applications requiring aware objects, :class:`.datetime` and :class:`."
"time` objects have an optional time zone information attribute, :attr:`!"
"tzinfo`, that can be set to an instance of a subclass of the abstract :class:"
"`tzinfo` class. These :class:`tzinfo` objects capture information about the "
"offset from UTC time, the time zone name, and whether Daylight Saving Time "
"is in effect.  Note that no concrete :class:`tzinfo` classes are supplied by "
"the :mod:`datetime` module.  Supporting timezones at whatever level of "
"detail is required is up to the application.  The rules for time adjustment "
"across the world are more political than rational, and there is no standard "
"suitable for every application."
msgstr ""

#: ../Doc/library/datetime.rst:46
msgid "The :mod:`datetime` module exports the following constants:"
msgstr "Le module :mod:`datetime` exporte les constantes suivantes :"

#: ../Doc/library/datetime.rst:50
msgid ""
"The smallest year number allowed in a :class:`date` or :class:`.datetime` "
"object. :const:`MINYEAR` is ``1``."
msgstr ""
"Le numéro d'année le plus petit autorisé dans un objet :class:`date` ou :"
"class:`datetime`. :const:`MINYEAR` vaut ``1``."

#: ../Doc/library/datetime.rst:56
msgid ""
"The largest year number allowed in a :class:`date` or :class:`.datetime` "
"object. :const:`MAXYEAR` is ``9999``."
msgstr ""
"Le numéro d'année le plus grand autorisé dans un objet :class:`date` ou :"
"class:`datetime`. :const:`MAXYEAR` vaut ``9999``."

#: ../Doc/library/datetime.rst:63
msgid "Module :mod:`calendar`"
msgstr "Module :mod:`calendar`"

#: ../Doc/library/datetime.rst:63
msgid "General calendar related functions."
msgstr "Fonctions génériques associées au calendrier."

#: ../Doc/library/datetime.rst:65
msgid "Module :mod:`time`"
msgstr "Module :mod:`time`"

#: ../Doc/library/datetime.rst:66
msgid "Time access and conversions."
msgstr "Accès au données d'horaires et aux conversions assosiées."

#: ../Doc/library/datetime.rst:70
msgid "Available Types"
msgstr "Types disponibles"

#: ../Doc/library/datetime.rst:75
msgid ""
"An idealized naive date, assuming the current Gregorian calendar always was, "
"and always will be, in effect. Attributes: :attr:`year`, :attr:`month`, and :"
"attr:`day`."
msgstr ""
"Une date naïve idéalisée, en supposant que le calendrier Grégorien actuel a "
"toujours existé et qu'il existera toujours. Attributs : :attr:`year`, :attr:"
"`month` et :attr:`day`."

#: ../Doc/library/datetime.rst:83
msgid ""
"An idealized time, independent of any particular day, assuming that every "
"day has exactly 24\\*60\\*60 seconds (there is no notion of \"leap seconds\" "
"here). Attributes: :attr:`hour`, :attr:`minute`, :attr:`second`, :attr:"
"`microsecond`, and :attr:`.tzinfo`."
msgstr ""
"Un temps idéalisé, indépendant d'une date particulière, en supposant qu'une "
"journée est composée d'exactement 24\\*60\\*60 secondes (il n'y a pas ici de "
"notion de \"seconde bissextile\"). Attributs : :attr:`hour`, :attr:"
"`minute`, :attr:`second`, :attr:`microsecond` et :attr:`tzinfo`."

#: ../Doc/library/datetime.rst:92
msgid ""
"A combination of a date and a time. Attributes: :attr:`year`, :attr:"
"`month`, :attr:`day`, :attr:`hour`, :attr:`minute`, :attr:`second`, :attr:"
"`microsecond`, and :attr:`.tzinfo`."
msgstr ""
"Une combinaison d'une date et d'une heure. Attributs : :attr:`year`, :attr:"
"`month`, :attr:`day`, :attr:`hour`, :attr:`minute`, :attr:`second`, :attr:"
"`microsecond`, et :attr:`tzinfo`."

#: ../Doc/library/datetime.rst:100
msgid ""
"A duration expressing the difference between two :class:`date`, :class:`."
"time`, or :class:`.datetime` instances to microsecond resolution."
msgstr ""
"Une durée qui exprime la différence entre deux instances de :class:`date`, :"
"class:`time` ou :class:`datetime` en microsecondes."

#: ../Doc/library/datetime.rst:107
msgid ""
"An abstract base class for time zone information objects.  These are used by "
"the :class:`.datetime` and :class:`.time` classes to provide a customizable "
"notion of time adjustment (for example, to account for time zone and/or "
"daylight saving time)."
msgstr ""
"Une classe de base abstraite pour les objets portants des informations sur "
"les fuseaux horaires. Ceux-ci sont utilisés par les classes :class:`."
"datetime` et :class:`.time` pour donner une notion personnalisable "
"d'ajustement d'horaire (par exemple la prise en compte d'un fuseau horaire "
"et/ou de l'heure d'été)."

#: ../Doc/library/datetime.rst:112
msgid "Objects of these types are immutable."
msgstr "Les objets issus de ces types sont immuables."

#: ../Doc/library/datetime.rst:114
msgid "Objects of the :class:`date` type are always naive."
msgstr "Les objets de type :class:`date` sont toujours naïfs."

#: ../Doc/library/datetime.rst:116
msgid ""
"An object of type :class:`.time` or :class:`.datetime` may be naive or "
"aware. A :class:`.datetime` object *d* is aware if ``d.tzinfo`` is not "
"``None`` and ``d.tzinfo.utcoffset(d)`` does not return ``None``.  If ``d."
"tzinfo`` is ``None``, or if ``d.tzinfo`` is not ``None`` but ``d.tzinfo."
"utcoffset(d)`` returns ``None``, *d* is naive.  A :class:`.time` object *t* "
"is aware if ``t.tzinfo`` is not ``None`` and ``t.tzinfo.utcoffset(None)`` "
"does not return ``None``.  Otherwise, *t* is naive."
msgstr ""
"Un objet de type :class:`.time` ou :class:`.datetime` peut être naïf ou "
"avisé. Un objet :class:`.datetime` *d* est avisé si ``d.tzinfo`` ne vaut pas "
"``None`` et que ``d.tzinfo.utcoffset(d)`` ne renvoie pas ``None``. Si ``d."
"tzinfo`` vaut ``None`` ou que ``d.tzinfo`` ne vaut pas ``None`` mais que ``d."
"tzinfo.utcoffset(d)`` renvoie ``None``, alors *d* est naïf. Un objet :class:"
"`.time` *t* est avisé si ``t.tzinfo`` ne vaut pas ``None`` et que ``t.tzinfo."
"utcoffset(None)`` ne renvoie pas ``None``. Sinon, *t* est naïf."

#: ../Doc/library/datetime.rst:124
msgid ""
"The distinction between naive and aware doesn't apply to :class:`timedelta` "
"objects."
msgstr ""
"La distinction entre naïf et avisé ne s'applique pas aux objets de type :"
"class:`timedelta`."

#: ../Doc/library/datetime.rst:127
msgid "Subclass relationships::"
msgstr "Relations entre les sous-classes :"

#: ../Doc/library/datetime.rst:140
msgid ":class:`timedelta` Objects"
msgstr "Objets :class:`timedelta`"

#: ../Doc/library/datetime.rst:142
msgid ""
"A :class:`timedelta` object represents a duration, the difference between "
"two dates or times."
msgstr ""
"Un objet :class:`timedelta` représente une durée, c'est-à-dire la différence "
"entre deux dates ou heures."

#: ../Doc/library/datetime.rst:147
msgid ""
"All arguments are optional and default to ``0``.  Arguments may be ints, "
"longs, or floats, and may be positive or negative."
msgstr ""

#: ../Doc/library/datetime.rst:150
msgid ""
"Only *days*, *seconds* and *microseconds* are stored internally.  Arguments "
"are converted to those units:"
msgstr ""
"Seuls les *jours*, les *secondes* et les *microsecondes* sont stockés en "
"interne. Tous les paramètres sont convertis dans ces unités :"

#: ../Doc/library/datetime.rst:153
msgid "A millisecond is converted to 1000 microseconds."
msgstr "Une milliseconde est convertie en 1000 microsecondes."

#: ../Doc/library/datetime.rst:154
msgid "A minute is converted to 60 seconds."
msgstr "Une minute est convertie en 60 secondes."

#: ../Doc/library/datetime.rst:155
msgid "An hour is converted to 3600 seconds."
msgstr "Une heure est convertie en 3600 secondes."

#: ../Doc/library/datetime.rst:156
msgid "A week is converted to 7 days."
msgstr "Une semaine est convertie en 7 jours."

#: ../Doc/library/datetime.rst:158
msgid ""
"and days, seconds and microseconds are then normalized so that the "
"representation is unique, with"
msgstr ""
"et ensuite les jours, secondes et microsecondes sont normalisés pour que la "
"représentation soit unique avec"

#: ../Doc/library/datetime.rst:161
msgid "``0 <= microseconds < 1000000``"
msgstr "``0 <= microseconds < 1000000``"

#: ../Doc/library/datetime.rst:162
msgid "``0 <= seconds < 3600*24`` (the number of seconds in one day)"
msgstr "``0 <= secondes < 3600*24`` (le nombre de secondes dans une journée)"

#: ../Doc/library/datetime.rst:163
msgid "``-999999999 <= days <= 999999999``"
msgstr "``-999999999 <= days <= 999999999``"

#: ../Doc/library/datetime.rst:165
msgid ""
"If any argument is a float and there are fractional microseconds, the "
"fractional microseconds left over from all arguments are combined and their "
"sum is rounded to the nearest microsecond.  If no argument is a float, the "
"conversion and normalization processes are exact (no information is lost)."
msgstr ""

#: ../Doc/library/datetime.rst:170
msgid ""
"If the normalized value of days lies outside the indicated range, :exc:"
"`OverflowError` is raised."
msgstr ""

#: ../Doc/library/datetime.rst:173
msgid ""
"Note that normalization of negative values may be surprising at first. For "
"example,"
msgstr ""

#: ../Doc/library/datetime.rst:182
msgid "Class attributes are:"
msgstr "Les attributs de la classe sont :"

#: ../Doc/library/datetime.rst:186
msgid "The most negative :class:`timedelta` object, ``timedelta(-999999999)``."
msgstr "L'objet class:`timedelta` le plus négatif, ``timedelta(-999999999)``."

#: ../Doc/library/datetime.rst:191
msgid ""
"The most positive :class:`timedelta` object, ``timedelta(days=999999999, "
"hours=23, minutes=59, seconds=59, microseconds=999999)``."
msgstr ""
"L'objet class:`timedelta` le plus positif, ``timedelta(days=999999999, "
"hours=23, minutes=59, seconds=59, microseconds=999999)``."

#: ../Doc/library/datetime.rst:197
msgid ""
"The smallest possible difference between non-equal :class:`timedelta` "
"objects, ``timedelta(microseconds=1)``."
msgstr ""
"La plus petite différence entre des objets :class:`timedelta` non égaux, "
"``timedelta(microseconds=1)``."

#: ../Doc/library/datetime.rst:200
msgid ""
"Note that, because of normalization, ``timedelta.max`` > ``-timedelta.min``. "
"``-timedelta.max`` is not representable as a :class:`timedelta` object."
msgstr ""
"Il est à noter, du fait de la normalisation, que ``timedelta.max`` > ``-"
"timedelta.min``. ``-timedelta.max`` n'est pas représentable sous la forme "
"d'un objet :class:`timedelta`."

#: ../Doc/library/datetime.rst:203 ../Doc/library/datetime.rst:406
#: ../Doc/library/datetime.rst:761 ../Doc/library/datetime.rst:1213
msgid "Instance attributes (read-only):"
msgstr "Attributs de l'instance (en lecture seule) :"

#: ../Doc/library/datetime.rst:206
msgid "Attribute"
msgstr "Attribut"

#: ../Doc/library/datetime.rst:206
msgid "Value"
msgstr "Valeur"

#: ../Doc/library/datetime.rst:208
msgid "``days``"
msgstr "``days``"

#: ../Doc/library/datetime.rst:208
msgid "Between -999999999 and 999999999 inclusive"
msgstr "Entre -999999999 et 999999999 inclus"

#: ../Doc/library/datetime.rst:210
msgid "``seconds``"
msgstr "``seconds``"

#: ../Doc/library/datetime.rst:210
msgid "Between 0 and 86399 inclusive"
msgstr "Entre 0 et 86399 inclus"

#: ../Doc/library/datetime.rst:212
msgid "``microseconds``"
msgstr "``microseconds``"

#: ../Doc/library/datetime.rst:212
msgid "Between 0 and 999999 inclusive"
msgstr "Entre 0 et 999999 inclus"

#: ../Doc/library/datetime.rst:215 ../Doc/library/datetime.rst:423
#: ../Doc/library/datetime.rst:804 ../Doc/library/datetime.rst:1241
msgid "Supported operations:"
msgstr "Opérations supportées :"

#: ../Doc/library/datetime.rst:220 ../Doc/library/datetime.rst:426
#: ../Doc/library/datetime.rst:807
msgid "Operation"
msgstr "Opération"

#: ../Doc/library/datetime.rst:220 ../Doc/library/datetime.rst:426
#: ../Doc/library/datetime.rst:807
msgid "Result"
msgstr "Résultat"

#: ../Doc/library/datetime.rst:222
msgid "``t1 = t2 + t3``"
msgstr "``t1 = t2 + t3``"

#: ../Doc/library/datetime.rst:222
msgid ""
"Sum of *t2* and *t3*. Afterwards *t1*-*t2* == *t3* and *t1*-*t3* == *t2* are "
"true. (1)"
msgstr ""
"Somme de *t2* et *t3*. Ensuite *t1*-*t2* == *t3* et *t1*-*t3* == *t2* sont "
"des expressions vraies. (1)"

#: ../Doc/library/datetime.rst:225
msgid "``t1 = t2 - t3``"
msgstr "``t1 = t2 - t3``"

#: ../Doc/library/datetime.rst:225
msgid ""
"Difference of *t2* and *t3*. Afterwards *t1* == *t2* - *t3* and *t2* == *t1* "
"+ *t3* are true. (1)"
msgstr ""
"Différence entre *t2* et *t3*. Ensuite *t1* == *t2* - *t3* et *t2* == *t1* + "
"*t3* sont des expressions vraies. (1)"

#: ../Doc/library/datetime.rst:229
msgid "``t1 = t2 * i or t1 = i * t2``"
msgstr "``t1 = t2 * i or t1 = i * t2``"

#: ../Doc/library/datetime.rst:229
msgid ""
"Delta multiplied by an integer or long. Afterwards *t1* // i == *t2* is "
"true, provided ``i != 0``."
msgstr ""

#: ../Doc/library/datetime.rst:233
msgid "In general, *t1* \\* i == *t1* \\* (i-1) + *t1* is true. (1)"
msgstr "De manière générale, *t1* \\* i == *t1* \\* (i-1) + *t1* est vrai. (1)"

#: ../Doc/library/datetime.rst:236
msgid "``t1 = t2 // i``"
msgstr ""

#: ../Doc/library/datetime.rst:236
msgid "The floor is computed and the remainder (if any) is thrown away. (3)"
msgstr ""

#: ../Doc/library/datetime.rst:239
msgid "``+t1``"
msgstr "``+t1``"

#: ../Doc/library/datetime.rst:239
msgid "Returns a :class:`timedelta` object with the same value. (2)"
msgstr ""

#: ../Doc/library/datetime.rst:242
msgid "``-t1``"
msgstr "``-t1``"

#: ../Doc/library/datetime.rst:242
msgid ""
"equivalent to :class:`timedelta`\\ (-*t1.days*, -*t1.seconds*, -*t1."
"microseconds*), and to *t1*\\* -1. (1)(4)"
msgstr ""

#: ../Doc/library/datetime.rst:246
msgid "``abs(t)``"
msgstr "``abs(t)``"

#: ../Doc/library/datetime.rst:246
msgid ""
"equivalent to +\\ *t* when ``t.days >= 0``, and to -*t* when ``t.days < 0``. "
"(2)"
msgstr ""

#: ../Doc/library/datetime.rst:249
msgid "``str(t)``"
msgstr "``str(t)``"

#: ../Doc/library/datetime.rst:249
msgid ""
"Returns a string in the form ``[D day[s], ][H]H:MM:SS[.UUUUUU]``, where D is "
"negative for negative ``t``. (5)"
msgstr ""

#: ../Doc/library/datetime.rst:253
msgid "``repr(t)``"
msgstr "``repr(t)``"

#: ../Doc/library/datetime.rst:253
msgid ""
"Returns a string in the form ``datetime.timedelta(D[, S[, U]])``, where D is "
"negative for negative ``t``. (5)"
msgstr ""

#: ../Doc/library/datetime.rst:258 ../Doc/library/datetime.rst:440
#: ../Doc/library/datetime.rst:1719
msgid "Notes:"
msgstr "Notes : "

#: ../Doc/library/datetime.rst:261
msgid "This is exact, but may overflow."
msgstr "Ceci est exact, mais peut provoquer un débordement"

#: ../Doc/library/datetime.rst:264
msgid "This is exact, and cannot overflow."
msgstr "Ceci est exact, et ne peut pas provoquer un débordement."

#: ../Doc/library/datetime.rst:267
msgid "Division by 0 raises :exc:`ZeroDivisionError`."
msgstr "Une division par 0 provoque :exc:`ZeroDivisionError`."

#: ../Doc/library/datetime.rst:270
msgid "-*timedelta.max* is not representable as a :class:`timedelta` object."
msgstr ""
"- * Timedelta.max * est pas représentable comme: class: `timedelta` objet."

#: ../Doc/library/datetime.rst:273
msgid ""
"String representations of :class:`timedelta` objects are normalized "
"similarly to their internal representation.  This leads to somewhat unusual "
"results for negative timedeltas.  For example:"
msgstr ""

#: ../Doc/library/datetime.rst:282
msgid ""
"In addition to the operations listed above :class:`timedelta` objects "
"support certain additions and subtractions with :class:`date` and :class:`."
"datetime` objects (see below)."
msgstr ""

#: ../Doc/library/datetime.rst:286
msgid ""
"Comparisons of :class:`timedelta` objects are supported with the :class:"
"`timedelta` object representing the smaller duration considered to be the "
"smaller timedelta. In order to stop mixed-type comparisons from falling back "
"to the default comparison by object address, when a :class:`timedelta` "
"object is compared to an object of a different type, :exc:`TypeError` is "
"raised unless the comparison is ``==`` or ``!=``.  The latter cases return :"
"const:`False` or :const:`True`, respectively."
msgstr ""

#: ../Doc/library/datetime.rst:294
msgid ""
":class:`timedelta` objects are :term:`hashable` (usable as dictionary keys), "
"support efficient pickling, and in Boolean contexts, a :class:`timedelta` "
"object is considered to be true if and only if it isn't equal to "
"``timedelta(0)``."
msgstr ""

#: ../Doc/library/datetime.rst:298 ../Doc/library/datetime.rst:473
#: ../Doc/library/datetime.rst:876 ../Doc/library/datetime.rst:1264
msgid "Instance methods:"
msgstr "Méthodes de l'instance :"

#: ../Doc/library/datetime.rst:302
msgid ""
"Return the total number of seconds contained in the duration. Equivalent to "
"``(td.microseconds + (td.seconds + td.days * 24 * 3600) * 10**6) / 10**6`` "
"computed with true division enabled."
msgstr ""

#: ../Doc/library/datetime.rst:306
msgid ""
"Note that for very large time intervals (greater than 270 years on most "
"platforms) this method will lose microsecond accuracy."
msgstr ""

#: ../Doc/library/datetime.rst:312
msgid "Example usage:"
msgstr "Exemple d'utilisation :"

#: ../Doc/library/datetime.rst:338
msgid ":class:`date` Objects"
msgstr "Objets :class:`date`"

#: ../Doc/library/datetime.rst:340
msgid ""
"A :class:`date` object represents a date (year, month and day) in an "
"idealized calendar, the current Gregorian calendar indefinitely extended in "
"both directions.  January 1 of year 1 is called day number 1, January 2 of "
"year 1 is called day number 2, and so on.  This matches the definition of "
"the \"proleptic Gregorian\" calendar in Dershowitz and Reingold's book "
"Calendrical Calculations, where it's the base calendar for all "
"computations.  See the book for algorithms for converting between proleptic "
"Gregorian ordinals and many other calendar systems."
msgstr ""

#: ../Doc/library/datetime.rst:352
msgid ""
"All arguments are required.  Arguments may be ints or longs, in the "
"following ranges:"
msgstr ""

#: ../Doc/library/datetime.rst:355 ../Doc/library/datetime.rst:640
msgid "``MINYEAR <= year <= MAXYEAR``"
msgstr "``MINYEAR <= year <= MAXYEAR``"

#: ../Doc/library/datetime.rst:356 ../Doc/library/datetime.rst:641
msgid "``1 <= month <= 12``"
msgstr "``1 <= month <= 12``"

#: ../Doc/library/datetime.rst:357 ../Doc/library/datetime.rst:642
msgid "``1 <= day <= number of days in the given month and year``"
msgstr "``1 <= day <= number of days in the given month and year``"

#: ../Doc/library/datetime.rst:359 ../Doc/library/datetime.rst:648
msgid ""
"If an argument outside those ranges is given, :exc:`ValueError` is raised."
msgstr ""

#: ../Doc/library/datetime.rst:362 ../Doc/library/datetime.rst:650
msgid "Other constructors, all class methods:"
msgstr ""

#: ../Doc/library/datetime.rst:366
msgid ""
"Return the current local date.  This is equivalent to ``date."
"fromtimestamp(time.time())``."
msgstr ""

#: ../Doc/library/datetime.rst:372
msgid ""
"Return the local date corresponding to the POSIX timestamp, such as is "
"returned by :func:`time.time`.  This may raise :exc:`ValueError`, if the "
"timestamp is out of the range of values supported by the platform C :c:func:"
"`localtime` function. It's common for this to be restricted to years from "
"1970 through 2038.  Note that on non-POSIX systems that include leap seconds "
"in their notion of a timestamp, leap seconds are ignored by :meth:"
"`fromtimestamp`."
msgstr ""

#: ../Doc/library/datetime.rst:382
msgid ""
"Return the date corresponding to the proleptic Gregorian ordinal, where "
"January 1 of year 1 has ordinal 1.  :exc:`ValueError` is raised unless ``1 "
"<= ordinal <= date.max.toordinal()``. For any date *d*, ``date.fromordinal(d."
"toordinal()) == d``."
msgstr ""

#: ../Doc/library/datetime.rst:388 ../Doc/library/datetime.rst:741
#: ../Doc/library/datetime.rst:1193
msgid "Class attributes:"
msgstr "Attributs de la classe :"

#: ../Doc/library/datetime.rst:392
msgid "The earliest representable date, ``date(MINYEAR, 1, 1)``."
msgstr ""

#: ../Doc/library/datetime.rst:397
msgid "The latest representable date, ``date(MAXYEAR, 12, 31)``."
msgstr ""

#: ../Doc/library/datetime.rst:402
msgid ""
"The smallest possible difference between non-equal date objects, "
"``timedelta(days=1)``."
msgstr ""

#: ../Doc/library/datetime.rst:410 ../Doc/library/datetime.rst:765
msgid "Between :const:`MINYEAR` and :const:`MAXYEAR` inclusive."
msgstr ""

#: ../Doc/library/datetime.rst:415 ../Doc/library/datetime.rst:770
msgid "Between 1 and 12 inclusive."
msgstr "Entre 1 et 12 inclus."

#: ../Doc/library/datetime.rst:420 ../Doc/library/datetime.rst:775
msgid "Between 1 and the number of days in the given month of the given year."
msgstr ""

#: ../Doc/library/datetime.rst:428
msgid "``date2 = date1 + timedelta``"
msgstr "``date2 = date1 + timedelta``"

#: ../Doc/library/datetime.rst:428
msgid "*date2* is ``timedelta.days`` days removed from *date1*.  (1)"
msgstr ""

#: ../Doc/library/datetime.rst:431
msgid "``date2 = date1 - timedelta``"
msgstr "``date2 = date1 - timedelta``"

#: ../Doc/library/datetime.rst:431
msgid "Computes *date2* such that ``date2 + timedelta == date1``. (2)"
msgstr "Calcule *date2* de façon à avoir ``date2 + timedelta == date1``. (2)"

#: ../Doc/library/datetime.rst:434
msgid "``timedelta = date1 - date2``"
msgstr "``timedelta = date1 - date2``"

#: ../Doc/library/datetime.rst:434 ../Doc/library/datetime.rst:813
#: ../Doc/library/datetime.rst:1671
msgid "\\(3)"
msgstr "\\(3)"

#: ../Doc/library/datetime.rst:436
msgid "``date1 < date2``"
msgstr "``date1 < date2``"

#: ../Doc/library/datetime.rst:436
msgid ""
"*date1* is considered less than *date2* when *date1* precedes *date2* in "
"time. (4)"
msgstr ""

#: ../Doc/library/datetime.rst:443
msgid ""
"*date2* is moved forward in time if ``timedelta.days > 0``, or backward if "
"``timedelta.days < 0``.  Afterward ``date2 - date1 == timedelta.days``. "
"``timedelta.seconds`` and ``timedelta.microseconds`` are ignored. :exc:"
"`OverflowError` is raised if ``date2.year`` would be smaller than :const:"
"`MINYEAR` or larger than :const:`MAXYEAR`."
msgstr ""

#: ../Doc/library/datetime.rst:450
msgid ""
"This isn't quite equivalent to date1 + (-timedelta), because -timedelta in "
"isolation can overflow in cases where date1 - timedelta does not. "
"``timedelta.seconds`` and ``timedelta.microseconds`` are ignored."
msgstr ""

#: ../Doc/library/datetime.rst:455
msgid ""
"This is exact, and cannot overflow.  timedelta.seconds and timedelta."
"microseconds are 0, and date2 + timedelta == date1 after."
msgstr ""

#: ../Doc/library/datetime.rst:459
msgid ""
"In other words, ``date1 < date2`` if and only if ``date1.toordinal() < date2."
"toordinal()``. In order to stop comparison from falling back to the default "
"scheme of comparing object addresses, date comparison normally raises :exc:"
"`TypeError` if the other comparand isn't also a :class:`date` object. "
"However, ``NotImplemented`` is returned instead if the other comparand has "
"a :meth:`timetuple` attribute.  This hook gives other kinds of date objects "
"a chance at implementing mixed-type comparison. If not, when a :class:`date` "
"object is compared to an object of a different type, :exc:`TypeError` is "
"raised unless the comparison is ``==`` or ``!=``.  The latter cases return :"
"const:`False` or :const:`True`, respectively."
msgstr ""

#: ../Doc/library/datetime.rst:470
msgid ""
"Dates can be used as dictionary keys. In Boolean contexts, all :class:`date` "
"objects are considered to be true."
msgstr ""

#: ../Doc/library/datetime.rst:477
msgid ""
"Return a date with the same value, except for those parameters given new "
"values by whichever keyword arguments are specified.  For example, if ``d == "
"date(2002, 12, 31)``, then ``d.replace(day=26) == date(2002, 12, 26)``."
msgstr ""

#: ../Doc/library/datetime.rst:484
msgid ""
"Return a :class:`time.struct_time` such as returned by :func:`time."
"localtime`. The hours, minutes and seconds are 0, and the DST flag is -1. "
"``d.timetuple()`` is equivalent to ``time.struct_time((d.year, d.month, d."
"day, 0, 0, 0, d.weekday(), yday, -1))``, where ``yday = d.toordinal() - "
"date(d.year, 1, 1).toordinal() + 1`` is the day number within the current "
"year starting with ``1`` for January 1st."
msgstr ""

#: ../Doc/library/datetime.rst:494
msgid ""
"Return the proleptic Gregorian ordinal of the date, where January 1 of year "
"1 has ordinal 1.  For any :class:`date` object *d*, ``date.fromordinal(d."
"toordinal()) == d``."
msgstr ""

#: ../Doc/library/datetime.rst:501
msgid ""
"Return the day of the week as an integer, where Monday is 0 and Sunday is 6. "
"For example, ``date(2002, 12, 4).weekday() == 2``, a Wednesday. See also :"
"meth:`isoweekday`."
msgstr ""

#: ../Doc/library/datetime.rst:508
msgid ""
"Return the day of the week as an integer, where Monday is 1 and Sunday is 7. "
"For example, ``date(2002, 12, 4).isoweekday() == 3``, a Wednesday. See also :"
"meth:`weekday`, :meth:`isocalendar`."
msgstr ""

#: ../Doc/library/datetime.rst:515
msgid "Return a 3-tuple, (ISO year, ISO week number, ISO weekday)."
msgstr ""

#: ../Doc/library/datetime.rst:517
msgid ""
"The ISO calendar is a widely used variant of the Gregorian calendar. See "
"https://www.staff.science.uu.nl/~gent0113/calendar/isocalendar.htm for a "
"good explanation."
msgstr ""

#: ../Doc/library/datetime.rst:521
msgid ""
"The ISO year consists of 52 or 53 full weeks, and where a week starts on a "
"Monday and ends on a Sunday.  The first week of an ISO year is the first "
"(Gregorian) calendar week of a year containing a Thursday. This is called "
"week number 1, and the ISO year of that Thursday is the same as its "
"Gregorian year."
msgstr ""

#: ../Doc/library/datetime.rst:526
msgid ""
"For example, 2004 begins on a Thursday, so the first week of ISO year 2004 "
"begins on Monday, 29 Dec 2003 and ends on Sunday, 4 Jan 2004, so that "
"``date(2003, 12, 29).isocalendar() == (2004, 1, 1)`` and ``date(2004, 1, 4)."
"isocalendar() == (2004, 1, 7)``."
msgstr ""

#: ../Doc/library/datetime.rst:534
msgid ""
"Return a string representing the date in ISO 8601 format, 'YYYY-MM-DD'.  For "
"example, ``date(2002, 12, 4).isoformat() == '2002-12-04'``."
msgstr ""

#: ../Doc/library/datetime.rst:540
msgid "For a date *d*, ``str(d)`` is equivalent to ``d.isoformat()``."
msgstr "Pour une date *d*, ``str(d)`` est équivalent à ``d.isoformat()``."

#: ../Doc/library/datetime.rst:545
msgid ""
"Return a string representing the date, for example ``date(2002, 12, 4)."
"ctime() == 'Wed Dec 4 00:00:00 2002'``. ``d.ctime()`` is equivalent to "
"``time.ctime(time.mktime(d.timetuple()))`` on platforms where the native C :"
"c:func:`ctime` function (which :func:`time.ctime` invokes, but which :meth:"
"`date.ctime` does not invoke) conforms to the C standard."
msgstr ""

#: ../Doc/library/datetime.rst:554
msgid ""
"Return a string representing the date, controlled by an explicit format "
"string. Format codes referring to hours, minutes or seconds will see 0 "
"values. For a complete list of formatting directives, see section :ref:"
"`strftime-strptime-behavior`."
msgstr ""

#: ../Doc/library/datetime.rst:562
msgid ""
"Same as :meth:`.date.strftime`. This makes it possible to specify a format "
"string for a :class:`.date` object when using :meth:`str.format`. See "
"section :ref:`strftime-strptime-behavior`."
msgstr ""

#: ../Doc/library/datetime.rst:567
msgid "Example of counting days to an event::"
msgstr "Exemple de décompte des jours avant un évènement :"

#: ../Doc/library/datetime.rst:585
msgid "Example of working with :class:`date`:"
msgstr "Exemple d'utilisation de la classe :class:`date` :"

#: ../Doc/library/datetime.rst:624
msgid ":class:`.datetime` Objects"
msgstr "Objets :class:`.datetime`"

#: ../Doc/library/datetime.rst:626
msgid ""
"A :class:`.datetime` object is a single object containing all the "
"information from a :class:`date` object and a :class:`.time` object.  Like "
"a :class:`date` object, :class:`.datetime` assumes the current Gregorian "
"calendar extended in both directions; like a time object, :class:`.datetime` "
"assumes there are exactly 3600\\*24 seconds in every day."
msgstr ""
"Un objet :class:`.datetime` est un objet comportant toutes les informations "
"d'un objet :class:`date` et d'un objet :class:`.time`. Comme un objet :class:"
"`date`, un objet :class:`.datetime` utilise l'actuel calendrier Grégorien "
"étendu vers le passé et le futur ; comme un objet :class:`.time`, un objet :"
"class:`.datetime` suppose qu'il y a exactement 3600\\*24 secondes chaque "
"jour."

#: ../Doc/library/datetime.rst:632
msgid "Constructor:"
msgstr "Constructeur :"

#: ../Doc/library/datetime.rst:636
msgid ""
"The year, month and day arguments are required.  *tzinfo* may be ``None``, "
"or an instance of a :class:`tzinfo` subclass.  The remaining arguments may "
"be ints or longs, in the following ranges:"
msgstr ""

#: ../Doc/library/datetime.rst:643 ../Doc/library/datetime.rst:1185
msgid "``0 <= hour < 24``"
msgstr "``0 <= hour < 24``"

#: ../Doc/library/datetime.rst:644 ../Doc/library/datetime.rst:1186
msgid "``0 <= minute < 60``"
msgstr "``0 <= minute < 60``"

#: ../Doc/library/datetime.rst:645 ../Doc/library/datetime.rst:1187
msgid "``0 <= second < 60``"
msgstr "``0 <= second < 60``"

#: ../Doc/library/datetime.rst:646
msgid "``0 <= microsecond < 1000000``"
msgstr "``0 <= microsecond < 1000000``"

#: ../Doc/library/datetime.rst:654
msgid ""
"Return the current local datetime, with :attr:`.tzinfo` ``None``. This is "
"equivalent to ``datetime.fromtimestamp(time.time())``. See also :meth:"
"`now`, :meth:`fromtimestamp`."
msgstr ""

#: ../Doc/library/datetime.rst:661
msgid ""
"Return the current local date and time.  If optional argument *tz* is "
"``None`` or not specified, this is like :meth:`today`, but, if possible, "
"supplies more precision than can be gotten from going through a :func:`time."
"time` timestamp (for example, this may be possible on platforms supplying "
"the C :c:func:`gettimeofday` function)."
msgstr ""

#: ../Doc/library/datetime.rst:667
msgid ""
"If *tz* is not ``None``, it must be an instance of a :class:`tzinfo` "
"subclass, and the current date and time are converted to *tz*’s time zone.  "
"In this case the result is equivalent to ``tz.fromutc(datetime.utcnow()."
"replace(tzinfo=tz))``. See also :meth:`today`, :meth:`utcnow`."
msgstr ""

#: ../Doc/library/datetime.rst:675
msgid ""
"Return the current UTC date and time, with :attr:`.tzinfo` ``None``. This is "
"like :meth:`now`, but returns the current UTC date and time, as a naive :"
"class:`.datetime` object. See also :meth:`now`."
msgstr ""

#: ../Doc/library/datetime.rst:682
msgid ""
"Return the local date and time corresponding to the POSIX timestamp, such as "
"is returned by :func:`time.time`. If optional argument *tz* is ``None`` or "
"not specified, the timestamp is converted to the platform's local date and "
"time, and the returned :class:`.datetime` object is naive."
msgstr ""

#: ../Doc/library/datetime.rst:687
msgid ""
"If *tz* is not ``None``, it must be an instance of a :class:`tzinfo` "
"subclass, and the timestamp is converted to *tz*’s time zone.  In this case "
"the result is equivalent to ``tz.fromutc(datetime."
"utcfromtimestamp(timestamp).replace(tzinfo=tz))``."
msgstr ""

#: ../Doc/library/datetime.rst:692
msgid ""
":meth:`fromtimestamp` may raise :exc:`ValueError`, if the timestamp is out "
"of the range of values supported by the platform C :c:func:`localtime` or :c:"
"func:`gmtime` functions.  It's common for this to be restricted to years in "
"1970 through 2038. Note that on non-POSIX systems that include leap seconds "
"in their notion of a timestamp, leap seconds are ignored by :meth:"
"`fromtimestamp`, and then it's possible to have two timestamps differing by "
"a second that yield identical :class:`.datetime` objects. See also :meth:"
"`utcfromtimestamp`."
msgstr ""

#: ../Doc/library/datetime.rst:703
msgid ""
"Return the UTC :class:`.datetime` corresponding to the POSIX timestamp, "
"with :attr:`.tzinfo` ``None``. This may raise :exc:`ValueError`, if the "
"timestamp is out of the range of values supported by the platform C :c:func:"
"`gmtime` function. It's common for this to be restricted to years in 1970 "
"through 2038. See also :meth:`fromtimestamp`."
msgstr ""

#: ../Doc/library/datetime.rst:712
msgid ""
"Return the :class:`.datetime` corresponding to the proleptic Gregorian "
"ordinal, where January 1 of year 1 has ordinal 1. :exc:`ValueError` is "
"raised unless ``1 <= ordinal <= datetime.max.toordinal()``.  The hour, "
"minute, second and microsecond of the result are all 0, and :attr:`.tzinfo` "
"is ``None``."
msgstr ""

#: ../Doc/library/datetime.rst:720
msgid ""
"Return a new :class:`.datetime` object whose date components are equal to "
"the given :class:`date` object's, and whose time components and :attr:`."
"tzinfo` attributes are equal to the given :class:`.time` object's. For any :"
"class:`.datetime` object *d*, ``d == datetime.combine(d.date(), d."
"timetz())``.  If date is a :class:`.datetime` object, its time components "
"and :attr:`.tzinfo` attributes are ignored."
msgstr ""

#: ../Doc/library/datetime.rst:731
msgid ""
"Return a :class:`.datetime` corresponding to *date_string*, parsed according "
"to *format*.  This is equivalent to ``datetime(*(time.strptime(date_string, "
"format)[0:6]))``. :exc:`ValueError` is raised if the date_string and format "
"can't be parsed by :func:`time.strptime` or if it returns a value which "
"isn't a time tuple. For a complete list of formatting directives, see "
"section :ref:`strftime-strptime-behavior`."
msgstr ""

#: ../Doc/library/datetime.rst:745
msgid ""
"The earliest representable :class:`.datetime`, ``datetime(MINYEAR, 1, 1, "
"tzinfo=None)``."
msgstr ""

#: ../Doc/library/datetime.rst:751
msgid ""
"The latest representable :class:`.datetime`, ``datetime(MAXYEAR, 12, 31, 23, "
"59, 59, 999999, tzinfo=None)``."
msgstr ""

#: ../Doc/library/datetime.rst:757
msgid ""
"The smallest possible difference between non-equal :class:`.datetime` "
"objects, ``timedelta(microseconds=1)``."
msgstr ""

#: ../Doc/library/datetime.rst:780 ../Doc/library/datetime.rst:1217
msgid "In ``range(24)``."
msgstr "Dans ``range(24)``."

#: ../Doc/library/datetime.rst:785 ../Doc/library/datetime.rst:790
#: ../Doc/library/datetime.rst:1222 ../Doc/library/datetime.rst:1227
msgid "In ``range(60)``."
msgstr "Dans ``range(60)``."

#: ../Doc/library/datetime.rst:795 ../Doc/library/datetime.rst:1232
msgid "In ``range(1000000)``."
msgstr "Dans ``range(1000000)``."

#: ../Doc/library/datetime.rst:800
msgid ""
"The object passed as the *tzinfo* argument to the :class:`.datetime` "
"constructor, or ``None`` if none was passed."
msgstr ""
"L'objet passé en tant que paramètre *tzinfo* du constructeur de la classe "
"class:`.datetime` ou ``None`` si aucun n'a été donné."

#: ../Doc/library/datetime.rst:809
msgid "``datetime2 = datetime1 + timedelta``"
msgstr "``datetime2 = datetime1 + timedelta``"

#: ../Doc/library/datetime.rst:809 ../Doc/library/datetime.rst:1623
#: ../Doc/library/datetime.rst:1628 ../Doc/library/datetime.rst:1640
#: ../Doc/library/datetime.rst:1645 ../Doc/library/datetime.rst:1704
#: ../Doc/library/datetime.rst:1709 ../Doc/library/datetime.rst:1713
msgid "\\(1)"
msgstr "\\(1)"

#: ../Doc/library/datetime.rst:811
msgid "``datetime2 = datetime1 - timedelta``"
msgstr "``datetime2 = datetime1 - timedelta``"

#: ../Doc/library/datetime.rst:811
msgid "\\(2)"
msgstr "\\(2)"

#: ../Doc/library/datetime.rst:813
msgid "``timedelta = datetime1 - datetime2``"
msgstr "``timedelta = datetime1 - datetime2``"

#: ../Doc/library/datetime.rst:815
msgid "``datetime1 < datetime2``"
msgstr "``datetime1 < datetime2``"

#: ../Doc/library/datetime.rst:815
msgid "Compares :class:`.datetime` to :class:`.datetime`. (4)"
msgstr "Compare :class:`.datetime` à :class:`.datetime`. (4)"

#: ../Doc/library/datetime.rst:820
msgid ""
"datetime2 is a duration of timedelta removed from datetime1, moving forward "
"in time if ``timedelta.days`` > 0, or backward if ``timedelta.days`` < 0.  "
"The result has the same :attr:`~.datetime.tzinfo` attribute as the input "
"datetime, and datetime2 - datetime1 == timedelta after. :exc:`OverflowError` "
"is raised if datetime2.year would be smaller than :const:`MINYEAR` or larger "
"than :const:`MAXYEAR`. Note that no time zone adjustments are done even if "
"the input is an aware object."
msgstr ""

#: ../Doc/library/datetime.rst:829
msgid ""
"Computes the datetime2 such that datetime2 + timedelta == datetime1. As for "
"addition, the result has the same :attr:`~.datetime.tzinfo` attribute as the "
"input datetime, and no time zone adjustments are done even if the input is "
"aware. This isn't quite equivalent to datetime1 + (-timedelta), because -"
"timedelta in isolation can overflow in cases where datetime1 - timedelta "
"does not."
msgstr ""

#: ../Doc/library/datetime.rst:836
msgid ""
"Subtraction of a :class:`.datetime` from a :class:`.datetime` is defined "
"only if both operands are naive, or if both are aware.  If one is aware and "
"the other is naive, :exc:`TypeError` is raised."
msgstr ""

#: ../Doc/library/datetime.rst:840
msgid ""
"If both are naive, or both are aware and have the same :attr:`~.datetime."
"tzinfo` attribute, the :attr:`~.datetime.tzinfo` attributes are ignored, and "
"the result is a :class:`timedelta` object *t* such that ``datetime2 + t == "
"datetime1``.  No time zone adjustments are done in this case."
msgstr ""

#: ../Doc/library/datetime.rst:845
msgid ""
"If both are aware and have different :attr:`~.datetime.tzinfo` attributes, "
"``a-b`` acts as if *a* and *b* were first converted to naive UTC datetimes "
"first.  The result is ``(a.replace(tzinfo=None) - a.utcoffset()) - (b."
"replace(tzinfo=None) - b.utcoffset())`` except that the implementation never "
"overflows."
msgstr ""

#: ../Doc/library/datetime.rst:851
msgid ""
"*datetime1* is considered less than *datetime2* when *datetime1* precedes "
"*datetime2* in time."
msgstr ""

#: ../Doc/library/datetime.rst:854
msgid ""
"If one comparand is naive and the other is aware, :exc:`TypeError` is "
"raised. If both comparands are aware, and have the same :attr:`~.datetime."
"tzinfo` attribute, the common :attr:`~.datetime.tzinfo` attribute is ignored "
"and the base datetimes are compared.  If both comparands are aware and have "
"different :attr:`~.datetime.tzinfo` attributes, the comparands are first "
"adjusted by subtracting their UTC offsets (obtained from ``self."
"utcoffset()``)."
msgstr ""

#: ../Doc/library/datetime.rst:863
msgid ""
"In order to stop comparison from falling back to the default scheme of "
"comparing object addresses, datetime comparison normally raises :exc:"
"`TypeError` if the other comparand isn't also a :class:`.datetime` object.  "
"However, ``NotImplemented`` is returned instead if the other comparand has "
"a :meth:`timetuple` attribute.  This hook gives other kinds of date objects "
"a chance at implementing mixed-type comparison.  If not, when a :class:`."
"datetime` object is compared to an object of a different type, :exc:"
"`TypeError` is raised unless the comparison is ``==`` or ``!=``.  The latter "
"cases return :const:`False` or :const:`True`, respectively."
msgstr ""

#: ../Doc/library/datetime.rst:873
msgid ""
":class:`.datetime` objects can be used as dictionary keys. In Boolean "
"contexts, all :class:`.datetime` objects are considered to be true."
msgstr ""

#: ../Doc/library/datetime.rst:880
msgid "Return :class:`date` object with same year, month and day."
msgstr ""

#: ../Doc/library/datetime.rst:885
msgid ""
"Return :class:`.time` object with same hour, minute, second and "
"microsecond. :attr:`.tzinfo` is ``None``.  See also method :meth:`timetz`."
msgstr ""

#: ../Doc/library/datetime.rst:891
msgid ""
"Return :class:`.time` object with same hour, minute, second, microsecond, "
"and tzinfo attributes.  See also method :meth:`time`."
msgstr ""

#: ../Doc/library/datetime.rst:897
msgid ""
"Return a datetime with the same attributes, except for those attributes "
"given new values by whichever keyword arguments are specified.  Note that "
"``tzinfo=None`` can be specified to create a naive datetime from an aware "
"datetime with no conversion of date and time data."
msgstr ""

#: ../Doc/library/datetime.rst:905
msgid ""
"Return a :class:`.datetime` object with new :attr:`.tzinfo` attribute *tz*, "
"adjusting the date and time data so the result is the same UTC time as "
"*self*, but in *tz*'s local time."
msgstr ""

#: ../Doc/library/datetime.rst:909
msgid ""
"*tz* must be an instance of a :class:`tzinfo` subclass, and its :meth:"
"`utcoffset` and :meth:`dst` methods must not return ``None``.  *self* must "
"be aware (``self.tzinfo`` must not be ``None``, and ``self.utcoffset()`` "
"must not return ``None``)."
msgstr ""

#: ../Doc/library/datetime.rst:914
msgid ""
"If ``self.tzinfo`` is *tz*, ``self.astimezone(tz)`` is equal to *self*:  no "
"adjustment of date or time data is performed. Else the result is local time "
"in time zone *tz*, representing the same UTC time as *self*:  after ``astz = "
"dt.astimezone(tz)``, ``astz - astz.utcoffset()`` will usually have the same "
"date and time data as ``dt - dt.utcoffset()``. The discussion of class :"
"class:`tzinfo` explains the cases at Daylight Saving Time transition "
"boundaries where this cannot be achieved (an issue only if *tz* models both "
"standard and daylight time)."
msgstr ""

#: ../Doc/library/datetime.rst:923
msgid ""
"If you merely want to attach a time zone object *tz* to a datetime *dt* "
"without adjustment of date and time data, use ``dt.replace(tzinfo=tz)``.  If "
"you merely want to remove the time zone object from an aware datetime *dt* "
"without conversion of date and time data, use ``dt.replace(tzinfo=None)``."
msgstr ""

#: ../Doc/library/datetime.rst:928
msgid ""
"Note that the default :meth:`tzinfo.fromutc` method can be overridden in a :"
"class:`tzinfo` subclass to affect the result returned by :meth:`astimezone`. "
"Ignoring error cases, :meth:`astimezone` acts like::"
msgstr ""

#: ../Doc/library/datetime.rst:943
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"utcoffset(self)``, and raises an exception if the latter doesn't return "
"``None``, or a :class:`timedelta` object representing a whole number of "
"minutes with magnitude less than one day."
msgstr ""

#: ../Doc/library/datetime.rst:951
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"dst(self)``, and raises an exception if the latter doesn't return ``None``, "
"or a :class:`timedelta` object representing a whole number of minutes with "
"magnitude less than one day."
msgstr ""

#: ../Doc/library/datetime.rst:959
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"tzname(self)``, raises an exception if the latter doesn't return ``None`` or "
"a string object,"
msgstr ""

#: ../Doc/library/datetime.rst:966
msgid ""
"Return a :class:`time.struct_time` such as returned by :func:`time."
"localtime`. ``d.timetuple()`` is equivalent to ``time.struct_time((d.year, d."
"month, d.day, d.hour, d.minute, d.second, d.weekday(), yday, dst))``, where "
"``yday = d.toordinal() - date(d.year, 1, 1).toordinal() + 1`` is the day "
"number within the current year starting with ``1`` for January 1st. The :"
"attr:`tm_isdst` flag of the result is set according to the :meth:`dst` "
"method: :attr:`.tzinfo` is ``None`` or :meth:`dst` returns ``None``, :attr:"
"`tm_isdst` is set to ``-1``; else if :meth:`dst` returns a non-zero value, :"
"attr:`tm_isdst` is set to ``1``; else :attr:`tm_isdst` is set to ``0``."
msgstr ""

#: ../Doc/library/datetime.rst:979
msgid ""
"If :class:`.datetime` instance *d* is naive, this is the same as ``d."
"timetuple()`` except that :attr:`tm_isdst` is forced to 0 regardless of what "
"``d.dst()`` returns.  DST is never in effect for a UTC time."
msgstr ""

#: ../Doc/library/datetime.rst:983
msgid ""
"If *d* is aware, *d* is normalized to UTC time, by subtracting ``d."
"utcoffset()``, and a :class:`time.struct_time` for the normalized time is "
"returned.  :attr:`tm_isdst` is forced to 0. Note that the result's :attr:"
"`tm_year` member may be :const:`MINYEAR`\\ -1 or :const:`MAXYEAR`\\ +1, if "
"*d*.year was ``MINYEAR`` or ``MAXYEAR`` and UTC adjustment spills over a "
"year boundary."
msgstr ""

#: ../Doc/library/datetime.rst:993
msgid ""
"Return the proleptic Gregorian ordinal of the date.  The same as ``self."
"date().toordinal()``."
msgstr ""

#: ../Doc/library/datetime.rst:999
msgid ""
"Return the day of the week as an integer, where Monday is 0 and Sunday is 6. "
"The same as ``self.date().weekday()``. See also :meth:`isoweekday`."
msgstr ""

#: ../Doc/library/datetime.rst:1005
msgid ""
"Return the day of the week as an integer, where Monday is 1 and Sunday is 7. "
"The same as ``self.date().isoweekday()``. See also :meth:`weekday`, :meth:"
"`isocalendar`."
msgstr ""

#: ../Doc/library/datetime.rst:1012
msgid ""
"Return a 3-tuple, (ISO year, ISO week number, ISO weekday).  The same as "
"``self.date().isocalendar()``."
msgstr ""

#: ../Doc/library/datetime.rst:1018
msgid ""
"Return a string representing the date and time in ISO 8601 format, YYYY-MM-"
"DDTHH:MM:SS.mmmmmm or, if :attr:`microsecond` is 0, YYYY-MM-DDTHH:MM:SS"
msgstr ""

#: ../Doc/library/datetime.rst:1022
msgid ""
"If :meth:`utcoffset` does not return ``None``, a 6-character string is "
"appended, giving the UTC offset in (signed) hours and minutes: YYYY-MM-DDTHH:"
"MM:SS.mmmmmm+HH:MM or, if :attr:`microsecond` is 0 YYYY-MM-DDTHH:MM:SS+HH:MM"
msgstr ""

#: ../Doc/library/datetime.rst:1027
msgid ""
"The optional argument *sep* (default ``'T'``) is a one-character separator, "
"placed between the date and time portions of the result.  For example,"
msgstr ""

#: ../Doc/library/datetime.rst:1040
msgid ""
"For a :class:`.datetime` instance *d*, ``str(d)`` is equivalent to ``d."
"isoformat(' ')``."
msgstr ""

#: ../Doc/library/datetime.rst:1046
msgid ""
"Return a string representing the date and time, for example ``datetime(2002, "
"12, 4, 20, 30, 40).ctime() == 'Wed Dec  4 20:30:40 2002'``. ``d.ctime()`` is "
"equivalent to ``time.ctime(time.mktime(d.timetuple()))`` on platforms where "
"the native C :c:func:`ctime` function (which :func:`time.ctime` invokes, but "
"which :meth:`datetime.ctime` does not invoke) conforms to the C standard."
msgstr ""

#: ../Doc/library/datetime.rst:1055
msgid ""
"Return a string representing the date and time, controlled by an explicit "
"format string.  For a complete list of formatting directives, see section :"
"ref:`strftime-strptime-behavior`."
msgstr ""

#: ../Doc/library/datetime.rst:1062
msgid ""
"Same as :meth:`.datetime.strftime`.  This makes it possible to specify a "
"format string for a :class:`.datetime` object when using :meth:`str.format`. "
"See section :ref:`strftime-strptime-behavior`."
msgstr ""

#: ../Doc/library/datetime.rst:1067
msgid "Examples of working with datetime objects:"
msgstr ""

#: ../Doc/library/datetime.rst:1114
msgid "Using datetime with tzinfo:"
msgstr "Utilisation de :class:`.datetime` avec *tzinfo* :"

#: ../Doc/library/datetime.rst:1174
msgid ":class:`time` Objects"
msgstr ""

#: ../Doc/library/datetime.rst:1176
msgid ""
"A time object represents a (local) time of day, independent of any "
"particular day, and subject to adjustment via a :class:`tzinfo` object."
msgstr ""

#: ../Doc/library/datetime.rst:1181
msgid ""
"All arguments are optional.  *tzinfo* may be ``None``, or an instance of a :"
"class:`tzinfo` subclass.  The remaining arguments may be ints or longs, in "
"the following ranges:"
msgstr ""

#: ../Doc/library/datetime.rst:1188
msgid "``0 <= microsecond < 1000000``."
msgstr "``0 <= microsecond < 1000000``."

#: ../Doc/library/datetime.rst:1190
msgid ""
"If an argument outside those ranges is given, :exc:`ValueError` is raised.  "
"All default to ``0`` except *tzinfo*, which defaults to :const:`None`."
msgstr ""

#: ../Doc/library/datetime.rst:1198
msgid "The earliest representable :class:`.time`, ``time(0, 0, 0, 0)``."
msgstr ""

#: ../Doc/library/datetime.rst:1203
msgid "The latest representable :class:`.time`, ``time(23, 59, 59, 999999)``."
msgstr ""

#: ../Doc/library/datetime.rst:1208
msgid ""
"The smallest possible difference between non-equal :class:`.time` objects, "
"``timedelta(microseconds=1)``, although note that arithmetic on :class:`."
"time` objects is not supported."
msgstr ""

#: ../Doc/library/datetime.rst:1237
msgid ""
"The object passed as the tzinfo argument to the :class:`.time` constructor, "
"or ``None`` if none was passed."
msgstr ""

#: ../Doc/library/datetime.rst:1243
msgid ""
"comparison of :class:`.time` to :class:`.time`, where *a* is considered less "
"than *b* when *a* precedes *b* in time.  If one comparand is naive and the "
"other is aware, :exc:`TypeError` is raised.  If both comparands are aware, "
"and have the same :attr:`~time.tzinfo` attribute, the common :attr:`~time."
"tzinfo` attribute is ignored and the base times are compared.  If both "
"comparands are aware and have different :attr:`~time.tzinfo` attributes, the "
"comparands are first adjusted by subtracting their UTC offsets (obtained "
"from ``self.utcoffset()``). In order to stop mixed-type comparisons from "
"falling back to the default comparison by object address, when a :class:`."
"time` object is compared to an object of a different type, :exc:`TypeError` "
"is raised unless the comparison is ``==`` or ``!=``.  The latter cases "
"return :const:`False` or :const:`True`, respectively."
msgstr ""

#: ../Doc/library/datetime.rst:1255
msgid "hash, use as dict key"
msgstr ""

#: ../Doc/library/datetime.rst:1257
msgid "efficient pickling"
msgstr ""

#: ../Doc/library/datetime.rst:1259
msgid ""
"in Boolean contexts, a :class:`.time` object is considered to be true if and "
"only if, after converting it to minutes and subtracting :meth:`utcoffset` "
"(or ``0`` if that's ``None``), the result is non-zero."
msgstr ""

#: ../Doc/library/datetime.rst:1268
msgid ""
"Return a :class:`.time` with the same value, except for those attributes "
"given new values by whichever keyword arguments are specified.  Note that "
"``tzinfo=None`` can be specified to create a naive :class:`.time` from an "
"aware :class:`.time`, without conversion of the time data."
msgstr ""

#: ../Doc/library/datetime.rst:1276
msgid ""
"Return a string representing the time in ISO 8601 format, HH:MM:SS.mmmmmm "
"or, if self.microsecond is 0, HH:MM:SS If :meth:`utcoffset` does not return "
"``None``, a 6-character string is appended, giving the UTC offset in "
"(signed) hours and minutes: HH:MM:SS.mmmmmm+HH:MM or, if self.microsecond is "
"0, HH:MM:SS+HH:MM"
msgstr ""

#: ../Doc/library/datetime.rst:1284
msgid "For a time *t*, ``str(t)`` is equivalent to ``t.isoformat()``."
msgstr ""

#: ../Doc/library/datetime.rst:1289
msgid ""
"Return a string representing the time, controlled by an explicit format "
"string. For a complete list of formatting directives, see section :ref:"
"`strftime-strptime-behavior`."
msgstr ""

#: ../Doc/library/datetime.rst:1296
msgid ""
"Same as :meth:`.time.strftime`. This makes it possible to specify a format "
"string for a :class:`.time` object when using :meth:`str.format`. See "
"section :ref:`strftime-strptime-behavior`."
msgstr ""

#: ../Doc/library/datetime.rst:1303
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"utcoffset(None)``, and raises an exception if the latter doesn't return "
"``None`` or a :class:`timedelta` object representing a whole number of "
"minutes with magnitude less than one day."
msgstr ""

#: ../Doc/library/datetime.rst:1311
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"dst(None)``, and raises an exception if the latter doesn't return ``None``, "
"or a :class:`timedelta` object representing a whole number of minutes with "
"magnitude less than one day."
msgstr ""

#: ../Doc/library/datetime.rst:1319
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"tzname(None)``, or raises an exception if the latter doesn't return ``None`` "
"or a string object."
msgstr ""

#: ../Doc/library/datetime.rst:1324
msgid "Example:"
msgstr "Exemple :"

#: ../Doc/library/datetime.rst:1354
msgid ":class:`tzinfo` Objects"
msgstr "Objets :class:`tzinfo`"

#: ../Doc/library/datetime.rst:1358
msgid ""
"This is an abstract base class, meaning that this class should not be "
"instantiated directly.  You need to derive a concrete subclass, and (at "
"least) supply implementations of the standard :class:`tzinfo` methods needed "
"by the :class:`.datetime` methods you use.  The :mod:`datetime` module does "
"not supply any concrete subclasses of :class:`tzinfo`."
msgstr ""

#: ../Doc/library/datetime.rst:1364
msgid ""
"An instance of (a concrete subclass of) :class:`tzinfo` can be passed to the "
"constructors for :class:`.datetime` and :class:`.time` objects. The latter "
"objects view their attributes as being in local time, and the :class:"
"`tzinfo` object supports methods revealing offset of local time from UTC, "
"the name of the time zone, and DST offset, all relative to a date or time "
"object passed to them."
msgstr ""

#: ../Doc/library/datetime.rst:1370
msgid ""
"Special requirement for pickling:  A :class:`tzinfo` subclass must have an :"
"meth:`__init__` method that can be called with no arguments, else it can be "
"pickled but possibly not unpickled again.  This is a technical requirement "
"that may be relaxed in the future."
msgstr ""

#: ../Doc/library/datetime.rst:1375
msgid ""
"A concrete subclass of :class:`tzinfo` may need to implement the following "
"methods.  Exactly which methods are needed depends on the uses made of "
"aware :mod:`datetime` objects.  If in doubt, simply implement all of them."
msgstr ""

#: ../Doc/library/datetime.rst:1382
msgid ""
"Return offset of local time from UTC, in minutes east of UTC.  If local time "
"is west of UTC, this should be negative.  Note that this is intended to be "
"the total offset from UTC; for example, if a :class:`tzinfo` object "
"represents both time zone and DST adjustments, :meth:`utcoffset` should "
"return their sum.  If the UTC offset isn't known, return ``None``.  Else the "
"value returned must be a :class:`timedelta` object specifying a whole number "
"of minutes in the range -1439 to 1439 inclusive (1440 = 24\\*60; the "
"magnitude of the offset must be less than one day).  Most implementations "
"of :meth:`utcoffset` will probably look like one of these two::"
msgstr ""

#: ../Doc/library/datetime.rst:1395
msgid ""
"If :meth:`utcoffset` does not return ``None``, :meth:`dst` should not return "
"``None`` either."
msgstr ""

#: ../Doc/library/datetime.rst:1398
msgid ""
"The default implementation of :meth:`utcoffset` raises :exc:"
"`NotImplementedError`."
msgstr ""

#: ../Doc/library/datetime.rst:1404
msgid ""
"Return the daylight saving time (DST) adjustment, in minutes east of UTC, or "
"``None`` if DST information isn't known.  Return ``timedelta(0)`` if DST is "
"not in effect. If DST is in effect, return the offset as a :class:"
"`timedelta` object (see :meth:`utcoffset` for details). Note that DST "
"offset, if applicable, has already been added to the UTC offset returned by :"
"meth:`utcoffset`, so there's no need to consult :meth:`dst` unless you're "
"interested in obtaining DST info separately.  For example, :meth:`datetime."
"timetuple` calls its :attr:`~.datetime.tzinfo` attribute's :meth:`dst` "
"method to determine how the :attr:`tm_isdst` flag should be set, and :meth:"
"`tzinfo.fromutc` calls :meth:`dst` to account for DST changes when crossing "
"time zones."
msgstr ""

#: ../Doc/library/datetime.rst:1415
msgid ""
"An instance *tz* of a :class:`tzinfo` subclass that models both standard and "
"daylight times must be consistent in this sense:"
msgstr ""

#: ../Doc/library/datetime.rst:1418
msgid "``tz.utcoffset(dt) - tz.dst(dt)``"
msgstr "``tz.utcoffset(dt) - tz.dst(dt)``"

#: ../Doc/library/datetime.rst:1420
msgid ""
"must return the same result for every :class:`.datetime` *dt* with ``dt."
"tzinfo == tz``  For sane :class:`tzinfo` subclasses, this expression yields "
"the time zone's \"standard offset\", which should not depend on the date or "
"the time, but only on geographic location.  The implementation of :meth:"
"`datetime.astimezone` relies on this, but cannot detect violations; it's the "
"programmer's responsibility to ensure it.  If a :class:`tzinfo` subclass "
"cannot guarantee this, it may be able to override the default implementation "
"of :meth:`tzinfo.fromutc` to work correctly with :meth:`astimezone` "
"regardless."
msgstr ""

#: ../Doc/library/datetime.rst:1429
msgid ""
"Most implementations of :meth:`dst` will probably look like one of these "
"two::"
msgstr ""

#: ../Doc/library/datetime.rst:1435
msgid "or ::"
msgstr "ou : ::"

#: ../Doc/library/datetime.rst:1447
msgid ""
"The default implementation of :meth:`dst` raises :exc:`NotImplementedError`."
msgstr ""

#: ../Doc/library/datetime.rst:1452
msgid ""
"Return the time zone name corresponding to the :class:`.datetime` object "
"*dt*, as a string. Nothing about string names is defined by the :mod:"
"`datetime` module, and there's no requirement that it mean anything in "
"particular.  For example, \"GMT\", \"UTC\", \"-500\", \"-5:00\", \"EDT\", "
"\"US/Eastern\", \"America/New York\" are all valid replies.  Return ``None`` "
"if a string name isn't known.  Note that this is a method rather than a "
"fixed string primarily because some :class:`tzinfo` subclasses will wish to "
"return different names depending on the specific value of *dt* passed, "
"especially if the :class:`tzinfo` class is accounting for daylight time."
msgstr ""

#: ../Doc/library/datetime.rst:1462
msgid ""
"The default implementation of :meth:`tzname` raises :exc:"
"`NotImplementedError`."
msgstr ""

#: ../Doc/library/datetime.rst:1465
msgid ""
"These methods are called by a :class:`.datetime` or :class:`.time` object, "
"in response to their methods of the same names.  A :class:`.datetime` object "
"passes itself as the argument, and a :class:`.time` object passes ``None`` "
"as the argument.  A :class:`tzinfo` subclass's methods should therefore be "
"prepared to accept a *dt* argument of ``None``, or of class :class:`."
"datetime`."
msgstr ""

#: ../Doc/library/datetime.rst:1471
msgid ""
"When ``None`` is passed, it's up to the class designer to decide the best "
"response.  For example, returning ``None`` is appropriate if the class "
"wishes to say that time objects don't participate in the :class:`tzinfo` "
"protocols.  It may be more useful for ``utcoffset(None)`` to return the "
"standard UTC offset, as there is no other convention for discovering the "
"standard offset."
msgstr ""

#: ../Doc/library/datetime.rst:1477
msgid ""
"When a :class:`.datetime` object is passed in response to a :class:`."
"datetime` method, ``dt.tzinfo`` is the same object as *self*.  :class:"
"`tzinfo` methods can rely on this, unless user code calls :class:`tzinfo` "
"methods directly.  The intent is that the :class:`tzinfo` methods interpret "
"*dt* as being in local time, and not need worry about objects in other "
"timezones."
msgstr ""

#: ../Doc/library/datetime.rst:1483
msgid ""
"There is one more :class:`tzinfo` method that a subclass may wish to "
"override:"
msgstr ""

#: ../Doc/library/datetime.rst:1488
msgid ""
"This is called from the default :class:`datetime.astimezone()` "
"implementation.  When called from that, ``dt.tzinfo`` is *self*, and *dt*'s "
"date and time data are to be viewed as expressing a UTC time.  The purpose "
"of :meth:`fromutc` is to adjust the date and time data, returning an "
"equivalent datetime in *self*'s local time."
msgstr ""

#: ../Doc/library/datetime.rst:1494
msgid ""
"Most :class:`tzinfo` subclasses should be able to inherit the default :meth:"
"`fromutc` implementation without problems.  It's strong enough to handle "
"fixed-offset time zones, and time zones accounting for both standard and "
"daylight time, and the latter even if the DST transition times differ in "
"different years.  An example of a time zone the default :meth:`fromutc` "
"implementation may not handle correctly in all cases is one where the "
"standard offset (from UTC) depends on the specific date and time passed, "
"which can happen for political reasons. The default implementations of :meth:"
"`astimezone` and :meth:`fromutc` may not produce the result you want if the "
"result is one of the hours straddling the moment the standard offset changes."
msgstr ""

#: ../Doc/library/datetime.rst:1505
msgid ""
"Skipping code for error cases, the default :meth:`fromutc` implementation "
"acts like::"
msgstr ""

#: ../Doc/library/datetime.rst:1523
msgid "Example :class:`tzinfo` classes:"
msgstr "Exemple de classes :class:`tzinfo` :"

#: ../Doc/library/datetime.rst:1528
msgid ""
"Note that there are unavoidable subtleties twice per year in a :class:"
"`tzinfo` subclass accounting for both standard and daylight time, at the DST "
"transition points.  For concreteness, consider US Eastern (UTC -0500), where "
"EDT begins the minute after 1:59 (EST) on the second Sunday in March, and "
"ends the minute after 1:59 (EDT) on the first Sunday in November::"
msgstr ""

#: ../Doc/library/datetime.rst:1542
msgid ""
"When DST starts (the \"start\" line), the local wall clock leaps from 1:59 "
"to 3:00.  A wall time of the form 2:MM doesn't really make sense on that "
"day, so ``astimezone(Eastern)`` won't deliver a result with ``hour == 2`` on "
"the day DST begins.  In order for :meth:`astimezone` to make this guarantee, "
"the :meth:`rzinfo.dst` method must consider times in the \"missing hour\" (2:"
"MM for Eastern) to be in daylight time."
msgstr ""

#: ../Doc/library/datetime.rst:1549
msgid ""
"When DST ends (the \"end\" line), there's a potentially worse problem: "
"there's an hour that can't be spelled unambiguously in local wall time: the "
"last hour of daylight time.  In Eastern, that's times of the form 5:MM UTC "
"on the day daylight time ends.  The local wall clock leaps from 1:59 "
"(daylight time) back to 1:00 (standard time) again. Local times of the form "
"1:MM are ambiguous. :meth:`astimezone` mimics the local clock's behavior by "
"mapping two adjacent UTC hours into the same local hour then.  In the "
"Eastern example, UTC times of the form 5:MM and 6:MM both map to 1:MM when "
"converted to Eastern.  In order for :meth:`astimezone` to make this "
"guarantee, the :meth:`tzinfo.dst` method must consider times in the "
"\"repeated hour\" to be in standard time.  This is easily arranged, as in "
"the example, by expressing DST switch times in the time zone's standard "
"local time."
msgstr ""

#: ../Doc/library/datetime.rst:1562
msgid ""
"Applications that can't bear such ambiguities should avoid using hybrid :"
"class:`tzinfo` subclasses; there are no ambiguities when using UTC, or any "
"other fixed-offset :class:`tzinfo` subclass (such as a class representing "
"only EST (fixed offset -5 hours), or only EDT (fixed offset -4 hours))."
msgstr ""

#: ../Doc/library/datetime.rst:1574
msgid "`pytz <https://pypi.python.org/pypi/pytz/>`_"
msgstr "`pytz <https://pypi.python.org/pypi/pytz/>`_"

#: ../Doc/library/datetime.rst:1570
msgid ""
"The standard library has no :class:`tzinfo` instances, but there exists a "
"third-party library which brings the *IANA timezone database* (also known as "
"the Olson database) to Python: *pytz*."
msgstr ""

#: ../Doc/library/datetime.rst:1574
msgid "*pytz* contains up-to-date information and its usage is recommended."
msgstr ""

#: ../Doc/library/datetime.rst:1580
msgid "`IANA timezone database <https://www.iana.org/time-zones>`_"
msgstr ""
"`Base de données des fuseaux horaires de l'IANA <https://www.iana.org/time-"
"zones>`_"

#: ../Doc/library/datetime.rst:1577
msgid ""
"The Time Zone Database (often called tz or zoneinfo) contains code and data "
"that represent the history of local time for many representative locations "
"around the globe. It is updated periodically to reflect changes made by "
"political bodies to time zone boundaries, UTC offsets, and daylight-saving "
"rules."
msgstr ""

#: ../Doc/library/datetime.rst:1586
msgid ":meth:`strftime` and :meth:`strptime` Behavior"
msgstr "Comportement de :meth:`strftime` et :meth:`strptime`"

#: ../Doc/library/datetime.rst:1588
msgid ""
":class:`date`, :class:`.datetime`, and :class:`.time` objects all support a "
"``strftime(format)`` method, to create a string representing the time under "
"the control of an explicit format string.  Broadly speaking, ``d."
"strftime(fmt)`` acts like the :mod:`time` module's ``time.strftime(fmt, d."
"timetuple())`` although not all objects support a :meth:`timetuple` method."
msgstr ""

#: ../Doc/library/datetime.rst:1594
msgid ""
"Conversely, the :meth:`datetime.strptime` class method creates a :class:`."
"datetime` object from a string representing a date and time and a "
"corresponding format string. ``datetime.strptime(date_string, format)`` is "
"equivalent to ``datetime(*(time.strptime(date_string, format)[0:6]))``."
msgstr ""

#: ../Doc/library/datetime.rst:1599
msgid ""
"For :class:`.time` objects, the format codes for year, month, and day should "
"not be used, as time objects have no such values.  If they're used anyway, "
"``1900`` is substituted for the year, and ``1`` for the month and day."
msgstr ""

#: ../Doc/library/datetime.rst:1603
msgid ""
"For :class:`date` objects, the format codes for hours, minutes, seconds, and "
"microseconds should not be used, as :class:`date` objects have no such "
"values.  If they're used anyway, ``0`` is substituted for them."
msgstr ""

#: ../Doc/library/datetime.rst:1607
msgid ""
"The full set of format codes supported varies across platforms, because "
"Python calls the platform C library's :func:`strftime` function, and "
"platform variations are common.  To see the full set of format codes "
"supported on your platform, consult the :manpage:`strftime(3)` documentation."
msgstr ""

#: ../Doc/library/datetime.rst:1612
msgid ""
"The following is a list of all the format codes that the C standard (1989 "
"version) requires, and these work on all platforms with a standard C "
"implementation.  Note that the 1999 version of the C standard added "
"additional format codes."
msgstr ""

#: ../Doc/library/datetime.rst:1617
msgid ""
"The exact range of years for which :meth:`strftime` works also varies across "
"platforms.  Regardless of platform, years before 1900 cannot be used."
msgstr ""

#: ../Doc/library/datetime.rst:1621
msgid "Directive"
msgstr ""

#: ../Doc/library/datetime.rst:1621
msgid "Meaning"
msgstr "Signification"

#: ../Doc/library/datetime.rst:1621
msgid "Example"
msgstr "Exemple"

#: ../Doc/library/datetime.rst:1621
msgid "Notes"
msgstr "Notes"

#: ../Doc/library/datetime.rst:1623
msgid "``%a``"
msgstr "``%a``"

#: ../Doc/library/datetime.rst:1623
msgid "Weekday as locale's abbreviated name."
msgstr "Jour de la semaine abrégé dans la langue locale."

#: ../Doc/library/datetime.rst:0
msgid "Sun, Mon, ..., Sat (en_US);"
msgstr "Sun, Mon, ..., Sat (en_US);"

#: ../Doc/library/datetime.rst:0
msgid "So, Mo, ..., Sa (de_DE)"
msgstr "Lu, Ma, ..., Di (fr_FR)"

#: ../Doc/library/datetime.rst:1628
msgid "``%A``"
msgstr "``%A``"

#: ../Doc/library/datetime.rst:1628
msgid "Weekday as locale's full name."
msgstr "Jour de la semaine complet dans la langue locale."

#: ../Doc/library/datetime.rst:0
msgid "Sunday, Monday, ..., Saturday (en_US);"
msgstr "Sunday, Monday, ..., Saturday (en_US);"

#: ../Doc/library/datetime.rst:0
msgid "Sonntag, Montag, ..., Samstag (de_DE)"
msgstr "Lundi, Mardi, ..., Dimanche (fr_FR)"

#: ../Doc/library/datetime.rst:1633
msgid "``%w``"
msgstr "``%w``"

#: ../Doc/library/datetime.rst:1633
msgid "Weekday as a decimal number, where 0 is Sunday and 6 is Saturday."
msgstr ""
"Jour de la semaine en chiffre, avec 0 pour le dimanche et 6 pour le samedi."

#: ../Doc/library/datetime.rst:1633
msgid "0, 1, ..., 6"
msgstr "0, 1, ..., 6"

#: ../Doc/library/datetime.rst:1637
msgid "``%d``"
msgstr "``%d``"

#: ../Doc/library/datetime.rst:1637
msgid "Day of the month as a zero-padded decimal number."
msgstr "Jour du mois sur deux chiffres."

#: ../Doc/library/datetime.rst:1637
msgid "01, 02, ..., 31"
msgstr "01, 02, ..., 31"

#: ../Doc/library/datetime.rst:1640
msgid "``%b``"
msgstr "``%b``"

#: ../Doc/library/datetime.rst:1640
msgid "Month as locale's abbreviated name."
msgstr ""

#: ../Doc/library/datetime.rst:0
msgid "Jan, Feb, ..., Dec (en_US);"
msgstr ""

#: ../Doc/library/datetime.rst:0
msgid "Jan, Feb, ..., Dez (de_DE)"
msgstr ""

#: ../Doc/library/datetime.rst:1645
msgid "``%B``"
msgstr "``%B``"

#: ../Doc/library/datetime.rst:1645
msgid "Month as locale's full name."
msgstr ""

#: ../Doc/library/datetime.rst:0
msgid "January, February, ..., December (en_US);"
msgstr ""

#: ../Doc/library/datetime.rst:0
msgid "Januar, Februar, ..., Dezember (de_DE)"
msgstr ""

#: ../Doc/library/datetime.rst:1650
msgid "``%m``"
msgstr "``%m``"

#: ../Doc/library/datetime.rst:1650
msgid "Month as a zero-padded decimal number."
msgstr ""

#: ../Doc/library/datetime.rst:1650 ../Doc/library/datetime.rst:1662
msgid "01, 02, ..., 12"
msgstr "01, 02, ..., 12"

#: ../Doc/library/datetime.rst:1653
msgid "``%y``"
msgstr "``%y``"

#: ../Doc/library/datetime.rst:1653
msgid "Year without century as a zero-padded decimal number."
msgstr ""

#: ../Doc/library/datetime.rst:1653
msgid "00, 01, ..., 99"
msgstr "00, 01, ..., 99"

#: ../Doc/library/datetime.rst:1656
msgid "``%Y``"
msgstr "``%Y``"

#: ../Doc/library/datetime.rst:1656
msgid "Year with century as a decimal number."
msgstr ""

#: ../Doc/library/datetime.rst:1656
msgid "1970, 1988, 2001, 2013"
msgstr ""

#: ../Doc/library/datetime.rst:1659
msgid "``%H``"
msgstr "``%H``"

#: ../Doc/library/datetime.rst:1659
msgid "Hour (24-hour clock) as a zero-padded decimal number."
msgstr ""

#: ../Doc/library/datetime.rst:1659
msgid "00, 01, ..., 23"
msgstr "00, 01, ..., 23"

#: ../Doc/library/datetime.rst:1662
msgid "``%I``"
msgstr "``%I``"

#: ../Doc/library/datetime.rst:1662
msgid "Hour (12-hour clock) as a zero-padded decimal number."
msgstr ""

#: ../Doc/library/datetime.rst:1665
msgid "``%p``"
msgstr "``%p``"

#: ../Doc/library/datetime.rst:1665
msgid "Locale's equivalent of either AM or PM."
msgstr ""

#: ../Doc/library/datetime.rst:0
msgid "AM, PM (en_US);"
msgstr ""

#: ../Doc/library/datetime.rst:0
msgid "am, pm (de_DE)"
msgstr ""

#: ../Doc/library/datetime.rst:1665
msgid "\\(1), \\(2)"
msgstr ""

#: ../Doc/library/datetime.rst:1668
msgid "``%M``"
msgstr "``%M``"

#: ../Doc/library/datetime.rst:1668
msgid "Minute as a zero-padded decimal number."
msgstr ""

#: ../Doc/library/datetime.rst:1668 ../Doc/library/datetime.rst:1671
msgid "00, 01, ..., 59"
msgstr "00, 01, ..., 59"

#: ../Doc/library/datetime.rst:1671
msgid "``%S``"
msgstr "``%S``"

#: ../Doc/library/datetime.rst:1671
msgid "Second as a zero-padded decimal number."
msgstr ""

#: ../Doc/library/datetime.rst:1674
msgid "``%f``"
msgstr "``%f``"

#: ../Doc/library/datetime.rst:1674
msgid "Microsecond as a decimal number, zero-padded on the left."
msgstr ""

#: ../Doc/library/datetime.rst:1674
msgid "000000, 000001, ..., 999999"
msgstr "000000, 000001, ..., 999999"

#: ../Doc/library/datetime.rst:1674
msgid "\\(4)"
msgstr "\\(4)"

#: ../Doc/library/datetime.rst:1678 ../Doc/library/datetime.rst:1758
msgid "``%z``"
msgstr "``%z``"

#: ../Doc/library/datetime.rst:1678
msgid ""
"UTC offset in the form +HHMM or -HHMM (empty string if the the object is "
"naive)."
msgstr ""

#: ../Doc/library/datetime.rst:1678
msgid "(empty), +0000, -0400, +1030"
msgstr ""

#: ../Doc/library/datetime.rst:1678
msgid "\\(5)"
msgstr "\\(5)"

#: ../Doc/library/datetime.rst:1682 ../Doc/library/datetime.rst:1763
msgid "``%Z``"
msgstr "``%Z``"

#: ../Doc/library/datetime.rst:1682
msgid "Time zone name (empty string if the object is naive)."
msgstr ""

#: ../Doc/library/datetime.rst:1682
msgid "(empty), UTC, EST, CST"
msgstr ""

#: ../Doc/library/datetime.rst:1685
msgid "``%j``"
msgstr "``%j``"

#: ../Doc/library/datetime.rst:1685
msgid "Day of the year as a zero-padded decimal number."
msgstr ""

#: ../Doc/library/datetime.rst:1685
msgid "001, 002, ..., 366"
msgstr "001, 002, ..., 366"

#: ../Doc/library/datetime.rst:1688
msgid "``%U``"
msgstr "``%U``"

#: ../Doc/library/datetime.rst:1688
msgid ""
"Week number of the year (Sunday as the first day of the week) as a zero "
"padded decimal number. All days in a new year preceding the first Sunday are "
"considered to be in week 0."
msgstr ""

#: ../Doc/library/datetime.rst:1688 ../Doc/library/datetime.rst:1696
msgid "00, 01, ..., 53"
msgstr "00, 01, ..., 53"

#: ../Doc/library/datetime.rst:1688 ../Doc/library/datetime.rst:1696
msgid "\\(6)"
msgstr "\\(6)"

#: ../Doc/library/datetime.rst:1696
msgid "``%W``"
msgstr "``%W``"

#: ../Doc/library/datetime.rst:1696
msgid ""
"Week number of the year (Monday as the first day of the week) as a decimal "
"number. All days in a new year preceding the first Monday are considered to "
"be in week 0."
msgstr ""

#: ../Doc/library/datetime.rst:1704
msgid "``%c``"
msgstr "``%c``"

#: ../Doc/library/datetime.rst:1704
msgid "Locale's appropriate date and time representation."
msgstr ""

#: ../Doc/library/datetime.rst:0
msgid "Tue Aug 16 21:30:00 1988 (en_US);"
msgstr ""

#: ../Doc/library/datetime.rst:0
msgid "Di 16 Aug 21:30:00 1988 (de_DE)"
msgstr ""

#: ../Doc/library/datetime.rst:1709
msgid "``%x``"
msgstr "``%x``"

#: ../Doc/library/datetime.rst:1709
msgid "Locale's appropriate date representation."
msgstr ""

#: ../Doc/library/datetime.rst:0
msgid "08/16/88 (None);"
msgstr ""

#: ../Doc/library/datetime.rst:0
msgid "08/16/1988 (en_US);"
msgstr ""

#: ../Doc/library/datetime.rst:0
msgid "16.08.1988 (de_DE)"
msgstr ""

#: ../Doc/library/datetime.rst:1713
msgid "``%X``"
msgstr "``%X``"

#: ../Doc/library/datetime.rst:1713
msgid "Locale's appropriate time representation."
msgstr ""

#: ../Doc/library/datetime.rst:0
msgid "21:30:00 (en_US);"
msgstr ""

#: ../Doc/library/datetime.rst:0
msgid "21:30:00 (de_DE)"
msgstr ""

#: ../Doc/library/datetime.rst:1716
msgid "``%%``"
msgstr "``%%``"

#: ../Doc/library/datetime.rst:1716
msgid "A literal ``'%'`` character."
msgstr ""

#: ../Doc/library/datetime.rst:1716
msgid "%"
msgstr "%"

#: ../Doc/library/datetime.rst:1722
msgid ""
"Because the format depends on the current locale, care should be taken when "
"making assumptions about the output value. Field orderings will vary (for "
"example, \"month/day/year\" versus \"day/month/year\"), and the output may "
"contain Unicode characters encoded using the locale's default encoding (for "
"example, if the current locale is ``ja_JP``, the default encoding could be "
"any one of ``eucJP``, ``SJIS``, or ``utf-8``; use :meth:`locale.getlocale` "
"to determine the current locale's encoding)."
msgstr ""

#: ../Doc/library/datetime.rst:1731
msgid ""
"When used with the :meth:`strptime` method, the ``%p`` directive only "
"affects the output hour field if the ``%I`` directive is used to parse the "
"hour."
msgstr ""

#: ../Doc/library/datetime.rst:1735
msgid ""
"Unlike the :mod:`time` module, the :mod:`datetime` module does not support "
"leap seconds."
msgstr ""

#: ../Doc/library/datetime.rst:1739
msgid ""
"``%f`` is an extension to the set of format characters in the C standard "
"(but implemented separately in datetime objects, and therefore always "
"available).  When used with the :meth:`strptime` method, the ``%f`` "
"directive accepts from one to six digits and zero pads on the right."
msgstr ""

#: ../Doc/library/datetime.rst:1747
msgid ""
"For a naive object, the ``%z`` and ``%Z`` format codes are replaced by empty "
"strings."
msgstr ""

#: ../Doc/library/datetime.rst:1750
msgid "For an aware object:"
msgstr ""

#: ../Doc/library/datetime.rst:1753
msgid ""
":meth:`utcoffset` is transformed into a 5-character string of the form +HHMM "
"or -HHMM, where HH is a 2-digit string giving the number of UTC offset "
"hours, and MM is a 2-digit string giving the number of UTC offset minutes.  "
"For example, if :meth:`utcoffset` returns ``timedelta(hours=-3, "
"minutes=-30)``, ``%z`` is replaced with the string ``'-0330'``."
msgstr ""

#: ../Doc/library/datetime.rst:1761
msgid ""
"If :meth:`tzname` returns ``None``, ``%Z`` is replaced by an empty string.  "
"Otherwise ``%Z`` is replaced by the returned value, which must be a string."
msgstr ""

#: ../Doc/library/datetime.rst:1766
msgid ""
"When used with the :meth:`strptime` method, ``%U`` and ``%W`` are only used "
"in calculations when the day of the week and the year are specified."
msgstr ""

#: ../Doc/library/datetime.rst:1771
msgid "Footnotes"
msgstr "Notes"

#: ../Doc/library/datetime.rst:1772
msgid "If, that is, we ignore the effects of Relativity"
msgstr "Si on ignore les effets de la Relativité"
