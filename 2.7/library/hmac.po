# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/hmac.rst:2
msgid ":mod:`hmac` --- Keyed-Hashing for Message Authentication"
msgstr ""

#: ../Doc/library/hmac.rst:12
msgid "**Source code:** :source:`Lib/hmac.py`"
msgstr "**Code source :** :source:`Lib/hmac.py`"

#: ../Doc/library/hmac.rst:16
msgid "This module implements the HMAC algorithm as described by :rfc:`2104`."
msgstr ""

#: ../Doc/library/hmac.rst:21
msgid ""
"Return a new hmac object.  If *msg* is present, the method call "
"``update(msg)`` is made. *digestmod* is the digest constructor or module for "
"the HMAC object to use. It defaults to  the :data:`hashlib.md5` constructor."
msgstr ""

#: ../Doc/library/hmac.rst:26
msgid "An HMAC object has the following methods:"
msgstr ""

#: ../Doc/library/hmac.rst:30
msgid ""
"Update the hmac object with the string *msg*.  Repeated calls are equivalent "
"to a single call with the concatenation of all the arguments: ``m.update(a); "
"m.update(b)`` is equivalent to ``m.update(a + b)``."
msgstr ""

#: ../Doc/library/hmac.rst:37
msgid ""
"Return the digest of the strings passed to the :meth:`update` method so far. "
"This string will be the same length as the *digest_size* of the digest given "
"to the constructor.  It may contain non-ASCII characters, including NUL "
"bytes."
msgstr ""

#: ../Doc/library/hmac.rst:43
msgid ""
"When comparing the output of :meth:`digest` to an externally-supplied digest "
"during a verification routine, it is recommended to use the :func:"
"`compare_digest` function instead of the ``==`` operator to reduce the "
"vulnerability to timing attacks."
msgstr ""

#: ../Doc/library/hmac.rst:51
msgid ""
"Like :meth:`digest` except the digest is returned as a string twice the "
"length containing only hexadecimal digits.  This may be used to exchange the "
"value safely in email or other non-binary environments."
msgstr ""

#: ../Doc/library/hmac.rst:57
msgid ""
"When comparing the output of :meth:`hexdigest` to an externally-supplied "
"digest during a verification routine, it is recommended to use the :func:"
"`compare_digest` function instead of the ``==`` operator to reduce the "
"vulnerability to timing attacks."
msgstr ""

#: ../Doc/library/hmac.rst:65
msgid ""
"Return a copy (\"clone\") of the hmac object.  This can be used to "
"efficiently compute the digests of strings that share a common initial "
"substring."
msgstr ""

#: ../Doc/library/hmac.rst:69
msgid "This module also provides the following helper function:"
msgstr ""

#: ../Doc/library/hmac.rst:73
msgid ""
"Return ``a == b``.  This function uses an approach designed to prevent "
"timing analysis by avoiding content-based short circuiting behaviour, making "
"it appropriate for cryptography.  *a* and *b* must both be of the same type: "
"either :class:`unicode` or a :term:`bytes-like object`."
msgstr ""

#: ../Doc/library/hmac.rst:80
msgid ""
"If *a* and *b* are of different lengths, or if an error occurs, a timing "
"attack could theoretically reveal information about the types and lengths of "
"*a* and *b*--but not their values."
msgstr ""

#: ../Doc/library/hmac.rst:90
msgid "Module :mod:`hashlib`"
msgstr ""

#: ../Doc/library/hmac.rst:91
msgid "The Python module providing secure hash functions."
msgstr ""
