# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/user.rst:3
msgid ":mod:`user` --- User-specific configuration hook"
msgstr ""

#: ../Doc/library/user.rst:9
msgid "The :mod:`user` module has been removed in Python 3."
msgstr ""

#: ../Doc/library/user.rst:16
msgid ""
"As a policy, Python doesn't run user-specified code on startup of Python "
"programs.  (Only interactive sessions execute the script specified in the :"
"envvar:`PYTHONSTARTUP` environment variable if it exists)."
msgstr ""

#: ../Doc/library/user.rst:20
msgid ""
"However, some programs or sites may find it convenient to allow users to "
"have a standard customization file, which gets run when a program requests "
"it.  This module implements such a mechanism.  A program that wishes to use "
"the mechanism must execute the statement ::"
msgstr ""

#: ../Doc/library/user.rst:29
msgid ""
"The :mod:`user` module looks for a file :file:`.pythonrc.py` in the user's "
"home directory and if it can be opened, executes it (using :func:`execfile`) "
"in its own (the module :mod:`user`'s) global namespace.  Errors during this "
"phase are not caught; that's up to the program that imports the :mod:`user` "
"module, if it wishes.  The home directory is assumed to be named by the :"
"envvar:`HOME` environment variable; if this is not set, the current "
"directory is used."
msgstr ""

#: ../Doc/library/user.rst:36
msgid ""
"The user's :file:`.pythonrc.py` could conceivably test for ``sys.version`` "
"if it wishes to do different things depending on the Python version."
msgstr ""

#: ../Doc/library/user.rst:39
msgid ""
"A warning to users: be very conservative in what you place in your :file:`."
"pythonrc.py` file.  Since you don't know which programs will use it, "
"changing the behavior of standard modules or functions is generally not a "
"good idea."
msgstr ""

#: ../Doc/library/user.rst:44
msgid ""
"A suggestion for programmers who wish to use this mechanism: a simple way to "
"let users specify options for your package is to have them define variables "
"in their :file:`.pythonrc.py` file that you test in your module.  For "
"example, a module :mod:`spam` that has a verbosity level can look for a "
"variable ``user.spam_verbose``, as follows::"
msgstr ""

#: ../Doc/library/user.rst:54
msgid ""
"(The three-argument form of :func:`getattr` is used in case the user has not "
"defined ``spam_verbose`` in their :file:`.pythonrc.py` file.)"
msgstr ""

#: ../Doc/library/user.rst:57
msgid ""
"Programs with extensive customization needs are better off reading a program-"
"specific customization file."
msgstr ""

#: ../Doc/library/user.rst:60
msgid ""
"Programs with security or privacy concerns should *not* import this module; "
"a user can easily break into a program by placing arbitrary code in the :"
"file:`.pythonrc.py` file."
msgstr ""

#: ../Doc/library/user.rst:64
msgid ""
"Modules for general use should *not* import this module; it may interfere "
"with the operation of the importing program."
msgstr ""

#: ../Doc/library/user.rst:70
msgid "Module :mod:`site`"
msgstr ""

#: ../Doc/library/user.rst:71
msgid "Site-wide customization mechanism."
msgstr ""
