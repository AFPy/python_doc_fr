# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/nntplib.rst:3
msgid ":mod:`nntplib` --- NNTP protocol client"
msgstr ""

#: ../Doc/library/nntplib.rst:13
msgid "**Source code:** :source:`Lib/nntplib.py`"
msgstr "**Code source :** :source:`Lib/nntplib.py`"

#: ../Doc/library/nntplib.rst:17
msgid ""
"This module defines the class :class:`NNTP` which implements the client side "
"of the NNTP protocol.  It can be used to implement a news reader or poster, "
"or automated news processors.  For more information on NNTP (Network News "
"Transfer Protocol), see Internet :rfc:`977`."
msgstr ""

#: ../Doc/library/nntplib.rst:22
msgid ""
"Here are two small examples of how it can be used.  To list some statistics "
"about a newsgroup and print the subjects of the last 10 articles::"
msgstr ""

#: ../Doc/library/nntplib.rst:45
msgid ""
"To post an article from a file (this assumes that the article has valid "
"headers, and that you have right to post on the particular newsgroup)::"
msgstr ""

#: ../Doc/library/nntplib.rst:55
msgid "The module itself defines the following items:"
msgstr ""

#: ../Doc/library/nntplib.rst:60
msgid ""
"Return a new instance of the :class:`NNTP` class, representing a connection "
"to the NNTP server running on host *host*, listening at port *port*.  The "
"default *port* is 119.  If the optional *user* and *password* are provided, "
"or if suitable credentials are present in :file:`/.netrc` and the optional "
"flag *usenetrc* is true (the default), the ``AUTHINFO USER`` and ``AUTHINFO "
"PASS`` commands are used to identify and authenticate the user to the "
"server. If the optional flag *readermode* is true, then a ``mode reader`` "
"command is sent before authentication is performed.  Reader mode is "
"sometimes necessary if you are connecting to an NNTP server on the local "
"machine and intend to call reader-specific commands, such as ``group``.  If "
"you get unexpected :exc:`NNTPPermanentError`\\ s, you might need to set "
"*readermode*. *readermode* defaults to ``None``. *usenetrc* defaults to "
"``True``."
msgstr ""

#: ../Doc/library/nntplib.rst:73
msgid "*usenetrc* argument added."
msgstr ""

#: ../Doc/library/nntplib.rst:79
msgid ""
"Derived from the standard exception :exc:`Exception`, this is the base class "
"for all exceptions raised by the :mod:`nntplib` module."
msgstr ""

#: ../Doc/library/nntplib.rst:85
msgid ""
"Exception raised when an unexpected reply is received from the server.  For "
"backwards compatibility, the exception ``error_reply`` is equivalent to this "
"class."
msgstr ""

#: ../Doc/library/nntplib.rst:92
msgid ""
"Exception raised when an error code in the range 400--499 is received.  For "
"backwards compatibility, the exception ``error_temp`` is equivalent to this "
"class."
msgstr ""

#: ../Doc/library/nntplib.rst:99
msgid ""
"Exception raised when an error code in the range 500--599 is received.  For "
"backwards compatibility, the exception ``error_perm`` is equivalent to this "
"class."
msgstr ""

#: ../Doc/library/nntplib.rst:106
msgid ""
"Exception raised when a reply is received from the server that does not "
"begin with a digit in the range 1--5.  For backwards compatibility, the "
"exception ``error_proto`` is equivalent to this class."
msgstr ""

#: ../Doc/library/nntplib.rst:113
msgid ""
"Exception raised when there is some error in the response data.  For "
"backwards compatibility, the exception ``error_data`` is equivalent to this "
"class."
msgstr ""

#: ../Doc/library/nntplib.rst:120
msgid "NNTP Objects"
msgstr ""

#: ../Doc/library/nntplib.rst:122
msgid ""
"NNTP instances have the following methods.  The *response* that is returned "
"as the first item in the return tuple of almost all methods is the server's "
"response: a string beginning with a three-digit code. If the server's "
"response indicates an error, the method raises one of the above exceptions."
msgstr ""

#: ../Doc/library/nntplib.rst:130
msgid ""
"Return the welcome message sent by the server in reply to the initial "
"connection.  (This message sometimes contains disclaimers or help "
"information that may be relevant to the user.)"
msgstr ""

#: ../Doc/library/nntplib.rst:137
msgid ""
"Set the instance's debugging level.  This controls the amount of debugging "
"output printed.  The default, ``0``, produces no debugging output.  A value "
"of ``1`` produces a moderate amount of debugging output, generally a single "
"line per request or response.  A value of ``2`` or higher produces the "
"maximum amount of debugging output, logging each line sent and received on "
"the connection (including message text)."
msgstr ""

#: ../Doc/library/nntplib.rst:147
msgid ""
"Send a ``NEWGROUPS`` command.  The *date* argument should be a string of the "
"form ``'yymmdd'`` indicating the date, and *time* should be a string of the "
"form ``'hhmmss'`` indicating the time.  Return a pair ``(response, groups)`` "
"where *groups* is a list of group names that are new since the given date "
"and time. If the *file* parameter is supplied, then the output of the  "
"``NEWGROUPS`` command is stored in a file.  If *file* is a string,  then the "
"method will open a file object with that name, write to it  then close it.  "
"If *file* is a file object, then it will start calling :meth:`write` on it "
"to store the lines of the command output. If *file* is supplied, then the "
"returned *list* is an empty list."
msgstr ""

#: ../Doc/library/nntplib.rst:160
msgid ""
"Send a ``NEWNEWS`` command.  Here, *group* is a group name or ``'*'``, and "
"*date* and *time* have the same meaning as for :meth:`newgroups`.  Return a "
"pair ``(response, articles)`` where *articles* is a list of message ids. If "
"the *file* parameter is supplied, then the output of the  ``NEWNEWS`` "
"command is stored in a file.  If *file* is a string,  then the method will "
"open a file object with that name, write to it  then close it.  If *file* is "
"a file object, then it will start calling :meth:`write` on it to store the "
"lines of the command output. If *file* is supplied, then the returned *list* "
"is an empty list."
msgstr ""

#: ../Doc/library/nntplib.rst:172
msgid ""
"Send a ``LIST`` command.  Return a pair ``(response, list)`` where *list* is "
"a list of tuples.  Each tuple has the form ``(group, last, first, flag)``, "
"where *group* is a group name, *last* and *first* are the last and first "
"article numbers (as strings), and *flag* is ``'y'`` if posting is allowed, "
"``'n'`` if not, and ``'m'`` if the newsgroup is moderated.  (Note the "
"ordering: *last*, *first*.) If the *file* parameter is supplied, then the "
"output of the  ``LIST`` command is stored in a file.  If *file* is a "
"string,  then the method will open a file object with that name, write to "
"it  then close it.  If *file* is a file object, then it will start calling :"
"meth:`write` on it to store the lines of the command output. If *file* is "
"supplied, then the returned *list* is an empty list."
msgstr ""

#: ../Doc/library/nntplib.rst:187
msgid ""
"Send a ``LIST NEWSGROUPS`` command, where *grouppattern* is a wildmat string "
"as specified in RFC2980 (it's essentially the same as DOS or UNIX shell "
"wildcard strings).  Return a pair ``(response, list)``, where *list* is a "
"list of tuples containing ``(name, title)``."
msgstr ""

#: ../Doc/library/nntplib.rst:197
msgid ""
"Get a description for a single group *group*.  If more than one group "
"matches (if 'group' is a real wildmat string), return the first match.   If "
"no group matches, return an empty string."
msgstr ""

#: ../Doc/library/nntplib.rst:201
msgid ""
"This elides the response code from the server.  If the response code is "
"needed, use :meth:`descriptions`."
msgstr ""

#: ../Doc/library/nntplib.rst:209
msgid ""
"Send a ``GROUP`` command, where *name* is the group name. Return a tuple "
"``(response, count, first, last, name)`` where *count* is the (estimated) "
"number of articles in the group, *first* is the first article number in the "
"group, *last* is the last article number in the group, and *name* is the "
"group name. The numbers are returned as strings."
msgstr ""

#: ../Doc/library/nntplib.rst:218
msgid ""
"Send a ``HELP`` command.  Return a pair ``(response, list)`` where *list* is "
"a list of help strings. If the *file* parameter is supplied, then the output "
"of the  ``HELP`` command is stored in a file.  If *file* is a string,  then "
"the method will open a file object with that name, write to it  then close "
"it.  If *file* is a file object, then it will start calling :meth:`write` on "
"it to store the lines of the command output. If *file* is supplied, then the "
"returned *list* is an empty list."
msgstr ""

#: ../Doc/library/nntplib.rst:229
msgid ""
"Send a ``STAT`` command, where *id* is the message id (enclosed in ``'<'`` "
"and ``'>'``) or an article number (as a string). Return a triple "
"``(response, number, id)`` where *number* is the article number (as a "
"string) and *id* is the message id  (enclosed in ``'<'`` and ``'>'``)."
msgstr ""

#: ../Doc/library/nntplib.rst:237
msgid "Send a ``NEXT`` command.  Return as for :meth:`.stat`."
msgstr ""

#: ../Doc/library/nntplib.rst:242
msgid "Send a ``LAST`` command.  Return as for :meth:`.stat`."
msgstr ""

#: ../Doc/library/nntplib.rst:247
msgid ""
"Send a ``HEAD`` command, where *id* has the same meaning as for :meth:`."
"stat`. Return a tuple ``(response, number, id, list)`` where the first three "
"are the same as for :meth:`.stat`, and *list* is a list of the article's "
"headers (an uninterpreted list of lines, without trailing newlines)."
msgstr ""

#: ../Doc/library/nntplib.rst:255
msgid ""
"Send a ``BODY`` command, where *id* has the same meaning as for :meth:`."
"stat`. If the *file* parameter is supplied, then the body is stored in a "
"file.  If *file* is a string, then the method will open a file object with "
"that name, write to it then close it. If *file* is a file object, then it "
"will start calling :meth:`write` on it to store the lines of the body. "
"Return as for :meth:`head`.  If *file* is supplied, then the returned *list* "
"is an empty list."
msgstr ""

#: ../Doc/library/nntplib.rst:265
msgid ""
"Send an ``ARTICLE`` command, where *id* has the same meaning as for :meth:`."
"stat`.  Return as for :meth:`head`."
msgstr ""

#: ../Doc/library/nntplib.rst:271
msgid "Send a ``SLAVE`` command.  Return the server's *response*."
msgstr ""

#: ../Doc/library/nntplib.rst:276
msgid ""
"Send an ``XHDR`` command.  This command is not defined in the RFC but is a "
"common extension.  The *header* argument is a header keyword, e.g. "
"``'subject'``.  The *string* argument should have the form ``'first-last'`` "
"where *first* and *last* are the first and last article numbers to search. "
"Return a pair ``(response, list)``, where *list* is a list of pairs ``(id, "
"text)``, where *id* is an article number (as a string) and *text* is the "
"text of the requested header for that article. If the *file* parameter is "
"supplied, then the output of the  ``XHDR`` command is stored in a file.  If "
"*file* is a string, then the method will open a file object with that name, "
"write to it  then close it.  If *file* is a file object, then it will start "
"calling :meth:`write` on it to store the lines of the command output. If "
"*file* is supplied, then the returned *list* is an empty list."
msgstr ""

#: ../Doc/library/nntplib.rst:292
msgid ""
"Post an article using the ``POST`` command.  The *file* argument is an open "
"file object which is read until EOF using its :meth:`~file.readline` "
"method.  It should be a well-formed news article, including the required "
"headers.  The :meth:`post` method automatically escapes lines beginning with "
"``.``."
msgstr ""

#: ../Doc/library/nntplib.rst:300
msgid ""
"Send an ``IHAVE`` command. *id* is a message id (enclosed in  ``'<'`` and "
"``'>'``). If the response is not an error, treat *file* exactly as for the :"
"meth:`post` method."
msgstr ""

#: ../Doc/library/nntplib.rst:307
msgid ""
"Return a triple ``(response, date, time)``, containing the current date and "
"time in a form suitable for the :meth:`newnews` and :meth:`newgroups` "
"methods. This is an optional NNTP extension, and may not be supported by all "
"servers."
msgstr ""

#: ../Doc/library/nntplib.rst:314
msgid ""
"Process an ``XGTITLE`` command, returning a pair ``(response, list)``, where "
"*list* is a list of tuples containing ``(name, title)``. If the *file* "
"parameter is supplied, then the output of the  ``XGTITLE`` command is stored "
"in a file. If *file* is a string,  then the method will open a file object "
"with that name, write to it  then close it.  If *file* is a file object, "
"then it will start calling :meth:`write` on it to store the lines of the "
"command output. If *file* is supplied, then the returned *list* is an empty "
"list. This is an optional NNTP extension, and may not be supported by all "
"servers."
msgstr ""

#: ../Doc/library/nntplib.rst:323
msgid ""
"RFC2980 says \"It is suggested that this extension be deprecated\".  Use :"
"meth:`descriptions` or :meth:`description` instead."
msgstr ""

#: ../Doc/library/nntplib.rst:329
msgid ""
"Return a pair ``(resp, list)``.  *list* is a list of tuples, one for each "
"article in the range delimited by the *start* and *end* article numbers.  "
"Each tuple is of the form ``(article number, subject, poster, date, id, "
"references, size, lines)``. If the *file* parameter is supplied, then the "
"output of the ``XOVER`` command is stored in a file.  If *file* is a "
"string,  then the method will open a file object with that name, write to "
"it  then close it.  If *file* is a file object, then it will start calling :"
"meth:`write` on it to store the lines of the command output. If *file* is "
"supplied, then the returned *list* is an empty list. This is an optional "
"NNTP extension, and may not be supported by all servers."
msgstr ""

#: ../Doc/library/nntplib.rst:343
msgid ""
"Return a pair ``(resp, path)``, where *path* is the directory path to the "
"article with message ID *id*.  This is an optional NNTP extension, and may "
"not be supported by all servers."
msgstr ""

#: ../Doc/library/nntplib.rst:350
msgid ""
"Send a ``QUIT`` command and close the connection.  Once this method has been "
"called, no other methods of the NNTP object should be called."
msgstr ""
