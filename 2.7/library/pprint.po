# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/pprint.rst:2
msgid ":mod:`pprint` --- Data pretty printer"
msgstr ""

#: ../Doc/library/pprint.rst:9
msgid "**Source code:** :source:`Lib/pprint.py`"
msgstr "**Code source :** :source:`Lib/pprint.py`"

#: ../Doc/library/pprint.rst:13
msgid ""
"The :mod:`pprint` module provides a capability to \"pretty-print\" arbitrary "
"Python data structures in a form which can be used as input to the "
"interpreter. If the formatted structures include objects which are not "
"fundamental Python types, the representation may not be loadable.  This may "
"be the case if objects such as files, sockets, classes, or instances are "
"included, as well as many other built-in objects which are not representable "
"as Python constants."
msgstr ""

#: ../Doc/library/pprint.rst:20
msgid ""
"The formatted representation keeps objects on a single line if it can, and "
"breaks them onto multiple lines if they don't fit within the allowed width. "
"Construct :class:`PrettyPrinter` objects explicitly if you need to adjust "
"the width constraint."
msgstr ""

#: ../Doc/library/pprint.rst:25
msgid ""
"Dictionaries are sorted by key before the display is computed; before 2.5, a "
"dictionary was sorted only if its display required more than one line, "
"although that wasn't documented."
msgstr ""

#: ../Doc/library/pprint.rst:30
msgid "Added support for :class:`set` and :class:`frozenset`."
msgstr ""

#: ../Doc/library/pprint.rst:34
msgid "The :mod:`pprint` module defines one class:"
msgstr ""

#: ../Doc/library/pprint.rst:41
msgid ""
"Construct a :class:`PrettyPrinter` instance.  This constructor understands "
"several keyword parameters.  An output stream may be set using the *stream* "
"keyword; the only method used on the stream object is the file protocol's :"
"meth:`write` method.  If not specified, the :class:`PrettyPrinter` adopts "
"``sys.stdout``.  Three additional parameters may be used to control the "
"formatted representation.  The keywords are *indent*, *depth*, and *width*.  "
"The amount of indentation added for each recursive level is specified by "
"*indent*; the default is one.  Other values can cause output to look a "
"little odd, but can make nesting easier to spot.  The number of levels which "
"may be printed is controlled by *depth*; if the data structure being printed "
"is too deep, the next contained level is replaced by ``...``.  By default, "
"there is no constraint on the depth of the objects being formatted.  The "
"desired output width is constrained using the *width* parameter; the default "
"is 80 characters.  If a structure cannot be formatted within the constrained "
"width, a best effort will be made."
msgstr ""

#: ../Doc/library/pprint.rst:74
msgid "The :class:`PrettyPrinter` class supports several derivative functions:"
msgstr ""

#: ../Doc/library/pprint.rst:78
msgid ""
"Return the formatted representation of *object* as a string.  *indent*, "
"*width* and *depth* will be passed to the :class:`PrettyPrinter` constructor "
"as formatting parameters."
msgstr ""

#: ../Doc/library/pprint.rst:82 ../Doc/library/pprint.rst:105
msgid "The parameters *indent*, *width* and *depth* were added."
msgstr ""

#: ../Doc/library/pprint.rst:88
msgid ""
"Prints the formatted representation of *object* on *stream*, followed by a "
"newline.  If *stream* is ``None``, ``sys.stdout`` is used.  This may be used "
"in the interactive interpreter instead of a :keyword:`print` statement for "
"inspecting values.    *indent*, *width* and *depth* will be passed to the :"
"class:`PrettyPrinter` constructor as formatting parameters."
msgstr ""

#: ../Doc/library/pprint.rst:113
msgid ""
"Determine if the formatted representation of *object* is \"readable,\" or "
"can be used to reconstruct the value using :func:`eval`.  This always "
"returns ``False`` for recursive objects."
msgstr ""

#: ../Doc/library/pprint.rst:123
msgid "Determine if *object* requires a recursive representation."
msgstr ""

#: ../Doc/library/pprint.rst:126
msgid "One more support function is also defined:"
msgstr ""

#: ../Doc/library/pprint.rst:130
msgid ""
"Return a string representation of *object*, protected against recursive data "
"structures.  If the representation of *object* exposes a recursive entry, "
"the recursive reference will be represented as ``<Recursion on typename with "
"id=number>``.  The representation is not otherwise formatted."
msgstr ""

#: ../Doc/library/pprint.rst:142
msgid "PrettyPrinter Objects"
msgstr ""

#: ../Doc/library/pprint.rst:144
msgid ":class:`PrettyPrinter` instances have the following methods:"
msgstr ""

#: ../Doc/library/pprint.rst:149
msgid ""
"Return the formatted representation of *object*.  This takes into account "
"the options passed to the :class:`PrettyPrinter` constructor."
msgstr ""

#: ../Doc/library/pprint.rst:155
msgid ""
"Print the formatted representation of *object* on the configured stream, "
"followed by a newline."
msgstr ""

#: ../Doc/library/pprint.rst:158
msgid ""
"The following methods provide the implementations for the corresponding "
"functions of the same names.  Using these methods on an instance is slightly "
"more efficient since new :class:`PrettyPrinter` objects don't need to be "
"created."
msgstr ""

#: ../Doc/library/pprint.rst:168
msgid ""
"Determine if the formatted representation of the object is \"readable,\" or "
"can be used to reconstruct the value using :func:`eval`.  Note that this "
"returns ``False`` for recursive objects.  If the *depth* parameter of the :"
"class:`PrettyPrinter` is set and the object is deeper than allowed, this "
"returns ``False``."
msgstr ""

#: ../Doc/library/pprint.rst:177
msgid "Determine if the object requires a recursive representation."
msgstr ""

#: ../Doc/library/pprint.rst:179
msgid ""
"This method is provided as a hook to allow subclasses to modify the way "
"objects are converted to strings.  The default implementation uses the "
"internals of the :func:`saferepr` implementation."
msgstr ""

#: ../Doc/library/pprint.rst:186
msgid ""
"Returns three values: the formatted version of *object* as a string, a flag "
"indicating whether the result is readable, and a flag indicating whether "
"recursion was detected.  The first argument is the object to be presented.  "
"The second is a dictionary which contains the :func:`id` of objects that are "
"part of the current presentation context (direct and indirect containers for "
"*object* that are affecting the presentation) as the keys; if an object "
"needs to be presented which is already represented in *context*, the third "
"return value should be ``True``.  Recursive calls to the :meth:`.format` "
"method should add additional entries for containers to this dictionary.  The "
"third argument, *maxlevels*, gives the requested limit to recursion; this "
"will be ``0`` if there is no requested limit.  This argument should be "
"passed unmodified to recursive calls. The fourth argument, *level*, gives "
"the current level; recursive calls should be passed a value less than that "
"of the current call."
msgstr ""

#: ../Doc/library/pprint.rst:205
msgid "pprint Example"
msgstr ""

#: ../Doc/library/pprint.rst:207
msgid ""
"This example demonstrates several uses of the :func:`pprint` function and "
"its parameters."
msgstr ""
