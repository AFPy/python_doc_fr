# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/popen2.rst:3
msgid ":mod:`popen2` --- Subprocesses with accessible I/O streams"
msgstr ""

#: ../Doc/library/popen2.rst:11
msgid ""
"This module is obsolete.  Use the :mod:`subprocess` module.  Check "
"especially the :ref:`subprocess-replacements` section."
msgstr ""

#: ../Doc/library/popen2.rst:15
msgid ""
"This module allows you to spawn processes and connect to their input/output/"
"error pipes and obtain their return codes under Unix and Windows."
msgstr ""

#: ../Doc/library/popen2.rst:18
msgid ""
"The :mod:`subprocess` module provides more powerful facilities for spawning "
"new processes and retrieving their results.  Using the :mod:`subprocess` "
"module is preferable to using the :mod:`popen2` module."
msgstr ""

#: ../Doc/library/popen2.rst:22
msgid ""
"The primary interface offered by this module is a trio of factory functions. "
"For each of these, if *bufsize* is specified,  it specifies the buffer size "
"for the I/O pipes.  *mode*, if provided, should be the string ``'b'`` or "
"``'t'``; on Windows this is needed to determine whether the file objects "
"should be opened in binary or text mode.  The default value for *mode* is "
"``'t'``."
msgstr ""

#: ../Doc/library/popen2.rst:28
msgid ""
"On Unix, *cmd* may be a sequence, in which case arguments will be passed "
"directly to the program without shell intervention (as with :func:`os."
"spawnv`). If *cmd* is a string it will be passed to the shell (as with :func:"
"`os.system`)."
msgstr ""

#: ../Doc/library/popen2.rst:32
msgid ""
"The only way to retrieve the return codes for the child processes is by "
"using the :meth:`poll` or :meth:`wait` methods on the :class:`Popen3` and :"
"class:`Popen4` classes; these are only available on Unix.  This information "
"is not available when using the :func:`popen2`, :func:`popen3`, and :func:"
"`popen4` functions, or the equivalent functions in the :mod:`os` module. "
"(Note that the tuples returned by the :mod:`os` module's functions are in a "
"different order from the ones returned by the :mod:`popen2` module.)"
msgstr ""

#: ../Doc/library/popen2.rst:43
msgid ""
"Executes *cmd* as a sub-process.  Returns the file objects ``(child_stdout, "
"child_stdin)``."
msgstr ""

#: ../Doc/library/popen2.rst:49
msgid ""
"Executes *cmd* as a sub-process.  Returns the file objects ``(child_stdout, "
"child_stdin, child_stderr)``."
msgstr ""

#: ../Doc/library/popen2.rst:55
msgid ""
"Executes *cmd* as a sub-process.  Returns the file objects "
"``(child_stdout_and_stderr, child_stdin)``."
msgstr ""

#: ../Doc/library/popen2.rst:60
msgid ""
"On Unix, a class defining the objects returned by the factory functions is "
"also available.  These are not used for the Windows implementation, and are "
"not available on that platform."
msgstr ""

#: ../Doc/library/popen2.rst:67
msgid ""
"This class represents a child process.  Normally, :class:`Popen3` instances "
"are created using the :func:`popen2` and :func:`popen3` factory functions "
"described above."
msgstr ""

#: ../Doc/library/popen2.rst:71
msgid ""
"If not using one of the helper functions to create :class:`Popen3` objects, "
"the parameter *cmd* is the shell command to execute in a sub-process.  The "
"*capturestderr* flag, if true, specifies that the object should capture "
"standard error output of the child process. The default is false.  If the "
"*bufsize* parameter is specified, it specifies the size of the I/O buffers "
"to/from the child process."
msgstr ""

#: ../Doc/library/popen2.rst:81
msgid ""
"Similar to :class:`Popen3`, but always captures standard error into the same "
"file object as standard output.  These are typically created using :func:"
"`popen4`."
msgstr ""

#: ../Doc/library/popen2.rst:91
msgid "Popen3 and Popen4 Objects"
msgstr ""

#: ../Doc/library/popen2.rst:93
msgid ""
"Instances of the :class:`Popen3` and :class:`Popen4` classes have the "
"following methods:"
msgstr ""

#: ../Doc/library/popen2.rst:99
msgid ""
"Returns ``-1`` if child process hasn't completed yet, or its status code "
"(see :meth:`wait`) otherwise."
msgstr ""

#: ../Doc/library/popen2.rst:105
msgid ""
"Waits for and returns the status code of the child process.  The status code "
"encodes both the return code of the process and information about whether it "
"exited using the :c:func:`exit` system call or died due to a signal.  "
"Functions to help interpret the status code are defined in the :mod:`os` "
"module; see section :ref:`os-process` for the :func:`W\\*` family of "
"functions."
msgstr ""

#: ../Doc/library/popen2.rst:111
msgid "The following attributes are also available:"
msgstr ""

#: ../Doc/library/popen2.rst:116
msgid ""
"A file object that provides output from the child process.  For :class:"
"`Popen4` instances, this will provide both the standard output and standard "
"error streams."
msgstr ""

#: ../Doc/library/popen2.rst:123
msgid "A file object that provides input to the child process."
msgstr ""

#: ../Doc/library/popen2.rst:128
msgid ""
"A file object that provides error output from the child process, if "
"*capturestderr* was true for the constructor, otherwise ``None``.  This will "
"always be ``None`` for :class:`Popen4` instances."
msgstr ""

#: ../Doc/library/popen2.rst:135
msgid "The process ID of the child process."
msgstr ""

#: ../Doc/library/popen2.rst:141
msgid "Flow Control Issues"
msgstr ""

#: ../Doc/library/popen2.rst:143
msgid ""
"Any time you are working with any form of inter-process communication, "
"control flow needs to be carefully thought out.  This remains the case with "
"the file objects provided by this module (or the :mod:`os` module "
"equivalents)."
msgstr ""

#: ../Doc/library/popen2.rst:147
msgid ""
"When reading output from a child process that writes a lot of data to "
"standard error while the parent is reading from the child's standard output, "
"a deadlock can occur.  A similar situation can occur with other combinations "
"of reads and writes.  The essential factors are that more than :const:"
"`_PC_PIPE_BUF` bytes are being written by one process in a blocking fashion, "
"while the other process is reading from the first process, also in a "
"blocking fashion."
msgstr ""

#: ../Doc/library/popen2.rst:158
msgid "There are several ways to deal with this situation."
msgstr ""

#: ../Doc/library/popen2.rst:160
msgid ""
"The simplest application change, in many cases, will be to follow this model "
"in the parent process::"
msgstr ""

#: ../Doc/library/popen2.rst:172
msgid "with code like this in the child::"
msgstr ""

#: ../Doc/library/popen2.rst:184
msgid ""
"In particular, note that ``sys.stderr`` must be closed after writing all "
"data, or :meth:`readlines` won't return.  Also note that :func:`os.close` "
"must be used, as ``sys.stderr.close()`` won't close ``stderr`` (otherwise "
"assigning to ``sys.stderr`` will silently close it, so no further errors can "
"be printed)."
msgstr ""

#: ../Doc/library/popen2.rst:189
msgid ""
"Applications which need to support a more general approach should integrate "
"I/O over pipes with their :func:`select` loops, or use separate threads to "
"read each of the individual files provided by whichever :func:`popen\\*` "
"function or :class:`Popen\\*` class was used."
msgstr ""

#: ../Doc/library/popen2.rst:197
msgid "Module :mod:`subprocess`"
msgstr ""

#: ../Doc/library/popen2.rst:198
msgid "Module for spawning and managing subprocesses."
msgstr ""
