# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/platform.rst:2
msgid ":mod:`platform` ---  Access to underlying platform's identifying data"
msgstr ""

#: ../Doc/library/platform.rst:12
msgid "**Source code:** :source:`Lib/platform.py`"
msgstr "**Code source :** :source:`Lib/platform.py`"

#: ../Doc/library/platform.rst:18
msgid ""
"Specific platforms listed alphabetically, with Linux included in the Unix "
"section."
msgstr ""

#: ../Doc/library/platform.rst:23
msgid "Cross Platform"
msgstr ""

#: ../Doc/library/platform.rst:28
msgid ""
"Queries the given executable (defaults to the Python interpreter binary) for "
"various architecture information."
msgstr ""

#: ../Doc/library/platform.rst:31
msgid ""
"Returns a tuple ``(bits, linkage)`` which contain information about the bit "
"architecture and the linkage format used for the executable. Both values are "
"returned as strings."
msgstr ""

#: ../Doc/library/platform.rst:35
msgid ""
"Values that cannot be determined are returned as given by the parameter "
"presets. If bits is given as ``''``, the :c:func:`sizeof(pointer)` (or :c:"
"func:`sizeof(long)` on Python version < 1.5.2) is used as indicator for the "
"supported pointer size."
msgstr ""

#: ../Doc/library/platform.rst:40
msgid ""
"The function relies on the system's :file:`file` command to do the actual "
"work. This is available on most if not all Unix  platforms and some non-Unix "
"platforms and then only if the executable points to the Python interpreter.  "
"Reasonable defaults are used when the above needs are not met."
msgstr ""

#: ../Doc/library/platform.rst:47
msgid ""
"On Mac OS X (and perhaps other platforms), executable files may be universal "
"files containing multiple architectures."
msgstr ""

#: ../Doc/library/platform.rst:50
msgid ""
"To get at the \"64-bitness\" of the current interpreter, it is more reliable "
"to query the :attr:`sys.maxsize` attribute::"
msgstr ""

#: ../Doc/library/platform.rst:58
msgid ""
"Returns the machine type, e.g. ``'i386'``. An empty string is returned if "
"the value cannot be determined."
msgstr ""

#: ../Doc/library/platform.rst:64
msgid ""
"Returns the computer's network name (may not be fully qualified!). An empty "
"string is returned if the value cannot be determined."
msgstr ""

#: ../Doc/library/platform.rst:70
msgid ""
"Returns a single string identifying the underlying platform with as much "
"useful information as possible."
msgstr ""

#: ../Doc/library/platform.rst:73
msgid ""
"The output is intended to be *human readable* rather than machine parseable. "
"It may look different on different platforms and this is intended."
msgstr ""

#: ../Doc/library/platform.rst:76
msgid ""
"If *aliased* is true, the function will use aliases for various platforms "
"that report system names which differ from their common names, for example "
"SunOS will be reported as Solaris.  The :func:`system_alias` function is "
"used to implement this."
msgstr ""

#: ../Doc/library/platform.rst:81
msgid ""
"Setting *terse* to true causes the function to return only the absolute "
"minimum information needed to identify the platform."
msgstr ""

#: ../Doc/library/platform.rst:87
msgid "Returns the (real) processor name, e.g. ``'amdk6'``."
msgstr ""

#: ../Doc/library/platform.rst:89
msgid ""
"An empty string is returned if the value cannot be determined. Note that "
"many platforms do not provide this information or simply return the same "
"value as for :func:`machine`.  NetBSD does this."
msgstr ""

#: ../Doc/library/platform.rst:96
msgid ""
"Returns a tuple ``(buildno, builddate)`` stating the Python build number and "
"date as strings."
msgstr ""

#: ../Doc/library/platform.rst:102
msgid "Returns a string identifying the compiler used for compiling Python."
msgstr ""

#: ../Doc/library/platform.rst:107
msgid "Returns a string identifying the Python implementation SCM branch."
msgstr ""

#: ../Doc/library/platform.rst:114
msgid ""
"Returns a string identifying the Python implementation. Possible return "
"values are: 'CPython', 'IronPython', 'Jython', 'PyPy'."
msgstr ""

#: ../Doc/library/platform.rst:122
msgid "Returns a string identifying the Python implementation SCM revision."
msgstr ""

#: ../Doc/library/platform.rst:129
msgid "Returns the Python version as string ``'major.minor.patchlevel'``."
msgstr ""

#: ../Doc/library/platform.rst:131
msgid ""
"Note that unlike the Python ``sys.version``, the returned value will always "
"include the patchlevel (it defaults to 0)."
msgstr ""

#: ../Doc/library/platform.rst:137
msgid ""
"Returns the Python version as tuple ``(major, minor, patchlevel)`` of "
"strings."
msgstr ""

#: ../Doc/library/platform.rst:139
msgid ""
"Note that unlike the Python ``sys.version``, the returned value will always "
"include the patchlevel (it defaults to ``'0'``)."
msgstr ""

#: ../Doc/library/platform.rst:145
msgid ""
"Returns the system's release, e.g. ``'2.2.0'`` or ``'NT'`` An empty string "
"is returned if the value cannot be determined."
msgstr ""

#: ../Doc/library/platform.rst:151
msgid ""
"Returns the system/OS name, e.g. ``'Linux'``, ``'Windows'``, or ``'Java'``. "
"An empty string is returned if the value cannot be determined."
msgstr ""

#: ../Doc/library/platform.rst:157
msgid ""
"Returns ``(system, release, version)`` aliased to common marketing names "
"used for some systems.  It also does some reordering of the information in "
"some cases where it would otherwise cause confusion."
msgstr ""

#: ../Doc/library/platform.rst:164
msgid ""
"Returns the system's release version, e.g. ``'#3 on degas'``. An empty "
"string is returned if the value cannot be determined."
msgstr ""

#: ../Doc/library/platform.rst:170
msgid ""
"Fairly portable uname interface. Returns a tuple of strings ``(system, node, "
"release, version, machine, processor)`` identifying the underlying platform."
msgstr ""

#: ../Doc/library/platform.rst:173
msgid ""
"Note that unlike the :func:`os.uname` function this also returns possible "
"processor information as additional tuple entry."
msgstr ""

#: ../Doc/library/platform.rst:176
msgid "Entries which cannot be determined are set to ``''``."
msgstr ""

#: ../Doc/library/platform.rst:180
msgid "Java Platform"
msgstr ""

#: ../Doc/library/platform.rst:185
msgid "Version interface for Jython."
msgstr ""

#: ../Doc/library/platform.rst:187
msgid ""
"Returns a tuple ``(release, vendor, vminfo, osinfo)`` with *vminfo* being a "
"tuple ``(vm_name, vm_release, vm_vendor)`` and *osinfo* being a tuple "
"``(os_name, os_version, os_arch)``. Values which cannot be determined are "
"set to the defaults given as parameters (which all default to ``''``)."
msgstr ""

#: ../Doc/library/platform.rst:194
msgid "Windows Platform"
msgstr ""

#: ../Doc/library/platform.rst:199
msgid ""
"Get additional version information from the Windows Registry and return a "
"tuple ``(release, version, csd, ptype)`` referring to OS release, version "
"number, CSD level (service pack) and OS type (multi/single processor)."
msgstr ""

#: ../Doc/library/platform.rst:203
msgid ""
"As a hint: *ptype* is ``'Uniprocessor Free'`` on single processor NT "
"machines and ``'Multiprocessor Free'`` on multi processor machines. The "
"*'Free'* refers to the OS version being free of debugging code. It could "
"also state *'Checked'* which means the OS version uses debugging code, i.e. "
"code that checks arguments, ranges, etc."
msgstr ""

#: ../Doc/library/platform.rst:211
msgid ""
"This function works best with Mark Hammond's :mod:`win32all` package "
"installed, but also on Python 2.3 and later (support for this was added in "
"Python 2.6). It obviously only runs on Win32 compatible platforms."
msgstr ""

#: ../Doc/library/platform.rst:218
msgid "Win95/98 specific"
msgstr ""

#: ../Doc/library/platform.rst:222
msgid ""
"Portable :func:`popen` interface.  Find a working popen implementation "
"preferring :func:`win32pipe.popen`.  On Windows NT, :func:`win32pipe.popen` "
"should work; on Windows 9x it hangs due to bugs in the MS C library."
msgstr ""

#: ../Doc/library/platform.rst:228
msgid "Mac OS Platform"
msgstr ""

#: ../Doc/library/platform.rst:233
msgid ""
"Get Mac OS version information and return it as tuple ``(release, "
"versioninfo, machine)`` with *versioninfo* being a tuple ``(version, "
"dev_stage, non_release_version)``."
msgstr ""

#: ../Doc/library/platform.rst:237
msgid ""
"Entries which cannot be determined are set to ``''``.  All tuple entries are "
"strings."
msgstr ""

#: ../Doc/library/platform.rst:242
msgid "Unix Platforms"
msgstr ""

#: ../Doc/library/platform.rst:247
msgid ""
"This is an old version of the functionality now provided by :func:"
"`linux_distribution`. For new code, please use the :func:"
"`linux_distribution`."
msgstr ""

#: ../Doc/library/platform.rst:251
msgid ""
"The only difference between the two is that ``dist()`` always returns the "
"short name of the distribution taken from the ``supported_dists`` parameter."
msgstr ""

#: ../Doc/library/platform.rst:259
msgid "Tries to determine the name of the Linux OS distribution name."
msgstr ""

#: ../Doc/library/platform.rst:261
msgid ""
"``supported_dists`` may be given to define the set of Linux distributions to "
"look for. It defaults to a list of currently supported Linux distributions "
"identified by their release file name."
msgstr ""

#: ../Doc/library/platform.rst:265
msgid ""
"If ``full_distribution_name`` is true (default), the full distribution read "
"from the OS is returned. Otherwise the short name taken from "
"``supported_dists`` is used."
msgstr ""

#: ../Doc/library/platform.rst:269
msgid ""
"Returns a tuple ``(distname,version,id)`` which defaults to the args given "
"as parameters.  ``id`` is the item in parentheses after the version number.  "
"It is usually the version codename."
msgstr ""

#: ../Doc/library/platform.rst:277
msgid ""
"Tries to determine the libc version against which the file executable "
"(defaults to the Python interpreter) is linked.  Returns a tuple of strings "
"``(lib, version)`` which default to the given parameters in case the lookup "
"fails."
msgstr ""

#: ../Doc/library/platform.rst:281
msgid ""
"Note that this function has intimate knowledge of how different libc "
"versions add symbols to the executable is probably only usable for "
"executables compiled using :program:`gcc`."
msgstr ""

#: ../Doc/library/platform.rst:285
msgid "The file is read and scanned in chunks of *chunksize* bytes."
msgstr ""
