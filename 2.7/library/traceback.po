# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/traceback.rst:2
msgid ":mod:`traceback` --- Print or retrieve a stack traceback"
msgstr ""

#: ../Doc/library/traceback.rst:8
msgid ""
"This module provides a standard interface to extract, format and print stack "
"traces of Python programs.  It exactly mimics the behavior of the Python "
"interpreter when it prints a stack trace.  This is useful when you want to "
"print stack traces under program control, such as in a \"wrapper\" around "
"the interpreter."
msgstr ""

#: ../Doc/library/traceback.rst:16
msgid ""
"The module uses traceback objects --- this is the object type that is stored "
"in the variables :data:`sys.exc_traceback` (deprecated) and :data:`sys."
"last_traceback` and returned as the third item from :func:`sys.exc_info`."
msgstr ""

#: ../Doc/library/traceback.rst:21
msgid "The module defines the following functions:"
msgstr ""

#: ../Doc/library/traceback.rst:26
msgid ""
"Print up to *limit* stack trace entries from the traceback object *tb*. If "
"*limit* is omitted or ``None``, all entries are printed. If *file* is "
"omitted or ``None``, the output goes to ``sys.stderr``; otherwise it should "
"be an open file or file-like object to receive the output."
msgstr ""

#: ../Doc/library/traceback.rst:34
msgid ""
"Print exception information and up to *limit* stack trace entries from the "
"traceback *tb* to *file*. This differs from :func:`print_tb` in the "
"following ways: (1) if *tb* is not ``None``, it prints a header ``Traceback "
"(most recent call last):``; (2) it prints the exception *etype* and *value* "
"after the stack trace; (3) if *etype* is :exc:`SyntaxError` and *value* has "
"the appropriate format, it prints the line where the syntax error occurred "
"with a caret indicating the approximate position of the error."
msgstr ""

#: ../Doc/library/traceback.rst:45
msgid ""
"This is a shorthand for ``print_exception(sys.exc_type, sys.exc_value, sys."
"exc_traceback, limit, file)``.  (In fact, it uses :func:`sys.exc_info` to "
"retrieve the same information in a thread-safe way instead of using the "
"deprecated variables.)"
msgstr ""

#: ../Doc/library/traceback.rst:53
msgid ""
"This is like ``print_exc(limit)`` but returns a string instead of printing "
"to a file."
msgstr ""

#: ../Doc/library/traceback.rst:61
msgid ""
"This is a shorthand for ``print_exception(sys.last_type, sys.last_value, sys."
"last_traceback, limit, file)``.  In general it will work only after an "
"exception has reached an interactive prompt (see :data:`sys.last_type`)."
msgstr ""

#: ../Doc/library/traceback.rst:68
msgid ""
"This function prints a stack trace from its invocation point. The optional "
"*f* argument can be used to specify an alternate stack frame to start. The "
"optional limit* and *file* arguments have the same meaning as for :func:"
"`print_exception`."
msgstr ""

#: ../Doc/library/traceback.rst:76
msgid ""
"Return a list of up to *limit* \"pre-processed\" stack trace entries "
"extracted from the traceback object *tb*.  It is useful for alternate "
"formatting of stack traces.  If *limit* is omitted or ``None``, all entries "
"are extracted. A \"pre-processed\" stack trace entry is a 4-tuple "
"(*filename*, *line number*, function name*, *text*) representing the "
"information that is usually printed for a stack trace.  The *text* is a "
"string with leading and trailing whitespace stripped; if the source is not "
"available it is ``None``."
msgstr ""

#: ../Doc/library/traceback.rst:87
msgid ""
"Extract the raw traceback from the current stack frame.  The return value "
"has the same format as for :func:`extract_tb`.  The optional *f* and *limit* "
"arguments have the same meaning as for :func:`print_stack`."
msgstr ""

#: ../Doc/library/traceback.rst:94
msgid ""
"Given a list of tuples as returned by :func:`extract_tb` or :func:"
"`extract_stack`, return a list of strings ready for printing.  Each string "
"in the resulting list corresponds to the item with the same index in the "
"argument list.  Each string ends in a newline; the strings may contain "
"internal newlines as well, for those items whose source text line is not "
"``None``."
msgstr ""

#: ../Doc/library/traceback.rst:104
msgid ""
"Format the exception part of a traceback.  The arguments are the exception "
"type, *etype* and *value* such as given by ``sys.last_type`` and ``sys."
"last_value``.  The return value is a list of strings, each ending in a "
"newline.  Normally, the list contains a single string; however, for :exc:"
"`SyntaxError` exceptions, it contains several lines that (when printed) "
"display detailed information about where the syntax error occurred.  The "
"message indicating which exception occurred is the always last string in the "
"list."
msgstr ""

#: ../Doc/library/traceback.rst:116
msgid ""
"Format a stack trace and the exception information.  The arguments  have the "
"same meaning as the corresponding arguments to :func:`print_exception`.  The "
"return value is a list of strings, each ending in a newline and some "
"containing internal newlines.  When these lines are concatenated and "
"printed, exactly the same text is printed as does :func:`print_exception`."
msgstr ""

#: ../Doc/library/traceback.rst:125
msgid "A shorthand for ``format_list(extract_tb(tb, limit))``."
msgstr ""

#: ../Doc/library/traceback.rst:130
msgid "A shorthand for ``format_list(extract_stack(f, limit))``."
msgstr ""

#: ../Doc/library/traceback.rst:135
msgid ""
"This function returns the current line number set in the traceback object. "
"This function was necessary because in versions of Python prior to 2.3 when "
"the :option:`-O` flag was passed to Python the ``tb.tb_lineno`` was not "
"updated correctly.  This function has no use in versions past 2.3."
msgstr ""

#: ../Doc/library/traceback.rst:144
msgid "Traceback Examples"
msgstr ""

#: ../Doc/library/traceback.rst:146
msgid ""
"This simple example implements a basic read-eval-print loop, similar to (but "
"less useful than) the standard Python interactive interpreter loop.  For a "
"more complete implementation of the interpreter loop, refer to the :mod:"
"`code` module. ::"
msgstr ""

#: ../Doc/library/traceback.rst:168
msgid ""
"The following example demonstrates the different ways to print and format "
"the exception and traceback::"
msgstr ""

#: ../Doc/library/traceback.rst:204
msgid "The output for the example would look similar to this::"
msgstr ""

#: ../Doc/library/traceback.rst:243
msgid ""
"The following example shows the different ways to print and format the "
"stack::"
msgstr ""

#: ../Doc/library/traceback.rst:269
msgid "This last example demonstrates the final few formatting functions:"
msgstr ""
