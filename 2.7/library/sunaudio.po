# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/sunaudio.rst:3
msgid ":mod:`sunaudiodev` --- Access to Sun audio hardware"
msgstr ""

#: ../Doc/library/sunaudio.rst:10
msgid "The :mod:`sunaudiodev` module has been removed in Python 3."
msgstr ""

#: ../Doc/library/sunaudio.rst:17
msgid ""
"This module allows you to access the Sun audio interface. The Sun audio "
"hardware is capable of recording and playing back audio data in u-LAW format "
"with a sample rate of 8K per second. A full description can be found in the :"
"manpage:`audio(7I)` manual page."
msgstr ""

#: ../Doc/library/sunaudio.rst:24
msgid ""
"The module :mod:`SUNAUDIODEV`  defines constants which may be used with this "
"module."
msgstr ""

#: ../Doc/library/sunaudio.rst:27
msgid "This module defines the following variables and functions:"
msgstr ""

#: ../Doc/library/sunaudio.rst:32
msgid ""
"This exception is raised on all errors. The argument is a string describing "
"what went wrong."
msgstr ""

#: ../Doc/library/sunaudio.rst:38
msgid ""
"This function opens the audio device and returns a Sun audio device object. "
"This object can then be used to do I/O on. The *mode* parameter is one of "
"``'r'`` for record-only access, ``'w'`` for play-only access, ``'rw'`` for "
"both and ``'control'`` for access to the control device. Since only one "
"process is allowed to have the recorder or player open at the same time it "
"is a good idea to open the device only for the activity needed. See :manpage:"
"`audio(7I)` for details."
msgstr ""

#: ../Doc/library/sunaudio.rst:46
msgid ""
"As per the manpage, this module first looks in the environment variable "
"``AUDIODEV`` for the base audio device filename.  If not found, it falls "
"back to :file:`/dev/audio`.  The control device is calculated by appending "
"\"ctl\" to the base audio device."
msgstr ""

#: ../Doc/library/sunaudio.rst:55
msgid "Audio Device Objects"
msgstr ""

#: ../Doc/library/sunaudio.rst:57
msgid ""
"The audio device objects are returned by :func:`.open` define the following "
"methods (except ``control`` objects which only provide :meth:`getinfo`, :"
"meth:`setinfo`, :meth:`fileno`, and :meth:`drain`):"
msgstr ""

#: ../Doc/library/sunaudio.rst:64
msgid ""
"This method explicitly closes the device. It is useful in situations where "
"deleting the object does not immediately close it since there are other "
"references to it. A closed device should not be used again."
msgstr ""

#: ../Doc/library/sunaudio.rst:71
msgid ""
"Returns the file descriptor associated with the device.  This can be used to "
"set up ``SIGPOLL`` notification, as described below."
msgstr ""

#: ../Doc/library/sunaudio.rst:77
msgid ""
"This method waits until all pending output is processed and then returns. "
"Calling this method is often not necessary: destroying the object will "
"automatically close the audio device and this will do an implicit drain."
msgstr ""

#: ../Doc/library/sunaudio.rst:84
msgid ""
"This method discards all pending output. It can be used avoid the slow "
"response to a user's stop request (due to buffering of up to one second of "
"sound)."
msgstr ""

#: ../Doc/library/sunaudio.rst:90
msgid ""
"This method retrieves status information like input and output volume, etc. "
"and returns it in the form of an audio status object. This object has no "
"methods but it contains a number of attributes describing the current device "
"status. The names and meanings of the attributes are described in ``<sun/"
"audioio.h>`` and in the :manpage:`audio(7I)` manual page.  Member names are "
"slightly different from their C counterparts: a status object is only a "
"single structure. Members of the :c:data:`play` substructure have ``o_`` "
"prepended to their name and members of the :c:data:`record` structure have "
"``i_``. So, the C member :c:data:`play.sample_rate` is accessed as :attr:"
"`o_sample_rate`, :c:data:`record.gain` as :attr:`i_gain` and :c:data:"
"`monitor_gain` plainly as :attr:`monitor_gain`."
msgstr ""

#: ../Doc/library/sunaudio.rst:105
msgid ""
"This method returns the number of samples that are buffered on the recording "
"side, i.e. the program will not block on a :func:`read` call of so many "
"samples."
msgstr ""

#: ../Doc/library/sunaudio.rst:111
msgid ""
"This method returns the number of samples buffered on the playback side. "
"Unfortunately, this number cannot be used to determine a number of samples "
"that can be written without blocking since the kernel output queue length "
"seems to be variable."
msgstr ""

#: ../Doc/library/sunaudio.rst:119
msgid ""
"This method reads *size* samples from the audio input and returns them as a "
"Python string. The function blocks until enough data is available."
msgstr ""

#: ../Doc/library/sunaudio.rst:125
msgid ""
"This method sets the audio device status parameters. The *status* parameter "
"is a device status object as returned by :func:`getinfo` and possibly "
"modified by the program."
msgstr ""

#: ../Doc/library/sunaudio.rst:132
msgid ""
"Write is passed a Python string containing audio samples to be played. If "
"there is enough buffer space free it will immediately return, otherwise it "
"will block."
msgstr ""

#: ../Doc/library/sunaudio.rst:135
msgid ""
"The audio device supports asynchronous notification of various events, "
"through the SIGPOLL signal.  Here's an example of how you might enable this "
"in Python::"
msgstr ""

#: ../Doc/library/sunaudio.rst:148
msgid ":mod:`SUNAUDIODEV` --- Constants used with :mod:`sunaudiodev`"
msgstr ""

#: ../Doc/library/sunaudio.rst:155
msgid "The :mod:`SUNAUDIODEV` module has been removed in Python 3."
msgstr ""

#: ../Doc/library/sunaudio.rst:162
msgid ""
"This is a companion module to :mod:`sunaudiodev` which defines useful "
"symbolic constants like :const:`MIN_GAIN`, :const:`MAX_GAIN`, :const:"
"`SPEAKER`, etc. The names of the constants are the same names as used in the "
"C include file ``<sun/audioio.h>``, with the leading string ``AUDIO_`` "
"stripped."
msgstr ""
