# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/bsddb.rst:3
msgid ":mod:`bsddb` --- Interface to Berkeley DB library"
msgstr ""

#: ../Doc/library/bsddb.rst:9
msgid "The :mod:`bsddb` module has been removed in Python 3."
msgstr ""

#: ../Doc/library/bsddb.rst:13
msgid ""
"The :mod:`bsddb` module provides an interface to the Berkeley DB library.  "
"Users can create hash, btree or record based library files using the "
"appropriate open call. Bsddb objects behave generally like dictionaries.  "
"Keys and values must be strings, however, so to use other objects as keys or "
"to store other kinds of objects the user must serialize them somehow, "
"typically using :func:`marshal.dumps` or  :func:`pickle.dumps`."
msgstr ""

#: ../Doc/library/bsddb.rst:20
msgid ""
"The :mod:`bsddb` module requires a Berkeley DB library version from 4.0 thru "
"4.7."
msgstr ""

#: ../Doc/library/bsddb.rst:29
msgid "http://www.jcea.es/programacion/pybsddb.htm"
msgstr ""

#: ../Doc/library/bsddb.rst:27
msgid ""
"The website with documentation for the :mod:`bsddb.db` Python Berkeley DB "
"interface that closely mirrors the object oriented interface provided in "
"Berkeley DB 4.x itself."
msgstr ""

#: ../Doc/library/bsddb.rst:31
msgid "http://www.oracle.com/database/berkeley-db/"
msgstr ""

#: ../Doc/library/bsddb.rst:32
msgid "The Berkeley DB library."
msgstr ""

#: ../Doc/library/bsddb.rst:34
msgid ""
"A more modern DB, DBEnv and DBSequence object interface is available in the :"
"mod:`bsddb.db` module which closely matches the Berkeley DB C API documented "
"at the above URLs.  Additional features provided by the :mod:`bsddb.db` API "
"include fine tuning, transactions, logging, and multiprocess concurrent "
"database access."
msgstr ""

#: ../Doc/library/bsddb.rst:39
msgid ""
"The following is a description of the legacy :mod:`bsddb` interface "
"compatible with the old Python bsddb module.  Starting in Python 2.5 this "
"interface should be safe for multithreaded access.  The :mod:`bsddb.db` API "
"is recommended for threading users as it provides better control."
msgstr ""

#: ../Doc/library/bsddb.rst:44
msgid ""
"The :mod:`bsddb` module defines the following functions that create objects "
"that access the appropriate type of Berkeley DB file.  The first two "
"arguments of each function are the same.  For ease of portability, only the "
"first two arguments should be used in most instances."
msgstr ""

#: ../Doc/library/bsddb.rst:52
msgid ""
"Open the hash format file named *filename*.  Files never intended to be "
"preserved on disk may be created by passing ``None`` as the  *filename*.  "
"The optional *flag* identifies the mode used to open the file.  It may be "
"``'r'`` (read only), ``'w'`` (read-write), ``'c'`` (read-write - create if "
"necessary; the default) or ``'n'`` (read-write - truncate to zero length).  "
"The other arguments are rarely used and are just passed to the low-level :c:"
"func:`dbopen` function.  Consult the Berkeley DB documentation for their use "
"and interpretation."
msgstr ""

#: ../Doc/library/bsddb.rst:64
msgid ""
"Open the btree format file named *filename*.  Files never intended  to be "
"preserved on disk may be created by passing ``None`` as the  *filename*.  "
"The optional *flag* identifies the mode used to open the file.  It may be "
"``'r'`` (read only), ``'w'`` (read-write), ``'c'`` (read-write - create if "
"necessary; the default) or ``'n'`` (read-write - truncate to zero length).  "
"The other arguments are rarely used and are just passed to the low-level "
"dbopen function. Consult the Berkeley DB documentation for their use and "
"interpretation."
msgstr ""

#: ../Doc/library/bsddb.rst:75
msgid ""
"Open a DB record format file named *filename*.  Files never intended  to be "
"preserved on disk may be created by passing ``None`` as the  *filename*.  "
"The optional *flag* identifies the mode used to open the file.  It may be "
"``'r'`` (read only), ``'w'`` (read-write), ``'c'`` (read-write - create if "
"necessary; the default) or ``'n'`` (read-write - truncate to zero length).  "
"The other arguments are rarely used and are just passed to the low-level "
"dbopen function. Consult the Berkeley DB documentation for their use and "
"interpretation."
msgstr ""

#: ../Doc/library/bsddb.rst:85
msgid ""
"Beginning in 2.3 some Unix versions of Python may have a :mod:`bsddb185` "
"module. This is present *only* to allow backwards compatibility with systems "
"which ship with the old Berkeley DB 1.85 database library.  The :mod:"
"`bsddb185` module should never be used directly in new code. The module has "
"been removed in Python 3.  If you find you still need it look in PyPI."
msgstr ""

#: ../Doc/library/bsddb.rst:94
msgid "Module :mod:`dbhash`"
msgstr ""

#: ../Doc/library/bsddb.rst:95
msgid "DBM-style interface to the :mod:`bsddb`"
msgstr ""

#: ../Doc/library/bsddb.rst:101
msgid "Hash, BTree and Record Objects"
msgstr ""

#: ../Doc/library/bsddb.rst:103
msgid ""
"Once instantiated, hash, btree and record objects support the same methods "
"as dictionaries.  In addition, they support the methods listed below."
msgstr ""

#: ../Doc/library/bsddb.rst:106
msgid "Added dictionary methods."
msgstr ""

#: ../Doc/library/bsddb.rst:112
msgid ""
"Close the underlying file.  The object can no longer be accessed.  Since "
"there is no open :meth:`open` method for these objects, to open the file "
"again a new :mod:`bsddb` module open function must be called."
msgstr ""

#: ../Doc/library/bsddb.rst:119
msgid ""
"Return the list of keys contained in the DB file.  The order of the list is "
"unspecified and should not be relied on.  In particular, the order of the "
"list returned is different for different file formats."
msgstr ""

#: ../Doc/library/bsddb.rst:126
msgid "Return ``1`` if the DB file contains the argument as a key."
msgstr ""

#: ../Doc/library/bsddb.rst:131
msgid ""
"Set the cursor to the item indicated by *key* and return a tuple containing "
"the key and its value.  For binary tree databases (opened using :func:"
"`btopen`), if *key* does not actually exist in the database, the cursor will "
"point to the next item in sorted order and return that key and value.  For "
"other databases, :exc:`KeyError` will be raised if *key* is not found in the "
"database."
msgstr ""

#: ../Doc/library/bsddb.rst:140
msgid ""
"Set the cursor to the first item in the DB file and return it.  The order of "
"keys in the file is unspecified, except in the case of B-Tree databases. "
"This method raises :exc:`bsddb.error` if the database is empty."
msgstr ""

#: ../Doc/library/bsddb.rst:147
msgid ""
"Set the cursor to the next item in the DB file and return it.  The order of "
"keys in the file is unspecified, except in the case of B-Tree databases."
msgstr ""

#: ../Doc/library/bsddb.rst:153
msgid ""
"Set the cursor to the previous item in the DB file and return it.  The order "
"of keys in the file is unspecified, except in the case of B-Tree databases.  "
"This is not supported on hashtable databases (those opened with :func:"
"`hashopen`)."
msgstr ""

#: ../Doc/library/bsddb.rst:160
msgid ""
"Set the cursor to the last item in the DB file and return it.  The order of "
"keys in the file is unspecified.  This is not supported on hashtable "
"databases (those opened with :func:`hashopen`). This method raises :exc:"
"`bsddb.error` if the database is empty."
msgstr ""

#: ../Doc/library/bsddb.rst:168
msgid "Synchronize the database on disk."
msgstr ""

#: ../Doc/library/bsddb.rst:170
msgid "Example::"
msgstr "ExemplesÂ ::"
