# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/multifile.rst:3
msgid ":mod:`multifile` --- Support for files containing distinct parts"
msgstr ""

#: ../Doc/library/multifile.rst:11
msgid ""
"The :mod:`email` package should be used in preference to the :mod:"
"`multifile` module. This module is present only to maintain backward "
"compatibility."
msgstr ""

#: ../Doc/library/multifile.rst:15
msgid ""
"The :class:`MultiFile` object enables you to treat sections of a text file "
"as file-like input objects, with ``''`` being returned by :meth:`readline` "
"when a given delimiter pattern is encountered.  The defaults of this class "
"are designed to make it useful for parsing MIME multipart messages, but by "
"subclassing it and overriding methods  it can be easily adapted for more "
"general use."
msgstr ""

#: ../Doc/library/multifile.rst:24
msgid ""
"Create a multi-file.  You must instantiate this class with an input object "
"argument for the :class:`MultiFile` instance to get lines from, such as a "
"file object returned by :func:`open`."
msgstr ""

#: ../Doc/library/multifile.rst:28
msgid ""
":class:`MultiFile` only ever looks at the input object's :meth:`readline`, :"
"meth:`seek` and :meth:`tell` methods, and the latter two are only needed if "
"you want random access to the individual MIME parts. To use :class:"
"`MultiFile` on a non-seekable stream object, set the optional *seekable* "
"argument to false; this will prevent using the input object's :meth:`seek` "
"and :meth:`tell` methods."
msgstr ""

#: ../Doc/library/multifile.rst:34
msgid ""
"It will be useful to know that in :class:`MultiFile`'s view of the world, "
"text is composed of three kinds of lines: data, section-dividers, and end-"
"markers. MultiFile is designed to support parsing of messages that may have "
"multiple nested message parts, each with its own pattern for section-divider "
"and end-marker lines."
msgstr ""

#: ../Doc/library/multifile.rst:43
msgid "Module :mod:`email`"
msgstr ""

#: ../Doc/library/multifile.rst:44
msgid ""
"Comprehensive email handling package; supersedes the :mod:`multifile` module."
msgstr ""

#: ../Doc/library/multifile.rst:50
msgid "MultiFile Objects"
msgstr ""

#: ../Doc/library/multifile.rst:52
msgid "A :class:`MultiFile` instance has the following methods:"
msgstr ""

#: ../Doc/library/multifile.rst:57
msgid ""
"Read a line.  If the line is data (not a section-divider or end-marker or "
"real EOF) return it.  If the line matches the most-recently-stacked "
"boundary, return ``''`` and set ``self.last`` to 1 or 0 according as the "
"match is or is not an end-marker.  If the line matches any other stacked "
"boundary, raise an error.  On encountering end-of-file on the underlying "
"stream object, the method raises :exc:`Error` unless all boundaries have "
"been popped."
msgstr ""

#: ../Doc/library/multifile.rst:67
msgid "Return all lines remaining in this part as a list of strings."
msgstr ""

#: ../Doc/library/multifile.rst:72
msgid ""
"Read all lines, up to the next section.  Return them as a single (multiline) "
"string.  Note that this doesn't take a size argument!"
msgstr ""

#: ../Doc/library/multifile.rst:78
msgid ""
"Seek.  Seek indices are relative to the start of the current section. The "
"*pos* and *whence* arguments are interpreted as for a file seek."
msgstr ""

#: ../Doc/library/multifile.rst:84
msgid "Return the file position relative to the start of the current section."
msgstr ""

#: ../Doc/library/multifile.rst:89
msgid ""
"Skip lines to the next section (that is, read lines until a section-divider "
"or end-marker has been consumed).  Return true if there is such a section, "
"false if an end-marker is seen.  Re-enable the most-recently-pushed boundary."
msgstr ""

#: ../Doc/library/multifile.rst:96
msgid ""
"Return true if *str* is data and false if it might be a section boundary.  "
"As written, it tests for a prefix other than ``'-``\\ ``-'`` at start of "
"line (which all MIME boundaries have) but it is declared so it can be "
"overridden in derived classes."
msgstr ""

#: ../Doc/library/multifile.rst:101
msgid ""
"Note that this test is used intended as a fast guard for the real boundary "
"tests; if it always returns false it will merely slow processing, not cause "
"it to fail."
msgstr ""

#: ../Doc/library/multifile.rst:108
msgid ""
"Push a boundary string.  When a decorated version of this boundary  is found "
"as an input line, it will be interpreted as a section-divider  or end-marker "
"(depending on the decoration, see :rfc:`2045`).  All subsequent reads will "
"return the empty string to indicate end-of-file, until a call to :meth:`pop` "
"removes the boundary a or :meth:`.next` call reenables it."
msgstr ""

#: ../Doc/library/multifile.rst:114
msgid ""
"It is possible to push more than one boundary.  Encountering the most-"
"recently-pushed boundary will return EOF; encountering any other boundary "
"will raise an error."
msgstr ""

#: ../Doc/library/multifile.rst:121
msgid ""
"Pop a section boundary.  This boundary will no longer be interpreted as EOF."
msgstr ""

#: ../Doc/library/multifile.rst:126
msgid ""
"Turn a boundary into a section-divider line.  By default, this method "
"prepends ``'--'`` (which MIME section boundaries have) but it is declared so "
"it can be overridden in derived classes.  This method need not append LF or "
"CR-LF, as comparison with the result ignores trailing whitespace."
msgstr ""

#: ../Doc/library/multifile.rst:134
msgid ""
"Turn a boundary string into an end-marker line.  By default, this method "
"prepends ``'--'`` and appends ``'--'`` (like a MIME-multipart end-of-message "
"marker) but it is declared so it can be overridden in derived classes.  This "
"method need not append LF or CR-LF, as comparison with the result ignores "
"trailing whitespace."
msgstr ""

#: ../Doc/library/multifile.rst:140
msgid ""
"Finally, :class:`MultiFile` instances have two public instance variables:"
msgstr ""

#: ../Doc/library/multifile.rst:145
msgid "Nesting depth of the current part."
msgstr ""

#: ../Doc/library/multifile.rst:150
msgid "True if the last end-of-file was for an end-of-message marker."
msgstr ""

#: ../Doc/library/multifile.rst:156
msgid ":class:`MultiFile` Example"
msgstr ""
