# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2010, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-03-12 23:37+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 1.7.0\n"

#: ../Doc/using/cmdline.rst:9
msgid "Command line and environment"
msgstr "Ligne de commande et environnement"

#: ../Doc/using/cmdline.rst:11
msgid ""
"The CPython interpreter scans the command line and the environment for "
"various settings."
msgstr ""
"L'interpréteur CPython analyse la ligne de commande et l'environnement à la "
"recherche de différents paramètres/"

# We’re speaking about the command line of other Python implementations, not
# other implementatons of command lines.
#: ../Doc/using/cmdline.rst:16
msgid ""
"Other implementations' command line schemes may differ.  See :ref:"
"`implementations` for further resources."
msgstr ""
"Le format des lignes de commandes utilisées par d'autres implémentations "
"peut être différent. Voir :ref:`implementations` pour plus d'informations."

#: ../Doc/using/cmdline.rst:23
msgid "Command line"
msgstr "Ligne de commande"

#: ../Doc/using/cmdline.rst:25
msgid "When invoking Python, you may specify any of these options::"
msgstr ""
"Quand vous invoquez Python, vous pouvez spécifier n’importe laquelle de ces "
"options :"

#: ../Doc/using/cmdline.rst:29
msgid ""
"The most common use case is, of course, a simple invocation of a script::"
msgstr ""
"Le cas d'utilisation le plus courant est, bien entendu, la simple invocation "
"d'un script ::"

#: ../Doc/using/cmdline.rst:37
msgid "Interface options"
msgstr "Options de l'interface"

#: ../Doc/using/cmdline.rst:39
msgid ""
"The interpreter interface resembles that of the UNIX shell, but provides "
"some additional methods of invocation:"
msgstr ""
"L'interface de l’interpréteur ressemble à celle du shell UNIX, mais fournit "
"quelques méthodes d'invocation supplémentaires :"

#: ../Doc/using/cmdline.rst:42
#, fuzzy
msgid ""
"When called with standard input connected to a tty device, it prompts for "
"commands and executes them until an EOF (an end-of-file character, you can "
"produce that with :kbd:`Ctrl-D` on UNIX or :kbd:`Ctrl-Z, Enter` on Windows) "
"is read."
msgstr ""
"Quand l'interpréteur est appelé avec l'entrée standard connectée à un "
"périphérique tty, il lit les lignes de commande et les exécute jusqu'à ce "
"qu'un caractère EOF (un caractère fin de fichier, que vous pouvez produire "
"avec *Ctrl-D* sous UNIX ou *Ctrl-Z, Entrée* sous Windows) soit lu."

#: ../Doc/using/cmdline.rst:45
msgid ""
"When called with a file name argument or with a file as standard input, it "
"reads and executes a script from that file."
msgstr ""
"Quand l'interpréteur est appelé avec argument correspondant à un nom de "
"fichier ou avec un fichier comme entrée standard, il lit et exécute le "
"script contenu dans ce fichier."

#: ../Doc/using/cmdline.rst:47
msgid ""
"When called with a directory name argument, it reads and executes an "
"appropriately named script from that directory."
msgstr ""
"Quand l'interpréteur est appelé avec un argument correspondant à un "
"répertoire, il lit et exécute un script nommé d’une certaine façon depuis ce "
"répertoire."

#: ../Doc/using/cmdline.rst:49
msgid ""
"When called with ``-c command``, it executes the Python statement(s) given "
"as *command*.  Here *command* may contain multiple statements separated by "
"newlines. Leading whitespace is significant in Python statements!"
msgstr ""
"Quand l'interpréteur est appelé avec l'option ``-c commande``, il exécute la "
"ou les instructions Python données comme *commande*. Ici *commande* peut "
"contenir plusieurs instructions séparées par des fins de ligne. Les blancs "
"en début de ligne ne sont pas ignorés dans les instructions Python !"

#: ../Doc/using/cmdline.rst:52
msgid ""
"When called with ``-m module-name``, the given module is located on the "
"Python module path and executed as a script."
msgstr ""
"Quand l'interpréteur est appelé avec l'option ``-m nom-de-module``, le "
"module donné est recherché dans le chemin des modules Python et est exécuté "
"en tant que script."

#: ../Doc/using/cmdline.rst:55
msgid ""
"In non-interactive mode, the entire input is parsed before it is executed."
msgstr ""
"En mode non-interactif, toute l’entrée est analysée avant d’être exécutée. "

#: ../Doc/using/cmdline.rst:57
msgid ""
"An interface option terminates the list of options consumed by the "
"interpreter, all consecutive arguments will end up in :data:`sys.argv` -- "
"note that the first element, subscript zero (``sys.argv[0]``), is a string "
"reflecting the program's source."
msgstr ""
"Une option d'interface termine la listes des options consommées par "
"l'interpréteur ; tous les arguments échoueront dans :data:`sys.argv` — notez "
"que le premier élément, à l'indice zéro (``sys.argv|0]``), est une chaîne de "
"caractères indiquant la source du programme."

#: ../Doc/using/cmdline.rst:64
#, fuzzy
msgid ""
"Execute the Python code in *command*.  *command* can be one or more "
"statements separated by newlines, with significant leading whitespace as in "
"normal module code."
msgstr ""
"Exécute le code Python dans *commande*. *commande* peut être une ou "
"plusieurs instructions, séparées par des fins de ligne, avec des blancs en "
"début de ligne qui ne sont pas ignorés, comme dans le code d’un module."

#: ../Doc/using/cmdline.rst:68
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be ``\"-c"
"\"`` and the current directory will be added to the start of :data:`sys."
"path` (allowing modules in that directory to be imported as top level "
"modules)."
msgstr ""
"Si cette option est donnée, le premier élément de :data:`sys.argv` sera ``\"-"
"c\"`` et le répertoire courant sera ajouté au début de :data:`sys.path` "
"(permettant aux modules de ce répertoire d'être importé comme des modules de "
"premier niveau)."

#: ../Doc/using/cmdline.rst:76
msgid ""
"Search :data:`sys.path` for the named module and execute its contents as "
"the :mod:`__main__` module."
msgstr ""
"Parcourir :data:`sys.path` à la recherche du module donné et exécuter son "
"contenu en tant que module :mod:`__main__`."

#: ../Doc/using/cmdline.rst:79
msgid ""
"Since the argument is a *module* name, you must not give a file extension "
"(``.py``).  The ``module-name`` should be a valid Python module name, but "
"the implementation may not always enforce this (e.g. it may allow you to use "
"a name that includes a hyphen)."
msgstr ""
"L'argument étant un nom de *module*, vous ne devez pas fournir d’extension "
"de fichier (``.py``). Le ``nom-du-module`` devrait être un nom de module "
"Python valide, mais l'implémentation n’est pas tenue de le vérifier (par "
"exemple, l'utilisation d'un trait d'union peut être autorisée)."

#: ../Doc/using/cmdline.rst:84
msgid ""
"Package names are also permitted. When a package name is supplied instead of "
"a normal module, the interpreter will execute ``<pkg>.__main__`` as the main "
"module. This behaviour is deliberately similar to the handling of "
"directories and zipfiles that are passed to the interpreter as the script "
"argument."
msgstr ""
"Les noms de paquets sont aussi autorisés. Quand un nom de paquet est donné à "
"la place d'un module habituel, l'interpréteur exécutera ``<pkg>.__main`` "
"comme module principal. Ce comportement est délibérement identique que pour "
"un répertoire on un fichier zip donné à l'interpréteur comme argument à "
"exécuter."

#: ../Doc/using/cmdline.rst:92
msgid ""
"This option cannot be used with built-in modules and extension modules "
"written in C, since they do not have Python module files. However, it can "
"still be used for precompiled modules, even if the original source file is "
"not available."
msgstr ""
"Cette option ne peut pas être utilisée avec les modules intégrés et les "
"modules d'extension écrits en C, étant donné qu'il ne possèdent pas de "
"fichiers modules en Python. Cependant, elle peut toujours être utilisées "
"pour les modules pré-complilés, même si le fichier source original n'est pas "
"disponible."

#: ../Doc/using/cmdline.rst:97
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be the "
"full path to the module file. As with the :option:`-c` option, the current "
"directory will be added to the start of :data:`sys.path`."
msgstr ""
"Si cette option est donnée, le premier élément de :data:`sys.argv` sera le "
"chemin complet d'accès au fichier du module. Comme pour l'option :option:`-"
"c`, le répertoire courant sera ajouté au début de :data:`sys.path`."

#: ../Doc/using/cmdline.rst:101
msgid ""
"Many standard library modules contain code that is invoked on their "
"execution as a script.  An example is the :mod:`timeit` module::"
msgstr ""
"De nombreux modules de la bibliothèque standard contiennent du code qui est "
"invoqué quand ils sont exécutés comme scripts. Un exemple est le module :mod:"
"`timeit`\\ ::"

#: ../Doc/using/cmdline.rst:109
msgid ":func:`runpy.run_module`"
msgstr ""

#: ../Doc/using/cmdline.rst:109 ../Doc/using/cmdline.rst:135
msgid "Equivalent functionality directly available to Python code"
msgstr ""

#: ../Doc/using/cmdline.rst:111
msgid ":pep:`338` -- Executing modules as scripts"
msgstr ":pep:`338` --  Exécuter des modules en tant que scripts"

#: ../Doc/using/cmdline.rst:115
msgid "The named module can now be located inside a package."
msgstr ""

#: ../Doc/using/cmdline.rst:118
msgid ""
"Supply the package name to run a ``__main__`` submodule. sys.argv[0] is now "
"set to ``\"-m\"`` while searching for the module (it was previously "
"incorrectly set to ``\"-c\"``)"
msgstr ""

#: ../Doc/using/cmdline.rst:126
msgid ""
"Read commands from standard input (:data:`sys.stdin`).  If standard input is "
"a terminal, :option:`-i` is implied."
msgstr ""
"Lit les commandes depuis l'entrée standard (:data:`sys.stdin`). Si l'entrée "
"standard est un terminal, l':option:`-i` est activée implicitement."

#: ../Doc/using/cmdline.rst:129
#, fuzzy
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be ``\"-"
"\"`` and the current directory will be added to the start of :data:`sys."
"path`."
msgstr ""
"Si cette option est donnée, le premier élément de :data:`sys.argv` sera ``\"-"
"\"`` et le répertoire courant sera ajouté au début de :data:`sys.path`."

#: ../Doc/using/cmdline.rst:134
msgid ":func:`runpy.run_path`"
msgstr ""

#: ../Doc/using/cmdline.rst:140
msgid ""
"Execute the Python code contained in *script*, which must be a filesystem "
"path (absolute or relative) referring to either a Python file, a directory "
"containing a ``__main__.py`` file, or a zipfile containing a ``__main__.py`` "
"file."
msgstr ""
"Exécute le code Python contenu dans *script*, qui doit être un chemin "
"d'accès au fichier (absolu ou relatif), se référant à un fichier Python, à "
"un répertoire contenant un fichier ``__main__.py`` ou à un fichier zip "
"contenant un fichier ``__main__.py``."

#: ../Doc/using/cmdline.rst:145
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be the "
"script name as given on the command line."
msgstr ""
"Si cette option est donnée, le premier élément de :data:`sys.argv` sera le "
"nom du script comme donné sur la ligne de commande."

#: ../Doc/using/cmdline.rst:148
#, fuzzy
msgid ""
"If the script name refers directly to a Python file, the directory "
"containing that file is added to the start of :data:`sys.path`, and the file "
"is executed as the :mod:`__main__` module."
msgstr ""
"Si le nom du script se réfère directement à un fichier Python, le répertoire "
"contenant ce fichier est ajouté au début de :data:`sys.path`, et le fichier "
"est exécuté en tant que module :mod:`__main__`."

#: ../Doc/using/cmdline.rst:152
#, fuzzy
msgid ""
"If the script name refers to a directory or zipfile, the script name is "
"added to the start of :data:`sys.path` and the ``__main__.py`` file in that "
"location is executed as the :mod:`__main__` module."
msgstr ""
"Si le nom du script fait référence à un répertoire ou un fichier zip, le nom "
"du script est ajouté au début de :data:`sys.path` et le fichier ``__main__."
"py`` à cet endroit est exécuté en tant que module :mod:`__main__`."

#: ../Doc/using/cmdline.rst:156
msgid ""
"Directories and zipfiles containing a ``__main__.py`` file at the top level "
"are now considered valid Python scripts."
msgstr ""

#: ../Doc/using/cmdline.rst:160
#, fuzzy
msgid ""
"If no interface option is given, :option:`-i` is implied, ``sys.argv[0]`` is "
"an empty string (``\"\"``) and the current directory will be added to the "
"start of :data:`sys.path`."
msgstr ""
"Si aucune option d'interface est donnée, :option:`-i` est implicite, ``sys."
"argv[0]`` est une chaine vide (``\"\"``) et le répertoire courant sera "
"ajouté au début de :data:`sys.path`."

#: ../Doc/using/cmdline.rst:164
msgid ":ref:`tut-invoking`"
msgstr ""

#: ../Doc/using/cmdline.rst:168
#, fuzzy
msgid "Generic options"
msgstr "Options génériques"

#: ../Doc/using/cmdline.rst:174
#, fuzzy
msgid "Print a short description of all command line options."
msgstr ""
"Affiche une brève description de toutes les options de ligne de commande."

#: ../Doc/using/cmdline.rst:176
msgid "The ``--help`` variant."
msgstr ""

#: ../Doc/using/cmdline.rst:183
#, fuzzy
msgid "Print the Python version number and exit.  Example output could be::"
msgstr ""
"Imprimer le numéro de version de Python et termine. Exemple de sortie : ::"

#: ../Doc/using/cmdline.rst:187
msgid "The ``--version`` variant."
msgstr ""

#: ../Doc/using/cmdline.rst:192
#, fuzzy
msgid "Miscellaneous options"
msgstr "Options diverses"

#: ../Doc/using/cmdline.rst:196
msgid ""
"If given, Python won't try to write ``.pyc`` or ``.pyo`` files on the import "
"of source modules.  See also :envvar:`PYTHONDONTWRITEBYTECODE`."
msgstr ""
"Si donné, Python ne tentera pas d'écrire de fichier ``.pyc``` ou ``.pyo`` à "
"l'importation des modules source. Voir aussi :envvar:"
"`PYTHONDONTWRITEBYTECODE`."

#: ../Doc/using/cmdline.rst:204
msgid ""
"Turn on parser debugging output (for wizards only, depending on compilation "
"options).  See also :envvar:`PYTHONDEBUG`."
msgstr ""
"Activer la sortie de l'analyseur de débogage (pour les magiciens uniquement, "
"en fonction des options de compilation). Voir aussi :envvar:`PYTHONDEBUG`."

#: ../Doc/using/cmdline.rst:210
msgid ""
"Ignore all :envvar:`PYTHON*` environment variables, e.g. :envvar:"
"`PYTHONPATH` and :envvar:`PYTHONHOME`, that might be set."
msgstr ""
"Ignorer toutes les variables d'environnement :envvar:`PYTHON*`, par "
"exemple, :envvar:`PYTHONPATH` et :envvar:`PYTHONHOME`, qui pourraient être "
"définies."

#: ../Doc/using/cmdline.rst:218
msgid ""
"When a script is passed as first argument or the :option:`-c` option is "
"used, enter interactive mode after executing the script or the command, even "
"when :data:`sys.stdin` does not appear to be a terminal.  The :envvar:"
"`PYTHONSTARTUP` file is not read."
msgstr ""
"Quand un script est passé comme premier argument ou que l'option :option:`-"
"c` est utilisée, entrer en mode interactif après avoir exécuté le script ou "
"la commande, même lorsque :data:`sys.stdin` ne semble pas être un terminal. "
"Le fichier :envvar:`PYTHONSTARTUP` n'est pas lu."

#: ../Doc/using/cmdline.rst:223
msgid ""
"This can be useful to inspect global variables or a stack trace when a "
"script raises an exception.  See also :envvar:`PYTHONINSPECT`."
msgstr ""
"Cela peut être utile pour examiner les variables globales ou une trace de la "
"pile lorsque le script lève une exception. Voir aussi :envvar:"
"`PYTHONINSPECT`."

#: ../Doc/using/cmdline.rst:229
msgid ""
"Turn on basic optimizations.  This changes the filename extension for "
"compiled (:term:`bytecode`) files from ``.pyc`` to ``.pyo``.  See also :"
"envvar:`PYTHONOPTIMIZE`."
msgstr ""
"Activer les optimisations de base. Cela modifie l'extension du fichier pour "
"les fichiers compilés (:term:`bytecode`) de ``.pyc`` à ``.pyo``. Voir aussi :"
"envvar:`PYTHONOPTIMIZE`."

#: ../Doc/using/cmdline.rst:236
msgid "Discard docstrings in addition to the :option:`-O` optimizations."
msgstr ""
"Supprimer les docstrings en plus des optimisations réalisés par :option:`-O`."

#: ../Doc/using/cmdline.rst:241
msgid "Division control. The argument must be one of the following:"
msgstr ""

#: ../Doc/using/cmdline.rst:243
msgid "``old``"
msgstr ""

#: ../Doc/using/cmdline.rst:244
msgid "division of int/int and long/long return an int or long (*default*)"
msgstr ""

#: ../Doc/using/cmdline.rst:246
msgid "``new``"
msgstr ""

#: ../Doc/using/cmdline.rst:246
msgid ""
"new division semantics, i.e. division of int/int and long/long returns a "
"float"
msgstr ""

#: ../Doc/using/cmdline.rst:248
msgid "``warn``"
msgstr ""

#: ../Doc/using/cmdline.rst:249
msgid "old division semantics with a warning for int/int and long/long"
msgstr ""

#: ../Doc/using/cmdline.rst:251
msgid "``warnall``"
msgstr ""

#: ../Doc/using/cmdline.rst:251
msgid ""
"old division semantics with a warning for all uses of the division operator"
msgstr ""

#: ../Doc/using/cmdline.rst:255
msgid ":file:`Tools/scripts/fixdiv.py`"
msgstr ""

#: ../Doc/using/cmdline.rst:255
msgid "for a use of ``warnall``"
msgstr ""

#: ../Doc/using/cmdline.rst:257
#, fuzzy
msgid ":pep:`238` -- Changing the division operator"
msgstr ":pep:`230` -- Gestion des alertes"

#: ../Doc/using/cmdline.rst:262
msgid ""
"Turn on hash randomization, so that the :meth:`__hash__` values of str, "
"bytes and datetime objects are \"salted\" with an unpredictable random "
"value. Although they remain constant within an individual Python process, "
"they are not predictable between repeated invocations of Python."
msgstr ""

#: ../Doc/using/cmdline.rst:267
msgid ""
"This is intended to provide protection against a denial-of-service caused by "
"carefully-chosen inputs that exploit the worst case performance of a dict "
"construction, O(n^2) complexity.  See http://www.ocert.org/advisories/"
"ocert-2011-003.html for details."
msgstr ""

#: ../Doc/using/cmdline.rst:272
msgid ""
"Changing hash values affects the order in which keys are retrieved from a "
"dict.  Although Python has never made guarantees about this ordering (and it "
"typically varies between 32-bit and 64-bit builds), enough real-world code "
"implicitly relies on this non-guaranteed behavior that the randomization is "
"disabled by default."
msgstr ""

#: ../Doc/using/cmdline.rst:278
#, fuzzy
msgid "See also :envvar:`PYTHONHASHSEED`."
msgstr "Voir aussi :envvar:`PYTHONUNBUFFERED`."

# I’m creating terminology here; where’s the mailing list to discuss such
# stuff?
#: ../Doc/using/cmdline.rst:285
#, fuzzy
msgid ""
"Don't add the :data:`user site-packages directory <site.USER_SITE>` to :data:"
"`sys.path`."
msgstr "Ne pas ajouter le répertoire spécifique de l’utilisateur à sys.path"

#: ../Doc/using/cmdline.rst:292 ../Doc/using/cmdline.rst:586
#: ../Doc/using/cmdline.rst:600
#, fuzzy
msgid ":pep:`370` -- Per user site-packages directory"
msgstr ":pep:`370` --  Répertoire site-packages par utilisateur "

#: ../Doc/using/cmdline.rst:297
msgid ""
"Disable the import of the module :mod:`site` and the site-dependent "
"manipulations of :data:`sys.path` that it entails."
msgstr ""
"Désactiver l’importation du module :mod:`site` et les modifications de :data:"
"`sys.path` spécifiques au site qu’elle implique."

#: ../Doc/using/cmdline.rst:303
#, fuzzy
msgid ""
"Issue a warning when a source file mixes tabs and spaces for indentation in "
"a way that makes it depend on the worth of a tab expressed in spaces.  Issue "
"an error when the option is given twice (:option:`-tt`)."
msgstr ""
"Émettre un avertissement lorsque l'on compare un str et un bytes. Émettre "
"une erreur lorsque l'option est donné deux fois (:option:`-bb`)."

#: ../Doc/using/cmdline.rst:310
msgid ""
"Force stdin, stdout and stderr to be totally unbuffered.  On systems where "
"it matters, also put stdin, stdout and stderr in binary mode."
msgstr ""

#: ../Doc/using/cmdline.rst:313
msgid ""
"Note that there is internal buffering in :meth:`file.readlines` and :ref:"
"`bltin-file-objects` (``for line in sys.stdin``) which is not influenced by "
"this option.  To work around this, you will want to use :meth:`file."
"readline` inside a ``while 1:`` loop."
msgstr ""

#: ../Doc/using/cmdline.rst:318
msgid "See also :envvar:`PYTHONUNBUFFERED`."
msgstr "Voir aussi :envvar:`PYTHONUNBUFFERED`."

#: ../Doc/using/cmdline.rst:323
msgid ""
"Print a message each time a module is initialized, showing the place "
"(filename or built-in module) from which it is loaded.  When given twice (:"
"option:`-vv`), print a message for each file that is checked for when "
"searching for a module.  Also provides information on module cleanup at "
"exit. See also :envvar:`PYTHONVERBOSE`."
msgstr ""

#: ../Doc/using/cmdline.rst:332
msgid ""
"Warning control.  Python's warning machinery by default prints warning "
"messages to :data:`sys.stderr`.  A typical warning message has the following "
"form::"
msgstr ""

#: ../Doc/using/cmdline.rst:338
#, fuzzy
msgid ""
"By default, each warning is printed once for each source line where it "
"occurs.  This option controls how often warnings are printed."
msgstr ""
"Par défaut, chaque avertissement est afficher une fois pour chaque ligne de "
"source où elle se trouve. Cette option définit la fréquence d'affichage des "
"avertissements."

#: ../Doc/using/cmdline.rst:341
msgid ""
"Multiple :option:`-W` options may be given; when a warning matches more than "
"one option, the action for the last matching option is performed.  Invalid :"
"option:`-W` options are ignored (though, a warning message is printed about "
"invalid options when the first warning is issued)."
msgstr ""

#: ../Doc/using/cmdline.rst:346
msgid ""
"Starting from Python 2.7, :exc:`DeprecationWarning` and its descendants are "
"ignored by default.  The :option:`-Wd` option can be used to re-enable them."
msgstr ""

#: ../Doc/using/cmdline.rst:350
msgid ""
"Warnings can also be controlled from within a Python program using the :mod:"
"`warnings` module."
msgstr ""

#: ../Doc/using/cmdline.rst:353
#, fuzzy
msgid ""
"The simplest form of argument is one of the following action strings (or a "
"unique abbreviation) by themselves:"
msgstr ""
"La forme la plus simple de l'argument est l'une des chaînes d'action "
"suivante (ou une abréviation unique):"

#: ../Doc/using/cmdline.rst:356
msgid "``ignore``"
msgstr ""

#: ../Doc/using/cmdline.rst:357
#, fuzzy
msgid "Ignore all warnings."
msgstr "Ignorer tous les avertissements."

#: ../Doc/using/cmdline.rst:359
#, fuzzy
msgid "``default``"
msgstr "default"

#: ../Doc/using/cmdline.rst:359
msgid ""
"Explicitly request the default behavior (printing each warning once per "
"source line)."
msgstr ""

#: ../Doc/using/cmdline.rst:363
msgid "``all``"
msgstr "``all``"

#: ../Doc/using/cmdline.rst:362
#, fuzzy
msgid ""
"Print a warning each time it occurs (this may generate many messages if a "
"warning is triggered repeatedly for the same source line, such as inside a "
"loop)."
msgstr ""
"Affiche un avertissement à chaque fois qu'il se produit (ce qui peut générer "
"beaucoup de messages si l'avertissement est déclenchée à plusieurs reprises "
"pour la ligne du même source, comme à l'intérieur d'une boucle)."

#: ../Doc/using/cmdline.rst:365
#, fuzzy
msgid "``module``"
msgstr "module"

#: ../Doc/using/cmdline.rst:366
#, fuzzy
msgid "Print each warning only the first time it occurs in each module."
msgstr ""
"Affiche chaque avertissement uniquement la première fois qu'il apparaît dans "
"chaque module."

#: ../Doc/using/cmdline.rst:367
msgid "``once``"
msgstr ""

#: ../Doc/using/cmdline.rst:368
#, fuzzy
msgid "Print each warning only the first time it occurs in the program."
msgstr ""
"Affiche chaque avertissement uniquement la première fois qu'il apparaît dans "
"le programme."

#: ../Doc/using/cmdline.rst:370
msgid "``error``"
msgstr ""

#: ../Doc/using/cmdline.rst:370
#, fuzzy
msgid "Raise an exception instead of printing a warning message."
msgstr "Déclenche une exception au lieu d'afficher un message d'avertissement."

#: ../Doc/using/cmdline.rst:372
#, fuzzy
msgid "The full form of argument is::"
msgstr "La forme complète de l'argument est le suivant::"

#: ../Doc/using/cmdline.rst:376
#, fuzzy
msgid ""
"Here, *action* is as explained above but only applies to messages that match "
"the remaining fields.  Empty fields match all values; trailing empty fields "
"may be omitted.  The *message* field matches the start of the warning "
"message printed; this match is case-insensitive.  The *category* field "
"matches the warning category.  This must be a class name; the match tests "
"whether the actual warning category of the message is a subclass of the "
"specified warning category.  The full class name must be given.  The "
"*module* field matches the (fully-qualified) module name; this match is case-"
"sensitive.  The *line* field matches the line number, where zero matches all "
"line numbers and is thus equivalent to an omitted line number."
msgstr ""
"Ici, *action* est tel qu'expliqué ci-dessus, mais s'applique uniquement aux "
"messages qui correspondent aux champs restants. Les champs vides "
"correspondent à toutes les valeurs ; les champs vides de fin peuvent être "
"omis. Le champ *message* correspond au début du message d'avertissement "
"affiché, cette expression est insensible à la casse. Le champ *category* "
"correspond à la catégorie d'avertissement. Ce nom doit être un nom complet "
"de classe ; La règle s'applique à tous les messages d'alertes construits "
"avec une classe héritante de celle spécifiée. Le nom de la classe complète "
"doit être donnée. Le champ *module* correspond au nom (pleinement qualifié) "
"du module, cette correspondance est sensible à la casse. Le champ *line* "
"correspond au numéro de ligne, où zéro correspond à n'importe quel numéro de "
"ligne et correspond donc à l'option par défaut."

#: ../Doc/using/cmdline.rst:388
msgid ":mod:`warnings` -- the warnings module"
msgstr ""

#: ../Doc/using/cmdline.rst:390
msgid ":pep:`230` -- Warning framework"
msgstr ":pep:`230` -- Gestion des alertes"

#: ../Doc/using/cmdline.rst:392
msgid ":envvar:`PYTHONWARNINGS`"
msgstr ""

#: ../Doc/using/cmdline.rst:397
msgid ""
"Skip the first line of the source, allowing use of non-Unix forms of ``#!"
"cmd``.  This is intended for a DOS specific hack only."
msgstr ""

#: ../Doc/using/cmdline.rst:400
#, fuzzy
msgid "The line numbers in error messages will be off by one."
msgstr ""
"Les numéros de ligne dans les messages d'erreur seront désactivés un par un."

#: ../Doc/using/cmdline.rst:404
msgid ""
"Warn about Python 3.x possible incompatibilities by emitting a :exc:"
"`DeprecationWarning` for features that are removed or significantly changed "
"in Python 3."
msgstr ""

#: ../Doc/using/cmdline.rst:411
msgid "Options you shouldn't use"
msgstr "Options que vous ne devriez pas utiliser"

#: ../Doc/using/cmdline.rst:415
#, fuzzy
msgid "Reserved for use by Jython_."
msgstr "Utilisation réservée à Jython_."

#: ../Doc/using/cmdline.rst:421
msgid ""
"Turns all string literals into unicodes globally.  Do not be tempted to use "
"this option as it will probably break your world.  It also produces ``.pyc`` "
"files with a different magic number than normal.  Instead, you can enable "
"unicode literals on a per-module basis by using::"
msgstr ""

#: ../Doc/using/cmdline.rst:428
msgid "at the top of the file.  See :mod:`__future__` for details."
msgstr ""

#: ../Doc/using/cmdline.rst:432
msgid ""
"Reserved for alternative implementations of Python to use for their own "
"purposes."
msgstr ""

#: ../Doc/using/cmdline.rst:438
msgid "Environment variables"
msgstr "Variables d'environnement"

#: ../Doc/using/cmdline.rst:440
msgid ""
"These environment variables influence Python's behavior, they are processed "
"before the command-line switches other than -E.  It is customary that "
"command-line switches override environmental variables where there is a "
"conflict."
msgstr ""

#: ../Doc/using/cmdline.rst:447
msgid ""
"Change the location of the standard Python libraries.  By default, the "
"libraries are searched in :file:`{prefix}/lib/python{version}` and :file:"
"`{exec_prefix}/lib/python{version}`, where :file:`{prefix}` and :file:"
"`{exec_prefix}` are installation-dependent directories, both defaulting to :"
"file:`/usr/local`."
msgstr ""

#: ../Doc/using/cmdline.rst:453
msgid ""
"When :envvar:`PYTHONHOME` is set to a single directory, its value replaces "
"both :file:`{prefix}` and :file:`{exec_prefix}`.  To specify different "
"values for these, set :envvar:`PYTHONHOME` to :file:`{prefix}:{exec_prefix}`."
msgstr ""

#: ../Doc/using/cmdline.rst:460
msgid ""
"Augment the default search path for module files.  The format is the same as "
"the shell's :envvar:`PATH`: one or more directory pathnames separated by :"
"data:`os.pathsep` (e.g. colons on Unix or semicolons on Windows). Non-"
"existent directories are silently ignored."
msgstr ""

#: ../Doc/using/cmdline.rst:465
msgid ""
"In addition to normal directories, individual :envvar:`PYTHONPATH` entries "
"may refer to zipfiles containing pure Python modules (in either source or "
"compiled form). Extension modules cannot be imported from zipfiles."
msgstr ""

#: ../Doc/using/cmdline.rst:469
msgid ""
"The default search path is installation dependent, but generally begins "
"with :file:`{prefix}/lib/python{version}` (see :envvar:`PYTHONHOME` above).  "
"It is *always* appended to :envvar:`PYTHONPATH`."
msgstr ""

#: ../Doc/using/cmdline.rst:473
msgid ""
"An additional directory will be inserted in the search path in front of :"
"envvar:`PYTHONPATH` as described above under :ref:`using-on-interface-"
"options`. The search path can be manipulated from within a Python program as "
"the variable :data:`sys.path`."
msgstr ""

#: ../Doc/using/cmdline.rst:481
msgid ""
"If this is the name of a readable file, the Python commands in that file are "
"executed before the first prompt is displayed in interactive mode.  The file "
"is executed in the same namespace where interactive commands are executed so "
"that objects defined or imported in it can be used without qualification in "
"the interactive session.  You can also change the prompts :data:`sys.ps1` "
"and :data:`sys.ps2` in this file."
msgstr ""

#: ../Doc/using/cmdline.rst:491
msgid ""
"Set this to a non-empty string to cause the :mod:`time` module to require "
"dates specified as strings to include 4-digit years, otherwise 2-digit years "
"are converted based on rules described in the :mod:`time` module "
"documentation."
msgstr ""

#: ../Doc/using/cmdline.rst:499
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-O` option.  If set to an integer, it is equivalent to specifying :"
"option:`-O` multiple times."
msgstr ""

#: ../Doc/using/cmdline.rst:506
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-d` option.  If set to an integer, it is equivalent to specifying :"
"option:`-d` multiple times."
msgstr ""

#: ../Doc/using/cmdline.rst:513
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-i` option."
msgstr ""

#: ../Doc/using/cmdline.rst:516
msgid ""
"This variable can also be modified by Python code using :data:`os.environ` "
"to force inspect mode on program termination."
msgstr ""

#: ../Doc/using/cmdline.rst:522
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-u` option."
msgstr ""

#: ../Doc/using/cmdline.rst:528
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-v` option.  If set to an integer, it is equivalent to specifying :"
"option:`-v` multiple times."
msgstr ""

#: ../Doc/using/cmdline.rst:535
msgid ""
"If this is set, Python ignores case in :keyword:`import` statements.  This "
"only works on Windows, OS X, OS/2, and RiscOS."
msgstr ""

#: ../Doc/using/cmdline.rst:541
#, fuzzy
msgid ""
"If this is set, Python won't try to write ``.pyc`` or ``.pyo`` files on the "
"import of source modules.  This is equivalent to specifying the :option:`-B` "
"option."
msgstr ""
"Si donné, Python ne tentera pas d'écrire de fichier ``.pyc``` ou ``.pyo`` à "
"l'importation des modules source. Voir aussi :envvar:"
"`PYTHONDONTWRITEBYTECODE`."

#: ../Doc/using/cmdline.rst:549
msgid ""
"If this variable is set to ``random``, the effect is the same as specifying "
"the :option:`-R` option: a random value is used to seed the hashes of str, "
"bytes and datetime objects."
msgstr ""

#: ../Doc/using/cmdline.rst:553
msgid ""
"If :envvar:`PYTHONHASHSEED` is set to an integer value, it is used as a "
"fixed seed for generating the hash() of the types covered by the hash "
"randomization."
msgstr ""

#: ../Doc/using/cmdline.rst:557
msgid ""
"Its purpose is to allow repeatable hashing, such as for selftests for the "
"interpreter itself, or to allow a cluster of python processes to share hash "
"values."
msgstr ""

#: ../Doc/using/cmdline.rst:561
msgid ""
"The integer must be a decimal number in the range [0,4294967295]. Specifying "
"the value 0 will lead to the same hash values as when hash randomization is "
"disabled."
msgstr ""

#: ../Doc/using/cmdline.rst:570
msgid ""
"Overrides the encoding used for stdin/stdout/stderr, in the syntax "
"``encodingname:errorhandler``.  The ``:errorhandler`` part is optional and "
"has the same meaning as in :func:`str.encode`."
msgstr ""

#: ../Doc/using/cmdline.rst:579
msgid ""
"If this is set, Python won't add the :data:`user site-packages directory "
"<site.USER_SITE>` to :data:`sys.path`."
msgstr ""

#: ../Doc/using/cmdline.rst:591
msgid ""
"Defines the :data:`user base directory <site.USER_BASE>`, which is used to "
"compute the path of the :data:`user site-packages directory <site."
"USER_SITE>` and :ref:`Distutils installation paths <inst-alt-install-user>` "
"for ``python setup.py install --user``."
msgstr ""

#: ../Doc/using/cmdline.rst:605
msgid ""
"If this environment variable is set, ``sys.argv[0]`` will be set to its "
"value instead of the value got through the C runtime.  Only works on Mac OS "
"X."
msgstr ""

#: ../Doc/using/cmdline.rst:611
msgid ""
"This is equivalent to the :option:`-W` option. If set to a comma separated "
"string, it is equivalent to specifying :option:`-W` multiple times."
msgstr ""

#: ../Doc/using/cmdline.rst:617
msgid "Debug-mode variables"
msgstr ""

#: ../Doc/using/cmdline.rst:619
msgid ""
"Setting these variables only has an effect in a debug build of Python, that "
"is, if Python was configured with the ``--with-pydebug`` build option."
msgstr ""

#: ../Doc/using/cmdline.rst:624
msgid "If set, Python will print threading debug info."
msgstr ""

#: ../Doc/using/cmdline.rst:626
msgid "Previously, this variable was called ``THREADDEBUG``."
msgstr ""

#: ../Doc/using/cmdline.rst:631
msgid ""
"If set, Python will dump objects and reference counts still alive after "
"shutting down the interpreter."
msgstr ""

#: ../Doc/using/cmdline.rst:637
msgid ""
"If set, Python will print memory allocation statistics every time a new "
"object arena is created, and on shutdown."
msgstr ""

#: ../Doc/using/index.rst:5
msgid "Python Setup and Usage"
msgstr "Installation et Utilisation de Python [en]"

#: ../Doc/using/index.rst:8
msgid ""
"This part of the documentation is devoted to general information on the "
"setup of the Python environment on different platform, the invocation of the "
"interpreter and things that make working with Python easier."
msgstr ""

#: ../Doc/using/mac.rst:6
msgid "Using Python on a Macintosh"
msgstr ""

#: ../Doc/using/mac.rst:8
msgid "Bob Savage <bobsavage@mac.com>"
msgstr ""

#: ../Doc/using/mac.rst:11
msgid ""
"Python on a Macintosh running Mac OS X is in principle very similar to "
"Python on any other Unix platform, but there are a number of additional "
"features such as the IDE and the Package Manager that are worth pointing out."
msgstr ""

#: ../Doc/using/mac.rst:15
msgid ""
"The Mac-specific modules are documented in :ref:`mac-specific-services`."
msgstr ""

#: ../Doc/using/mac.rst:17
msgid ""
"Python on Mac OS 9 or earlier can be quite different from Python on Unix or "
"Windows, but is beyond the scope of this manual, as that platform is no "
"longer supported, starting with Python 2.4. See http://www.cwi.nl/~jack/"
"macpython for installers for the latest 2.3 release for Mac OS 9 and related "
"documentation."
msgstr ""

#: ../Doc/using/mac.rst:26
msgid "Getting and Installing MacPython"
msgstr ""

#: ../Doc/using/mac.rst:28
msgid ""
"Mac OS X 10.8 comes with Python 2.7 pre-installed by Apple.  If you wish, "
"you are invited to install the most recent version of Python from the Python "
"website (https://www.python.org).  A current \"universal binary\" build of "
"Python, which runs natively on the Mac's new Intel and legacy PPC CPU's, is "
"available there."
msgstr ""

#: ../Doc/using/mac.rst:33
msgid "What you get after installing is a number of things:"
msgstr ""

#: ../Doc/using/mac.rst:35
msgid ""
"A :file:`MacPython 2.7` folder in your :file:`Applications` folder. In here "
"you find IDLE, the development environment that is a standard part of "
"official Python distributions; PythonLauncher, which handles double-clicking "
"Python scripts from the Finder; and the \"Build Applet\" tool, which allows "
"you to package Python scripts as standalone applications on your system."
msgstr ""

#: ../Doc/using/mac.rst:41
msgid ""
"A framework :file:`/Library/Frameworks/Python.framework`, which includes the "
"Python executable and libraries. The installer adds this location to your "
"shell path. To uninstall MacPython, you can simply remove these three "
"things. A symlink to the Python executable is placed in /usr/local/bin/."
msgstr ""

#: ../Doc/using/mac.rst:46
msgid ""
"The Apple-provided build of Python is installed in :file:`/System/Library/"
"Frameworks/Python.framework` and :file:`/usr/bin/python`, respectively. You "
"should never modify or delete these, as they are Apple-controlled and are "
"used by Apple- or third-party software.  Remember that if you choose to "
"install a newer Python version from python.org, you will have two different "
"but functional Python installations on your computer, so it will be "
"important that your paths and usages are consistent with what you want to do."
msgstr ""

#: ../Doc/using/mac.rst:54
msgid ""
"IDLE includes a help menu that allows you to access Python documentation. If "
"you are completely new to Python you should start reading the tutorial "
"introduction in that document."
msgstr ""

#: ../Doc/using/mac.rst:58
msgid ""
"If you are familiar with Python on other Unix platforms you should read the "
"section on running Python scripts from the Unix shell."
msgstr ""

#: ../Doc/using/mac.rst:63
msgid "How to run a Python script"
msgstr ""

#: ../Doc/using/mac.rst:65
msgid ""
"Your best way to get started with Python on Mac OS X is through the IDLE "
"integrated development environment, see section :ref:`ide` and use the Help "
"menu when the IDE is running."
msgstr ""

#: ../Doc/using/mac.rst:69
msgid ""
"If you want to run Python scripts from the Terminal window command line or "
"from the Finder you first need an editor to create your script. Mac OS X "
"comes with a number of standard Unix command line editors, :program:`vim` "
"and :program:`emacs` among them. If you want a more Mac-like editor, :"
"program:`BBEdit` or :program:`TextWrangler` from Bare Bones Software (see "
"http://www.barebones.com/products/bbedit/index.html) are good choices, as "
"is :program:`TextMate` (see http://macromates.com/). Other editors include :"
"program:`Gvim` (http://macvim.org) and :program:`Aquamacs` (http://aquamacs."
"org/)."
msgstr ""

#: ../Doc/using/mac.rst:79
msgid ""
"To run your script from the Terminal window you must make sure that :file:`/"
"usr/local/bin` is in your shell search path."
msgstr ""

#: ../Doc/using/mac.rst:82
msgid "To run your script from the Finder you have two options:"
msgstr ""

#: ../Doc/using/mac.rst:84
msgid "Drag it to :program:`PythonLauncher`"
msgstr ""

#: ../Doc/using/mac.rst:86
msgid ""
"Select :program:`PythonLauncher` as the default application to open your "
"script (or any .py script) through the finder Info window and double-click "
"it. :program:`PythonLauncher` has various preferences to control how your "
"script is launched. Option-dragging allows you to change these for one "
"invocation, or use its Preferences menu to change things globally."
msgstr ""

#: ../Doc/using/mac.rst:96
msgid "Running scripts with a GUI"
msgstr ""

#: ../Doc/using/mac.rst:98
msgid ""
"With older versions of Python, there is one Mac OS X quirk that you need to "
"be aware of: programs that talk to the Aqua window manager (in other words, "
"anything that has a GUI) need to be run in a special way. Use :program:"
"`pythonw` instead of :program:`python` to start such scripts."
msgstr ""

#: ../Doc/using/mac.rst:103
msgid ""
"With Python 2.7, you can use either :program:`python` or :program:`pythonw`."
msgstr ""

#: ../Doc/using/mac.rst:107
msgid "Configuration"
msgstr ""

#: ../Doc/using/mac.rst:109
msgid ""
"Python on OS X honors all standard Unix environment variables such as :"
"envvar:`PYTHONPATH`, but setting these variables for programs started from "
"the Finder is non-standard as the Finder does not read your :file:`.profile` "
"or :file:`.cshrc` at startup. You need to create a file :file:`~/.MacOSX/"
"environment.plist`. See Apple's Technical Document QA1067 for details."
msgstr ""

#: ../Doc/using/mac.rst:116
msgid ""
"For more information on installation Python packages in MacPython, see "
"section :ref:`mac-package-manager`."
msgstr ""

#: ../Doc/using/mac.rst:123
msgid "The IDE"
msgstr ""

#: ../Doc/using/mac.rst:125
msgid ""
"MacPython ships with the standard IDLE development environment. A good "
"introduction to using IDLE can be found at https://hkn.eecs.berkeley.edu/"
"~dyoo/python/idle_intro/index.html."
msgstr ""

#: ../Doc/using/mac.rst:133
msgid "Installing Additional Python Packages"
msgstr ""

#: ../Doc/using/mac.rst:135
msgid "There are several methods to install additional Python packages:"
msgstr ""

#: ../Doc/using/mac.rst:137
msgid ""
"Packages can be installed via the standard Python distutils mode (``python "
"setup.py install``)."
msgstr ""

#: ../Doc/using/mac.rst:140
msgid ""
"Many packages can also be installed via the :program:`setuptools` extension "
"or :program:`pip` wrapper, see https://pip.pypa.io/."
msgstr ""

#: ../Doc/using/mac.rst:145
msgid "GUI Programming on the Mac"
msgstr ""

#: ../Doc/using/mac.rst:147
msgid ""
"There are several options for building GUI applications on the Mac with "
"Python."
msgstr ""

#: ../Doc/using/mac.rst:149
msgid ""
"*PyObjC* is a Python binding to Apple's Objective-C/Cocoa framework, which "
"is the foundation of most modern Mac development. Information on PyObjC is "
"available from https://pythonhosted.org/pyobjc/."
msgstr ""

#: ../Doc/using/mac.rst:153
msgid ""
"The standard Python GUI toolkit is :mod:`Tkinter`, based on the cross-"
"platform Tk toolkit (http://www.tcl.tk). An Aqua-native version of Tk is "
"bundled with OS X by Apple, and the latest version can be downloaded and "
"installed from http://www.activestate.com; it can also be built from source."
msgstr ""

#: ../Doc/using/mac.rst:158
msgid ""
"*wxPython* is another popular cross-platform GUI toolkit that runs natively "
"on Mac OS X. Packages and documentation are available from http://www."
"wxpython.org."
msgstr ""

#: ../Doc/using/mac.rst:161
msgid ""
"*PyQt* is another popular cross-platform GUI toolkit that runs natively on "
"Mac OS X. More information can be found at http://www.riverbankcomputing.co."
"uk/software/pyqt/intro."
msgstr ""

#: ../Doc/using/mac.rst:167
msgid "Distributing Python Applications on the Mac"
msgstr ""

#: ../Doc/using/mac.rst:169
msgid ""
"The \"Build Applet\" tool that is placed in the MacPython 2.7 folder is fine "
"for packaging small Python scripts on your own machine to run as a standard "
"Mac application. This tool, however, is not robust enough to distribute "
"Python applications to other users."
msgstr ""

#: ../Doc/using/mac.rst:174
msgid ""
"The standard tool for deploying standalone Python applications on the Mac "
"is :program:`py2app`. More information on installing and using py2app can be "
"found at http://undefined.org/python/#py2app."
msgstr ""

#: ../Doc/using/mac.rst:180
#, fuzzy
msgid "Other Resources"
msgstr "Autres ressources"

#: ../Doc/using/mac.rst:182
msgid ""
"The MacPython mailing list is an excellent support resource for Python users "
"and developers on the Mac:"
msgstr ""

#: ../Doc/using/mac.rst:185
msgid "https://www.python.org/community/sigs/current/pythonmac-sig/"
msgstr ""

#: ../Doc/using/mac.rst:187
msgid "Another useful resource is the MacPython wiki:"
msgstr ""

#: ../Doc/using/mac.rst:189
msgid "https://wiki.python.org/moin/MacPython"
msgstr ""

#: ../Doc/using/unix.rst:7
msgid "Using Python on Unix platforms"
msgstr ""

#: ../Doc/using/unix.rst:13
msgid "Getting and installing the latest version of Python"
msgstr ""

#: ../Doc/using/unix.rst:16
msgid "On Linux"
msgstr ""

#: ../Doc/using/unix.rst:18
msgid ""
"Python comes preinstalled on most Linux distributions, and is available as a "
"package on all others.  However there are certain features you might want to "
"use that are not available on your distro's package.  You can easily compile "
"the latest version of Python from source."
msgstr ""

#: ../Doc/using/unix.rst:23
msgid ""
"In the event that Python doesn't come preinstalled and isn't in the "
"repositories as well, you can easily make packages for your own distro.  "
"Have a look at the following links:"
msgstr ""

#: ../Doc/using/unix.rst:29
msgid "http://www.debian.org/doc/manuals/maint-guide/first.en.html"
msgstr ""

#: ../Doc/using/unix.rst:30
msgid "for Debian users"
msgstr ""

#: ../Doc/using/unix.rst:31
msgid "http://en.opensuse.org/Portal:Packaging"
msgstr ""

#: ../Doc/using/unix.rst:32
msgid "for OpenSuse users"
msgstr ""

#: ../Doc/using/unix.rst:33
msgid ""
"http://docs.fedoraproject.org/en-US/Fedora_Draft_Documentation/0.1/html/"
"RPM_Guide/ch-creating-rpms.html"
msgstr ""

#: ../Doc/using/unix.rst:34
msgid "for Fedora users"
msgstr ""

#: ../Doc/using/unix.rst:35
msgid "http://www.slackbook.org/html/package-management-making-packages.html"
msgstr ""

#: ../Doc/using/unix.rst:36
msgid "for Slackware users"
msgstr ""

#: ../Doc/using/unix.rst:40
msgid "On FreeBSD and OpenBSD"
msgstr ""

#: ../Doc/using/unix.rst:42
msgid "FreeBSD users, to add the package use::"
msgstr ""

#: ../Doc/using/unix.rst:46
msgid "OpenBSD users use::"
msgstr ""

#: ../Doc/using/unix.rst:50
msgid "For example i386 users get the 2.5.1 version of Python using::"
msgstr ""

#: ../Doc/using/unix.rst:56
msgid "On OpenSolaris"
msgstr ""

#: ../Doc/using/unix.rst:58
msgid ""
"You can get Python from `OpenCSW <http://www.opencsw.org/>`_.  Various "
"versions of Python are available and can be installed with e.g. ``pkgutil -i "
"python27``."
msgstr ""

#: ../Doc/using/unix.rst:65
msgid "Building Python"
msgstr ""

#: ../Doc/using/unix.rst:67
msgid ""
"If you want to compile CPython yourself, first thing you should do is get "
"the `source <https://www.python.org/download/source/>`_. You can download "
"either the latest release's source or just grab a fresh `clone <https://docs."
"python.org/devguide/setup.html#getting-the-source-code>`_.  (If you want to "
"contribute patches, you will need a clone.)"
msgstr ""

#: ../Doc/using/unix.rst:73
msgid "The build process consists in the usual ::"
msgstr ""

#: ../Doc/using/unix.rst:79
msgid ""
"invocations. Configuration options and caveats for specific Unix platforms "
"are extensively documented in the :source:`README` file in the root of the "
"Python source tree."
msgstr ""

#: ../Doc/using/unix.rst:85
msgid ""
"``make install`` can overwrite or masquerade the :file:`python` binary. "
"``make altinstall`` is therefore recommended instead of ``make install`` "
"since it only installs :file:`{exec_prefix}/bin/python{version}`."
msgstr ""

#: ../Doc/using/unix.rst:91
msgid "Python-related paths and files"
msgstr ""

#: ../Doc/using/unix.rst:93
msgid ""
"These are subject to difference depending on local installation "
"conventions; :envvar:`prefix` (``${prefix}``) and :envvar:`exec_prefix` (``"
"${exec_prefix}``) are installation-dependent and should be interpreted as "
"for GNU software; they may be the same."
msgstr ""

#: ../Doc/using/unix.rst:98
msgid ""
"For example, on most Linux systems, the default for both is :file:`/usr`."
msgstr ""

#: ../Doc/using/unix.rst:101
msgid "File/directory"
msgstr ""

#: ../Doc/using/unix.rst:101
msgid "Meaning"
msgstr "Signification"

#: ../Doc/using/unix.rst:103
msgid ":file:`{exec_prefix}/bin/python`"
msgstr ""

#: ../Doc/using/unix.rst:103
msgid "Recommended location of the interpreter."
msgstr ""

#: ../Doc/using/unix.rst:105
msgid ""
":file:`{prefix}/lib/python{version}`, :file:`{exec_prefix}/lib/"
"python{version}`"
msgstr ""

#: ../Doc/using/unix.rst:105
msgid ""
"Recommended locations of the directories containing the standard modules."
msgstr ""

#: ../Doc/using/unix.rst:108
msgid ""
":file:`{prefix}/include/python{version}`, :file:`{exec_prefix}/include/"
"python{version}`"
msgstr ""

#: ../Doc/using/unix.rst:108
msgid ""
"Recommended locations of the directories containing the include files needed "
"for developing Python extensions and embedding the interpreter."
msgstr ""

#: ../Doc/using/unix.rst:113
msgid ":file:`~/.pythonrc.py`"
msgstr ""

#: ../Doc/using/unix.rst:113
msgid ""
"User-specific initialization file loaded by the user module; not used by "
"default or by most applications."
msgstr ""

#: ../Doc/using/unix.rst:120
msgid "Miscellaneous"
msgstr ""

#: ../Doc/using/unix.rst:122
msgid ""
"To easily use Python scripts on Unix, you need to make them executable, e.g. "
"with ::"
msgstr ""

#: ../Doc/using/unix.rst:127
msgid ""
"and put an appropriate Shebang line at the top of the script.  A good choice "
"is usually ::"
msgstr ""

#: ../Doc/using/unix.rst:132
msgid ""
"which searches for the Python interpreter in the whole :envvar:`PATH`.  "
"However, some Unices may not have the :program:`env` command, so you may "
"need to hardcode ``/usr/bin/python`` as the interpreter path."
msgstr ""

#: ../Doc/using/unix.rst:136
msgid ""
"To use shell commands in your Python scripts, look at the :mod:`subprocess` "
"module."
msgstr ""

#: ../Doc/using/unix.rst:140
msgid "Editors"
msgstr ""

#: ../Doc/using/unix.rst:142
msgid ""
"Vim and Emacs are excellent editors which support Python very well.  For "
"more information on how to code in Python in these editors, look at:"
msgstr ""

#: ../Doc/using/unix.rst:145
msgid "http://www.vim.org/scripts/script.php?script_id=790"
msgstr ""

#: ../Doc/using/unix.rst:146
msgid "http://sourceforge.net/projects/python-mode"
msgstr ""

#: ../Doc/using/unix.rst:148
msgid ""
"Geany is an excellent IDE with support for a lot of languages. For more "
"information, read: http://www.geany.org/"
msgstr ""

#: ../Doc/using/unix.rst:151
msgid ""
"Komodo edit is another extremely good IDE.  It also has support for a lot of "
"languages. For more information, read http://komodoide.com/."
msgstr ""

#: ../Doc/using/windows.rst:7
msgid "Using Python on Windows"
msgstr ""

#: ../Doc/using/windows.rst:11
msgid ""
"This document aims to give an overview of Windows-specific behaviour you "
"should know about when using Python on Microsoft Windows."
msgstr ""

#: ../Doc/using/windows.rst:16
msgid "Installing Python"
msgstr ""

#: ../Doc/using/windows.rst:18
msgid ""
"Unlike most Unix systems and services, Windows does not require Python "
"natively and thus does not pre-install a version of Python.  However, the "
"CPython team has compiled Windows installers (MSI packages) with every "
"`release <https://www.python.org/download/releases/>`_ for many years."
msgstr ""

#: ../Doc/using/windows.rst:23
msgid ""
"With ongoing development of Python, some platforms that used to be supported "
"earlier are no longer supported (due to the lack of users or developers). "
"Check :pep:`11` for details on all unsupported platforms."
msgstr ""

#: ../Doc/using/windows.rst:27
msgid ""
"DOS and Windows 3.x are deprecated since Python 2.0 and code specific to "
"these systems was removed in Python 2.1."
msgstr ""

#: ../Doc/using/windows.rst:29
msgid ""
"Up to 2.5, Python was still compatible with Windows 95, 98 and ME (but "
"already raised a deprecation warning on installation).  For Python 2.6 (and "
"all following releases), this support was dropped and new releases are just "
"expected to work on the Windows NT family."
msgstr ""

#: ../Doc/using/windows.rst:33
msgid "`Windows CE <http://pythonce.sourceforge.net/>`_ is still supported."
msgstr ""

#: ../Doc/using/windows.rst:34
msgid ""
"The `Cygwin <http://cygwin.com/>`_ installer offers to install the Python "
"interpreter as well (cf. `Cygwin package source <ftp://ftp.uni-erlangen.de/"
"pub/pc/gnuwin32/cygwin/mirrors/cygnus/ release/python>`_, `Maintainer "
"releases <http://www.tishler.net/jason/software/python/>`_)"
msgstr ""

#: ../Doc/using/windows.rst:40
msgid ""
"See `Python for Windows (and DOS) <https://www.python.org/download/windows/"
">`_ for detailed information about platforms with precompiled installers."
msgstr ""

#: ../Doc/using/windows.rst:47
msgid ""
"`Python on XP <http://www.richarddooling.com/index.php/2006/03/14/python-on-"
"xp-7-minutes-to-hello-world/>`_"
msgstr ""

#: ../Doc/using/windows.rst:46
msgid "\"7 Minutes to \"Hello World!\"\" by Richard Dooling, 2006"
msgstr ""

#: ../Doc/using/windows.rst:53
msgid ""
"`Installing on Windows <http://www.diveintopython.net/installing_python/"
"windows.html>`_"
msgstr ""

#: ../Doc/using/windows.rst:50
msgid ""
"in \"`Dive into Python: Python from novice to pro <http://www.diveintopython."
"net/>`_\" by Mark Pilgrim, 2004, ISBN 1-59059-356-1"
msgstr ""

#: ../Doc/using/windows.rst:57
msgid ""
"`For Windows users <http://www.swaroopch.com/notes/python/#install_windows>`_"
msgstr ""

#: ../Doc/using/windows.rst:56
msgid ""
"in \"Installing Python\" in \"`A Byte of Python <http://www.swaroopch.com/"
"notes/python/>`_\" by Swaroop C H, 2003"
msgstr ""

#: ../Doc/using/windows.rst:62
msgid "Alternative bundles"
msgstr ""

#: ../Doc/using/windows.rst:64
msgid ""
"Besides the standard CPython distribution, there are modified packages "
"including additional functionality.  The following is a list of popular "
"versions and their key features:"
msgstr ""

#: ../Doc/using/windows.rst:69
msgid "`ActivePython <http://www.activestate.com/Products/activepython/>`_"
msgstr ""

#: ../Doc/using/windows.rst:69
msgid "Installer with multi-platform compatibility, documentation, PyWin32"
msgstr ""

#: ../Doc/using/windows.rst:73
msgid ""
"`Enthought Python Distribution <https://www.enthought.com/products/epd/>`_"
msgstr ""

#: ../Doc/using/windows.rst:72
msgid ""
"Popular modules (such as PyWin32) with their respective documentation, tool "
"suite for building extensible Python applications"
msgstr ""

#: ../Doc/using/windows.rst:75
msgid ""
"Notice that these packages are likely to install *older* versions of Python."
msgstr ""

#: ../Doc/using/windows.rst:80
msgid "Configuring Python"
msgstr ""

#: ../Doc/using/windows.rst:82
msgid ""
"In order to run Python flawlessly, you might have to change certain "
"environment settings in Windows."
msgstr ""

#: ../Doc/using/windows.rst:89
msgid "Excursus: Setting environment variables"
msgstr ""

#: ../Doc/using/windows.rst:91
msgid ""
"Windows has a built-in dialog for changing environment variables (following "
"guide applies to XP classical view): Right-click the icon for your machine "
"(usually located on your Desktop and called \"My Computer\") and choose :"
"menuselection:`Properties` there.  Then, open the :guilabel:`Advanced` tab "
"and click the :guilabel:`Environment Variables` button."
msgstr ""

#: ../Doc/using/windows.rst:97
msgid "In short, your path is:"
msgstr ""

#: ../Doc/using/windows.rst:99
msgid ""
":menuselection:`My Computer --> Properties --> Advanced --> Environment "
"Variables`"
msgstr ""

#: ../Doc/using/windows.rst:104
msgid ""
"In this dialog, you can add or modify User and System variables. To change "
"System variables, you need non-restricted access to your machine (i.e. "
"Administrator rights)."
msgstr ""

#: ../Doc/using/windows.rst:108
msgid ""
"Another way of adding variables to your environment is using the :command:"
"`set` command::"
msgstr ""

#: ../Doc/using/windows.rst:113
msgid ""
"To make this setting permanent, you could add the corresponding command line "
"to your :file:`autoexec.bat`. :program:`msconfig` is a graphical interface "
"to this file."
msgstr ""

#: ../Doc/using/windows.rst:117
msgid ""
"Viewing environment variables can also be done more straight-forward: The "
"command prompt will expand strings wrapped into percent signs automatically::"
msgstr ""

#: ../Doc/using/windows.rst:122
msgid "Consult :command:`set /?` for details on this behaviour."
msgstr ""

#: ../Doc/using/windows.rst:127
msgid "http://support.microsoft.com/kb/100843"
msgstr ""

#: ../Doc/using/windows.rst:127
msgid "Environment variables in Windows NT"
msgstr ""

#: ../Doc/using/windows.rst:130
msgid "http://support.microsoft.com/kb/310519"
msgstr ""

#: ../Doc/using/windows.rst:130
msgid "How To Manage Environment Variables in Windows XP"
msgstr "Comment gérer les variables d'environnement sous Windows XP"

#: ../Doc/using/windows.rst:132
msgid "http://www.chem.gla.ac.uk/~louis/software/faq/q1.html"
msgstr ""

#: ../Doc/using/windows.rst:133
msgid "Setting Environment variables, Louis J. Farrugia"
msgstr "Définir les variables d'environnement, Louis J. Farrugia"

#: ../Doc/using/windows.rst:137
#, fuzzy
msgid "Finding the Python executable"
msgstr "Trouver l'exécutable Python"

#: ../Doc/using/windows.rst:139
msgid ""
"Besides using the automatically created start menu entry for the Python "
"interpreter, you might want to start Python in the DOS prompt.  To make this "
"work, you need to set your :envvar:`%PATH%` environment variable to include "
"the directory of your Python distribution, delimited by a semicolon from "
"other entries.  An example variable could look like this (assuming the first "
"two entries are Windows' default)::"
msgstr ""

#: ../Doc/using/windows.rst:148
msgid ""
"Typing :command:`python` on your command prompt will now fire up the Python "
"interpreter.  Thus, you can also execute your scripts with command line "
"options, see :ref:`using-on-cmdline` documentation."
msgstr ""

#: ../Doc/using/windows.rst:154
msgid "Finding modules"
msgstr ""

#: ../Doc/using/windows.rst:156
msgid ""
"Python usually stores its library (and thereby your site-packages folder) in "
"the installation directory.  So, if you had installed Python to :file:`C:\\"
"\\Python\\\\`, the default library would reside in :file:`C:\\\\Python\\\\Lib"
"\\\\` and third-party modules should be stored in :file:`C:\\\\Python\\\\Lib"
"\\\\site-packages\\\\`."
msgstr ""

#: ../Doc/using/windows.rst:162
msgid "This is how :data:`sys.path` is populated on Windows:"
msgstr ""

#: ../Doc/using/windows.rst:164
msgid ""
"An empty entry is added at the start, which corresponds to the current "
"directory."
msgstr ""

#: ../Doc/using/windows.rst:167
msgid ""
"If the environment variable :envvar:`PYTHONPATH` exists, as described in :"
"ref:`using-on-envvars`, its entries are added next.  Note that on Windows, "
"paths in this variable must be separated by semicolons, to distinguish them "
"from the colon used in drive identifiers (``C:\\`` etc.)."
msgstr ""

#: ../Doc/using/windows.rst:172
msgid ""
"Additional \"application paths\" can be added in the registry as subkeys of :"
"samp:`\\\\SOFTWARE\\\\Python\\\\PythonCore\\\\{version}\\\\PythonPath` under "
"both the ``HKEY_CURRENT_USER`` and ``HKEY_LOCAL_MACHINE`` hives.  Subkeys "
"which have semicolon-delimited path strings as their default value will "
"cause each path to be added to :data:`sys.path`.  (Note that all known "
"installers only use HKLM, so HKCU is typically empty.)"
msgstr ""

#: ../Doc/using/windows.rst:179
msgid ""
"If the environment variable :envvar:`PYTHONHOME` is set, it is assumed as "
"\"Python Home\".  Otherwise, the path of the main Python executable is used "
"to locate a \"landmark file\" (``Lib\\os.py``) to deduce the \"Python Home"
"\".  If a Python home is found, the relevant sub-directories added to :data:"
"`sys.path` (``Lib``, ``plat-win``, etc) are based on that folder.  "
"Otherwise, the core Python path is constructed from the PythonPath stored in "
"the registry."
msgstr ""

#: ../Doc/using/windows.rst:186
msgid ""
"If the Python Home cannot be located, no :envvar:`PYTHONPATH` is specified "
"in the environment, and no registry entries can be found, a default path "
"with relative entries is used (e.g. ``.\\Lib;.\\plat-win``, etc)."
msgstr ""

#: ../Doc/using/windows.rst:190
msgid "The end result of all this is:"
msgstr ""

#: ../Doc/using/windows.rst:192
msgid ""
"When running :file:`python.exe`, or any other .exe in the main Python "
"directory (either an installed version, or directly from the PCbuild "
"directory), the core path is deduced, and the core paths in the registry are "
"ignored.  Other \"application paths\" in the registry are always read."
msgstr ""

#: ../Doc/using/windows.rst:197
msgid ""
"When Python is hosted in another .exe (different directory, embedded via "
"COM, etc), the \"Python Home\" will not be deduced, so the core path from "
"the registry is used.  Other \"application paths\" in the registry are "
"always read."
msgstr ""

#: ../Doc/using/windows.rst:201
msgid ""
"If Python can't find its home and there is no registry (eg, frozen .exe, "
"some very strange installation setup) you get a path with some default, but "
"relative, paths."
msgstr ""

#: ../Doc/using/windows.rst:207
msgid "Executing scripts"
msgstr ""

#: ../Doc/using/windows.rst:209
msgid ""
"Python scripts (files with the extension ``.py``) will be executed by :"
"program:`python.exe` by default.  This executable opens a terminal, which "
"stays open even if the program uses a GUI.  If you do not want this to "
"happen, use the extension ``.pyw`` which will cause the script to be "
"executed by :program:`pythonw.exe` by default (both executables are located "
"in the top-level of your Python installation directory).  This suppresses "
"the terminal window on startup."
msgstr ""

#: ../Doc/using/windows.rst:217
msgid ""
"You can also make all ``.py`` scripts execute with :program:`pythonw.exe`, "
"setting this through the usual facilities, for example (might require "
"administrative rights):"
msgstr ""

#: ../Doc/using/windows.rst:221
msgid "Launch a command prompt."
msgstr ""

#: ../Doc/using/windows.rst:222
msgid "Associate the correct file group with ``.py`` scripts::"
msgstr ""

#: ../Doc/using/windows.rst:226
msgid "Redirect all Python files to the new executable::"
msgstr ""

#: ../Doc/using/windows.rst:232
msgid "Additional modules"
msgstr ""

#: ../Doc/using/windows.rst:234
msgid ""
"Even though Python aims to be portable among all platforms, there are "
"features that are unique to Windows.  A couple of modules, both in the "
"standard library and external, and snippets exist to use these features."
msgstr ""

#: ../Doc/using/windows.rst:238
msgid ""
"The Windows-specific standard modules are documented in :ref:`mswin-specific-"
"services`."
msgstr ""

#: ../Doc/using/windows.rst:243
msgid "PyWin32"
msgstr "PyWin32"

#: ../Doc/using/windows.rst:245
msgid ""
"The `PyWin32 <http://python.net/crew/mhammond/win32/>`_ module by Mark "
"Hammond is a collection of modules for advanced Windows-specific support.  "
"This includes utilities for:"
msgstr ""
"Le module `PyWin32 <http://python.net/crew/mhammond/win32/>`_ de Mark "
"Hammond est une collection de modules pour un support avancé spécifique à "
"Windows.  Cela inclut les services pour :"

#: ../Doc/using/windows.rst:249
msgid "`Component Object Model <http://www.microsoft.com/com/>`_ (COM)"
msgstr "`Component Object Model <http://www.microsoft.com/com/>`_ (COM)"

#: ../Doc/using/windows.rst:250
msgid "Win32 API calls"
msgstr "Appels à l'API Win32"

#: ../Doc/using/windows.rst:251
#, fuzzy
msgid "Registry"
msgstr "Registre"

#: ../Doc/using/windows.rst:252
#, fuzzy
msgid "Event log"
msgstr "journal d'événement"

#: ../Doc/using/windows.rst:253
msgid ""
"`Microsoft Foundation Classes <http://msdn.microsoft.com/en-us/library/"
"fe1cf721%28VS.80%29.aspx>`_ (MFC) user interfaces"
msgstr ""
"`Microsoft Foundation Classes <http://msdn.microsoft.com/en-us/library/"
"fe1cf721%28VS.80%29.aspx>`_ (MFC) interfaces utilisateur"

#: ../Doc/using/windows.rst:256
#, fuzzy
msgid ""
"`PythonWin <http://web.archive.org/web/20060524042422/ https://www.python."
"org/windows/pythonwin/>`_ is a sample MFC application shipped with PyWin32.  "
"It is an embeddable IDE with a built-in debugger."
msgstr ""
"`PythonWin <http://web.archive.org/web/20060524042422/ http://www.python.org/"
"windows/pythonwin/>`_ est une exemple d'application MFC livrée avec PyWin32. "
"Il s'agit d'un IDE embarqué avec débogueur intégré."

#: ../Doc/using/windows.rst:263
msgid ""
"`Win32 How Do I...? <http://timgolden.me.uk/python/win32_how_do_i.html>`_"
msgstr ""

#: ../Doc/using/windows.rst:263
msgid "by Tim Golden"
msgstr "par Tim Golden"

#: ../Doc/using/windows.rst:265
msgid "`Python and COM <http://www.boddie.org.uk/python/COM.html>`_"
msgstr ""

#: ../Doc/using/windows.rst:266
msgid "by David and Paul Boddie"
msgstr "par David et Paul Boddie"

#: ../Doc/using/windows.rst:270
msgid "Py2exe"
msgstr "Py2exe"

#: ../Doc/using/windows.rst:272
msgid ""
"`Py2exe <http://www.py2exe.org/>`_ is a :mod:`distutils` extension (see :ref:"
"`extending-distutils`) which wraps Python scripts into executable Windows "
"programs (:file:`{*}.exe` files).  When you have done this, you can "
"distribute your application without requiring your users to install Python."
msgstr ""

#: ../Doc/using/windows.rst:279
msgid "WConio"
msgstr "WConio"

#: ../Doc/using/windows.rst:281
msgid ""
"Since Python's advanced terminal handling layer, :mod:`curses`, is "
"restricted to Unix-like systems, there is a library exclusive to Windows as "
"well: Windows Console I/O for Python."
msgstr ""

#: ../Doc/using/windows.rst:285
msgid ""
"`WConio <http://newcenturycomputers.net/projects/wconio.html>`_ is a wrapper "
"for Turbo-C's :file:`CONIO.H`, used to create text user interfaces."
msgstr ""

#: ../Doc/using/windows.rst:291
msgid "Compiling Python on Windows"
msgstr "Compiler Python sous Windows"

#: ../Doc/using/windows.rst:293
msgid ""
"If you want to compile CPython yourself, first thing you should do is get "
"the `source <https://www.python.org/download/source/>`_. You can download "
"either the latest release's source or just grab a fresh `checkout <https://"
"docs.python.org/devguide/setup.html#getting-the-source-code>`_."
msgstr ""

#: ../Doc/using/windows.rst:298
msgid ""
"For Microsoft Visual C++, which is the compiler with which official Python "
"releases are built, the source tree contains solutions/project files.  View "
"the :file:`readme.txt` in their respective directories:"
msgstr ""

#: ../Doc/using/windows.rst:303
msgid "Directory"
msgstr "Répertoire"

#: ../Doc/using/windows.rst:303
msgid "MSVC version"
msgstr "version de MSVC"

#: ../Doc/using/windows.rst:303
msgid "Visual Studio version"
msgstr "Version de Visual Studio"

#: ../Doc/using/windows.rst:305
msgid ":file:`PC/VC6/`"
msgstr ":file:`PC/VC6/`"

#: ../Doc/using/windows.rst:305
msgid "6.0"
msgstr "6.0"

#: ../Doc/using/windows.rst:305
msgid "97"
msgstr "97"

#: ../Doc/using/windows.rst:307
msgid ":file:`PC/VS7.1/`"
msgstr ":file:`PC/VS7.1/`"

#: ../Doc/using/windows.rst:307
msgid "7.1"
msgstr "7.1"

#: ../Doc/using/windows.rst:307
msgid "2003"
msgstr "2003"

#: ../Doc/using/windows.rst:309
msgid ":file:`PC/VS8.0/`"
msgstr ":file:`PC/VS8.0/`"

#: ../Doc/using/windows.rst:309
msgid "8.0"
msgstr "8.0"

#: ../Doc/using/windows.rst:309
msgid "2005"
msgstr "2005"

#: ../Doc/using/windows.rst:311
msgid ":file:`PCbuild/`"
msgstr ":file:`PCbuild/`"

#: ../Doc/using/windows.rst:311
msgid "9.0"
msgstr "9.0"

#: ../Doc/using/windows.rst:311
msgid "2008"
msgstr "2008"

#: ../Doc/using/windows.rst:314
msgid ""
"Note that not all of these build directories are fully supported.  Read the "
"release notes to see which compiler version the official releases for your "
"version are built with."
msgstr ""

#: ../Doc/using/windows.rst:318
msgid ""
"Check :file:`PC/readme.txt` for general information on the build process."
msgstr ""
"Vérifiez :file:`PC/readme.txt` pour des informations générales sur le "
"processus de construction."

#: ../Doc/using/windows.rst:321
msgid "For extension modules, consult :ref:`building-on-windows`."
msgstr ""

#: ../Doc/using/windows.rst:328
msgid ""
"`Python + Windows + distutils + SWIG + gcc MinGW <http://sebsauvage.net/"
"python/mingw.html>`_"
msgstr ""

#: ../Doc/using/windows.rst:326
msgid ""
"or \"Creating Python extensions in C/C++ with SWIG and compiling them with "
"MinGW gcc under Windows\" or \"Installing Python extension with distutils "
"and without Microsoft Visual C++\" by Sébastien Sauvage, 2003"
msgstr ""

#: ../Doc/using/windows.rst:330
msgid ""
"`MingW -- Python extensions <http://oldwiki.mingw.org/index.php/Python"
"%20extensions>`_"
msgstr ""

#: ../Doc/using/windows.rst:331
msgid "by Trent Apted et al, 2007"
msgstr "par Trent Apted et al, 2007"

#: ../Doc/using/windows.rst:335
msgid "Other resources"
msgstr "Autres ressources"

#: ../Doc/using/windows.rst:342
msgid ""
"`Python Programming On Win32 <http://shop.oreilly.com/product/9781565926219."
"do>`_"
msgstr ""

#: ../Doc/using/windows.rst:340
msgid ""
"\"Help for Windows Programmers\" by Mark Hammond and Andy Robinson, O'Reilly "
"Media, 2000, ISBN 1-56592-621-8"
msgstr ""
"\"Help for Windows Programmers\" de Mark Hammond et Andy Robinson, O'Reilly "
"Media, 2000, ISBN 1-56592-621-8"

#: ../Doc/using/windows.rst:344
msgid ""
"`A Python for Windows Tutorial <http://www.imladris.com/Scripts/"
"PythonForWindows.html>`_"
msgstr ""

#: ../Doc/using/windows.rst:345
msgid "by Amanda Birmingham, 2004"
msgstr "par Amanda Birmingham, 2004"

#~ msgid "Python on XP"
#~ msgstr "Python sur XP"

#~ msgid "Installing on Windows"
#~ msgstr "Compiler Python sous Windows"

#~ msgid "Python and COM"
#~ msgstr "Python 3.0"

#~ msgid "A Python for Windows Tutorial"
#~ msgstr "Compiler Python sous Windows"

#~ msgid "These environment variables influence Python's behavior."
#~ msgstr ""
#~ "Ces variables d'environnement influent sur le comportement de Python."

#~ msgid ""
#~ "python [-bBdEhiOsSuvVWx?] [-c command | -m module-name | script | - ] "
#~ "[args]"
#~ msgstr ""
#~ "python [-bBdEhiOsSuvVWx?] [-c commande | -m nom-de-module | script | - ] "
#~ "[arguments]"

#~ msgid "python myscript.py"
#~ msgstr "python monscript.py"

#~ msgid ""
#~ "python -mtimeit -s 'setup here' 'benchmarked code here' python -mtimeit -"
#~ "h # for details"
#~ msgstr ""
#~ "python -mtimeit -s 'préparation ici' 'code à chronométrer ici'python -"
#~ "mtimeit -h # pour les détails"

#~ msgid "See also"
#~ msgstr "Voir aussi"

#~ msgid ""
#~ "Force the binary layer of the stdin, stdout and stderr streams (which is "
#~ "available as their ``buffer`` attribute) to be unbuffered.  The text I/O "
#~ "layer will still be line-buffered."
#~ msgstr ""
#~ "Force la couche binaire des flux stdin, stdout and stderr (disponible "
#~ "comme leur attribut ``buffer``) à ne pas mettre de données en tampon. La "
#~ "couche d’entrée-sortie en mode texte continuera de mettre une ligne en "
#~ "tampon."

#~ msgid "file:line: category: message"
#~ msgstr "file:line: category: message"

#~ msgid "action:message:category:module:line"
#~ msgstr "action:message:category:module:line"

#~ msgid "C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\Python25"
#~ msgstr "C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\Python25"
