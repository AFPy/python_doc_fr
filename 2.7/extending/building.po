# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/extending/building.rst:8
msgid "Building C and C++ Extensions with distutils"
msgstr "Construire les extensions C et C++ avec distutils"

#: ../Doc/extending/building.rst:13
msgid ""
"Starting in Python 1.4, Python provides, on Unix, a special make file for "
"building make files for building dynamically-linked extensions and custom "
"interpreters.  Starting with Python 2.0, this mechanism (known as related to "
"Makefile.pre.in, and Setup files) is no longer supported. Building custom "
"interpreters was rarely used, and extension modules can be built using "
"distutils."
msgstr ""

#: ../Doc/extending/building.rst:20
msgid ""
"Building an extension module using distutils requires that distutils is "
"installed on the build machine, which is included in Python 2.x and "
"available separately for Python 1.5. Since distutils also supports creation "
"of binary packages, users don't necessarily need a compiler and distutils to "
"install the extension."
msgstr ""

#: ../Doc/extending/building.rst:26
msgid ""
"A distutils package contains a driver script, :file:`setup.py`. This is a "
"plain Python file, which, in the most simple case, could look like this:"
msgstr ""

#: ../Doc/extending/building.rst:42
msgid "With this :file:`setup.py`, and a file :file:`demo.c`, running ::"
msgstr "Avec ce :file:`setup.py` et un fichier :file:`demo.c`, lancer : ::"

#: ../Doc/extending/building.rst:46
msgid ""
"will compile :file:`demo.c`, and produce an extension module named ``demo`` "
"in the :file:`build` directory. Depending on the system, the module file "
"will end up in a subdirectory :file:`build/lib.system`, and may have a name "
"like :file:`demo.so` or :file:`demo.pyd`."
msgstr ""
"compilera :file:`demo.c`, et produira un module d'extension nommé ``demo`` "
"dans le dossier :file:`build`. En fonction du système, le fichier du module "
"peut se retrouver dans :file:`build/lib.system`, et son nom peut être :file:"
"`demo.py` ou :file:`demo.pyd`."

#: ../Doc/extending/building.rst:51
msgid ""
"In the :file:`setup.py`, all execution is performed by calling the ``setup`` "
"function. This takes a variable number of keyword arguments, of which the "
"example above uses only a subset. Specifically, the example specifies meta-"
"information to build packages, and it specifies the contents of the "
"package.  Normally, a package will contain of addition modules, like Python "
"source modules, documentation, subpackages, etc. Please refer to the "
"distutils documentation in :ref:`distutils-index` to learn more about the "
"features of distutils; this section explains building extension modules only."
msgstr ""
"Dans le fichier :file:`setup.py`, tout est exécuté en appelant la fonction "
"``setup``. Elle prend une quantité variable d'arguments nommés, l'exemple "
"précédent n'en utilisant qu'une partie. L'exemple précise des méta-"
"informations pour construire les paquets, et définir le contenu du paquet. "
"Normalement un paquet contient des modules additionnels, comme des modules "
"sources, documentation, sous paquets, etc. Referez-vous à la documentation "
"de distutils dans :ref:`distutils-index` pour en apprendre plus sur les "
"fonctionnalités de distutils. Cette section n'explique que la construction "
"de modules d'extension."

#: ../Doc/extending/building.rst:60
msgid ""
"It is common to pre-compute arguments to :func:`setup`, to better structure "
"the driver script. In the example above, the ``ext_modules`` argument to :"
"func:`setup` is a list of extension modules, each of which is an instance of "
"the :class:`~distutils.extension.Extension`. In the example, the instance "
"defines an extension named ``demo`` which is build by compiling a single "
"source file, :file:`demo.c`."
msgstr ""
"Il est classique de pré-construire les arguments de :func:`setup`, pour "
"mieux structurer le script pilote. Dans l'exemple précédent, l'argument "
"``ext_modules`` donné à :func:`setup` est une liste de modules d'extension, "
"dont chacun est une instance de :class:`~distutils.extension.Extension`. "
"Dans l'exemple, l'instance défini une extension nommée ``demo`` qui est "
"construite en compilant un seul fichier source, :file:`demo.c`."

#: ../Doc/extending/building.rst:67
msgid ""
"In many cases, building an extension is more complex, since additional "
"preprocessor defines and libraries may be needed. This is demonstrated in "
"the example below."
msgstr ""

#: ../Doc/extending/building.rst:95
msgid ""
"In this example, :func:`setup` is called with additional meta-information, "
"which is recommended when distribution packages have to be built. For the "
"extension itself, it specifies preprocessor defines, include directories, "
"library directories, and libraries. Depending on the compiler, distutils "
"passes this information in different ways to the compiler. For example, on "
"Unix, this may result in the compilation commands ::"
msgstr ""
"Dans cet exemple, :func:`setup` est appelée avec des méta-informations "
"supplémentaires, ce qui est recommandé lorsque le paquet est amené à être "
"distribué. Pour l'extension elle même, elle donne des variables de "
"préprocesseur (*defines*), dossiers de bibliothèques, et bibliothèques. En "
"fonction du compilateur distutils peut lui donner ces informations de "
"différentes manières, par exemple, sur Linux, on pourrait obtenir cette "
"ligne : ::"

#: ../Doc/extending/building.rst:106
msgid ""
"These lines are for demonstration purposes only; distutils users should "
"trust that distutils gets the invocations right."
msgstr ""
"Ces lignes ne sont qu'à titre d'exemple, les utilisateurs de distutils "
"doivent avoir confiance en distutils qui fera les appels correctement."

#: ../Doc/extending/building.rst:113
msgid "Distributing your extension modules"
msgstr "Distribuer vos modules d'extension"

#: ../Doc/extending/building.rst:115
msgid ""
"When an extension has been successfully build, there are three ways to use "
"it."
msgstr ""
"Lorsqu'une extension a été construite avec succès, il existe trois moyens de "
"l'utiliser."

#: ../Doc/extending/building.rst:117
msgid ""
"End-users will typically want to install the module, they do so by running ::"
msgstr ""
"Typiquement, les utilisateurs vont vouloir installer le module, ils le font "
"en exécutant : ::"

#: ../Doc/extending/building.rst:121
msgid ""
"Module maintainers should produce source packages; to do so, they run ::"
msgstr ""
"Les mainteneurs de modules voudront produire des paquets source, pour ce "
"faire ils exécuteront : ::"

#: ../Doc/extending/building.rst:125
msgid ""
"In some cases, additional files need to be included in a source "
"distribution; this is done through a :file:`MANIFEST.in` file; see the "
"distutils documentation for details."
msgstr ""
"Dans certains cas, des fichiers supplémentaires doivent être joints à la "
"distribution source, c'est possible grâce à un fichier :file:`MANIFEST.in`. "
"Voir la documentation de distutils pour plus de détails."

#: ../Doc/extending/building.rst:129
msgid ""
"If the source distribution has been build successfully, maintainers can also "
"create binary distributions. Depending on the platform, one of the following "
"commands can be used to do so. ::"
msgstr ""
"Si la distribution source a été construite avec succès, les mainteneurs "
"peuvent créer une distribution binaire. En fonction de la plateforme, une "
"des commandes suivantes peut être utilisée. ::"
