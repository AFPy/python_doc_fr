# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/faq/gui.rst:5
msgid "Graphic User Interface FAQ"
msgstr "FAQ Interface Graphique"

#: ../Doc/faq/gui.rst:12
msgid "What platform-independent GUI toolkits exist for Python?"
msgstr "Quelles boites à outils multi-platforme existe-t-il sur Python ?"

#: ../Doc/faq/gui.rst:14
msgid "Depending on what platform(s) you are aiming at, there are several."
msgstr ""

#: ../Doc/faq/gui.rst:19
msgid "Tkinter"
msgstr "Tkinter"

#: ../Doc/faq/gui.rst:21
msgid ""
"Standard builds of Python include an object-oriented interface to the Tcl/Tk "
"widget set, called Tkinter.  This is probably the easiest to install and "
"use. For more info about Tk, including pointers to the source, see the Tcl/"
"Tk home page at https://www.tcl.tk.  Tcl/Tk is fully portable to the Mac OS "
"X, Windows, and Unix platforms."
msgstr ""

#: ../Doc/faq/gui.rst:28
msgid "wxWidgets"
msgstr "wxWidgets"

#: ../Doc/faq/gui.rst:30
msgid ""
"wxWidgets (https://www.wxwidgets.org) is a free, portable GUI class library "
"written in C++ that provides a native look and feel on a number of "
"platforms, with Windows, Mac OS X, GTK, X11, all listed as current stable "
"targets.  Language bindings are available for a number of languages "
"including Python, Perl, Ruby, etc."
msgstr ""

#: ../Doc/faq/gui.rst:36
msgid ""
"wxPython (http://www.wxpython.org) is the Python binding for wxwidgets.  "
"While it often lags slightly behind the official wxWidgets releases, it also "
"offers a number of features via pure Python extensions that are not "
"available in other language bindings.  There is an active wxPython user and "
"developer community."
msgstr ""
"wxPython (http://www.wxpython.org) est le portage Python de wxWidgets. Bien "
"qu’il soit légèrement en retard sur les versions officielles de wxWidgets, "
"il offre également des fonctionnalités propres à Python qui ne sont pas "
"disponibles pour les autres langages. WxPython dispose de plus, d’une "
"communauté d’utilisateurs et de développeurs active."

#: ../Doc/faq/gui.rst:42
msgid ""
"Both wxWidgets and wxPython are free, open source, software with permissive "
"licences that allow their use in commercial products as well as in freeware "
"or shareware."
msgstr ""

#: ../Doc/faq/gui.rst:48
msgid "Qt"
msgstr ""

#: ../Doc/faq/gui.rst:50
msgid ""
"There are bindings available for the Qt toolkit (using either `PyQt <https://"
"riverbankcomputing.com/software/pyqt/intro>`_ or `PySide <https://wiki.qt.io/"
"PySide>`_) and for KDE (`PyKDE4 <https://techbase.kde.org/Languages/Python/"
"Using_PyKDE_4>`__). PyQt is currently more mature than PySide, but you must "
"buy a PyQt license from `Riverbank Computing <https://www.riverbankcomputing."
"com/commercial/license-faq>`_ if you want to write proprietary "
"applications.  PySide is free for all applications."
msgstr ""

#: ../Doc/faq/gui.rst:57
msgid ""
"Qt 4.5 upwards is licensed under the LGPL license; also, commercial licenses "
"are available from `The Qt Company <https://www.qt.io/licensing/>`_."
msgstr ""

#: ../Doc/faq/gui.rst:61
msgid "Gtk+"
msgstr ""

#: ../Doc/faq/gui.rst:63
msgid ""
"PyGtk bindings for the `Gtk+ toolkit <http://www.gtk.org>`_ have been "
"implemented by James Henstridge; see <http://www.pygtk.org>."
msgstr ""

#: ../Doc/faq/gui.rst:67
msgid "FLTK"
msgstr ""

#: ../Doc/faq/gui.rst:69
msgid ""
"Python bindings for `the FLTK toolkit <http://www.fltk.org>`_, a simple yet "
"powerful and mature cross-platform windowing system, are available from `the "
"PyFLTK project <http://pyfltk.sourceforge.net>`_."
msgstr ""

#: ../Doc/faq/gui.rst:75
msgid "FOX"
msgstr ""

#: ../Doc/faq/gui.rst:77
msgid ""
"A wrapper for `the FOX toolkit <http://www.fox-toolkit.org/>`_ called `FXpy "
"<http://fxpy.sourceforge.net/>`_ is available.  FOX supports both Unix "
"variants and Windows."
msgstr ""

#: ../Doc/faq/gui.rst:83
msgid "OpenGL"
msgstr ""

#: ../Doc/faq/gui.rst:85
msgid "For OpenGL bindings, see `PyOpenGL <http://pyopengl.sourceforge.net>`_."
msgstr ""

#: ../Doc/faq/gui.rst:89
msgid "What platform-specific GUI toolkits exist for Python?"
msgstr ""

#: ../Doc/faq/gui.rst:91
msgid ""
"By installing the `PyObjc Objective-C bridge <https://pythonhosted.org/"
"pyobjc/>`_, Python programs can use Mac OS X's Cocoa libraries."
msgstr ""

#: ../Doc/faq/gui.rst:95
msgid ""
":ref:`Pythonwin <windows-faq>` by Mark Hammond includes an interface to the "
"Microsoft Foundation Classes and a Python programming environment that's "
"written mostly in Python using the MFC classes."
msgstr ""

#: ../Doc/faq/gui.rst:101
msgid "Tkinter questions"
msgstr ""

#: ../Doc/faq/gui.rst:104
msgid "How do I freeze Tkinter applications?"
msgstr ""

#: ../Doc/faq/gui.rst:106
msgid ""
"Freeze is a tool to create stand-alone applications.  When freezing Tkinter "
"applications, the applications will not be truly stand-alone, as the "
"application will still need the Tcl and Tk libraries."
msgstr ""

#: ../Doc/faq/gui.rst:110
msgid ""
"One solution is to ship the application with the Tcl and Tk libraries, and "
"point to them at run-time using the :envvar:`TCL_LIBRARY` and :envvar:"
"`TK_LIBRARY` environment variables."
msgstr ""

#: ../Doc/faq/gui.rst:114
msgid ""
"To get truly stand-alone applications, the Tcl scripts that form the library "
"have to be integrated into the application as well. One tool supporting that "
"is SAM (stand-alone modules), which is part of the Tix distribution (http://"
"tix.sourceforge.net/)."
msgstr ""

#: ../Doc/faq/gui.rst:119
msgid ""
"Build Tix with SAM enabled, perform the appropriate call to :c:func:"
"`Tclsam_init`, etc. inside Python's :file:`Modules/tkappinit.c`, and link "
"with libtclsam and libtksam (you might include the Tix libraries as well)."
msgstr ""

#: ../Doc/faq/gui.rst:126
msgid "Can I have Tk events handled while waiting for I/O?"
msgstr ""

#: ../Doc/faq/gui.rst:128
msgid ""
"On platforms other than Windows, yes, and you don't even need threads!  But "
"you'll have to restructure your I/O code a bit.  Tk has the equivalent of "
"Xt's :c:func:`XtAddInput()` call, which allows you to register a callback "
"function which will be called from the Tk mainloop when I/O is possible on a "
"file descriptor.  See :ref:`tkinter-file-handlers`."
msgstr ""

#: ../Doc/faq/gui.rst:136
msgid "I can't get key bindings to work in Tkinter: why?"
msgstr ""

#: ../Doc/faq/gui.rst:138
msgid ""
"An often-heard complaint is that event handlers bound to events with the :"
"meth:`bind` method don't get handled even when the appropriate key is "
"pressed."
msgstr ""

#: ../Doc/faq/gui.rst:141
msgid ""
"The most common cause is that the widget to which the binding applies "
"doesn't have \"keyboard focus\".  Check out the Tk documentation for the "
"focus command. Usually a widget is given the keyboard focus by clicking in "
"it (but not for labels; see the takefocus option)."
msgstr ""
