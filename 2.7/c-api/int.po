# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/c-api/int.rst:6
msgid "Plain Integer Objects"
msgstr "Objets association"

#: ../Doc/c-api/int.rst:13
msgid "This subtype of :c:type:`PyObject` represents a Python integer object."
msgstr ""

#: ../Doc/c-api/int.rst:20
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python plain integer "
"type. This is the same object as ``int`` and ``types.IntType``."
msgstr ""

#: ../Doc/c-api/int.rst:26
msgid ""
"Return true if *o* is of type :c:data:`PyInt_Type` or a subtype of :c:data:"
"`PyInt_Type`."
msgstr ""

#: ../Doc/c-api/int.rst:29
msgid "Allowed subtypes to be accepted."
msgstr ""

#: ../Doc/c-api/int.rst:35
msgid ""
"Return true if *o* is of type :c:data:`PyInt_Type`, but not a subtype of :c:"
"data:`PyInt_Type`."
msgstr ""

#: ../Doc/c-api/int.rst:43
msgid ""
"Return a new :c:type:`PyIntObject` or :c:type:`PyLongObject` based on the "
"string value in *str*, which is interpreted according to the radix in "
"*base*.  If *pend* is non-*NULL*, ``*pend`` will point to the first "
"character in *str* which follows the representation of the number.  If "
"*base* is ``0``, the radix will be determined based on the leading "
"characters of *str*: if *str* starts with ``'0x'`` or ``'0X'``, radix 16 "
"will be used; if *str* starts with ``'0'``, radix 8 will be used; otherwise "
"radix 10 will be used.  If *base* is not ``0``, it must be between ``2`` and "
"``36``, inclusive.  Leading spaces are ignored.  If there are no digits, :"
"exc:`ValueError` will be raised.  If the string represents a number too "
"large to be contained within the machine's :c:type:`long int` type and "
"overflow warnings are being suppressed, a :c:type:`PyLongObject` will be "
"returned.  If overflow warnings are not being suppressed, *NULL* will be "
"returned in this case."
msgstr ""

#: ../Doc/c-api/int.rst:60
msgid "Create a new integer object with a value of *ival*."
msgstr ""

#: ../Doc/c-api/int.rst:62
msgid ""
"The current implementation keeps an array of integer objects for all "
"integers between ``-5`` and ``256``, when you create an int in that range "
"you actually just get back a reference to the existing object. So it should "
"be possible to change the value of ``1``.  I suspect the behaviour of Python "
"in this case is undefined. :-)"
msgstr ""

#: ../Doc/c-api/int.rst:71
msgid ""
"Create a new integer object with a value of *ival*. If the value is larger "
"than ``LONG_MAX`` or smaller than ``LONG_MIN``, a long integer object is "
"returned."
msgstr ""

#: ../Doc/c-api/int.rst:80
msgid ""
"Create a new integer object with a value of *ival*. If the value exceeds "
"``LONG_MAX``, a long integer object is returned."
msgstr ""

#: ../Doc/c-api/int.rst:88
msgid ""
"Will first attempt to cast the object to a :c:type:`PyIntObject`, if it is "
"not already one, and then return its value. If there is an error, ``-1`` is "
"returned, and the caller should check ``PyErr_Occurred()`` to find out "
"whether there was an error, or whether the value just happened to be -1."
msgstr ""

#: ../Doc/c-api/int.rst:96
msgid "Return the value of the object *io*.  No error checking is performed."
msgstr ""

#: ../Doc/c-api/int.rst:101
msgid ""
"Will first attempt to cast the object to a :c:type:`PyIntObject` or :c:type:"
"`PyLongObject`, if it is not already one, and then return its value as "
"unsigned long.  This function does not check for overflow."
msgstr ""

#: ../Doc/c-api/int.rst:110
msgid ""
"Will first attempt to cast the object to a :c:type:`PyIntObject` or :c:type:"
"`PyLongObject`, if it is not already one, and then return its value as "
"unsigned long long, without checking for overflow."
msgstr ""

#: ../Doc/c-api/int.rst:119
msgid ""
"Will first attempt to cast the object to a :c:type:`PyIntObject` or :c:type:"
"`PyLongObject`, if it is not already one, and then return its value as :c:"
"type:`Py_ssize_t`."
msgstr ""

#: ../Doc/c-api/int.rst:130
msgid ""
"Return the system's idea of the largest integer it can handle (:const:"
"`LONG_MAX`, as defined in the system header files)."
msgstr ""

#: ../Doc/c-api/int.rst:136
msgid ""
"Clear the integer free list. Return the number of items that could not be "
"freed."
msgstr ""
