# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/c-api/allocation.rst:6
msgid "Allocating Objects on the Heap"
msgstr "Allouer des objets dans le tas"

#: ../Doc/c-api/allocation.rst:14 ../Doc/c-api/allocation.rst:36
#: ../Doc/c-api/allocation.rst:61
msgid ""
"This function used an :c:type:`int` type for *size*. This might require "
"changes in your code for properly supporting 64-bit systems."
msgstr ""

#: ../Doc/c-api/allocation.rst:24
msgid ""
"Initialize a newly-allocated object *op* with its type and initial "
"reference.  Returns the initialized object.  If *type* indicates that the "
"object participates in the cyclic garbage detector, it is added to the "
"detector's set of observed objects. Other fields of the object are not "
"affected."
msgstr ""
"Permet d'initialiser un objet *op* nouvellement alloué ainsi que son type et "
"sa référence initiale.  Retourne l'objet initialisé.  La présence de *type* "
"indique que l'objet doit être traité par le détecteur d'ordures cycliques, "
"il est de ce fait ajouté à l'ensemble du détecteur d'objets observés. Les "
"autres champs de l'objet ne sont pas affectés."

#: ../Doc/c-api/allocation.rst:33
msgid ""
"This does everything :c:func:`PyObject_Init` does, and also initializes the "
"length information for a variable-size object."
msgstr ""

#: ../Doc/c-api/allocation.rst:43
msgid ""
"Allocate a new Python object using the C structure type *TYPE* and the "
"Python type object *type*.  Fields not defined by the Python object header "
"are not initialized; the object's reference count will be one.  The size of "
"the memory allocation is determined from the :c:member:`~PyTypeObject."
"tp_basicsize` field of the type object."
msgstr ""

#: ../Doc/c-api/allocation.rst:52
msgid ""
"Allocate a new Python object using the C structure type *TYPE* and the "
"Python type object *type*.  Fields not defined by the Python object header "
"are not initialized.  The allocated memory allows for the *TYPE* structure "
"plus *size* fields of the size given by the :c:member:`~PyTypeObject."
"tp_itemsize` field of *type*.  This is useful for implementing objects like "
"tuples, which are able to determine their size at construction time.  "
"Embedding the array of fields into the same allocation decreases the number "
"of allocations, improving the memory management efficiency."
msgstr ""

#: ../Doc/c-api/allocation.rst:68
msgid ""
"Releases memory allocated to an object using :c:func:`PyObject_New` or :c:"
"func:`PyObject_NewVar`.  This is normally called from the :c:member:"
"`~PyTypeObject.tp_dealloc` handler specified in the object's type.  The "
"fields of the object should not be accessed after this call as the memory is "
"no longer a valid Python object."
msgstr ""

#: ../Doc/c-api/allocation.rst:77
msgid ""
"Create a new module object based on a name and table of functions, returning "
"the new module object."
msgstr ""

#: ../Doc/c-api/allocation.rst:80 ../Doc/c-api/allocation.rst:91
#: ../Doc/c-api/allocation.rst:113
msgid ""
"Older versions of Python did not support *NULL* as the value for the "
"*methods* argument."
msgstr ""

#: ../Doc/c-api/allocation.rst:87
msgid ""
"Create a new module object based on a name and table of functions, returning "
"the new module object.  If *doc* is non-*NULL*, it will be used to define "
"the docstring for the module."
msgstr ""

#: ../Doc/c-api/allocation.rst:98
msgid ""
"Create a new module object based on a name and table of functions, returning "
"the new module object.  If *doc* is non-*NULL*, it will be used to define "
"the docstring for the module.  If *self* is non-*NULL*, it will be passed to "
"the functions of the module as their (otherwise *NULL*) first parameter.  "
"(This was added as an experimental feature, and there are no known uses in "
"the current version of Python.)  For *apiver*, the only value which should "
"be passed is defined by the constant :const:`PYTHON_API_VERSION`."
msgstr ""

#: ../Doc/c-api/allocation.rst:109
msgid ""
"Most uses of this function should probably be using the :c:func:"
"`Py_InitModule3` instead; only use this if you are sure you need it."
msgstr ""

#: ../Doc/c-api/allocation.rst:120
msgid ""
"Object which is visible in Python as ``None``.  This should only be accessed "
"using the ``Py_None`` macro, which evaluates to a pointer to this object."
msgstr ""
