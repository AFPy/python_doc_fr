# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/c-api/iter.rst:6
msgid "Iterator Protocol"
msgstr ""

#: ../Doc/c-api/iter.rst:10
msgid "There are two functions specifically for working with iterators."
msgstr ""

#: ../Doc/c-api/iter.rst:15
msgid "Return true if the object *o* supports the iterator protocol."
msgstr ""

#: ../Doc/c-api/iter.rst:17
msgid ""
"This function can return a false positive in the case of old-style classes "
"because those classes always define a :c:member:`tp_iternext` slot with "
"logic that either invokes a :meth:`next` method or raises a :exc:`TypeError`."
msgstr ""

#: ../Doc/c-api/iter.rst:24
msgid ""
"Return the next value from the iteration *o*.  The object must be an "
"iterator (it is up to the caller to check this).  If there are no remaining "
"values, returns *NULL* with no exception set.  If an error occurs while "
"retrieving the item, returns *NULL* and passes along the exception."
msgstr ""

#: ../Doc/c-api/iter.rst:29
msgid ""
"To write a loop which iterates over an iterator, the C code should look "
"something like this::"
msgstr ""
