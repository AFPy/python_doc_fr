# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/c-api/datetime.rst:6
msgid "DateTime Objects"
msgstr "Objets DateTime"

#: ../Doc/c-api/datetime.rst:8
msgid ""
"Various date and time objects are supplied by the :mod:`datetime` module. "
"Before using any of these functions, the header file :file:`datetime.h` must "
"be included in your source (note that this is not included by :file:`Python."
"h`), and the macro :c:macro:`PyDateTime_IMPORT` must be invoked, usually as "
"part of the module initialisation function.  The macro puts a pointer to a C "
"structure into a static variable, :c:data:`PyDateTimeAPI`, that is used by "
"the following macros."
msgstr ""

#: ../Doc/c-api/datetime.rst:16
msgid "Type-check macros:"
msgstr ""

#: ../Doc/c-api/datetime.rst:21
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateType` or a subtype "
"of :c:data:`PyDateTime_DateType`.  *ob* must not be *NULL*."
msgstr ""

#: ../Doc/c-api/datetime.rst:29
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateType`. *ob* must not "
"be *NULL*."
msgstr ""

#: ../Doc/c-api/datetime.rst:37
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateTimeType` or a "
"subtype of :c:data:`PyDateTime_DateTimeType`.  *ob* must not be *NULL*."
msgstr ""

#: ../Doc/c-api/datetime.rst:45
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateTimeType`. *ob* must "
"not be *NULL*."
msgstr ""

#: ../Doc/c-api/datetime.rst:53
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TimeType` or a subtype "
"of :c:data:`PyDateTime_TimeType`.  *ob* must not be *NULL*."
msgstr ""

#: ../Doc/c-api/datetime.rst:61
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TimeType`. *ob* must not "
"be *NULL*."
msgstr ""

#: ../Doc/c-api/datetime.rst:69
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DeltaType` or a subtype "
"of :c:data:`PyDateTime_DeltaType`.  *ob* must not be *NULL*."
msgstr ""

#: ../Doc/c-api/datetime.rst:77
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DeltaType`. *ob* must not "
"be *NULL*."
msgstr ""

#: ../Doc/c-api/datetime.rst:85
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TZInfoType` or a subtype "
"of :c:data:`PyDateTime_TZInfoType`.  *ob* must not be *NULL*."
msgstr ""

#: ../Doc/c-api/datetime.rst:93
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TZInfoType`. *ob* must "
"not be *NULL*."
msgstr ""

#: ../Doc/c-api/datetime.rst:98
msgid "Macros to create objects:"
msgstr ""

#: ../Doc/c-api/datetime.rst:103
msgid ""
"Return a ``datetime.date`` object with the specified year, month and day."
msgstr ""

#: ../Doc/c-api/datetime.rst:110
msgid ""
"Return a ``datetime.datetime`` object with the specified year, month, day, "
"hour, minute, second and microsecond."
msgstr ""

#: ../Doc/c-api/datetime.rst:118
msgid ""
"Return a ``datetime.time`` object with the specified hour, minute, second "
"and microsecond."
msgstr ""

#: ../Doc/c-api/datetime.rst:126
msgid ""
"Return a ``datetime.timedelta`` object representing the given number of "
"days, seconds and microseconds.  Normalization is performed so that the "
"resulting number of microseconds and seconds lie in the ranges documented "
"for ``datetime.timedelta`` objects."
msgstr ""

#: ../Doc/c-api/datetime.rst:133
msgid ""
"Macros to extract fields from date objects.  The argument must be an "
"instance of :c:data:`PyDateTime_Date`, including subclasses (such as :c:data:"
"`PyDateTime_DateTime`).  The argument must not be *NULL*, and the type is "
"not checked:"
msgstr ""

#: ../Doc/c-api/datetime.rst:141
msgid "Return the year, as a positive int."
msgstr ""

#: ../Doc/c-api/datetime.rst:148
msgid "Return the month, as an int from 1 through 12."
msgstr ""

#: ../Doc/c-api/datetime.rst:155
msgid "Return the day, as an int from 1 through 31."
msgstr ""

#: ../Doc/c-api/datetime.rst:159
msgid ""
"Macros to extract fields from datetime objects.  The argument must be an "
"instance of :c:data:`PyDateTime_DateTime`, including subclasses. The "
"argument must not be *NULL*, and the type is not checked:"
msgstr ""

#: ../Doc/c-api/datetime.rst:166 ../Doc/c-api/datetime.rst:198
msgid "Return the hour, as an int from 0 through 23."
msgstr ""

#: ../Doc/c-api/datetime.rst:173 ../Doc/c-api/datetime.rst:205
msgid "Return the minute, as an int from 0 through 59."
msgstr ""

#: ../Doc/c-api/datetime.rst:180 ../Doc/c-api/datetime.rst:212
msgid "Return the second, as an int from 0 through 59."
msgstr ""

#: ../Doc/c-api/datetime.rst:187 ../Doc/c-api/datetime.rst:219
msgid "Return the microsecond, as an int from 0 through 999999."
msgstr ""

#: ../Doc/c-api/datetime.rst:191
msgid ""
"Macros to extract fields from time objects.  The argument must be an "
"instance of :c:data:`PyDateTime_Time`, including subclasses. The argument "
"must not be *NULL*, and the type is not checked:"
msgstr ""

#: ../Doc/c-api/datetime.rst:223
msgid "Macros for the convenience of modules implementing the DB API:"
msgstr ""

#: ../Doc/c-api/datetime.rst:228
msgid ""
"Create and return a new ``datetime.datetime`` object given an argument tuple "
"suitable for passing to ``datetime.datetime.fromtimestamp()``."
msgstr ""

#: ../Doc/c-api/datetime.rst:236
msgid ""
"Create and return a new ``datetime.date`` object given an argument tuple "
"suitable for passing to ``datetime.date.fromtimestamp()``."
msgstr ""
