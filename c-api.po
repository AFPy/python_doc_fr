# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2010, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-10-16 20:12\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 1.7.0\n"

#: ../src/Doc/c-api/abstract.rst:8
msgid "Abstract Objects Layer"
msgstr "Couche d'Abstraction des Objets"

#: ../src/Doc/c-api/abstract.rst:10
msgid ""
"The functions in this chapter interact with Python objects regardless of "
"their type, or with wide classes of object types (e.g. all numerical types, "
"or all sequence types).  When used on object types for which they do not "
"apply, they will raise a Python exception."
msgstr ""
"Dans ce chapitre, les fonctions s'appliquent à des objets Python sans tenir "
"compte de leur type, ou des classes d'objets au sens large (par exemple, "
"tous les types numériques, ou tous les types de séquence). Quand ils sont "
"utilisés sur des types d'objets qui ne correspondent pas, ils lèveront une "
"exception Python."

#: ../src/Doc/c-api/abstract.rst:15
#, fuzzy
msgid ""
"It is not possible to use these functions on objects that are not properly "
"initialized, such as a list object that has been created by :c:func:"
"`PyList_New`, but whose items have not been set to some non-\\ ``NULL`` "
"value yet."
msgstr ""
"Il n'est pas possible d'utiliser ces fonctions sur des objets qui n'ont pas "
"été correctement initialisés, comme un objet liste qui a été créé avec :"
"cfunc:`PyList_New` mais dont les éléments n'ont pas encore été mis à une "
"valeur non-\\ ``NULL``."

#: ../src/Doc/c-api/allocation.rst:6
msgid "Allocating Objects on the Heap"
msgstr "Allouer des objets dans le tas"

# 2c8a4da452e94a0d8118b11c358aed8d
#: ../src/Doc/c-api/allocation.rst:24
msgid ""
"Initialize a newly-allocated object *op* with its type and initial "
"reference.  Returns the initialized object.  If *type* indicates that the "
"object participates in the cyclic garbage detector, it is added to the "
"detector's set of observed objects. Other fields of the object are not "
"affected."
msgstr ""

# e33bb606d1654c54bc433c4bb477a7f6
#: ../src/Doc/c-api/allocation.rst:33
msgid ""
"This does everything :c:func:`PyObject_Init` does, and also initializes the "
"length information for a variable-size object."
msgstr ""

# bde10dc2fb184393b5e1f87c16a00a48
#: ../src/Doc/c-api/allocation.rst:43
msgid ""
"Allocate a new Python object using the C structure type *TYPE* and the "
"Python type object *type*.  Fields not defined by the Python object header "
"are not initialized; the object's reference count will be one.  The size of "
"the memory allocation is determined from the :attr:`tp_basicsize` field of "
"the type object."
msgstr ""

# ac8f55e6c9fd4b38a4c78f1c8be33e19
#: ../src/Doc/c-api/allocation.rst:52
msgid ""
"Allocate a new Python object using the C structure type *TYPE* and the "
"Python type object *type*.  Fields not defined by the Python object header "
"are not initialized.  The allocated memory allows for the *TYPE* structure "
"plus *size* fields of the size given by the :attr:`tp_itemsize` field of "
"*type*.  This is useful for implementing objects like tuples, which are able "
"to determine their size at construction time.  Embedding the array of fields "
"into the same allocation decreases the number of allocations, improving the "
"memory management efficiency."
msgstr ""

# 194357a88b7a444b99b1a5572132d9c4
#: ../src/Doc/c-api/allocation.rst:68
msgid ""
"Releases memory allocated to an object using :c:func:`PyObject_New` or :c:"
"func:`PyObject_NewVar`.  This is normally called from the :attr:`tp_dealloc` "
"handler specified in the object's type.  The fields of the object should not "
"be accessed after this call as the memory is no longer a valid Python object."
msgstr ""

# 6dd5838697974f7e927854b58424509c
#: ../src/Doc/c-api/allocation.rst:77
msgid ""
"Create a new module object based on a name and table of functions, returning "
"the new module object."
msgstr ""

# 038901cbfa1143dc87db2f45a4e484b4
#: ../src/Doc/c-api/allocation.rst:87
msgid ""
"Create a new module object based on a name and table of functions, returning "
"the new module object.  If *doc* is non-*NULL*, it will be used to define "
"the docstring for the module."
msgstr ""

# 92ecbbe82e7b40d9b8cba8e2b7d69cb1
#: ../src/Doc/c-api/allocation.rst:98
msgid ""
"Create a new module object based on a name and table of functions, returning "
"the new module object.  If *doc* is non-*NULL*, it will be used to define "
"the docstring for the module.  If *self* is non-*NULL*, it will passed to "
"the functions of the module as their (otherwise *NULL*) first parameter.  "
"(This was added as an experimental feature, and there are no known uses in "
"the current version of Python.)  For *apiver*, the only value which should "
"be passed is defined by the constant :const:`PYTHON_API_VERSION`."
msgstr ""

# 1d5c9733dc57433aba8a68469fa29d35
#: ../src/Doc/c-api/allocation.rst:109
msgid ""
"Most uses of this function should probably be using the :c:func:"
"`Py_InitModule3` instead; only use this if you are sure you need it."
msgstr ""

# 43b91febca554cbca2527e1a503ef0c8
#: ../src/Doc/c-api/allocation.rst:120
msgid ""
"Object which is visible in Python as ``None``.  This should only be accessed "
"using the ``Py_None`` macro, which evaluates to a pointer to this object."
msgstr ""

#: ../src/Doc/c-api/arg.rst:6
msgid "Parsing arguments and building values"
msgstr "Analyse des arguments et construction des valeurs"

#: ../src/Doc/c-api/arg.rst:8
msgid ""
"These functions are useful when creating your own extensions functions and "
"methods.  Additional information and examples are available in :ref:"
"`extending-index`."
msgstr ""
"Ces fonctions sont utiles pour créer vos propres fonctions et méthodes "
"d'extensions. Des informations supplémentaires et des exemples sont "
"disponibles ici: ref:`extending-index`."

#: ../src/Doc/c-api/arg.rst:12
#, fuzzy
msgid ""
"The first three of these functions described, :c:func:`PyArg_ParseTuple`, :c:"
"func:`PyArg_ParseTupleAndKeywords`, and :c:func:`PyArg_Parse`, all use "
"*format strings* which are used to tell the function about the expected "
"arguments.  The format strings use the same syntax for each of these "
"functions."
msgstr ""
"Dans Les trois premières de ces fonctions décrites, :cfunc: "
"`PyArg_ParseTuple`, :cfunc: `PyArg_ParseTupleAndKeywords`, et :cfunc: "
"`PyArg_Parse`, toutes utilisent *des chaînes de format* qui sont utilisées "
"pour indiquer à la fonction les arguments attendus. Les chaînes de format "
"utilise la même syntaxe pour chacune de ces fonctions."

#: ../src/Doc/c-api/arg.rst:18
msgid ""
"A format string consists of zero or more \"format units.\"  A format unit "
"describes one Python object; it is usually a single character or a "
"parenthesized sequence of format units.  With a few exceptions, a format "
"unit that is not a parenthesized sequence normally corresponds to a single "
"address argument to these functions.  In the following description, the "
"quoted form is the format unit; the entry in (round) parentheses is the "
"Python object type that matches the format unit; and the entry in [square] "
"brackets is the type of the C variable(s) whose address should be passed."
msgstr ""
"Une chaîne de format se compose de zéro ou plusieurs \"unités de format\". "
"Une unité de format décrit un objet Python, elle est généralement composée "
"d'un seul caractère ou d'une séquence d'unités de format entre parenthèses. "
"À quelques exceptions près, une unité de format qui n'est pas une séquence "
"entre parenthèses correspond normalement à un argument d'une seule adresse "
"pour ces fonctions. Dans la description qui suit, la forme entre guillemets "
"est l'unité de format, l'entrée entre parenthèses est le type d'objet Python "
"qui correspond à l'unité de format, et l'entrée entre crochets est le type "
"de la variable C (ou des variables) dont l'adresse doit être donnée."

#: ../src/Doc/c-api/arg.rst:27
#, fuzzy
msgid ""
"These formats allow to access an object as a contiguous chunk of memory. You "
"don't have to provide raw storage for the returned unicode or bytes area.  "
"Also, you won't have to release any memory yourself, except with the ``es``, "
"``es#``, ``et`` and ``et#`` formats."
msgstr ""
"Ces formats n'attendent pas que vous fournissiez un stockage sous forme "
"brute pour les chaînes ou octets retournés. Alors, vous n'aurez pas à "
"libérer la mémoire vous-même, excepté pour les formats ``es``, ``es#``, "
"``et`` et ``et#``."

#: ../src/Doc/c-api/arg.rst:33
#, fuzzy
msgid ""
"Convert a Python string or Unicode object to a C pointer to a character "
"string.  You must not provide storage for the string itself; a pointer to an "
"existing string is stored into the character pointer variable whose address "
"you pass.  The C string is NUL-terminated.  The Python string must not "
"contain embedded NUL bytes; if it does, a :exc:`TypeError` exception is "
"raised. Unicode objects are converted to C strings using the default "
"encoding.  If this conversion fails, a :exc:`UnicodeError` is raised."
msgstr ""
"Convertir un objet Unicode en un pointeur C sur une chaîne de caractères. Un "
"pointeur sur une chaîne existante est stocké dans le pointeur de la variable "
"caractère dont vous passez l'adresse. La chaîne C est terminée par le "
"caractère NUL. La chaîne Python ne doit pas contenir d'octets NUL, sinon une "
"exception de type :exc:`TypeError` sera levée. Les objets Unicode sont "
"convertis en chaîne de caractères C avec l'encodage ``'utf-8'``. Si la "
"conversion échoue, une exception :exc:`UnicodeError` sera levée."

# 24f73d7e4c7a4cd9a07bd32408029478
#: ../src/Doc/c-api/arg.rst:42
msgid ""
"This variant on ``s`` stores into two C variables, the first one a pointer "
"to a character string, the second one its length.  In this case the Python "
"string may contain embedded null bytes.  Unicode objects pass back a pointer "
"to the default encoded string version of the object if such a conversion is "
"possible.  All other read-buffer compatible objects pass back a reference to "
"the raw internal data representation."
msgstr ""

#: ../src/Doc/c-api/arg.rst:49
#, fuzzy
msgid ""
"Starting with Python 2.5 the type of the length argument can be controlled "
"by defining the macro :c:macro:`PY_SSIZE_T_CLEAN` before including :file:"
"`Python.h`.  If the macro is defined, length is a :c:type:`Py_ssize_t` "
"rather than an int."
msgstr ""
"Pour toutes les variantes de formats ``#`` (``s#``, ``y#``, etc), le type de "
"l'argument longueur (int ou :ctype:`Py_ssize_t`) est contrôlé en définissant "
"la macro :cmacro:`PY_SSIZE_T_CLEAN` avant d'inclure le fichier :file:`Python."
"h`. Si la macro est définie, la longueur est de type :ctype:`Py_ssize_t`  au "
"lieu d'être de type :ctype:`int`. Ce comportement changera dans une future "
"version de Python, qui supportera seulement :ctype:`Py_ssize_t` et plus :"
"ctype:`int`. Il est préférable de toujours définir :cmacro:"
"`PY_SSIZE_T_CLEAN`."

#: ../src/Doc/c-api/arg.rst:55
#, fuzzy
msgid ""
"Similar to ``s#``, this code fills a Py_buffer structure provided by the "
"caller.  The buffer gets locked, so that the caller can subsequently use the "
"buffer even inside a ``Py_BEGIN_ALLOW_THREADS`` block; the caller is "
"responsible for calling ``PyBuffer_Release`` with the structure after it has "
"processed the data."
msgstr ""
"Néanmoins, quand une structure :ctype:`Py_buffer` est en cours de "
"remplissage, le tampon sous-jacent est verrouillé pour permettre à "
"l'appelant d'utiliser le buffer par la suite, même lorsqu'il est à "
"'intérieur d'un bloc :ctype:`Py_BEGIN_ALLOW_THREADS`. Ceci sans le risque "
"pour les données mutables de voir leur taille changée ou d'être supprimées. "
"En conséquence, **il vous appartient d'appeler** :cfunc:`PyBuffer_Release` "
"après que vous ayez terminé de traiter les données (ou après une "
"interruption prémataturée du traitement de ces données)."

#: ../src/Doc/c-api/arg.rst:64
msgid ""
"Like ``s``, but the Python object may also be ``None``, in which case the C "
"pointer is set to *NULL*."
msgstr ""
"Comme ``s``, mais l'objet Python peut aussi être ``None``, auquel cas le "
"pointeur C devient *NULL*."

# 71de8fc38da34b6d94d00fd020d3e453
#: ../src/Doc/c-api/arg.rst:68
msgid "This is to ``s#`` as ``z`` is to ``s``."
msgstr ""

# a1f068e453954778b363e8203849de3d
#: ../src/Doc/c-api/arg.rst:71
msgid "This is to ``s*`` as ``z`` is to ``s``."
msgstr ""

# 429a748eb24e4cdd9ac0df60f836468c
#: ../src/Doc/c-api/arg.rst:76
msgid ""
"Convert a Python Unicode object to a C pointer to a NUL-terminated buffer of "
"16-bit Unicode (UTF-16) data.  As with ``s``, there is no need to provide "
"storage for the Unicode data buffer; a pointer to the existing Unicode data "
"is stored into the :c:type:`Py_UNICODE` pointer variable whose address you "
"pass."
msgstr ""

#: ../src/Doc/c-api/arg.rst:83
#, fuzzy
msgid ""
"This variant on ``u`` stores into two C variables, the first one a pointer "
"to a Unicode data buffer, the second one its length. Non-Unicode objects are "
"handled by interpreting their read-buffer pointer as pointer to a :c:type:"
"`Py_UNICODE` array."
msgstr ""
"Cette variante de ``u`` stocke son résultat dans deux variables C, la "
"première pointant vers un tampon de données Unicode, la seconde donnant sa "
"longueur."

#: ../src/Doc/c-api/arg.rst:89
#, fuzzy
msgid ""
"This variant on ``s`` is used for encoding Unicode and objects convertible "
"to Unicode into a character buffer. It only works for encoded data without "
"embedded NUL bytes."
msgstr ""
"Cette variante ``s`` est utilisée pour encoder de l'Unicode dans un buffer "
"de caractères. Cela ne fonctionne que pour les données encodées qui ne "
"contiennent pas d'octets NUL."

#: ../src/Doc/c-api/arg.rst:93
#, fuzzy
msgid ""
"This format requires two arguments.  The first is only used as input, and "
"must be a :c:type:`const char\\*` which points to the name of an encoding as "
"a NUL-terminated string, or *NULL*, in which case the default encoding is "
"used.  An exception is raised if the named encoding is not known to Python. "
"The second argument must be a :c:type:`char\\*\\*`; the value of the pointer "
"it references will be set to a buffer with the contents of the argument "
"text.  The text will be encoded in the encoding specified by the first "
"argument."
msgstr ""
"Ce format requiert deux arguments. Le premier est seulement utilisé en "
"entrée, et doit être de type :ctype:`const char\\*`. Il pointe sur une "
"chaîne de caractères contenant le nom d'un encodage, terminée par NUL. Si "
"cette chaîne contient *NULL*, l'encoding ``'utf-8'`` sera utilisé. Une "
"exception sera levé si le nom de l'encodage est inconnu de Python. Le second "
"argument doit être de type :ctype:`char\\*\\*`, la valeur du pointeur qu'il "
"référence sera fixée à la valeur d'un tampon contenant le texte de "
"l'argument. Le texte sera encodé avec l'encodage spécifié dans le premier "
"argument. "

#: ../src/Doc/c-api/arg.rst:102
#, fuzzy
msgid ""
":c:func:`PyArg_ParseTuple` will allocate a buffer of the needed size, copy "
"the encoded data into this buffer and adjust *\\*buffer* to reference the "
"newly allocated storage.  The caller is responsible for calling :c:func:"
"`PyMem_Free` to free the allocated buffer after use."
msgstr ""
":cfunc:`PyArg_ParseTuple` allouera un tampon de la taille nécessaire, "
"copiera les données encodées dans ce tampon et fera pointer *\\*buffer* vers "
"le nouveau tampon alloué. L'appelant est responsable de l'invocation de :"
"cfunc:`PyMem_Free` pour libérer le tampon alloué après utilisatiopn"

#: ../src/Doc/c-api/arg.rst:108
#, fuzzy
msgid ""
"Same as ``es`` except that 8-bit string objects are passed through without "
"recoding them.  Instead, the implementation assumes that the string object "
"uses the encoding passed in as parameter."
msgstr ""
"Comme pour ``es``, excepté que les objets chaînes de caractères sont passées "
"sans les ré-encoder. À la place, l'implémentation assume que l'objet chaîne "
"de caractères utilise l'encodage passé en tant que paramètre."

#: ../src/Doc/c-api/arg.rst:113
#, fuzzy
msgid ""
"This variant on ``s#`` is used for encoding Unicode and objects convertible "
"to Unicode into a character buffer.  Unlike the ``es`` format, this variant "
"allows input data which contains NUL characters."
msgstr ""
"Cette variante de ``s#`` est utilisée pour encoder de l'Unicode dans un "
"tampon de caractères. Contrairement au format ``es``, cette variante "
"autorise les caractères NUL dans les données d'entrée."

#: ../src/Doc/c-api/arg.rst:117
#, fuzzy
msgid ""
"It requires three arguments.  The first is only used as input, and must be "
"a :c:type:`const char\\*` which points to the name of an encoding as a NUL-"
"terminated string, or *NULL*, in which case the default encoding is used.  "
"An exception is raised if the named encoding is not known to Python. The "
"second argument must be a :c:type:`char\\*\\*`; the value of the pointer it "
"references will be set to a buffer with the contents of the argument text.  "
"The text will be encoded in the encoding specified by the first argument.  "
"The third argument must be a pointer to an integer; the referenced integer "
"will be set to the number of bytes in the output buffer."
msgstr ""
"Ce format requiert deux arguments. Le premier est seulement utilisé en "
"entrée, et doit être de type :ctype:`const char\\*`. Il pointe sur une "
"chaîne de caractères contenant le nom d'un encodage, terminée par NUL. Si "
"cette chaîne contient *NULL*, l'encoding ``'utf-8'`` sera utilisé. Une "
"exception sera levé si le nom de l'encodage est inconnu de Python. Le second "
"argument doit être de type :ctype:`char\\*\\*`, la valeur du pointeur qu'il "
"référence sera fixée à la valeur d'un tampon contenant le texte de "
"l'argument. Le texte sera encodé avec l'encodage spécifié dans le premier "
"argument. Le troisième argument doit être un pointeur sur un entier ; "
"l'entier référencé sera positionné avec le nombre d'octets dans le tampon de "
"sortie"

#: ../src/Doc/c-api/arg.rst:127
msgid "There are two modes of operation:"
msgstr "Il existe deux modes de fonctionnement :"

#: ../src/Doc/c-api/arg.rst:129
#, fuzzy
msgid ""
"If *\\*buffer* points a *NULL* pointer, the function will allocate a buffer "
"of the needed size, copy the encoded data into this buffer and set *"
"\\*buffer* to reference the newly allocated storage.  The caller is "
"responsible for calling :c:func:`PyMem_Free` to free the allocated buffer "
"after usage."
msgstr ""
"Si *\\*buffer* pointe sur un pointeur *NULL*, la fonction allouera un tampon "
"de la taille nécessaire, copiera les données encodées dans ce tampon et "
"mettra dans *\\*buffer* le nouveau tampon alloué. L'appelant est responsable "
"de la libération de la mémoire après utilisation du tampon, par un appel à :"
"cfunc:`PyMem_Free`."

#: ../src/Doc/c-api/arg.rst:135
#, fuzzy
msgid ""
"If *\\*buffer* points to a non-*NULL* pointer (an already allocated "
"buffer), :c:func:`PyArg_ParseTuple` will use this location as the buffer and "
"interpret the initial value of *\\*buffer_length* as the buffer size.  It "
"will then copy the encoded data into the buffer and NUL-terminate it.  If "
"the buffer is not large enough, a :exc:`ValueError` will be set."
msgstr ""
"Si *\\*buffer* pointe sur un pointeur qui n'est pas *NULL* (un tampon déjà "
"alloué), :cfunc:`PyArg_ParseTuple` utilisera cet espace comme le tampon et "
"interprétera la valeur initiale de *\\*buffer_length* comme la taille du "
"tampon. Il copiera alors les données encodées dans le tampon et terminera ce "
"dernier par NUL. Si le tampon n'est pas de taille suffisante, une exception :"
"exc:`ValueError` sera levée."

#: ../src/Doc/c-api/arg.rst:141
msgid ""
"In both cases, *\\*buffer_length* is set to the length of the encoded data "
"without the trailing NUL byte."
msgstr ""
"Dans les deux cas, *\\*buffer_length* est la longueur des données encodées, "
"sans l'octet NUL de fin."

#: ../src/Doc/c-api/arg.rst:145
#, fuzzy
msgid ""
"Same as ``es#`` except that string objects are passed through without "
"recoding them. Instead, the implementation assumes that the string object "
"uses the encoding passed in as parameter."
msgstr ""
"Comme pour ``es#`` excepté que les objets chaînes de caractères sont traités "
"sans recodage. À la place, l'implémentation assume que les objets de type "
"chaînes de caractères utilisent l'encodage passé en tant que paramètre."

#: ../src/Doc/c-api/arg.rst:150
#, fuzzy
msgid ""
"Convert a nonnegative Python integer to an unsigned tiny int, stored in a C :"
"c:type:`unsigned char`."
msgstr ""
"Convertit un entier Python positif ou nul en un unsigned tiny int, stocké "
"dans un C :ctype:`unsigned char`."

#: ../src/Doc/c-api/arg.rst:154
#, fuzzy
msgid ""
"Convert a Python integer to a tiny int without overflow checking, stored in "
"a C :c:type:`unsigned char`."
msgstr ""
"Convertit un entier Python en un tiny int sans vérifier le débordement, "
"stocké dans un C :ctype:`unsigned char`."

#: ../src/Doc/c-api/arg.rst:160
#, fuzzy
msgid "Convert a Python integer to a C :c:type:`short int`."
msgstr "Convertit un entier Python en un C :ctype:`short int`."

#: ../src/Doc/c-api/arg.rst:163
#, fuzzy
msgid ""
"Convert a Python integer to a C :c:type:`unsigned short int`, without "
"overflow checking."
msgstr ""
"Convertit un entier Python en un C :ctype:`unsigned short int`, sans "
"contrôle de débordement."

#: ../src/Doc/c-api/arg.rst:169
#, fuzzy
msgid "Convert a Python integer to a plain C :c:type:`int`."
msgstr "Convertit un entier Python en un type C :ctype:`int`."

#: ../src/Doc/c-api/arg.rst:172
#, fuzzy
msgid ""
"Convert a Python integer to a C :c:type:`unsigned int`, without overflow "
"checking."
msgstr ""
"Convertit un entier Python en un type C :ctype:`unsigned int`, sans contrôle "
"de le débordement."

#: ../src/Doc/c-api/arg.rst:178
#, fuzzy
msgid "Convert a Python integer to a C :c:type:`long int`."
msgstr "Convertit un entier Python en un type  :ctype:`long int`."

#: ../src/Doc/c-api/arg.rst:181
#, fuzzy
msgid ""
"Convert a Python integer or long integer to a C :c:type:`unsigned long` "
"without overflow checking."
msgstr ""
"Convertit un entier Python en un type C :ctype:`unsigned long` sans en "
"vérifier le débordement."

#: ../src/Doc/c-api/arg.rst:187
#, fuzzy
msgid ""
"Convert a Python integer to a C :c:type:`long long`.  This format is only "
"available on platforms that support :c:type:`long long` (or :c:type:`_int64` "
"on Windows)."
msgstr ""
"Convertit un entier Python en un type C :ctype:`long long`. Ce format est "
"uniquement disponible sur les plates-formes qui prennent en charge :ctype:"
"`long long` (ou :ctype:`_int64` sous Windows)."

#: ../src/Doc/c-api/arg.rst:192
#, fuzzy
msgid ""
"Convert a Python integer or long integer to a C :c:type:`unsigned long long` "
"without overflow checking.  This format is only available on platforms that "
"support :c:type:`unsigned long long` (or :c:type:`unsigned _int64` on "
"Windows)."
msgstr ""
"Convertit un entier Python en un type C :ctype:`unsigned long long` sans en "
"vérifier le débordement. Ce format est uniquement disponible sur les plates-"
"formes qui prennent en charge :ctype:`unsigned long long` (ou :ctype:"
"`unsigned _int64` sous Windows)."

#: ../src/Doc/c-api/arg.rst:200
#, fuzzy
msgid "Convert a Python integer or long integer to a C :c:type:`Py_ssize_t`."
msgstr "Convertit un entier Python en un type C :ctype:`Py_ssize_t`."

#: ../src/Doc/c-api/arg.rst:205
#, fuzzy
msgid ""
"Convert a Python character, represented as a string of length 1, to a C :c:"
"type:`char`."
msgstr ""
"Convertit un caractère Python, représenté comme un objet :class:`str` de "
"longueur 1, en un type C :ctype:`int`."

#: ../src/Doc/c-api/arg.rst:209
#, fuzzy
msgid "Convert a Python floating point number to a C :c:type:`float`."
msgstr "Convertit un nombre flottant Python vers un type C :ctype:`float`."

#: ../src/Doc/c-api/arg.rst:212
#, fuzzy
msgid "Convert a Python floating point number to a C :c:type:`double`."
msgstr "Convertit un nombre flottant Python vers un type C :ctype:`double`."

#: ../src/Doc/c-api/arg.rst:215
#, fuzzy
msgid "Convert a Python complex number to a C :c:type:`Py_complex` structure."
msgstr ""
"Convertit un nombre complexe Python vers une structure C :ctype:`Py_complex`."

#: ../src/Doc/c-api/arg.rst:218
msgid ""
"Store a Python object (without any conversion) in a C object pointer.  The C "
"program thus receives the actual object that was passed.  The object's "
"reference count is not increased.  The pointer stored is not *NULL*."
msgstr ""
"Stocke un objet Python (sans aucune conversion) en un pointeur sur un objet "
"C. Ainsi, Le programme C reçoit l'objet réel qui a été passé. Le compteur de "
"référence sur l'objet n'est pas incrémenté. Le pointeur stocké n'est pas "
"*NULL*."

#: ../src/Doc/c-api/arg.rst:223
#, fuzzy
msgid ""
"Store a Python object in a C object pointer.  This is similar to ``O``, but "
"takes two C arguments: the first is the address of a Python type object, the "
"second is the address of the C variable (of type :c:type:`PyObject\\*`) into "
"which the object pointer is stored.  If the Python object does not have the "
"required type, :exc:`TypeError` is raised."
msgstr ""
"Stocke un objet Python en pointeur sur un objet C. C'est comparable à ``O``, "
"mais la fonction prend deux arguments C : le premier est l'adresse d'un "
"objet de type Python, le second est l'adresse d'une variable C (de type :"
"ctype:`P:exc:`TypeError`yObject\\*`) dans laquelle le pointeur sur l'objet "
"sera stocké. Si l'objet Python n'est pas du type requis, une exception :exc:"
"`TypeError` sera levée."

#: ../src/Doc/c-api/arg.rst:230
#, fuzzy
msgid ""
"Convert a Python object to a C variable through a *converter* function. This "
"takes two arguments: the first is a function, the second is the address of a "
"C variable (of arbitrary type), converted to :c:type:`void \\*`. The "
"*converter* function in turn is called as follows::"
msgstr ""
"Converti un objet Python en une variable C en utilisant une fonction de "
"*conversion*. La fonction prend deux arguments : le premier est une "
"fonction, le second est l'adresse d'une variable C (de type arbitraire), "
"convertie en :ctype:`void \\*`. La fonction de *conversion* est appellée à "
"son tour de la manière suivante :"

#: ../src/Doc/c-api/arg.rst:237
#, fuzzy
msgid ""
"where *object* is the Python object to be converted and *address* is the :c:"
"type:`void\\*` argument that was passed to the :c:func:`PyArg_Parse\\*` "
"function.  The returned *status* should be ``1`` for a successful conversion "
"and ``0`` if the conversion has failed.  When the conversion fails, the "
"*converter* function should raise an exception and leave the content of "
"*address* unmodified."
msgstr ""
"Où *objet* est l'objet Python à convertir et *adresse* est l'argument de "
"type :ctype:`void\\*` qui a été passé à la function :cfunc:`PyArg_Parse\\*`. "
"Le status retourné devrait être ``1`` pour conversion réussie, et ``0`` si "
"la conversion a échouée. Quand la conversion échoue, la fonction de "
"*conversion* devrait lever une exception et laisser le contenu de *adresse* "
"non modifié."

#: ../src/Doc/c-api/arg.rst:245
#, fuzzy
msgid ""
"Like ``O`` but requires that the Python object is a string object.  Raises :"
"exc:`TypeError` if the object is not a string object.  The C variable may "
"also be declared as :c:type:`PyObject\\*`."
msgstr ""
"Exige que l'objet Python soit un objet Unicode, sans tenter aucune "
"conversion. Lève une :exc:`TypeError` si l'objet n'est pas un objet Unicode. "
"La variable C peut également être déclarée en tant que :ctype:`PyObject\\*`."

#: ../src/Doc/c-api/arg.rst:250
#, fuzzy
msgid ""
"Like ``O`` but requires that the Python object is a Unicode object.  Raises :"
"exc:`TypeError` if the object is not a Unicode object.  The C variable may "
"also be declared as :c:type:`PyObject\\*`."
msgstr ""
"Exige que l'objet Python soit un objet Unicode, sans tenter aucune "
"conversion. Lève une :exc:`TypeError` si l'objet n'est pas un objet Unicode. "
"La variable C peut également être déclarée en tant que :ctype:`PyObject\\*`."

# b62f4d1583a942d78aad92742e8be8c0
#: ../src/Doc/c-api/arg.rst:255
msgid ""
"Like ``s#``, but accepts any object which implements the read-only buffer "
"interface.  The :c:type:`char\\*` variable is set to point to the first byte "
"of the buffer, and the :c:type:`int` is set to the length of the buffer. "
"Only single-segment buffer objects are accepted; :exc:`TypeError` is raised "
"for all others."
msgstr ""

# 6726d0d3eba04741895e71cee31ecd2a
#: ../src/Doc/c-api/arg.rst:262
msgid ""
"Similar to ``s``, but accepts any object which implements the read-write "
"buffer interface.  The caller must determine the length of the buffer by "
"other means, or use ``w#`` instead.  Only single-segment buffer objects are "
"accepted; :exc:`TypeError` is raised for all others."
msgstr ""

# 1a3b118a3d9a4e368d0487f62a6da26c
#: ../src/Doc/c-api/arg.rst:268
msgid ""
"Like ``s#``, but accepts any object which implements the read-write buffer "
"interface.  The :c:type:`char \\*` variable is set to point to the first "
"byte of the buffer, and the :c:type:`Py_ssize_t` is set to the length of the "
"buffer.  Only single-segment buffer objects are accepted; :exc:`TypeError` "
"is raised for all others."
msgstr ""

# b4b82f7798c7467bb9e3b339b591f77b
#: ../src/Doc/c-api/arg.rst:275
msgid "This is to ``w`` what ``s*`` is to ``s``."
msgstr ""

#: ../src/Doc/c-api/arg.rst:280
msgid ""
"The object must be a Python sequence whose length is the number of format "
"units in *items*.  The C arguments must correspond to the individual format "
"units in *items*.  Format units for sequences may be nested."
msgstr ""
"L'objet doit être une séquence Python dont la longueur est le nombre "
"d'unités de formats dans *articles*. Les arguments C doivent correspondre à "
"chaque unité de format particulière dans *articles*. Les unités de formats "
"pour les séquences peuvent être imbriquées. "

# 56114c1af04c450c84a493d77d786538
#: ../src/Doc/c-api/arg.rst:286
msgid ""
"Prior to Python version 1.5.2, this format specifier only accepted a tuple "
"containing the individual parameters, not an arbitrary sequence. Code which "
"previously caused :exc:`TypeError` to be raised here may now proceed without "
"an exception.  This is not expected to be a problem for existing code."
msgstr ""

#: ../src/Doc/c-api/arg.rst:292
#, fuzzy
msgid ""
"It is possible to pass Python long integers where integers are requested; "
"however no proper range checking is done --- the most significant bits are "
"silently truncated when the receiving field is too small to receive the "
"value (actually, the semantics are inherited from downcasts in C --- your "
"mileage may vary)."
msgstr ""
"Il est possible de passer des entiers de type \"long\" (dont la valeur "
"dépasse le :const:`LONG_MAX` de la plateforme), cependant aucun contrôle "
"d'intervalle n'est effectué --- les bits les plus significatifs sont "
"tronqués silencieusement quand le champ cible est trop petit (en fait, la "
"sémantique est héritée du transtypage en C --- la perte peut varier)."

#: ../src/Doc/c-api/arg.rst:298
msgid ""
"A few other characters have a meaning in a format string.  These may not "
"occur inside nested parentheses.  They are:"
msgstr ""
"Quelques autres caractères ont un sens dans une chaîne de format. On ne doit "
"pas les trouvées dans des parenthèses imbriquées. Ce sont :"

#: ../src/Doc/c-api/arg.rst:302
#, fuzzy
msgid ""
"Indicates that the remaining arguments in the Python argument list are "
"optional.  The C variables corresponding to optional arguments should be "
"initialized to their default value --- when an optional argument is not "
"specified, :c:func:`PyArg_ParseTuple` does not touch the contents of the "
"corresponding C variable(s)."
msgstr ""
"Incique que les arguments restants dans la liste Python des arguments sont "
"optionels. Les variables C correspondant à ces arguments optionnels "
"devraient être initialisés avec leur valeur par défaut --- quan un argument "
"optionnel n'est pas spécifié, la fonction :cfunc:`PyArg_ParseTuple` ne "
"modifie par le contenu de la ou des variables C correspondantes."

#: ../src/Doc/c-api/arg.rst:309
#, fuzzy
msgid ""
"The list of format units ends here; the string after the colon is used as "
"the function name in error messages (the \"associated value\" of the "
"exception that :c:func:`PyArg_ParseTuple` raises)."
msgstr ""
"La liste des unités de format s'arrête ici ; la chaîne après les deux-points "
"est utilisée comme le nom de la fonction dans les messages d'erreur (la "
"\"valeur associée\" de l'exception levée par :cfunc:`PyArg_ParseTuple`)."

#: ../src/Doc/c-api/arg.rst:314
msgid ""
"The list of format units ends here; the string after the semicolon is used "
"as the error message *instead* of the default error message.  ``:`` and ``;"
"`` mutually exclude each other."
msgstr ""
"La liste des unités de format s'arrête ici ; la chaîne après le point-"
"virgule est utilise comme message d'erreur *au lieu* du message d'erreur par "
"défaut. ``:`` et ``;`` sont mutuellement exclusifs. "

#: ../src/Doc/c-api/arg.rst:318
msgid ""
"Note that any Python object references which are provided to the caller are "
"*borrowed* references; do not decrement their reference count!"
msgstr ""
"Notez que n'importe quelles références sur un objet Python qui sont données "
"à l'appelant sont des références *empruntées* ; ne décrémentez pas leur "
"compteur de références ! "

#: ../src/Doc/c-api/arg.rst:321
msgid ""
"Additional arguments passed to these functions must be addresses of "
"variables whose type is determined by the format string; these are used to "
"store values from the input tuple.  There are a few cases, as described in "
"the list of format units above, where these parameters are used as input "
"values; they should match what is specified for the corresponding format "
"unit in that case."
msgstr ""
"Les arguments additionnels qui sont donnés à ces fonctions doivent être des "
"adresses de variables dont le type est déterminé par la chaîine de format. "
"Elles sont utilisées pour stocker les valeurs du n-uplet d'entrée. Il y a "
"quelques cas, comme décrit précédemment dans le liste des unités de formats, "
"où ces paramètres sont utilisés comme valeurs d'entrée. Dans ce cas, ils "
"devraient correspondre à ce qui est spécifié pour l'unité de format "
"correspondante."

#: ../src/Doc/c-api/arg.rst:327
#, fuzzy
msgid ""
"For the conversion to succeed, the *arg* object must match the format and "
"the format must be exhausted.  On success, the :c:func:`PyArg_Parse\\*` "
"functions return true, otherwise they return false and raise an appropriate "
"exception. When the :c:func:`PyArg_Parse\\*` functions fail due to "
"conversion failure in one of the format units, the variables at the "
"addresses corresponding to that and the following format units are left "
"untouched."
msgstr ""
"Pour que la conversion réussise, l'objet *arg* doit correspondre au format, "
"et le format doit être épuisé. En cas de succès, les fonctions :cfunc:"
"`PyArg_Parse\\*` retournent vrai, sinon elles retournent faux et lèvent "
"l'exception appropriée. Quand une fonction :cfunc:`PyArg_Parse\\*` échoue en "
"raison d'une erreur de conversion dans une des unités de format, les "
"variables aux adresses correspondantes à cette erreur et les unités de "
"formats suivantes sont laissées telles quelles."

# 72c1672d616449b494ccf86ff3be7a73
#: ../src/Doc/c-api/arg.rst:337
msgid ""
"Parse the parameters of a function that takes only positional parameters "
"into local variables.  Returns true on success; on failure, it returns false "
"and raises the appropriate exception."
msgstr ""

# bd1e2461e79248be854ce2d9811e0f56
#: ../src/Doc/c-api/arg.rst:344
msgid ""
"Identical to :c:func:`PyArg_ParseTuple`, except that it accepts a va_list "
"rather than a variable number of arguments."
msgstr ""

# 154fcd47e8d24d00a139aaea3f356f38
#: ../src/Doc/c-api/arg.rst:350
msgid ""
"Parse the parameters of a function that takes both positional and keyword "
"parameters into local variables.  Returns true on success; on failure, it "
"returns false and raises the appropriate exception."
msgstr ""

# 9e654231ef5a4ad480a3884094081deb
#: ../src/Doc/c-api/arg.rst:357
msgid ""
"Identical to :c:func:`PyArg_ParseTupleAndKeywords`, except that it accepts a "
"va_list rather than a variable number of arguments."
msgstr ""

# e73ddb1abeaf437499c0abeca56704cd
#: ../src/Doc/c-api/arg.rst:363
msgid ""
"Function used to deconstruct the argument lists of \"old-style\" functions "
"--- these are functions which use the :const:`METH_OLDARGS` parameter "
"parsing method.  This is not recommended for use in parameter parsing in new "
"code, and most code in the standard interpreter has been modified to no "
"longer use this for that purpose.  It does remain a convenient way to "
"decompose other tuples, however, and may continue to be used for that "
"purpose."
msgstr ""

# 1129d6babab04fd78a84560138dca2c2
#: ../src/Doc/c-api/arg.rst:374
msgid ""
"A simpler form of parameter retrieval which does not use a format string to "
"specify the types of the arguments.  Functions which use this method to "
"retrieve their parameters should be declared as :const:`METH_VARARGS` in "
"function or method tables.  The tuple containing the actual parameters "
"should be passed as *args*; it must actually be a tuple.  The length of the "
"tuple must be at least *min* and no more than *max*; *min* and *max* may be "
"equal.  Additional arguments must be passed to the function, each of which "
"should be a pointer to a :c:type:`PyObject\\*` variable; these will be "
"filled in with the values from *args*; they will contain borrowed "
"references.  The variables which correspond to optional parameters not given "
"by *args* will not be filled in; these should be initialized by the caller. "
"This function returns true on success and false if *args* is not a tuple or "
"contains the wrong number of elements; an exception will be set if there was "
"a failure."
msgstr ""

# c4f68b6d31a243ad812b5e9594d30f1b
#: ../src/Doc/c-api/arg.rst:388
msgid ""
"This is an example of the use of this function, taken from the sources for "
"the :mod:`_weakref` helper module for weak references::"
msgstr ""

# 559acf1221144213a29178b5fa8738a3
#: ../src/Doc/c-api/arg.rst:404
msgid ""
"The call to :c:func:`PyArg_UnpackTuple` in this example is entirely "
"equivalent to this call to :c:func:`PyArg_ParseTuple`::"
msgstr ""

# e1bfeffeea9042a29fd8c640c05f1292
#: ../src/Doc/c-api/arg.rst:418
msgid ""
"Create a new value based on a format string similar to those accepted by "
"the :c:func:`PyArg_Parse\\*` family of functions and a sequence of values. "
"Returns the value or *NULL* in the case of an error; an exception will be "
"raised if *NULL* is returned."
msgstr ""

# 72b22b5e203c4ba49e47b7280b7f24c4
#: ../src/Doc/c-api/arg.rst:423
msgid ""
":c:func:`Py_BuildValue` does not always build a tuple.  It builds a tuple "
"only if its format string contains two or more format units.  If the format "
"string is empty, it returns ``None``; if it contains exactly one format "
"unit, it returns whatever object is described by that format unit.  To force "
"it to return a tuple of size 0 or one, parenthesize the format string."
msgstr ""

# 1c910446948f40739463fc09b58d2bf6
#: ../src/Doc/c-api/arg.rst:430
msgid ""
"When memory buffers are passed as parameters to supply data to build "
"objects, as for the ``s`` and ``s#`` formats, the required data is copied. "
"Buffers provided by the caller are never referenced by the objects created "
"by :c:func:`Py_BuildValue`.  In other words, if your code invokes :c:func:"
"`malloc` and passes the allocated memory to :c:func:`Py_BuildValue`, your "
"code is responsible for calling :c:func:`free` for that memory once :c:func:"
"`Py_BuildValue` returns."
msgstr ""

# 4fc6422acf4646f5ad1ab6ede5c623b3
#: ../src/Doc/c-api/arg.rst:438
msgid ""
"In the following description, the quoted form is the format unit; the entry "
"in (round) parentheses is the Python object type that the format unit will "
"return; and the entry in [square] brackets is the type of the C value(s) to "
"be passed."
msgstr ""

# 2d5f9835e43747d594800665964313a2
#: ../src/Doc/c-api/arg.rst:443
msgid ""
"The characters space, tab, colon and comma are ignored in format strings "
"(but not within format units such as ``s#``).  This can be used to make long "
"format strings a tad more readable."
msgstr ""

# 277db1cdfa914ade8273f7c95804832c
#: ../src/Doc/c-api/arg.rst:448
msgid ""
"Convert a null-terminated C string to a Python object.  If the C string "
"pointer is *NULL*, ``None`` is used."
msgstr ""

# 824f187619334035bf356d6d7580483e
#: ../src/Doc/c-api/arg.rst:452
msgid ""
"Convert a C string and its length to a Python object.  If the C string "
"pointer is *NULL*, the length is ignored and ``None`` is returned."
msgstr ""

# d013c66806cc42a9a09e5b896f5368eb
#: ../src/Doc/c-api/arg.rst:456
msgid "Same as ``s``."
msgstr ""

# e87fff1b0bc14eda8c55feb12869bd78
#: ../src/Doc/c-api/arg.rst:459
msgid "Same as ``s#``."
msgstr ""

# 3495f7ec5b854226990bd39ad0293695
#: ../src/Doc/c-api/arg.rst:462
msgid ""
"Convert a null-terminated buffer of Unicode (UCS-2 or UCS-4) data to a "
"Python Unicode object.  If the Unicode buffer pointer is *NULL*, ``None`` is "
"returned."
msgstr ""

# 02e654c9e36641328c9ab5e804adcf8d
#: ../src/Doc/c-api/arg.rst:467
msgid ""
"Convert a Unicode (UCS-2 or UCS-4) data buffer and its length to a Python "
"Unicode object.   If the Unicode buffer pointer is *NULL*, the length is "
"ignored and ``None`` is returned."
msgstr ""

# 320b29ec39904c428ea8b15d6257dae3
#: ../src/Doc/c-api/arg.rst:472
msgid "Convert a plain C :c:type:`int` to a Python integer object."
msgstr ""

# 4305efd0163f4b56af050b9f0a8dcf4b
#: ../src/Doc/c-api/arg.rst:475
msgid "Convert a plain C :c:type:`char` to a Python integer object."
msgstr ""

# 590ea21fafdd4640873cf47892df6ff6
#: ../src/Doc/c-api/arg.rst:478
msgid "Convert a plain C :c:type:`short int` to a Python integer object."
msgstr ""

# 50dd59e073a143c883f87b0fa1bbf539
#: ../src/Doc/c-api/arg.rst:481
msgid "Convert a C :c:type:`long int` to a Python integer object."
msgstr ""

# 3bf2695e270b4f09938ff501ed8f6b99
#: ../src/Doc/c-api/arg.rst:484
msgid "Convert a C :c:type:`unsigned char` to a Python integer object."
msgstr ""

#: ../src/Doc/c-api/arg.rst:487
#, fuzzy
msgid "Convert a C :c:type:`unsigned short int` to a Python integer object."
msgstr ""
"Convertit un entier Python en un C :ctype:`unsigned short int`, sans "
"contrôle de débordement."

# 45c8c1f9f2884e4ca1900e27decd7414
#: ../src/Doc/c-api/arg.rst:490
msgid ""
"Convert a C :c:type:`unsigned int` to a Python integer object or a Python "
"long integer object, if it is larger than ``sys.maxint``."
msgstr ""

# 44778259cbfc4e478f9ff3822501d6bf
#: ../src/Doc/c-api/arg.rst:494
msgid ""
"Convert a C :c:type:`unsigned long` to a Python integer object or a Python "
"long integer object, if it is larger than ``sys.maxint``."
msgstr ""

#: ../src/Doc/c-api/arg.rst:498
#, fuzzy
msgid ""
"Convert a C :c:type:`long long` to a Python long integer object. Only "
"available on platforms that support :c:type:`long long`."
msgstr ""
"Convertit un entier Python en un type C :ctype:`long long`. Ce format est "
"uniquement disponible sur les plates-formes qui prennent en charge :ctype:"
"`long long` (ou :ctype:`_int64` sous Windows)."

#: ../src/Doc/c-api/arg.rst:502
#, fuzzy
msgid ""
"Convert a C :c:type:`unsigned long long` to a Python long integer object. "
"Only available on platforms that support :c:type:`unsigned long long`."
msgstr ""
"Convertit un entier Python en un type C :ctype:`unsigned long long` sans en "
"vérifier le débordement. Ce format est uniquement disponible sur les plates-"
"formes qui prennent en charge :ctype:`unsigned long long` (ou :ctype:"
"`unsigned _int64` sous Windows)."

#: ../src/Doc/c-api/arg.rst:506
#, fuzzy
msgid "Convert a C :c:type:`Py_ssize_t` to a Python integer or long integer."
msgstr "Convertit un entier Python en un type  :ctype:`long int`."

# e6694724bf51423f9d1028cc7e30e08f
#: ../src/Doc/c-api/arg.rst:511
msgid ""
"Convert a C :c:type:`int` representing a character to a Python string of "
"length 1."
msgstr ""

#: ../src/Doc/c-api/arg.rst:515
#, fuzzy
msgid "Convert a C :c:type:`double` to a Python floating point number."
msgstr "Convertit un nombre flottant Python vers un type C :ctype:`float`."

# f70d4f0e76194570a16102beff1781b6
#: ../src/Doc/c-api/arg.rst:518
msgid "Same as ``d``."
msgstr ""

#: ../src/Doc/c-api/arg.rst:521
#, fuzzy
msgid "Convert a C :c:type:`Py_complex` structure to a Python complex number."
msgstr ""
"Convertit un nombre complexe Python vers une structure C :ctype:`Py_complex`."

# 60b2e2b97b4241ceb3f6f45bc3e2ea66
#: ../src/Doc/c-api/arg.rst:524
msgid ""
"Pass a Python object untouched (except for its reference count, which is "
"incremented by one).  If the object passed in is a *NULL* pointer, it is "
"assumed that this was caused because the call producing the argument found "
"an error and set an exception. Therefore, :c:func:`Py_BuildValue` will "
"return *NULL* but won't raise an exception.  If no exception has been raised "
"yet, :exc:`SystemError` is set."
msgstr ""

# 71430e1f040d46fb98919fe5fc2de645
#: ../src/Doc/c-api/arg.rst:532
msgid "Same as ``O``."
msgstr ""

# ab135ac274d94a62a727d4dddbf65dd9
#: ../src/Doc/c-api/arg.rst:535
msgid ""
"Same as ``O``, except it doesn't increment the reference count on the "
"object.  Useful when the object is created by a call to an object "
"constructor in the argument list."
msgstr ""

# 47217beb21504057b97cd2d821333623
#: ../src/Doc/c-api/arg.rst:540
msgid ""
"Convert *anything* to a Python object through a *converter* function. The "
"function is called with *anything* (which should be compatible with :c:type:"
"`void \\*`) as its argument and should return a \"new\" Python object, or "
"*NULL* if an error occurred."
msgstr ""

# 75734169caa34fa5a14a3374f4d7bc04
#: ../src/Doc/c-api/arg.rst:546
msgid ""
"Convert a sequence of C values to a Python tuple with the same number of "
"items."
msgstr ""

# a12b09c7f6f945a69304e4bda1ffa19a
#: ../src/Doc/c-api/arg.rst:550
msgid ""
"Convert a sequence of C values to a Python list with the same number of "
"items."
msgstr ""

# dbc3abce40bb43359e4ccf71bd7146c8
#: ../src/Doc/c-api/arg.rst:554
msgid ""
"Convert a sequence of C values to a Python dictionary.  Each pair of "
"consecutive C values adds one item to the dictionary, serving as key and "
"value, respectively."
msgstr ""

# 4602bdb46bc4449cb25c370a2e2ba6b4
#: ../src/Doc/c-api/arg.rst:558
msgid ""
"If there is an error in the format string, the :exc:`SystemError` exception "
"is set and *NULL* returned."
msgstr ""

# a0279b8d65c3444783e900c3b1a8b051
#: ../src/Doc/c-api/arg.rst:563
msgid ""
"Identical to :c:func:`Py_BuildValue`, except that it accepts a va_list "
"rather than a variable number of arguments."
msgstr ""

#: ../src/Doc/c-api/bool.rst:6
msgid "Boolean Objects"
msgstr "Les objets booléens"

#: ../src/Doc/c-api/bool.rst:8
msgid ""
"Booleans in Python are implemented as a subclass of integers.  There are "
"only two booleans, :const:`Py_False` and :const:`Py_True`.  As such, the "
"normal creation and deletion functions don't apply to booleans.  The "
"following macros are available, however."
msgstr ""
"Les booléens en Python sont implémentés comme une classe dérivée des "
"entiers. Il y a seulement deux booléens, :const:`Py_False` et :const:"
"`Py_True`. Comme tel, les fonctions de création de suppression ne "
"s'appliquent pas aux booléens. Toutefois, les macros suivantes sont "
"disponibles."

# 7e036f9933da46e08638841b5ed2c260
#: ../src/Doc/c-api/bool.rst:16
msgid "Return true if *o* is of type :c:data:`PyBool_Type`."
msgstr ""

# d9d73e8b270d4e4f926e7368a8cdcfd1
#: ../src/Doc/c-api/bool.rst:23
msgid ""
"The Python ``False`` object.  This object has no methods.  It needs to be "
"treated just like any other object with respect to reference counts."
msgstr ""

# 26a4b119e5134960afd295193077466f
#: ../src/Doc/c-api/bool.rst:29
msgid ""
"The Python ``True`` object.  This object has no methods.  It needs to be "
"treated just like any other object with respect to reference counts."
msgstr ""

# 1672dd234b6449398caa723b1eaa324b
#: ../src/Doc/c-api/bool.rst:35
msgid ""
"Return :const:`Py_False` from a function, properly incrementing its "
"reference count."
msgstr ""

# 46d570a5be30491da026f77787c275dd
#: ../src/Doc/c-api/bool.rst:43
msgid ""
"Return :const:`Py_True` from a function, properly incrementing its reference "
"count."
msgstr ""

# 0b23bb2fbcea485da8f1fcd86d4d9647
#: ../src/Doc/c-api/bool.rst:51
msgid ""
"Return a new reference to :const:`Py_True` or :const:`Py_False` depending on "
"the truth value of *v*."
msgstr ""

#: ../src/Doc/c-api/buffer.rst:6
#, fuzzy
msgid "Buffers and Memoryview Objects"
msgstr "Objets de type MemoryView"

#: ../src/Doc/c-api/buffer.rst:16
#, fuzzy
msgid ""
"Python objects implemented in C can export a group of functions called the "
"\"buffer interface.\"  These functions can be used by an object to expose "
"its data in a raw, byte-oriented format. Clients of the object can use the "
"buffer interface to access the object data directly, without needing to copy "
"it first."
msgstr ""
"Les objets Python implémentés en C peuvent exporter une \"interface sur des "
"tampons\". Ces fonctions peuvent être utilisées par un objets pour rendre "
"publiques ses données, dans un format brut orienté octets. Les clients de "
"ces objets peuvent utiliser l'interface sur les tampons pour accéder "
"directement aux données de  l'objet, sans nécessiter une copie préalable."

#: ../src/Doc/c-api/buffer.rst:22
#, fuzzy
msgid ""
"Two examples of objects that support the buffer interface are strings and "
"arrays. The string object exposes the character contents in the buffer "
"interface's byte-oriented form. An array can also expose its contents, but "
"it should be noted that array elements may be multi-byte values."
msgstr ""
"Deux exemples d'objets qui supportent l'interfaces sur les tampons sont les "
"octets et les tableaux. Les objets octets exposent leur contenu en tant que "
"caractètres, dans une interface sur tampon orientée octets. Un tableau peut "
"également exposer son contenu, mais il doit être remarqué que les éléments "
"du tableau peuvent être des valeurs multi-octets."

#: ../src/Doc/c-api/buffer.rst:27
#, fuzzy
msgid ""
"An example user of the buffer interface is the file object's :meth:`write` "
"method. Any object that can export a series of bytes through the buffer "
"interface can be written to a file. There are a number of format codes to :c:"
"func:`PyArg_ParseTuple` that operate against an object's buffer interface, "
"returning data from the target object."
msgstr ""
"Un exemple d'utilisation de l'interface sur les tampons est la méthode :meth:"
"`write` de l'objet fichier. Tout objet qui peut exporter une série d'octets "
"en utilisant l'interface tampons peut être écrit dans un fichier. Il y a un "
"nombre de codes de format pour  :cfunc:`PyArg_ParseTuple` qui contredisent "
"l'interface tampon de l'objet, en retournant les données de l'objet cible."

# 3118337044b0407ba22c54e8370f61ee
#: ../src/Doc/c-api/buffer.rst:33
msgid ""
"Starting from version 1.6, Python has been providing Python-level buffer "
"objects and a C-level buffer API so that any built-in or used-defined type "
"can expose its characteristics. Both, however, have been deprecated because "
"of various shortcomings, and have been officially removed in Python 3 in "
"favour of a new C-level buffer API and a new Python-level object named :"
"class:`memoryview`."
msgstr ""

# 810d44a4c6c64828b611914742b4ff90
#: ../src/Doc/c-api/buffer.rst:40
msgid ""
"The new buffer API has been backported to Python 2.6, and the :class:"
"`memoryview` object has been backported to Python 2.7. It is strongly "
"advised to use them rather than the old APIs, unless you are blocked from "
"doing so for compatibility reasons."
msgstr ""

# 0bca141b7fd74b4888a74166f90da159
#: ../src/Doc/c-api/buffer.rst:47
msgid "The new-style Py_buffer struct"
msgstr ""

# 34d47f4a451b4bd69f8d746d500f2c0a
#: ../src/Doc/c-api/buffer.rst:54
msgid "A pointer to the start of the memory for the object."
msgstr ""

# de8a4775c2ba409b8c490ad53f6ba407
#: ../src/Doc/c-api/buffer.rst:59
msgid "The total length of the memory in bytes."
msgstr ""

# 419edefc743a46179b753fa3ba66729b
#: ../src/Doc/c-api/buffer.rst:63
msgid "An indicator of whether the buffer is read only."
msgstr ""

# 89732ea0db5f4c1ea0a400ddac5cbc71
#: ../src/Doc/c-api/buffer.rst:68
msgid ""
"A *NULL* terminated string in :mod:`struct` module style syntax giving the "
"contents of the elements available through the buffer.  If this is *NULL*, ``"
"\"B\"`` (unsigned bytes) is assumed."
msgstr ""

# 297f5f867b39466db1ef07c0fdd9a603
#: ../src/Doc/c-api/buffer.rst:74
msgid ""
"The number of dimensions the memory represents as a multi-dimensional "
"array.  If it is 0, :c:data:`strides` and :c:data:`suboffsets` must be "
"*NULL*."
msgstr ""

# 150158110ec34d0fb7ab913042b43dab
#: ../src/Doc/c-api/buffer.rst:80
msgid ""
"An array of :c:type:`Py_ssize_t`\\s the length of :c:data:`ndim` giving the "
"shape of the memory as a multi-dimensional array.  Note that ``((*shape)[0] "
"* ... * (*shape)[ndims-1])*itemsize`` should be equal to :c:data:`len`."
msgstr ""

# 6644fc7f86344b18a9a411d72225067b
#: ../src/Doc/c-api/buffer.rst:87
msgid ""
"An array of :c:type:`Py_ssize_t`\\s the length of :c:data:`ndim` giving the "
"number of bytes to skip to get to a new element in each dimension."
msgstr ""

# 16a9f4d2ecdb4bd29e86e9fd72c98e21
#: ../src/Doc/c-api/buffer.rst:92
msgid ""
"An array of :c:type:`Py_ssize_t`\\s the length of :c:data:`ndim`.  If these "
"suboffset numbers are greater than or equal to 0, then the value stored "
"along the indicated dimension is a pointer and the suboffset value dictates "
"how many bytes to add to the pointer after de-referencing. A suboffset value "
"that it negative indicates that no de-referencing should occur (striding in "
"a contiguous memory block)."
msgstr ""

# c497be62b8a14e61b2673d7f9717b9b0
#: ../src/Doc/c-api/buffer.rst:99
msgid ""
"Here is a function that returns a pointer to the element in an N-D array "
"pointed to by an N-dimesional index when there are both non-NULL strides and "
"suboffsets::"
msgstr ""

# b5a882003d764b1e907d402d171f1e01
#: ../src/Doc/c-api/buffer.rst:119
msgid ""
"This is a storage for the itemsize (in bytes) of each element of the shared "
"memory. It is technically un-necessary as it can be obtained using :c:func:"
"`PyBuffer_SizeFromFormat`, however an exporter may know this information "
"without parsing the format string and it is necessary to know the itemsize "
"for proper interpretation of striding. Therefore, storing it is more "
"convenient and faster."
msgstr ""

# e465636ccbf344efa4546013591c995a
#: ../src/Doc/c-api/buffer.rst:128
msgid ""
"This is for use internally by the exporting object. For example, this might "
"be re-cast as an integer by the exporter and used to store flags about "
"whether or not the shape, strides, and suboffsets arrays must be freed when "
"the buffer is released. The consumer should never alter this value."
msgstr ""

#: ../src/Doc/c-api/buffer.rst:136
msgid "Buffer related functions"
msgstr "Fonctions relatives aux tampons"

# cc167d78a51945b29e647778729c8edd
#: ../src/Doc/c-api/buffer.rst:141
msgid "Return 1 if *obj* supports the buffer interface otherwise 0."
msgstr ""

# 11f61efc4399483aaa44018b6b03ad15
#: ../src/Doc/c-api/buffer.rst:146
msgid ""
"Export *obj* into a :c:type:`Py_buffer`, *view*.  These arguments must never "
"be *NULL*.  The *flags* argument is a bit field indicating what kind of "
"buffer the caller is prepared to deal with and therefore what kind of buffer "
"the exporter is allowed to return.  The buffer interface allows for "
"complicated memory sharing possibilities, but some caller may not be able to "
"handle all the complexity but may want to see if the exporter will let them "
"take a simpler view to its memory."
msgstr ""

# 45b7838c038e43549a9569d56af27299
#: ../src/Doc/c-api/buffer.rst:154
msgid ""
"Some exporters may not be able to share memory in every possible way and may "
"need to raise errors to signal to some consumers that something is just not "
"possible. These errors should be a :exc:`BufferError` unless there is "
"another error that is actually causing the problem. The exporter can use "
"flags information to simplify how much of the :c:data:`Py_buffer` structure "
"is filled in with non-default values and/or raise an error if the object "
"can't support a simpler view of its memory."
msgstr ""

# 4dc4b08166cf4b89b998af99d47d2f64
#: ../src/Doc/c-api/buffer.rst:162
msgid "0 is returned on success and -1 on error."
msgstr ""

# 92a09ebe1d2b44f899478f491c587724
#: ../src/Doc/c-api/buffer.rst:164
msgid "The following table gives possible values to the *flags* arguments."
msgstr ""

# e7d1994f92e34558b4e5b0d9f2310d39
#: ../src/Doc/c-api/buffer.rst:167
msgid "Flag"
msgstr ""

# aed279d944904318a61fb17ea305bd3f
#: ../src/Doc/c-api/buffer.rst:167
msgid "Description"
msgstr ""

# 1ca1cbc3d88c4ba4a3c9d6f9ba8b091b
#: ../src/Doc/c-api/buffer.rst:169
msgid ":c:macro:`PyBUF_SIMPLE`"
msgstr ""

# 8b9927cdcc9c4deea339841f7fe96d17
#: ../src/Doc/c-api/buffer.rst:169
msgid ""
"This is the default flag state.  The returned buffer may or may not have "
"writable memory.  The format of the data will be assumed to be unsigned "
"bytes.  This is a \"stand-alone\" flag constant. It never needs to be '|'d "
"to the others. The exporter will raise an error if it cannot provide such a "
"contiguous buffer of bytes."
msgstr ""

# 25440505250d431ea7c0a5038c0e9230
#: ../src/Doc/c-api/buffer.rst:178
msgid ":c:macro:`PyBUF_WRITABLE`"
msgstr ""

# c72a9a8f4fe845b28bcdb3a4d1030512
#: ../src/Doc/c-api/buffer.rst:178
msgid ""
"The returned buffer must be writable.  If it is not writable, then raise an "
"error."
msgstr ""

# 5d3055db79964490bd415f1f18b150ac
#: ../src/Doc/c-api/buffer.rst:181
msgid ":c:macro:`PyBUF_STRIDES`"
msgstr ""

# c4b9cd3e994141ea9d5be60c09ef652e
#: ../src/Doc/c-api/buffer.rst:181
msgid ""
"This implies :c:macro:`PyBUF_ND`. The returned buffer must provide strides "
"information (i.e. the strides cannot be NULL). This would be used when the "
"consumer can handle strided, discontiguous arrays.  Handling strides "
"automatically assumes you can handle shape.  The exporter can raise an error "
"if a strided representation of the data is not possible (i.e. without the "
"suboffsets)."
msgstr ""

# 2f677c3ab2d84c88aada91f65854caae
#: ../src/Doc/c-api/buffer.rst:191
msgid ":c:macro:`PyBUF_ND`"
msgstr ""

# 33141424bef04b7a981526921e882e06
#: ../src/Doc/c-api/buffer.rst:191
msgid ""
"The returned buffer must provide shape information. The memory will be "
"assumed C-style contiguous (last dimension varies the fastest). The exporter "
"may raise an error if it cannot provide this kind of contiguous buffer. If "
"this is not given then shape will be *NULL*."
msgstr ""

# 282ba13f4b4944798296ee1d6c847802
#: ../src/Doc/c-api/buffer.rst:201
msgid ""
":c:macro:`PyBUF_C_CONTIGUOUS` :c:macro:`PyBUF_F_CONTIGUOUS` :c:macro:"
"`PyBUF_ANY_CONTIGUOUS`"
msgstr ""

# d288c0e4bc484a46b04fdbb04be25334
#: ../src/Doc/c-api/buffer.rst:201
msgid ""
"These flags indicate that the contiguity returned buffer must be "
"respectively, C-contiguous (last dimension varies the fastest), Fortran "
"contiguous (first dimension varies the fastest) or either one.  All of these "
"flags imply :c:macro:`PyBUF_STRIDES` and guarantee that the strides buffer "
"info structure will be filled in correctly."
msgstr ""

# a6ce69c97b9d4c6fb6f2dfc6dd21420a
#: ../src/Doc/c-api/buffer.rst:211
msgid ":c:macro:`PyBUF_INDIRECT`"
msgstr ""

# bdcd132e986f4290bdc80e4fdb14ad45
#: ../src/Doc/c-api/buffer.rst:211
msgid ""
"This flag indicates the returned buffer must have suboffsets information "
"(which can be NULL if no suboffsets are needed).  This can be used when the "
"consumer can handle indirect array referencing implied by these suboffsets. "
"This implies :c:macro:`PyBUF_STRIDES`."
msgstr ""

# 1d811d34a79d47b0bce34b9c795692fa
#: ../src/Doc/c-api/buffer.rst:221
msgid ":c:macro:`PyBUF_FORMAT`"
msgstr ""

# 499e658e6fb742ddbad1824994c71f6c
#: ../src/Doc/c-api/buffer.rst:221
msgid ""
"The returned buffer must have true format information if this flag is "
"provided. This would be used when the consumer is going to be checking for "
"what 'kind' of data is actually stored. An exporter should always be able to "
"provide this information if requested. If format is not explicitly requested "
"then the format must be returned as *NULL* (which means ``'B'``, or unsigned "
"bytes)"
msgstr ""

# 78e19d1e127345bf8e9f080e727471ea
#: ../src/Doc/c-api/buffer.rst:231
msgid ":c:macro:`PyBUF_STRIDED`"
msgstr ""

# 72b5540d578049a2bcc020827bb55346
#: ../src/Doc/c-api/buffer.rst:231
msgid "This is equivalent to ``(PyBUF_STRIDES | PyBUF_WRITABLE)``."
msgstr ""

# 5fab8f3b863b471c97031a8391ed9cc0
#: ../src/Doc/c-api/buffer.rst:234
msgid ":c:macro:`PyBUF_STRIDED_RO`"
msgstr ""

# 8e75cf5ade184ce2962f79fbbba10cf5
#: ../src/Doc/c-api/buffer.rst:234
msgid "This is equivalent to ``(PyBUF_STRIDES)``."
msgstr ""

# 737f604a09074afea8b078e0d7e75a32
#: ../src/Doc/c-api/buffer.rst:237
msgid ":c:macro:`PyBUF_RECORDS`"
msgstr ""

# f8f46e0601464f60aeb6307cfef0d714
#: ../src/Doc/c-api/buffer.rst:237
msgid ""
"This is equivalent to ``(PyBUF_STRIDES | PyBUF_FORMAT | PyBUF_WRITABLE)``."
msgstr ""

# 25b7af16c5474f47ac2196783330e498
#: ../src/Doc/c-api/buffer.rst:240
msgid ":c:macro:`PyBUF_RECORDS_RO`"
msgstr ""

# 12d2f9a862014f14bc0c3dd76b69a373
#: ../src/Doc/c-api/buffer.rst:240
msgid "This is equivalent to ``(PyBUF_STRIDES | PyBUF_FORMAT)``."
msgstr ""

# 22d9869d49004ab8a5a0dbf14d1a7de4
#: ../src/Doc/c-api/buffer.rst:243
msgid ":c:macro:`PyBUF_FULL`"
msgstr ""

# 8c7e2cf4cc96426c9403c21f5e4da4b9
#: ../src/Doc/c-api/buffer.rst:243
msgid ""
"This is equivalent to ``(PyBUF_INDIRECT | PyBUF_FORMAT | PyBUF_WRITABLE)``."
msgstr ""

# 6a077ccfcbda4e3f952f2541becc4903
#: ../src/Doc/c-api/buffer.rst:246
msgid ":c:macro:`PyBUF_FULL_RO`"
msgstr ""

# 074f88a79ab843fab70756aadb3e9d36
#: ../src/Doc/c-api/buffer.rst:246
msgid "This is equivalent to ``(PyBUF_INDIRECT | PyBUF_FORMAT)``."
msgstr ""

# 53f70730e246430d9e94272947288d32
#: ../src/Doc/c-api/buffer.rst:249
msgid ":c:macro:`PyBUF_CONTIG`"
msgstr ""

# 55e729bec78b406c93c9b9d330693715
#: ../src/Doc/c-api/buffer.rst:249
msgid "This is equivalent to ``(PyBUF_ND | PyBUF_WRITABLE)``."
msgstr ""

# dc3e8e85197e41649d249c225ecfffcc
#: ../src/Doc/c-api/buffer.rst:252
msgid ":c:macro:`PyBUF_CONTIG_RO`"
msgstr ""

# d34cd2922a4c401dbe09d31741dbf39d
#: ../src/Doc/c-api/buffer.rst:252
msgid "This is equivalent to ``(PyBUF_ND)``."
msgstr ""

# ce75b1e12755448fae9ed28009cd65cd
#: ../src/Doc/c-api/buffer.rst:259
msgid ""
"Release the buffer *view*.  This should be called when the buffer is no "
"longer being used as it may free memory from it."
msgstr ""

# 7f2da87aab114826b6275e1dd7b4ae38
#: ../src/Doc/c-api/buffer.rst:265
msgid ""
"Return the implied :c:data:`~Py_buffer.itemsize` from the struct-stype :c:"
"data:`~Py_buffer.format`."
msgstr ""

# 9af2162dddb74c96bd597ef4ac8f78eb
#: ../src/Doc/c-api/buffer.rst:271
msgid ""
"Return 1 if the memory defined by the *view* is C-style (*fortran* is "
"``'C'``) or Fortran-style (*fortran* is ``'F'``) contiguous or either one "
"(*fortran* is ``'A'``).  Return 0 otherwise."
msgstr ""

# f2894bd7fcda45618e1cdf55e2fbc646
#: ../src/Doc/c-api/buffer.rst:278
msgid ""
"Fill the *strides* array with byte-strides of a contiguous (C-style if "
"*fortran* is ``'C'`` or Fortran-style if *fortran* is ``'F'``) array of the "
"given shape with the given number of bytes per element."
msgstr ""

# 88f70d29eace429c86e7be5f81aceaa4
#: ../src/Doc/c-api/buffer.rst:285
msgid ""
"Fill in a buffer-info structure, *view*, correctly for an exporter that can "
"only share a contiguous chunk of memory of \"unsigned bytes\" of the given "
"length.  Return 0 on success and -1 (with raising an error) on error."
msgstr ""

#: ../src/Doc/c-api/buffer.rst:291
msgid "MemoryView objects"
msgstr "Objets de type MemoryView"

#: ../src/Doc/c-api/buffer.rst:295
#, fuzzy
msgid ""
"A :class:`memoryview` object exposes the new C level buffer interface as a "
"Python object which can then be passed around like any other object."
msgstr "Un objet MemoryView expose l'interface tampon au niveau C à Python."

#: ../src/Doc/c-api/buffer.rst:300
#, fuzzy
msgid ""
"Create a memoryview object from an object that defines the new buffer "
"interface."
msgstr "Un objet MemoryView expose l'interface tampon au niveau C à Python."

# 83f2b6c6e3b841d197f85445e24cba95
#: ../src/Doc/c-api/buffer.rst:306
msgid ""
"Create a memoryview object wrapping the given buffer-info structure *view*. "
"The memoryview object then owns the buffer, which means you shouldn't try to "
"release it yourself: it will be released on deallocation of the memoryview "
"object."
msgstr ""

# 6b69407c7bdd4ef689c261028d482384
#: ../src/Doc/c-api/buffer.rst:314
msgid ""
"Create a memoryview object to a contiguous chunk of memory (in either 'C' or "
"'F'ortran *order*) from an object that defines the buffer interface. If "
"memory is contiguous, the memoryview object points to the original memory. "
"Otherwise copy is made and the memoryview points to a new bytes object."
msgstr ""

# 5700dd2ef07e4754a745b743e084e3c7
#: ../src/Doc/c-api/buffer.rst:323
msgid ""
"Return true if the object *obj* is a memoryview object.  It is not currently "
"allowed to create subclasses of :class:`memoryview`."
msgstr ""

# 44dec4b3cddd4fa9abdcf7eae18c89d3
#: ../src/Doc/c-api/buffer.rst:329
msgid ""
"Return a pointer to the buffer-info structure wrapped by the given object.  "
"The object **must** be a memoryview instance; this macro doesn't check its "
"type, you must do it yourself or you will risk crashes."
msgstr ""

#: ../src/Doc/c-api/buffer.rst:335
#, fuzzy
msgid "Old-style buffer objects"
msgstr "Autres objets"

#: ../src/Doc/c-api/buffer.rst:339
#, fuzzy
msgid ""
"More information on the old buffer interface is provided in the section :ref:"
"`buffer-structs`, under the description for :c:type:`PyBufferProcs`."
msgstr ""
"Plus d'informations sur l'interface sur les tampons sont données dans la "
"section :ref:`buffer-structs`, dans la description sur :ctype:"
"`PyBufferProcs`."

# cd2bf70c23254f04b33e7848e09c691b
#: ../src/Doc/c-api/buffer.rst:342
msgid ""
"A \"buffer object\" is defined in the :file:`bufferobject.h` header "
"(included by :file:`Python.h`). These objects look very similar to string "
"objects at the Python programming level: they support slicing, indexing, "
"concatenation, and some other standard string operations. However, their "
"data can come from one of two sources: from a block of memory, or from "
"another object which exports the buffer interface."
msgstr ""

#: ../src/Doc/c-api/buffer.rst:349
#, fuzzy
msgid ""
"Buffer objects are useful as a way to expose the data from another object's "
"buffer interface to the Python programmer. They can also be used as a zero-"
"copy slicing mechanism. Using their ability to reference a block of memory, "
"it is possible to expose any data to the Python programmer quite easily. The "
"memory could be a large, constant array in a C extension, it could be a raw "
"block of memory for manipulation before passing to an operating system "
"library, or it could be used to pass around structured data in its native, "
"in-memory format."
msgstr ""
"Les objets tampons sont utiles pour exposer les données d'une autre "
"interface d'un objet tampon au développeur Python. Ils peuvent aussi être "
"utilisés comme un mécanisme de découpage sans copie. En utilisant leur "
"capacité à référencer un bloc de mémoire, il est possible d'exposer "
"n'importe quelle donnée au développeur Python assez simplement. La mémoire "
"peut ainsi être un tableau constant de grande taille d'une extension en C, "
"elle peut être un bloc mémoire destiné à être modifié avant de le passer à "
"une librairie système, ou encore elle peut permettre de faire passer des "
"données structurées dans leur format originel en mémoire."

# 7ce2718e48da436cb25bef075e3ddc41
#: ../src/Doc/c-api/buffer.rst:361
msgid "This subtype of :c:type:`PyObject` represents a buffer object."
msgstr ""

# 8c157f2e51cc49a49b163ab19ba14dab
#: ../src/Doc/c-api/buffer.rst:368
msgid ""
"The instance of :c:type:`PyTypeObject` which represents the Python buffer "
"type; it is the same object as ``buffer`` and  ``types.BufferType`` in the "
"Python layer. ."
msgstr ""

# ab0309266fe144ca8a7e0ceec3cce633
#: ../src/Doc/c-api/buffer.rst:375
msgid ""
"This constant may be passed as the *size* parameter to :c:func:"
"`PyBuffer_FromObject` or :c:func:`PyBuffer_FromReadWriteObject`.  It "
"indicates that the new :c:type:`PyBufferObject` should refer to *base* "
"object from the specified *offset* to the end of its exported buffer. Using "
"this enables the caller to avoid querying the *base* object for its length."
msgstr ""

# 6875131fddf54c07b2e8b35eec4957f2
#: ../src/Doc/c-api/buffer.rst:385
msgid "Return true if the argument has type :c:data:`PyBuffer_Type`."
msgstr ""

# 3841db76158444b38c4358758c312135
#: ../src/Doc/c-api/buffer.rst:390
msgid ""
"Return a new read-only buffer object.  This raises :exc:`TypeError` if "
"*base* doesn't support the read-only buffer protocol or doesn't provide "
"exactly one buffer segment, or it raises :exc:`ValueError` if *offset* is "
"less than zero.  The buffer will hold a reference to the *base* object, and "
"the buffer's contents will refer to the *base* object's buffer interface, "
"starting as position *offset* and extending for *size* bytes. If *size* is :"
"const:`Py_END_OF_BUFFER`, then the new buffer's contents extend to the "
"length of the *base* object's exported buffer data."
msgstr ""

# 1aa986e02d794a4a81b96775803687e7
#: ../src/Doc/c-api/buffer.rst:407
msgid ""
"Return a new writable buffer object.  Parameters and exceptions are similar "
"to those for :c:func:`PyBuffer_FromObject`.  If the *base* object does not "
"export the writeable buffer protocol, then :exc:`TypeError` is raised."
msgstr ""

# c53bc2f14c1f405d98f2d83bbc8a95d6
#: ../src/Doc/c-api/buffer.rst:419
msgid ""
"Return a new read-only buffer object that reads from a specified location in "
"memory, with a specified size.  The caller is responsible for ensuring that "
"the memory buffer, passed in as *ptr*, is not deallocated while the returned "
"buffer object exists.  Raises :exc:`ValueError` if *size* is less than "
"zero.  Note that :const:`Py_END_OF_BUFFER` may *not* be passed for the "
"*size* parameter; :exc:`ValueError` will be raised in that case."
msgstr ""

# b934fa6ed7454f57a66f9e0807e42586
#: ../src/Doc/c-api/buffer.rst:433
msgid ""
"Similar to :c:func:`PyBuffer_FromMemory`, but the returned buffer is "
"writable."
msgstr ""

# edc1eedbdc5b4bce80eaf9d5024bddf9
#: ../src/Doc/c-api/buffer.rst:443
msgid ""
"Return a new writable buffer object that maintains its own memory buffer of "
"*size* bytes.  :exc:`ValueError` is returned if *size* is not zero or "
"positive.  Note that the memory buffer (as returned by :c:func:"
"`PyObject_AsWriteBuffer`) is not specifically aligned."
msgstr ""

#: ../src/Doc/c-api/bytearray.rst:6
msgid "Byte Array Objects"
msgstr "Objets Tableau d'Octets"

# ab2e2a106b634c109edc0de675e55e5b
#: ../src/Doc/c-api/bytearray.rst:15
msgid ""
"This subtype of :c:type:`PyObject` represents a Python bytearray object."
msgstr ""

# 0ddbdc3d96164847881b845753061db8
#: ../src/Doc/c-api/bytearray.rst:20
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python bytearray "
"type; it is the same object as ``bytearray`` in the Python layer."
msgstr ""

#: ../src/Doc/c-api/bytearray.rst:24
msgid "Type check macros"
msgstr "Macros de vérification de type"

# af782b064dc947b2a865af52925cc7ef
#: ../src/Doc/c-api/bytearray.rst:28
msgid ""
"Return true if the object *o* is a bytearray object or an instance of a "
"subtype of the bytearray type."
msgstr ""

# 8b5d98a94cd54f2eb2ee1a8bff49af35
#: ../src/Doc/c-api/bytearray.rst:34
msgid ""
"Return true if the object *o* is a bytearray object, but not an instance of "
"a subtype of the bytearray type."
msgstr ""

#: ../src/Doc/c-api/bytearray.rst:39
msgid "Direct API functions"
msgstr "Fonctions directes sur l'API"

# 7f82eb22e581479caefdda8d685a2127
#: ../src/Doc/c-api/bytearray.rst:43
msgid ""
"Return a new bytearray object from any object, *o*, that implements the "
"buffer protocol."
msgstr ""

# 1975cadb13b445e6954a0480d9ab8295
#: ../src/Doc/c-api/bytearray.rst:51
msgid ""
"Create a new bytearray object from *string* and its length, *len*.  On "
"failure, *NULL* is returned."
msgstr ""

# 12813f5761f8428c8c3dc8767bb3fe6d
#: ../src/Doc/c-api/bytearray.rst:57
msgid ""
"Concat bytearrays *a* and *b* and return a new bytearray with the result."
msgstr ""

# 0b9c574dad194521936a59304ec0f004
#: ../src/Doc/c-api/bytearray.rst:62
msgid "Return the size of *bytearray* after checking for a *NULL* pointer."
msgstr ""

# ffbc4506b3094724a313af85f8ca3c82
#: ../src/Doc/c-api/bytearray.rst:67
msgid ""
"Return the contents of *bytearray* as a char array after checking for a "
"*NULL* pointer."
msgstr ""

# 18c65203e43b4ef3951eeb50817e7fc5
#: ../src/Doc/c-api/bytearray.rst:73
msgid "Resize the internal buffer of *bytearray* to *len*."
msgstr ""

#: ../src/Doc/c-api/bytearray.rst:76
msgid "Macros"
msgstr "Macros"

#: ../src/Doc/c-api/bytearray.rst:78
msgid "These macros trade safety for speed and they don't check pointers."
msgstr ""
"Ces macros sont taillées pour la vitesse d'exécution et ne vérifient pas les "
"pointeurs."

# ee7c35b5e548445eb25886dc94eb261a
#: ../src/Doc/c-api/bytearray.rst:82
msgid "Macro version of :c:func:`PyByteArray_AsString`."
msgstr ""

# da6f88834cac4de1b81661b7a444622e
#: ../src/Doc/c-api/bytearray.rst:87
msgid "Macro version of :c:func:`PyByteArray_Size`."
msgstr ""

#: ../src/Doc/c-api/capsule.rst:6
msgid "Capsules"
msgstr "Capsules"

#: ../src/Doc/c-api/capsule.rst:10
msgid ""
"Refer to :ref:`using-capsules` for more information on using these objects."
msgstr ""
"Reportez-vous à :ref:`using-capsules` pour plus d'informations sur "
"l'utilisation de ces objets."

# f8b6e5d8fc7f4617abf076caa2a7945c
# ec5e60f797f44ed3836193785e05c12c
#: ../src/Doc/c-api/capsule.rst:15 ../src/Doc/c-api/cobject.rst:18
msgid ""
"This subtype of :c:type:`PyObject` represents an opaque value, useful for C "
"extension modules who need to pass an opaque value (as a :c:type:`void\\*` "
"pointer) through Python code to other C code.  It is often used to make a C "
"function pointer defined in one module available to other modules, so the "
"regular import mechanism can be used to access C APIs defined in dynamically "
"loaded modules."
msgstr ""

# b28df367a02c431a80e43ab803e23b33
#: ../src/Doc/c-api/capsule.rst:24
msgid "The type of a destructor callback for a capsule.  Defined as::"
msgstr ""

# ed8c4e9863b84f7e9be4313bd2682eca
#: ../src/Doc/c-api/capsule.rst:28
msgid ""
"See :c:func:`PyCapsule_New` for the semantics of PyCapsule_Destructor "
"callbacks."
msgstr ""

# 4d140f19508b4b71973c12950b6b640e
#: ../src/Doc/c-api/capsule.rst:34
msgid "Return true if its argument is a :c:type:`PyCapsule`."
msgstr ""

# e05d472f61da4b3c9544c11ddf380bba
#: ../src/Doc/c-api/capsule.rst:39
msgid ""
"Create a :c:type:`PyCapsule` encapsulating the *pointer*.  The *pointer* "
"argument may not be *NULL*."
msgstr ""

# f93cdf8167b7414cb87269a94f3d048c
#: ../src/Doc/c-api/capsule.rst:42
msgid "On failure, set an exception and return *NULL*."
msgstr ""

# 41f79dd4101b40a380f4163beb659cb8
#: ../src/Doc/c-api/capsule.rst:44
msgid ""
"The *name* string may either be *NULL* or a pointer to a valid C string.  If "
"non-*NULL*, this string must outlive the capsule.  (Though it is permitted "
"to free it inside the *destructor*.)"
msgstr ""

# 5751be91070945c69d389d1d6e2939de
#: ../src/Doc/c-api/capsule.rst:48
msgid ""
"If the *destructor* argument is not *NULL*, it will be called with the "
"capsule as its argument when it is destroyed."
msgstr ""

# ae2694e6eb4948008cb9eaa0abcf36a8
#: ../src/Doc/c-api/capsule.rst:51
msgid ""
"If this capsule will be stored as an attribute of a module, the *name* "
"should be specified as ``modulename.attributename``.  This will enable other "
"modules to import the capsule using :c:func:`PyCapsule_Import`."
msgstr ""

# 81654e3b19ef464db575730f5f4d17d3
#: ../src/Doc/c-api/capsule.rst:58
msgid ""
"Retrieve the *pointer* stored in the capsule.  On failure, set an exception "
"and return *NULL*."
msgstr ""

# 4be2335286f047c1a783cb03fcc11f7e
#: ../src/Doc/c-api/capsule.rst:61
msgid ""
"The *name* parameter must compare exactly to the name stored in the capsule. "
"If the name stored in the capsule is *NULL*, the *name* passed in must also "
"be *NULL*.  Python uses the C function :c:func:`strcmp` to compare capsule "
"names."
msgstr ""

# 18033edfe1184c7894bd8f79e4887707
#: ../src/Doc/c-api/capsule.rst:69
msgid ""
"Return the current destructor stored in the capsule.  On failure, set an "
"exception and return *NULL*."
msgstr ""

# 32114a9306a446d19fcf9c00aaa987bc
#: ../src/Doc/c-api/capsule.rst:72
msgid ""
"It is legal for a capsule to have a *NULL* destructor.  This makes a *NULL* "
"return code somewhat ambiguous; use :c:func:`PyCapsule_IsValid` or :c:func:"
"`PyErr_Occurred` to disambiguate."
msgstr ""

# 0d1ea66d516542798070e8e95d61386e
#: ../src/Doc/c-api/capsule.rst:79
msgid ""
"Return the current context stored in the capsule.  On failure, set an "
"exception and return *NULL*."
msgstr ""

# 7b2afa0b274d42c1961ad628c74972c9
#: ../src/Doc/c-api/capsule.rst:82
msgid ""
"It is legal for a capsule to have a *NULL* context.  This makes a *NULL* "
"return code somewhat ambiguous; use :c:func:`PyCapsule_IsValid` or :c:func:"
"`PyErr_Occurred` to disambiguate."
msgstr ""

# 5c215c1093c841668d4c330544348800
#: ../src/Doc/c-api/capsule.rst:89
msgid ""
"Return the current name stored in the capsule.  On failure, set an exception "
"and return *NULL*."
msgstr ""

# 3d3e40e764634f8f9e6a6dd4afb6553f
#: ../src/Doc/c-api/capsule.rst:92
msgid ""
"It is legal for a capsule to have a *NULL* name.  This makes a *NULL* return "
"code somewhat ambiguous; use :c:func:`PyCapsule_IsValid` or :c:func:"
"`PyErr_Occurred` to disambiguate."
msgstr ""

# ce254683528849e189409eda390b7901
#: ../src/Doc/c-api/capsule.rst:99
msgid ""
"Import a pointer to a C object from a capsule attribute in a module.  The "
"*name* parameter should specify the full name to the attribute, as in "
"``module.attribute``.  The *name* stored in the capsule must match this "
"string exactly.  If *no_block* is true, import the module without blocking "
"(using :c:func:`PyImport_ImportModuleNoBlock`).  If *no_block* is false, "
"import the module conventionally (using :c:func:`PyImport_ImportModule`)."
msgstr ""

# dab4ccb22cb448aa81240ead243c4893
#: ../src/Doc/c-api/capsule.rst:106
msgid ""
"Return the capsule's internal *pointer* on success.  On failure, set an "
"exception and return *NULL*.  However, if :c:func:`PyCapsule_Import` failed "
"to import the module, and *no_block* was true, no exception is set."
msgstr ""

# 7ba27802ce9542abbe0690353050d7c7
#: ../src/Doc/c-api/capsule.rst:112
msgid ""
"Determines whether or not *capsule* is a valid capsule.  A valid capsule is "
"non-*NULL*, passes :c:func:`PyCapsule_CheckExact`, has a non-*NULL* pointer "
"stored in it, and its internal name matches the *name* parameter.  (See :c:"
"func:`PyCapsule_GetPointer` for information on how capsule names are "
"compared.)"
msgstr ""

# 94bb62ec6c714c2a917a4ec3a1799809
#: ../src/Doc/c-api/capsule.rst:118
msgid ""
"In other words, if :c:func:`PyCapsule_IsValid` returns a true value, calls "
"to any of the accessors (any function starting with :c:func:`PyCapsule_Get`) "
"are guaranteed to succeed."
msgstr ""

# 1834e6b9f1cf4ed28c91fc6972c1d907
#: ../src/Doc/c-api/capsule.rst:122
msgid ""
"Return a nonzero value if the object is valid and matches the name passed "
"in. Return 0 otherwise.  This function will not fail."
msgstr ""

# a732fc4f52ff472088650914a565e884
#: ../src/Doc/c-api/capsule.rst:127
msgid "Set the context pointer inside *capsule* to *context*."
msgstr ""

# ddf0279b8ca54314866956bb422c0784
# eb8e15068231456bb158b04e2c3de07f
# f06316cfc5b248e2aeb2d4e758cee524
# 060b8184666e43adb620ba236eae4459
#: ../src/Doc/c-api/capsule.rst:129 ../src/Doc/c-api/capsule.rst:135
#: ../src/Doc/c-api/capsule.rst:143 ../src/Doc/c-api/capsule.rst:150
msgid "Return 0 on success.  Return nonzero and set an exception on failure."
msgstr ""

# 4bb498d2a975499081f81d34e8bcea49
#: ../src/Doc/c-api/capsule.rst:133
msgid "Set the destructor inside *capsule* to *destructor*."
msgstr ""

# d3da3b72879847e0b35ced00734c81cd
#: ../src/Doc/c-api/capsule.rst:139
msgid ""
"Set the name inside *capsule* to *name*.  If non-*NULL*, the name must "
"outlive the capsule.  If the previous *name* stored in the capsule was not "
"*NULL*, no attempt is made to free it."
msgstr ""

# eae307e42d3d446ea3fbfb5f15b19164
#: ../src/Doc/c-api/capsule.rst:147
msgid ""
"Set the void pointer inside *capsule* to *pointer*.  The pointer may not be "
"*NULL*."
msgstr ""

#: ../src/Doc/c-api/cell.rst:6
msgid "Cell Objects"
msgstr "Objets Cellules"

#: ../src/Doc/c-api/cell.rst:8
msgid ""
"\"Cell\" objects are used to implement variables referenced by multiple "
"scopes. For each such variable, a cell object is created to store the value; "
"the local variables of each stack frame that references the value contains a "
"reference to the cells from outer scopes which also use that variable.  When "
"the value is accessed, the value contained in the cell is used instead of "
"the cell object itself.  This de-referencing of the cell object requires "
"support from the generated byte-code; these are not automatically de-"
"referenced when accessed. Cell objects are not likely to be useful elsewhere."
msgstr ""
"Les objets \"Cellules\" sont utilisés pour implémenter des variables "
"référencées dans de multiples enviromments. Pour chacune de ces variables, "
"un objet cellule est créé pour stocker sa valeur ; les variables locales de "
"chaque pile d'exécution qui référence cette valeur contiennent une référence "
"sur les cellules des autres environnements qui utilisent aussi cette "
"variable. Quand la valeur est accédée, la valeur de la cellule est utilisée, "
"au lei de celle de l'objet cellule proprement dit. Ce dé-référencement de "
"l'objet cellule requiert l'intervention du bytecode généré ; il n'est pas "
"automatiquement dé-référencé quand il est accédé. Il est plausible que les "
"objets cellules ne soit utilisés ailleurs."

# ce1a0fc6fd9a43b088d5c251446ffcb1
#: ../src/Doc/c-api/cell.rst:20
msgid "The C structure used for cell objects."
msgstr ""

# 392657adea67433a8ad24de791fd8afa
#: ../src/Doc/c-api/cell.rst:25
msgid "The type object corresponding to cell objects."
msgstr ""

# b2ff958396df4d2f880af1be26189e2d
#: ../src/Doc/c-api/cell.rst:30
msgid "Return true if *ob* is a cell object; *ob* must not be *NULL*."
msgstr ""

# c5623ca8e8cf4cf38656cfebe1d6e7ae
#: ../src/Doc/c-api/cell.rst:35
msgid ""
"Create and return a new cell object containing the value *ob*. The parameter "
"may be *NULL*."
msgstr ""

# 2e96b8d9d71b4a7c8423983c610c4774
#: ../src/Doc/c-api/cell.rst:41
msgid "Return the contents of the cell *cell*."
msgstr ""

# f7430289331e489ead1e639a46b664af
#: ../src/Doc/c-api/cell.rst:46
msgid ""
"Return the contents of the cell *cell*, but without checking that *cell* is "
"non-*NULL* and a cell object."
msgstr ""

# 070e6bc6e9404fe2b70843b021d11624
#: ../src/Doc/c-api/cell.rst:52
msgid ""
"Set the contents of the cell object *cell* to *value*.  This releases the "
"reference to any current content of the cell. *value* may be *NULL*.  *cell* "
"must be non-*NULL*; if it is not a cell object, ``-1`` will be returned.  On "
"success, ``0`` will be returned."
msgstr ""

# f3f924f2b5234e448afd74848fe59e2e
#: ../src/Doc/c-api/cell.rst:60
msgid ""
"Sets the value of the cell object *cell* to *value*.  No reference counts "
"are adjusted, and no checks are made for safety; *cell* must be non-*NULL* "
"and must be a cell object."
msgstr ""

# 8a396af0da394427b88d44069bd9619e
#: ../src/Doc/c-api/class.rst:6
msgid "Class and Instance Objects"
msgstr ""

# 40717d8bb2f3486ab29a0bfcb87578f9
#: ../src/Doc/c-api/class.rst:10
msgid ""
"Note that the class objects described here represent old-style classes, "
"which will go away in Python 3. When creating new types for extension "
"modules, you will want to work with type objects (section :ref:"
"`typeobjects`)."
msgstr ""

# efe5b2afdc154be694d98d5e0251f065
#: ../src/Doc/c-api/class.rst:17
msgid "The C structure of the objects used to describe built-in classes."
msgstr ""

# 03ee0493fd4b43a5aac7092af1ad29ad
#: ../src/Doc/c-api/class.rst:24
msgid ""
"This is the type object for class objects; it is the same object as ``types."
"ClassType`` in the Python layer."
msgstr ""

# 466a501402e8448d98d8953c047e60d1
#: ../src/Doc/c-api/class.rst:30
msgid ""
"Return true if the object *o* is a class object, including instances of "
"types derived from the standard class object.  Return false in all other "
"cases."
msgstr ""

# 906714e2905c47fb917888febc21c7d5
#: ../src/Doc/c-api/class.rst:36
msgid ""
"Return true if *klass* is a subclass of *base*. Return false in all other "
"cases."
msgstr ""

# 7cc7701053604ca2b241185c05ef5a22
#: ../src/Doc/c-api/class.rst:41
msgid "There are very few functions specific to instance objects."
msgstr ""

# 7b635c85315747778bcf960971639c31
#: ../src/Doc/c-api/class.rst:46
msgid "Type object for class instances."
msgstr ""

# e15fc744ad344ed88c6e3cc01fb2eeed
#: ../src/Doc/c-api/class.rst:51
msgid "Return true if *obj* is an instance."
msgstr ""

# 639bd012f4324a8786d9e66e66c5d9cf
#: ../src/Doc/c-api/class.rst:56
msgid ""
"Create a new instance of a specific class.  The parameters *arg* and *kw* "
"are used as the positional and keyword parameters to the object's "
"constructor."
msgstr ""

# 172f08ad6c3e4ccb90bfc73a27690278
#: ../src/Doc/c-api/class.rst:62
msgid ""
"Create a new instance of a specific class without calling its constructor. "
"*class* is the class of new object.  The *dict* parameter will be used as "
"the object's :attr:`__dict__`; if *NULL*, a new dictionary will be created "
"for the instance."
msgstr ""

#: ../src/Doc/c-api/cobject.rst:6
#, fuzzy
msgid "CObjects"
msgstr "Objets Cellules"

# 4fb04a4f5c7845b48abd77e9948241d2
#: ../src/Doc/c-api/cobject.rst:13
msgid ""
"The CObject API is deprecated as of Python 2.7.  Please switch to the new :"
"ref:`capsules` API."
msgstr ""

# 1aa3ef4b9dde4450ba7ad46d7d2ef343
#: ../src/Doc/c-api/cobject.rst:28
msgid "Return true if its argument is a :c:type:`PyCObject`."
msgstr ""

# 08368e0cc53c4a8a86cc42902cc47280
#: ../src/Doc/c-api/cobject.rst:33
msgid ""
"Create a :c:type:`PyCObject` from the ``void *`` *cobj*.  The *destr* "
"function will be called when the object is reclaimed, unless it is *NULL*."
msgstr ""

# e407754633094ced8ac23d22b7f8b616
#: ../src/Doc/c-api/cobject.rst:39
msgid ""
"Create a :c:type:`PyCObject` from the :c:type:`void \\*` *cobj*.  The "
"*destr* function will be called when the object is reclaimed. The *desc* "
"argument can be used to pass extra callback data for the destructor function."
msgstr ""

# 5609479bd2e445cd9d5ab4cc14689cf1
#: ../src/Doc/c-api/cobject.rst:46
msgid ""
"Return the object :c:type:`void \\*` that the :c:type:`PyCObject` *self* was "
"created with."
msgstr ""

# 0c4f2392ec6d48ed8e0d5912e6e0dfd3
#: ../src/Doc/c-api/cobject.rst:52
msgid ""
"Return the description :c:type:`void \\*` that the :c:type:`PyCObject` "
"*self* was created with."
msgstr ""

# 76c32ecd555042969e25998cb93fa786
#: ../src/Doc/c-api/cobject.rst:58
msgid ""
"Set the void pointer inside *self* to *cobj*. The :c:type:`PyCObject` must "
"not have an associated destructor. Return true on success, false on failure."
msgstr ""

#: ../src/Doc/c-api/code.rst:6
msgid "Code Objects"
msgstr "Objets Code"

#: ../src/Doc/c-api/code.rst:14
msgid ""
"Code objects are a low-level detail of the CPython implementation. Each one "
"represents a chunk of executable code that hasn't yet been bound into a "
"function."
msgstr ""
"Les objets Code sont un détail bas-niveau de l'implémentation CPython. "
"Chacun d'eux représente une partie de code exécutable, qui n'a pas encore "
"été lié dans une fonction."

# 9bbdc9ec82e44baaa32a2eec75aa78a6
#: ../src/Doc/c-api/code.rst:20
msgid ""
"The C structure of the objects used to describe code objects.  The fields of "
"this type are subject to change at any time."
msgstr ""

# cec180db0b8d42e5bea0b0a33482aebc
#: ../src/Doc/c-api/code.rst:26
msgid ""
"This is an instance of :c:type:`PyTypeObject` representing the Python :class:"
"`code` type."
msgstr ""

# dc92487327274c7e8051d68dfd4706dd
#: ../src/Doc/c-api/code.rst:32
msgid "Return true if *co* is a :class:`code` object"
msgstr ""

# df76fa4474954267b9c4d0fe6218f50d
#: ../src/Doc/c-api/code.rst:36
msgid "Return the number of free variables in *co*."
msgstr ""

# 3620be5b0d994e88994579672baf3b26
#: ../src/Doc/c-api/code.rst:40
msgid ""
"Return a new code object.  If you need a dummy code object to create a "
"frame, use :c:func:`PyCode_NewEmpty` instead.  Calling :c:func:`PyCode_New` "
"directly can bind you to a precise Python version since the definition of "
"the bytecode changes often."
msgstr ""

# 067910ba4a37417b968c33b5c1c2c10f
#: ../src/Doc/c-api/code.rst:48
msgid ""
"Return a new empty code object with the specified filename, function name, "
"and first line number.  It is illegal to :keyword:`exec` or :func:`eval` the "
"resulting code object."
msgstr ""

# 48d11bc877bd417ba085007024d143c5
#: ../src/Doc/c-api/codec.rst:4
msgid "Codec registry and support functions"
msgstr ""

# 155ec4643eb34e6d9183e5b464340662
#: ../src/Doc/c-api/codec.rst:8
msgid "Register a new codec search function."
msgstr ""

# c970289d4f4348eab3b0655b6580a7cf
#: ../src/Doc/c-api/codec.rst:10
msgid ""
"As side effect, this tries to load the :mod:`encodings` package, if not yet "
"done, to make sure that it is always first in the list of search functions."
msgstr ""

# 0e0b54914eec4aeba8750a68ddd4a1db
#: ../src/Doc/c-api/codec.rst:15
msgid ""
"Return ``1`` or ``0`` depending on whether there is a registered codec for "
"the given *encoding*."
msgstr ""

# af6557fbecdd4412a071d673925d31bc
#: ../src/Doc/c-api/codec.rst:20
msgid "Generic codec based encoding API."
msgstr ""

# a650c70fa832435398b4a4e30a5f5b41
#: ../src/Doc/c-api/codec.rst:22
msgid ""
"*object* is passed through the encoder function found for the given "
"*encoding* using the error handling method defined by *errors*.  *errors* "
"may be *NULL* to use the default method defined for the codec.  Raises a :"
"exc:`LookupError` if no encoder can be found."
msgstr ""

# d4decb8446a04f8e906c469c7eee901b
#: ../src/Doc/c-api/codec.rst:29
msgid "Generic codec based decoding API."
msgstr ""

# 9063087f54da40c6b2a41f8f4e9a9bcd
#: ../src/Doc/c-api/codec.rst:31
msgid ""
"*object* is passed through the decoder function found for the given "
"*encoding* using the error handling method defined by *errors*.  *errors* "
"may be *NULL* to use the default method defined for the codec.  Raises a :"
"exc:`LookupError` if no encoder can be found."
msgstr ""

# b39ce1b0a3b442dd9381aaaa2b5cde1d
#: ../src/Doc/c-api/codec.rst:38
msgid "Codec lookup API"
msgstr ""

# 2adfcc5b993d4648afaa84c4e4927db9
#: ../src/Doc/c-api/codec.rst:40
msgid ""
"In the following functions, the *encoding* string is looked up converted to "
"all lower-case characters, which makes encodings looked up through this "
"mechanism effectively case-insensitive.  If no codec is found, a :exc:"
"`KeyError` is set and *NULL* returned."
msgstr ""

# 68c53b8c08e944b0bfb0b89da594a18f
#: ../src/Doc/c-api/codec.rst:47
msgid "Get an encoder function for the given *encoding*."
msgstr ""

# 3e9d6c298ce947a6b87f0b1d988d2743
#: ../src/Doc/c-api/codec.rst:51
msgid "Get a decoder function for the given *encoding*."
msgstr ""

# a2876ee057484ad3a8f903b53d44856b
#: ../src/Doc/c-api/codec.rst:55
msgid "Get an :class:`IncrementalEncoder` object for the given *encoding*."
msgstr ""

# d4e0e4e6e34e46838948ec9bcd14e34e
#: ../src/Doc/c-api/codec.rst:59
msgid "Get an :class:`IncrementalDecoder` object for the given *encoding*."
msgstr ""

# e30c1ff35cb84518b3f30d54e597c90c
#: ../src/Doc/c-api/codec.rst:63
msgid "Get a :class:`StreamReader` factory function for the given *encoding*."
msgstr ""

# 2b12323e0d8b42e485d9100ba5b032e3
#: ../src/Doc/c-api/codec.rst:67
msgid "Get a :class:`StreamWriter` factory function for the given *encoding*."
msgstr ""

# 5efbf4252e1e4285b94f176d12095f03
#: ../src/Doc/c-api/codec.rst:71
msgid "Registry API for Unicode encoding error handlers"
msgstr ""

# 78122f10fe804fba8811d8da59e50666
#: ../src/Doc/c-api/codec.rst:75
msgid ""
"Register the error handling callback function *error* under the given "
"*name*. This callback function will be called by a codec when it encounters "
"unencodable characters/undecodable bytes and *name* is specified as the "
"error parameter in the call to the encode/decode function."
msgstr ""

# 3622f2b34197411d9c219d3b5e072ba3
#: ../src/Doc/c-api/codec.rst:80
msgid ""
"The callback gets a single argument, an instance of :exc:"
"`UnicodeEncodeError`, :exc:`UnicodeDecodeError` or :exc:"
"`UnicodeTranslateError` that holds information about the problematic "
"sequence of characters or bytes and their offset in the original string "
"(see :ref:`unicodeexceptions` for functions to extract this information).  "
"The callback must either raise the given exception, or return a two-item "
"tuple containing the replacement for the problematic sequence, and an "
"integer giving the offset in the original string at which encoding/decoding "
"should be resumed."
msgstr ""

# c01ff5f8842145f780605269fe9da816
#: ../src/Doc/c-api/codec.rst:90
msgid "Return ``0`` on success, ``-1`` on error."
msgstr ""

# 2e85d3e8e4c44c2fa89ecccd8d491a27
#: ../src/Doc/c-api/codec.rst:94
msgid ""
"Lookup the error handling callback function registered under *name*.  As a "
"special case *NULL* can be passed, in which case the error handling callback "
"for \"strict\" will be returned."
msgstr ""

# 237d95a3a9ed4406af33551d4c2838f7
#: ../src/Doc/c-api/codec.rst:100
msgid "Raise *exc* as an exception."
msgstr ""

# 9420a5dea7de48e8b269272fff307899
#: ../src/Doc/c-api/codec.rst:104
msgid "Ignore the unicode error, skipping the faulty input."
msgstr ""

# ada9ea04083e4b3ba988f2120de8db7e
#: ../src/Doc/c-api/codec.rst:108
msgid "Replace the unicode encode error with ``?`` or ``U+FFFD``."
msgstr ""

# 77e735ec1e7d497d827077d2e481e3b4
#: ../src/Doc/c-api/codec.rst:112
msgid "Replace the unicode encode error with XML character references."
msgstr ""

# a9a54c03d8c14a6f96a39d0b24828ff0
#: ../src/Doc/c-api/codec.rst:116
msgid ""
"Replace the unicode encode error with backslash escapes (``\\x``, ``\\u`` "
"and ``\\U``)."
msgstr ""

#: ../src/Doc/c-api/complex.rst:6
msgid "Complex Number Objects"
msgstr "Objets Nombres Complexes"

#: ../src/Doc/c-api/complex.rst:10
msgid ""
"Python's complex number objects are implemented as two distinct types when "
"viewed from the C API:  one is the Python object exposed to Python programs, "
"and the other is a C structure which represents the actual complex number "
"value. The API provides functions for working with both."
msgstr ""
"Les objets Python nombres complexes sont implémentés comme deux types "
"distincts, lorsqu'ils sont vus de l'API C : l'un est l'objet Python tel "
"qu'il est vu par les programmes Python, et l'autre est une structure C qui "
"représente la valeur complexe courante. L'API fournit des fonctions pour "
"travailler avec ces deux représentations."

#: ../src/Doc/c-api/complex.rst:17
msgid "Complex Numbers as C Structures"
msgstr "Nombres complexes en tant que structures C"

#: ../src/Doc/c-api/complex.rst:19
msgid ""
"Note that the functions which accept these structures as parameters and "
"return them as results do so *by value* rather than dereferencing them "
"through pointers.  This is consistent throughout the API."
msgstr ""
"Remarquez que les fonctions qui acceptent ces structures comme paramètres et "
"les retournent comme résultats le font *par valeur* au lieur de les dé-"
"référencer en utilisant des pointeurs. Cela est constant dans toute l'API."

# cf20082839564db19d69c4a1efdd6812
#: ../src/Doc/c-api/complex.rst:26
msgid ""
"The C structure which corresponds to the value portion of a Python complex "
"number object.  Most of the functions for dealing with complex number "
"objects use structures of this type as input or output values, as "
"appropriate.  It is defined as::"
msgstr ""

#: ../src/Doc/c-api/complex.rst:39
#, fuzzy
msgid ""
"Return the sum of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr ""
"Convertit un nombre complexe Python vers une structure C :ctype:`Py_complex`."

#: ../src/Doc/c-api/complex.rst:45
#, fuzzy
msgid ""
"Return the difference between two complex numbers, using the C :c:type:"
"`Py_complex` representation."
msgstr ""
"Convertit un nombre complexe Python vers une structure C :ctype:`Py_complex`."

#: ../src/Doc/c-api/complex.rst:51
#, fuzzy
msgid ""
"Return the negation of the complex number *complex*, using the C :c:type:"
"`Py_complex` representation."
msgstr ""
"Convertit un nombre complexe Python vers une structure C :ctype:`Py_complex`."

#: ../src/Doc/c-api/complex.rst:57
#, fuzzy
msgid ""
"Return the product of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr ""
"Convertit un nombre complexe Python vers une structure C :ctype:`Py_complex`."

#: ../src/Doc/c-api/complex.rst:63
#, fuzzy
msgid ""
"Return the quotient of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr ""
"Convertit un nombre complexe Python vers une structure C :ctype:`Py_complex`."

# 841c14d175b340388584cdaeef6eb8f0
#: ../src/Doc/c-api/complex.rst:66
msgid ""
"If *divisor* is null, this method returns zero and sets :c:data:`errno` to :"
"c:data:`EDOM`."
msgstr ""

# 7aec9e6d35c64cb0a253bc775eef7333
#: ../src/Doc/c-api/complex.rst:72
msgid ""
"Return the exponentiation of *num* by *exp*, using the C :c:type:"
"`Py_complex` representation."
msgstr ""

# c7cb740c417a4ff7880c2d82508e64d8
#: ../src/Doc/c-api/complex.rst:75
msgid ""
"If *num* is null and *exp* is not a positive real number, this method "
"returns zero and sets :c:data:`errno` to :c:data:`EDOM`."
msgstr ""

#: ../src/Doc/c-api/complex.rst:80
msgid "Complex Numbers as Python Objects"
msgstr "Nombres complexes en tant qu'objets Python"

# 006c15d981e7450f8e371769d84d6d2f
#: ../src/Doc/c-api/complex.rst:85
msgid ""
"This subtype of :c:type:`PyObject` represents a Python complex number object."
msgstr ""

# b30af5f9fdd74fe29e939d5272f4331b
#: ../src/Doc/c-api/complex.rst:90
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python complex number "
"type. It is the same object as ``complex`` and ``types.ComplexType``."
msgstr ""

# 1820b02ef167466ea6c912bc42b3a706
#: ../src/Doc/c-api/complex.rst:96
msgid ""
"Return true if its argument is a :c:type:`PyComplexObject` or a subtype of :"
"c:type:`PyComplexObject`."
msgstr ""

# 68d164f7821d42bf88502e59b5dfafa6
#: ../src/Doc/c-api/complex.rst:105
msgid ""
"Return true if its argument is a :c:type:`PyComplexObject`, but not a "
"subtype of :c:type:`PyComplexObject`."
msgstr ""

#: ../src/Doc/c-api/complex.rst:113
#, fuzzy
msgid ""
"Create a new Python complex number object from a C :c:type:`Py_complex` "
"value."
msgstr ""
"Convertit un nombre complexe Python vers une structure C :ctype:`Py_complex`."

# 6ba18b91c97c49a18799bffd0bb76fca
#: ../src/Doc/c-api/complex.rst:118
msgid "Return a new :c:type:`PyComplexObject` object from *real* and *imag*."
msgstr ""

# c6b366a8d41e4009a063600f47f0c79e
#: ../src/Doc/c-api/complex.rst:123
msgid "Return the real part of *op* as a C :c:type:`double`."
msgstr ""

#: ../src/Doc/c-api/complex.rst:128
#, fuzzy
msgid "Return the imaginary part of *op* as a C :c:type:`double`."
msgstr "Convertit un nombre flottant Python vers un type C :ctype:`double`."

# 8783344ffddc45808340ec04aa8ca6d7
#: ../src/Doc/c-api/complex.rst:133
msgid ""
"Return the :c:type:`Py_complex` value of the complex number *op*. Upon "
"failure, this method returns ``-1.0`` as a real value."
msgstr ""

#: ../src/Doc/c-api/concrete.rst:8
msgid "Concrete Objects Layer"
msgstr "Couche des Objets Concrets"

#: ../src/Doc/c-api/concrete.rst:10
#, fuzzy
msgid ""
"The functions in this chapter are specific to certain Python object types. "
"Passing them an object of the wrong type is not a good idea; if you receive "
"an object from a Python program and you are not sure that it has the right "
"type, you must perform a type check first; for example, to check that an "
"object is a dictionary, use :c:func:`PyDict_Check`.  The chapter is "
"structured like the \"family tree\" of Python object types."
msgstr ""
"Les fonctions dans ce chapitre sont spécifiques à certains types d'objets "
"Python. Leur donner un objet d'un mauvais type n'est pas une bonne idée. Si "
"vous recevez un objet d'un programme Python et que vous n'êtes pas sûr qu'il "
"est du bon type, vous devez tout d'abord vérifier son type. Par exemple, "
"pour vérifier qu'un objet est un dictionnaire, utiliser :cfunc:"
"`PyDict_Check`. Ce chapitre est structuré comme un \"arbre des familles\" "
"des types d'objets Python."

#: ../src/Doc/c-api/concrete.rst:19
msgid ""
"While the functions described in this chapter carefully check the type of "
"the objects which are passed in, many of them do not check for *NULL* being "
"passed instead of a valid object.  Allowing *NULL* to be passed in can cause "
"memory access violations and immediate termination of the interpreter."
msgstr ""
"Tandis que les fonctions décrites dans ce chapitre vérifient avec soin le "
"type des objets qui leur sont passés, beaucoup d'entre elles ne vérifient "
"pas que *NULL* est passé au lieu d'un objet valide. Autoriser *NULL* à être "
"passé peut provoquer des violations d'accès à la mémoire et ainsi terminer "
"immédiatement l'interpréteur."

#: ../src/Doc/c-api/concrete.rst:28
msgid "Fundamental Objects"
msgstr "Objets fondamentaux"

#: ../src/Doc/c-api/concrete.rst:30
msgid ""
"This section describes Python type objects and the singleton object ``None``."
msgstr ""
"Cette section décrit les objets de type Python et l'objet singleton ``None``."

#: ../src/Doc/c-api/concrete.rst:41
msgid "Numeric Objects"
msgstr "Objets numériques"

#: ../src/Doc/c-api/concrete.rst:57
msgid "Sequence Objects"
msgstr "Objets séquences"

#: ../src/Doc/c-api/concrete.rst:61
msgid ""
"Generic operations on sequence objects were discussed in the previous "
"chapter; this section deals with the specific kinds of sequence objects that "
"are intrinsic to the Python language."
msgstr ""
"Les opérations génériques sur les objets séquences ont été discutées dans le "
"chapitre précédent. Cette section traite des genres spécifiques d'objets "
"séquences qui sont intrinsèques au langage Python."

#: ../src/Doc/c-api/concrete.rst:78
msgid "Mapping Objects"
msgstr "Objets association"

#: ../src/Doc/c-api/concrete.rst:90
msgid "Other Objects"
msgstr "Autres Objets"

#: ../src/Doc/c-api/conversion.rst:6
msgid "String conversion and formatting"
msgstr "Conversion et formatage de chaînes"

#: ../src/Doc/c-api/conversion.rst:8
msgid "Functions for number conversion and formatted string output."
msgstr ""
"Fonctions de conversion pour les nombres et pour la sortie des chaînes "
"formattées."

# 2e5873d04b3c486c908ca24fdc3695c7
#: ../src/Doc/c-api/conversion.rst:13
msgid ""
"Output not more than *size* bytes to *str* according to the format string "
"*format* and the extra arguments. See the Unix man page :manpage:`snprintf(2)"
"`."
msgstr ""

# 49ed637c9735420596d3ae00afdb639e
#: ../src/Doc/c-api/conversion.rst:19
msgid ""
"Output not more than *size* bytes to *str* according to the format string "
"*format* and the variable argument list *va*. Unix man page :manpage:"
"`vsnprintf(2)`."
msgstr ""

# a67ae7df0ff34d1fafe221967656f9bd
#: ../src/Doc/c-api/conversion.rst:23
msgid ""
":c:func:`PyOS_snprintf` and :c:func:`PyOS_vsnprintf` wrap the Standard C "
"library functions :c:func:`snprintf` and :c:func:`vsnprintf`. Their purpose "
"is to guarantee consistent behavior in corner cases, which the Standard C "
"functions do not."
msgstr ""

# 1c86e0525c8340bf9e8fc17d2aab9d09
#: ../src/Doc/c-api/conversion.rst:28
msgid ""
"The wrappers ensure that *str*[*size*-1] is always ``'\\0'`` upon return. "
"They never write more than *size* bytes (including the trailing ``'\\0'`` "
"into str. Both functions require that ``str != NULL``, ``size > 0`` and "
"``format != NULL``."
msgstr ""

# b2539bd7edae488ba49cc02db00fb9fe
#: ../src/Doc/c-api/conversion.rst:33
msgid ""
"If the platform doesn't have :c:func:`vsnprintf` and the buffer size needed "
"to avoid truncation exceeds *size* by more than 512 bytes, Python aborts "
"with a *Py_FatalError*."
msgstr ""

#: ../src/Doc/c-api/conversion.rst:37
msgid ""
"The return value (*rv*) for these functions should be interpreted as follows:"
msgstr ""

#: ../src/Doc/c-api/conversion.rst:39
msgid ""
"When ``0 <= rv < size``, the output conversion was successful and *rv* "
"characters were written to *str* (excluding the trailing ``'\\0'`` byte at "
"*str*[*rv*])."
msgstr ""

#: ../src/Doc/c-api/conversion.rst:43
msgid ""
"When ``rv >= size``, the output conversion was truncated and a buffer with "
"``rv + 1`` bytes would have been needed to succeed. *str*[*size*-1] is "
"``'\\0'`` in this case."
msgstr ""

#: ../src/Doc/c-api/conversion.rst:47
msgid ""
"When ``rv < 0``, \"something bad happened.\" *str*[*size*-1] is ``'\\0'`` in "
"this case too, but the rest of *str* is undefined. The exact cause of the "
"error depends on the underlying platform."
msgstr ""

#: ../src/Doc/c-api/conversion.rst:51
msgid ""
"The following functions provide locale-independent string to number "
"conversions."
msgstr ""

# cde98807fbce4c58be905162960e5f62
#: ../src/Doc/c-api/conversion.rst:56
msgid ""
"Convert a string ``s`` to a :c:type:`double`, raising a Python exception on "
"failure.  The set of accepted strings corresponds to the set of strings "
"accepted by Python's :func:`float` constructor, except that ``s`` must not "
"have leading or trailing whitespace. The conversion is independent of the "
"current locale."
msgstr ""

# d5baa74d33784afdab92d3eda77bf7a7
#: ../src/Doc/c-api/conversion.rst:62
msgid ""
"If ``endptr`` is ``NULL``, convert the whole string.  Raise ValueError and "
"return ``-1.0`` if the string is not a valid representation of a floating-"
"point number."
msgstr ""

# 53937375a7c04fab97a3f114a7d3a97f
#: ../src/Doc/c-api/conversion.rst:66
msgid ""
"If endptr is not ``NULL``, convert as much of the string as possible and set "
"``*endptr`` to point to the first unconverted character.  If no initial "
"segment of the string is the valid representation of a floating-point "
"number, set ``*endptr`` to point to the beginning of the string, raise "
"ValueError, and return ``-1.0``."
msgstr ""

# 5899074f50ed426ea1f4e42464a97fc3
#: ../src/Doc/c-api/conversion.rst:73
msgid ""
"If ``s`` represents a value that is too large to store in a float (for "
"example, ``\"1e500\"`` is such a string on many platforms) then if "
"``overflow_exception`` is ``NULL`` return ``Py_HUGE_VAL`` (with an "
"appropriate sign) and don't set any exception.  Otherwise, "
"``overflow_exception`` must point to a Python exception object; raise that "
"exception and return ``-1.0``.  In both cases, set ``*endptr`` to point to "
"the first character after the converted value."
msgstr ""

# b89d13eb473a495e9ececc2bb759e011
#: ../src/Doc/c-api/conversion.rst:81
msgid ""
"If any other error occurs during the conversion (for example an out-of-"
"memory error), set the appropriate Python exception and return ``-1.0``."
msgstr ""

# 4be9fba536f64e6ab7623d5f02e673a1
#: ../src/Doc/c-api/conversion.rst:90
msgid ""
"Convert a string to a :c:type:`double`. This function behaves like the "
"Standard C function :c:func:`strtod` does in the C locale. It does this "
"without changing the current locale, since that would not be thread-safe."
msgstr ""

# 33e989e0667345c59088793493495983
#: ../src/Doc/c-api/conversion.rst:94
msgid ""
":c:func:`PyOS_ascii_strtod` should typically be used for reading "
"configuration files or other non-user input that should be locale "
"independent."
msgstr ""

# 877859989b84427c867aabb9502e5ba2
#: ../src/Doc/c-api/conversion.rst:97
msgid "See the Unix man page :manpage:`strtod(2)` for details."
msgstr ""

# 6f6177d1bee24280bc14c113ec4c20b6
#: ../src/Doc/c-api/conversion.rst:108
msgid ""
"Convert a :c:type:`double` to a string using the ``'.'`` as the decimal "
"separator. *format* is a :c:func:`printf`\\ -style format string specifying "
"the number format. Allowed conversion characters are ``'e'``, ``'E'``, "
"``'f'``, ``'F'``, ``'g'`` and ``'G'``."
msgstr ""

# 52fa57dee1a34ccf9519d965f27b1575
#: ../src/Doc/c-api/conversion.rst:113
msgid ""
"The return value is a pointer to *buffer* with the converted string or NULL "
"if the conversion failed."
msgstr ""

# c344d750c1fb49f492ac95b4f8cc278e
#: ../src/Doc/c-api/conversion.rst:124
msgid ""
"Convert a :c:type:`double` *val* to a string using supplied *format_code*, "
"*precision*, and *flags*."
msgstr ""

# ce0b6364e19a49489904aadea5335e03
#: ../src/Doc/c-api/conversion.rst:127
msgid ""
"*format_code* must be one of ``'e'``, ``'E'``, ``'f'``, ``'F'``, ``'g'``, "
"``'G'`` or ``'r'``.  For ``'r'``, the supplied *precision* must be 0 and is "
"ignored.  The ``'r'`` format code specifies the standard :func:`repr` format."
msgstr ""

# 9b2fec3e6bfe4a998a084a1b9c4dd93c
#: ../src/Doc/c-api/conversion.rst:132
msgid ""
"*flags* can be zero or more of the values *Py_DTSF_SIGN*, "
"*Py_DTSF_ADD_DOT_0*, or *Py_DTSF_ALT*, or-ed together:"
msgstr ""

# cf469adf472647858dd88642e803441e
#: ../src/Doc/c-api/conversion.rst:135
msgid ""
"*Py_DTSF_SIGN* means to always precede the returned string with a sign "
"character, even if *val* is non-negative."
msgstr ""

# af618b62e09d4616873bd88c6d372244
#: ../src/Doc/c-api/conversion.rst:138
msgid ""
"*Py_DTSF_ADD_DOT_0* means to ensure that the returned string will not look "
"like an integer."
msgstr ""

# bbee6f5fc90b4106ad6ed97d2ce0dd61
#: ../src/Doc/c-api/conversion.rst:141
msgid ""
"*Py_DTSF_ALT* means to apply \"alternate\" formatting rules.  See the "
"documentation for the :c:func:`PyOS_snprintf` ``'#'`` specifier for details."
msgstr ""

# 07d7f8861f7f4b7ba54a01ab5d5995b8
#: ../src/Doc/c-api/conversion.rst:145
msgid ""
"If *ptype* is non-NULL, then the value it points to will be set to one of "
"*Py_DTST_FINITE*, *Py_DTST_INFINITE*, or *Py_DTST_NAN*, signifying that "
"*val* is a finite number, an infinite number, or not a number, respectively."
msgstr ""

# 915b8e2f7e9244f5910a9c9b1d0111f4
#: ../src/Doc/c-api/conversion.rst:149
msgid ""
"The return value is a pointer to *buffer* with the converted string or "
"*NULL* if the conversion failed. The caller is responsible for freeing the "
"returned string by calling :c:func:`PyMem_Free`."
msgstr ""

# 3ac7b3d8dffa458287be87dbe470755d
#: ../src/Doc/c-api/conversion.rst:158
msgid "Convert a string to a :c:type:`double` in a locale-independent way."
msgstr ""

# 02262f5d27a740f1acab5ab4922c6894
#: ../src/Doc/c-api/conversion.rst:160
msgid "See the Unix man page :manpage:`atof(2)` for details."
msgstr ""

# 3c012f841cbb44238fbfc1f0fd58dd76
#: ../src/Doc/c-api/conversion.rst:170
msgid ""
"Case insensitive comparison of strings. The function works almost "
"identically to :c:func:`strcmp` except that it ignores the case."
msgstr ""

# fe737504dce34427b6f07256f3b193b1
#: ../src/Doc/c-api/conversion.rst:178
msgid ""
"Case insensitive comparison of strings. The function works almost "
"identically to :c:func:`strncmp` except that it ignores the case."
msgstr ""

#: ../src/Doc/c-api/datetime.rst:6
msgid "DateTime Objects"
msgstr "Objets DateTime"

# 45d5caa21f0b450a914136ffd0f0419f
#: ../src/Doc/c-api/datetime.rst:8
msgid ""
"Various date and time objects are supplied by the :mod:`datetime` module. "
"Before using any of these functions, the header file :file:`datetime.h` must "
"be included in your source (note that this is not included by :file:`Python."
"h`), and the macro :c:macro:`PyDateTime_IMPORT` must be invoked, usually as "
"part of the module initialisation function.  The macro puts a pointer to a C "
"structure into a static variable, :c:data:`PyDateTimeAPI`, that is used by "
"the following macros."
msgstr ""

#: ../src/Doc/c-api/datetime.rst:16
msgid "Type-check macros:"
msgstr ""

# fc4bc3d757d04d118ff5fe46aae57c12
#: ../src/Doc/c-api/datetime.rst:21
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateType` or a subtype "
"of :c:data:`PyDateTime_DateType`.  *ob* must not be *NULL*."
msgstr ""

# d54a6c3875214fafa899608a536f71aa
#: ../src/Doc/c-api/datetime.rst:29
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateType`. *ob* must not "
"be *NULL*."
msgstr ""

# 4b865e426188479bb4615b7c9aa92157
#: ../src/Doc/c-api/datetime.rst:37
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateTimeType` or a "
"subtype of :c:data:`PyDateTime_DateTimeType`.  *ob* must not be *NULL*."
msgstr ""

# 9d61a34520984637b9aa220e131875af
#: ../src/Doc/c-api/datetime.rst:45
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateTimeType`. *ob* must "
"not be *NULL*."
msgstr ""

# c305f58181d840d2b81557f3027fd482
#: ../src/Doc/c-api/datetime.rst:53
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TimeType` or a subtype "
"of :c:data:`PyDateTime_TimeType`.  *ob* must not be *NULL*."
msgstr ""

# 9b8f384b4a1e4886b51c8b1269e9e725
#: ../src/Doc/c-api/datetime.rst:61
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TimeType`. *ob* must not "
"be *NULL*."
msgstr ""

# ca858bad71ea4c878ed2419b412cfa7c
#: ../src/Doc/c-api/datetime.rst:69
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DeltaType` or a subtype "
"of :c:data:`PyDateTime_DeltaType`.  *ob* must not be *NULL*."
msgstr ""

# 6171d1ab874d4591ab4f6d5bf548b529
#: ../src/Doc/c-api/datetime.rst:77
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DeltaType`. *ob* must not "
"be *NULL*."
msgstr ""

# 0c19346cf85146d1b79f53d64f51a70a
#: ../src/Doc/c-api/datetime.rst:85
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TZInfoType` or a subtype "
"of :c:data:`PyDateTime_TZInfoType`.  *ob* must not be *NULL*."
msgstr ""

# 04a2cd796b7c4b91aae29f887acb8309
#: ../src/Doc/c-api/datetime.rst:93
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TZInfoType`. *ob* must "
"not be *NULL*."
msgstr ""

#: ../src/Doc/c-api/datetime.rst:98
msgid "Macros to create objects:"
msgstr ""

# b417a1918d4c4f5b842767b4d0d93321
#: ../src/Doc/c-api/datetime.rst:103
msgid ""
"Return a ``datetime.date`` object with the specified year, month and day."
msgstr ""

# aadad608b70d42028b44bc40c7792dd6
#: ../src/Doc/c-api/datetime.rst:110
msgid ""
"Return a ``datetime.datetime`` object with the specified year, month, day, "
"hour, minute, second and microsecond."
msgstr ""

# d518bce50e3f405cb132827fcaf305fa
#: ../src/Doc/c-api/datetime.rst:118
msgid ""
"Return a ``datetime.time`` object with the specified hour, minute, second "
"and microsecond."
msgstr ""

# 03d699a831ce4c91b4235978cc9d9db8
#: ../src/Doc/c-api/datetime.rst:126
msgid ""
"Return a ``datetime.timedelta`` object representing the given number of "
"days, seconds and microseconds.  Normalization is performed so that the "
"resulting number of microseconds and seconds lie in the ranges documented "
"for ``datetime.timedelta`` objects."
msgstr ""

# 7a66570978ff40528896776c09f23992
#: ../src/Doc/c-api/datetime.rst:133
msgid ""
"Macros to extract fields from date objects.  The argument must be an "
"instance of :c:data:`PyDateTime_Date`, including subclasses (such as :c:data:"
"`PyDateTime_DateTime`).  The argument must not be *NULL*, and the type is "
"not checked:"
msgstr ""

# 74bf59dd1bfd4029b940f1a3f87707c7
#: ../src/Doc/c-api/datetime.rst:141
msgid "Return the year, as a positive int."
msgstr ""

# 9d8f5dd55693462184bc123e5a706769
#: ../src/Doc/c-api/datetime.rst:148
msgid "Return the month, as an int from 1 through 12."
msgstr ""

# 4a89908910f640fda1fd5703fd48fc8d
#: ../src/Doc/c-api/datetime.rst:155
msgid "Return the day, as an int from 1 through 31."
msgstr ""

# 3e5d4a3742804f9584e387e6cf6fabe8
#: ../src/Doc/c-api/datetime.rst:159
msgid ""
"Macros to extract fields from datetime objects.  The argument must be an "
"instance of :c:data:`PyDateTime_DateTime`, including subclasses. The "
"argument must not be *NULL*, and the type is not checked:"
msgstr ""

# 9200327abc72464c82656f9f718f9abc
# cb0d4954b90e41cf87199853c3a8a03f
#: ../src/Doc/c-api/datetime.rst:166 ../src/Doc/c-api/datetime.rst:198
msgid "Return the hour, as an int from 0 through 23."
msgstr ""

# 8fa8de1536ba40a09e95440b19b7a67f
# 8d14b1b33bcf44929db19e63de025de3
#: ../src/Doc/c-api/datetime.rst:173 ../src/Doc/c-api/datetime.rst:205
msgid "Return the minute, as an int from 0 through 59."
msgstr ""

# 70bcb14d43df4a69b63e6b8d3b4556ee
# 8bd103084508426f8da03c80dfc33e16
#: ../src/Doc/c-api/datetime.rst:180 ../src/Doc/c-api/datetime.rst:212
msgid "Return the second, as an int from 0 through 59."
msgstr ""

# 41d01476f2214755a9bf922f2bfcb757
# 56ba2a7109134f50bb6b23ef9e562fa8
#: ../src/Doc/c-api/datetime.rst:187 ../src/Doc/c-api/datetime.rst:219
msgid "Return the microsecond, as an int from 0 through 999999."
msgstr ""

# 0d50bf8805184f949735c25d12956641
#: ../src/Doc/c-api/datetime.rst:191
msgid ""
"Macros to extract fields from time objects.  The argument must be an "
"instance of :c:data:`PyDateTime_Time`, including subclasses. The argument "
"must not be *NULL*, and the type is not checked:"
msgstr ""

#: ../src/Doc/c-api/datetime.rst:223
msgid "Macros for the convenience of modules implementing the DB API:"
msgstr ""

# 51d30c9ddab141678b0fa59eb6f77221
#: ../src/Doc/c-api/datetime.rst:228
msgid ""
"Create and return a new ``datetime.datetime`` object given an argument tuple "
"suitable for passing to ``datetime.datetime.fromtimestamp()``."
msgstr ""

# 6943df287189407bb1ba6c11bcd194ea
#: ../src/Doc/c-api/datetime.rst:236
msgid ""
"Create and return a new ``datetime.date`` object given an argument tuple "
"suitable for passing to ``datetime.date.fromtimestamp()``."
msgstr ""

#: ../src/Doc/c-api/descriptor.rst:6
msgid "Descriptor Objects"
msgstr ""

#: ../src/Doc/c-api/descriptor.rst:8
msgid ""
"\"Descriptors\" are objects that describe some attribute of an object. They "
"are found in the dictionary of type objects."
msgstr ""

# bc9c9c0467274b70b1d78a4f6d424896
#: ../src/Doc/c-api/descriptor.rst:14
msgid "The type object for the built-in descriptor types."
msgstr ""

# 817e558a82444391a3b246520f1898f5
#: ../src/Doc/c-api/descriptor.rst:46
msgid ""
"Return true if the descriptor objects *descr* describes a data attribute, or "
"false if it describes a method.  *descr* must be a descriptor object; there "
"is no error checking."
msgstr ""

#: ../src/Doc/c-api/dict.rst:6
msgid "Dictionary Objects"
msgstr "Objets dictionnaires"

# 05bc36921980475ebb9c718507fea805
#: ../src/Doc/c-api/dict.rst:13
msgid ""
"This subtype of :c:type:`PyObject` represents a Python dictionary object."
msgstr ""

# bb0bc9926a8c4e069d3925333ee90761
#: ../src/Doc/c-api/dict.rst:22
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python dictionary "
"type.  This is exposed to Python programs as ``dict`` and ``types.DictType``."
msgstr ""

# 099ebc33fac042aca78a981161068a7a
#: ../src/Doc/c-api/dict.rst:29
msgid ""
"Return true if *p* is a dict object or an instance of a subtype of the dict "
"type."
msgstr ""

# 410fa49b40f14510a86cb00e2ea836c9
#: ../src/Doc/c-api/dict.rst:38
msgid ""
"Return true if *p* is a dict object, but not an instance of a subtype of the "
"dict type."
msgstr ""

# 9fa89173d4f6432d8252ba732eeee5a4
#: ../src/Doc/c-api/dict.rst:46
msgid "Return a new empty dictionary, or *NULL* on failure."
msgstr ""

# d4f4fdb32f2543949b81e8095cb4546d
#: ../src/Doc/c-api/dict.rst:51
msgid ""
"Return a proxy object for a mapping which enforces read-only behavior. This "
"is normally used to create a proxy to prevent modification of the dictionary "
"for non-dynamic class types."
msgstr ""

# d2a16e6149f047208c5494e2457b0458
#: ../src/Doc/c-api/dict.rst:60
msgid "Empty an existing dictionary of all key-value pairs."
msgstr ""

# d28444e8ee284e6d9d0a01481d4f1a49
#: ../src/Doc/c-api/dict.rst:65
msgid ""
"Determine if dictionary *p* contains *key*.  If an item in *p* is matches "
"*key*, return ``1``, otherwise return ``0``.  On error, return ``-1``. This "
"is equivalent to the Python expression ``key in p``."
msgstr ""

# ce4c2e8c204c4b0d88ed11f6ed3689a3
#: ../src/Doc/c-api/dict.rst:74
msgid "Return a new dictionary that contains the same key-value pairs as *p*."
msgstr ""

# 7e2b348b4e644727bab15fafcb7c4cab
#: ../src/Doc/c-api/dict.rst:81
msgid ""
"Insert *value* into the dictionary *p* with a key of *key*.  *key* must be :"
"term:`hashable`; if it isn't, :exc:`TypeError` will be raised. Return ``0`` "
"on success or ``-1`` on failure."
msgstr ""

# acb4e728eea64eb0b6a44eaa3f8b054c
#: ../src/Doc/c-api/dict.rst:90
msgid ""
"Insert *value* into the dictionary *p* using *key* as a key. *key* should be "
"a :c:type:`char\\*`.  The key object is created using ``PyString_FromString"
"(key)``.  Return ``0`` on success or ``-1`` on failure."
msgstr ""

# 1b977a9ea8bf48de8ff934d266361ccf
#: ../src/Doc/c-api/dict.rst:98
msgid ""
"Remove the entry in dictionary *p* with key *key*. *key* must be hashable; "
"if it isn't, :exc:`TypeError` is raised.  Return ``0`` on success or ``-1`` "
"on failure."
msgstr ""

# 37e5105f3d2847379a1ee988046a7f2c
#: ../src/Doc/c-api/dict.rst:105
msgid ""
"Remove the entry in dictionary *p* which has a key specified by the string "
"*key*.  Return ``0`` on success or ``-1`` on failure."
msgstr ""

# 9bee0a2316a94666b0a17f5c2bdacc5e
#: ../src/Doc/c-api/dict.rst:111
msgid ""
"Return the object from dictionary *p* which has a key *key*.  Return *NULL* "
"if the key *key* is not present, but *without* setting an exception."
msgstr ""

# 0925da82721448e0b259da013235d54a
#: ../src/Doc/c-api/dict.rst:117
msgid ""
"This is the same as :c:func:`PyDict_GetItem`, but *key* is specified as a :c:"
"type:`char\\*`, rather than a :c:type:`PyObject\\*`."
msgstr ""

# 5af28b842fda45728b838b2a76b31ce6
#: ../src/Doc/c-api/dict.rst:123
msgid ""
"Return a :c:type:`PyListObject` containing all the items from the "
"dictionary, as in the dictionary method :meth:`dict.items`."
msgstr ""

# 44eac665fcc349c8864182717f2faf7a
#: ../src/Doc/c-api/dict.rst:129
msgid ""
"Return a :c:type:`PyListObject` containing all the keys from the dictionary, "
"as in the dictionary method :meth:`dict.keys`."
msgstr ""

# 7dfe407c09aa4eeea39ae17418d4fb41
#: ../src/Doc/c-api/dict.rst:135
msgid ""
"Return a :c:type:`PyListObject` containing all the values from the "
"dictionary *p*, as in the dictionary method :meth:`dict.values`."
msgstr ""

# df4e890a7e7c4b178bc6c9a1afefd483
#: ../src/Doc/c-api/dict.rst:143
msgid ""
"Return the number of items in the dictionary.  This is equivalent to ``len(p)"
"`` on a dictionary."
msgstr ""

# 2a986ff48e0d4a80b71142312d43a104
#: ../src/Doc/c-api/dict.rst:153
msgid ""
"Iterate over all key-value pairs in the dictionary *p*.  The :c:type:"
"`Py_ssize_t` referred to by *ppos* must be initialized to ``0`` prior to the "
"first call to this function to start the iteration; the function returns "
"true for each pair in the dictionary, and false once all pairs have been "
"reported.  The parameters *pkey* and *pvalue* should either point to :c:type:"
"`PyObject\\*` variables that will be filled in with each key and value, "
"respectively, or may be *NULL*.  Any references returned through them are "
"borrowed.  *ppos* should not be altered during iteration. Its value "
"represents offsets within the internal dictionary structure, and since the "
"structure is sparse, the offsets are not consecutive."
msgstr ""

# e8ee4a02ca8a444bbfed74306874b1d9
#: ../src/Doc/c-api/dict.rst:164
msgid "For example::"
msgstr ""

# 5007a2958c2a4660aec16bba0b3ae8a4
#: ../src/Doc/c-api/dict.rst:174
msgid ""
"The dictionary *p* should not be mutated during iteration.  It is safe "
"(since Python 2.1) to modify the values of the keys as you iterate over the "
"dictionary, but only so long as the set of keys does not change.  For "
"example::"
msgstr ""

# 295365d4b9ef47b7ad9c471d334bee78
#: ../src/Doc/c-api/dict.rst:201
msgid ""
"Iterate over mapping object *b* adding key-value pairs to dictionary *a*. "
"*b* may be a dictionary, or any object supporting :c:func:`PyMapping_Keys` "
"and :c:func:`PyObject_GetItem`. If *override* is true, existing pairs in *a* "
"will be replaced if a matching key is found in *b*, otherwise pairs will "
"only be added if there is not a matching key in *a*. Return ``0`` on success "
"or ``-1`` if an exception was raised."
msgstr ""

# 1807dc50a2854c61b1dd91ffbf644829
#: ../src/Doc/c-api/dict.rst:213
msgid ""
"This is the same as ``PyDict_Merge(a, b, 1)`` in C, or ``a.update(b)`` in "
"Python.  Return ``0`` on success or ``-1`` if an exception was raised."
msgstr ""

# a0fae082cb194117ba45e33a1c5cbd42
#: ../src/Doc/c-api/dict.rst:221
msgid ""
"Update or merge into dictionary *a*, from the key-value pairs in *seq2*. "
"*seq2* must be an iterable object producing iterable objects of length 2, "
"viewed as key-value pairs.  In case of duplicate keys, the last wins if "
"*override* is true, else the first wins. Return ``0`` on success or ``-1`` "
"if an exception was raised. Equivalent Python (except for the return value)::"
msgstr ""

#: ../src/Doc/c-api/exceptions.rst:8
msgid "Exception Handling"
msgstr "Gestion des exceptions"

# e5bd7f39b3b24bf9be6b249264d86bf6
#: ../src/Doc/c-api/exceptions.rst:10
msgid ""
"The functions described in this chapter will let you handle and raise Python "
"exceptions.  It is important to understand some of the basics of Python "
"exception handling.  It works somewhat like the Unix :c:data:`errno` "
"variable: there is a global indicator (per thread) of the last error that "
"occurred.  Most functions don't clear this on success, but will set it to "
"indicate the cause of the error on failure.  Most functions also return an "
"error indicator, usually *NULL* if they are supposed to return a pointer, or "
"``-1`` if they return an integer (exception: the :c:func:`PyArg_\\*` "
"functions return ``1`` for success and ``0`` for failure)."
msgstr ""

#: ../src/Doc/c-api/exceptions.rst:20
msgid ""
"When a function must fail because some function it called failed, it "
"generally doesn't set the error indicator; the function it called already "
"set it.  It is responsible for either handling the error and clearing the "
"exception or returning after cleaning up any resources it holds (such as "
"object references or memory allocations); it should *not* continue normally "
"if it is not prepared to handle the error.  If returning due to an error, it "
"is important to indicate to the caller that an error has been set.  If the "
"error is not handled or carefully propagated, additional calls into the "
"Python/C API may not behave as intended and may fail in mysterious ways."
msgstr ""

# 47a2886e2ffd445f8f00e59b5dc9d629
#: ../src/Doc/c-api/exceptions.rst:35
msgid ""
"The error indicator consists of three Python objects corresponding to   the "
"Python variables ``sys.exc_type``, ``sys.exc_value`` and ``sys."
"exc_traceback``. API functions exist to interact with the error indicator in "
"various ways.  There is a separate error indicator for each thread."
msgstr ""

# 3f3a78b4c4e0444fa0915b0690829ffa
#: ../src/Doc/c-api/exceptions.rst:46
msgid ""
"Print a standard traceback to ``sys.stderr`` and clear the error indicator. "
"Call this function only when the error indicator is set.  (Otherwise it will "
"cause a fatal error!)"
msgstr ""

# 3b3c1bd8c9dc4e47b2310e43ae806890
#: ../src/Doc/c-api/exceptions.rst:50
msgid ""
"If *set_sys_last_vars* is nonzero, the variables :data:`sys.last_type`, :"
"data:`sys.last_value` and :data:`sys.last_traceback` will be set to the "
"type, value and traceback of the printed exception, respectively."
msgstr ""

# 388d505dd13e4f938622e25c0e1f5896
#: ../src/Doc/c-api/exceptions.rst:57
msgid "Alias for ``PyErr_PrintEx(1)``."
msgstr ""

# 54cb44626a6d48e6b988ad51950dbc33
#: ../src/Doc/c-api/exceptions.rst:62
msgid ""
"Test whether the error indicator is set.  If set, return the exception "
"*type* (the first argument to the last call to one of the :c:func:`PyErr_Set"
"\\*` functions or to :c:func:`PyErr_Restore`).  If not set, return *NULL*.  "
"You do not own a reference to the return value, so you do not need to :c:"
"func:`Py_DECREF` it."
msgstr ""

# a5b7b0bfe1004903bd7e0fc545b96506
#: ../src/Doc/c-api/exceptions.rst:70
msgid ""
"Do not compare the return value to a specific exception; use :c:func:"
"`PyErr_ExceptionMatches` instead, shown below.  (The comparison could easily "
"fail since the exception may be an instance instead of a class, in the case "
"of a class exception, or it may the a subclass of the expected exception.)"
msgstr ""

# 70dcc4601d9c43ee9ad18741695513ba
#: ../src/Doc/c-api/exceptions.rst:78
msgid ""
"Equivalent to ``PyErr_GivenExceptionMatches(PyErr_Occurred(), exc)``.  This "
"should only be called when an exception is actually set; a memory access "
"violation will occur if no exception has been raised."
msgstr ""

# 02fa530e14d54c91aff91c92290f33eb
#: ../src/Doc/c-api/exceptions.rst:85
msgid ""
"Return true if the *given* exception matches the exception in *exc*.  If "
"*exc* is a class object, this also returns true when *given* is an instance "
"of a subclass.  If *exc* is a tuple, all exceptions in the tuple (and "
"recursively in subtuples) are searched for a match."
msgstr ""

# d7722df7c5ca4b238593f03db341f522
#: ../src/Doc/c-api/exceptions.rst:93
msgid ""
"Under certain circumstances, the values returned by :c:func:`PyErr_Fetch` "
"below can be \"unnormalized\", meaning that ``*exc`` is a class object but "
"``*val`` is not an instance of the  same class.  This function can be used "
"to instantiate the class in that case.  If the values are already "
"normalized, nothing happens. The delayed normalization is implemented to "
"improve performance."
msgstr ""

# baca737171444c0da32c0be314a0abd0
#: ../src/Doc/c-api/exceptions.rst:102
msgid ""
"Clear the error indicator.  If the error indicator is not set, there is no "
"effect."
msgstr ""

# 7a67f667f4a34b89ba69ec6ff3a8b937
#: ../src/Doc/c-api/exceptions.rst:108
msgid ""
"Retrieve the error indicator into three variables whose addresses are "
"passed. If the error indicator is not set, set all three variables to "
"*NULL*.  If it is set, it will be cleared and you own a reference to each "
"object retrieved.  The value and traceback object may be *NULL* even when "
"the type object is not."
msgstr ""

# 895f4e5b587241978889ad2b0e122b10
#: ../src/Doc/c-api/exceptions.rst:115
msgid ""
"This function is normally only used by code that needs to handle exceptions "
"or by code that needs to save and restore the error indicator temporarily."
msgstr ""

# 1c833575f1a94f73b628006a58f5721d
#: ../src/Doc/c-api/exceptions.rst:121
msgid ""
"Set  the error indicator from the three objects.  If the error indicator is "
"already set, it is cleared first.  If the objects are *NULL*, the error "
"indicator is cleared.  Do not pass a *NULL* type and non-*NULL* value or "
"traceback.  The exception type should be a class.  Do not pass an invalid "
"exception type or value. (Violating these rules will cause subtle problems "
"later.)  This call takes away a reference to each object: you must own a "
"reference to each object before the call and after the call you no longer "
"own these references.  (If you don't understand this, don't use this "
"function.  I warned you.)"
msgstr ""

# 45a6cb52b5094e058218576a6459e685
#: ../src/Doc/c-api/exceptions.rst:133
msgid ""
"This function is normally only used by code that needs to save and restore "
"the error indicator temporarily; use :c:func:`PyErr_Fetch` to save the "
"current exception state."
msgstr ""

# 831f8023e7af46caaa674826e8633cd8
#: ../src/Doc/c-api/exceptions.rst:140
msgid ""
"This is the most common way to set the error indicator.  The first argument "
"specifies the exception type; it is normally one of the standard exceptions, "
"e.g. :c:data:`PyExc_RuntimeError`.  You need not increment its reference "
"count. The second argument is an error message; it is converted to a string "
"object."
msgstr ""

# 7ebdda1b9db444f798155c479f9d979c
#: ../src/Doc/c-api/exceptions.rst:148
msgid ""
"This function is similar to :c:func:`PyErr_SetString` but lets you specify "
"an arbitrary Python object for the \"value\" of the exception."
msgstr ""

# c68d2c377a2b45029f07d558c97b9c00
#: ../src/Doc/c-api/exceptions.rst:154
msgid ""
"This function sets the error indicator and returns *NULL*.  *exception* "
"should be a Python exception class.  The *format* and subsequent parameters "
"help format the error message; they have the same meaning and values as in :"
"c:func:`PyString_FromFormat`."
msgstr ""

# e00734b56ace46708b3899a67ff3f5e4
#: ../src/Doc/c-api/exceptions.rst:162
msgid "This is a shorthand for ``PyErr_SetObject(type, Py_None)``."
msgstr ""

# 0e75fb2097fc4c8c8f485d740135e5a9
#: ../src/Doc/c-api/exceptions.rst:167
msgid ""
"This is a shorthand for ``PyErr_SetString(PyExc_TypeError, message)``, where "
"*message* indicates that a built-in operation was invoked with an illegal "
"argument.  It is mostly for internal use."
msgstr ""

# 44eb66cb14ef4ee6b4d90f7dcbb7268a
#: ../src/Doc/c-api/exceptions.rst:174
msgid ""
"This is a shorthand for ``PyErr_SetNone(PyExc_MemoryError)``; it returns "
"*NULL* so an object allocation function can write ``return PyErr_NoMemory();"
"`` when it runs out of memory."
msgstr ""

# 1465723fb1f3406ea9c168d779349637
#: ../src/Doc/c-api/exceptions.rst:183
msgid ""
"This is a convenience function to raise an exception when a C library "
"function has returned an error and set the C variable :c:data:`errno`.  It "
"constructs a tuple object whose first item is the integer :c:data:`errno` "
"value and whose second item is the corresponding error message (gotten from :"
"c:func:`strerror`), and then calls ``PyErr_SetObject(type, object)``.  On "
"Unix, when the :c:data:`errno` value is :const:`EINTR`, indicating an "
"interrupted system call, this calls :c:func:`PyErr_CheckSignals`, and if "
"that set the error indicator, leaves it set to that.  The function always "
"returns *NULL*, so a wrapper function around a system call can write "
"``return PyErr_SetFromErrno(type);`` when the system call returns an error."
msgstr ""

# f5e3b4d69e0c46c98e5b601fb0e5deb0
#: ../src/Doc/c-api/exceptions.rst:197
msgid ""
"Similar to :c:func:`PyErr_SetFromErrno`, with the additional behavior that "
"if *filename* is not *NULL*, it is passed to the constructor of *type* as a "
"third parameter.  In the case of exceptions such as :exc:`IOError` and :exc:"
"`OSError`, this is used to define the :attr:`filename` attribute of the "
"exception instance."
msgstr ""

# db9b8fa8943548c3957f3960c05a63af
#: ../src/Doc/c-api/exceptions.rst:205
msgid ""
"This is a convenience function to raise :exc:`WindowsError`. If called with "
"*ierr* of :c:data:`0`, the error code returned by a call to :c:func:"
"`GetLastError` is used instead.  It calls the Win32 function :c:func:"
"`FormatMessage` to retrieve the Windows description of error code given by "
"*ierr* or :c:func:`GetLastError`, then it constructs a tuple object whose "
"first item is the *ierr* value and whose second item is the corresponding "
"error message (gotten from :c:func:`FormatMessage`), and then calls "
"``PyErr_SetObject(PyExc_WindowsError, object)``. This function always "
"returns *NULL*. Availability: Windows."
msgstr ""

# 10dc637f4e3341b48cea9d10ee4f3e56
#: ../src/Doc/c-api/exceptions.rst:217
msgid ""
"Similar to :c:func:`PyErr_SetFromWindowsErr`, with an additional parameter "
"specifying the exception type to be raised. Availability: Windows."
msgstr ""

# e8da75d0d8474163b80d5455c58aa7d9
#: ../src/Doc/c-api/exceptions.rst:225
msgid ""
"Similar to :c:func:`PyErr_SetFromWindowsErr`, with the additional behavior "
"that if *filename* is not *NULL*, it is passed to the constructor of :exc:"
"`WindowsError` as a third parameter. Availability: Windows."
msgstr ""

# 800d24a8bc724365af57c41483c67017
#: ../src/Doc/c-api/exceptions.rst:232
msgid ""
"Similar to :c:func:`PyErr_SetFromWindowsErrWithFilename`, with an additional "
"parameter specifying the exception type to be raised. Availability: Windows."
msgstr ""

# 7576ea9b9d6243cf899cbb7bc7973141
#: ../src/Doc/c-api/exceptions.rst:240
msgid ""
"This is a shorthand for ``PyErr_SetString(PyExc_SystemError, message)``, "
"where *message* indicates that an internal operation (e.g. a Python/C API "
"function) was invoked with an illegal argument.  It is mostly for internal "
"use."
msgstr ""

# 67fd4d13aed64f2594a50b89aad86c19
#: ../src/Doc/c-api/exceptions.rst:248
msgid ""
"Issue a warning message.  The *category* argument is a warning category (see "
"below) or *NULL*; the *message* argument is a message string.  *stacklevel* "
"is a positive number giving a number of stack frames; the warning will be "
"issued from the  currently executing line of code in that stack frame.  A "
"*stacklevel* of 1 is the function calling :c:func:`PyErr_WarnEx`, 2 is  the "
"function above that, and so forth."
msgstr ""

# e93ddfca1a8946249237a56127dc87c6
#: ../src/Doc/c-api/exceptions.rst:255
msgid ""
"This function normally prints a warning message to *sys.stderr*; however, it "
"is also possible that the user has specified that warnings are to be turned "
"into errors, and in that case this will raise an exception.  It is also "
"possible that the function raises an exception because of a problem with the "
"warning machinery (the implementation imports the :mod:`warnings` module to "
"do the heavy lifting). The return value is ``0`` if no exception is raised, "
"or ``-1`` if an exception is raised.  (It is not possible to determine "
"whether a warning message is actually printed, nor what the reason is for "
"the exception; this is intentional.)  If an exception is raised, the caller "
"should do its normal exception handling (for example, :c:func:`Py_DECREF` "
"owned references and return an error value)."
msgstr ""

# 7b14f34a4a624c4b969a10d5b197a169
#: ../src/Doc/c-api/exceptions.rst:267
msgid ""
"Warning categories must be subclasses of :c:data:`Warning`; the default "
"warning category is :c:data:`RuntimeWarning`.  The standard Python warning "
"categories are available as global variables whose names are ``PyExc_`` "
"followed by the Python exception name. These have the type :c:type:`PyObject"
"\\*`; they are all class objects. Their names are :c:data:`PyExc_Warning`, :"
"c:data:`PyExc_UserWarning`, :c:data:`PyExc_UnicodeWarning`, :c:data:"
"`PyExc_DeprecationWarning`, :c:data:`PyExc_SyntaxWarning`, :c:data:"
"`PyExc_RuntimeWarning`, and :c:data:`PyExc_FutureWarning`.  :c:data:"
"`PyExc_Warning` is a subclass of :c:data:`PyExc_Exception`; the other "
"warning categories are subclasses of :c:data:`PyExc_Warning`."
msgstr ""

# 09bb6d0674fa480baa34d0b84edd3e25
#: ../src/Doc/c-api/exceptions.rst:278
msgid ""
"For information about warning control, see the documentation for the :mod:"
"`warnings` module and the :option:`-W` option in the command line "
"documentation.  There is no C API for warning control."
msgstr ""

# dd92b08593ce41088872e973dbf5806c
#: ../src/Doc/c-api/exceptions.rst:285
msgid ""
"Issue a warning message.  The *category* argument is a warning category (see "
"below) or *NULL*; the *message* argument is a message string.  The warning "
"will appear to be issued from the function calling :c:func:`PyErr_Warn`, "
"equivalent to calling :c:func:`PyErr_WarnEx` with a *stacklevel* of 1."
msgstr ""

# b8840ce65b754249a172d48b49af619b
#: ../src/Doc/c-api/exceptions.rst:290
msgid "Deprecated; use :c:func:`PyErr_WarnEx` instead."
msgstr ""

# 10f8cff05be341ec8449c3f8390627e1
#: ../src/Doc/c-api/exceptions.rst:295
msgid ""
"Issue a warning message with explicit control over all warning attributes.  "
"This is a straightforward wrapper around the Python function :func:`warnings."
"warn_explicit`, see there for more information.  The *module* and *registry* "
"arguments may be set to *NULL* to get the default effect described there."
msgstr ""

# 35af441f79734fcda886ff64d53c0a8d
#: ../src/Doc/c-api/exceptions.rst:304
msgid ""
"Issue a :exc:`DeprecationWarning` with the given *message* and *stacklevel* "
"if the :c:data:`Py_Py3kWarningFlag` flag is enabled."
msgstr ""

# ddbb269657854f748f215940b35e9b6c
#: ../src/Doc/c-api/exceptions.rst:317
msgid ""
"This function interacts with Python's signal handling.  It checks whether a "
"signal has been sent to the processes and if so, invokes the corresponding "
"signal handler.  If the :mod:`signal` module is supported, this can invoke a "
"signal handler written in Python.  In all cases, the default effect for :"
"const:`SIGINT` is to raise the  :exc:`KeyboardInterrupt` exception.  If an "
"exception is raised the error indicator is set and the function returns "
"``-1``; otherwise the function returns ``0``.  The error indicator may or "
"may not be cleared if it was previously set."
msgstr ""

# 95f7ef24609e4617abfa306509efb042
#: ../src/Doc/c-api/exceptions.rst:333
msgid ""
"This function simulates the effect of a :const:`SIGINT` signal arriving --- "
"the next time :c:func:`PyErr_CheckSignals` is called,  :exc:"
"`KeyboardInterrupt` will be raised.  It may be called without holding the "
"interpreter lock."
msgstr ""

# 91f524d6d97a4920bdb85a1abc9d45cd
#: ../src/Doc/c-api/exceptions.rst:343
msgid ""
"This utility function specifies a file descriptor to which a ``'\\0'`` byte "
"will be written whenever a signal is received.  It returns the previous such "
"file descriptor.  The value ``-1`` disables the feature; this is the initial "
"state. This is equivalent to :func:`signal.set_wakeup_fd` in Python, but "
"without any error checking.  *fd* should be a valid file descriptor.  The "
"function should only be called from the main thread."
msgstr ""

# 328ba094c9234aef8022e70927bf5e7b
#: ../src/Doc/c-api/exceptions.rst:355
msgid ""
"This utility function creates and returns a new exception class. The *name* "
"argument must be the name of the new exception, a C string of the form "
"``module.classname``.  The *base* and *dict* arguments are normally *NULL*. "
"This creates a class object derived from :exc:`Exception` (accessible in C "
"as :c:data:`PyExc_Exception`)."
msgstr ""

# 1e99c0178eda48b587bf20f01b1a9809
#: ../src/Doc/c-api/exceptions.rst:361
msgid ""
"The :attr:`__module__` attribute of the new class is set to the first part "
"(up to the last dot) of the *name* argument, and the class name is set to "
"the last part (after the last dot).  The *base* argument can be used to "
"specify alternate base classes; it can either be only one class or a tuple "
"of classes. The *dict* argument can be used to specify a dictionary of class "
"variables and methods."
msgstr ""

# ae79f52a68d04df9886067fdccc4035f
#: ../src/Doc/c-api/exceptions.rst:370
msgid ""
"Same as :c:func:`PyErr_NewException`, except that the new exception class "
"can easily be given a docstring: If *doc* is non-*NULL*, it will be used as "
"the docstring for the exception class."
msgstr ""

# d6f0938895084abe82bfad3c1f010beb
#: ../src/Doc/c-api/exceptions.rst:379
msgid ""
"This utility function prints a warning message to ``sys.stderr`` when an "
"exception has been set but it is impossible for the interpreter to actually "
"raise the exception.  It is used, for example, when an exception occurs in "
"an :meth:`__del__` method."
msgstr ""

# c9e0fb06189944a19ff6eef55640484b
#: ../src/Doc/c-api/exceptions.rst:384
msgid ""
"The function is called with a single argument *obj* that identifies the "
"context in which the unraisable exception occurred. The repr of *obj* will "
"be printed in the warning message."
msgstr ""

#: ../src/Doc/c-api/exceptions.rst:392
#, fuzzy
msgid "Unicode Exception Objects"
msgstr "Objets Exception"

# 7da4f47fd38e4ac1a6b84b5cd7683d84
#: ../src/Doc/c-api/exceptions.rst:394
msgid ""
"The following functions are used to create and modify Unicode exceptions "
"from C."
msgstr ""

# f10ca5e1ba8640228485ae8ec2d474b8
#: ../src/Doc/c-api/exceptions.rst:398
msgid ""
"Create a :class:`UnicodeDecodeError` object with the attributes *encoding*, "
"*object*, *length*, *start*, *end* and *reason*."
msgstr ""

# 06e6796e6dbc42d68eef387de2aa0666
#: ../src/Doc/c-api/exceptions.rst:403
msgid ""
"Create a :class:`UnicodeEncodeError` object with the attributes *encoding*, "
"*object*, *length*, *start*, *end* and *reason*."
msgstr ""

# c2e24bd8e18e4924871ae629ead00308
#: ../src/Doc/c-api/exceptions.rst:408
msgid ""
"Create a :class:`UnicodeTranslateError` object with the attributes *object*, "
"*length*, *start*, *end* and *reason*."
msgstr ""

# 7e24a9d394fe4d00b0611a316a631b48
#: ../src/Doc/c-api/exceptions.rst:414
msgid "Return the *encoding* attribute of the given exception object."
msgstr ""

# fc958b1b71d74f0689cb45ab7cd482fe
#: ../src/Doc/c-api/exceptions.rst:420
msgid "Return the *object* attribute of the given exception object."
msgstr ""

# 13b9ce0e79114cebbe55a56d88297006
#: ../src/Doc/c-api/exceptions.rst:426
msgid ""
"Get the *start* attribute of the given exception object and place it into *"
"\\*start*.  *start* must not be *NULL*.  Return ``0`` on success, ``-1`` on "
"failure."
msgstr ""

# a0746c9cf4fa4cd8a41a3870dc9671ec
#: ../src/Doc/c-api/exceptions.rst:434
msgid ""
"Set the *start* attribute of the given exception object to *start*.  Return "
"``0`` on success, ``-1`` on failure."
msgstr ""

# 9ca29149c837416c8508cf73b4392029
#: ../src/Doc/c-api/exceptions.rst:441
msgid ""
"Get the *end* attribute of the given exception object and place it into *"
"\\*end*.  *end* must not be *NULL*.  Return ``0`` on success, ``-1`` on "
"failure."
msgstr ""

# 6a4b5df5a35549ba965917fd567873c3
#: ../src/Doc/c-api/exceptions.rst:449
msgid ""
"Set the *end* attribute of the given exception object to *end*.  Return "
"``0`` on success, ``-1`` on failure."
msgstr ""

# 9f4c68f575154ce6a309f201263ac231
#: ../src/Doc/c-api/exceptions.rst:456
msgid "Return the *reason* attribute of the given exception object."
msgstr ""

# 9e25bea2fecc4ca0887d66ddfa5a80e0
#: ../src/Doc/c-api/exceptions.rst:462
msgid ""
"Set the *reason* attribute of the given exception object to *reason*.  "
"Return ``0`` on success, ``-1`` on failure."
msgstr ""

#: ../src/Doc/c-api/exceptions.rst:467
msgid "Recursion Control"
msgstr "Contrôle de la récursion"

#: ../src/Doc/c-api/exceptions.rst:469
msgid ""
"These two functions provide a way to perform safe recursive calls at the C "
"level, both in the core and in extension modules.  They are needed if the "
"recursive code does not necessarily invoke Python code (which tracks its "
"recursion depth automatically)."
msgstr ""

# 2f53fed0fb654c4f961d774162291803
#: ../src/Doc/c-api/exceptions.rst:476
msgid "Marks a point where a recursive C-level call is about to be performed."
msgstr ""

# 230fd9a72abd4b418c1f6ad1dab03405
#: ../src/Doc/c-api/exceptions.rst:478
msgid ""
"If :const:`USE_STACKCHECK` is defined, this function checks if the OS stack "
"overflowed using :c:func:`PyOS_CheckStack`.  In this is the case, it sets a :"
"exc:`MemoryError` and returns a nonzero value."
msgstr ""

# 4a9c40e0a5244846953719a0eeab4e24
#: ../src/Doc/c-api/exceptions.rst:482
msgid ""
"The function then checks if the recursion limit is reached.  If this is the "
"case, a :exc:`RuntimeError` is set and a nonzero value is returned. "
"Otherwise, zero is returned."
msgstr ""

# 41d79e7120844b23a999754f12500a09
#: ../src/Doc/c-api/exceptions.rst:486
msgid ""
"*where* should be a string such as ``\" in instance check\"`` to be "
"concatenated to the :exc:`RuntimeError` message caused by the recursion "
"depth limit."
msgstr ""

# 644f644f48734ffbadadafe68c94de40
#: ../src/Doc/c-api/exceptions.rst:492
msgid ""
"Ends a :c:func:`Py_EnterRecursiveCall`.  Must be called once for each "
"*successful* invocation of :c:func:`Py_EnterRecursiveCall`."
msgstr ""

#: ../src/Doc/c-api/exceptions.rst:499
msgid "Standard Exceptions"
msgstr "Exceptions standards"

# d64ce06938f341308f6af87f17836bc9
#: ../src/Doc/c-api/exceptions.rst:501
msgid ""
"All standard Python exceptions are available as global variables whose names "
"are ``PyExc_`` followed by the Python exception name.  These have the type :"
"c:type:`PyObject\\*`; they are all class objects.  For completeness, here "
"are all the variables:"
msgstr ""

#: ../src/Doc/c-api/exceptions.rst:507
msgid "C Name"
msgstr "Nom C"

#: ../src/Doc/c-api/exceptions.rst:507
msgid "Python Name"
msgstr "Nom Python"

#: ../src/Doc/c-api/exceptions.rst:507
msgid "Notes"
msgstr "Notes"

#: ../src/Doc/c-api/exceptions.rst:509
#, fuzzy
msgid ":c:data:`PyExc_BaseException`"
msgstr ":cdata:`PyExc_BaseException`"

#: ../src/Doc/c-api/exceptions.rst:509
msgid ":exc:`BaseException`"
msgstr ":exc:`BaseException`"

# 6d44dd9d62194c23b2bb84c47c1e2f1a
#: ../src/Doc/c-api/exceptions.rst:509
msgid "(1), (4)"
msgstr ""

#: ../src/Doc/c-api/exceptions.rst:511
#, fuzzy
msgid ":c:data:`PyExc_Exception`"
msgstr ":cdata:`PyExc_Exception`"

#: ../src/Doc/c-api/exceptions.rst:511
msgid ":exc:`Exception`"
msgstr ":exc:`Exception`"

#: ../src/Doc/c-api/exceptions.rst:511 ../src/Doc/c-api/exceptions.rst:513
#: ../src/Doc/c-api/exceptions.rst:515 ../src/Doc/c-api/exceptions.rst:517
#: ../src/Doc/c-api/exceptions.rst:525
msgid "\\(1)"
msgstr "\\(1)"

#: ../src/Doc/c-api/exceptions.rst:513
#, fuzzy
msgid ":c:data:`PyExc_StandardError`"
msgstr ":cdata:`PyExc_SyntaxError`"

#: ../src/Doc/c-api/exceptions.rst:513
#, fuzzy
msgid ":exc:`StandardError`"
msgstr ":exc:`SyntaxError`"

#: ../src/Doc/c-api/exceptions.rst:515
#, fuzzy
msgid ":c:data:`PyExc_ArithmeticError`"
msgstr ":cdata:`PyExc_ArithmeticError`"

#: ../src/Doc/c-api/exceptions.rst:515
msgid ":exc:`ArithmeticError`"
msgstr ":exc:`ArithmeticError`"

#: ../src/Doc/c-api/exceptions.rst:517
#, fuzzy
msgid ":c:data:`PyExc_LookupError`"
msgstr ":cdata:`PyExc_LookupError`"

#: ../src/Doc/c-api/exceptions.rst:517
msgid ":exc:`LookupError`"
msgstr ":exc:`LookupError`"

#: ../src/Doc/c-api/exceptions.rst:519
#, fuzzy
msgid ":c:data:`PyExc_AssertionError`"
msgstr ":cdata:`PyExc_AssertionError`"

#: ../src/Doc/c-api/exceptions.rst:519
msgid ":exc:`AssertionError`"
msgstr ":exc:`AssertionError`"

#: ../src/Doc/c-api/exceptions.rst:521
#, fuzzy
msgid ":c:data:`PyExc_AttributeError`"
msgstr ":cdata:`PyExc_AttributeError`"

#: ../src/Doc/c-api/exceptions.rst:521
msgid ":exc:`AttributeError`"
msgstr ":exc:`AttributeError`"

#: ../src/Doc/c-api/exceptions.rst:523
#, fuzzy
msgid ":c:data:`PyExc_EOFError`"
msgstr ":cdata:`PyExc_EOFError`"

#: ../src/Doc/c-api/exceptions.rst:523
msgid ":exc:`EOFError`"
msgstr ":exc:`EOFError`"

#: ../src/Doc/c-api/exceptions.rst:525
#, fuzzy
msgid ":c:data:`PyExc_EnvironmentError`"
msgstr ":cdata:`PyExc_EnvironmentError`"

#: ../src/Doc/c-api/exceptions.rst:525
msgid ":exc:`EnvironmentError`"
msgstr ":exc:`EnvironmentError`"

#: ../src/Doc/c-api/exceptions.rst:527
#, fuzzy
msgid ":c:data:`PyExc_FloatingPointError`"
msgstr ":cdata:`PyExc_FloatingPointError`"

#: ../src/Doc/c-api/exceptions.rst:527
msgid ":exc:`FloatingPointError`"
msgstr ":exc:`FloatingPointError`"

#: ../src/Doc/c-api/exceptions.rst:529
#, fuzzy
msgid ":c:data:`PyExc_IOError`"
msgstr ":cdata:`PyExc_IOError`"

#: ../src/Doc/c-api/exceptions.rst:529
msgid ":exc:`IOError`"
msgstr ":exc:`IOError`"

#: ../src/Doc/c-api/exceptions.rst:531
#, fuzzy
msgid ":c:data:`PyExc_ImportError`"
msgstr ":cdata:`PyExc_ImportError`"

#: ../src/Doc/c-api/exceptions.rst:531
msgid ":exc:`ImportError`"
msgstr ":exc:`ImportError`"

#: ../src/Doc/c-api/exceptions.rst:533
#, fuzzy
msgid ":c:data:`PyExc_IndexError`"
msgstr ":cdata:`PyExc_IndexError`"

#: ../src/Doc/c-api/exceptions.rst:533
msgid ":exc:`IndexError`"
msgstr ":exc:`IndexError`"

#: ../src/Doc/c-api/exceptions.rst:535
#, fuzzy
msgid ":c:data:`PyExc_KeyError`"
msgstr ":cdata:`PyExc_KeyError`"

#: ../src/Doc/c-api/exceptions.rst:535
msgid ":exc:`KeyError`"
msgstr ":exc:`KeyError`"

#: ../src/Doc/c-api/exceptions.rst:537
#, fuzzy
msgid ":c:data:`PyExc_KeyboardInterrupt`"
msgstr ":cdata:`PyExc_KeyboardInterrupt`"

#: ../src/Doc/c-api/exceptions.rst:537
msgid ":exc:`KeyboardInterrupt`"
msgstr ":exc:`KeyboardInterrupt`"

#: ../src/Doc/c-api/exceptions.rst:539
#, fuzzy
msgid ":c:data:`PyExc_MemoryError`"
msgstr ":cdata:`PyExc_MemoryError`"

#: ../src/Doc/c-api/exceptions.rst:539
msgid ":exc:`MemoryError`"
msgstr ":exc:`MemoryError`"

#: ../src/Doc/c-api/exceptions.rst:541
#, fuzzy
msgid ":c:data:`PyExc_NameError`"
msgstr ":cdata:`PyExc_NameError`"

#: ../src/Doc/c-api/exceptions.rst:541
msgid ":exc:`NameError`"
msgstr ":exc:`NameError`"

#: ../src/Doc/c-api/exceptions.rst:543
#, fuzzy
msgid ":c:data:`PyExc_NotImplementedError`"
msgstr ":cdata:`PyExc_NotImplementedError`"

#: ../src/Doc/c-api/exceptions.rst:543
msgid ":exc:`NotImplementedError`"
msgstr ":exc:`NotImplementedError`"

#: ../src/Doc/c-api/exceptions.rst:545
#, fuzzy
msgid ":c:data:`PyExc_OSError`"
msgstr ":cdata:`PyExc_OSError`"

#: ../src/Doc/c-api/exceptions.rst:545
msgid ":exc:`OSError`"
msgstr ":exc:`OSError`"

#: ../src/Doc/c-api/exceptions.rst:547
#, fuzzy
msgid ":c:data:`PyExc_OverflowError`"
msgstr ":cdata:`PyExc_OverflowError`"

#: ../src/Doc/c-api/exceptions.rst:547
msgid ":exc:`OverflowError`"
msgstr ":exc:`OverflowError`"

#: ../src/Doc/c-api/exceptions.rst:549
#, fuzzy
msgid ":c:data:`PyExc_ReferenceError`"
msgstr ":cdata:`PyExc_ReferenceError`"

#: ../src/Doc/c-api/exceptions.rst:549
msgid ":exc:`ReferenceError`"
msgstr ":exc:`ReferenceError`"

#: ../src/Doc/c-api/exceptions.rst:549
msgid "\\(2)"
msgstr "\\(2)"

#: ../src/Doc/c-api/exceptions.rst:551
#, fuzzy
msgid ":c:data:`PyExc_RuntimeError`"
msgstr ":cdata:`PyExc_RuntimeError`"

#: ../src/Doc/c-api/exceptions.rst:551
msgid ":exc:`RuntimeError`"
msgstr ":exc:`RuntimeError`"

#: ../src/Doc/c-api/exceptions.rst:553
#, fuzzy
msgid ":c:data:`PyExc_SyntaxError`"
msgstr ":cdata:`PyExc_SyntaxError`"

#: ../src/Doc/c-api/exceptions.rst:553
msgid ":exc:`SyntaxError`"
msgstr ":exc:`SyntaxError`"

#: ../src/Doc/c-api/exceptions.rst:555
#, fuzzy
msgid ":c:data:`PyExc_SystemError`"
msgstr ":cdata:`PyExc_SystemError`"

#: ../src/Doc/c-api/exceptions.rst:555
msgid ":exc:`SystemError`"
msgstr ":exc:`SystemError`"

#: ../src/Doc/c-api/exceptions.rst:557
#, fuzzy
msgid ":c:data:`PyExc_SystemExit`"
msgstr ":cdata:`PyExc_SystemExit`"

#: ../src/Doc/c-api/exceptions.rst:557
msgid ":exc:`SystemExit`"
msgstr ":exc:`SystemExit`"

#: ../src/Doc/c-api/exceptions.rst:559
#, fuzzy
msgid ":c:data:`PyExc_TypeError`"
msgstr ":cdata:`PyExc_TypeError`"

#: ../src/Doc/c-api/exceptions.rst:559
msgid ":exc:`TypeError`"
msgstr ":exc:`TypeError`"

#: ../src/Doc/c-api/exceptions.rst:561
#, fuzzy
msgid ":c:data:`PyExc_ValueError`"
msgstr ":cdata:`PyExc_ValueError`"

#: ../src/Doc/c-api/exceptions.rst:561
msgid ":exc:`ValueError`"
msgstr ":exc:`ValueError`"

#: ../src/Doc/c-api/exceptions.rst:563
#, fuzzy
msgid ":c:data:`PyExc_WindowsError`"
msgstr ":cdata:`PyExc_WindowsError`"

#: ../src/Doc/c-api/exceptions.rst:563
msgid ":exc:`WindowsError`"
msgstr ":exc:`WindowsError`"

#: ../src/Doc/c-api/exceptions.rst:563
msgid "\\(3)"
msgstr "\\(3)"

#: ../src/Doc/c-api/exceptions.rst:565
#, fuzzy
msgid ":c:data:`PyExc_ZeroDivisionError`"
msgstr ":cdata:`PyExc_ZeroDivisionError`"

#: ../src/Doc/c-api/exceptions.rst:565
msgid ":exc:`ZeroDivisionError`"
msgstr ":exc:`ZeroDivisionError`"

#: ../src/Doc/c-api/exceptions.rst:599
msgid "Notes:"
msgstr "Notes : "

#: ../src/Doc/c-api/exceptions.rst:602
msgid "This is a base class for other standard exceptions."
msgstr "C'est la classe de base pour les autres exceptions standards"

#: ../src/Doc/c-api/exceptions.rst:605
msgid "This is the same as :exc:`weakref.ReferenceError`."
msgstr "Identique à :exc:`weakref.ReferenceError`."

#: ../src/Doc/c-api/exceptions.rst:608
msgid ""
"Only defined on Windows; protect code that uses this by testing that the "
"preprocessor macro ``MS_WINDOWS`` is defined."
msgstr ""

#: ../src/Doc/c-api/exceptions.rst:616
#, fuzzy
msgid "String Exceptions"
msgstr "Exceptions standards"

#: ../src/Doc/c-api/file.rst:6
msgid "File Objects"
msgstr "Objets fichiers"

# 943e5b383d4e41078f6d70471e57f92c
#: ../src/Doc/c-api/file.rst:10
msgid ""
"Python's built-in file objects are implemented entirely on the :c:type:`FILE"
"\\*` support from the C standard library.  This is an implementation detail "
"and may change in future releases of Python."
msgstr ""

# 2a729b853b64425f87cad0d43b9da6a4
#: ../src/Doc/c-api/file.rst:17
msgid "This subtype of :c:type:`PyObject` represents a Python file object."
msgstr ""

# b9d46452b2724ac4b373b49a39c80ed3
#: ../src/Doc/c-api/file.rst:24
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python file type.  "
"This is exposed to Python programs as ``file`` and ``types.FileType``."
msgstr ""

# 8eb6fb4c20354c99b67bec2a87647753
#: ../src/Doc/c-api/file.rst:30
msgid ""
"Return true if its argument is a :c:type:`PyFileObject` or a subtype of :c:"
"type:`PyFileObject`."
msgstr ""

# 2994094e257e47fb92f55a29aeda8aac
#: ../src/Doc/c-api/file.rst:39
msgid ""
"Return true if its argument is a :c:type:`PyFileObject`, but not a subtype "
"of :c:type:`PyFileObject`."
msgstr ""

# 40402b1385424b70a5b0bacc98a95137
#: ../src/Doc/c-api/file.rst:49
msgid ""
"On success, return a new file object that is opened on the file given by "
"*filename*, with a file mode given by *mode*, where *mode* has the same "
"semantics as the standard C routine :c:func:`fopen`.  On failure, return "
"*NULL*."
msgstr ""

# cae3e83c0b7343b18facf90c3f87372d
#: ../src/Doc/c-api/file.rst:56
msgid ""
"Create a new :c:type:`PyFileObject` from the already-open standard C file "
"pointer, *fp*.  The function *close* will be called when the file should be "
"closed.  Return *NULL* and close the file using *close* on failure. *close* "
"is optional and can be set to *NULL*."
msgstr ""

# 42ec07292b0a43b4ae4245736f7765a1
#: ../src/Doc/c-api/file.rst:64
msgid "Return the file object associated with *p* as a :c:type:`FILE\\*`."
msgstr ""

# 04fa425a5e434f76b3b8f1243c8b8deb
#: ../src/Doc/c-api/file.rst:66
msgid ""
"If the caller will ever use the returned :c:type:`FILE\\*` object while the :"
"term:`GIL` is released it must also call the :c:func:`PyFile_IncUseCount` "
"and :c:func:`PyFile_DecUseCount` functions described below as appropriate."
msgstr ""

# b482377cdf2f4265ab6db5f66907dc61
#: ../src/Doc/c-api/file.rst:73
msgid ""
"Increments the PyFileObject's internal use count to indicate that the "
"underlying :c:type:`FILE\\*` is being used. This prevents Python from "
"calling f_close() on it from another thread. Callers of this must call :c:"
"func:`PyFile_DecUseCount` when they are finished with the :c:type:`FILE"
"\\*`.  Otherwise the file object will never be closed by Python."
msgstr ""

# 9e9688dfbbda46a7b3adcf95767c13d1
#: ../src/Doc/c-api/file.rst:80
msgid "The :term:`GIL` must be held while calling this function."
msgstr ""

# 8193f10cb51e4e68a32e5b3f1827580b
#: ../src/Doc/c-api/file.rst:82
msgid ""
"The suggested use is to call this after :c:func:`PyFile_AsFile` and before "
"you release the GIL::"
msgstr ""

# 8f970a342a044b60a6798dadd24bfd49
#: ../src/Doc/c-api/file.rst:99
msgid ""
"Decrements the PyFileObject's internal unlocked_count member to indicate "
"that the caller is done with its own use of the :c:type:`FILE\\*`. This may "
"only be called to undo a prior call to :c:func:`PyFile_IncUseCount`."
msgstr ""

# e4e25ab7bef94fd0b7dc07cbc4212d60
#: ../src/Doc/c-api/file.rst:103
msgid ""
"The :term:`GIL` must be held while calling this function (see the example "
"above)."
msgstr ""

# 712a1ab4e4ec46fa962cef5495736b90
#: ../src/Doc/c-api/file.rst:113
msgid ""
"Equivalent to ``p.readline([n])``, this function reads one line from the "
"object *p*.  *p* may be a file object or any object with a :meth:`readline` "
"method.  If *n* is ``0``, exactly one line is read, regardless of the length "
"of the line.  If *n* is greater than ``0``, no more than *n* bytes will be "
"read from the file; a partial line can be returned.  In both cases, an empty "
"string is returned if the end of the file is reached immediately.  If *n* is "
"less than ``0``, however, one line is read regardless of length, but :exc:"
"`EOFError` is raised if the end of the file is reached immediately."
msgstr ""

# 7ba89a47f71848d2ab1ba33e75dd582d
#: ../src/Doc/c-api/file.rst:125
msgid "Return the name of the file specified by *p* as a string object."
msgstr ""

# 8fb2043207d643949c85cbe5f1785248
#: ../src/Doc/c-api/file.rst:132
msgid ""
"Available on systems with :c:func:`setvbuf` only.  This should only be "
"called immediately after file object creation."
msgstr ""

# c036029ea1c94ea487286e1f8e4f037a
#: ../src/Doc/c-api/file.rst:138
msgid ""
"Set the file's encoding for Unicode output to *enc*. Return 1 on success and "
"0 on failure."
msgstr ""

# 27bb7ac9acfa40d6b6adfe9862a4807f
#: ../src/Doc/c-api/file.rst:146
msgid ""
"Set the file's encoding for Unicode output to *enc*, and its error mode to "
"*err*. Return 1 on success and 0 on failure."
msgstr ""

# 5753b0d27f8d4858a791f84006d2aeb4
#: ../src/Doc/c-api/file.rst:156
msgid ""
"This function exists for internal use by the interpreter.  Set the :attr:"
"`softspace` attribute of *p* to *newflag* and return the previous value. *p* "
"does not have to be a file object for this function to work properly; any "
"object is supported (thought its only interesting if the :attr:`softspace` "
"attribute can be set).  This function clears any errors, and will return "
"``0`` as the previous value if the attribute either does not exist or if "
"there were errors in retrieving it.  There is no way to detect errors from "
"this function, but doing so should not be needed."
msgstr ""

# b1088f9f4c1742baa47d471ceba9e2a4
#: ../src/Doc/c-api/file.rst:170
msgid ""
"Write object *obj* to file object *p*.  The only supported flag for *flags* "
"is :const:`Py_PRINT_RAW`; if given, the :func:`str` of the object is written "
"instead of the :func:`repr`.  Return ``0`` on success or ``-1`` on failure; "
"the appropriate exception will be set."
msgstr ""

# e3c3ed08fe144f20b37154576080c0bc
#: ../src/Doc/c-api/file.rst:178
msgid ""
"Write string *s* to file object *p*.  Return ``0`` on success or ``-1`` on "
"failure; the appropriate exception will be set."
msgstr ""

#: ../src/Doc/c-api/float.rst:6
msgid "Floating Point Objects"
msgstr ""

# 97c530aa13cb46a3bc76af48379557dd
#: ../src/Doc/c-api/float.rst:13
msgid ""
"This subtype of :c:type:`PyObject` represents a Python floating point object."
msgstr ""

# 69a72fc6502a4d6fa0bab04a2da1c7c3
#: ../src/Doc/c-api/float.rst:20
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python floating point "
"type.  This is the same object as ``float`` and ``types.FloatType``."
msgstr ""

# 9b13d6efab754d85894ae78651f2f158
#: ../src/Doc/c-api/float.rst:26
msgid ""
"Return true if its argument is a :c:type:`PyFloatObject` or a subtype of :c:"
"type:`PyFloatObject`."
msgstr ""

# fa33375c6fed467ba01f4f5f6235d30d
#: ../src/Doc/c-api/float.rst:35
msgid ""
"Return true if its argument is a :c:type:`PyFloatObject`, but not a subtype "
"of :c:type:`PyFloatObject`."
msgstr ""

# 0e5c852a034d491ebf800bf281608ea9
#: ../src/Doc/c-api/float.rst:43
msgid ""
"Create a :c:type:`PyFloatObject` object based on the string value in *str*, "
"or *NULL* on failure.  The *pend* argument is ignored.  It remains only for "
"backward compatibility."
msgstr ""

# 095dc0b2db4b4fee864853b3535715b4
#: ../src/Doc/c-api/float.rst:50
msgid "Create a :c:type:`PyFloatObject` object from *v*, or *NULL* on failure."
msgstr ""

# 0841cab372a14b07921d3e09b46dc66d
#: ../src/Doc/c-api/float.rst:55
msgid ""
"Return a C :c:type:`double` representation of the contents of *pyfloat*.  If "
"*pyfloat* is not a Python floating point object but has a :meth:`__float__` "
"method, this method will first be called to convert *pyfloat* into a float. "
"This method returns ``-1.0`` upon failure, so one should call :c:func:"
"`PyErr_Occurred` to check for errors."
msgstr ""

# cd7ae8be484d4530994185f0b01165ca
#: ../src/Doc/c-api/float.rst:64
msgid ""
"Return a C :c:type:`double` representation of the contents of *pyfloat*, but "
"without error checking."
msgstr ""

# ed02fcc3b21146018d6e2060ebe2ef5a
#: ../src/Doc/c-api/float.rst:70
msgid ""
"Return a structseq instance which contains information about the precision, "
"minimum and maximum values of a float. It's a thin wrapper around the header "
"file :file:`float.h`."
msgstr ""

# a89c2d055a534b5abdc6d4a31065a26a
#: ../src/Doc/c-api/float.rst:79
msgid ""
"Return the maximum representable finite float *DBL_MAX* as C :c:type:"
"`double`."
msgstr ""

# 70db70ccf92144178228046fbc05396d
#: ../src/Doc/c-api/float.rst:86
msgid ""
"Return the minimum normalized positive float *DBL_MIN* as C :c:type:`double`."
msgstr ""

# 70352d479e994b66907f77925b48aeec
#: ../src/Doc/c-api/float.rst:93
msgid ""
"Clear the float free list. Return the number of items that could not be "
"freed."
msgstr ""

# 2384008ebd0d49be984684ea00d238c7
#: ../src/Doc/c-api/float.rst:101
msgid ""
"Convert the argument *v* to a string, using the same rules as :func:`str`. "
"The length of *buf* should be at least 100."
msgstr ""

# 6ff36819b4e24ea8a7f68f3bc1e2044b
# 3f7b3f7a2bb94669855e202dbe6e5408
#: ../src/Doc/c-api/float.rst:104 ../src/Doc/c-api/float.rst:116
msgid ""
"This function is unsafe to call because it writes to a buffer whose length "
"it does not know."
msgstr ""

# 5eadf459b7374a3a87c0545a4efbd945
#: ../src/Doc/c-api/float.rst:113
msgid ""
"Same as PyFloat_AsString, except uses the same rules as :func:`repr`.  The "
"length of *buf* should be at least 100."
msgstr ""

#: ../src/Doc/c-api/function.rst:6
msgid "Function Objects"
msgstr ""

#: ../src/Doc/c-api/function.rst:10
msgid "There are a few functions specific to Python functions."
msgstr ""

# 450dc59d453340c5975578faa1e879ec
#: ../src/Doc/c-api/function.rst:15
msgid "The C structure used for functions."
msgstr ""

# 62ee62dc12b8465d8f939acac352b62b
#: ../src/Doc/c-api/function.rst:22
msgid ""
"This is an instance of :c:type:`PyTypeObject` and represents the Python "
"function type.  It is exposed to Python programmers as ``types."
"FunctionType``."
msgstr ""

# 2123b6d1a4b9433d910fb30714e29343
#: ../src/Doc/c-api/function.rst:28
msgid ""
"Return true if *o* is a function object (has type :c:data:"
"`PyFunction_Type`). The parameter must not be *NULL*."
msgstr ""

# 68bb8c82da3542af99b2fc073cc8d4ab
#: ../src/Doc/c-api/function.rst:34
msgid ""
"Return a new function object associated with the code object *code*. "
"*globals* must be a dictionary with the global variables accessible to the "
"function."
msgstr ""

# b6b10bd35a2644debda31db4abbe7d07
#: ../src/Doc/c-api/function.rst:37
msgid ""
"The function's docstring, name and *__module__* are retrieved from the code "
"object, the argument defaults and closure are set to *NULL*."
msgstr ""

# 97db8e407bbe4317aa471bcd3b1f49c6
#: ../src/Doc/c-api/function.rst:43
msgid "Return the code object associated with the function object *op*."
msgstr ""

# 4082d2c4ef234ded8375f5cd6f9c19c8
#: ../src/Doc/c-api/function.rst:48
msgid "Return the globals dictionary associated with the function object *op*."
msgstr ""

# af4d24da48124858aff504388ff9998d
#: ../src/Doc/c-api/function.rst:53
msgid ""
"Return the *__module__* attribute of the function object *op*. This is "
"normally a string containing the module name, but can be set to any other "
"object by Python code."
msgstr ""

# fe3a291de68941518edd47193cd91c98
#: ../src/Doc/c-api/function.rst:60
msgid ""
"Return the argument default values of the function object *op*. This can be "
"a tuple of arguments or *NULL*."
msgstr ""

# d4b7b283d5a64e7db1f2579615bfcbf7
#: ../src/Doc/c-api/function.rst:66
msgid ""
"Set the argument default values for the function object *op*. *defaults* "
"must be *Py_None* or a tuple."
msgstr ""

# 13386574347c4be28421cc60fde10318
# b4d979c78ca5410cafc545b95feafa8a
#: ../src/Doc/c-api/function.rst:69 ../src/Doc/c-api/function.rst:83
msgid "Raises :exc:`SystemError` and returns ``-1`` on failure."
msgstr ""

# 9c8b29f0b0f9493db5187d547b56d38b
#: ../src/Doc/c-api/function.rst:74
msgid ""
"Return the closure associated with the function object *op*. This can be "
"*NULL* or a tuple of cell objects."
msgstr ""

# 6a44cdc6bff64f30928be7e953536cf4
#: ../src/Doc/c-api/function.rst:80
msgid ""
"Set the closure associated with the function object *op*. *closure* must be "
"*Py_None* or a tuple of cell objects."
msgstr ""

#: ../src/Doc/c-api/gcsupport.rst:6
msgid "Supporting Cyclic Garbage Collection"
msgstr ""

#: ../src/Doc/c-api/gcsupport.rst:8
msgid ""
"Python's support for detecting and collecting garbage which involves "
"circular references requires support from object types which are \"containers"
"\" for other objects which may also be containers.  Types which do not store "
"references to other objects, or which only store references to atomic types "
"(such as numbers or strings), do not need to provide any explicit support "
"for garbage collection."
msgstr ""

#: ../src/Doc/c-api/gcsupport.rst:18
msgid ""
"To create a container type, the :attr:`tp_flags` field of the type object "
"must include the :const:`Py_TPFLAGS_HAVE_GC` and provide an implementation "
"of the :attr:`tp_traverse` handler.  If instances of the type are mutable, "
"a :attr:`tp_clear` implementation must also be provided."
msgstr ""

#: ../src/Doc/c-api/gcsupport.rst:27
msgid ""
"Objects with a type with this flag set must conform with the rules "
"documented here.  For convenience these objects will be referred to as "
"container objects."
msgstr ""

#: ../src/Doc/c-api/gcsupport.rst:31
msgid "Constructors for container types must conform to two rules:"
msgstr ""

# 1088d4dd62fa4a41b2f40e1b0f5276a5
#: ../src/Doc/c-api/gcsupport.rst:33
msgid ""
"The memory for the object must be allocated using :c:func:`PyObject_GC_New` "
"or :c:func:`PyObject_GC_NewVar`."
msgstr ""

# afdf114ff10c4abeb97879e968170748
#: ../src/Doc/c-api/gcsupport.rst:36
msgid ""
"Once all the fields which may contain references to other containers are "
"initialized, it must call :c:func:`PyObject_GC_Track`."
msgstr ""

# 9009f42499c14ba3a50a64a2256371a4
#: ../src/Doc/c-api/gcsupport.rst:42
msgid ""
"Analogous to :c:func:`PyObject_New` but for container objects with the :"
"const:`Py_TPFLAGS_HAVE_GC` flag set."
msgstr ""

# dd106071cb624dcca8a35f74a9b3711f
#: ../src/Doc/c-api/gcsupport.rst:48
msgid ""
"Analogous to :c:func:`PyObject_NewVar` but for container objects with the :"
"const:`Py_TPFLAGS_HAVE_GC` flag set."
msgstr ""

# 8d716d7d457b40e48537ab98ef647339
#: ../src/Doc/c-api/gcsupport.rst:58
msgid ""
"Resize an object allocated by :c:func:`PyObject_NewVar`.  Returns the "
"resized object or *NULL* on failure."
msgstr ""

# bd018f6b3af445e49dcaa18aa56d4c40
#: ../src/Doc/c-api/gcsupport.rst:68
msgid ""
"Adds the object *op* to the set of container objects tracked by the "
"collector.  The collector can run at unexpected times so objects must be "
"valid while being tracked.  This should be called once all the fields "
"followed by the :attr:`tp_traverse` handler become valid, usually near the "
"end of the constructor."
msgstr ""

# 98742382785d4e329f1d873c0516cd32
#: ../src/Doc/c-api/gcsupport.rst:77
msgid ""
"A macro version of :c:func:`PyObject_GC_Track`.  It should not be used for "
"extension modules."
msgstr ""

#: ../src/Doc/c-api/gcsupport.rst:80
msgid ""
"Similarly, the deallocator for the object must conform to a similar pair of "
"rules:"
msgstr ""

# 7822470d9d22436d91adc9ca35e1fcd4
#: ../src/Doc/c-api/gcsupport.rst:83
msgid ""
"Before fields which refer to other containers are invalidated, :c:func:"
"`PyObject_GC_UnTrack` must be called."
msgstr ""

# 45b862b4e1d441cba43257843b7da50b
#: ../src/Doc/c-api/gcsupport.rst:86
msgid ""
"The object's memory must be deallocated using :c:func:`PyObject_GC_Del`."
msgstr ""

# bce40e65d1fb42c087dd43e223ffb1f6
#: ../src/Doc/c-api/gcsupport.rst:91
msgid ""
"Releases memory allocated to an object using :c:func:`PyObject_GC_New` or :c:"
"func:`PyObject_GC_NewVar`."
msgstr ""

# 168f444865284701a4717702e4a5bc59
#: ../src/Doc/c-api/gcsupport.rst:97
msgid ""
"Remove the object *op* from the set of container objects tracked by the "
"collector.  Note that :c:func:`PyObject_GC_Track` can be called again on "
"this object to add it back to the set of tracked objects.  The deallocator (:"
"attr:`tp_dealloc` handler) should call this for the object before any of the "
"fields used by the :attr:`tp_traverse` handler become invalid."
msgstr ""

# aaa3a45607424a94aab19a0b6b7d1c8f
#: ../src/Doc/c-api/gcsupport.rst:106
msgid ""
"A macro version of :c:func:`PyObject_GC_UnTrack`.  It should not be used for "
"extension modules."
msgstr ""

#: ../src/Doc/c-api/gcsupport.rst:109
msgid ""
"The :attr:`tp_traverse` handler accepts a function parameter of this type:"
msgstr ""

# e0790d8224a344d38331bff63b86f4d8
#: ../src/Doc/c-api/gcsupport.rst:114
msgid ""
"Type of the visitor function passed to the :attr:`tp_traverse` handler. The "
"function should be called with an object to traverse as *object* and the "
"third parameter to the :attr:`tp_traverse` handler as *arg*.  The Python "
"core uses several visitor functions to implement cyclic garbage detection; "
"it's not expected that users will need to write their own visitor functions."
msgstr ""

#: ../src/Doc/c-api/gcsupport.rst:121
msgid "The :attr:`tp_traverse` handler must have the following type:"
msgstr ""

# b26d1bbf42ca421aaf43db535c03fc2a
#: ../src/Doc/c-api/gcsupport.rst:126
msgid ""
"Traversal function for a container object.  Implementations must call the "
"*visit* function for each object directly contained by *self*, with the "
"parameters to *visit* being the contained object and the *arg* value passed "
"to the handler.  The *visit* function must not be called with a *NULL* "
"object argument.  If *visit* returns a non-zero value that value should be "
"returned immediately."
msgstr ""

# ff6290c71c854b389cdceac81e0dcd5b
#: ../src/Doc/c-api/gcsupport.rst:133
msgid ""
"To simplify writing :attr:`tp_traverse` handlers, a :c:func:`Py_VISIT` macro "
"is provided.  In order to use this macro, the :attr:`tp_traverse` "
"implementation must name its arguments exactly *visit* and *arg*:"
msgstr ""

# b3afc28f3f4842f88969e138734607c5
#: ../src/Doc/c-api/gcsupport.rst:140
msgid ""
"Call the *visit* callback, with arguments *o* and *arg*. If *visit* returns "
"a non-zero value, then return it.  Using this macro, :attr:`tp_traverse` "
"handlers look like::"
msgstr ""

# 9b01c7095cec4c6a8aba2889ef16b581
#: ../src/Doc/c-api/gcsupport.rst:154
msgid ""
"The :attr:`tp_clear` handler must be of the :c:type:`inquiry` type, or "
"*NULL* if the object is immutable."
msgstr ""

# 8be60d6b67ba42878081cd460e2c79d8
#: ../src/Doc/c-api/gcsupport.rst:160
msgid ""
"Drop references that may have created reference cycles.  Immutable objects "
"do not have to define this method since they can never directly create "
"reference cycles.  Note that the object must still be valid after calling "
"this method (don't just call :c:func:`Py_DECREF` on a reference).  The "
"collector will call this method if it detects that this object is involved "
"in a reference cycle."
msgstr ""

#: ../src/Doc/c-api/gen.rst:6
msgid "Generator Objects"
msgstr ""

# 651c8b00bb5645bfa05dde5bc30cb232
#: ../src/Doc/c-api/gen.rst:8
msgid ""
"Generator objects are what Python uses to implement generator iterators. "
"They are normally created by iterating over a function that yields values, "
"rather than explicitly calling :c:func:`PyGen_New`."
msgstr ""

# 40e24efaa4574426a5c3b93f66fbf286
#: ../src/Doc/c-api/gen.rst:15
msgid "The C structure used for generator objects."
msgstr ""

# 16edb9322adb44b5877ef535bfcd9e67
#: ../src/Doc/c-api/gen.rst:20
msgid "The type object corresponding to generator objects"
msgstr ""

# 476b5fc3512b4578878785b719566704
#: ../src/Doc/c-api/gen.rst:25
msgid "Return true if *ob* is a generator object; *ob* must not be *NULL*."
msgstr ""

# 76f8959152fd4ba28bcd2c5f026efa73
#: ../src/Doc/c-api/gen.rst:30
msgid ""
"Return true if *ob*'s type is *PyGen_Type* is a generator object; *ob* must "
"not be *NULL*."
msgstr ""

# bf279559b4c54a2ea4e231515cc276c7
#: ../src/Doc/c-api/gen.rst:36
msgid ""
"Create and return a new generator object based on the *frame* object. A "
"reference to *frame* is stolen by this function. The parameter must not be "
"*NULL*."
msgstr ""

#: ../src/Doc/c-api/import.rst:6
msgid "Importing Modules"
msgstr ""

# c81dbd717e6345019bc14f4f7604d58f
#: ../src/Doc/c-api/import.rst:16
msgid ""
"This is a simplified interface to :c:func:`PyImport_ImportModuleEx` below, "
"leaving the *globals* and *locals* arguments set to *NULL* and *level* set "
"to 0.  When the *name* argument contains a dot (when it specifies a "
"submodule of a package), the *fromlist* argument is set to the list ``['*']"
"`` so that the return value is the named module rather than the top-level "
"package containing it as would otherwise be the case.  (Unfortunately, this "
"has an additional side effect when *name* in fact specifies a subpackage "
"instead of a submodule: the submodules specified in the package's "
"``__all__`` variable are  loaded.)  Return a new reference to the imported "
"module, or *NULL* with an exception set on failure.  Before Python 2.4, the "
"module may still be created in the failure case --- examine ``sys.modules`` "
"to find out.  Starting with Python 2.4, a failing import of a module no "
"longer leaves the module in ``sys.modules``."
msgstr ""

# eab3c721b25c4250acaa3b3137b3f8ff
#: ../src/Doc/c-api/import.rst:39
msgid ""
"This version of :c:func:`PyImport_ImportModule` does not block. It's "
"intended to be used in C functions that import other modules to execute a "
"function. The import may block if another thread holds the import lock. The "
"function :c:func:`PyImport_ImportModuleNoBlock` never blocks. It first tries "
"to fetch the module from sys.modules and falls back to :c:func:"
"`PyImport_ImportModule` unless the lock is held, in which case the function "
"will raise an :exc:`ImportError`."
msgstr ""

# 470279b6e0a1498ab80eaf2d4cd4cc40
# dddb400bddd445b4b3546ab2385e73b7
#: ../src/Doc/c-api/import.rst:54 ../src/Doc/c-api/import.rst:74
msgid ""
"Import a module.  This is best described by referring to the built-in Python "
"function :func:`__import__`, as the standard :func:`__import__` function "
"calls this function directly."
msgstr ""

# 840c67a9843e426c8c6cf162d145baf6
#: ../src/Doc/c-api/import.rst:58
msgid ""
"The return value is a new reference to the imported module or top-level "
"package, or *NULL* with an exception set on failure (before Python 2.4, the "
"module may still be created in this case).  Like for :func:`__import__`, the "
"return value when a submodule of a package was requested is normally the top-"
"level package, unless a non-empty *fromlist* was given."
msgstr ""

# 31b7e0d9faa84501a544b52d6e9bd8e4
#: ../src/Doc/c-api/import.rst:78
msgid ""
"The return value is a new reference to the imported module or top-level "
"package, or *NULL* with an exception set on failure.  Like for :func:"
"`__import__`, the return value when a submodule of a package was requested "
"is normally the top-level package, unless a non-empty *fromlist* was given."
msgstr ""

# 2b29314536d94f039891a7d1946a2fbd
#: ../src/Doc/c-api/import.rst:92
msgid ""
"This is a higher-level interface that calls the current \"import hook "
"function\". It invokes the :func:`__import__` function from the "
"``__builtins__`` of the current globals.  This means that the import is done "
"using whatever import hooks are installed in the current environment, e.g. "
"by :mod:`rexec` or :mod:`ihooks`."
msgstr ""

# ff39127279334d93a1a8237c3dbaa435
#: ../src/Doc/c-api/import.rst:105
msgid ""
"Reload a module.  This is best described by referring to the built-in Python "
"function :func:`reload`, as the standard :func:`reload` function calls this "
"function directly.  Return a new reference to the reloaded module, or *NULL* "
"with an exception set on failure (the module still exists in this case)."
msgstr ""

# 3d100c0bd76b420d87a094d7c8a39199
#: ../src/Doc/c-api/import.rst:113
msgid ""
"Return the module object corresponding to a module name.  The *name* "
"argument may be of the form ``package.module``. First check the modules "
"dictionary if there's one there, and if not, create a new one and insert it "
"in the modules dictionary. Return *NULL* with an exception set on failure."
msgstr ""

# 7e8a76d94696420d8686c21113c57e82
#: ../src/Doc/c-api/import.rst:120
msgid ""
"This function does not load or import the module; if the module wasn't "
"already loaded, you will get an empty module object. Use :c:func:"
"`PyImport_ImportModule` or one of its variants to import a module.  Package "
"structures implied by a dotted name for *name* are not created if not "
"already present."
msgstr ""

# b078d9c4859a4dc68a5be47281b3e733
#: ../src/Doc/c-api/import.rst:130
msgid ""
"Given a module name (possibly of the form ``package.module``) and a code "
"object read from a Python bytecode file or obtained from the built-in "
"function :func:`compile`, load the module.  Return a new reference to the "
"module object, or *NULL* with an exception set if an error occurred.  Before "
"Python 2.4, the module could still be created in error cases.  Starting with "
"Python 2.4, *name* is removed from :attr:`sys.modules` in error cases, and "
"even if *name* was already in :attr:`sys.modules` on entry to :c:func:"
"`PyImport_ExecCodeModule`.  Leaving incompletely initialized modules in :"
"attr:`sys.modules` is dangerous, as imports of such modules have no way to "
"know that the module object is an unknown (and probably damaged with respect "
"to the module author's intents) state."
msgstr ""

# a6bebbdd4b98439eb9f4383e5b739a29
#: ../src/Doc/c-api/import.rst:141
msgid ""
"The module's :attr:`__file__` attribute will be set to the code object's :c:"
"member:`co_filename`."
msgstr ""

# ee6ce3dc82b843ab9926bab56f66a9e9
#: ../src/Doc/c-api/import.rst:144
msgid ""
"This function will reload the module if it was already imported.  See :c:"
"func:`PyImport_ReloadModule` for the intended way to reload a module."
msgstr ""

# 30ffda85dc9a4eb2a867942ad03dd2e1
#: ../src/Doc/c-api/import.rst:147
msgid ""
"If *name* points to a dotted name of the form ``package.module``, any "
"package structures not already created will still not be created."
msgstr ""

# 777beb94b045482fa63cbdc4a76b4eb6
#: ../src/Doc/c-api/import.rst:156
msgid ""
"Like :c:func:`PyImport_ExecCodeModule`, but the :attr:`__file__` attribute "
"of the module object is set to *pathname* if it is non-``NULL``."
msgstr ""

# d0805daac0044c6e8bc35ecfb36863ef
#: ../src/Doc/c-api/import.rst:162
msgid ""
"Return the magic number for Python bytecode files (a.k.a. :file:`.pyc` and :"
"file:`.pyo` files).  The magic number should be present in the first four "
"bytes of the bytecode file, in little-endian byte order."
msgstr ""

# ae459c27a6a54628a583703eb85d8add
#: ../src/Doc/c-api/import.rst:169
msgid ""
"Return the dictionary used for the module administration (a.k.a. ``sys."
"modules``).  Note that this is a per-interpreter variable."
msgstr ""

# 59d970b4e1e4475aa55d87d81f716fa4
#: ../src/Doc/c-api/import.rst:175
msgid ""
"Return an importer object for a :data:`sys.path`/:attr:`pkg.__path__` item "
"*path*, possibly by fetching it from the :data:`sys.path_importer_cache` "
"dict.  If it wasn't yet cached, traverse :data:`sys.path_hooks` until a hook "
"is found that can handle the path item.  Return ``None`` if no hook could; "
"this tells our caller it should fall back to the built-in import mechanism. "
"Cache the result in :data:`sys.path_importer_cache`.  Return a new reference "
"to the importer object."
msgstr ""

# 2c5b0bec3a8246cfacd600f00bd87769
#: ../src/Doc/c-api/import.rst:188
msgid "Initialize the import mechanism.  For internal use only."
msgstr ""

# 27898685a4ab48b3836844856768174e
#: ../src/Doc/c-api/import.rst:193
msgid "Empty the module table.  For internal use only."
msgstr ""

# 2506a1f5e03a43a9a2d459b28509f75b
#: ../src/Doc/c-api/import.rst:198
msgid "Finalize the import mechanism.  For internal use only."
msgstr ""

# 3ab55e2b3100406cbef050b0e214e002
# 1c5f0e4efbb343df8558d9ce435d2364
#: ../src/Doc/c-api/import.rst:203 ../src/Doc/c-api/import.rst:208
msgid "For internal use only."
msgstr ""

# c2645c18cbb34a678c0d41f644a7c905
#: ../src/Doc/c-api/import.rst:213
msgid ""
"Load a frozen module named *name*.  Return ``1`` for success, ``0`` if the "
"module is not found, and ``-1`` with an exception set if the initialization "
"failed.  To access the imported module on a successful load, use :c:func:"
"`PyImport_ImportModule`.  (Note the misnomer --- this function would reload "
"the module if it was already imported.)"
msgstr ""

# e2e5df3f7b254047a8dac9d079ef1509
#: ../src/Doc/c-api/import.rst:224
msgid ""
"This is the structure type definition for frozen module descriptors, as "
"generated by the :program:`freeze` utility (see :file:`Tools/freeze/` in the "
"Python source distribution).  Its definition, found in :file:`Include/import."
"h`, is::"
msgstr ""

# 42a816088d5a4b9a930d1f569a96436a
#: ../src/Doc/c-api/import.rst:238
msgid ""
"This pointer is initialized to point to an array of :c:type:`struct _frozen` "
"records, terminated by one whose members are all *NULL* or zero.  When a "
"frozen module is imported, it is searched in this table.  Third-party code "
"could play tricks with this to provide a dynamically created collection of "
"frozen modules."
msgstr ""

# aa94bb04169746709511332352b1640f
#: ../src/Doc/c-api/import.rst:246
msgid ""
"Add a single module to the existing table of built-in modules.  This is a "
"convenience wrapper around :c:func:`PyImport_ExtendInittab`, returning "
"``-1`` if the table could not be extended.  The new module can be imported "
"by the name *name*, and uses the function *initfunc* as the initialization "
"function called on the first attempted import.  This should be called "
"before :c:func:`Py_Initialize`."
msgstr ""

# 08b53c8d06144e07b0fbfa0998ddff8e
#: ../src/Doc/c-api/import.rst:256
msgid ""
"Structure describing a single entry in the list of built-in modules.  Each "
"of these structures gives the name and initialization function for a module "
"built into the interpreter.  Programs which embed Python may use an array of "
"these structures in conjunction with :c:func:`PyImport_ExtendInittab` to "
"provide additional built-in modules.  The structure is defined in :file:"
"`Include/import.h` as::"
msgstr ""

# 69344049ce0b4d8b897fbc1c562b4a39
#: ../src/Doc/c-api/import.rst:271
msgid ""
"Add a collection of modules to the table of built-in modules.  The *newtab* "
"array must end with a sentinel entry which contains *NULL* for the :attr:"
"`name` field; failure to provide the sentinel value can result in a memory "
"fault. Returns ``0`` on success or ``-1`` if insufficient memory could be "
"allocated to extend the internal table.  In the event of failure, no modules "
"are added to the internal table.  This should be called before :c:func:"
"`Py_Initialize`."
msgstr ""

#: ../src/Doc/c-api/index.rst:5
msgid "Python/C API Reference Manual"
msgstr ""

#: ../src/Doc/c-api/index.rst:7
msgid "|version|"
msgstr ""

#: ../src/Doc/c-api/index.rst:8
msgid "|today|"
msgstr ""

#: ../src/Doc/c-api/index.rst:10
msgid ""
"This manual documents the API used by C and C++ programmers who want to "
"write extension modules or embed Python.  It is a companion to :ref:"
"`extending-index`, which describes the general principles of extension "
"writing but does not document the API functions in detail."
msgstr ""

#: ../src/Doc/c-api/init.rst:8
msgid "Initialization, Finalization, and Threads"
msgstr ""

# 4952c4f5407a40e6a6a314d20da6206b
#: ../src/Doc/c-api/init.rst:12
msgid "Initializing and finalizing the interpreter"
msgstr ""

# 5a04359b3150432d95a450027af96d4f
#: ../src/Doc/c-api/init.rst:32
msgid ""
"Initialize the Python interpreter.  In an application embedding  Python, "
"this should be called before using any other Python/C API functions; with "
"the exception of :c:func:`Py_SetProgramName`, :c:func:`Py_SetPythonHome`, :c:"
"func:`PyEval_InitThreads`, :c:func:`PyEval_ReleaseLock`, and :c:func:"
"`PyEval_AcquireLock`. This initializes the table of loaded modules (``sys."
"modules``), and creates the fundamental modules :mod:`__builtin__`, :mod:"
"`__main__` and :mod:`sys`.  It also initializes the module search path "
"(``sys.path``). It does not set ``sys.argv``; use :c:func:`PySys_SetArgvEx` "
"for that.  This is a no-op when called for a second time (without calling :c:"
"func:`Py_Finalize` first).  There is no return value; it is a fatal error if "
"the initialization fails."
msgstr ""

# 1bfbddf1dab148a08e4572650c2cde7b
#: ../src/Doc/c-api/init.rst:46
msgid ""
"This function works like :c:func:`Py_Initialize` if *initsigs* is 1. If "
"*initsigs* is 0, it skips initialization registration of signal handlers, "
"which might be useful when Python is embedded."
msgstr ""

# c2534982853f4ca7b269780fe58bdd3c
#: ../src/Doc/c-api/init.rst:55
msgid ""
"Return true (nonzero) when the Python interpreter has been initialized, "
"false (zero) if not.  After :c:func:`Py_Finalize` is called, this returns "
"false until :c:func:`Py_Initialize` is called again."
msgstr ""

# 200a3e8d946344888c9e1e8e7382ba94
#: ../src/Doc/c-api/init.rst:62
msgid ""
"Undo all initializations made by :c:func:`Py_Initialize` and subsequent use "
"of Python/C API functions, and destroy all sub-interpreters (see :c:func:"
"`Py_NewInterpreter` below) that were created and not yet destroyed since the "
"last call to :c:func:`Py_Initialize`.  Ideally, this frees all memory "
"allocated by the Python interpreter.  This is a no-op when called for a "
"second time (without calling :c:func:`Py_Initialize` again first).  There is "
"no return value; errors during finalization are ignored."
msgstr ""

# fa57a25cb5504afa88740aabe9f0fbc6
#: ../src/Doc/c-api/init.rst:70
msgid ""
"This function is provided for a number of reasons.  An embedding application "
"might want to restart Python without having to restart the application "
"itself. An application that has loaded the Python interpreter from a "
"dynamically loadable library (or DLL) might want to free all memory "
"allocated by Python before unloading the DLL. During a hunt for memory leaks "
"in an application a developer might want to free all memory allocated by "
"Python before exiting from the application."
msgstr ""

# 0a5be4a6b2ef40d0902d476b366a4886
#: ../src/Doc/c-api/init.rst:78
msgid ""
"**Bugs and caveats:** The destruction of modules and objects in modules is "
"done in random order; this may cause destructors (:meth:`__del__` methods) "
"to fail when they depend on other objects (even functions) or modules.  "
"Dynamically loaded extension modules loaded by Python are not unloaded.  "
"Small amounts of memory allocated by the Python interpreter may not be freed "
"(if you find a leak, please report it).  Memory tied up in circular "
"references between objects is not freed.  Some memory allocated by extension "
"modules may not be freed.  Some extensions may not work properly if their "
"initialization routine is called more than once; this can happen if an "
"application calls :c:func:`Py_Initialize` and :c:func:`Py_Finalize` more "
"than once."
msgstr ""

# 3d3f36c7b48546b39376bc93a767f96c
#: ../src/Doc/c-api/init.rst:91
msgid "Process-wide parameters"
msgstr ""

# 6cd3c48f9efd4663ab9b853ac35fe720
#: ../src/Doc/c-api/init.rst:101
msgid ""
"This function should be called before :c:func:`Py_Initialize` is called for "
"the first time, if it is called at all.  It tells the interpreter the value "
"of the ``argv[0]`` argument to the :c:func:`main` function of the program. "
"This is used by :c:func:`Py_GetPath` and some other functions below to find "
"the Python run-time libraries relative to the interpreter executable.  The "
"default value is ``'python'``.  The argument should point to a zero-"
"terminated character string in static storage whose contents will not change "
"for the duration of the program's execution.  No code in the Python "
"interpreter will change the contents of this storage."
msgstr ""

# acaad7c92b894a0cb77ad0c3f9e82f8a
#: ../src/Doc/c-api/init.rst:116
msgid ""
"Return the program name set with :c:func:`Py_SetProgramName`, or the "
"default. The returned string points into static storage; the caller should "
"not modify its value."
msgstr ""

# 05b358f9ce80437caaeaf6e130b9d283
#: ../src/Doc/c-api/init.rst:123
msgid ""
"Return the *prefix* for installed platform-independent files. This is "
"derived through a number of complicated rules from the program name set "
"with :c:func:`Py_SetProgramName` and some environment variables; for "
"example, if the program name is ``'/usr/local/bin/python'``, the prefix is "
"``'/usr/local'``. The returned string points into static storage; the caller "
"should not modify its value.  This corresponds to the :makevar:`prefix` "
"variable in the top-level :file:`Makefile` and the ``--prefix`` argument to "
"the :program:`configure` script at build time.  The value is available to "
"Python code as ``sys.prefix``. It is only useful on Unix.  See also the next "
"function."
msgstr ""

# 9776f9a50f7f4494bccccd7e3222a7e1
#: ../src/Doc/c-api/init.rst:136
msgid ""
"Return the *exec-prefix* for installed platform-*dependent* files.  This is "
"derived through a number of complicated rules from the program name set "
"with :c:func:`Py_SetProgramName` and some environment variables; for "
"example, if the program name is ``'/usr/local/bin/python'``, the exec-prefix "
"is ``'/usr/local'``.  The returned string points into static storage; the "
"caller should not modify its value.  This corresponds to the :makevar:"
"`exec_prefix` variable in the top-level :file:`Makefile` and the ``--exec-"
"prefix`` argument to the :program:`configure` script at build  time.  The "
"value is available to Python code as ``sys.exec_prefix``.  It is only useful "
"on Unix."
msgstr ""

# 1bd247a7787443e592e12ecb10c02699
#: ../src/Doc/c-api/init.rst:146
msgid ""
"Background: The exec-prefix differs from the prefix when platform dependent "
"files (such as executables and shared libraries) are installed in a "
"different directory tree.  In a typical installation, platform dependent "
"files may be installed in the :file:`/usr/local/plat` subtree while platform "
"independent may be installed in :file:`/usr/local`."
msgstr ""

# d0f972b6dee94f6d8748dc0a99621a7e
#: ../src/Doc/c-api/init.rst:152
msgid ""
"Generally speaking, a platform is a combination of hardware and software "
"families, e.g.  Sparc machines running the Solaris 2.x operating system are "
"considered the same platform, but Intel machines running Solaris 2.x are "
"another platform, and Intel machines running Linux are yet another "
"platform.  Different major revisions of the same operating system generally "
"also form different platforms.  Non-Unix operating systems are a different "
"story; the installation strategies on those systems are so different that "
"the prefix and exec-prefix are meaningless, and set to the empty string. "
"Note that compiled Python bytecode files are platform independent (but not "
"independent from the Python version by which they were compiled!)."
msgstr ""

# 904049ffa77e4524b0a63ce13230b21d
#: ../src/Doc/c-api/init.rst:163
msgid ""
"System administrators will know how to configure the :program:`mount` or :"
"program:`automount` programs to share :file:`/usr/local` between platforms "
"while having :file:`/usr/local/plat` be a different filesystem for each "
"platform."
msgstr ""

# d5c6fae39fc14518bd0f97cbb1e9beed
#: ../src/Doc/c-api/init.rst:175
msgid ""
"Return the full program name of the Python executable; this is  computed as "
"a side-effect of deriving the default module search path  from the program "
"name (set by :c:func:`Py_SetProgramName` above). The returned string points "
"into static storage; the caller should not modify its value.  The value is "
"available to Python code as ``sys.executable``."
msgstr ""

# 97cc4a2cb1164d58bbedd71e2fe9c2da
#: ../src/Doc/c-api/init.rst:188
msgid ""
"Return the default module search path; this is computed from the program "
"name (set by :c:func:`Py_SetProgramName` above) and some environment "
"variables. The returned string consists of a series of directory names "
"separated by a platform dependent delimiter character.  The delimiter "
"character is ``':'`` on Unix and Mac OS X, ``';'`` on Windows.  The returned "
"string points into static storage; the caller should not modify its value.  "
"The list :data:`sys.path` is initialized with this value on interpreter "
"startup; it can be (and usually is) modified later to change the search path "
"for loading modules."
msgstr ""

# c04d872ec04f420a8be764bd8c2208a5
#: ../src/Doc/c-api/init.rst:203
msgid ""
"Return the version of this Python interpreter.  This is a string that looks "
"something like ::"
msgstr ""

# f255060c589247a2b44177300535c31d
#: ../src/Doc/c-api/init.rst:210
msgid ""
"The first word (up to the first space character) is the current Python "
"version; the first three characters are the major and minor version "
"separated by a period.  The returned string points into static storage; the "
"caller should not modify its value.  The value is available to Python code "
"as ``sys.version``."
msgstr ""

# 4cb848ccd6624422acf249e7d394327f
#: ../src/Doc/c-api/init.rst:220
msgid ""
"Return the platform identifier for the current platform.  On Unix, this is "
"formed from the \"official\" name of the operating system, converted to "
"lower case, followed by the major revision number; e.g., for Solaris 2.x, "
"which is also known as SunOS 5.x, the value is ``'sunos5'``.  On Mac OS X, "
"it is ``'darwin'``.  On Windows, it is ``'win'``.  The returned string "
"points into static storage; the caller should not modify its value.  The "
"value is available to Python code as ``sys.platform``."
msgstr ""

# 07ca17638bf64fdf9d131288bd159bbd
#: ../src/Doc/c-api/init.rst:231
msgid ""
"Return the official copyright string for the current Python version, for "
"example"
msgstr ""

# b00d8f6b6b5f40afaad065e1682ae59a
#: ../src/Doc/c-api/init.rst:233
msgid "``'Copyright 1991-1995 Stichting Mathematisch Centrum, Amsterdam'``"
msgstr ""

# 54e8b1614c094c808a5b8e6b839d37be
#: ../src/Doc/c-api/init.rst:237
msgid ""
"The returned string points into static storage; the caller should not modify "
"its value.  The value is available to Python code as ``sys.copyright``."
msgstr ""

# ea28e6f1b68c47bea302ff105122ce7e
#: ../src/Doc/c-api/init.rst:243
msgid ""
"Return an indication of the compiler used to build the current Python "
"version, in square brackets, for example::"
msgstr ""

# eb5f15eb891149c687f94b4de7781c79
# 3f60a147ffc0442390d7bba336fd1af5
#: ../src/Doc/c-api/init.rst:250 ../src/Doc/c-api/init.rst:264
msgid ""
"The returned string points into static storage; the caller should not modify "
"its value.  The value is available to Python code as part of the variable "
"``sys.version``."
msgstr ""

# ad9184b6180841659d00ba587124dbba
#: ../src/Doc/c-api/init.rst:257
msgid ""
"Return information about the sequence number and build date and time  of the "
"current Python interpreter instance, for example ::"
msgstr ""

# 924d727dea9547f9a35b1e54ed9e57fc
#: ../src/Doc/c-api/init.rst:276
msgid ""
"Set :data:`sys.argv` based on *argc* and *argv*.  These parameters are "
"similar to those passed to the program's :c:func:`main` function with the "
"difference that the first entry should refer to the script file to be "
"executed rather than the executable hosting the Python interpreter.  If "
"there isn't a script that will be run, the first entry in *argv* can be an "
"empty string.  If this function fails to initialize :data:`sys.argv`, a "
"fatal condition is signalled using :c:func:`Py_FatalError`."
msgstr ""

# 3cb53ac4694c4669844636f719e6abbc
#: ../src/Doc/c-api/init.rst:284
msgid ""
"If *updatepath* is zero, this is all the function does.  If *updatepath* is "
"non-zero, the function also modifies :data:`sys.path` according to the "
"following algorithm:"
msgstr ""

# 9287b93609714e6181c993f1f675fb5f
#: ../src/Doc/c-api/init.rst:288
msgid ""
"If the name of an existing script is passed in ``argv[0]``, the absolute "
"path of the directory where the script is located is prepended to :data:`sys."
"path`."
msgstr ""

# d66b4c4aee6b4a4e9e89e895ee70bc77
#: ../src/Doc/c-api/init.rst:291
msgid ""
"Otherwise (that is, if *argc* is 0 or ``argv[0]`` doesn't point to an "
"existing file name), an empty string is prepended to :data:`sys.path`, which "
"is the same as prepending the current working directory (``\".\"``)."
msgstr ""

# 35d6d0fab5384b358a7623e91038b828
#: ../src/Doc/c-api/init.rst:297
msgid ""
"It is recommended that applications embedding the Python interpreter for "
"purposes other than executing a single script pass 0 as *updatepath*, and "
"update :data:`sys.path` themselves if desired. See `CVE-2008-5983 <http://"
"cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5983>`_."
msgstr ""

# e6a1d1115ba44f10936d91e6cf408cdd
#: ../src/Doc/c-api/init.rst:302
msgid ""
"On versions before 2.6.6, you can achieve the same effect by manually "
"popping the first :data:`sys.path` element after having called :c:func:"
"`PySys_SetArgv`, for example using::"
msgstr ""

# e412380a7797448da427b00a67a15933
#: ../src/Doc/c-api/init.rst:316
msgid ""
"This function works like :c:func:`PySys_SetArgvEx` with *updatepath* set to "
"1."
msgstr ""

# 78c0e6232b3f49ce9b102a0ef1572350
#: ../src/Doc/c-api/init.rst:321
msgid ""
"Set the default \"home\" directory, that is, the location of the standard "
"Python libraries.  See :envvar:`PYTHONHOME` for the meaning of the argument "
"string."
msgstr ""

# 70a5dce191544e9e92b01df8c2a99831
#: ../src/Doc/c-api/init.rst:325
msgid ""
"The argument should point to a zero-terminated character string in static "
"storage whose contents will not change for the duration of the program's "
"execution.  No code in the Python interpreter will change the contents of "
"this storage."
msgstr ""

# f18e4e9d5c0b4a6cbde8f911950c63a2
#: ../src/Doc/c-api/init.rst:333
msgid ""
"Return the default \"home\", that is, the value set by a previous call to :c:"
"func:`Py_SetPythonHome`, or the value of the :envvar:`PYTHONHOME` "
"environment variable if it is set."
msgstr ""

#: ../src/Doc/c-api/init.rst:341
msgid "Thread State and the Global Interpreter Lock"
msgstr ""

# ef7e186761b347ad913c4ee68d57a05b
#: ../src/Doc/c-api/init.rst:349
msgid ""
"The Python interpreter is not fully thread-safe.  In order to support multi-"
"threaded Python programs, there's a global lock, called the :term:`global "
"interpreter lock` or :term:`GIL`, that must be held by the current thread "
"before it can safely access Python objects. Without the lock, even the "
"simplest operations could cause problems in a multi-threaded program: for "
"example, when two threads simultaneously increment the reference count of "
"the same object, the reference count could end up being incremented only "
"once instead of twice."
msgstr ""

# 5925781dd9f5416a96205cf61f17a435
#: ../src/Doc/c-api/init.rst:359
msgid ""
"Therefore, the rule exists that only the thread that has acquired the :term:"
"`GIL` may operate on Python objects or call Python/C API functions. In order "
"to emulate concurrency of execution, the interpreter regularly tries to "
"switch threads (see :func:`sys.setcheckinterval`).  The lock is also "
"released around potentially blocking I/O operations like reading or writing "
"a file, so that other Python threads can run in the meantime."
msgstr ""

# da5a02cd68c34383bf5ca7b9a9ff419f
#: ../src/Doc/c-api/init.rst:370
msgid ""
"The Python interpreter keeps some thread-specific bookkeeping information "
"inside a data structure called :c:type:`PyThreadState`.  There's also one "
"global variable pointing to the current :c:type:`PyThreadState`: it can be "
"retrieved using :c:func:`PyThreadState_Get`."
msgstr ""

# 35943084cec44dcdb7e4e3496b5e16e2
#: ../src/Doc/c-api/init.rst:376
msgid "Releasing the GIL from extension code"
msgstr ""

# 28f298bd3bf14c81aa0113f2f93956c5
#: ../src/Doc/c-api/init.rst:378
msgid ""
"Most extension code manipulating the :term:`GIL` has the following simple "
"structure::"
msgstr ""

#: ../src/Doc/c-api/init.rst:387
msgid "This is so common that a pair of macros exists to simplify it::"
msgstr ""

# 52340f85b1c64db28ea6c731c7565f32
#: ../src/Doc/c-api/init.rst:397
msgid ""
"The :c:macro:`Py_BEGIN_ALLOW_THREADS` macro opens a new block and declares a "
"hidden local variable; the :c:macro:`Py_END_ALLOW_THREADS` macro closes the "
"block.  These two macros are still available when Python is compiled without "
"thread support (they simply have an empty expansion)."
msgstr ""

#: ../src/Doc/c-api/init.rst:402
msgid ""
"When thread support is enabled, the block above expands to the following "
"code::"
msgstr ""

# 839b68bd56b849cfab5cb19e7ae76a8d
#: ../src/Doc/c-api/init.rst:414
msgid ""
"Here is how these functions work: the global interpreter lock is used to "
"protect the pointer to the current thread state.  When releasing the lock "
"and saving the thread state, the current thread state pointer must be "
"retrieved before the lock is released (since another thread could "
"immediately acquire the lock and store its own thread state in the global "
"variable). Conversely, when acquiring the lock and restoring the thread "
"state, the lock must be acquired before storing the thread state pointer."
msgstr ""

# 6b6b5a2b8fb04045acbf42a62264bb52
#: ../src/Doc/c-api/init.rst:423
msgid ""
"Calling system I/O functions is the most common use case for releasing the "
"GIL, but it can also be useful before calling long-running computations "
"which don't need access to Python objects, such as compression or "
"cryptographic functions operating over memory buffers.  For example, the "
"standard :mod:`zlib` and :mod:`hashlib` modules release the GIL when "
"compressing or hashing data."
msgstr ""

# 966478d263d04bf99201d22bb375ee9d
#: ../src/Doc/c-api/init.rst:431
msgid "Non-Python created threads"
msgstr ""

# 2ccf8c2614af4aa9890cf598d838527c
#: ../src/Doc/c-api/init.rst:433
msgid ""
"When threads are created using the dedicated Python APIs (such as the :mod:"
"`threading` module), a thread state is automatically associated to them and "
"the code showed above is therefore correct.  However, when threads are "
"created from C (for example by a third-party library with its own thread "
"management), they don't hold the GIL, nor is there a thread state structure "
"for them."
msgstr ""

# 66e4ceae925c4a458f02b9b5d49373d9
#: ../src/Doc/c-api/init.rst:440
msgid ""
"If you need to call Python code from these threads (often this will be part "
"of a callback API provided by the aforementioned third-party library), you "
"must first register these threads with the interpreter by creating a thread "
"state data structure, then acquiring the GIL, and finally storing their "
"thread state pointer, before you can start using the Python/C API.  When you "
"are done, you should reset the thread state pointer, release the GIL, and "
"finally free the thread state data structure."
msgstr ""

# 7483d87a813e48d09379853b234031d7
#: ../src/Doc/c-api/init.rst:448
msgid ""
"The :c:func:`PyGILState_Ensure` and :c:func:`PyGILState_Release` functions "
"do all of the above automatically.  The typical idiom for calling into "
"Python from a C thread is::"
msgstr ""

# 628798f82f6040fab4d955bae07bc0c0
#: ../src/Doc/c-api/init.rst:462
msgid ""
"Note that the :c:func:`PyGILState_\\*` functions assume there is only one "
"global interpreter (created automatically by :c:func:`Py_Initialize`).  "
"Python supports the creation of additional interpreters (using :c:func:"
"`Py_NewInterpreter`), but mixing multiple interpreters and the :c:func:"
"`PyGILState_\\*` API is unsupported."
msgstr ""

# c32cbc0adfe0444bbbf0eba2a16acf51
#: ../src/Doc/c-api/init.rst:468
msgid ""
"Another important thing to note about threads is their behaviour in the face "
"of the C :c:func:`fork` call. On most systems with :c:func:`fork`, after a "
"process forks only the thread that issued the fork will exist. That also "
"means any locks held by other threads will never be released. Python solves "
"this for :func:`os.fork` by acquiring the locks it uses internally before "
"the fork, and releasing them afterwards. In addition, it resets any :ref:"
"`lock-objects` in the child. When extending or embedding Python, there is no "
"way to inform Python of additional (non-Python) locks that need to be "
"acquired before or reset after a fork. OS facilities such as :c:func:"
"`pthread_atfork` would need to be used to accomplish the same thing. "
"Additionally, when extending or embedding Python, calling :c:func:`fork` "
"directly rather than through :func:`os.fork` (and returning to or calling "
"into Python) may result in a deadlock by one of Python's internal locks "
"being held by a thread that is defunct after the fork. :c:func:"
"`PyOS_AfterFork` tries to reset the necessary locks, but is not always able "
"to."
msgstr ""

# 45550063d40f4f84a81017f0d89427bd
#: ../src/Doc/c-api/init.rst:487
msgid "High-level API"
msgstr ""

# 3ba5667d2926420d90fc45cae63949d7
#: ../src/Doc/c-api/init.rst:489
msgid ""
"These are the most commonly used types and functions when writing C "
"extension code, or when embedding the Python interpreter:"
msgstr ""

# 70e8d0a8391147ba98ed86d86a12ffe0
#: ../src/Doc/c-api/init.rst:494
msgid ""
"This data structure represents the state shared by a number of cooperating "
"threads.  Threads belonging to the same interpreter share their module "
"administration and a few other internal items. There are no public members "
"in this structure."
msgstr ""

# 3f4db8dde3274885b115c9f25681acfa
#: ../src/Doc/c-api/init.rst:499
msgid ""
"Threads belonging to different interpreters initially share nothing, except "
"process state like available memory, open file descriptors and such.  The "
"global interpreter lock is also shared by all threads, regardless of to "
"which interpreter they belong."
msgstr ""

# 7ff3c606d2144831a87abcce09851dca
#: ../src/Doc/c-api/init.rst:507
msgid ""
"This data structure represents the state of a single thread.  The only "
"public data member is :c:type:`PyInterpreterState \\*`:attr:`interp`, which "
"points to this thread's interpreter state."
msgstr ""

# 07b3e3a8cc1942b79855ef268f03adc9
#: ../src/Doc/c-api/init.rst:520
msgid ""
"Initialize and acquire the global interpreter lock.  It should be called in "
"the main thread before creating a second thread or engaging in any other "
"thread operations such as :c:func:`PyEval_ReleaseLock` or "
"``PyEval_ReleaseThread(tstate)``. It is not needed before calling :c:func:"
"`PyEval_SaveThread` or :c:func:`PyEval_RestoreThread`."
msgstr ""

# e0378fc6e8c1468d9821c6c82dd1f684
#: ../src/Doc/c-api/init.rst:528
msgid ""
"This is a no-op when called for a second time.  It is safe to call this "
"function before calling :c:func:`Py_Initialize`."
msgstr ""

# 2f3d4815fdd545fd9d41e3d268727056
#: ../src/Doc/c-api/init.rst:534
msgid ""
"When only the main thread exists, no GIL operations are needed. This is a "
"common situation (most Python programs do not use threads), and the lock "
"operations slow the interpreter down a bit. Therefore, the lock is not "
"created initially.  This situation is equivalent to having acquired the "
"lock: when there is only a single thread, all object accesses are safe.  "
"Therefore, when this function initializes the global interpreter lock, it "
"also acquires it.  Before the Python :mod:`_thread` module creates a new "
"thread, knowing that either it has the lock or the lock hasn't been created "
"yet, it calls :c:func:`PyEval_InitThreads`.  When this call returns, it is "
"guaranteed that the lock has been created and that the calling thread has "
"acquired it."
msgstr ""

# 9dbd54698bf84d9eb00d151a3ac5bc63
#: ../src/Doc/c-api/init.rst:545
msgid ""
"It is **not** safe to call this function when it is unknown which thread (if "
"any) currently has the global interpreter lock."
msgstr ""

# e118831ab3754a83a0fbfab24a93f2ae
#: ../src/Doc/c-api/init.rst:548
msgid ""
"This function is not available when thread support is disabled at compile "
"time."
msgstr ""

# 0ff2ea29739f477d9f490c1a97f8049c
#: ../src/Doc/c-api/init.rst:553
msgid ""
"Returns a non-zero value if :c:func:`PyEval_InitThreads` has been called.  "
"This function can be called without holding the GIL, and therefore can be "
"used to avoid calls to the locking API when running single-threaded.  This "
"function is not available when thread support is disabled at compile time."
msgstr ""

# 3562458cde854c45975d94793dbfe941
#: ../src/Doc/c-api/init.rst:563
msgid ""
"Release the global interpreter lock (if it has been created and thread "
"support is enabled) and reset the thread state to *NULL*, returning the "
"previous thread state (which is not *NULL*).  If the lock has been created, "
"the current thread must have acquired it.  (This function is available even "
"when thread support is disabled at compile time.)"
msgstr ""

# 331a267ba51742109ed59b8b22034411
#: ../src/Doc/c-api/init.rst:572
msgid ""
"Acquire the global interpreter lock (if it has been created and thread "
"support is enabled) and set the thread state to *tstate*, which must not be "
"*NULL*.  If the lock has been created, the current thread must not have "
"acquired it, otherwise deadlock ensues.  (This function is available even "
"when thread support is disabled at compile time.)"
msgstr ""

# efac38bddf1f47a883bd160414a42b5c
#: ../src/Doc/c-api/init.rst:581
msgid ""
"Return the current thread state.  The global interpreter lock must be held. "
"When the current thread state is *NULL*, this issues a fatal error (so that "
"the caller needn't check for *NULL*)."
msgstr ""

# b44e2351d38a4f48b8df9c72d21d34a8
#: ../src/Doc/c-api/init.rst:588
msgid ""
"Swap the current thread state with the thread state given by the argument "
"*tstate*, which may be *NULL*.  The global interpreter lock must be held and "
"is not released."
msgstr ""

# 95627f8ea69c4cd79f904989071ef3c8
#: ../src/Doc/c-api/init.rst:595
msgid ""
"This function is called from :c:func:`PyOS_AfterFork` to ensure that newly "
"created child processes don't hold locks referring to threads which are not "
"running in the child process."
msgstr ""

# 511425576f6b441aad71a2b801d7aaf6
#: ../src/Doc/c-api/init.rst:600
msgid ""
"The following functions use thread-local storage, and are not compatible "
"with sub-interpreters:"
msgstr ""

# 54be4221379346159ad069e07e1389e2
#: ../src/Doc/c-api/init.rst:605
msgid ""
"Ensure that the current thread is ready to call the Python C API regardless "
"of the current state of Python, or of the global interpreter lock. This may "
"be called as many times as desired by a thread as long as each call is "
"matched with a call to :c:func:`PyGILState_Release`. In general, other "
"thread-related APIs may be used between :c:func:`PyGILState_Ensure` and :c:"
"func:`PyGILState_Release` calls as long as the thread state is restored to "
"its previous state before the Release().  For example, normal usage of the :"
"c:macro:`Py_BEGIN_ALLOW_THREADS` and :c:macro:`Py_END_ALLOW_THREADS` macros "
"is acceptable."
msgstr ""

# d7b4c85ed6124cd7a4543781dc50448c
#: ../src/Doc/c-api/init.rst:615
msgid ""
"The return value is an opaque \"handle\" to the thread state when :c:func:"
"`PyGILState_Ensure` was called, and must be passed to :c:func:"
"`PyGILState_Release` to ensure Python is left in the same state. Even though "
"recursive calls are allowed, these handles *cannot* be shared - each unique "
"call to :c:func:`PyGILState_Ensure` must save the handle for its call to :c:"
"func:`PyGILState_Release`."
msgstr ""

# 35a20d193ac64027826175d855d3db01
#: ../src/Doc/c-api/init.rst:622
msgid ""
"When the function returns, the current thread will hold the GIL and be able "
"to call arbitrary Python code.  Failure is a fatal error."
msgstr ""

# fe75dcfcd6194b4fb2f20b02e0a6f3c7
#: ../src/Doc/c-api/init.rst:630
msgid ""
"Release any resources previously acquired.  After this call, Python's state "
"will be the same as it was prior to the corresponding :c:func:"
"`PyGILState_Ensure` call (but generally this state will be unknown to the "
"caller, hence the use of the GILState API)."
msgstr ""

# 186e3bb09f6d4858bb32edeb31cbe7d6
#: ../src/Doc/c-api/init.rst:635
msgid ""
"Every call to :c:func:`PyGILState_Ensure` must be matched by a call to :c:"
"func:`PyGILState_Release` on the same thread."
msgstr ""

# f0061174c8e449459ba847c438782d9c
#: ../src/Doc/c-api/init.rst:643
msgid ""
"Get the current thread state for this thread.  May return ``NULL`` if no "
"GILState API has been used on the current thread.  Note that the main thread "
"always has such a thread-state, even if no auto-thread-state call has been "
"made on the main thread.  This is mainly a helper/diagnostic function."
msgstr ""

#: ../src/Doc/c-api/init.rst:651
msgid ""
"The following macros are normally used without a trailing semicolon; look "
"for example usage in the Python source distribution."
msgstr ""

# ca434a882ea04636a4ca9d114d7b46d2
#: ../src/Doc/c-api/init.rst:657
msgid ""
"This macro expands to ``{ PyThreadState *_save; _save = PyEval_SaveThread();"
"``. Note that it contains an opening brace; it must be matched with a "
"following :c:macro:`Py_END_ALLOW_THREADS` macro.  See above for further "
"discussion of this macro.  It is a no-op when thread support is disabled at "
"compile time."
msgstr ""

# 6c1705df8c294d1682ab94ae0817fe37
#: ../src/Doc/c-api/init.rst:665
msgid ""
"This macro expands to ``PyEval_RestoreThread(_save); }``. Note that it "
"contains a closing brace; it must be matched with an earlier :c:macro:"
"`Py_BEGIN_ALLOW_THREADS` macro.  See above for further discussion of this "
"macro.  It is a no-op when thread support is disabled at compile time."
msgstr ""

# 03c2c2fc2558424c81695a3f855fbf69
#: ../src/Doc/c-api/init.rst:673
msgid ""
"This macro expands to ``PyEval_RestoreThread(_save);``: it is equivalent to :"
"c:macro:`Py_END_ALLOW_THREADS` without the closing brace.  It is a no-op "
"when thread support is disabled at compile time."
msgstr ""

# 40a4a780c7994011901f1bc0f2d75e2c
#: ../src/Doc/c-api/init.rst:680
msgid ""
"This macro expands to ``_save = PyEval_SaveThread();``: it is equivalent to :"
"c:macro:`Py_BEGIN_ALLOW_THREADS` without the opening brace and variable "
"declaration.  It is a no-op when thread support is disabled at compile time."
msgstr ""

# 4aa78f5bc17a401c97b6e9b248c374ad
#: ../src/Doc/c-api/init.rst:686
msgid "Low-level API"
msgstr ""

#: ../src/Doc/c-api/init.rst:688
msgid ""
"All of the following functions are only available when thread support is "
"enabled at compile time, and must be called only when the global interpreter "
"lock has been created."
msgstr ""

# ceb4b36334d9416da72cbc67d1897c85
#: ../src/Doc/c-api/init.rst:695
msgid ""
"Create a new interpreter state object.  The global interpreter lock need not "
"be held, but may be held if it is necessary to serialize calls to this "
"function."
msgstr ""

# 870b2125f5474c53b157d6a276eeaa2a
#: ../src/Doc/c-api/init.rst:702
msgid ""
"Reset all information in an interpreter state object.  The global "
"interpreter lock must be held."
msgstr ""

# fb492bccc0134e02982902fb6508499b
#: ../src/Doc/c-api/init.rst:708
msgid ""
"Destroy an interpreter state object.  The global interpreter lock need not "
"be held.  The interpreter state must have been reset with a previous call "
"to :c:func:`PyInterpreterState_Clear`."
msgstr ""

# d186cdc9f14640ba9fae62f1bcc70769
#: ../src/Doc/c-api/init.rst:715
msgid ""
"Create a new thread state object belonging to the given interpreter object. "
"The global interpreter lock need not be held, but may be held if it is "
"necessary to serialize calls to this function."
msgstr ""

# fb268971ce4e4834a7e4377dd7ed763f
#: ../src/Doc/c-api/init.rst:722
msgid ""
"Reset all information in a thread state object.  The global interpreter lock "
"must be held."
msgstr ""

# 1c355170152948678b7453562ce5d21c
#: ../src/Doc/c-api/init.rst:728
msgid ""
"Destroy a thread state object.  The global interpreter lock need not be "
"held. The thread state must have been reset with a previous call to :c:func:"
"`PyThreadState_Clear`."
msgstr ""

# d5daaef5876342869a3a6939546a2810
#: ../src/Doc/c-api/init.rst:735
msgid ""
"Return a dictionary in which extensions can store thread-specific state "
"information.  Each extension should use a unique key to use to store state "
"in the dictionary.  It is okay to call this function when no current thread "
"state is available. If this function returns *NULL*, no exception has been "
"raised and the caller should assume no current thread state is available."
msgstr ""

# 2cb06ad3de204dd99ee82bc0c52b2990
#: ../src/Doc/c-api/init.rst:748
msgid ""
"Asynchronously raise an exception in a thread. The *id* argument is the "
"thread id of the target thread; *exc* is the exception object to be raised. "
"This function does not steal any references to *exc*. To prevent naive "
"misuse, you must write your own C extension to call this.  Must be called "
"with the GIL held. Returns the number of thread states modified; this is "
"normally one, but will be zero if the thread id isn't found.  If *exc* is :"
"const:`NULL`, the pending exception (if any) for the thread is cleared. This "
"raises no exceptions."
msgstr ""

# a3052d45208d4cdcb8c3f99a1fc4074c
#: ../src/Doc/c-api/init.rst:761
msgid ""
"Acquire the global interpreter lock and set the current thread state to "
"*tstate*, which should not be *NULL*.  The lock must have been created "
"earlier. If this thread already has the lock, deadlock ensues."
msgstr ""

# 75682f5d1f0f4da8b3bfa9b990895ac9
#: ../src/Doc/c-api/init.rst:765
msgid ""
":c:func:`PyEval_RestoreThread` is a higher-level function which is always "
"available (even when thread support isn't enabled or when threads have not "
"been initialized)."
msgstr ""

# e5156f6fc9d44f6eafc03e09d0d78191
#: ../src/Doc/c-api/init.rst:772
msgid ""
"Reset the current thread state to *NULL* and release the global interpreter "
"lock.  The lock must have been created earlier and must be held by the "
"current thread.  The *tstate* argument, which must not be *NULL*, is only "
"used to check that it represents the current thread state --- if it isn't, a "
"fatal error is reported."
msgstr ""

# 2796a85ea84f4c7b9ab59314921fa0db
#: ../src/Doc/c-api/init.rst:778
msgid ""
":c:func:`PyEval_SaveThread` is a higher-level function which is always "
"available (even when thread support isn't enabled or when threads have not "
"been initialized)."
msgstr ""

# 105fa013434440a39627c627633dacd8
#: ../src/Doc/c-api/init.rst:785
msgid ""
"Acquire the global interpreter lock.  The lock must have been created "
"earlier. If this thread already has the lock, a deadlock ensues."
msgstr ""

# dcd0168c393447619c90caea6e23fb44
#: ../src/Doc/c-api/init.rst:789
msgid ""
"This function does not change the current thread state.  Please use :c:func:"
"`PyEval_RestoreThread` or :c:func:`PyEval_AcquireThread` instead."
msgstr ""

# c2fd5a024dc34fa2b5066fe362053976
#: ../src/Doc/c-api/init.rst:796
msgid ""
"Release the global interpreter lock.  The lock must have been created "
"earlier."
msgstr ""

# 67c3809357f648b0ab67a3a78a3c893a
#: ../src/Doc/c-api/init.rst:799
msgid ""
"This function does not change the current thread state.  Please use :c:func:"
"`PyEval_SaveThread` or :c:func:`PyEval_ReleaseThread` instead."
msgstr ""

# 3566e6a5d9cc4fcbbb1693145209138f
#: ../src/Doc/c-api/init.rst:805
msgid "Sub-interpreter support"
msgstr ""

# b94c454382aa43d298a902fdf88b8a92
#: ../src/Doc/c-api/init.rst:807
msgid ""
"While in most uses, you will only embed a single Python interpreter, there "
"are cases where you need to create several independent interpreters in the "
"same process and perhaps even in the same thread.  Sub-interpreters allow "
"you to do that.  You can switch between sub-interpreters using the :c:func:"
"`PyThreadState_Swap` function.  You can create and destroy them using the "
"following functions:"
msgstr ""

# 1f468654b9f14d608f89cb2c294defef
#: ../src/Doc/c-api/init.rst:825
msgid ""
"Create a new sub-interpreter.  This is an (almost) totally separate "
"environment for the execution of Python code.  In particular, the new "
"interpreter has separate, independent versions of all imported modules, "
"including the fundamental modules :mod:`builtins`, :mod:`__main__` and :mod:"
"`sys`.  The table of loaded modules (``sys.modules``) and the module search "
"path (``sys.path``) are also separate.  The new environment has no ``sys."
"argv`` variable.  It has new standard I/O stream file objects ``sys.stdin``, "
"``sys.stdout`` and ``sys.stderr`` (however these refer to the same "
"underlying file descriptors)."
msgstr ""

# 341c89744a1e43f9b0861804b498314b
#: ../src/Doc/c-api/init.rst:835
msgid ""
"The return value points to the first thread state created in the new sub-"
"interpreter.  This thread state is made in the current thread state. Note "
"that no actual thread is created; see the discussion of thread states "
"below.  If creation of the new interpreter is unsuccessful, *NULL* is "
"returned; no exception is set since the exception state is stored in the "
"current thread state and there may not be a current thread state.  (Like all "
"other Python/C API functions, the global interpreter lock must be held "
"before calling this function and is still held when it returns; however, "
"unlike most other Python/C API functions, there needn't be a current thread "
"state on entry.)"
msgstr ""

# 68c3d7c98a0a42c6b6c35fb5456d4250
#: ../src/Doc/c-api/init.rst:850
msgid ""
"Extension modules are shared between (sub-)interpreters as follows: the "
"first time a particular extension is imported, it is initialized normally, "
"and a (shallow) copy of its module's dictionary is squirreled away.  When "
"the same extension is imported by another (sub-)interpreter, a new module is "
"initialized and filled with the contents of this copy; the extension's "
"``init`` function is not called.  Note that this is different from what "
"happens when an extension is imported after the interpreter has been "
"completely re-initialized by calling :c:func:`Py_Finalize` and :c:func:"
"`Py_Initialize`; in that case, the extension's ``initmodule`` function *is* "
"called again."
msgstr ""

# 08899c66ea6e4a5b97420435c63ee5f9
#: ../src/Doc/c-api/init.rst:867
msgid ""
"Destroy the (sub-)interpreter represented by the given thread state. The "
"given thread state must be the current thread state.  See the discussion of "
"thread states below.  When the call returns, the current thread state is "
"*NULL*.  All thread states associated with this interpreter are destroyed.  "
"(The global interpreter lock must be held before calling this function and "
"is still held when it returns.)  :c:func:`Py_Finalize` will destroy all sub-"
"interpreters that haven't been explicitly destroyed at that point."
msgstr ""

# df5e14e57bba4042a972f31adf31b81b
#: ../src/Doc/c-api/init.rst:877
msgid "Bugs and caveats"
msgstr ""

# 7d229db35ff5411298046c108810ff63
#: ../src/Doc/c-api/init.rst:879
msgid ""
"Because sub-interpreters (and the main interpreter) are part of the same "
"process, the insulation between them isn't perfect --- for example, using "
"low-level file operations like  :func:`os.close` they can (accidentally or "
"maliciously) affect each other's open files.  Because of the way extensions "
"are shared between (sub-)interpreters, some extensions may not work "
"properly; this is especially likely when the extension makes use of (static) "
"global variables, or when the extension manipulates its module's dictionary "
"after its initialization.  It is possible to insert objects created in one "
"sub-interpreter into a namespace of another sub-interpreter; this should be "
"done with great care to avoid sharing user-defined functions, methods, "
"instances or classes between sub-interpreters, since import operations "
"executed by such objects may affect the wrong (sub-)interpreter's dictionary "
"of loaded modules."
msgstr ""

# e6a070148b374e8cb9373ebe77a9dbba
#: ../src/Doc/c-api/init.rst:893
msgid ""
"Also note that combining this functionality with :c:func:`PyGILState_\\*` "
"APIs is delicate, because these APIs assume a bijection between Python "
"thread states and OS-level threads, an assumption broken by the presence of "
"sub-interpreters. It is highly recommended that you don't switch sub-"
"interpreters between a pair of matching :c:func:`PyGILState_Ensure` and :c:"
"func:`PyGILState_Release` calls. Furthermore, extensions (such as :mod:"
"`ctypes`) using these APIs to allow calling of Python code from non-Python "
"created threads will probably be broken when using sub-interpreters."
msgstr ""

#: ../src/Doc/c-api/init.rst:904
msgid "Asynchronous Notifications"
msgstr ""

#: ../src/Doc/c-api/init.rst:906
msgid ""
"A mechanism is provided to make asynchronous notifications to the main "
"interpreter thread.  These notifications take the form of a function pointer "
"and a void argument."
msgstr ""

#: ../src/Doc/c-api/init.rst:912
msgid ""
"Every check interval, when the global interpreter lock is released and "
"reacquired, Python will also call any such provided functions.  This can be "
"used for example by asynchronous IO handlers.  The notification can be "
"scheduled from a worker thread and the actual call than made at the earliest "
"convenience by the main thread where it has possession of the global "
"interpreter lock and can perform any Python API calls."
msgstr ""

# a8f087d485dd461faf9018bddacef1ff
#: ../src/Doc/c-api/init.rst:923
msgid ""
"Post a notification to the Python main thread.  If successful, *func* will "
"be called with the argument *arg* at the earliest convenience.  *func* will "
"be called having the global interpreter lock held and can thus use the full "
"Python API and can take any action such as setting object attributes to "
"signal IO completion.  It must return 0 on success, or -1 signalling an "
"exception.  The notification function won't be interrupted to perform "
"another asynchronous notification recursively, but it can still be "
"interrupted to switch threads if the global interpreter lock is released, "
"for example, if it calls back into Python code."
msgstr ""

# 5fef155210db473393c1b24f69d24e9f
#: ../src/Doc/c-api/init.rst:933
msgid ""
"This function returns 0 on success in which case the notification has been "
"scheduled.  Otherwise, for example if the notification buffer is full, it "
"returns -1 without setting any exception."
msgstr ""

# f708a37cb9464ac89b941a1aad01b1c9
#: ../src/Doc/c-api/init.rst:937
msgid ""
"This function can be called on any thread, be it a Python thread or some "
"other system thread.  If it is a Python thread, it doesn't matter if it "
"holds the global interpreter lock or not."
msgstr ""

#: ../src/Doc/c-api/init.rst:948
msgid "Profiling and Tracing"
msgstr ""

#: ../src/Doc/c-api/init.rst:953
msgid ""
"The Python interpreter provides some low-level support for attaching "
"profiling and execution tracing facilities.  These are used for profiling, "
"debugging, and coverage analysis tools."
msgstr ""

# 72e9f4ca3e2b4700adedc6b468a02615
#: ../src/Doc/c-api/init.rst:957
msgid ""
"Starting with Python 2.2, the implementation of this facility was "
"substantially revised, and an interface from C was added.  This C interface "
"allows the profiling or tracing code to avoid the overhead of calling "
"through Python-level callable objects, making a direct C function call "
"instead.  The essential attributes of the facility have not changed; the "
"interface allows trace functions to be installed per-thread, and the basic "
"events reported to the trace function are the same as had been reported to "
"the Python-level trace functions in previous versions."
msgstr ""

# 9d28ffd3b0d2460ba798c9a7e3b59d84
#: ../src/Doc/c-api/init.rst:969
msgid ""
"The type of the trace function registered using :c:func:`PyEval_SetProfile` "
"and :c:func:`PyEval_SetTrace`. The first parameter is the object passed to "
"the registration function as *obj*, *frame* is the frame object to which the "
"event pertains, *what* is one of the constants :const:`PyTrace_CALL`, :const:"
"`PyTrace_EXCEPTION`, :const:`PyTrace_LINE`, :const:`PyTrace_RETURN`, :const:"
"`PyTrace_C_CALL`, :const:`PyTrace_C_EXCEPTION`, or :const:"
"`PyTrace_C_RETURN`, and *arg* depends on the value of *what*:"
msgstr ""

# 095e20f08f10459bab6dfd5b6e78ba71
#: ../src/Doc/c-api/init.rst:978
msgid "Value of *what*"
msgstr ""

# a270dcbcc30947f7b92e060a1f31b784
#: ../src/Doc/c-api/init.rst:978
msgid "Meaning of *arg*"
msgstr ""

# 93b45023a6b740409833f84e3e1bcd9f
#: ../src/Doc/c-api/init.rst:980
msgid ":const:`PyTrace_CALL`"
msgstr ""

# a5bbec6a2c9f437fb4fa9554300a4fb9
# 4cd4efbc5d824c9c9cb68c799a075085
#: ../src/Doc/c-api/init.rst:980 ../src/Doc/c-api/init.rst:985
msgid "Always *NULL*."
msgstr ""

# 8f780075e25f4772b27c630d0d4e3ed8
#: ../src/Doc/c-api/init.rst:982
msgid ":const:`PyTrace_EXCEPTION`"
msgstr ""

# a25801d3fd854ea496f92e2001780d26
#: ../src/Doc/c-api/init.rst:982
msgid "Exception information as returned by :func:`sys.exc_info`."
msgstr ""

# f70f08df3db84f049cf6cf709b7e1686
#: ../src/Doc/c-api/init.rst:985
msgid ":const:`PyTrace_LINE`"
msgstr ""

# df21fbcc92b44ac4bea14fbd8b4e4027
#: ../src/Doc/c-api/init.rst:987
msgid ":const:`PyTrace_RETURN`"
msgstr ""

# c3b1817f576040b48185d2155c8ac0e3
#: ../src/Doc/c-api/init.rst:987
msgid ""
"Value being returned to the caller, or *NULL* if caused by an exception."
msgstr ""

# 7ea65f0f11ec40e986e083d28d28f219
#: ../src/Doc/c-api/init.rst:990
msgid ":const:`PyTrace_C_CALL`"
msgstr ""

# 12b7cd4e74c6439181ffc0ab8af881a6
# 14968be4a9654d9c84131369bbce0b0c
# f1c4693367574e54a93e034908fcce7a
#: ../src/Doc/c-api/init.rst:990 ../src/Doc/c-api/init.rst:992
#: ../src/Doc/c-api/init.rst:994
msgid "Function object being called."
msgstr ""

# 65c6c1452650431ea40e87f8d28e3cb6
#: ../src/Doc/c-api/init.rst:992
msgid ":const:`PyTrace_C_EXCEPTION`"
msgstr ""

# 5d84c651436141fca0a1500288957174
#: ../src/Doc/c-api/init.rst:994
msgid ":const:`PyTrace_C_RETURN`"
msgstr ""

# ec93ec20594f491baaee9ffc16ec6bb8
#: ../src/Doc/c-api/init.rst:1000
msgid ""
"The value of the *what* parameter to a :c:type:`Py_tracefunc` function when "
"a new call to a function or method is being reported, or a new entry into a "
"generator. Note that the creation of the iterator for a generator function "
"is not reported as there is no control transfer to the Python bytecode in "
"the corresponding frame."
msgstr ""

# 4d838920a4bd441d8c68baa2b34f228b
#: ../src/Doc/c-api/init.rst:1009
msgid ""
"The value of the *what* parameter to a :c:type:`Py_tracefunc` function when "
"an exception has been raised.  The callback function is called with this "
"value for *what* when after any bytecode is processed after which the "
"exception becomes set within the frame being executed.  The effect of this "
"is that as exception propagation causes the Python stack to unwind, the "
"callback is called upon return to each frame as the exception propagates.  "
"Only trace functions receives these events; they are not needed by the "
"profiler."
msgstr ""

# 03cc0271846a48918b2b122c307af997
#: ../src/Doc/c-api/init.rst:1020
msgid ""
"The value passed as the *what* parameter to a trace function (but not a "
"profiling function) when a line-number event is being reported."
msgstr ""

# 99573b6fad01487f8138175a3bd13f47
#: ../src/Doc/c-api/init.rst:1026
msgid ""
"The value for the *what* parameter to :c:type:`Py_tracefunc` functions when "
"a call is returning without propagating an exception."
msgstr ""

# d9516959f73e4f6eab4d5c8ddb36bea2
#: ../src/Doc/c-api/init.rst:1032
msgid ""
"The value for the *what* parameter to :c:type:`Py_tracefunc` functions when "
"a C function is about to be called."
msgstr ""

# 2ffa67be7fb44bd4b5ece78d3215a106
#: ../src/Doc/c-api/init.rst:1038
msgid ""
"The value for the *what* parameter to :c:type:`Py_tracefunc` functions when "
"a C function has raised an exception."
msgstr ""

# 5b86bb035b44401cbfeaa20a53f4f923
#: ../src/Doc/c-api/init.rst:1044
msgid ""
"The value for the *what* parameter to :c:type:`Py_tracefunc` functions when "
"a C function has returned."
msgstr ""

# 98a3bc9933cb4831a998cd80b3155f04
#: ../src/Doc/c-api/init.rst:1050
msgid ""
"Set the profiler function to *func*.  The *obj* parameter is passed to the "
"function as its first parameter, and may be any Python object, or *NULL*.  "
"If the profile function needs to maintain state, using a different value for "
"*obj* for each thread provides a convenient and thread-safe place to store "
"it.  The profile function is called for all monitored events except the line-"
"number events."
msgstr ""

# deeb98c5e3344a59ab52a004d88ac0ef
#: ../src/Doc/c-api/init.rst:1060
msgid ""
"Set the tracing function to *func*.  This is similar to :c:func:"
"`PyEval_SetProfile`, except the tracing function does receive line-number "
"events."
msgstr ""

# c1c9387bc5af4ad480e60b00395178a1
#: ../src/Doc/c-api/init.rst:1066
msgid ""
"Return a tuple of function call counts.  There are constants defined for the "
"positions within the tuple:"
msgstr ""

#: ../src/Doc/c-api/init.rst:1070
#, fuzzy
msgid "Name"
msgstr "Nom C"

# 0f169c2be0a640b7ad6ee84bd7316abf
#: ../src/Doc/c-api/init.rst:1070
msgid "Value"
msgstr ""

# 5aa41cf225dc4aa8ad867de6ac70257c
#: ../src/Doc/c-api/init.rst:1072
msgid ":const:`PCALL_ALL`"
msgstr ""

# 3474195a928044e396fb1f8730a4712d
#: ../src/Doc/c-api/init.rst:1072
msgid "0"
msgstr ""

# 6f0c6c0ac13c4a3d9cd54eeab9f1556f
#: ../src/Doc/c-api/init.rst:1074
msgid ":const:`PCALL_FUNCTION`"
msgstr ""

# 8a14171e724d4a0895dcaad125a31654
#: ../src/Doc/c-api/init.rst:1074
msgid "1"
msgstr ""

# 4586e05cc1674affb1cb7bddb5c4f14f
#: ../src/Doc/c-api/init.rst:1076
msgid ":const:`PCALL_FAST_FUNCTION`"
msgstr ""

# 3170c27b5aa94ce19af709f6af8ff41c
#: ../src/Doc/c-api/init.rst:1076
msgid "2"
msgstr ""

# 88cd21cdeab549cc9ea702ca1bc45be3
#: ../src/Doc/c-api/init.rst:1078
msgid ":const:`PCALL_FASTER_FUNCTION`"
msgstr ""

# cc878984a9db4a2b9f4be353a858e73d
#: ../src/Doc/c-api/init.rst:1078
msgid "3"
msgstr ""

# c71b1cdc42c44d6c8aae73281203beac
#: ../src/Doc/c-api/init.rst:1080
msgid ":const:`PCALL_METHOD`"
msgstr ""

# 9b7786a01c8f4a8e9f352e30fb8666db
#: ../src/Doc/c-api/init.rst:1080
msgid "4"
msgstr ""

# 2fd6f96b9aa2451ebc46b531e93feaef
#: ../src/Doc/c-api/init.rst:1082
msgid ":const:`PCALL_BOUND_METHOD`"
msgstr ""

# 51cc7d7d666c40369e7ed15b80e8448c
#: ../src/Doc/c-api/init.rst:1082
msgid "5"
msgstr ""

# 476baec3c41b4693a195d14ce7e6e7b1
#: ../src/Doc/c-api/init.rst:1084
msgid ":const:`PCALL_CFUNCTION`"
msgstr ""

# 6243d6a199cc402db79105abce3169fc
#: ../src/Doc/c-api/init.rst:1084
msgid "6"
msgstr ""

# f96d9c47f8324e1081002551c6bfaabe
#: ../src/Doc/c-api/init.rst:1086
msgid ":const:`PCALL_TYPE`"
msgstr ""

# 5776fb6f8d214304b63d95ee2b3885f1
#: ../src/Doc/c-api/init.rst:1086
msgid "7"
msgstr ""

# b5016300f981468a83d546ead32ea53a
#: ../src/Doc/c-api/init.rst:1088
msgid ":const:`PCALL_GENERATOR`"
msgstr ""

# f57c99e51a0a49aeb0147016e238ed8c
#: ../src/Doc/c-api/init.rst:1088
msgid "8"
msgstr ""

# d0a740e25a1449e9b4143bbd04450a49
#: ../src/Doc/c-api/init.rst:1090
msgid ":const:`PCALL_OTHER`"
msgstr ""

# a229fa870ab849e28d01172bb1cec89a
#: ../src/Doc/c-api/init.rst:1090
msgid "9"
msgstr ""

# 3f3342cee8814f918f6603b7ee8f891d
#: ../src/Doc/c-api/init.rst:1092
msgid ":const:`PCALL_POP`"
msgstr ""

# fa4d7e09abbe4e978c7a568235b3df8b
#: ../src/Doc/c-api/init.rst:1092
msgid "10"
msgstr ""

# 5a95734d79eb4c0c8aa63f99947c3bf7
#: ../src/Doc/c-api/init.rst:1095
msgid ""
":const:`PCALL_FAST_FUNCTION` means no argument tuple needs to be created. :"
"const:`PCALL_FASTER_FUNCTION` means that the fast-path frame setup code is "
"used."
msgstr ""

# 0683304c696646d2813f62985fc78a21
#: ../src/Doc/c-api/init.rst:1098
msgid ""
"If there is a method call where the call can be optimized by changing the "
"argument tuple and calling the function directly, it gets recorded twice."
msgstr ""

# 4113b8f8092c42798109c3a3e1a722e3
#: ../src/Doc/c-api/init.rst:1102
msgid ""
"This function is only present if Python is compiled with :const:"
"`CALL_PROFILE` defined."
msgstr ""

#: ../src/Doc/c-api/init.rst:1108
msgid "Advanced Debugger Support"
msgstr "Support avancé du debugger"

#: ../src/Doc/c-api/init.rst:1113
msgid ""
"These functions are only intended to be used by advanced debugging tools."
msgstr ""

# aba072f5a5614e74ba92b6f5851b7f9c
#: ../src/Doc/c-api/init.rst:1118
msgid ""
"Return the interpreter state object at the head of the list of all such "
"objects."
msgstr ""

# 46c5eda3cf3244149adc1112135184f9
#: ../src/Doc/c-api/init.rst:1125
msgid ""
"Return the next interpreter state object after *interp* from the list of all "
"such objects."
msgstr ""

# d723435077f64f20896206b81d7d111e
#: ../src/Doc/c-api/init.rst:1133
msgid ""
"Return the a pointer to the first :c:type:`PyThreadState` object in the list "
"of threads associated with the interpreter *interp*."
msgstr ""

# b5aafa02711c44c6a9fae2b46f9f0702
#: ../src/Doc/c-api/init.rst:1141
msgid ""
"Return the next thread state object after *tstate* from the list of all such "
"objects belonging to the same :c:type:`PyInterpreterState` object."
msgstr ""

#: ../src/Doc/c-api/int.rst:6
#, fuzzy
msgid "Plain Integer Objects"
msgstr "Objets association"

# e13023c131ca423788274e6fe8d0be5b
#: ../src/Doc/c-api/int.rst:13
msgid "This subtype of :c:type:`PyObject` represents a Python integer object."
msgstr ""

# c4093a5d48114478bea7959b7f311c13
#: ../src/Doc/c-api/int.rst:20
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python plain integer "
"type. This is the same object as ``int`` and ``types.IntType``."
msgstr ""

# 7a740f5164a24859bc3185fcef330d19
#: ../src/Doc/c-api/int.rst:26
msgid ""
"Return true if *o* is of type :c:data:`PyInt_Type` or a subtype of :c:data:"
"`PyInt_Type`."
msgstr ""

# d867fa01f51f46ce840bdaa90c6df98e
#: ../src/Doc/c-api/int.rst:35
msgid ""
"Return true if *o* is of type :c:data:`PyInt_Type`, but not a subtype of :c:"
"data:`PyInt_Type`."
msgstr ""

# cbd919ffc93a4d7a8b0010ba793c850e
#: ../src/Doc/c-api/int.rst:43
msgid ""
"Return a new :c:type:`PyIntObject` or :c:type:`PyLongObject` based on the "
"string value in *str*, which is interpreted according to the radix in "
"*base*.  If *pend* is non-*NULL*, ``*pend`` will point to the first "
"character in *str* which follows the representation of the number.  If "
"*base* is ``0``, the radix will be determined based on the leading "
"characters of *str*: if *str* starts with ``'0x'`` or ``'0X'``, radix 16 "
"will be used; if *str* starts with ``'0'``, radix 8 will be used; otherwise "
"radix 10 will be used.  If *base* is not ``0``, it must be between ``2`` and "
"``36``, inclusive.  Leading spaces are ignored.  If there are no digits, :"
"exc:`ValueError` will be raised.  If the string represents a number too "
"large to be contained within the machine's :c:type:`long int` type and "
"overflow warnings are being suppressed, a :c:type:`PyLongObject` will be "
"returned.  If overflow warnings are not being suppressed, *NULL* will be "
"returned in this case."
msgstr ""

# 9c8181e825c94e9bac227cc4f1d9dbbf
#: ../src/Doc/c-api/int.rst:60
msgid "Create a new integer object with a value of *ival*."
msgstr ""

# 6387436b87e54ce79cd103ce1f8cf26b
#: ../src/Doc/c-api/int.rst:62
msgid ""
"The current implementation keeps an array of integer objects for all "
"integers between ``-5`` and ``256``, when you create an int in that range "
"you actually just get back a reference to the existing object. So it should "
"be possible to change the value of ``1``.  I suspect the behaviour of Python "
"in this case is undefined. :-)"
msgstr ""

# a04ed5c90c5f4e9e91f7bba613f82b1a
#: ../src/Doc/c-api/int.rst:71
msgid ""
"Create a new integer object with a value of *ival*. If the value is larger "
"than ``LONG_MAX`` or smaller than ``LONG_MIN``, a long integer object is "
"returned."
msgstr ""

# 4eaf2ff18dc3467ea45cbef88003e287
#: ../src/Doc/c-api/int.rst:80
msgid ""
"Create a new integer object with a value of *ival*. If the value exceeds "
"``LONG_MAX``, a long integer object is returned."
msgstr ""

# 11fccebc733a4374bb494ef2b53e0b99
#: ../src/Doc/c-api/int.rst:88
msgid ""
"Will first attempt to cast the object to a :c:type:`PyIntObject`, if it is "
"not already one, and then return its value. If there is an error, ``-1`` is "
"returned, and the caller should check ``PyErr_Occurred()`` to find out "
"whether there was an error, or whether the value just happened to be -1."
msgstr ""

# 67ae334dc5ec444c95ae5763d753142f
#: ../src/Doc/c-api/int.rst:96
msgid "Return the value of the object *io*.  No error checking is performed."
msgstr ""

# 40988d18fc7a4bb1b4959c49cfae2760
#: ../src/Doc/c-api/int.rst:101
msgid ""
"Will first attempt to cast the object to a :c:type:`PyIntObject` or :c:type:"
"`PyLongObject`, if it is not already one, and then return its value as "
"unsigned long.  This function does not check for overflow."
msgstr ""

# e4c121413c154ad29d47891dbbb95caa
#: ../src/Doc/c-api/int.rst:110
msgid ""
"Will first attempt to cast the object to a :c:type:`PyIntObject` or :c:type:"
"`PyLongObject`, if it is not already one, and then return its value as "
"unsigned long long, without checking for overflow."
msgstr ""

# 884efb64aba84f63a0250a4eec150ec1
#: ../src/Doc/c-api/int.rst:119
msgid ""
"Will first attempt to cast the object to a :c:type:`PyIntObject` or :c:type:"
"`PyLongObject`, if it is not already one, and then return its value as :c:"
"type:`Py_ssize_t`."
msgstr ""

# e183323b9f4c41d7b72c3375de87b165
#: ../src/Doc/c-api/int.rst:130
msgid ""
"Return the system's idea of the largest integer it can handle (:const:"
"`LONG_MAX`, as defined in the system header files)."
msgstr ""

# e0d7652530fb4e82a704fdca79fc9a86
#: ../src/Doc/c-api/int.rst:136
msgid ""
"Clear the integer free list. Return the number of items that could not be "
"freed."
msgstr ""

#: ../src/Doc/c-api/intro.rst:8
msgid "Introduction"
msgstr "Introduction"

#: ../src/Doc/c-api/intro.rst:10
msgid ""
"The Application Programmer's Interface to Python gives C and C++ programmers "
"access to the Python interpreter at a variety of levels.  The API is equally "
"usable from C++, but for brevity it is generally referred to as the Python/C "
"API.  There are two fundamentally different reasons for using the Python/C "
"API. The first reason is to write *extension modules* for specific purposes; "
"these are C modules that extend the Python interpreter.  This is probably "
"the most common use.  The second reason is to use Python as a component in a "
"larger application; this technique is generally referred to as :dfn:"
"`embedding` Python in an application."
msgstr ""

#: ../src/Doc/c-api/intro.rst:20
msgid ""
"Writing an extension module is a relatively well-understood process,  where "
"a \"cookbook\" approach works well.  There are several tools  that automate "
"the process to some extent.  While people have embedded  Python in other "
"applications since its early existence, the process of  embedding Python is "
"less straightforward than writing an extension."
msgstr ""

#: ../src/Doc/c-api/intro.rst:26
msgid ""
"Many API functions are useful independent of whether you're embedding  or "
"extending Python; moreover, most applications that embed Python  will need "
"to provide a custom extension as well, so it's probably a  good idea to "
"become familiar with writing an extension before  attempting to embed Python "
"in a real application."
msgstr ""

#: ../src/Doc/c-api/intro.rst:36
msgid "Include Files"
msgstr ""

#: ../src/Doc/c-api/intro.rst:38
msgid ""
"All function, type and macro definitions needed to use the Python/C API are "
"included in your code by the following line::"
msgstr ""

# 470f5410e8e24643a5e71aae870696e6
#: ../src/Doc/c-api/intro.rst:43
msgid ""
"This implies inclusion of the following standard headers: ``<stdio.h>``, "
"``<string.h>``, ``<errno.h>``, ``<limits.h>``, ``<assert.h>`` and ``<stdlib."
"h>`` (if available)."
msgstr ""

#: ../src/Doc/c-api/intro.rst:49
msgid ""
"Since Python may define some pre-processor definitions which affect the "
"standard headers on some systems, you *must* include :file:`Python.h` before "
"any standard headers are included."
msgstr ""

#: ../src/Doc/c-api/intro.rst:53
msgid ""
"All user visible names defined by Python.h (except those defined by the "
"included standard headers) have one of the prefixes ``Py`` or ``_Py``.  "
"Names beginning with ``_Py`` are for internal use by the Python "
"implementation and should not be used by extension writers. Structure member "
"names do not have a reserved prefix."
msgstr ""

#: ../src/Doc/c-api/intro.rst:58
msgid ""
"**Important:** user code should never define names that begin with ``Py`` or "
"``_Py``.  This confuses the reader, and jeopardizes the portability of the "
"user code to future Python versions, which may define additional names "
"beginning with one of these prefixes."
msgstr ""

#: ../src/Doc/c-api/intro.rst:63
msgid ""
"The header files are typically installed with Python.  On Unix, these  are "
"located in the directories :file:`{prefix}/include/pythonversion/` and :file:"
"`{exec_prefix}/include/pythonversion/`, where :envvar:`prefix` and :envvar:"
"`exec_prefix` are defined by the corresponding parameters to Python's :"
"program:`configure` script and *version* is ``sys.version[:3]``.  On "
"Windows, the headers are installed in :file:`{prefix}/include`, where :"
"envvar:`prefix` is the installation directory specified to the installer."
msgstr ""

#: ../src/Doc/c-api/intro.rst:71
msgid ""
"To include the headers, place both directories (if different) on your "
"compiler's search path for includes.  Do *not* place the parent directories "
"on the search path and then use ``#include <pythonX.Y/Python.h>``; this will "
"break on multi-platform builds since the platform independent headers under :"
"envvar:`prefix` include the platform specific headers from :envvar:"
"`exec_prefix`."
msgstr ""

#: ../src/Doc/c-api/intro.rst:78
msgid ""
"C++ users should note that though the API is defined entirely using C, the "
"header files do properly declare the entry points to be ``extern \"C\"``, so "
"there is no need to do anything special to use the API from C++."
msgstr ""

#: ../src/Doc/c-api/intro.rst:86
msgid "Objects, Types and Reference Counts"
msgstr ""

# e6a6c583542b40f9bcd7026cc071637c
#: ../src/Doc/c-api/intro.rst:90
msgid ""
"Most Python/C API functions have one or more arguments as well as a return "
"value of type :c:type:`PyObject\\*`.  This type is a pointer to an opaque "
"data type representing an arbitrary Python object.  Since all Python object "
"types are treated the same way by the Python language in most situations (e."
"g., assignments, scope rules, and argument passing), it is only fitting that "
"they should be represented by a single C type.  Almost all Python objects "
"live on the heap: you never declare an automatic or static variable of type :"
"c:type:`PyObject`, only pointer variables of type :c:type:`PyObject\\*` can  "
"be declared.  The sole exception are the type objects; since these must "
"never be deallocated, they are typically static :c:type:`PyTypeObject` "
"objects."
msgstr ""

#: ../src/Doc/c-api/intro.rst:101
msgid ""
"All Python objects (even Python integers) have a :dfn:`type` and a :dfn:"
"`reference count`.  An object's type determines what kind of object it is (e."
"g., an integer, a list, or a user-defined function; there are many more as "
"explained in :ref:`types`).  For each of the well-known types there is a "
"macro to check whether an object is of that type; for instance, "
"``PyList_Check(a)`` is true if (and only if) the object pointed to by *a* is "
"a Python list."
msgstr ""

#: ../src/Doc/c-api/intro.rst:112
msgid "Reference Counts"
msgstr ""

#: ../src/Doc/c-api/intro.rst:114
msgid ""
"The reference count is important because today's computers have a  finite "
"(and often severely limited) memory size; it counts how many  different "
"places there are that have a reference to an object.  Such a  place could be "
"another object, or a global (or static) C variable, or  a local variable in "
"some C function. When an object's reference count  becomes zero, the object "
"is deallocated.  If it contains references to  other objects, their "
"reference count is decremented. Those other  objects may be deallocated in "
"turn, if this decrement makes their reference count become zero, and so on.  "
"(There's an obvious problem  with objects that reference each other here; "
"for now, the solution is  \"don't do that.\")"
msgstr ""

# 946ff4a53eb746fea235ca8607fdb233
#: ../src/Doc/c-api/intro.rst:129
msgid ""
"Reference counts are always manipulated explicitly.  The normal way is  to "
"use the macro :c:func:`Py_INCREF` to increment an object's reference count "
"by one, and :c:func:`Py_DECREF` to decrement it by   one.  The :c:func:"
"`Py_DECREF` macro is considerably more complex than the incref one, since it "
"must check whether the reference count becomes zero and then cause the "
"object's deallocator to be called. The deallocator is a function pointer "
"contained in the object's type structure.  The type-specific deallocator "
"takes care of decrementing the reference counts for other objects contained "
"in the object if this is a compound object type, such as a list, as well as "
"performing any additional finalization that's needed.  There's no chance "
"that the reference count can overflow; at least as many bits are used to "
"hold the reference count as there are distinct memory locations in virtual "
"memory (assuming ``sizeof(Py_ssize_t) >= sizeof(void*)``). Thus, the "
"reference count increment is a simple operation."
msgstr ""

#: ../src/Doc/c-api/intro.rst:143
msgid ""
"It is not necessary to increment an object's reference count for every  "
"local variable that contains a pointer to an object.  In theory, the  "
"object's reference count goes up by one when the variable is made to  point "
"to it and it goes down by one when the variable goes out of  scope.  "
"However, these two cancel each other out, so at the end the  reference count "
"hasn't changed.  The only real reason to use the  reference count is to "
"prevent the object from being deallocated as  long as our variable is "
"pointing to it.  If we know that there is at  least one other reference to "
"the object that lives at least as long as our variable, there is no need to "
"increment the reference count  temporarily. An important situation where "
"this arises is in objects  that are passed as arguments to C functions in an "
"extension module  that are called from Python; the call mechanism guarantees "
"to hold a  reference to every argument for the duration of the call."
msgstr ""

# 614577edc39340c2aa87661ca82dd832
#: ../src/Doc/c-api/intro.rst:157
msgid ""
"However, a common pitfall is to extract an object from a list and hold on to "
"it for a while without incrementing its reference count. Some other "
"operation might conceivably remove the object from the list, decrementing "
"its reference count and possible deallocating it. The real danger is that "
"innocent-looking operations may invoke arbitrary Python code which could do "
"this; there is a code path which allows control to flow back to the user "
"from a :c:func:`Py_DECREF`, so almost any operation is potentially dangerous."
msgstr ""

# add8a84c7d1546bc81ccd9a0bdaa9b10
#: ../src/Doc/c-api/intro.rst:165
msgid ""
"A safe approach is to always use the generic operations (functions  whose "
"name begins with ``PyObject_``, ``PyNumber_``, ``PySequence_`` or "
"``PyMapping_``). These operations always increment the reference count of "
"the object they return. This leaves the caller with the responsibility to "
"call :c:func:`Py_DECREF` when they are done with the result; this soon "
"becomes second nature."
msgstr ""

#: ../src/Doc/c-api/intro.rst:175
msgid "Reference Count Details"
msgstr ""

# d411ff8695d44d0ea505ae113adaba36
#: ../src/Doc/c-api/intro.rst:177
msgid ""
"The reference count behavior of functions in the Python/C API is best  "
"explained in terms of *ownership of references*.  Ownership pertains to "
"references, never to objects (objects are not owned: they are always "
"shared).  \"Owning a reference\" means being responsible for calling "
"Py_DECREF on it when the reference is no longer needed.  Ownership can also "
"be transferred, meaning that the code that receives ownership of the "
"reference then becomes responsible for eventually decref'ing it by calling :"
"c:func:`Py_DECREF` or :c:func:`Py_XDECREF` when it's no longer needed---or "
"passing on this responsibility (usually to its caller). When a function "
"passes ownership of a reference on to its caller, the caller is said to "
"receive a *new* reference.  When no ownership is transferred, the caller is "
"said to *borrow* the reference. Nothing needs to be done for a borrowed "
"reference."
msgstr ""

#: ../src/Doc/c-api/intro.rst:190
msgid ""
"Conversely, when a calling function passes in a reference to an  object, "
"there are two possibilities: the function *steals* a  reference to the "
"object, or it does not.  *Stealing a reference* means that when you pass a "
"reference to a function, that function assumes that it now owns that "
"reference, and you are not responsible for it any longer."
msgstr ""

# fc16468a0382425ca57c2bd3303242f6
#: ../src/Doc/c-api/intro.rst:200
msgid ""
"Few functions steal references; the two notable exceptions are :c:func:"
"`PyList_SetItem` and :c:func:`PyTuple_SetItem`, which  steal a reference to "
"the item (but not to the tuple or list into which the item is put!).  These "
"functions were designed to steal a reference because of a common idiom for "
"populating a tuple or list with newly created objects; for example, the code "
"to create the tuple ``(1, 2, \"three\")`` could look like this (forgetting "
"about error handling for the moment; a better way to code this is shown "
"below)::"
msgstr ""

# 599671b296144b34880ae0ec1773620f
#: ../src/Doc/c-api/intro.rst:215
msgid ""
"Here, :c:func:`PyInt_FromLong` returns a new reference which is immediately "
"stolen by :c:func:`PyTuple_SetItem`.  When you want to keep using an object "
"although the reference to it will be stolen, use :c:func:`Py_INCREF` to grab "
"another reference before calling the reference-stealing function."
msgstr ""

# c19a123237f0455090ee87c0520c114b
#: ../src/Doc/c-api/intro.rst:220
msgid ""
"Incidentally, :c:func:`PyTuple_SetItem` is the *only* way to set tuple "
"items; :c:func:`PySequence_SetItem` and :c:func:`PyObject_SetItem` refuse to "
"do this since tuples are an immutable data type.  You should only use :c:"
"func:`PyTuple_SetItem` for tuples that you are creating yourself."
msgstr ""

# 8dd29c3ee28947989082fcd9fe20fa41
#: ../src/Doc/c-api/intro.rst:225
msgid ""
"Equivalent code for populating a list can be written using :c:func:"
"`PyList_New` and :c:func:`PyList_SetItem`."
msgstr ""

# 5a2ee96e8d6e4d949802769529265831
#: ../src/Doc/c-api/intro.rst:228
msgid ""
"However, in practice, you will rarely use these ways of creating and "
"populating a tuple or list.  There's a generic function, :c:func:"
"`Py_BuildValue`, that can create most common objects from C values, directed "
"by a :dfn:`format string`. For example, the above two blocks of code could "
"be replaced by the following (which also takes care of the error checking)::"
msgstr ""

# b39b2ae71b64439ca993d89691668063
#: ../src/Doc/c-api/intro.rst:239
msgid ""
"It is much more common to use :c:func:`PyObject_SetItem` and friends with "
"items whose references you are only borrowing, like arguments that were "
"passed in to the function you are writing.  In that case, their behaviour "
"regarding reference counts is much saner, since you don't have to increment "
"a reference count so you can give a reference away (\"have it be stolen\").  "
"For example, this function sets all items of a list (actually, any mutable "
"sequence) to a given item::"
msgstr ""

# 5325f7d38aec4abfb1ad28e7235ce226
#: ../src/Doc/c-api/intro.rst:267
msgid ""
"The situation is slightly different for function return values.   While "
"passing a reference to most functions does not change your  ownership "
"responsibilities for that reference, many functions that  return a reference "
"to an object give you ownership of the reference. The reason is simple: in "
"many cases, the returned object is created  on the fly, and the reference "
"you get is the only reference to the  object.  Therefore, the generic "
"functions that return object references, like :c:func:`PyObject_GetItem` "
"and  :c:func:`PySequence_GetItem`, always return a new reference (the caller "
"becomes the owner of the reference)."
msgstr ""

# 32fab0244dee411891a36f71677bc9f3
#: ../src/Doc/c-api/intro.rst:276
msgid ""
"It is important to realize that whether you own a reference returned  by a "
"function depends on which function you call only --- *the plumage* (the type "
"of the object passed as an argument to the function) *doesn't enter into it!"
"* Thus, if you  extract an item from a list using :c:func:`PyList_GetItem`, "
"you don't own the reference --- but if you obtain the same item from the "
"same list using :c:func:`PySequence_GetItem` (which happens to take exactly "
"the same arguments), you do own a reference to the returned object."
msgstr ""

# adc58e1c180a489aa03127c22f0b08e8
#: ../src/Doc/c-api/intro.rst:288
msgid ""
"Here is an example of how you could write a function that computes the sum "
"of the items in a list of integers; once using  :c:func:`PyList_GetItem`, "
"and once using :c:func:`PySequence_GetItem`. ::"
msgstr ""

#: ../src/Doc/c-api/intro.rst:340
msgid "Types"
msgstr ""

# 99d91d86df7f4195b716f8fd0b1ba6cc
#: ../src/Doc/c-api/intro.rst:342
msgid ""
"There are few other data types that play a significant role in  the Python/C "
"API; most are simple C types such as :c:type:`int`,  :c:type:`long`, :c:type:"
"`double` and :c:type:`char\\*`.  A few structure types  are used to describe "
"static tables used to list the functions exported  by a module or the data "
"attributes of a new object type, and another is used to describe the value "
"of a complex number.  These will  be discussed together with the functions "
"that use them."
msgstr ""

#: ../src/Doc/c-api/intro.rst:354
msgid "Exceptions"
msgstr "Exceptions"

#: ../src/Doc/c-api/intro.rst:356
msgid ""
"The Python programmer only needs to deal with exceptions if specific  error "
"handling is required; unhandled exceptions are automatically  propagated to "
"the caller, then to the caller's caller, and so on, until they reach the top-"
"level interpreter, where they are reported to the  user accompanied by a "
"stack traceback."
msgstr ""

# b0bdc19b046645fdb3399d9011c6f17f
#: ../src/Doc/c-api/intro.rst:364
msgid ""
"For C programmers, however, error checking always has to be explicit.  All "
"functions in the Python/C API can raise exceptions, unless an explicit claim "
"is made otherwise in a function's documentation.  In general, when a "
"function encounters an error, it sets an exception, discards any object "
"references that it owns, and returns an error indicator.  If not documented "
"otherwise, this indicator is either *NULL* or ``-1``, depending on the "
"function's return type. A few functions return a Boolean true/false result, "
"with false indicating an error.  Very few functions return no explicit error "
"indicator or have an ambiguous return value, and require explicit testing "
"for errors with :c:func:`PyErr_Occurred`.  These exceptions are always "
"explicitly documented."
msgstr ""

# c976960d9cb844449f5de3c1abc7595f
#: ../src/Doc/c-api/intro.rst:379
msgid ""
"Exception state is maintained in per-thread storage (this is  equivalent to "
"using global storage in an unthreaded application).  A  thread can be in one "
"of two states: an exception has occurred, or not. The function :c:func:"
"`PyErr_Occurred` can be used to check for this: it returns a borrowed "
"reference to the exception type object when an exception has occurred, and "
"*NULL* otherwise.  There are a number of functions to set the exception "
"state: :c:func:`PyErr_SetString` is the most common (though not the most "
"general) function to set the exception state, and :c:func:`PyErr_Clear` "
"clears the exception state."
msgstr ""

# a8700a818d274fef930c6a25d0048404
#: ../src/Doc/c-api/intro.rst:394
msgid ""
"The full exception state consists of three objects (all of which can  be "
"*NULL*): the exception type, the corresponding exception  value, and the "
"traceback.  These have the same meanings as the Python   objects ``sys."
"exc_type``, ``sys.exc_value``, and ``sys.exc_traceback``; however, they are "
"not the same: the Python objects represent the last exception being handled "
"by a Python  :keyword:`try` ... :keyword:`except` statement, while the C "
"level exception state only exists while an exception is being passed on "
"between C functions until it reaches the Python bytecode interpreter's  main "
"loop, which takes care of transferring it to ``sys.exc_type`` and friends."
msgstr ""

#: ../src/Doc/c-api/intro.rst:406
msgid ""
"Note that starting with Python 1.5, the preferred, thread-safe way to access "
"the exception state from Python code is to call the function :func:`sys."
"exc_info`, which returns the per-thread exception state for Python code.  "
"Also, the semantics of both ways to access the exception state have changed "
"so that a function which catches an exception will save and restore its "
"thread's exception state so as to preserve the exception state of its "
"caller.  This prevents common bugs in exception handling code caused by an "
"innocent-looking function overwriting the exception being handled; it also "
"reduces the often unwanted lifetime extension for objects that are "
"referenced by the stack frames in the traceback."
msgstr ""

#: ../src/Doc/c-api/intro.rst:417
msgid ""
"As a general principle, a function that calls another function to  perform "
"some task should check whether the called function raised an  exception, and "
"if so, pass the exception state on to its caller.  It  should discard any "
"object references that it owns, and return an  error indicator, but it "
"should *not* set another exception --- that would overwrite the exception "
"that was just raised, and lose important information about the exact cause "
"of the error."
msgstr ""

# 3c717eb3817243ef954e7d74c11a61e9
#: ../src/Doc/c-api/intro.rst:426
msgid ""
"A simple example of detecting exceptions and passing them on is shown in "
"the :c:func:`sum_sequence` example above.  It so happens that that example "
"doesn't need to clean up any owned references when it detects an error.  The "
"following example function shows some error cleanup.  First, to remind you "
"why you like Python, we show the equivalent Python code::"
msgstr ""

#: ../src/Doc/c-api/intro.rst:441
msgid "Here is the corresponding C code, in all its glory::"
msgstr ""

# 6a4b730210754f5c9a53bd60b174dd8d
#: ../src/Doc/c-api/intro.rst:493
msgid ""
"This example represents an endorsed use of the ``goto`` statement  in C! It "
"illustrates the use of :c:func:`PyErr_ExceptionMatches` and :c:func:"
"`PyErr_Clear` to handle specific exceptions, and the use of :c:func:"
"`Py_XDECREF` to dispose of owned references that may be *NULL* (note the "
"``'X'`` in the name; :c:func:`Py_DECREF` would crash when confronted with a "
"*NULL* reference).  It is important that the variables used to hold owned "
"references are initialized to *NULL* for this to work; likewise, the "
"proposed return value is initialized to ``-1`` (failure) and only set to "
"success after the final call made is successful."
msgstr ""

#: ../src/Doc/c-api/intro.rst:507
msgid "Embedding Python"
msgstr ""

#: ../src/Doc/c-api/intro.rst:509
msgid ""
"The one important task that only embedders (as opposed to extension writers) "
"of the Python interpreter have to worry about is the initialization, and "
"possibly the finalization, of the Python interpreter.  Most functionality of "
"the interpreter can only be used after the interpreter has been initialized."
msgstr ""

# de4c83c0af4e436790e19a64090b6ae6
#: ../src/Doc/c-api/intro.rst:523
msgid ""
"The basic initialization function is :c:func:`Py_Initialize`. This "
"initializes the table of loaded modules, and creates the fundamental "
"modules :mod:`__builtin__`, :mod:`__main__`, :mod:`sys`, and :mod:"
"`exceptions`.  It also initializes the module search path (``sys.path``)."
msgstr ""

# 6ba5180e272a42138f008ef9c325e48c
#: ../src/Doc/c-api/intro.rst:530
msgid ""
":c:func:`Py_Initialize` does not set the \"script argument list\"  (``sys."
"argv``). If this variable is needed by Python code that will be executed "
"later, it must be set explicitly with a call to  ``PySys_SetArgvEx(argc, "
"argv, updatepath)`` after the call to :c:func:`Py_Initialize`."
msgstr ""

# 369aab46ab9b49fab9b00776a953f96e
#: ../src/Doc/c-api/intro.rst:535
msgid ""
"On most systems (in particular, on Unix and Windows, although the details "
"are slightly different), :c:func:`Py_Initialize` calculates the module "
"search path based upon its best guess for the location of the standard "
"Python interpreter executable, assuming that the Python library is found in "
"a fixed location relative to the Python interpreter executable.  In "
"particular, it looks for a directory named :file:`lib/python{X.Y}` relative "
"to the parent directory where the executable named :file:`python` is found "
"on the shell command search path (the environment variable :envvar:`PATH`)."
msgstr ""

#: ../src/Doc/c-api/intro.rst:544
msgid ""
"For instance, if the Python executable is found in :file:`/usr/local/bin/"
"python`, it will assume that the libraries are in :file:`/usr/local/lib/"
"python{X.Y}`.  (In fact, this particular path is also the \"fallback\" "
"location, used when no executable file named :file:`python` is found along :"
"envvar:`PATH`.)  The user can override this behavior by setting the "
"environment variable :envvar:`PYTHONHOME`, or insert additional directories "
"in front of the standard path by setting :envvar:`PYTHONPATH`."
msgstr ""

# 8cefa77408b545c080aa6570648caf5c
#: ../src/Doc/c-api/intro.rst:559
msgid ""
"The embedding application can steer the search by calling ``Py_SetProgramName"
"(file)`` *before* calling  :c:func:`Py_Initialize`.  Note that :envvar:"
"`PYTHONHOME` still overrides this and :envvar:`PYTHONPATH` is still inserted "
"in front of the standard path.  An application that requires total control "
"has to provide its own implementation of :c:func:`Py_GetPath`, :c:func:"
"`Py_GetPrefix`, :c:func:`Py_GetExecPrefix`, and :c:func:"
"`Py_GetProgramFullPath` (all defined in :file:`Modules/getpath.c`)."
msgstr ""

# e3a6ea373aff451ba16279dca64fab29
#: ../src/Doc/c-api/intro.rst:569
msgid ""
"Sometimes, it is desirable to \"uninitialize\" Python.  For instance,  the "
"application may want to start over (make another call to :c:func:"
"`Py_Initialize`) or the application is simply done with its  use of Python "
"and wants to free memory allocated by Python.  This can be accomplished by "
"calling :c:func:`Py_Finalize`.  The function :c:func:`Py_IsInitialized` "
"returns true if Python is currently in the initialized state.  More "
"information about these functions is given in a later chapter. Notice that :"
"c:func:`Py_Finalize` does *not* free all memory allocated by the Python "
"interpreter, e.g. memory allocated by extension modules currently cannot be "
"released."
msgstr ""

#: ../src/Doc/c-api/intro.rst:583
msgid "Debugging Builds"
msgstr ""

#: ../src/Doc/c-api/intro.rst:585
msgid ""
"Python can be built with several macros to enable extra checks of the "
"interpreter and extension modules.  These checks tend to add a large amount "
"of overhead to the runtime so they are not enabled by default."
msgstr ""

#: ../src/Doc/c-api/intro.rst:589
msgid ""
"A full list of the various types of debugging builds is in the file :file:"
"`Misc/SpecialBuilds.txt` in the Python source distribution. Builds are "
"available that support tracing of reference counts, debugging the memory "
"allocator, or low-level profiling of the main interpreter loop.  Only the "
"most frequently-used builds will be described in the remainder of this "
"section."
msgstr ""

# 858a349956944800a886d86e7238432d
#: ../src/Doc/c-api/intro.rst:595
msgid ""
"Compiling the interpreter with the :c:macro:`Py_DEBUG` macro defined "
"produces what is generally meant by \"a debug build\" of Python. :c:macro:"
"`Py_DEBUG` is enabled in the Unix build by adding ``--with-pydebug`` to the :"
"file:`./configure` command.  It is also implied by the presence of the not-"
"Python-specific :c:macro:`_DEBUG` macro.  When :c:macro:`Py_DEBUG` is "
"enabled in the Unix build, compiler optimization is disabled."
msgstr ""

#: ../src/Doc/c-api/intro.rst:602
msgid ""
"In addition to the reference count debugging described below, the following "
"extra checks are performed:"
msgstr ""

#: ../src/Doc/c-api/intro.rst:605
msgid "Extra checks are added to the object allocator."
msgstr ""

#: ../src/Doc/c-api/intro.rst:607
msgid "Extra checks are added to the parser and compiler."
msgstr ""

#: ../src/Doc/c-api/intro.rst:609
msgid ""
"Downcasts from wide types to narrow types are checked for loss of "
"information."
msgstr ""

#: ../src/Doc/c-api/intro.rst:611
msgid ""
"A number of assertions are added to the dictionary and set implementations. "
"In addition, the set object acquires a :meth:`test_c_api` method."
msgstr ""

#: ../src/Doc/c-api/intro.rst:614
msgid "Sanity checks of the input arguments are added to frame creation."
msgstr ""

# 10249386f386463897c1d3b432ca2c94
#: ../src/Doc/c-api/intro.rst:616
msgid ""
"The storage for long ints is initialized with a known invalid pattern to "
"catch reference to uninitialized digits."
msgstr ""

#: ../src/Doc/c-api/intro.rst:619
msgid ""
"Low-level tracing and extra exception checking are added to the runtime "
"virtual machine."
msgstr ""

#: ../src/Doc/c-api/intro.rst:622
msgid "Extra checks are added to the memory arena implementation."
msgstr ""

#: ../src/Doc/c-api/intro.rst:624
msgid "Extra debugging is added to the thread module."
msgstr ""

#: ../src/Doc/c-api/intro.rst:626
msgid "There may be additional checks not mentioned here."
msgstr ""

# a314f6d8a6e044a78226f0cd69f88a9c
#: ../src/Doc/c-api/intro.rst:628
msgid ""
"Defining :c:macro:`Py_TRACE_REFS` enables reference tracing.  When defined, "
"a circular doubly linked list of active objects is maintained by adding two "
"extra fields to every :c:type:`PyObject`.  Total allocations are tracked as "
"well.  Upon exit, all existing references are printed.  (In interactive mode "
"this happens after every statement run by the interpreter.)  Implied by :c:"
"macro:`Py_DEBUG`."
msgstr ""

#: ../src/Doc/c-api/intro.rst:634
msgid ""
"Please refer to :file:`Misc/SpecialBuilds.txt` in the Python source "
"distribution for more detailed information."
msgstr ""

#: ../src/Doc/c-api/iter.rst:6
msgid "Iterator Protocol"
msgstr ""

#: ../src/Doc/c-api/iter.rst:10
msgid ""
"There are only a couple of functions specifically for working with iterators."
msgstr ""

# a374920fed0f4b138a09ec5ca699cc42
#: ../src/Doc/c-api/iter.rst:15
msgid "Return true if the object *o* supports the iterator protocol."
msgstr ""

# ac1fbaccb8f24136b281c0fc02253ee0
#: ../src/Doc/c-api/iter.rst:20
msgid ""
"Return the next value from the iteration *o*.  If the object is an iterator, "
"this retrieves the next value from the iteration, and returns *NULL* with no "
"exception set if there are no remaining items.  If the object is not an "
"iterator, :exc:`TypeError` is raised, or if there is an error in retrieving "
"the item, returns *NULL* and passes along the exception."
msgstr ""

#: ../src/Doc/c-api/iter.rst:26
msgid ""
"To write a loop which iterates over an iterator, the C code should look "
"something like this::"
msgstr ""

#: ../src/Doc/c-api/iterator.rst:6
msgid "Iterator Objects"
msgstr ""

#: ../src/Doc/c-api/iterator.rst:8
msgid ""
"Python provides two general-purpose iterator objects.  The first, a sequence "
"iterator, works with an arbitrary sequence supporting the :meth:"
"`__getitem__` method.  The second works with a callable object and a "
"sentinel value, calling the callable for each item in the sequence, and "
"ending the iteration when the sentinel value is returned."
msgstr ""

# 6a6707bc6d0c4c7a8d827aab863e045b
#: ../src/Doc/c-api/iterator.rst:17
msgid ""
"Type object for iterator objects returned by :c:func:`PySeqIter_New` and the "
"one-argument form of the :func:`iter` built-in function for built-in "
"sequence types."
msgstr ""

# fcb0b29845ea465a88049cf4125f63fe
#: ../src/Doc/c-api/iterator.rst:26
msgid "Return true if the type of *op* is :c:data:`PySeqIter_Type`."
msgstr ""

# 72f162019e9a4191b259fbb598885618
#: ../src/Doc/c-api/iterator.rst:33
msgid ""
"Return an iterator that works with a general sequence object, *seq*.  The "
"iteration ends when the sequence raises :exc:`IndexError` for the "
"subscripting operation."
msgstr ""

# 653e8f2595774c919d899d69419e8599
#: ../src/Doc/c-api/iterator.rst:42
msgid ""
"Type object for iterator objects returned by :c:func:`PyCallIter_New` and "
"the two-argument form of the :func:`iter` built-in function."
msgstr ""

# 6da3a1bd8ed449df805a6834fa9baea4
#: ../src/Doc/c-api/iterator.rst:50
msgid "Return true if the type of *op* is :c:data:`PyCallIter_Type`."
msgstr ""

# 62659a4c6dd94674a29d806262b26764
#: ../src/Doc/c-api/iterator.rst:57
msgid ""
"Return a new iterator.  The first parameter, *callable*, can be any Python "
"callable object that can be called with no parameters; each call to it "
"should return the next item in the iteration.  When *callable* returns a "
"value equal to *sentinel*, the iteration will be terminated."
msgstr ""

#: ../src/Doc/c-api/list.rst:6
msgid "List Objects"
msgstr ""

# 29326c7986dc4a06b57c1df5a9547626
#: ../src/Doc/c-api/list.rst:13
msgid "This subtype of :c:type:`PyObject` represents a Python list object."
msgstr ""

# e7ac3c9529e749069cd1e4b7882ec5dc
#: ../src/Doc/c-api/list.rst:18
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python list type.  "
"This is the same object as ``list`` in the Python layer."
msgstr ""

# fbbef5cd4a6e48d58ed50305c37723d0
#: ../src/Doc/c-api/list.rst:24
msgid ""
"Return true if *p* is a list object or an instance of a subtype of the list "
"type."
msgstr ""

# 714b9f52d34e4845b1cf42d3c4fcae6c
#: ../src/Doc/c-api/list.rst:33
msgid ""
"Return true if *p* is a list object, but not an instance of a subtype of the "
"list type."
msgstr ""

# 1340479f768f414e8bbb027f62fab012
#: ../src/Doc/c-api/list.rst:41
msgid "Return a new list of length *len* on success, or *NULL* on failure."
msgstr ""

# 3f35fec05e824436b7bd24bf135858ef
#: ../src/Doc/c-api/list.rst:45
msgid ""
"If *len* is greater than zero, the returned list object's items are set to "
"``NULL``.  Thus you cannot use abstract API functions such as :c:func:"
"`PySequence_SetItem`  or expose the object to Python code before setting all "
"items to a real object with :c:func:`PyList_SetItem`."
msgstr ""

# 5b8134c3b5454953b99b03130658fa1f
#: ../src/Doc/c-api/list.rst:59
msgid ""
"Return the length of the list object in *list*; this is equivalent to ``len"
"(list)`` on a list object."
msgstr ""

# eacfcb5cf38044a9b4f77fbe7680c180
#: ../src/Doc/c-api/list.rst:69
msgid "Macro form of :c:func:`PyList_Size` without error checking."
msgstr ""

# fac70d05952e45f2bc65491611a3d3ee
#: ../src/Doc/c-api/list.rst:78
msgid ""
"Return the object at position *index* in the list pointed to by *list*.  The "
"position must be positive, indexing from the end of the list is not "
"supported.  If *index* is out of bounds, return *NULL* and set an :exc:"
"`IndexError` exception."
msgstr ""

# b62d70957a424df88ceacad98d530546
#: ../src/Doc/c-api/list.rst:90
msgid "Macro form of :c:func:`PyList_GetItem` without error checking."
msgstr ""

# 0a1a8046d270461fa6129d70e715aeb7
#: ../src/Doc/c-api/list.rst:99
msgid ""
"Set the item at index *index* in list to *item*.  Return ``0`` on success or "
"``-1`` on failure."
msgstr ""

# 6d84abae7dbf4ba581caef9f9ac6bc94
#: ../src/Doc/c-api/list.rst:104
msgid ""
"This function \"steals\" a reference to *item* and discards a reference to "
"an item already in the list at the affected position."
msgstr ""

# 2f39b97d76154311bd8d834a93e3a49e
#: ../src/Doc/c-api/list.rst:114
msgid ""
"Macro form of :c:func:`PyList_SetItem` without error checking. This is "
"normally only used to fill in new lists where there is no previous content."
msgstr ""

# 737fff88a6ea4d538e996d99f828ac40
#: ../src/Doc/c-api/list.rst:119
msgid ""
"This macro \"steals\" a reference to *item*, and, unlike :c:func:"
"`PyList_SetItem`, does *not* discard a reference to any item that it being "
"replaced; any reference in *list* at position *i* will be leaked."
msgstr ""

# f0c9cd6caac14127be36088eeb5f9c79
#: ../src/Doc/c-api/list.rst:131
msgid ""
"Insert the item *item* into list *list* in front of index *index*.  Return "
"``0`` if successful; return ``-1`` and set an exception if unsuccessful. "
"Analogous to ``list.insert(index, item)``."
msgstr ""

# d9cb5298155a4a259b9eb6f9a9198883
#: ../src/Doc/c-api/list.rst:142
msgid ""
"Append the object *item* at the end of list *list*. Return ``0`` if "
"successful; return ``-1`` and set an exception if unsuccessful.  Analogous "
"to ``list.append(item)``."
msgstr ""

# 41451c2d51224e7b964837dfbf87ab78
#: ../src/Doc/c-api/list.rst:149
msgid ""
"Return a list of the objects in *list* containing the objects *between* "
"*low* and *high*.  Return *NULL* and set an exception if unsuccessful.  "
"Analogous to ``list[low:high]``.  Negative indices, as when slicing from "
"Python, are not supported."
msgstr ""

# 09c3d9ddc3644dfc8ad62ac94611f860
#: ../src/Doc/c-api/list.rst:161
msgid ""
"Set the slice of *list* between *low* and *high* to the contents of "
"*itemlist*.  Analogous to ``list[low:high] = itemlist``. The *itemlist* may "
"be *NULL*, indicating the assignment of an empty list (slice deletion). "
"Return ``0`` on success, ``-1`` on failure.  Negative indices, as when "
"slicing from Python, are not supported."
msgstr ""

# 27f1c1b7c7374c589ae9260746616be6
#: ../src/Doc/c-api/list.rst:174
msgid ""
"Sort the items of *list* in place.  Return ``0`` on success, ``-1`` on "
"failure.  This is equivalent to ``list.sort()``."
msgstr ""

# 04081ee1eafe42f182a3a1177c7ceb15
#: ../src/Doc/c-api/list.rst:180
msgid ""
"Reverse the items of *list* in place.  Return ``0`` on success, ``-1`` on "
"failure.  This is the equivalent of ``list.reverse()``."
msgstr ""

# 7425ef9253bb4635ab84ca8f19e09256
#: ../src/Doc/c-api/list.rst:188
msgid ""
"Return a new tuple object containing the contents of *list*; equivalent to "
"``tuple(list)``."
msgstr ""

#: ../src/Doc/c-api/long.rst:6
#, fuzzy
msgid "Long Integer Objects"
msgstr "Autres Objets"

# 60bf1014fe9c47c697de92639890062b
#: ../src/Doc/c-api/long.rst:13
msgid ""
"This subtype of :c:type:`PyObject` represents a Python long integer object."
msgstr ""

# aa567d93d66c4759b52268ac304208fe
#: ../src/Doc/c-api/long.rst:20
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python long integer "
"type. This is the same object as ``long`` and ``types.LongType``."
msgstr ""

# d423d20c767c461884d1f7b685b8df3a
#: ../src/Doc/c-api/long.rst:26
msgid ""
"Return true if its argument is a :c:type:`PyLongObject` or a subtype of :c:"
"type:`PyLongObject`."
msgstr ""

# 189e874b93724c288906696ba7be87fa
#: ../src/Doc/c-api/long.rst:35
msgid ""
"Return true if its argument is a :c:type:`PyLongObject`, but not a subtype "
"of :c:type:`PyLongObject`."
msgstr ""

# 40873935ebbf41f68afc6652b648c4f9
#: ../src/Doc/c-api/long.rst:43
msgid ""
"Return a new :c:type:`PyLongObject` object from *v*, or *NULL* on failure."
msgstr ""

# af5a90299112435bb2b8d732ba4d7910
#: ../src/Doc/c-api/long.rst:48
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`unsigned long`, "
"or *NULL* on failure."
msgstr ""

# 199987a9936d45b09554e11afef82b52
#: ../src/Doc/c-api/long.rst:54
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`Py_ssize_t`, or "
"*NULL* on failure."
msgstr ""

# 3515f14497b54a6ead833e7e5c54d897
#: ../src/Doc/c-api/long.rst:62
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`size_t`, or "
"*NULL* on failure."
msgstr ""

# 307d0545e224491d89bc54c3648fc5d8
# afb09d54766249b39d7b6ac8b29b1792
#: ../src/Doc/c-api/long.rst:70 ../src/Doc/c-api/long.rst:78
msgid ""
"Return a new :c:type:`PyLongObject` object with a value of *v*, or *NULL* on "
"failure."
msgstr ""

# f89813fed66648bf9e85eeea9a946736
#: ../src/Doc/c-api/long.rst:86
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`long long`, or "
"*NULL* on failure."
msgstr ""

# 48358059032e4bc1894f606d68dead61
#: ../src/Doc/c-api/long.rst:92
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`unsigned long "
"long`, or *NULL* on failure."
msgstr ""

# 0788ccb8daad4d5fbcbd297c6699c5d8
#: ../src/Doc/c-api/long.rst:98
msgid ""
"Return a new :c:type:`PyLongObject` object from the integer part of *v*, or "
"*NULL* on failure."
msgstr ""

# b8b21a0226154bfdb081e0381187e3b2
#: ../src/Doc/c-api/long.rst:104
msgid ""
"Return a new :c:type:`PyLongObject` based on the string value in *str*, "
"which is interpreted according to the radix in *base*.  If *pend* is non-"
"*NULL*, *\\*pend* will point to the first character in *str* which follows "
"the representation of the number.  If *base* is ``0``, the radix will be "
"determined based on the leading characters of *str*: if *str* starts with "
"``'0x'`` or ``'0X'``, radix 16 will be used; if *str* starts with ``'0'``, "
"radix 8 will be used; otherwise radix 10 will be used.  If *base* is not "
"``0``, it must be between ``2`` and ``36``, inclusive.  Leading spaces are "
"ignored.  If there are no digits, :exc:`ValueError` will be raised."
msgstr ""

# b37b256053be4d8ba26e85468fc3014d
#: ../src/Doc/c-api/long.rst:117
msgid ""
"Convert a sequence of Unicode digits to a Python long integer value.  The "
"first parameter, *u*, points to the first character of the Unicode string, "
"*length* gives the number of characters, and *base* is the radix for the "
"conversion.  The radix must be in the range [2, 36]; if it is out of range, :"
"exc:`ValueError` will be raised."
msgstr ""

# 6a301d3d013945a2a2c668b00e29a01e
#: ../src/Doc/c-api/long.rst:132
msgid ""
"Create a Python integer or long integer from the pointer *p*. The pointer "
"value can be retrieved from the resulting value using :c:func:"
"`PyLong_AsVoidPtr`."
msgstr ""

# b783699cda84438cbc264a1c50bf86c2
#: ../src/Doc/c-api/long.rst:147
msgid ""
"Return a C :c:type:`long` representation of the contents of *pylong*.  If "
"*pylong* is greater than :const:`LONG_MAX`, an :exc:`OverflowError` is "
"raised and ``-1`` will be returned."
msgstr ""

# f2106e5bb6a645909ddb7b9941583924
#: ../src/Doc/c-api/long.rst:154
msgid ""
"Return a C :c:type:`long` representation of the contents of *pylong*.  If "
"*pylong* is greater than :const:`LONG_MAX` or less than :const:`LONG_MIN`, "
"set *\\*overflow* to ``1`` or ``-1``, respectively, and return ``-1``; "
"otherwise, set *\\*overflow* to ``0``.  If any other exception occurs (for "
"example a TypeError or MemoryError), then ``-1`` will be returned and *"
"\\*overflow* will be ``0``."
msgstr ""

# ef74eeffdbd24712bef856028a7f7ea9
#: ../src/Doc/c-api/long.rst:167
msgid ""
"Return a C :c:type:`long long` representation of the contents of *pylong*.  "
"If *pylong* is greater than :const:`PY_LLONG_MAX` or less than :const:"
"`PY_LLONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively, and "
"return ``-1``; otherwise, set *\\*overflow* to ``0``.  If any other "
"exception occurs (for example a TypeError or MemoryError), then ``-1`` will "
"be returned and *\\*overflow* will be ``0``."
msgstr ""

# 5a471feb1ba64ef2902674b770599e77
#: ../src/Doc/c-api/long.rst:184
msgid ""
"Return a C :c:type:`Py_ssize_t` representation of the contents of *pylong*.  "
"If *pylong* is greater than :const:`PY_SSIZE_T_MAX`, an :exc:`OverflowError` "
"is raised and ``-1`` will be returned."
msgstr ""

# 931432da54ad4b0aae14ef80aa1ea289
#: ../src/Doc/c-api/long.rst:197
msgid ""
"Return a C :c:type:`unsigned long` representation of the contents of "
"*pylong*. If *pylong* is greater than :const:`ULONG_MAX`, an :exc:"
"`OverflowError` is raised."
msgstr ""

# 735f14399dcd42d09b467e97fb17a6a5
#: ../src/Doc/c-api/long.rst:207
msgid ""
"Return a :c:type:`Py_ssize_t` representation of the contents of *pylong*.  "
"If *pylong* is greater than :const:`PY_SSIZE_T_MAX`, an :exc:`OverflowError` "
"is raised."
msgstr ""

# 833329ac8561486384fc2768b48aea16
#: ../src/Doc/c-api/long.rst:219
msgid ""
"Return a C :c:type:`long long` from a Python long integer.  If *pylong* "
"cannot be represented as a :c:type:`long long`, an :exc:`OverflowError` is "
"raised and ``-1`` is returned."
msgstr ""

# e74c4ab236874203a0818b3357158e9b
#: ../src/Doc/c-api/long.rst:231
msgid ""
"Return a C :c:type:`unsigned long long` from a Python long integer. If "
"*pylong* cannot be represented as an :c:type:`unsigned long long`, an :exc:"
"`OverflowError` is raised and ``(unsigned long long)-1`` is returned."
msgstr ""

# 96c561da285e447d926e77a221135dac
#: ../src/Doc/c-api/long.rst:245
msgid ""
"Return a C :c:type:`unsigned long` from a Python long integer, without "
"checking for overflow."
msgstr ""

# 9742423876804498959284c3b6fecac8
#: ../src/Doc/c-api/long.rst:253
msgid ""
"Return a C :c:type:`unsigned long long` from a Python long integer, without "
"checking for overflow."
msgstr ""

# 29b5c871c79f4138b66cb7f95afe675b
#: ../src/Doc/c-api/long.rst:261
msgid ""
"Return a C :c:type:`double` representation of the contents of *pylong*.  If "
"*pylong* cannot be approximately represented as a :c:type:`double`, an :exc:"
"`OverflowError` exception is raised and ``-1.0`` will be returned."
msgstr ""

# ef76cf50d7e0426ba76f0936a3239281
#: ../src/Doc/c-api/long.rst:268
msgid ""
"Convert a Python integer or long integer *pylong* to a C :c:type:`void` "
"pointer. If *pylong* cannot be converted, an :exc:`OverflowError` will be "
"raised.  This is only assured to produce a usable :c:type:`void` pointer for "
"values created with :c:func:`PyLong_FromVoidPtr`."
msgstr ""

#: ../src/Doc/c-api/mapping.rst:6
msgid "Mapping Protocol"
msgstr ""

# 68b1233907be43ec809100ce1a39f816
#: ../src/Doc/c-api/mapping.rst:11
msgid ""
"Return ``1`` if the object provides mapping protocol, and ``0`` otherwise.  "
"This function always succeeds."
msgstr ""

# 8a8559500ff941569304a716d892ad1a
#: ../src/Doc/c-api/mapping.rst:20
msgid ""
"Returns the number of keys in object *o* on success, and ``-1`` on failure.  "
"For objects that do not provide mapping protocol, this is equivalent to the "
"Python expression ``len(o)``."
msgstr ""

# 84444e7d42614b68ac1991547f55d64c
# 3c20011771b141259ad063a450d5093e
#: ../src/Doc/c-api/mapping.rst:31 ../src/Doc/c-api/mapping.rst:37
msgid ""
"Remove the mapping for object *key* from the object *o*. Return ``-1`` on "
"failure.  This is equivalent to the Python statement ``del o[key]``."
msgstr ""

# 93a1c0b5295c4526939a72212046977f
#: ../src/Doc/c-api/mapping.rst:43
msgid ""
"On success, return ``1`` if the mapping object has the key *key* and ``0`` "
"otherwise.  This is equivalent to ``o[key]``, returning ``True`` on success "
"and ``False`` on an exception.  This function always succeeds."
msgstr ""

# b3a6509347794e94877019e58c480b90
#: ../src/Doc/c-api/mapping.rst:50
msgid ""
"Return ``1`` if the mapping object has the key *key* and ``0`` otherwise. "
"This is equivalent to ``o[key]``, returning ``True`` on success and "
"``False`` on an exception.  This function always succeeds."
msgstr ""

# 89c008c622c547c7b52e5905afd8b4ab
#: ../src/Doc/c-api/mapping.rst:57
msgid ""
"On success, return a list of the keys in object *o*.  On failure, return "
"*NULL*. This is equivalent to the Python expression ``o.keys()``."
msgstr ""

# 28ca4cd99bae4ee6bc2131207b22fb86
#: ../src/Doc/c-api/mapping.rst:63
msgid ""
"On success, return a list of the values in object *o*.  On failure, return "
"*NULL*. This is equivalent to the Python expression ``o.values()``."
msgstr ""

# f65b716db6904df28a0b292ee46940db
#: ../src/Doc/c-api/mapping.rst:69
msgid ""
"On success, return a list of the items in object *o*, where each item is a "
"tuple containing a key-value pair.  On failure, return *NULL*. This is "
"equivalent to the Python expression ``o.items()``."
msgstr ""

# 417448df1a1a4b70ba769baf7a0a4ec3
# 75eac34ae95c4519a07b33b0b5a0af5c
#: ../src/Doc/c-api/mapping.rst:76 ../src/Doc/c-api/object.rst:364
msgid ""
"Return element of *o* corresponding to the object *key* or *NULL* on "
"failure. This is the equivalent of the Python expression ``o[key]``."
msgstr ""

# 8d2b532cb2a846b7886e4081eddef7d4
#: ../src/Doc/c-api/mapping.rst:82
msgid ""
"Map the object *key* to the value *v* in object *o*. Returns ``-1`` on "
"failure. This is the equivalent of the Python statement ``o[key] = v``."
msgstr ""

#: ../src/Doc/c-api/marshal.rst:6
msgid "Data marshalling support"
msgstr ""

#: ../src/Doc/c-api/marshal.rst:8
msgid ""
"These routines allow C code to work with serialized objects using the same "
"data format as the :mod:`marshal` module.  There are functions to write data "
"into the serialization format, and additional functions that can be used to "
"read the data back.  Files used to store marshalled data must be opened in "
"binary mode."
msgstr ""

#: ../src/Doc/c-api/marshal.rst:14
msgid "Numeric values are stored with the least significant byte first."
msgstr ""

# 0954d043bd9a4b01aeb6e29cb7f6e980
#: ../src/Doc/c-api/marshal.rst:16
msgid ""
"The module supports two versions of the data format: version 0 is the "
"historical version, version 1 (new in Python 2.4) shares interned strings in "
"the file, and upon unmarshalling.  Version 2 (new in Python 2.5) uses a "
"binary format for floating point numbers.  *Py_MARSHAL_VERSION* indicates "
"the current file format (currently 2)."
msgstr ""

# 25e1d82dbb9d4c91b00e8fa8d243ff21
#: ../src/Doc/c-api/marshal.rst:25
msgid ""
"Marshal a :c:type:`long` integer, *value*, to *file*.  This will only write "
"the least-significant 32 bits of *value*; regardless of the size of the "
"native :c:type:`long` type."
msgstr ""

# 1c14437136b54c0da99db0e064508ab0
#: ../src/Doc/c-api/marshal.rst:35
msgid "Marshal a Python object, *value*, to *file*."
msgstr ""

# 65adccde7d6043878f73ac556d989339
#: ../src/Doc/c-api/marshal.rst:43
msgid ""
"Return a string object containing the marshalled representation of *value*."
msgstr ""

#: ../src/Doc/c-api/marshal.rst:49
msgid "The following functions allow marshalled values to be read back in."
msgstr ""

#: ../src/Doc/c-api/marshal.rst:51
msgid ""
"XXX What about error detection?  It appears that reading past the end of the "
"file will always result in a negative numeric value (where that's relevant), "
"but it's not clear that negative values won't be handled properly when "
"there's no error.  What's the right way to tell? Should only non-negative "
"values be written using these routines?"
msgstr ""

# e76322330dbf4255b0d0c4a2d6c8ec81
#: ../src/Doc/c-api/marshal.rst:60
msgid ""
"Return a C :c:type:`long` from the data stream in a :c:type:`FILE\\*` opened "
"for reading.  Only a 32-bit value can be read in using this function, "
"regardless of the native size of :c:type:`long`."
msgstr ""

# 1c953348b32645c880c46ab96d2c04cd
#: ../src/Doc/c-api/marshal.rst:67
msgid ""
"Return a C :c:type:`short` from the data stream in a :c:type:`FILE\\*` "
"opened for reading.  Only a 16-bit value can be read in using this function, "
"regardless of the native size of :c:type:`short`."
msgstr ""

# 4e36309e71f7468fa848710023a06a71
#: ../src/Doc/c-api/marshal.rst:74
msgid ""
"Return a Python object from the data stream in a :c:type:`FILE\\*` opened "
"for reading.  On error, sets the appropriate exception (:exc:`EOFError` or :"
"exc:`TypeError`) and returns *NULL*."
msgstr ""

# fb69a6a57ca4412393464b1f3345ec94
#: ../src/Doc/c-api/marshal.rst:81
msgid ""
"Return a Python object from the data stream in a :c:type:`FILE\\*` opened "
"for reading.  Unlike :c:func:`PyMarshal_ReadObjectFromFile`, this function "
"assumes that no further objects will be read from the file, allowing it to "
"aggressively load file data into memory so that the de-serialization can "
"operate from data in memory rather than reading a byte at a time from the "
"file.  Only use these variant if you are certain that you won't be reading "
"anything else from the file.  On error, sets the appropriate exception (:exc:"
"`EOFError` or :exc:`TypeError`) and returns *NULL*."
msgstr ""

# 4306c0decd6d4efca63dd40526a9673a
#: ../src/Doc/c-api/marshal.rst:93
msgid ""
"Return a Python object from the data stream in a character buffer containing "
"*len* bytes pointed to by *string*.  On error, sets the appropriate "
"exception (:exc:`EOFError` or :exc:`TypeError`) and returns *NULL*."
msgstr ""

#: ../src/Doc/c-api/memory.rst:8
msgid "Memory Management"
msgstr ""

#: ../src/Doc/c-api/memory.rst:17
msgid "Overview"
msgstr ""

#: ../src/Doc/c-api/memory.rst:19
msgid ""
"Memory management in Python involves a private heap containing all Python "
"objects and data structures. The management of this private heap is ensured "
"internally by the *Python memory manager*.  The Python memory manager has "
"different components which deal with various dynamic storage management "
"aspects, like sharing, segmentation, preallocation or caching."
msgstr ""

#: ../src/Doc/c-api/memory.rst:25
msgid ""
"At the lowest level, a raw memory allocator ensures that there is enough "
"room in the private heap for storing all Python-related data by interacting "
"with the memory manager of the operating system. On top of the raw memory "
"allocator, several object-specific allocators operate on the same heap and "
"implement distinct memory management policies adapted to the peculiarities "
"of every object type. For example, integer objects are managed differently "
"within the heap than strings, tuples or dictionaries because integers imply "
"different storage requirements and speed/space tradeoffs. The Python memory "
"manager thus delegates some of the work to the object-specific allocators, "
"but ensures that the latter operate within the bounds of the private heap."
msgstr ""

#: ../src/Doc/c-api/memory.rst:36
msgid ""
"It is important to understand that the management of the Python heap is "
"performed by the interpreter itself and that the user has no control over "
"it, even if she regularly manipulates object pointers to memory blocks "
"inside that heap.  The allocation of heap space for Python objects and other "
"internal buffers is performed on demand by the Python memory manager through "
"the Python/C API functions listed in this document."
msgstr ""

# f94896d7eadd430bad1a6603acdc6aef
#: ../src/Doc/c-api/memory.rst:49
msgid ""
"To avoid memory corruption, extension writers should never try to operate on "
"Python objects with the functions exported by the C library: :c:func:"
"`malloc`, :c:func:`calloc`, :c:func:`realloc` and :c:func:`free`.  This will "
"result in  mixed calls between the C allocator and the Python memory manager "
"with fatal consequences, because they implement different algorithms and "
"operate on different heaps.  However, one may safely allocate and release "
"memory blocks with the C library allocator for individual purposes, as shown "
"in the following example::"
msgstr ""

#: ../src/Doc/c-api/memory.rst:68
msgid ""
"In this example, the memory request for the I/O buffer is handled by the C "
"library allocator. The Python memory manager is involved only in the "
"allocation of the string object returned as a result."
msgstr ""

#: ../src/Doc/c-api/memory.rst:72
msgid ""
"In most situations, however, it is recommended to allocate memory from the "
"Python heap specifically because the latter is under control of the Python "
"memory manager. For example, this is required when the interpreter is "
"extended with new object types written in C. Another reason for using the "
"Python heap is the desire to *inform* the Python memory manager about the "
"memory needs of the extension module. Even when the requested memory is used "
"exclusively for internal, highly-specific purposes, delegating all memory "
"requests to the Python memory manager causes the interpreter to have a more "
"accurate image of its memory footprint as a whole. Consequently, under "
"certain circumstances, the Python memory manager may or may not trigger "
"appropriate actions, like garbage collection, memory compaction or other "
"preventive procedures. Note that by using the C library allocator as shown "
"in the previous example, the allocated memory for the I/O buffer escapes "
"completely the Python memory manager."
msgstr ""

#: ../src/Doc/c-api/memory.rst:90
msgid "Memory Interface"
msgstr ""

#: ../src/Doc/c-api/memory.rst:92
msgid ""
"The following function sets, modeled after the ANSI C standard, but "
"specifying behavior when requesting zero bytes, are available for allocating "
"and releasing memory from the Python heap:"
msgstr ""

# e365e78806414590af7d28599a2a42b5
#: ../src/Doc/c-api/memory.rst:99
msgid ""
"Allocates *n* bytes and returns a pointer of type :c:type:`void\\*` to the "
"allocated memory, or *NULL* if the request fails. Requesting zero bytes "
"returns a distinct non-*NULL* pointer if possible, as if ``PyMem_Malloc(1)`` "
"had been called instead. The memory will not have been initialized in any "
"way."
msgstr ""

# b4fbb653d93a49ad90d6978dbc490403
#: ../src/Doc/c-api/memory.rst:107
msgid ""
"Resizes the memory block pointed to by *p* to *n* bytes. The contents will "
"be unchanged to the minimum of the old and the new sizes. If *p* is *NULL*, "
"the call is equivalent to ``PyMem_Malloc(n)``; else if *n* is equal to zero, "
"the memory block is resized but is not freed, and the returned pointer is "
"non-*NULL*.  Unless *p* is *NULL*, it must have been returned by a previous "
"call to :c:func:`PyMem_Malloc` or :c:func:`PyMem_Realloc`. If the request "
"fails, :c:func:`PyMem_Realloc` returns *NULL* and *p* remains a valid "
"pointer to the previous memory area."
msgstr ""

# dfb171bf6f544d6499a77bfc4d645df7
#: ../src/Doc/c-api/memory.rst:119
msgid ""
"Frees the memory block pointed to by *p*, which must have been returned by a "
"previous call to :c:func:`PyMem_Malloc` or :c:func:`PyMem_Realloc`.  "
"Otherwise, or if ``PyMem_Free(p)`` has been called before, undefined "
"behavior occurs. If *p* is *NULL*, no operation is performed."
msgstr ""

#: ../src/Doc/c-api/memory.rst:124
msgid ""
"The following type-oriented macros are provided for convenience.  Note  that "
"*TYPE* refers to any C type."
msgstr ""

# ad9a8acaed9e42c88c190dc1473531b3
#: ../src/Doc/c-api/memory.rst:130
msgid ""
"Same as :c:func:`PyMem_Malloc`, but allocates ``(n * sizeof(TYPE))`` bytes "
"of memory.  Returns a pointer cast to :c:type:`TYPE\\*`.  The memory will "
"not have been initialized in any way."
msgstr ""

# d948aa3f38e1467a94ca0d1d9c08de60
#: ../src/Doc/c-api/memory.rst:137
msgid ""
"Same as :c:func:`PyMem_Realloc`, but the memory block is resized to ``(n * "
"sizeof(TYPE))`` bytes.  Returns a pointer cast to :c:type:`TYPE\\*`. On "
"return, *p* will be a pointer to the new memory area, or *NULL* in the event "
"of failure.  This is a C preprocessor macro; p is always reassigned.  Save "
"the original value of p to avoid losing memory when handling errors."
msgstr ""

# 58e998d0dacb427aab5e44d4dd5cdf1c
#: ../src/Doc/c-api/memory.rst:146
msgid "Same as :c:func:`PyMem_Free`."
msgstr ""

#: ../src/Doc/c-api/memory.rst:148
msgid ""
"In addition, the following macro sets are provided for calling the Python "
"memory allocator directly, without involving the C API functions listed "
"above. However, note that their use does not preserve binary compatibility "
"across Python versions and is therefore deprecated in extension modules."
msgstr ""

# c7d9fb7635394d0d96b7f30b67d3b3db
#: ../src/Doc/c-api/memory.rst:153
msgid ":c:func:`PyMem_MALLOC`, :c:func:`PyMem_REALLOC`, :c:func:`PyMem_FREE`."
msgstr ""

# 34ff4144f98047c3976f1154df3620bb
#: ../src/Doc/c-api/memory.rst:155
msgid ":c:func:`PyMem_NEW`, :c:func:`PyMem_RESIZE`, :c:func:`PyMem_DEL`."
msgstr ""

#: ../src/Doc/c-api/memory.rst:161
msgid "Examples"
msgstr ""

#: ../src/Doc/c-api/memory.rst:163
msgid ""
"Here is the example from section :ref:`memoryoverview`, rewritten so that "
"the I/O buffer is allocated from the Python heap by using the first function "
"set::"
msgstr ""

#: ../src/Doc/c-api/memory.rst:176
msgid "The same code using the type-oriented function set::"
msgstr ""

#: ../src/Doc/c-api/memory.rst:188
msgid ""
"Note that in the two examples above, the buffer is always manipulated via "
"functions belonging to the same set. Indeed, it is required to use the same "
"memory API family for a given memory block, so that the risk of mixing "
"different allocators is reduced to a minimum. The following code sequence "
"contains two errors, one of which is labeled as *fatal* because it mixes two "
"different allocators operating on different heaps. ::"
msgstr ""

# 23b2455818744877b2e3db137aa9b51e
#: ../src/Doc/c-api/memory.rst:203
msgid ""
"In addition to the functions aimed at handling raw memory blocks from the "
"Python heap, objects in Python are allocated and released with :c:func:"
"`PyObject_New`, :c:func:`PyObject_NewVar` and :c:func:`PyObject_Del`."
msgstr ""

#: ../src/Doc/c-api/memory.rst:207
msgid ""
"These will be explained in the next chapter on defining and implementing new "
"object types in C."
msgstr ""

#: ../src/Doc/c-api/method.rst:6
msgid "Method Objects"
msgstr ""

# 811b9dbe89cd43c9a77039d2767c5b7a
#: ../src/Doc/c-api/method.rst:10
msgid ""
"There are some useful functions that are useful for working with method "
"objects."
msgstr ""

# 0695465ee3c54c5c8f714a1835990088
#: ../src/Doc/c-api/method.rst:17
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python method type.  "
"This is exposed to Python programs as ``types.MethodType``."
msgstr ""

# d006888a04834818a5b51cc3ffa54392
#: ../src/Doc/c-api/method.rst:23
msgid ""
"Return true if *o* is a method object (has type :c:data:`PyMethod_Type`).  "
"The parameter must not be *NULL*."
msgstr ""

# 89b11e826b7941399161e516dd7635b6
#: ../src/Doc/c-api/method.rst:29
msgid ""
"Return a new method object, with *func* being any callable object; this is "
"the function that will be called when the method is called.  If this method "
"should be bound to an instance, *self* should be the instance and *class* "
"should be the class of *self*, otherwise *self* should be *NULL* and *class* "
"should be the class which provides the unbound method.."
msgstr ""

# 5fbe0a4da5174e29a551f2fad11ffd30
#: ../src/Doc/c-api/method.rst:38
msgid ""
"Return the class object from which the method *meth* was created; if this "
"was created from an instance, it will be the class of the instance."
msgstr ""

# ffae3d34e1974b3b9000e2aa9a4bf5ce
#: ../src/Doc/c-api/method.rst:44
msgid "Macro version of :c:func:`PyMethod_Class` which avoids error checking."
msgstr ""

# 018b4839648d42e9a9e8e8d570a916cd
#: ../src/Doc/c-api/method.rst:49
msgid "Return the function object associated with the method *meth*."
msgstr ""

# 0a1755913efc44e8abe0f950441cc6ec
#: ../src/Doc/c-api/method.rst:54
msgid ""
"Macro version of :c:func:`PyMethod_Function` which avoids error checking."
msgstr ""

# cccc2f19ccef40c6b17bdb7ee7507eba
#: ../src/Doc/c-api/method.rst:59
msgid ""
"Return the instance associated with the method *meth* if it is bound, "
"otherwise return *NULL*."
msgstr ""

# 919b5f4c00364488acffaf93997115f0
#: ../src/Doc/c-api/method.rst:65
msgid "Macro version of :c:func:`PyMethod_Self` which avoids error checking."
msgstr ""

# ac9d43750d6c40218cd278ba7cb59620
# 9a1a5e1cf16e41df8b8602cd7fd4a0fb
# cd386b54165443249fcbd72727cec331
#: ../src/Doc/c-api/method.rst:70 ../src/Doc/c-api/tuple.rst:162
#: ../src/Doc/c-api/unicode.rst:104
msgid "Clear the free list. Return the total number of freed items."
msgstr ""

#: ../src/Doc/c-api/module.rst:6
msgid "Module Objects"
msgstr ""

#: ../src/Doc/c-api/module.rst:10
msgid "There are only a few functions special to module objects."
msgstr ""

# 3f74ac315e26498387f96c7213a926a5
#: ../src/Doc/c-api/module.rst:17
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python module type.  "
"This is exposed to Python programs as ``types.ModuleType``."
msgstr ""

# 35dec4d2f0a84c198df082c7cd630aca
#: ../src/Doc/c-api/module.rst:23
msgid "Return true if *p* is a module object, or a subtype of a module object."
msgstr ""

# 2344c401409e4ab69fce031234a2bd83
#: ../src/Doc/c-api/module.rst:31
msgid ""
"Return true if *p* is a module object, but not a subtype of :c:data:"
"`PyModule_Type`."
msgstr ""

# 9a008c3d749b4953bda0682a44a8c0db
#: ../src/Doc/c-api/module.rst:44
msgid ""
"Return a new module object with the :attr:`__name__` attribute set to "
"*name*. Only the module's :attr:`__doc__` and :attr:`__name__` attributes "
"are filled in; the caller is responsible for providing a :attr:`__file__` "
"attribute."
msgstr ""

# dd41f0d353d247a39969a3d22b85c692
#: ../src/Doc/c-api/module.rst:53
msgid ""
"Return the dictionary object that implements *module*'s namespace; this "
"object is the same as the :attr:`__dict__` attribute of the module object.  "
"This function never fails.  It is recommended extensions use other :c:func:"
"`PyModule_\\*` and :c:func:`PyObject_\\*` functions rather than directly "
"manipulate a module's :attr:`__dict__`."
msgstr ""

# 58b6cb92741e4fc0a517bd7afa6df205
#: ../src/Doc/c-api/module.rst:66
msgid ""
"Return *module*'s :attr:`__name__` value.  If the module does not provide "
"one, or if it is not a string, :exc:`SystemError` is raised and *NULL* is "
"returned."
msgstr ""

# 9d91d87c2eff4dcea80054d7dcad3d5a
#: ../src/Doc/c-api/module.rst:76
msgid ""
"Return the name of the file from which *module* was loaded using *module*'s :"
"attr:`__file__` attribute.  If this is not defined, or if it is not a "
"string, raise :exc:`SystemError` and return *NULL*."
msgstr ""

# 31bf3d311bd34c6fbdfe02645e8ef8bb
#: ../src/Doc/c-api/module.rst:83
msgid ""
"Add an object to *module* as *name*.  This is a convenience function which "
"can be used from the module's initialization function.  This steals a "
"reference to *value*.  Return ``-1`` on error, ``0`` on success."
msgstr ""

# 92f9dbc97f5d4fc6bb4f59b3021bb971
#: ../src/Doc/c-api/module.rst:92
msgid ""
"Add an integer constant to *module* as *name*.  This convenience function "
"can be used from the module's initialization function. Return ``-1`` on "
"error, ``0`` on success."
msgstr ""

# 06483d676dfa4570b91ec38ca6991baf
#: ../src/Doc/c-api/module.rst:101
msgid ""
"Add a string constant to *module* as *name*.  This convenience function can "
"be used from the module's initialization function.  The string *value* must "
"be null-terminated.  Return ``-1`` on error, ``0`` on success."
msgstr ""

# 5b0ee55b545841618180245f724568b4
#: ../src/Doc/c-api/module.rst:109
msgid ""
"Add an int constant to *module*. The name and the value are taken from "
"*macro*. For example ``PyModule_AddIntMacro(module, AF_INET)`` adds the int "
"constant *AF_INET* with the value of *AF_INET* to *module*. Return ``-1`` on "
"error, ``0`` on success."
msgstr ""

# 4de5197ba3a745c7abed6dc7018030f0
#: ../src/Doc/c-api/module.rst:118
msgid "Add a string constant to *module*."
msgstr ""

#: ../src/Doc/c-api/none.rst:6
msgid "The None Object"
msgstr ""

# b82aee3809994590af1da2595304f26b
#: ../src/Doc/c-api/none.rst:10
msgid ""
"Note that the :c:type:`PyTypeObject` for ``None`` is not directly exposed in "
"the Python/C API.  Since ``None`` is a singleton, testing for object "
"identity (using ``==`` in C) is sufficient. There is no :c:func:"
"`PyNone_Check` function for the same reason."
msgstr ""

# 3216606222a84318ac2d3dcc7e79bdf0
#: ../src/Doc/c-api/none.rst:18
msgid ""
"The Python ``None`` object, denoting lack of value.  This object has no "
"methods. It needs to be treated just like any other object with respect to "
"reference counts."
msgstr ""

# 2d915a1862e9485da014b11f6dfd63fb
#: ../src/Doc/c-api/none.rst:25
msgid "Properly handle returning :c:data:`Py_None` from within a C function."
msgstr ""

#: ../src/Doc/c-api/number.rst:6
msgid "Number Protocol"
msgstr ""

# 1aebe1bc3e9a48489ea16a297f426e16
#: ../src/Doc/c-api/number.rst:11
msgid ""
"Returns ``1`` if the object *o* provides numeric protocols, and false "
"otherwise. This function always succeeds."
msgstr ""

# d7918b8f8f9f4b3391082919af9e2fe8
#: ../src/Doc/c-api/number.rst:17
msgid ""
"Returns the result of adding *o1* and *o2*, or *NULL* on failure.  This is "
"the equivalent of the Python expression ``o1 + o2``."
msgstr ""

# b12bb399eeda4915bd278ceb1f6817be
#: ../src/Doc/c-api/number.rst:23
msgid ""
"Returns the result of subtracting *o2* from *o1*, or *NULL* on failure.  "
"This is the equivalent of the Python expression ``o1 - o2``."
msgstr ""

# bdfdcc4378f244a5a9683712b0cf6e9a
#: ../src/Doc/c-api/number.rst:29
msgid ""
"Returns the result of multiplying *o1* and *o2*, or *NULL* on failure.  This "
"is the equivalent of the Python expression ``o1 * o2``."
msgstr ""

# c2c42f5e930340b7935e3b85c4375da1
#: ../src/Doc/c-api/number.rst:35
msgid ""
"Returns the result of dividing *o1* by *o2*, or *NULL* on failure.  This is "
"the equivalent of the Python expression ``o1 / o2``."
msgstr ""

# 60cf2fa2215f4010b23deaede77aa749
#: ../src/Doc/c-api/number.rst:41
msgid ""
"Return the floor of *o1* divided by *o2*, or *NULL* on failure.  This is "
"equivalent to the \"classic\" division of integers."
msgstr ""

# 8819d02a7e394a21be3616886ca13c36
#: ../src/Doc/c-api/number.rst:49
msgid ""
"Return a reasonable approximation for the mathematical value of *o1* divided "
"by *o2*, or *NULL* on failure.  The return value is \"approximate\" because "
"binary floating point numbers are approximate; it is not possible to "
"represent all real numbers in base two.  This function can return a floating "
"point value when passed two integers."
msgstr ""

# 4dcc36658d5144ca832fb3f34076f744
#: ../src/Doc/c-api/number.rst:60
msgid ""
"Returns the remainder of dividing *o1* by *o2*, or *NULL* on failure.  This "
"is the equivalent of the Python expression ``o1 % o2``."
msgstr ""

# cdcf73c667af42b9a1e1abfe88093d46
#: ../src/Doc/c-api/number.rst:68
msgid ""
"See the built-in function :func:`divmod`. Returns *NULL* on failure.  This "
"is the equivalent of the Python expression ``divmod(o1, o2)``."
msgstr ""

# 48ee736031654151af01b26a4f853008
#: ../src/Doc/c-api/number.rst:76
msgid ""
"See the built-in function :func:`pow`. Returns *NULL* on failure.  This is "
"the equivalent of the Python expression ``pow(o1, o2, o3)``, where *o3* is "
"optional. If *o3* is to be ignored, pass :c:data:`Py_None` in its place "
"(passing *NULL* for *o3* would cause an illegal memory access)."
msgstr ""

# 718f9fd944884727a059257519bb2241
#: ../src/Doc/c-api/number.rst:84
msgid ""
"Returns the negation of *o* on success, or *NULL* on failure. This is the "
"equivalent of the Python expression ``-o``."
msgstr ""

# 930cb2d9b7a8493cacd7e8db5bf775aa
#: ../src/Doc/c-api/number.rst:90
msgid ""
"Returns *o* on success, or *NULL* on failure.  This is the equivalent of the "
"Python expression ``+o``."
msgstr ""

# 785026e045494c5887b35f69cefbc588
#: ../src/Doc/c-api/number.rst:98
msgid ""
"Returns the absolute value of *o*, or *NULL* on failure.  This is the "
"equivalent of the Python expression ``abs(o)``."
msgstr ""

# 82b74b169163400fadb1757b0c280e9e
#: ../src/Doc/c-api/number.rst:104
msgid ""
"Returns the bitwise negation of *o* on success, or *NULL* on failure.  This "
"is the equivalent of the Python expression ``~o``."
msgstr ""

# 70596119cd8f492c8aa64c9167d5a63c
#: ../src/Doc/c-api/number.rst:110
msgid ""
"Returns the result of left shifting *o1* by *o2* on success, or *NULL* on "
"failure.  This is the equivalent of the Python expression ``o1 << o2``."
msgstr ""

# 75841635ffaa4e18b9d8efd03d988c14
#: ../src/Doc/c-api/number.rst:116
msgid ""
"Returns the result of right shifting *o1* by *o2* on success, or *NULL* on "
"failure.  This is the equivalent of the Python expression ``o1 >> o2``."
msgstr ""

# d8a42b7e139d4ea9a9d21cf021d07ec2
#: ../src/Doc/c-api/number.rst:122
msgid ""
"Returns the \"bitwise and\" of *o1* and *o2* on success and *NULL* on "
"failure. This is the equivalent of the Python expression ``o1 & o2``."
msgstr ""

# 103feade696540dabc50a0022011a319
#: ../src/Doc/c-api/number.rst:128
msgid ""
"Returns the \"bitwise exclusive or\" of *o1* by *o2* on success, or *NULL* "
"on failure.  This is the equivalent of the Python expression ``o1 ^ o2``."
msgstr ""

# 0d54896b61f446b7b04ed1ad9eb26886
#: ../src/Doc/c-api/number.rst:134
msgid ""
"Returns the \"bitwise or\" of *o1* and *o2* on success, or *NULL* on "
"failure. This is the equivalent of the Python expression ``o1 | o2``."
msgstr ""

# e4816aab8efd43cd87b0356218451c48
#: ../src/Doc/c-api/number.rst:140
msgid ""
"Returns the result of adding *o1* and *o2*, or *NULL* on failure.  The "
"operation is done *in-place* when *o1* supports it.  This is the equivalent "
"of the Python statement ``o1 += o2``."
msgstr ""

# 386508df3d5f4b97b598f5edbc9c1d54
#: ../src/Doc/c-api/number.rst:147
msgid ""
"Returns the result of subtracting *o2* from *o1*, or *NULL* on failure.  The "
"operation is done *in-place* when *o1* supports it.  This is the equivalent "
"of the Python statement ``o1 -= o2``."
msgstr ""

# 62df88ce09754c4aadf826aff9674a32
#: ../src/Doc/c-api/number.rst:154
msgid ""
"Returns the result of multiplying *o1* and *o2*, or *NULL* on failure.  The "
"operation is done *in-place* when *o1* supports it.  This is the equivalent "
"of the Python statement ``o1 *= o2``."
msgstr ""

# 9699631e6a8c42408aed53dd792b0579
#: ../src/Doc/c-api/number.rst:161
msgid ""
"Returns the result of dividing *o1* by *o2*, or *NULL* on failure.  The "
"operation is done *in-place* when *o1* supports it. This is the equivalent "
"of the Python statement ``o1 /= o2``."
msgstr ""

# 7f60fb617dc7461983702389de0a8ce0
#: ../src/Doc/c-api/number.rst:168
msgid ""
"Returns the mathematical floor of dividing *o1* by *o2*, or *NULL* on "
"failure. The operation is done *in-place* when *o1* supports it.  This is "
"the equivalent of the Python statement ``o1 //= o2``."
msgstr ""

# 6c17226b7df944f592850e742927eec8
#: ../src/Doc/c-api/number.rst:177
msgid ""
"Return a reasonable approximation for the mathematical value of *o1* divided "
"by *o2*, or *NULL* on failure.  The return value is \"approximate\" because "
"binary floating point numbers are approximate; it is not possible to "
"represent all real numbers in base two.  This function can return a floating "
"point value when passed two integers.  The operation is done *in-place* when "
"*o1* supports it."
msgstr ""

# a3e7c4c41acf4ec08a3efd46437bc337
#: ../src/Doc/c-api/number.rst:188
msgid ""
"Returns the remainder of dividing *o1* by *o2*, or *NULL* on failure.  The "
"operation is done *in-place* when *o1* supports it.  This is the equivalent "
"of the Python statement ``o1 %= o2``."
msgstr ""

# 7990a07d870648ed88acbe7a41108c0a
#: ../src/Doc/c-api/number.rst:197
msgid ""
"See the built-in function :func:`pow`. Returns *NULL* on failure.  The "
"operation is done *in-place* when *o1* supports it.  This is the equivalent "
"of the Python statement ``o1 **= o2`` when o3 is :c:data:`Py_None`, or an in-"
"place variant of ``pow(o1, o2, o3)`` otherwise. If *o3* is to be ignored, "
"pass :c:data:`Py_None` in its place (passing *NULL* for *o3* would cause an "
"illegal memory access)."
msgstr ""

# f1ea0f77e7b64659afe261d2387542f4
#: ../src/Doc/c-api/number.rst:206
msgid ""
"Returns the result of left shifting *o1* by *o2* on success, or *NULL* on "
"failure.  The operation is done *in-place* when *o1* supports it.  This is "
"the equivalent of the Python statement ``o1 <<= o2``."
msgstr ""

# 002cdbe7ab9342e5b691db8d0dd255e3
#: ../src/Doc/c-api/number.rst:213
msgid ""
"Returns the result of right shifting *o1* by *o2* on success, or *NULL* on "
"failure.  The operation is done *in-place* when *o1* supports it.  This is "
"the equivalent of the Python statement ``o1 >>= o2``."
msgstr ""

# 5687ec7cebdc40629f3938c24825db82
#: ../src/Doc/c-api/number.rst:220
msgid ""
"Returns the \"bitwise and\" of *o1* and *o2* on success and *NULL* on "
"failure. The operation is done *in-place* when *o1* supports it.  This is "
"the equivalent of the Python statement ``o1 &= o2``."
msgstr ""

# bc0b63bdcc42468eaf50fa8dceb46c76
#: ../src/Doc/c-api/number.rst:227
msgid ""
"Returns the \"bitwise exclusive or\" of *o1* by *o2* on success, or *NULL* "
"on failure.  The operation is done *in-place* when *o1* supports it.  This "
"is the equivalent of the Python statement ``o1 ^= o2``."
msgstr ""

# 913bc4c7da024b259d60843fd1699627
#: ../src/Doc/c-api/number.rst:234
msgid ""
"Returns the \"bitwise or\" of *o1* and *o2* on success, or *NULL* on "
"failure.  The operation is done *in-place* when *o1* supports it.  This is "
"the equivalent of the Python statement ``o1 |= o2``."
msgstr ""

# b9248b436a1b488d83ced75782407e33
#: ../src/Doc/c-api/number.rst:243
msgid ""
"This function takes the addresses of two variables of type :c:type:`PyObject"
"\\*`. If the objects pointed to by ``*p1`` and ``*p2`` have the same type, "
"increment their reference count and return ``0`` (success). If the objects "
"can be converted to a common numeric type, replace ``*p1`` and ``*p2`` by "
"their converted value (with 'new' reference counts), and return ``0``. If no "
"conversion is possible, or if some other error occurs, return ``-1`` "
"(failure) and don't increment the reference counts.  The call "
"``PyNumber_Coerce(&o1, &o2)`` is equivalent to the Python statement ``o1, o2 "
"= coerce(o1, o2)``."
msgstr ""

# 9a915d8242b74f1f9c05e83c48e91605
#: ../src/Doc/c-api/number.rst:255
msgid ""
"This function is similar to :c:func:`PyNumber_Coerce`, except that it "
"returns ``1`` when the conversion is not possible and when no error is "
"raised. Reference counts are still not increased in this case."
msgstr ""

# 97ed3a6d36bf45ba80037875330d968e
#: ../src/Doc/c-api/number.rst:264
msgid ""
"Returns the *o* converted to an integer object on success, or *NULL* on "
"failure. If the argument is outside the integer range a long object will be "
"returned instead. This is the equivalent of the Python expression ``int(o)``."
msgstr ""

# c629803acf464fe1a60f911a7e197018
#: ../src/Doc/c-api/number.rst:273
msgid ""
"Returns the *o* converted to a long integer object on success, or *NULL* on "
"failure.  This is the equivalent of the Python expression ``long(o)``."
msgstr ""

# a02bb7e103694d8db7f3d03a17139250
#: ../src/Doc/c-api/number.rst:281
msgid ""
"Returns the *o* converted to a float object on success, or *NULL* on "
"failure. This is the equivalent of the Python expression ``float(o)``."
msgstr ""

# b1ba6521d7934c65bd5004508437439c
#: ../src/Doc/c-api/number.rst:287
msgid ""
"Returns the *o* converted to a Python int or long on success or *NULL* with "
"a :exc:`TypeError` exception raised on failure."
msgstr ""

# 631f04fb7cb44abd95ac15227fd586b9
#: ../src/Doc/c-api/number.rst:295
msgid ""
"Returns the integer *n* converted to *base* as a string with a base marker "
"of ``'0b'``, ``'0o'``, or ``'0x'`` if applicable.  When *base* is not 2, 8, "
"10, or 16, the format is ``'x#num'`` where x is the base. If *n* is not an "
"int object, it is converted with :c:func:`PyNumber_Index` first."
msgstr ""

# a8783d2bd845492c83651dec5fc6a8bd
#: ../src/Doc/c-api/number.rst:306
msgid ""
"Returns *o* converted to a Py_ssize_t value if *o* can be interpreted as an "
"integer. If *o* can be converted to a Python int or long but the attempt to "
"convert to a Py_ssize_t value would raise an :exc:`OverflowError`, then the "
"*exc* argument is the type of exception that will be raised (usually :exc:"
"`IndexError` or :exc:`OverflowError`).  If *exc* is *NULL*, then the "
"exception is cleared and the value is clipped to *PY_SSIZE_T_MIN* for a "
"negative integer or *PY_SSIZE_T_MAX* for a positive integer."
msgstr ""

# 378ffd3266fb4d4691b576005df48501
#: ../src/Doc/c-api/number.rst:319
msgid ""
"Returns True if *o* is an index integer (has the nb_index slot of  the "
"tp_as_number structure filled in)."
msgstr ""

# cfc6f4d3b3db48c192abf05352d1b738
#: ../src/Doc/c-api/objbuffer.rst:7
msgid "Old Buffer Protocol"
msgstr ""

# 5a5fe880dce34152b08bf7d993765179
#: ../src/Doc/c-api/objbuffer.rst:9
msgid ""
"This section describes the legacy buffer protocol, which has been introduced "
"in Python 1.6. It is still supported but deprecated in the Python 2.x "
"series. Python 3 introduces a new buffer protocol which fixes weaknesses and "
"shortcomings of the protocol, and has been backported to Python 2.6.  See :"
"ref:`bufferobjects` for more information."
msgstr ""

# 0f985a11b13f4b7696aeae9377bdd5bb
#: ../src/Doc/c-api/objbuffer.rst:18
msgid ""
"Returns a pointer to a read-only memory location usable as character-based "
"input.  The *obj* argument must support the single-segment character buffer "
"interface.  On success, returns ``0``, sets *buffer* to the memory location "
"and *buffer_len* to the buffer length.  Returns ``-1`` and sets a :exc:"
"`TypeError` on error."
msgstr ""

# 48a3a740f06740b2b3c87289abb82743
#: ../src/Doc/c-api/objbuffer.rst:33
msgid ""
"Returns a pointer to a read-only memory location containing arbitrary data. "
"The *obj* argument must support the single-segment readable buffer "
"interface.  On success, returns ``0``, sets *buffer* to the memory location "
"and *buffer_len* to the buffer length.  Returns ``-1`` and sets a :exc:"
"`TypeError` on error."
msgstr ""

# c961be1b97f743eaa6f10f8baa021f80
#: ../src/Doc/c-api/objbuffer.rst:48
msgid ""
"Returns ``1`` if *o* supports the single-segment readable buffer interface. "
"Otherwise returns ``0``."
msgstr ""

# f693a552c56e4aa987eab5216e916e99
#: ../src/Doc/c-api/objbuffer.rst:56
msgid ""
"Returns a pointer to a writeable memory location.  The *obj* argument must "
"support the single-segment, character buffer interface.  On success, returns "
"``0``, sets *buffer* to the memory location and *buffer_len* to the buffer "
"length.  Returns ``-1`` and sets a :exc:`TypeError` on error."
msgstr ""

#: ../src/Doc/c-api/object.rst:6
msgid "Object Protocol"
msgstr ""

# 6bd85ea91b6847c891d8806aa584cba3
#: ../src/Doc/c-api/object.rst:11
msgid ""
"Print an object *o*, on file *fp*.  Returns ``-1`` on error.  The flags "
"argument is used to enable certain printing options.  The only option "
"currently supported is :const:`Py_PRINT_RAW`; if given, the :func:`str` of "
"the object is written instead of the :func:`repr`."
msgstr ""

# bd7ea62eb3cb4df68538d98493d0d260
# e5c4d8ffa08d415899f9342740e2dff6
#: ../src/Doc/c-api/object.rst:19 ../src/Doc/c-api/object.rst:26
msgid ""
"Returns ``1`` if *o* has the attribute *attr_name*, and ``0`` otherwise.  "
"This is equivalent to the Python expression ``hasattr(o, attr_name)``.  This "
"function always succeeds."
msgstr ""

# eef2a43acba64a4da591d909d769151a
#: ../src/Doc/c-api/object.rst:33
msgid ""
"Retrieve an attribute named *attr_name* from object *o*. Returns the "
"attribute value on success, or *NULL* on failure.  This is the equivalent of "
"the Python expression ``o.attr_name``."
msgstr ""

# b2371b8964c549fcbae8a88a5b1e46e1
#: ../src/Doc/c-api/object.rst:40
msgid ""
"Retrieve an attribute named *attr_name* from object *o*. Returns the "
"attribute value on success, or *NULL* on failure. This is the equivalent of "
"the Python expression ``o.attr_name``."
msgstr ""

# 7e6536e6ff114587990329afde7468db
#: ../src/Doc/c-api/object.rst:47
msgid ""
"Generic attribute getter function that is meant to be put into a type "
"object's ``tp_getattro`` slot.  It looks for a descriptor in the dictionary "
"of classes in the object's MRO as well as an attribute in the object's :attr:"
"`__dict__` (if present).  As outlined in :ref:`descriptors`, data "
"descriptors take preference over instance attributes, while non-data "
"descriptors don't.  Otherwise, an :exc:`AttributeError` is raised."
msgstr ""

# ef0bf29ffd7a4c55a08d0671ee6e98fe
# dbcb1a23ac6b422eac30be3123906638
#: ../src/Doc/c-api/object.rst:57 ../src/Doc/c-api/object.rst:64
msgid ""
"Set the value of the attribute named *attr_name*, for object *o*, to the "
"value *v*. Returns ``-1`` on failure.  This is the equivalent of the Python "
"statement ``o.attr_name = v``."
msgstr ""

# 2817d99036464abf855ac543bea584ee
#: ../src/Doc/c-api/object.rst:71
msgid ""
"Generic attribute setter function that is meant to be put into a type "
"object's ``tp_setattro`` slot.  It looks for a data descriptor in the "
"dictionary of classes in the object's MRO, and if found it takes preference "
"over setting the attribute in the instance dictionary. Otherwise, the "
"attribute is set in the object's :attr:`__dict__` (if present).  Otherwise, "
"an :exc:`AttributeError` is raised and ``-1`` is returned."
msgstr ""

# 83f563bea35944cdbe93ea932615c2ee
# e37892fddb744542a278f739d217f31f
#: ../src/Doc/c-api/object.rst:81 ../src/Doc/c-api/object.rst:87
msgid ""
"Delete attribute named *attr_name*, for object *o*. Returns ``-1`` on "
"failure. This is the equivalent of the Python statement ``del o.attr_name``."
msgstr ""

# f0108c18dd834a3398871a6f2df3256a
#: ../src/Doc/c-api/object.rst:93
msgid ""
"Compare the values of *o1* and *o2* using the operation specified by *opid*, "
"which must be one of :const:`Py_LT`, :const:`Py_LE`, :const:`Py_EQ`, :const:"
"`Py_NE`, :const:`Py_GT`, or :const:`Py_GE`, corresponding to ``<``, ``<=``, "
"``==``, ``!=``, ``>``, or ``>=`` respectively. This is the equivalent of the "
"Python expression ``o1 op o2``, where ``op`` is the operator corresponding "
"to *opid*. Returns the value of the comparison on success, or *NULL* on "
"failure."
msgstr ""

# 4dbec37dee794d2d9ebacf78076f5f76
#: ../src/Doc/c-api/object.rst:103
msgid ""
"Compare the values of *o1* and *o2* using the operation specified by *opid*, "
"which must be one of :const:`Py_LT`, :const:`Py_LE`, :const:`Py_EQ`, :const:"
"`Py_NE`, :const:`Py_GT`, or :const:`Py_GE`, corresponding to ``<``, ``<=``, "
"``==``, ``!=``, ``>``, or ``>=`` respectively. Returns ``-1`` on error, "
"``0`` if the result is false, ``1`` otherwise. This is the equivalent of the "
"Python expression ``o1 op o2``, where ``op`` is the operator corresponding "
"to *opid*."
msgstr ""

# 8fd66ee73dc94168997b67600d4058cb
#: ../src/Doc/c-api/object.rst:112
msgid ""
"If *o1* and *o2* are the same object, :c:func:`PyObject_RichCompareBool` "
"will always return ``1`` for :const:`Py_EQ` and ``0`` for :const:`Py_NE`."
msgstr ""

# 46d3e1b27cbf4624b3d5d4a7f59583e3
#: ../src/Doc/c-api/object.rst:119
msgid ""
"Compare the values of *o1* and *o2* using a routine provided by *o1*, if one "
"exists, otherwise with a routine provided by *o2*.  The result of the "
"comparison is returned in *result*.  Returns ``-1`` on failure.  This is the "
"equivalent of the Python statement ``result = cmp(o1, o2)``."
msgstr ""

# 071d1130d8644768af710102e960762f
#: ../src/Doc/c-api/object.rst:129
msgid ""
"Compare the values of *o1* and *o2* using a routine provided by *o1*, if one "
"exists, otherwise with a routine provided by *o2*.  Returns the result of "
"the comparison on success.  On error, the value returned is undefined; use :"
"c:func:`PyErr_Occurred` to detect an error.  This is equivalent to the "
"Python expression ``cmp(o1, o2)``."
msgstr ""

# 4b309fcbee714d7ba4a81ed465de143f
#: ../src/Doc/c-api/object.rst:140
msgid ""
"Compute a string representation of object *o*.  Returns the string "
"representation on success, *NULL* on failure.  This is the equivalent of the "
"Python expression ``repr(o)``.  Called by the :func:`repr` built-in function "
"and by reverse quotes."
msgstr ""

# 3d15641bae914094bcd3e8a38c51efa2
#: ../src/Doc/c-api/object.rst:150
msgid ""
"Compute a string representation of object *o*.  Returns the string "
"representation on success, *NULL* on failure.  This is the equivalent of the "
"Python expression ``str(o)``.  Called by the :func:`str` built-in function "
"and by the :keyword:`print` statement."
msgstr ""

# 4cb41db200dc458eafb42b7ae161f585
#: ../src/Doc/c-api/object.rst:160
msgid ""
"Compute a bytes representation of object *o*.  In 2.x, this is just a alias "
"for :c:func:`PyObject_Str`."
msgstr ""

# bc3c9e561dd845f298c4b8646fe60422
#: ../src/Doc/c-api/object.rst:168
msgid ""
"Compute a Unicode string representation of object *o*.  Returns the Unicode "
"string representation on success, *NULL* on failure. This is the equivalent "
"of the Python expression ``unicode(o)``.  Called by the :func:`unicode` "
"built-in function."
msgstr ""

# a33f77c6cb204c7da394811d1ba20061
#: ../src/Doc/c-api/object.rst:176
msgid ""
"Returns ``1`` if *inst* is an instance of the class *cls* or a subclass of "
"*cls*, or ``0`` if not.  On error, returns ``-1`` and sets an exception.  If "
"*cls* is a type object rather than a class object, :c:func:"
"`PyObject_IsInstance` returns ``1`` if *inst* is of type *cls*.  If *cls* is "
"a tuple, the check will be done against every entry in *cls*. The result "
"will be ``1`` when at least one of the checks returns ``1``, otherwise it "
"will be ``0``. If *inst* is not a class instance and *cls* is neither a type "
"object, nor a class object, nor a tuple, *inst* must have a :attr:"
"`__class__` attribute --- the class relationship of the value of that "
"attribute with *cls* will be used to determine the result of this function."
msgstr ""

# a8542ac57b894a9c98e9ee9f80be4644
#: ../src/Doc/c-api/object.rst:192
msgid ""
"Subclass determination is done in a fairly straightforward way, but includes "
"a wrinkle that implementors of extensions to the class system may want to be "
"aware of.  If :class:`A` and :class:`B` are class objects, :class:`B` is a "
"subclass of :class:`A` if it inherits from :class:`A` either directly or "
"indirectly.  If either is not a class object, a more general mechanism is "
"used to determine the class relationship of the two objects.  When testing "
"if *B* is a subclass of *A*, if *A* is *B*, :c:func:`PyObject_IsSubclass` "
"returns true.  If *A* and *B* are different objects, *B*'s :attr:`__bases__` "
"attribute is searched in a depth-first fashion for *A* --- the presence of "
"the :attr:`__bases__` attribute is considered sufficient for this "
"determination."
msgstr ""

# 975eb14458204b999a809fbc15ebc83a
#: ../src/Doc/c-api/object.rst:206
msgid ""
"Returns ``1`` if the class *derived* is identical to or derived from the "
"class *cls*, otherwise returns ``0``.  In case of an error, returns ``-1``. "
"If *cls* is a tuple, the check will be done against every entry in *cls*. "
"The result will be ``1`` when at least one of the checks returns ``1``, "
"otherwise it will be ``0``. If either *derived* or *cls* is not an actual "
"class object (or tuple), this function uses the generic algorithm described "
"above."
msgstr ""

# 76822f8d13a84612b5cc09d007546d2e
#: ../src/Doc/c-api/object.rst:221
msgid ""
"Determine if the object *o* is callable.  Return ``1`` if the object is "
"callable and ``0`` otherwise.  This function always succeeds."
msgstr ""

# 593c351fe8b64aa3a05ec83c0f5791d3
#: ../src/Doc/c-api/object.rst:229
msgid ""
"Call a callable Python object *callable_object*, with arguments given by the "
"tuple *args*, and named arguments given by the dictionary *kw*. If no named "
"arguments are needed, *kw* may be *NULL*. *args* must not be *NULL*, use an "
"empty tuple if no arguments are needed. Returns the result of the call on "
"success, or *NULL* on failure.  This is the equivalent of the Python "
"expression ``apply(callable_object, args, kw)`` or ``callable_object(*args, "
"**kw)``."
msgstr ""

# 8c9482d8c0374f629cf1ec78b3325760
#: ../src/Doc/c-api/object.rst:243
msgid ""
"Call a callable Python object *callable_object*, with arguments given by the "
"tuple *args*.  If no arguments are needed, then *args* may be *NULL*.  "
"Returns the result of the call on success, or *NULL* on failure.  This is "
"the equivalent of the Python expression ``apply(callable_object, args)`` or "
"``callable_object(*args)``."
msgstr ""

# 9c4d7e57b0864b50b90176b7dacca373
#: ../src/Doc/c-api/object.rst:254
msgid ""
"Call a callable Python object *callable*, with a variable number of C "
"arguments. The C arguments are described using a :c:func:`Py_BuildValue` "
"style format string.  The format may be *NULL*, indicating that no arguments "
"are provided. Returns the result of the call on success, or *NULL* on "
"failure.  This is the equivalent of the Python expression ``apply(callable, "
"args)`` or ``callable(*args)``. Note that if you only pass :c:type:`PyObject "
"\\*` args, :c:func:`PyObject_CallFunctionObjArgs` is a faster alternative."
msgstr ""

# 126c265daeb04ef4a08d0241aa6ab11f
#: ../src/Doc/c-api/object.rst:265
msgid ""
"Call the method named *method* of object *o* with a variable number of C "
"arguments.  The C arguments are described by a :c:func:`Py_BuildValue` "
"format string that should  produce a tuple.  The format may be *NULL*, "
"indicating that no arguments are provided. Returns the result of the call on "
"success, or *NULL* on failure.  This is the equivalent of the Python "
"expression ``o.method(args)``. Note that if you only pass :c:type:`PyObject "
"\\*` args, :c:func:`PyObject_CallMethodObjArgs` is a faster alternative."
msgstr ""

# 5e8cd3cf66cb4067929acbd2d22cd50e
#: ../src/Doc/c-api/object.rst:276
msgid ""
"Call a callable Python object *callable*, with a variable number of :c:type:"
"`PyObject\\*` arguments.  The arguments are provided as a variable number of "
"parameters followed by *NULL*. Returns the result of the call on success, or "
"*NULL* on failure."
msgstr ""

# 4c74d88795ab44b4880d95840948e5dc
#: ../src/Doc/c-api/object.rst:286
msgid ""
"Calls a method of the object *o*, where the name of the method is given as a "
"Python string object in *name*.  It is called with a variable number of :c:"
"type:`PyObject\\*` arguments.  The arguments are provided as a variable "
"number of parameters followed by *NULL*. Returns the result of the call on "
"success, or *NULL* on failure."
msgstr ""

# 22346cea7538404ba36c2a7f6be1627b
#: ../src/Doc/c-api/object.rst:299
msgid ""
"Compute and return the hash value of an object *o*.  On failure, return "
"``-1``. This is the equivalent of the Python expression ``hash(o)``."
msgstr ""

# a54ac7d81a2746b1b0a5b4d64c40b7f8
#: ../src/Doc/c-api/object.rst:305
msgid ""
"Set a :exc:`TypeError` indicating that ``type(o)`` is not hashable and "
"return ``-1``. This function receives special treatment when stored in a "
"``tp_hash`` slot, allowing a type to explicitly indicate to the interpreter "
"that it is not hashable."
msgstr ""

# cf793f0ba88841c68cd55ead732a5fb1
#: ../src/Doc/c-api/object.rst:315
msgid ""
"Returns ``1`` if the object *o* is considered to be true, and ``0`` "
"otherwise. This is equivalent to the Python expression ``not not o``.  On "
"failure, return ``-1``."
msgstr ""

# d38c8955693a403da24f379a919b62bd
#: ../src/Doc/c-api/object.rst:322
msgid ""
"Returns ``0`` if the object *o* is considered to be true, and ``1`` "
"otherwise. This is equivalent to the Python expression ``not o``.  On "
"failure, return ``-1``."
msgstr ""

# 12e88eb4585e4914a9f283847a451069
#: ../src/Doc/c-api/object.rst:331
msgid ""
"When *o* is non-*NULL*, returns a type object corresponding to the object "
"type of object *o*. On failure, raises :exc:`SystemError` and returns "
"*NULL*.  This is equivalent to the Python expression ``type(o)``. This "
"function increments the reference count of the return value. There's really "
"no reason to use this function instead of the common expression ``o-"
">ob_type``, which returns a pointer of type :c:type:`PyTypeObject\\*`, "
"except when the incremented reference count is needed."
msgstr ""

# 922e966df79741558ebe3973a2347605
#: ../src/Doc/c-api/object.rst:342
msgid ""
"Return true if the object *o* is of type *type* or a subtype of *type*.  "
"Both parameters must be non-*NULL*."
msgstr ""

# ad3cad48f5ca43b185d05af28a555df2
#: ../src/Doc/c-api/object.rst:353
msgid ""
"Return the length of object *o*.  If the object *o* provides either the "
"sequence and mapping protocols, the sequence length is returned.  On error, "
"``-1`` is returned.  This is the equivalent to the Python expression ``len(o)"
"``."
msgstr ""

# 096a8708e3424c12a356bd42ff91862c
#: ../src/Doc/c-api/object.rst:370
msgid ""
"Map the object *key* to the value *v*.  Returns ``-1`` on failure.  This is "
"the equivalent of the Python statement ``o[key] = v``."
msgstr ""

# c83b10d686e240b7bf8577fcf74b36e3
#: ../src/Doc/c-api/object.rst:376
msgid ""
"Delete the mapping for *key* from *o*.  Returns ``-1`` on failure. This is "
"the equivalent of the Python statement ``del o[key]``."
msgstr ""

# 3a5f55386dc8457a81d82c1b30535f9e
#: ../src/Doc/c-api/object.rst:382
msgid ""
"Derives a file descriptor from a Python object.  If the object is an integer "
"or long integer, its value is returned.  If not, the object's :meth:`fileno` "
"method is called if it exists; the method must return an integer or long "
"integer, which is returned as the file descriptor value.  Returns ``-1`` on "
"failure."
msgstr ""

# 30ab536c33ac4f9884372d5ad14b5a08
#: ../src/Doc/c-api/object.rst:390
msgid ""
"This is equivalent to the Python expression ``dir(o)``, returning a "
"(possibly empty) list of strings appropriate for the object argument, or "
"*NULL* if there was an error.  If the argument is *NULL*, this is like the "
"Python ``dir()``, returning the names of the current locals; in this case, "
"if no execution frame is active then *NULL* is returned but :c:func:"
"`PyErr_Occurred` will return false."
msgstr ""

# d7445f3018444856bd7c1dcb7241eaa5
#: ../src/Doc/c-api/object.rst:399
msgid ""
"This is equivalent to the Python expression ``iter(o)``. It returns a new "
"iterator for the object argument, or the object  itself if the object is "
"already an iterator.  Raises :exc:`TypeError` and returns *NULL* if the "
"object cannot be iterated."
msgstr ""

#: ../src/Doc/c-api/objimpl.rst:8
msgid "Object Implementation Support"
msgstr ""

#: ../src/Doc/c-api/objimpl.rst:10
msgid ""
"This chapter describes the functions, types, and macros used when defining "
"new object types."
msgstr ""

#: ../src/Doc/c-api/refcounting.rst:8
msgid "Reference Counting"
msgstr ""

#: ../src/Doc/c-api/refcounting.rst:10
msgid ""
"The macros in this section are used for managing reference counts of Python "
"objects."
msgstr ""

# 7fea8bfe3362473a9ffde86b04187dc5
#: ../src/Doc/c-api/refcounting.rst:16
msgid ""
"Increment the reference count for object *o*.  The object must not be "
"*NULL*; if you aren't sure that it isn't *NULL*, use :c:func:`Py_XINCREF`."
msgstr ""

# 60961c7884bc4feba5a3223b0e28487d
#: ../src/Doc/c-api/refcounting.rst:22
msgid ""
"Increment the reference count for object *o*.  The object may be *NULL*, in "
"which case the macro has no effect."
msgstr ""

# e574432771724b80948b7aec0aab6f3e
#: ../src/Doc/c-api/refcounting.rst:28
msgid ""
"Decrement the reference count for object *o*.  The object must not be "
"*NULL*; if you aren't sure that it isn't *NULL*, use :c:func:`Py_XDECREF`.  "
"If the reference count reaches zero, the object's type's deallocation "
"function (which must not be *NULL*) is invoked."
msgstr ""

# 2d29ee37bcbd42f2b5e4cc7b26fb87f4
#: ../src/Doc/c-api/refcounting.rst:35
msgid ""
"The deallocation function can cause arbitrary Python code to be invoked (e."
"g. when a class instance with a :meth:`__del__` method is deallocated).  "
"While exceptions in such code are not propagated, the executed code has free "
"access to all Python global variables.  This means that any object that is "
"reachable from a global variable should be in a consistent state before :c:"
"func:`Py_DECREF` is invoked.  For example, code to delete an object from a "
"list should copy a reference to the deleted object in a temporary variable, "
"update the list data structure, and then call :c:func:`Py_DECREF` for the "
"temporary variable."
msgstr ""

# 974eb0c4902c46c58bf83d9b4f0d4ef4
#: ../src/Doc/c-api/refcounting.rst:47
msgid ""
"Decrement the reference count for object *o*.  The object may be *NULL*, in "
"which case the macro has no effect; otherwise the effect is the same as for :"
"c:func:`Py_DECREF`, and the same warning applies."
msgstr ""

# 039636e78e9b4a089d62117825e0ae4b
#: ../src/Doc/c-api/refcounting.rst:54
msgid ""
"Decrement the reference count for object *o*.  The object may be *NULL*, in "
"which case the macro has no effect; otherwise the effect is the same as for :"
"c:func:`Py_DECREF`, except that the argument is also set to *NULL*.  The "
"warning for :c:func:`Py_DECREF` does not apply with respect to the object "
"passed because the macro carefully uses a temporary variable and sets the "
"argument to *NULL* before decrementing its reference count."
msgstr ""

# 737fa43690ae418d9e8c97d88bb0a7cb
#: ../src/Doc/c-api/refcounting.rst:61
msgid ""
"It is a good idea to use this macro whenever decrementing the value of a "
"variable that might be traversed during garbage collection."
msgstr ""

# 9350499a7f264ba9a500b8cd3a2a9390
#: ../src/Doc/c-api/refcounting.rst:66
msgid ""
"The following functions are for runtime dynamic embedding of Python: "
"``Py_IncRef(PyObject *o)``, ``Py_DecRef(PyObject *o)``. They are simply "
"exported function versions of :c:func:`Py_XINCREF` and :c:func:`Py_XDECREF`, "
"respectively."
msgstr ""

# 6d8633e7910d49bcb9da2264816d368a
#: ../src/Doc/c-api/refcounting.rst:71
msgid ""
"The following functions or macros are only for use within the interpreter "
"core: :c:func:`_Py_Dealloc`, :c:func:`_Py_ForgetReference`, :c:func:"
"`_Py_NewReference`, as well as the global variable :c:data:`_Py_RefTotal`."
msgstr ""

#: ../src/Doc/c-api/reflection.rst:6
msgid "Reflection"
msgstr ""

# c1311b3a38fe4204960256e8758b3074
#: ../src/Doc/c-api/reflection.rst:10
msgid ""
"Return a dictionary of the builtins in the current execution frame, or the "
"interpreter of the thread state if no frame is currently executing."
msgstr ""

# 67dbee446fa04487bebdf1c6509c29e9
#: ../src/Doc/c-api/reflection.rst:16
msgid ""
"Return a dictionary of the local variables in the current execution frame, "
"or *NULL* if no frame is currently executing."
msgstr ""

# 64a77bc14cfa4630b76c8224c95514ea
#: ../src/Doc/c-api/reflection.rst:22
msgid ""
"Return a dictionary of the global variables in the current execution frame, "
"or *NULL* if no frame is currently executing."
msgstr ""

# b30ec68eb94847d0a414b8768fb262b2
#: ../src/Doc/c-api/reflection.rst:28
msgid ""
"Return the current thread state's frame, which is *NULL* if no frame is "
"currently executing."
msgstr ""

# aed85dce78a74269b3a669e39c65155f
#: ../src/Doc/c-api/reflection.rst:34
msgid "Return the line number that *frame* is currently executing."
msgstr ""

# 612d0e361c48437ca6e7279a92eed853
#: ../src/Doc/c-api/reflection.rst:39
msgid ""
"If there is a current frame and it is executing in restricted mode, return "
"true, otherwise false."
msgstr ""

# d37d156485fd48c1a5b5629ba7a26ab1
#: ../src/Doc/c-api/reflection.rst:45
msgid ""
"Return the name of *func* if it is a function, class or instance object, "
"else the name of *func*\\s type."
msgstr ""

# 26b3935914014b0f8d31433dcbec1f61
#: ../src/Doc/c-api/reflection.rst:51
msgid ""
"Return a description string, depending on the type of *func*. Return values "
"include \"()\" for functions and methods, \" constructor\", \" instance\", "
"and \" object\".  Concatenated with the result of :c:func:"
"`PyEval_GetFuncName`, the result will be a description of *func*."
msgstr ""

#: ../src/Doc/c-api/sequence.rst:6
msgid "Sequence Protocol"
msgstr ""

# 01b35ccaca364fcbb0ad733d6c338bf6
#: ../src/Doc/c-api/sequence.rst:11
msgid ""
"Return ``1`` if the object provides sequence protocol, and ``0`` otherwise. "
"This function always succeeds."
msgstr ""

# 5297e7315d2e427fbcf81744d1237d04
#: ../src/Doc/c-api/sequence.rst:20
msgid ""
"Returns the number of objects in sequence *o* on success, and ``-1`` on "
"failure. For objects that do not provide sequence protocol, this is "
"equivalent to the Python expression ``len(o)``."
msgstr ""

# da58ad4a67ba42ae9514510cae3fe618
#: ../src/Doc/c-api/sequence.rst:31
msgid ""
"Return the concatenation of *o1* and *o2* on success, and *NULL* on failure. "
"This is the equivalent of the Python expression ``o1 + o2``."
msgstr ""

# f56e6056e7c64f8b9bf21a2b8e687373
#: ../src/Doc/c-api/sequence.rst:37
msgid ""
"Return the result of repeating sequence object *o* *count* times, or *NULL* "
"on failure.  This is the equivalent of the Python expression ``o * count``."
msgstr ""

# bfd3b063b9fb4ce5a2264de1c18e0dd1
#: ../src/Doc/c-api/sequence.rst:47
msgid ""
"Return the concatenation of *o1* and *o2* on success, and *NULL* on failure. "
"The operation is done *in-place* when *o1* supports it.  This is the "
"equivalent of the Python expression ``o1 += o2``."
msgstr ""

# 78d62e300aed4331a45a1304b99969e9
#: ../src/Doc/c-api/sequence.rst:54
msgid ""
"Return the result of repeating sequence object *o* *count* times, or *NULL* "
"on failure.  The operation is done *in-place* when *o* supports it.  This is "
"the equivalent of the Python expression ``o *= count``."
msgstr ""

# bb3d9a83ed2f42c7891c2e0ef57b4a80
#: ../src/Doc/c-api/sequence.rst:65
msgid ""
"Return the *i*\\ th element of *o*, or *NULL* on failure. This is the "
"equivalent of the Python expression ``o[i]``."
msgstr ""

# 63ff83a237904c22abc3d3510e20abf0
#: ../src/Doc/c-api/sequence.rst:75
msgid ""
"Return the slice of sequence object *o* between *i1* and *i2*, or *NULL* on "
"failure. This is the equivalent of the Python expression ``o[i1:i2]``."
msgstr ""

# 60b3047d048646df85ae197b693eb297
#: ../src/Doc/c-api/sequence.rst:85
msgid ""
"Assign object *v* to the *i*\\ th element of *o*.  Returns ``-1`` on "
"failure.  This is the equivalent of the Python statement ``o[i] = v``.  This "
"function *does not* steal a reference to *v*."
msgstr ""

# 8b70f5e374284192a5680c1eab1bfaa1
#: ../src/Doc/c-api/sequence.rst:96
msgid ""
"Delete the *i*\\ th element of object *o*.  Returns ``-1`` on failure.  This "
"is the equivalent of the Python statement ``del o[i]``."
msgstr ""

# 7be27f2462b74a0988196a34a3fbd75c
#: ../src/Doc/c-api/sequence.rst:106
msgid ""
"Assign the sequence object *v* to the slice in sequence object *o* from *i1* "
"to *i2*.  This is the equivalent of the Python statement ``o[i1:i2] = v``."
msgstr ""

# 6136a76e75db4682ba1cd1b2b20358db
#: ../src/Doc/c-api/sequence.rst:116
msgid ""
"Delete the slice in sequence object *o* from *i1* to *i2*.  Returns ``-1`` "
"on failure.  This is the equivalent of the Python statement ``del o[i1:i2]``."
msgstr ""

# f553712b4ec74764b34053ebb6720066
#: ../src/Doc/c-api/sequence.rst:126
msgid ""
"Return the number of occurrences of *value* in *o*, that is, return the "
"number of keys for which ``o[key] == value``.  On failure, return ``-1``.  "
"This is equivalent to the Python expression ``o.count(value)``."
msgstr ""

# 6998578ad7044ac99834d6b2590dfe68
#: ../src/Doc/c-api/sequence.rst:137
msgid ""
"Determine if *o* contains *value*.  If an item in *o* is equal to *value*, "
"return ``1``, otherwise return ``0``. On error, return ``-1``.  This is "
"equivalent to the Python expression ``value in o``."
msgstr ""

# fd21125a79a04b19b0348e63142df7a4
#: ../src/Doc/c-api/sequence.rst:144
msgid ""
"Return the first index *i* for which ``o[i] == value``.  On error, return "
"``-1``.    This is equivalent to the Python expression ``o.index(value)``."
msgstr ""

# 8e4952fcfb11446faa7c4182765844cf
#: ../src/Doc/c-api/sequence.rst:154
msgid ""
"Return a list object with the same contents as the arbitrary sequence *o*.  "
"The returned list is guaranteed to be new."
msgstr ""

# 71c6a4ffc6a24351be77d5c9edba69eb
#: ../src/Doc/c-api/sequence.rst:162
msgid ""
"Return a tuple object with the same contents as the arbitrary sequence *o* "
"or *NULL* on failure.  If *o* is a tuple, a new reference will be returned, "
"otherwise a tuple will be constructed with the appropriate contents.  This "
"is equivalent to the Python expression ``tuple(o)``."
msgstr ""

# 219bbef5547646108f85c71b6fb9a4fd
#: ../src/Doc/c-api/sequence.rst:170
msgid ""
"Returns the sequence *o* as a tuple, unless it is already a tuple or list, "
"in which case *o* is returned.  Use :c:func:`PySequence_Fast_GET_ITEM` to "
"access the members of the result.  Returns *NULL* on failure.  If the object "
"is not a sequence, raises :exc:`TypeError` with *m* as the message text."
msgstr ""

# e2d48ff479004519982864ec1832138f
#: ../src/Doc/c-api/sequence.rst:178
msgid ""
"Return the *i*\\ th element of *o*, assuming that *o* was returned by :c:"
"func:`PySequence_Fast`, *o* is not *NULL*, and that *i* is within bounds."
msgstr ""

# f1b489d153f4431787a3b8c95c43de88
#: ../src/Doc/c-api/sequence.rst:188
msgid ""
"Return the underlying array of PyObject pointers.  Assumes that *o* was "
"returned by :c:func:`PySequence_Fast` and *o* is not *NULL*."
msgstr ""

# 76b23429aa4f4f149d449056cfb45a71
#: ../src/Doc/c-api/sequence.rst:191
msgid ""
"Note, if a list gets resized, the reallocation may relocate the items array. "
"So, only use the underlying array pointer in contexts where the sequence "
"cannot change."
msgstr ""

# 50329026e9f94bfab67f89238084b951
#: ../src/Doc/c-api/sequence.rst:200
msgid ""
"Return the *i*\\ th element of *o* or *NULL* on failure. Macro form of :c:"
"func:`PySequence_GetItem` but without checking that :c:func:"
"`PySequence_Check` on *o* is true and without adjustment for negative "
"indices."
msgstr ""

# 88bd47630e864937b282e11a4f7a8628
#: ../src/Doc/c-api/sequence.rst:214
msgid ""
"Returns the length of *o*, assuming that *o* was returned by :c:func:"
"`PySequence_Fast` and that *o* is not *NULL*.  The size can also be gotten "
"by calling :c:func:`PySequence_Size` on *o*, but :c:func:"
"`PySequence_Fast_GET_SIZE` is faster because it can assume *o* is a list or "
"tuple."
msgstr ""

#: ../src/Doc/c-api/set.rst:6
msgid "Set Objects"
msgstr ""

# 4533d778a82c40c3ab2fb839d62ba513
#: ../src/Doc/c-api/set.rst:17
msgid ""
"This section details the public API for :class:`set` and :class:`frozenset` "
"objects.  Any functionality not listed below is best accessed using the "
"either the abstract object protocol (including :c:func:"
"`PyObject_CallMethod`, :c:func:`PyObject_RichCompareBool`, :c:func:"
"`PyObject_Hash`, :c:func:`PyObject_Repr`, :c:func:`PyObject_IsTrue`, :c:func:"
"`PyObject_Print`, and :c:func:`PyObject_GetIter`) or the abstract number "
"protocol (including :c:func:`PyNumber_And`, :c:func:`PyNumber_Subtract`, :c:"
"func:`PyNumber_Or`, :c:func:`PyNumber_Xor`, :c:func:`PyNumber_InPlaceAnd`, :"
"c:func:`PyNumber_InPlaceSubtract`, :c:func:`PyNumber_InPlaceOr`, and :c:func:"
"`PyNumber_InPlaceXor`)."
msgstr ""

# 0f453f1102ba478abfabc27ea16ddf19
#: ../src/Doc/c-api/set.rst:31
msgid ""
"This subtype of :c:type:`PyObject` is used to hold the internal data for "
"both :class:`set` and :class:`frozenset` objects.  It is like a :c:type:"
"`PyDictObject` in that it is a fixed size for small sets (much like tuple "
"storage) and will point to a separate, variable sized block of memory for "
"medium and large sized sets (much like list storage). None of the fields of "
"this structure should be considered public and are subject to change.  All "
"access should be done through the documented API rather than by manipulating "
"the values in the structure."
msgstr ""

# 3f48b96f010a420894a8ad5378ca8dc0
#: ../src/Doc/c-api/set.rst:42
msgid ""
"This is an instance of :c:type:`PyTypeObject` representing the Python :class:"
"`set` type."
msgstr ""

# 3b0e2cc2a9d343789f2fa3f8f7b44f90
#: ../src/Doc/c-api/set.rst:48
msgid ""
"This is an instance of :c:type:`PyTypeObject` representing the Python :class:"
"`frozenset` type."
msgstr ""

#: ../src/Doc/c-api/set.rst:51
msgid ""
"The following type check macros work on pointers to any Python object. "
"Likewise, the constructor functions work with any iterable Python object."
msgstr ""

# 97474a1581ce4cca938369390f6a4853
#: ../src/Doc/c-api/set.rst:57
msgid ""
"Return true if *p* is a :class:`set` object or an instance of a subtype."
msgstr ""

# a15f14d8b6a14adba183e38ac8fea997
#: ../src/Doc/c-api/set.rst:63
msgid ""
"Return true if *p* is a :class:`frozenset` object or an instance of a "
"subtype."
msgstr ""

# ac8b64f07ff241e6865abb210c131f12
#: ../src/Doc/c-api/set.rst:70
msgid ""
"Return true if *p* is a :class:`set` object, a :class:`frozenset` object, or "
"an instance of a subtype."
msgstr ""

# 24bf260c8ca144929cedcc5f0d8170ae
#: ../src/Doc/c-api/set.rst:76
msgid ""
"Return true if *p* is a :class:`set` object or a :class:`frozenset` object "
"but not an instance of a subtype."
msgstr ""

# 50fc019d7b904d09a566f7beade4f944
#: ../src/Doc/c-api/set.rst:82
msgid ""
"Return true if *p* is a :class:`frozenset` object but not an instance of a "
"subtype."
msgstr ""

# 6249bc9c291c472fbe9653819021cf2d
#: ../src/Doc/c-api/set.rst:88
msgid ""
"Return a new :class:`set` containing objects returned by the *iterable*.  "
"The *iterable* may be *NULL* to create a new empty set.  Return the new set "
"on success or *NULL* on failure.  Raise :exc:`TypeError` if *iterable* is "
"not actually iterable.  The constructor is also useful for copying a set "
"(``c=set(s)``)."
msgstr ""

# 723211324d1e478ebd41fd4a086a1337
#: ../src/Doc/c-api/set.rst:97
msgid ""
"Return a new :class:`frozenset` containing objects returned by the "
"*iterable*. The *iterable* may be *NULL* to create a new empty frozenset.  "
"Return the new set on success or *NULL* on failure.  Raise :exc:`TypeError` "
"if *iterable* is not actually iterable."
msgstr ""

#: ../src/Doc/c-api/set.rst:107
msgid ""
"The following functions and macros are available for instances of :class:"
"`set` or :class:`frozenset` or instances of their subtypes."
msgstr ""

# 412acb53fa89431dac08b6385e52fdab
#: ../src/Doc/c-api/set.rst:115
msgid ""
"Return the length of a :class:`set` or :class:`frozenset` object. Equivalent "
"to ``len(anyset)``.  Raises a :exc:`PyExc_SystemError` if *anyset* is not a :"
"class:`set`, :class:`frozenset`, or an instance of a subtype."
msgstr ""

# 7bfae86cb5c84350ac7fbf7b1a3c45a5
#: ../src/Doc/c-api/set.rst:126
msgid "Macro form of :c:func:`PySet_Size` without error checking."
msgstr ""

# 32e8f34928934b00a0efe65a640b1141
#: ../src/Doc/c-api/set.rst:131
msgid ""
"Return 1 if found, 0 if not found, and -1 if an error is encountered.  "
"Unlike the Python :meth:`__contains__` method, this function does not "
"automatically convert unhashable sets into temporary frozensets.  Raise a :"
"exc:`TypeError` if the *key* is unhashable. Raise :exc:`PyExc_SystemError` "
"if *anyset* is not a :class:`set`, :class:`frozenset`, or an instance of a "
"subtype."
msgstr ""

# 8250c8ee22354da78e3e0226f4e11ec0
#: ../src/Doc/c-api/set.rst:140
msgid ""
"Add *key* to a :class:`set` instance.  Does not apply to :class:`frozenset` "
"instances.  Return 0 on success or -1 on failure. Raise a :exc:`TypeError` "
"if the *key* is unhashable. Raise a :exc:`MemoryError` if there is no room "
"to grow. Raise a :exc:`SystemError` if *set* is an not an instance of :class:"
"`set` or its subtype."
msgstr ""

#: ../src/Doc/c-api/set.rst:151
msgid ""
"The following functions are available for instances of :class:`set` or its "
"subtypes but not for instances of :class:`frozenset` or its subtypes."
msgstr ""

# bf877d3bc004486cb73bb00287796c49
#: ../src/Doc/c-api/set.rst:157
msgid ""
"Return 1 if found and removed, 0 if not found (no action taken), and -1 if "
"an error is encountered.  Does not raise :exc:`KeyError` for missing keys.  "
"Raise a :exc:`TypeError` if the *key* is unhashable.  Unlike the Python :"
"meth:`discard` method, this function does not automatically convert "
"unhashable sets into temporary frozensets. Raise :exc:`PyExc_SystemError` if "
"*set* is an not an instance of :class:`set` or its subtype."
msgstr ""

# 68896b7127be4d01935e39506697b7d5
#: ../src/Doc/c-api/set.rst:167
msgid ""
"Return a new reference to an arbitrary object in the *set*, and removes the "
"object from the *set*.  Return *NULL* on failure.  Raise :exc:`KeyError` if "
"the set is empty. Raise a :exc:`SystemError` if *set* is an not an instance "
"of :class:`set` or its subtype."
msgstr ""

# e798d9ee83d649d4aca7b931d037227d
#: ../src/Doc/c-api/set.rst:175
msgid "Empty an existing set of all elements."
msgstr ""

#: ../src/Doc/c-api/slice.rst:6
msgid "Slice Objects"
msgstr ""

# 7c83c0724f3344b983a47f6d416e66c0
#: ../src/Doc/c-api/slice.rst:13
msgid ""
"The type object for slice objects.  This is the same as ``slice`` and "
"``types.SliceType``."
msgstr ""

# 0584b3cc723c479a84b9ecf0a85a48ad
#: ../src/Doc/c-api/slice.rst:19
msgid "Return true if *ob* is a slice object; *ob* must not be *NULL*."
msgstr ""

# 7effaf22c3fd46e689d132e8b0a7a167
#: ../src/Doc/c-api/slice.rst:24
msgid ""
"Return a new slice object with the given values.  The *start*, *stop*, and "
"*step* parameters are used as the values of the slice object attributes of "
"the same names.  Any of the values may be *NULL*, in which case the ``None`` "
"will be used for the corresponding attribute.  Return *NULL* if the new "
"object could not be allocated."
msgstr ""

# 7d2387d5e0f4435998fb796f0dcc5d11
#: ../src/Doc/c-api/slice.rst:33
msgid ""
"Retrieve the start, stop and step indices from the slice object *slice*, "
"assuming a sequence of length *length*. Treats indices greater than *length* "
"as errors."
msgstr ""

# a2169e3754e54330b3c2c6d51f46109c
#: ../src/Doc/c-api/slice.rst:37
msgid ""
"Returns 0 on success and -1 on error with no exception set (unless one of "
"the indices was not :const:`None` and failed to be converted to an integer, "
"in which case -1 is returned with an exception set)."
msgstr ""

# 84cc674231e04e0b99acd692df45e9c1
#: ../src/Doc/c-api/slice.rst:41
msgid ""
"You probably do not want to use this function.  If you want to use slice "
"objects in versions of Python prior to 2.3, you would probably do well to "
"incorporate the source of :c:func:`PySlice_GetIndicesEx`, suitably renamed, "
"in the source of your extension."
msgstr ""

# 91cd6d98eecb4d569dbab01651888e31
#: ../src/Doc/c-api/slice.rst:54
msgid ""
"Usable replacement for :c:func:`PySlice_GetIndices`.  Retrieve the start, "
"stop, and step indices from the slice object *slice* assuming a sequence of "
"length *length*, and store the length of the slice in *slicelength*.  Out of "
"bounds indices are clipped in a manner consistent with the handling of "
"normal slices."
msgstr ""

# a5698836de9c4f759481613b331ba77e
#: ../src/Doc/c-api/slice.rst:60
msgid "Returns 0 on success and -1 on error with exception set."
msgstr ""

#: ../src/Doc/c-api/string.rst:6
#, fuzzy
msgid "String/Bytes Objects"
msgstr "Objets bytes"

#: ../src/Doc/c-api/string.rst:8
#, fuzzy
msgid ""
"These functions raise :exc:`TypeError` when expecting a string parameter and "
"are called with a non-string parameter."
msgstr ""
"Ces fonctions lèvent :exc:`TypeError` lorsqu'elles attendent un paramètre de "
"type octets et qu'elles sont appelées avec un paramètre qui n'est pas un "
"octet."

# f56ba98d4b034811a112888d0f6c2196
#: ../src/Doc/c-api/string.rst:13
msgid ""
"These functions have been renamed to PyBytes_* in Python 3.x. Unless "
"otherwise noted, the PyBytes functions available in 3.x are aliased to their "
"PyString_* equivalents to help porting."
msgstr ""

# facedef49d0a48eca87b309582f74a96
#: ../src/Doc/c-api/string.rst:22
msgid "This subtype of :c:type:`PyObject` represents a Python string object."
msgstr ""

# b21a5ab9cfcd40bf9511f76ad6932457
#: ../src/Doc/c-api/string.rst:29
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python string type; "
"it is the same object as ``str`` and ``types.StringType`` in the Python "
"layer. ."
msgstr ""

# e5f1b2e03c354ffea5f511d23f145b09
#: ../src/Doc/c-api/string.rst:35
msgid ""
"Return true if the object *o* is a string object or an instance of a subtype "
"of the string type."
msgstr ""

# 437b2a5b13954861b393ba273893b15a
#: ../src/Doc/c-api/string.rst:44
msgid ""
"Return true if the object *o* is a string object, but not an instance of a "
"subtype of the string type."
msgstr ""

# a8639a54188d48ccaf153d6e690a2d86
#: ../src/Doc/c-api/string.rst:52
msgid ""
"Return a new string object with a copy of the string *v* as value on "
"success, and *NULL* on failure.  The parameter *v* must not be *NULL*; it "
"will not be checked."
msgstr ""

# 9d6ddff2ab8d46dc98d04ed9fa4e45ff
#: ../src/Doc/c-api/string.rst:59
msgid ""
"Return a new string object with a copy of the string *v* as value and length "
"*len* on success, and *NULL* on failure.  If *v* is *NULL*, the contents of "
"the string are uninitialized."
msgstr ""

# d9868bf8e24f42ca807f3639bbbde335
#: ../src/Doc/c-api/string.rst:70
msgid ""
"Take a C :c:func:`printf`\\ -style *format* string and a variable number of "
"arguments, calculate the size of the resulting Python string and return a "
"string with the values formatted into it.  The variable arguments must be C "
"types and must correspond exactly to the format characters in the *format* "
"string.  The following format characters are allowed:"
msgstr ""

# 74177e94983f4e35942294612960d3f9
# f174047831114cd59d204d48afbdba19
#: ../src/Doc/c-api/string.rst:86 ../src/Doc/c-api/unicode.rst:256
msgid "Format Characters"
msgstr ""

# 34c115a9228a4cab9e2d0763b5c65943
# adddae2713714273badb4c9eccd63ecb
#: ../src/Doc/c-api/string.rst:86 ../src/Doc/c-api/unicode.rst:256
msgid "Type"
msgstr ""

# f2e6d1946a584d3da1bbb4523cbeb390
# a69221b14ca44e1594bdff91a2870b40
#: ../src/Doc/c-api/string.rst:86 ../src/Doc/c-api/unicode.rst:256
msgid "Comment"
msgstr ""

# e6cf8a20a2314d31a8f9e7d1d04cab51
# 76a6b3eb26424bf49a964339f9fb0c82
#: ../src/Doc/c-api/string.rst:88 ../src/Doc/c-api/unicode.rst:258
msgid ":attr:`%%`"
msgstr ""

# 1c887663df854760a549b96e1af7952e
# 9ddf494176b54b62af7b0bb56b05afad
#: ../src/Doc/c-api/string.rst:88 ../src/Doc/c-api/unicode.rst:258
msgid "*n/a*"
msgstr ""

# 482a4d97989a43e9baf346b25f86b4b3
# e93ca2e783e3430b929238e41a99cd6f
#: ../src/Doc/c-api/string.rst:88 ../src/Doc/c-api/unicode.rst:258
msgid "The literal % character."
msgstr ""

# 8b38d20490fb4101b753e15101951b0a
# 73600903423641dfa0b0fe85c8081a6c
#: ../src/Doc/c-api/string.rst:90 ../src/Doc/c-api/unicode.rst:260
msgid ":attr:`%c`"
msgstr ""

# 97174931f8ed44b2b217d9fcdd8584a2
# 0e416044081443948c16acebc03af59c
# c439c16833cf4424973bfe87ae84462b
# abc380cea3d349beb1c343ea64706a06
# c8f04fdc56f642be9f40df8f5c8d10a5
# a39ddd680ba1479e8d972b2524931d58
# 6bb196f2bf9b4fbea639eb3b91f188f2
# efa5a4b8df6e42518247238485b513f6
# fa6d937d12a44daeb682ff48042cfc17
# 79b444b61a6a44a49af71b04c8d8470b
# 7a68924470924a2a9e60a43de3c8e13f
# 093becc55c3847bab10abf399cc84b04
#: ../src/Doc/c-api/string.rst:90 ../src/Doc/c-api/string.rst:93
#: ../src/Doc/c-api/string.rst:117 ../src/Doc/c-api/string.rst:120
#: ../src/Doc/c-api/structures.rst:114 ../src/Doc/c-api/structures.rst:238
#: ../src/Doc/c-api/structures.rst:245 ../src/Doc/c-api/structures.rst:261
#: ../src/Doc/c-api/unicode.rst:260 ../src/Doc/c-api/unicode.rst:263
#: ../src/Doc/c-api/unicode.rst:281 ../src/Doc/c-api/unicode.rst:284
msgid "int"
msgstr ""

# a71d00bc87e2428cb499f4ebba17b134
# df84d29220ef44ecbc5890e850b5bc63
#: ../src/Doc/c-api/string.rst:90 ../src/Doc/c-api/unicode.rst:260
msgid "A single character, represented as an C int."
msgstr ""

# b5157a29b2cd48119d2c72d01ac84e8c
# 6cb8e13573d94a0bbb81b7d43e4bc8e8
#: ../src/Doc/c-api/string.rst:93 ../src/Doc/c-api/unicode.rst:263
msgid ":attr:`%d`"
msgstr ""

# b13600270664424fb4b4b54ffa4bc158
# 92a9d71188e8429cb627b52c2446a1ab
#: ../src/Doc/c-api/string.rst:93 ../src/Doc/c-api/unicode.rst:263
msgid "Exactly equivalent to ``printf(\"%d\")``."
msgstr ""

# 575248aff02f477780666a0d9a32da61
# 77fa619e45a8453aa7309b433f193892
#: ../src/Doc/c-api/string.rst:96 ../src/Doc/c-api/unicode.rst:266
msgid ":attr:`%u`"
msgstr ""

# a8a7844587c849f08d5d2c26f3311581
# 3bd30947223d433595e570b02a1b6a81
# 0a4a866a3d824a3ba7f3f7b341b8bdf4
#: ../src/Doc/c-api/string.rst:96 ../src/Doc/c-api/structures.rst:271
#: ../src/Doc/c-api/unicode.rst:266
msgid "unsigned int"
msgstr ""

# 70ddc9289988412794c6ee53d1ce9579
# 00bb4089b0c34fdcb61b907170d29fed
#: ../src/Doc/c-api/string.rst:96 ../src/Doc/c-api/unicode.rst:266
msgid "Exactly equivalent to ``printf(\"%u\")``."
msgstr ""

# 81023f18c8774aa583884d1c124e22c2
# 8e7bdf636cbd47ae9016f1b5f9c2bd01
#: ../src/Doc/c-api/string.rst:99 ../src/Doc/c-api/unicode.rst:269
msgid ":attr:`%ld`"
msgstr ""

# 3899d4ee94da422fabd338d185dd36b3
# 17308cc7e04346338ce6d82b085dff0e
# 780f16a25aea452299e15462940ca63e
#: ../src/Doc/c-api/string.rst:99 ../src/Doc/c-api/structures.rst:262
#: ../src/Doc/c-api/unicode.rst:269
msgid "long"
msgstr ""

# cdc4938da6604febb90424867765d953
# 00a73ac5171146aaae133101b8ce100d
#: ../src/Doc/c-api/string.rst:99 ../src/Doc/c-api/unicode.rst:269
msgid "Exactly equivalent to ``printf(\"%ld\")``."
msgstr ""

# 898a727884ff44199c3322120025e2b8
# ab77774a92384749a71e7f0e4108f2fd
#: ../src/Doc/c-api/string.rst:102 ../src/Doc/c-api/unicode.rst:272
msgid ":attr:`%lu`"
msgstr ""

# 3ec9d5eca75e4c818d3b799a49c6425c
# 204c37a48e5c46fbbb94abb94cee8752
# fcf4e4d4887e4b6aac15868980e14204
#: ../src/Doc/c-api/string.rst:102 ../src/Doc/c-api/structures.rst:273
#: ../src/Doc/c-api/unicode.rst:272
msgid "unsigned long"
msgstr ""

# 109d71f182b04f02a8af22d9bf65bbd8
# 4e693ff9c1e040f6b76b932b10944028
#: ../src/Doc/c-api/string.rst:102 ../src/Doc/c-api/unicode.rst:272
msgid "Exactly equivalent to ``printf(\"%lu\")``."
msgstr ""

# c3c1f24efee04b039889f7757ca76b42
#: ../src/Doc/c-api/string.rst:105
msgid ":attr:`%lld`"
msgstr ""

# 8031d8e5cf434ae7bf451cf662a777b1
# e92c6f9adc2146b4a6bc2debdca0268c
#: ../src/Doc/c-api/string.rst:105 ../src/Doc/c-api/structures.rst:275
msgid "long long"
msgstr ""

# 2244115f72ad42d5a0f959924f44f2bb
#: ../src/Doc/c-api/string.rst:105
msgid "Exactly equivalent to ``printf(\"%lld\")``."
msgstr ""

# 756f7b69a9fd4ebfac8f14b4cd55a548
#: ../src/Doc/c-api/string.rst:108
msgid ":attr:`%llu`"
msgstr ""

# 249220cc2b2341c7b676048b41078577
# 6d19dec653c440779dbdfc613f2d5aa9
#: ../src/Doc/c-api/string.rst:108 ../src/Doc/c-api/structures.rst:276
msgid "unsigned long long"
msgstr ""

# c40a738052244b8b99a09276c1f2f879
#: ../src/Doc/c-api/string.rst:108
msgid "Exactly equivalent to ``printf(\"%llu\")``."
msgstr ""

# a32023a774804a8db7dd5fc67743f4f8
# 203f28fc154e445a958295d444db17e7
#: ../src/Doc/c-api/string.rst:111 ../src/Doc/c-api/unicode.rst:275
msgid ":attr:`%zd`"
msgstr ""

# 769299e06b2046d0952b8296de417707
# d37bdf79f1184a0ba1fbf876dcccd115
# 1869f2adc2b34e93ba0db3f6941aaa4a
# 5ba5a384cd4b4ddcb96bf1e182c241bc
#: ../src/Doc/c-api/string.rst:111 ../src/Doc/c-api/structures.rst:241
#: ../src/Doc/c-api/structures.rst:277 ../src/Doc/c-api/unicode.rst:275
msgid "Py_ssize_t"
msgstr ""

# d06a480b8d984631937d7e860d1fdfed
# fb583dbc02b24edab2ab74d4ebe2d561
#: ../src/Doc/c-api/string.rst:111 ../src/Doc/c-api/unicode.rst:275
msgid "Exactly equivalent to ``printf(\"%zd\")``."
msgstr ""

# 3ac6ca715b6649ec97706cbaf36cfb31
# c0000e34d6ab4f5989edc2b1b5b85e69
#: ../src/Doc/c-api/string.rst:114 ../src/Doc/c-api/unicode.rst:278
msgid ":attr:`%zu`"
msgstr ""

# 3eb53675657f48de9cfce79f2001c94a
# a7ff044651e14e56bf8a2aadcdc077ac
#: ../src/Doc/c-api/string.rst:114 ../src/Doc/c-api/unicode.rst:278
msgid "size_t"
msgstr ""

# 80510621a2a14d42a94492406b264eec
# e5b0f3a6f8f444ac9a8e943ffafec2b3
#: ../src/Doc/c-api/string.rst:114 ../src/Doc/c-api/unicode.rst:278
msgid "Exactly equivalent to ``printf(\"%zu\")``."
msgstr ""

# 2cad7e66101c488491fe607b9a1c9bfb
# fd4d9d1d2c5d4187829684f8a70c0818
#: ../src/Doc/c-api/string.rst:117 ../src/Doc/c-api/unicode.rst:281
msgid ":attr:`%i`"
msgstr ""

# 91e2e0e5cfc74bfe9750c8c78469e825
# 42873ea03c284e43bfa382dfe5d6e681
#: ../src/Doc/c-api/string.rst:117 ../src/Doc/c-api/unicode.rst:281
msgid "Exactly equivalent to ``printf(\"%i\")``."
msgstr ""

# 5cd7e162549c4412832d0f944530a9c1
# abe7265c6bac48c6992b9fcfe5ed2396
#: ../src/Doc/c-api/string.rst:120 ../src/Doc/c-api/unicode.rst:284
msgid ":attr:`%x`"
msgstr ""

# 8d0f3c07bcf745cb9ecdb80c1088aee0
# 2bef9883b83440b5a7faa5d8a9855cf4
#: ../src/Doc/c-api/string.rst:120 ../src/Doc/c-api/unicode.rst:284
msgid "Exactly equivalent to ``printf(\"%x\")``."
msgstr ""

# aa035e0ab0b449cbb9ec2d813359475f
# bc21c2fd7919444d95eb6a677d04af27
#: ../src/Doc/c-api/string.rst:123 ../src/Doc/c-api/unicode.rst:287
msgid ":attr:`%s`"
msgstr ""

# d4c600330bfb422eb37f33cb4429c032
# 9fe159eed8d84a698ffda23ae0127a5f
#: ../src/Doc/c-api/string.rst:123 ../src/Doc/c-api/unicode.rst:287
msgid "char\\*"
msgstr ""

# 7031e3b6cf2a4d05ab859b1d05ad919e
# 8806cf32ee0c48f981d1e57b87cd276a
#: ../src/Doc/c-api/string.rst:123 ../src/Doc/c-api/unicode.rst:287
msgid "A null-terminated C character array."
msgstr ""

# 1536fba58f3e4cc6b352cf93aeda0c43
# 6ac68c2d583d4a0c8286d8049bdc1383
#: ../src/Doc/c-api/string.rst:126 ../src/Doc/c-api/unicode.rst:290
msgid ":attr:`%p`"
msgstr ""

# 895493eae7aa437e9ffa7a6504d86fa4
# a2d89a820306493895688e28e1cfad42
#: ../src/Doc/c-api/string.rst:126 ../src/Doc/c-api/unicode.rst:290
msgid "void\\*"
msgstr ""

# e82f94e2796d40698bfdd21ff462a15c
# d462e7d7121a4450a35ec24edaee908c
#: ../src/Doc/c-api/string.rst:126 ../src/Doc/c-api/unicode.rst:290
msgid ""
"The hex representation of a C pointer. Mostly equivalent to ``printf(\"%p\")"
"`` except that it is guaranteed to start with the literal ``0x`` regardless "
"of what the platform's ``printf`` yields."
msgstr ""

# ea7d671f2537480884a0d9bf97a3b523
# a79ada559e784af9af2c706b0bbcef73
#: ../src/Doc/c-api/string.rst:135 ../src/Doc/c-api/unicode.rst:314
msgid ""
"An unrecognized format character causes all the rest of the format string to "
"be copied as-is to the result string, and any extra arguments discarded."
msgstr ""

# 57d11aaf8fd542f8a8b3986168dc2e2a
#: ../src/Doc/c-api/string.rst:140
msgid ""
"The `\"%lld\"` and `\"%llu\"` format specifiers are only available when :"
"const:`HAVE_LONG_LONG` is defined."
msgstr ""

# 6fffd6320df64c2896f9729575bafe60
#: ../src/Doc/c-api/string.rst:149
msgid ""
"Identical to :c:func:`PyString_FromFormat` except that it takes exactly two "
"arguments."
msgstr ""

# 668e09c5526445708239ca8a739efc2c
#: ../src/Doc/c-api/string.rst:155
msgid "Return the length of the string in string object *string*."
msgstr ""

# 358a80acfaf14e4d9105f189a7fa3df5
#: ../src/Doc/c-api/string.rst:164
msgid "Macro form of :c:func:`PyString_Size` but without error checking."
msgstr ""

# c80c5f8563d0493bad034f996e880c75
#: ../src/Doc/c-api/string.rst:173
msgid ""
"Return a NUL-terminated representation of the contents of *string*.  The "
"pointer refers to the internal buffer of *string*, not a copy.  The data "
"must not be modified in any way, unless the string was just created using "
"``PyString_FromStringAndSize(NULL, size)``. It must not be deallocated.  If "
"*string* is a Unicode object, this function computes the default encoding of "
"*string* and operates on that.  If *string* is not a string object at all, :"
"c:func:`PyString_AsString` returns *NULL* and raises :exc:`TypeError`."
msgstr ""

# 3f9369572d284516adb7424f82ef0e95
#: ../src/Doc/c-api/string.rst:184
msgid ""
"Macro form of :c:func:`PyString_AsString` but without error checking.  Only "
"string objects are supported; no Unicode objects should be passed."
msgstr ""

# c1ed4cbf01a84ef8a0d76bd3470af74b
#: ../src/Doc/c-api/string.rst:190
msgid ""
"Return a NUL-terminated representation of the contents of the object *obj* "
"through the output variables *buffer* and *length*."
msgstr ""

# 5de5930fd76c47d59c0c1e5f99aa5ed0
#: ../src/Doc/c-api/string.rst:193
msgid ""
"The function accepts both string and Unicode objects as input. For Unicode "
"objects it returns the default encoded version of the object.  If *length* "
"is *NULL*, the resulting buffer may not contain NUL characters; if it does, "
"the function returns ``-1`` and a :exc:`TypeError` is raised."
msgstr ""

# 1ae8b89a636b43e291413bc28fcbff0c
#: ../src/Doc/c-api/string.rst:198
msgid ""
"The buffer refers to an internal string buffer of *obj*, not a copy. The "
"data must not be modified in any way, unless the string was just created "
"using ``PyString_FromStringAndSize(NULL, size)``.  It must not be "
"deallocated.  If *string* is a Unicode object, this function computes the "
"default encoding of *string* and operates on that.  If *string* is not a "
"string object at all, :c:func:`PyString_AsStringAndSize` returns ``-1`` and "
"raises :exc:`TypeError`."
msgstr ""

# 73db13532c41407b9fe4fd9acbaddac3
#: ../src/Doc/c-api/string.rst:212
msgid ""
"Create a new string object in *\\*string* containing the contents of "
"*newpart* appended to *string*; the caller will own the new reference.  The "
"reference to the old value of *string* will be stolen.  If the new string "
"cannot be created, the old reference to *string* will still be discarded and "
"the value of *\\*string* will be set to *NULL*; the appropriate exception "
"will be set."
msgstr ""

# 54ffe94a207e4907bbd4f707f9768c16
#: ../src/Doc/c-api/string.rst:221
msgid ""
"Create a new string object in *\\*string* containing the contents of "
"*newpart* appended to *string*.  This version decrements the reference count "
"of *newpart*."
msgstr ""

# 60a017791bc140658482800f9415ebd6
#: ../src/Doc/c-api/string.rst:227
msgid ""
"A way to resize a string object even though it is \"immutable\". Only use "
"this to build up a brand new string object; don't use this if the string may "
"already be known in other parts of the code.  It is an error to call this "
"function if the refcount on the input string object is not one. Pass the "
"address of an existing string object as an lvalue (it may be written into), "
"and the new size desired. On success, *\\*string* holds the resized string "
"object and ``0`` is returned; the address in *\\*string* may differ from its "
"input value.  If the reallocation fails, the original string object at *"
"\\*string* is deallocated, *\\*string* is set to *NULL*, a memory exception "
"is set, and ``-1`` is returned."
msgstr ""

# 6465ba9c6bc0423eaf20a114e73d2af2
#: ../src/Doc/c-api/string.rst:243
msgid ""
"Return a new string object from *format* and *args*. Analogous to ``format % "
"args``.  The *args* argument must be a tuple."
msgstr ""

# 5f0b906275a54c678a4e8a2780400d80
#: ../src/Doc/c-api/string.rst:249
msgid ""
"Intern the argument *\\*string* in place.  The argument must be the address "
"of a pointer variable pointing to a Python string object.  If there is an "
"existing interned string that is the same as *\\*string*, it sets *"
"\\*string* to it (decrementing the reference count of the old string object "
"and incrementing the reference count of the interned string object), "
"otherwise it leaves *\\*string* alone and interns it (incrementing its "
"reference count).  (Clarification: even though there is a lot of talk about "
"reference counts, think of this function as reference-count-neutral; you own "
"the object after the call if and only if you owned it before the call.)"
msgstr ""

# fb4b9da7a60d4b228c0255a3dce7b29b
# 31033ad8d3ba4330813597b97170715f
# 5fd7be0dd4fb455bbab02695c0bd21d7
# 74b63fef705b493c91ca5efc2196285e
# d2e31ba3a4e04d85929f9d05866dffba
# 69fb270077474c19a92090c55bb0e529
#: ../src/Doc/c-api/string.rst:261 ../src/Doc/c-api/string.rst:273
#: ../src/Doc/c-api/string.rst:286 ../src/Doc/c-api/string.rst:303
#: ../src/Doc/c-api/string.rst:316 ../src/Doc/c-api/string.rst:333
msgid ""
"This function is not available in 3.x and does not have a PyBytes alias."
msgstr ""

# e3f9b27d1a744830ad0807d0536ff45e
#: ../src/Doc/c-api/string.rst:266
msgid ""
"A combination of :c:func:`PyString_FromString` and :c:func:"
"`PyString_InternInPlace`, returning either a new string object that has been "
"interned, or a new (\"owned\") reference to an earlier interned string "
"object with the same value."
msgstr ""

# 362daed38b644369bf5f2ee3cdef6f4d
#: ../src/Doc/c-api/string.rst:278
msgid ""
"Create an object by decoding *size* bytes of the encoded buffer *s* using "
"the codec registered for *encoding*.  *encoding* and *errors* have the same "
"meaning as the parameters of the same name in the :func:`unicode` built-in "
"function. The codec to be used is looked up using the Python codec "
"registry.  Return *NULL* if an exception was raised by the codec."
msgstr ""

# b18d63b8c5b547ec9271c7045a5afaf1
#: ../src/Doc/c-api/string.rst:295
msgid ""
"Decode a string object by passing it to the codec registered for *encoding* "
"and return the result as Python object. *encoding* and *errors* have the "
"same meaning as the parameters of the same name in the string :meth:`encode` "
"method. The codec to be used is looked up using the Python codec registry. "
"Return *NULL* if an exception was raised by the codec."
msgstr ""

# d81534fd3ea344c98ee119f603508465
#: ../src/Doc/c-api/string.rst:308
msgid ""
"Encode the :c:type:`char` buffer of the given size by passing it to the "
"codec registered for *encoding* and return a Python object. *encoding* and "
"*errors* have the same meaning as the parameters of the same name in the "
"string :meth:`encode` method. The codec to be used is looked up using the "
"Python codec registry.  Return *NULL* if an exception was raised by the "
"codec."
msgstr ""

# 3486cb4adcce42beb5b986009d48f32a
#: ../src/Doc/c-api/string.rst:325
msgid ""
"Encode a string object using the codec registered for *encoding* and return "
"the result as Python object. *encoding* and *errors* have the same meaning "
"as the parameters of the same name in the string :meth:`encode` method. The "
"codec to be used is looked up using the Python codec registry. Return *NULL* "
"if an exception was raised by the codec."
msgstr ""

#: ../src/Doc/c-api/structures.rst:6
msgid "Common Object Structures"
msgstr ""

#: ../src/Doc/c-api/structures.rst:8
msgid ""
"There are a large number of structures which are used in the definition of "
"object types for Python.  This section describes these structures and how "
"they are used."
msgstr ""

# 0367cbf849b646afb775b3fca1e52028
#: ../src/Doc/c-api/structures.rst:12
msgid ""
"All Python objects ultimately share a small number of fields at the "
"beginning of the object's representation in memory.  These are represented "
"by the :c:type:`PyObject` and :c:type:`PyVarObject` types, which are "
"defined, in turn, by the expansions of some macros also used, whether "
"directly or indirectly, in the definition of all other Python objects."
msgstr ""

# 64d786fffd5c47d086f2a236ac43d693
#: ../src/Doc/c-api/structures.rst:21
msgid ""
"All object types are extensions of this type.  This is a type which contains "
"the information Python needs to treat a pointer to an object as an object.  "
"In a normal \"release\" build, it contains only the object's reference count "
"and a pointer to the corresponding type object.  It corresponds to the "
"fields defined by the expansion of the ``PyObject_HEAD`` macro."
msgstr ""

# 696c0c9726f8410180ae5c748caa8076
#: ../src/Doc/c-api/structures.rst:31
msgid ""
"This is an extension of :c:type:`PyObject` that adds the :attr:`ob_size` "
"field.  This is only used for objects that have some notion of *length*. "
"This type does not often appear in the Python/C API.  It corresponds to the "
"fields defined by the expansion of the ``PyObject_VAR_HEAD`` macro."
msgstr ""

# cb32fa30a53445d7885da412b74892c5
#: ../src/Doc/c-api/structures.rst:36
msgid ""
"These macros are used in the definition of :c:type:`PyObject` and :c:type:"
"`PyVarObject`:"
msgstr ""

# 457b28c8c86441758c5a029698a95546
#: ../src/Doc/c-api/structures.rst:42
msgid ""
"This is a macro which expands to the declarations of the fields of the :c:"
"type:`PyObject` type; it is used when declaring new types which represent "
"objects without a varying length.  The specific fields it expands to depend "
"on the definition of :c:macro:`Py_TRACE_REFS`.  By default, that macro is "
"not defined, and :c:macro:`PyObject_HEAD` expands to::"
msgstr ""

# bdc3a876820949eea400876030b69d09
#: ../src/Doc/c-api/structures.rst:51
msgid "When :c:macro:`Py_TRACE_REFS` is defined, it expands to::"
msgstr ""

# f812a497639b49a19e790b93152d3420
#: ../src/Doc/c-api/structures.rst:60
msgid ""
"This is a macro which expands to the declarations of the fields of the :c:"
"type:`PyVarObject` type; it is used when declaring new types which represent "
"objects with a length that varies from instance to instance. This macro "
"always expands to::"
msgstr ""

# 178e41483e10423f9f7b56ad2d0641c2
#: ../src/Doc/c-api/structures.rst:68
msgid ""
"Note that :c:macro:`PyObject_HEAD` is part of the expansion, and that its "
"own expansion varies depending on the definition of :c:macro:`Py_TRACE_REFS`."
msgstr ""

# 706f45bea2ff4e1f8e8bee946f430c4d
#: ../src/Doc/c-api/structures.rst:74
msgid ""
"This is a macro which expands to initialization values for a new :c:type:"
"`PyObject` type.  This macro expands to::"
msgstr ""

# 80e7ae46a3e949a08c47a40c8d29ae0a
#: ../src/Doc/c-api/structures.rst:83
msgid ""
"This is a macro which expands to initialization values for a new :c:type:"
"`PyVarObject` type, including the :attr:`ob_size` field. This macro expands "
"to::"
msgstr ""

# 868f799a49974e87b9614d4b31363f7e
#: ../src/Doc/c-api/structures.rst:93
msgid ""
"Type of the functions used to implement most Python callables in C. "
"Functions of this type take two :c:type:`PyObject\\*` parameters and return "
"one such value.  If the return value is *NULL*, an exception shall have been "
"set.  If not *NULL*, the return value is interpreted as the return value of "
"the function as exposed in Python.  The function must return a new reference."
msgstr ""

# e812116dd15f461793c81e86178d8a2d
#: ../src/Doc/c-api/structures.rst:103
msgid ""
"Structure used to describe a method of an extension type.  This structure "
"has four fields:"
msgstr ""

# a21acc3c6c33481988999f06a4f9e75f
# fa0d88cafad14059bdc7327c35995447
#: ../src/Doc/c-api/structures.rst:107 ../src/Doc/c-api/structures.rst:234
msgid "Field"
msgstr ""

# 5e16fdf926724c0cbf39b602ae895c79
# 93e76772dbee4374ba5245712f9ddd9e
#: ../src/Doc/c-api/structures.rst:107 ../src/Doc/c-api/structures.rst:234
msgid "C Type"
msgstr ""

# 565d533de6de4c64ab0f5ea2eba6e876
# 675f80e8ea4642e98ad4aa260143478f
#: ../src/Doc/c-api/structures.rst:107 ../src/Doc/c-api/structures.rst:234
msgid "Meaning"
msgstr ""

# 4bfaa3e688ed45bb8cec3a36d3f63da2
#: ../src/Doc/c-api/structures.rst:109
msgid ":attr:`ml_name`"
msgstr ""

# 054be95c6d064ee38d5614f8915f6142
# 70381bfbd40242829e071ddbb1d595fe
# 8ee48a2d9bc4469594c0cccf3f830afe
# abe787a7dd814b63ad962cdb3c9f93c2
# 8ab4d1037a5544f194ac7a4f52eb4b3e
#: ../src/Doc/c-api/structures.rst:109 ../src/Doc/c-api/structures.rst:117
#: ../src/Doc/c-api/structures.rst:236 ../src/Doc/c-api/structures.rst:249
#: ../src/Doc/c-api/structures.rst:265
msgid "char \\*"
msgstr ""

# 698970b09a2d4f288d477a24816bf76f
#: ../src/Doc/c-api/structures.rst:109
msgid "name of the method"
msgstr ""

# 9f73e0c879174ddf9d63605dd1d49514
#: ../src/Doc/c-api/structures.rst:111
msgid ":attr:`ml_meth`"
msgstr ""

#: ../src/Doc/c-api/structures.rst:111
#, fuzzy
msgid "PyCFunction"
msgstr "Fonction de l'API"

# f0e0ebd4616747fabc89da9a558d67ec
#: ../src/Doc/c-api/structures.rst:111
msgid "pointer to the C implementation"
msgstr ""

# 2b528d8603244c96a4d4e1de5143fced
#: ../src/Doc/c-api/structures.rst:114
msgid ":attr:`ml_flags`"
msgstr ""

# b59d70fc6b834edca5f6ffe8d727cafa
#: ../src/Doc/c-api/structures.rst:114
msgid "flag bits indicating how the call should be constructed"
msgstr ""

# ae2354f9c940499e9584e05c7bfdf8c4
#: ../src/Doc/c-api/structures.rst:117
msgid ":attr:`ml_doc`"
msgstr ""

# f3aa35e7294848a48ccf6a5a2635663e
# 3937fd84a1514e2b80602f31e3d80e8a
#: ../src/Doc/c-api/structures.rst:117 ../src/Doc/c-api/structures.rst:249
msgid "points to the contents of the docstring"
msgstr ""

# a30a6ae923ce475b9bdeb26a6f665571
#: ../src/Doc/c-api/structures.rst:121
msgid ""
"The :attr:`ml_meth` is a C function pointer.  The functions may be of "
"different types, but they always return :c:type:`PyObject\\*`.  If the "
"function is not of the :c:type:`PyCFunction`, the compiler will require a "
"cast in the method table. Even though :c:type:`PyCFunction` defines the "
"first parameter as :c:type:`PyObject\\*`, it is common that the method "
"implementation uses a the specific C type of the *self* object."
msgstr ""

#: ../src/Doc/c-api/structures.rst:128
msgid ""
"The :attr:`ml_flags` field is a bitfield which can include the following "
"flags. The individual flags indicate either a calling convention or a "
"binding convention.  Of the calling convention flags, only :const:"
"`METH_VARARGS` and :const:`METH_KEYWORDS` can be combined (but note that :"
"const:`METH_KEYWORDS` alone is equivalent to ``METH_VARARGS | "
"METH_KEYWORDS``). Any of the calling convention flags can be combined with a "
"binding flag."
msgstr ""

# 196fde1eccc549a488aa68416c5f14d9
#: ../src/Doc/c-api/structures.rst:138
msgid ""
"This is the typical calling convention, where the methods have the type :c:"
"type:`PyCFunction`. The function expects two :c:type:`PyObject\\*` values. "
"The first one is the *self* object for methods; for module functions, it is "
"the module object.  The second parameter (often called *args*) is a tuple "
"object representing all arguments.  This parameter is typically processed "
"using :c:func:`PyArg_ParseTuple` or :c:func:`PyArg_UnpackTuple`."
msgstr ""

# 9a8f167da31447798a50dcbfc8174cd6
#: ../src/Doc/c-api/structures.rst:148
msgid ""
"Methods with these flags must be of type :c:type:`PyCFunctionWithKeywords`. "
"The function expects three parameters: *self*, *args*, and a dictionary of "
"all the keyword arguments.  The flag is typically combined with :const:"
"`METH_VARARGS`, and the parameters are typically processed using :c:func:"
"`PyArg_ParseTupleAndKeywords`."
msgstr ""

# 714038882214442fb197c4f75830eadc
#: ../src/Doc/c-api/structures.rst:157
msgid ""
"Methods without parameters don't need to check whether arguments are given "
"if they are listed with the :const:`METH_NOARGS` flag.  They need to be of "
"type :c:type:`PyCFunction`.  The first parameter is typically named ``self`` "
"and will hold a reference to the module or object instance.  In all cases "
"the second parameter will be *NULL*."
msgstr ""

# 5d6c1b47e0b24580bc573c2ee2022984
#: ../src/Doc/c-api/structures.rst:166
msgid ""
"Methods with a single object argument can be listed with the :const:`METH_O` "
"flag, instead of invoking :c:func:`PyArg_ParseTuple` with a ``\"O\"`` "
"argument. They have the type :c:type:`PyCFunction`, with the *self* "
"parameter, and a :c:type:`PyObject\\*` parameter representing the single "
"argument."
msgstr ""

# 2ee3597ad416430999963e2a4e3eba83
#: ../src/Doc/c-api/structures.rst:174
msgid ""
"This calling convention is deprecated.  The method must be of type :c:type:"
"`PyCFunction`.  The second argument is *NULL* if no arguments are given, a "
"single object if exactly one argument is given, and a tuple of objects if "
"more than one argument is given.  There is no way for a function using this "
"convention to distinguish between a call with multiple arguments and a call "
"with a tuple as the only argument."
msgstr ""

#: ../src/Doc/c-api/structures.rst:181
msgid ""
"These two constants are not used to indicate the calling convention but the "
"binding when use with methods of classes.  These may not be used for "
"functions defined for modules.  At most one of these flags may be set for "
"any given method."
msgstr ""

#: ../src/Doc/c-api/structures.rst:191
msgid ""
"The method will be passed the type object as the first parameter rather than "
"an instance of the type.  This is used to create *class methods*, similar to "
"what is created when using the :func:`classmethod` built-in function."
msgstr ""

#: ../src/Doc/c-api/structures.rst:203
msgid ""
"The method will be passed *NULL* as the first parameter rather than an "
"instance of the type.  This is used to create *static methods*, similar to "
"what is created when using the :func:`staticmethod` built-in function."
msgstr ""

#: ../src/Doc/c-api/structures.rst:209
msgid ""
"One other constant controls whether a method is loaded in place of another "
"definition with the same method name."
msgstr ""

#: ../src/Doc/c-api/structures.rst:215
msgid ""
"The method will be loaded in place of existing definitions.  Without "
"*METH_COEXIST*, the default is to skip repeated definitions.  Since slot "
"wrappers are loaded before the method table, the existence of a "
"*sq_contains* slot, for example, would generate a wrapped method named :meth:"
"`__contains__` and preclude the loading of a corresponding PyCFunction with "
"the same name.  With the flag defined, the PyCFunction will be loaded in "
"place of the wrapper object and will co-exist with the slot.  This is "
"helpful because calls to PyCFunctions are optimized more than wrapper object "
"calls."
msgstr ""

# 9f37a7202a5f42d79677ec9919b7552e
#: ../src/Doc/c-api/structures.rst:230
msgid ""
"Structure which describes an attribute of a type which corresponds to a C "
"struct member.  Its fields are:"
msgstr ""

# 3b3fd133c157434d94d106502f825198
#: ../src/Doc/c-api/structures.rst:236
msgid ":attr:`name`"
msgstr ""

# dafe1759e07348c58d389ca11ea82620
#: ../src/Doc/c-api/structures.rst:236
msgid "name of the member"
msgstr ""

# d4089cb5661f4744b45bd3d9b67a790c
#: ../src/Doc/c-api/structures.rst:238
msgid ":attr:`type`"
msgstr ""

# 0fe73bbf567a4b84a27fb7a1e3af90de
#: ../src/Doc/c-api/structures.rst:238
msgid "the type of the member in the C struct"
msgstr ""

# 8693e5dd246b4cc2992bfef396de7e0d
#: ../src/Doc/c-api/structures.rst:241
msgid ":attr:`offset`"
msgstr ""

# 82c5fd0c832d48fcbee88f1389f99388
#: ../src/Doc/c-api/structures.rst:241
msgid ""
"the offset in bytes that the member is located on the type's object struct"
msgstr ""

# d3994b04985846e2a5112f11deba18bf
#: ../src/Doc/c-api/structures.rst:245
msgid ":attr:`flags`"
msgstr ""

# c5cdd94c4bb44aabad40205cd79e8aa0
#: ../src/Doc/c-api/structures.rst:245
msgid "flag bits indicating if the field should be read-only or writable"
msgstr ""

# c263d69f2af143098010fc76e4222f3e
#: ../src/Doc/c-api/structures.rst:249
msgid ":attr:`doc`"
msgstr ""

# 6ba48a610ec34de3bb05805a9eb2c7fe
#: ../src/Doc/c-api/structures.rst:253
msgid ""
":attr:`type` can be one of many ``T_`` macros corresponding to various C "
"types.  When the member is accessed in Python, it will be converted to the "
"equivalent Python type."
msgstr ""

#: ../src/Doc/c-api/structures.rst:258
#, fuzzy
msgid "Macro name"
msgstr "Macros"

# 8b10db8f1b8a4f0b85af7dbeabb55e56
#: ../src/Doc/c-api/structures.rst:258
msgid "C type"
msgstr ""

# ae6ff91cf6254a28bbe74667dc43096c
#: ../src/Doc/c-api/structures.rst:260
msgid "T_SHORT"
msgstr ""

# 77c15c5d93f04405a97d695eba0712f0
#: ../src/Doc/c-api/structures.rst:260
msgid "short"
msgstr ""

# 254bfadf2ee14f35bb08c526e19ce05e
#: ../src/Doc/c-api/structures.rst:261
msgid "T_INT"
msgstr ""

# 39354eaadb264edbbd2e40524a43a495
#: ../src/Doc/c-api/structures.rst:262
msgid "T_LONG"
msgstr ""

# 0892ac46d36a41e09eeedaf68c83e897
#: ../src/Doc/c-api/structures.rst:263
msgid "T_FLOAT"
msgstr ""

# eba75e6c082841a5934ce0c1135e0545
#: ../src/Doc/c-api/structures.rst:263
msgid "float"
msgstr ""

# d3cc0094786a4c7498f5c7591df64f87
#: ../src/Doc/c-api/structures.rst:264
msgid "T_DOUBLE"
msgstr ""

# 380acb5e9e214bc9a1f70fd6d26cd63b
#: ../src/Doc/c-api/structures.rst:264
msgid "double"
msgstr ""

# 0dc42975b7d54ac5b2e1a57c1e9de2f0
#: ../src/Doc/c-api/structures.rst:265
msgid "T_STRING"
msgstr ""

# 53bc63a7174a43a6aa11a9dbfd05c237
#: ../src/Doc/c-api/structures.rst:266
msgid "T_OBJECT"
msgstr ""

# 46d2628bbb834373a0325141402b4112
# 7a3eb81975cd4b878672c6ff0f1a4627
#: ../src/Doc/c-api/structures.rst:266 ../src/Doc/c-api/structures.rst:267
msgid "PyObject \\*"
msgstr ""

# 9041f4884efd4e1582e6ca38185334cd
#: ../src/Doc/c-api/structures.rst:267
msgid "T_OBJECT_EX"
msgstr ""

# b57bf130475c45ae8db0fd7e183a21cf
#: ../src/Doc/c-api/structures.rst:268
msgid "T_CHAR"
msgstr ""

# 02a9ac77037f4399abc78f55ad210bd9
# c2c4a11738314f289754a3483dd53a64
# a5deeb5df896453b8d5847bd18300985
#: ../src/Doc/c-api/structures.rst:268 ../src/Doc/c-api/structures.rst:269
#: ../src/Doc/c-api/structures.rst:274
msgid "char"
msgstr ""

# 50a0322a9b2140728ad90ced12f42a0f
#: ../src/Doc/c-api/structures.rst:269
msgid "T_BYTE"
msgstr ""

# 9528b5b07eb440db92ec562a47d93256
#: ../src/Doc/c-api/structures.rst:270
msgid "T_UBYTE"
msgstr ""

# 8d4ff42547f3481f9278046c9399a4fd
#: ../src/Doc/c-api/structures.rst:270
msgid "unsigned char"
msgstr ""

# 1ce44060622a48a08ee03bbbeeb7673d
#: ../src/Doc/c-api/structures.rst:271
msgid "T_UINT"
msgstr ""

# f8e61c71481349b19058a427f4773c2b
#: ../src/Doc/c-api/structures.rst:272
msgid "T_USHORT"
msgstr ""

# b64cd38b6eeb4bd7a24230ee7552dae2
#: ../src/Doc/c-api/structures.rst:272
msgid "unsigned short"
msgstr ""

# f0457fc362154141a049ff3ce9587fa6
#: ../src/Doc/c-api/structures.rst:273
msgid "T_ULONG"
msgstr ""

# 86630d26915f4447a76ae3cc954be836
#: ../src/Doc/c-api/structures.rst:274
msgid "T_BOOL"
msgstr ""

# 3449aa6472a34305aeb23451a0843cd2
#: ../src/Doc/c-api/structures.rst:275
msgid "T_LONGLONG"
msgstr ""

# 74ecea848d004dd093db7a4cc3beb300
#: ../src/Doc/c-api/structures.rst:276
msgid "T_ULONGLONG"
msgstr ""

# 4e3acdc309bf48e8a46aa4ce9c7424d1
#: ../src/Doc/c-api/structures.rst:277
msgid "T_PYSSIZET"
msgstr ""

# 737f53cb0a004ea89a1b6e4ea5f005bd
#: ../src/Doc/c-api/structures.rst:280
msgid ""
":c:macro:`T_OBJECT` and :c:macro:`T_OBJECT_EX` differ in that :c:macro:"
"`T_OBJECT` returns ``None`` if the member is *NULL* and :c:macro:"
"`T_OBJECT_EX` raises an :exc:`AttributeError`.  Try to use :c:macro:"
"`T_OBJECT_EX` over :c:macro:`T_OBJECT` because :c:macro:`T_OBJECT_EX` "
"handles use of the :keyword:`del` statement on that attribute more correctly "
"than :c:macro:`T_OBJECT`."
msgstr ""

# 946ebd54d3f34181afc9acef039e6218
#: ../src/Doc/c-api/structures.rst:287
msgid ""
":attr:`flags` can be 0 for write and read access or :c:macro:`READONLY` for "
"read-only access.  Using :c:macro:`T_STRING` for :attr:`type` implies :c:"
"macro:`READONLY`.  Only :c:macro:`T_OBJECT` and :c:macro:`T_OBJECT_EX` "
"members can be deleted.  (They are set to *NULL*)."
msgstr ""

# 1cf28d4241194bc789c79fad9451a8e0
#: ../src/Doc/c-api/structures.rst:295
msgid ""
"Return a bound method object for an extension type implemented in C.  This "
"can be useful in the implementation of a :attr:`tp_getattro` or :attr:"
"`tp_getattr` handler that does not use the :c:func:`PyObject_GenericGetAttr` "
"function."
msgstr ""

#: ../src/Doc/c-api/sys.rst:6
msgid "Operating System Utilities"
msgstr ""

# 4f09da4a0a754a76a1860efddd8d65b3
#: ../src/Doc/c-api/sys.rst:11
msgid ""
"Return true (nonzero) if the standard I/O file *fp* with name *filename* is "
"deemed interactive.  This is the case for files for which ``isatty(fileno"
"(fp))`` is true.  If the global flag :c:data:`Py_InteractiveFlag` is true, "
"this function also returns true if the *filename* pointer is *NULL* or if "
"the name is equal to one of the strings ``'<stdin>'`` or ``'???'``."
msgstr ""

# ae81b58687df4631adeaf65ea498669d
#: ../src/Doc/c-api/sys.rst:20
msgid ""
"Function to update some internal state after a process fork; this should be "
"called in the new process if the Python interpreter will continue to be "
"used. If a new executable is loaded into the new process, this function does "
"not need to be called."
msgstr ""

# f5573c074c084c77a77091069743484f
#: ../src/Doc/c-api/sys.rst:28
msgid ""
"Return true when the interpreter runs out of stack space.  This is a "
"reliable check, but is only available when :const:`USE_STACKCHECK` is "
"defined (currently on Windows using the Microsoft Visual C++ compiler).  :"
"const:`USE_STACKCHECK` will be defined automatically; you should never "
"change the definition in your own code."
msgstr ""

# d0c16e8e7eff483786605a394477c625
#: ../src/Doc/c-api/sys.rst:37
msgid ""
"Return the current signal handler for signal *i*.  This is a thin wrapper "
"around either :c:func:`sigaction` or :c:func:`signal`.  Do not call those "
"functions directly! :c:type:`PyOS_sighandler_t` is a typedef alias for :c:"
"type:`void (\\*)(int)`."
msgstr ""

# c8676afed9d94c81bc77897ba5a525ea
#: ../src/Doc/c-api/sys.rst:45
msgid ""
"Set the signal handler for signal *i* to be *h*; return the old signal "
"handler. This is a thin wrapper around either :c:func:`sigaction` or :c:func:"
"`signal`.  Do not call those functions directly!  :c:type:"
"`PyOS_sighandler_t` is a typedef alias for :c:type:`void (\\*)(int)`."
msgstr ""

#: ../src/Doc/c-api/sys.rst:53
msgid "System Functions"
msgstr ""

#: ../src/Doc/c-api/sys.rst:55
msgid ""
"These are utility functions that make functionality from the :mod:`sys` "
"module accessible to C code.  They all work with the current interpreter "
"thread's :mod:`sys` module's dict, which is contained in the internal thread "
"state structure."
msgstr ""

# 55c24297ad004981a3263b9cb3ed579e
#: ../src/Doc/c-api/sys.rst:61
msgid ""
"Return the object *name* from the :mod:`sys` module or *NULL* if it does not "
"exist, without setting an exception."
msgstr ""

# 6b4a3cc090ed4094b7a879427c57af8e
#: ../src/Doc/c-api/sys.rst:66
msgid ""
"Return the :c:type:`FILE*` associated with the object *name* in the :mod:"
"`sys` module, or *def* if *name* is not in the module or is not associated "
"with a :c:type:`FILE*`."
msgstr ""

# 7d04dad4369e409ebe3947298660d0de
#: ../src/Doc/c-api/sys.rst:72
msgid ""
"Set *name* in the :mod:`sys` module to *v* unless *v* is *NULL*, in which "
"case *name* is deleted from the sys module. Returns ``0`` on success, ``-1`` "
"on error."
msgstr ""

# 70cca2f82b33424e8f704ca5f8588eae
#: ../src/Doc/c-api/sys.rst:78
msgid "Reset :data:`sys.warnoptions` to an empty list."
msgstr ""

# 7b2dc7b68bcb4c01bf400612f70f3ba5
#: ../src/Doc/c-api/sys.rst:82
msgid "Append *s* to :data:`sys.warnoptions`."
msgstr ""

# 9db827283cdc45478aea90d9139cb27e
#: ../src/Doc/c-api/sys.rst:86
msgid ""
"Set :data:`sys.path` to a list object of paths found in *path* which should "
"be a list of paths separated with the platform's search path delimiter (``:"
"`` on Unix, ``;`` on Windows)."
msgstr ""

# 569597333bc046e18aaf38b362d8a783
#: ../src/Doc/c-api/sys.rst:92
msgid ""
"Write the output string described by *format* to :data:`sys.stdout`.  No "
"exceptions are raised, even if truncation occurs (see below)."
msgstr ""

# 4a96b73b1378419bbf7f1a976de1d76b
#: ../src/Doc/c-api/sys.rst:95
msgid ""
"*format* should limit the total size of the formatted output string to 1000 "
"bytes or less -- after 1000 bytes, the output string is truncated. In "
"particular, this means that no unrestricted \"%s\" formats should occur; "
"these should be limited using \"%.<N>s\" where <N> is a decimal number "
"calculated so that <N> plus the maximum size of other formatted text does "
"not exceed 1000 bytes.  Also watch out for \"%f\", which can print hundreds "
"of digits for very large numbers."
msgstr ""

# f95dc493d7f743308db1f8c38eaaae03
#: ../src/Doc/c-api/sys.rst:103
msgid ""
"If a problem occurs, or :data:`sys.stdout` is unset, the formatted message "
"is written to the real (C level) *stdout*."
msgstr ""

# 0d93fe36283041f5812e2f98afec9e3b
#: ../src/Doc/c-api/sys.rst:108
msgid "As above, but write to :data:`sys.stderr` or *stderr* instead."
msgstr ""

#: ../src/Doc/c-api/sys.rst:114
msgid "Process Control"
msgstr ""

# c002e7895f3344bda93e2aa68840c710
#: ../src/Doc/c-api/sys.rst:121
msgid ""
"Print a fatal error message and kill the process.  No cleanup is performed. "
"This function should only be invoked when a condition is detected that would "
"make it dangerous to continue using the Python interpreter; e.g., when the "
"object administration appears to be corrupted.  On Unix, the standard C "
"library function :c:func:`abort` is called which will attempt to produce a :"
"file:`core` file."
msgstr ""

# 7f39053c0f554a4982f67375770fc3e4
#: ../src/Doc/c-api/sys.rst:135
msgid ""
"Exit the current process.  This calls :c:func:`Py_Finalize` and then calls "
"the standard C library function ``exit(status)``."
msgstr ""

# 741f0d27f2e845ada5ed719b6dcd88f2
#: ../src/Doc/c-api/sys.rst:145
msgid ""
"Register a cleanup function to be called by :c:func:`Py_Finalize`.  The "
"cleanup function will be called with no arguments and should return no "
"value.  At most 32 cleanup functions can be registered.  When the "
"registration is successful, :c:func:`Py_AtExit` returns ``0``; on failure, "
"it returns ``-1``.  The cleanup function registered last is called first. "
"Each cleanup function will be called at most once.  Since Python's internal "
"finalization will have completed before the cleanup function, no Python APIs "
"should be called by *func*."
msgstr ""

#: ../src/Doc/c-api/tuple.rst:6
msgid "Tuple Objects"
msgstr ""

# 84a27204a613430cb9e1c5eba98f1519
#: ../src/Doc/c-api/tuple.rst:13
msgid "This subtype of :c:type:`PyObject` represents a Python tuple object."
msgstr ""

# a038f3906807494bb78cb638492830bf
#: ../src/Doc/c-api/tuple.rst:20
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python tuple type; it "
"is the same object as ``tuple`` and ``types.TupleType`` in the Python layer.."
msgstr ""

# 9584f992e44b4133a4d96966cd95d25c
#: ../src/Doc/c-api/tuple.rst:26
msgid ""
"Return true if *p* is a tuple object or an instance of a subtype of the "
"tuple type."
msgstr ""

# 41fac42e9e704deb98c5dfed0113fe33
#: ../src/Doc/c-api/tuple.rst:35
msgid ""
"Return true if *p* is a tuple object, but not an instance of a subtype of "
"the tuple type."
msgstr ""

# 90e43eedaed04490875125bcb1b867d4
#: ../src/Doc/c-api/tuple.rst:43
msgid "Return a new tuple object of size *len*, or *NULL* on failure."
msgstr ""

# 8a88e79ceda14d069e99b63e28909b7a
#: ../src/Doc/c-api/tuple.rst:52
msgid ""
"Return a new tuple object of size *n*, or *NULL* on failure. The tuple "
"values are initialized to the subsequent *n* C arguments pointing to Python "
"objects. ``PyTuple_Pack(2, a, b)`` is equivalent to ``Py_BuildValue"
"(\"(OO)\", a, b)``."
msgstr ""

# 09e6d06370034173a51ba2ceea0bf8c1
#: ../src/Doc/c-api/tuple.rst:65
msgid "Take a pointer to a tuple object, and return the size of that tuple."
msgstr ""

# da177a29f5164f4db0b3e2aa2806c7a0
#: ../src/Doc/c-api/tuple.rst:74
msgid ""
"Return the size of the tuple *p*, which must be non-*NULL* and point to a "
"tuple; no error checking is performed."
msgstr ""

# ad3d4f6857e24db09f241baf5dd8dbb8
#: ../src/Doc/c-api/tuple.rst:84
msgid ""
"Return the object at position *pos* in the tuple pointed to by *p*.  If "
"*pos* is out of bounds, return *NULL* and sets an :exc:`IndexError` "
"exception."
msgstr ""

# 39a7d87c8f3e4bce8512c238788e2c76
#: ../src/Doc/c-api/tuple.rst:94
msgid "Like :c:func:`PyTuple_GetItem`, but does no checking of its arguments."
msgstr ""

# 34beaeac342342ad88614e4e07a1fe89
#: ../src/Doc/c-api/tuple.rst:103
msgid ""
"Take a slice of the tuple pointed to by *p* from *low* to *high* and return "
"it as a new tuple."
msgstr ""

# 45fa616cc8ac4016831f163ac94c3799
#: ../src/Doc/c-api/tuple.rst:113
msgid ""
"Insert a reference to object *o* at position *pos* of the tuple pointed to "
"by *p*. Return ``0`` on success."
msgstr ""

# bb5b11356fc645c886d3c4cc7f6c70a0
# 32ced2f2cc54412782bd39f0f01cd0c1
#: ../src/Doc/c-api/tuple.rst:118 ../src/Doc/c-api/tuple.rst:132
msgid "This function \"steals\" a reference to *o*."
msgstr ""

# 21e82cbf0d7943049bc9b3cc8ab6012f
#: ../src/Doc/c-api/tuple.rst:127
msgid ""
"Like :c:func:`PyTuple_SetItem`, but does no error checking, and should "
"*only* be used to fill in brand new tuples."
msgstr ""

# 3865184d8f3740d0b8e0f4f7b31583d5
#: ../src/Doc/c-api/tuple.rst:141
msgid ""
"Can be used to resize a tuple.  *newsize* will be the new length of the "
"tuple. Because tuples are *supposed* to be immutable, this should only be "
"used if there is only one reference to the object.  Do *not* use this if the "
"tuple may already be known to some other part of the code.  The tuple will "
"always grow or shrink at the end.  Think of this as destroying the old tuple "
"and creating a new one, only more efficiently.  Returns ``0`` on success. "
"Client code should never assume that the resulting value of ``*p`` will be "
"the same as before calling this function. If the object referenced by ``*p`` "
"is replaced, the original ``*p`` is destroyed.  On failure, returns ``-1`` "
"and sets ``*p`` to *NULL*, and raises :exc:`MemoryError` or :exc:"
"`SystemError`."
msgstr ""

#: ../src/Doc/c-api/type.rst:6 ../src/Doc/c-api/typeobj.rst:6
msgid "Type Objects"
msgstr ""

# e196dcfb70644431ada04331b54ef2d5
#: ../src/Doc/c-api/type.rst:13
msgid "The C structure of the objects used to describe built-in types."
msgstr ""

# 0ee08a9e901b4bcbbb2dc7cfb07355b1
#: ../src/Doc/c-api/type.rst:20
msgid ""
"This is the type object for type objects; it is the same object as ``type`` "
"and ``types.TypeType`` in the Python layer."
msgstr ""

# a76e0225d504496fb35801c922045820
#: ../src/Doc/c-api/type.rst:26
msgid ""
"Return true if the object *o* is a type object, including instances of types "
"derived from the standard type object.  Return false in all other cases."
msgstr ""

# 5e6424130920422aa1623849954d14aa
#: ../src/Doc/c-api/type.rst:32
msgid ""
"Return true if the object *o* is a type object, but not a subtype of the "
"standard type object.  Return false in all other cases."
msgstr ""

# d10f4ae6312444938d06dbbe01b88c5b
#: ../src/Doc/c-api/type.rst:40
msgid "Clear the internal lookup cache. Return the current version tag."
msgstr ""

# c5b83f65b252486db09dd8f20bba43c8
#: ../src/Doc/c-api/type.rst:47
msgid ""
"Invalidate the internal lookup cache for the type and all of its subtypes.  "
"This function must be called after any manual modification of the attributes "
"or base classes of the type."
msgstr ""

# 3cab52d4806f48449deba6d251b3da39
#: ../src/Doc/c-api/type.rst:56
msgid ""
"Return true if the type object *o* sets the feature *feature*.  Type "
"features are denoted by single bit flags."
msgstr ""

# f93e568180d24266b50fe4d7196cf207
#: ../src/Doc/c-api/type.rst:62
msgid ""
"Return true if the type object includes support for the cycle detector; this "
"tests the type flag :const:`Py_TPFLAGS_HAVE_GC`."
msgstr ""

# 2e205270d7834001a5de481c0b7c109f
#: ../src/Doc/c-api/type.rst:70
msgid "Return true if *a* is a subtype of *b*."
msgstr ""

# 04747020a44d4fd8b7a4bb04972a1782
#: ../src/Doc/c-api/type.rst:91
msgid ""
"Finalize a type object.  This should be called on all type objects to finish "
"their initialization.  This function is responsible for adding inherited "
"slots from a type's base class.  Return ``0`` on success, or return ``-1`` "
"and sets an exception on error."
msgstr ""

# b25d094dbf134923b6fbb29b5d86ffed
#: ../src/Doc/c-api/typeobj.rst:8
msgid ""
"Perhaps one of the most important structures of the Python object system is "
"the structure that defines a new type: the :c:type:`PyTypeObject` "
"structure.  Type objects can be handled using any of the :c:func:`PyObject_"
"\\*` or :c:func:`PyType_\\*` functions, but do not offer much that's "
"interesting to most Python applications. These objects are fundamental to "
"how objects behave, so they are very important to the interpreter itself and "
"to any extension module that implements new types."
msgstr ""

#: ../src/Doc/c-api/typeobj.rst:16
msgid ""
"Type objects are fairly large compared to most of the standard types. The "
"reason for the size is that each type object stores a large number of "
"values, mostly C function pointers, each of which implements a small part of "
"the type's functionality.  The fields of the type object are examined in "
"detail in this section.  The fields will be described in the order in which "
"they occur in the structure."
msgstr ""

# 6c665b2da8434c51b05b9e61a5d1e55f
#: ../src/Doc/c-api/typeobj.rst:23
msgid ""
"Typedefs: unaryfunc, binaryfunc, ternaryfunc, inquiry, coercion, intargfunc, "
"intintargfunc, intobjargproc, intintobjargproc, objobjargproc, destructor, "
"freefunc, printfunc, getattrfunc, getattrofunc, setattrfunc, setattrofunc, "
"cmpfunc, reprfunc, hashfunc"
msgstr ""

# 2c19197bbc914f6a9533d6e8ec761337
#: ../src/Doc/c-api/typeobj.rst:28
msgid ""
"The structure definition for :c:type:`PyTypeObject` can be found in :file:"
"`Include/object.h`.  For convenience of reference, this repeats the "
"definition found there:"
msgstr ""

# ad67b0cda32c48649d44fa0a5a919548
#: ../src/Doc/c-api/typeobj.rst:35
msgid ""
"The type object structure extends the :c:type:`PyVarObject` structure. The :"
"attr:`ob_size` field is used for dynamic types (created by  :func:"
"`type_new`, usually called from a class statement). Note that :c:data:"
"`PyType_Type` (the metatype) initializes :attr:`tp_itemsize`, which means "
"that its instances (i.e. type objects) *must* have the :attr:`ob_size` field."
msgstr ""

# d1c9181295e440559468847735fd20d5
#: ../src/Doc/c-api/typeobj.rst:45
msgid ""
"These fields are only present when the macro ``Py_TRACE_REFS`` is defined. "
"Their initialization to *NULL* is taken care of by the "
"``PyObject_HEAD_INIT`` macro.  For statically allocated objects, these "
"fields always remain *NULL*. For dynamically allocated objects, these two "
"fields are used to link the object into a doubly-linked list of *all* live "
"objects on the heap.  This could be used for various debugging purposes; "
"currently the only use is to print the objects that are still alive at the "
"end of a run when the environment variable :envvar:`PYTHONDUMPREFS` is set."
msgstr ""

# 37b1b4cd55d94c569b046accf256e85f
#: ../src/Doc/c-api/typeobj.rst:54
msgid "These fields are not inherited by subtypes."
msgstr ""

# 0638e43c0f3245c7a722d5d16142770d
#: ../src/Doc/c-api/typeobj.rst:59
msgid ""
"This is the type object's reference count, initialized to ``1`` by the "
"``PyObject_HEAD_INIT`` macro.  Note that for statically allocated type "
"objects, the type's instances (objects whose :attr:`ob_type` points back to "
"the type) do *not* count as references.  But for dynamically allocated type "
"objects, the instances *do* count as references."
msgstr ""

# 283195695f1a41cba7bef413a074f84d
# d1815bdedb954d1197239bf24cc3b1e7
# 3ebe6303361a403cacc2c412604eff19
#: ../src/Doc/c-api/typeobj.rst:65 ../src/Doc/c-api/typeobj.rst:100
#: ../src/Doc/c-api/typeobj.rst:127
msgid "This field is not inherited by subtypes."
msgstr ""

# 8058ef737b0f4360997e917935714b9f
#: ../src/Doc/c-api/typeobj.rst:74
msgid ""
"This is the type's type, in other words its metatype.  It is initialized by "
"the argument to the ``PyObject_HEAD_INIT`` macro, and its value should "
"normally be ``&PyType_Type``.  However, for dynamically loadable extension "
"modules that must be usable on Windows (at least), the compiler complains "
"that this is not a valid initializer.  Therefore, the convention is to pass "
"*NULL* to the ``PyObject_HEAD_INIT`` macro and to initialize this field "
"explicitly at the start of the module's initialization function, before "
"doing anything else.  This is typically done like this::"
msgstr ""

# 15e448783948412381087746a09e62b1
#: ../src/Doc/c-api/typeobj.rst:85
msgid ""
"This should be done before any instances of the type are created. :c:func:"
"`PyType_Ready` checks if :attr:`ob_type` is *NULL*, and if so, initializes "
"it: in Python 2.2, it is set to ``&PyType_Type``; in Python 2.2.1 and later "
"it is initialized to the :attr:`ob_type` field of the base class. :c:func:"
"`PyType_Ready` will not change this field if it is non-zero."
msgstr ""

# 405942ec1bf5487484656ff3e91475fa
#: ../src/Doc/c-api/typeobj.rst:91
msgid ""
"In Python 2.2, this field is not inherited by subtypes.  In 2.2.1, and in "
"2.3 and beyond, it is inherited by subtypes."
msgstr ""

# 3d1f161dcc9b4878b3bb8ce3a1771b61
#: ../src/Doc/c-api/typeobj.rst:97
msgid ""
"For statically allocated type objects, this should be initialized to zero.  "
"For dynamically allocated type objects, this field has a special internal "
"meaning."
msgstr ""

# 3ea9196b7bc04777b6c9b742e7ac36f8
#: ../src/Doc/c-api/typeobj.rst:105
msgid ""
"Pointer to a NUL-terminated string containing the name of the type. For "
"types that are accessible as module globals, the string should be the full "
"module name, followed by a dot, followed by the type name; for built-in "
"types, it should be just the type name.  If the module is a submodule of a "
"package, the full package name is part of the full module name.  For "
"example, a type named :class:`T` defined in module :mod:`M` in subpackage :"
"mod:`Q` in package :mod:`P` should have the :attr:`tp_name` initializer ``"
"\"P.Q.M.T\"``."
msgstr ""

# 08ac68413e1b456bb347d7f5dbc2e123
#: ../src/Doc/c-api/typeobj.rst:113
msgid ""
"For dynamically allocated type objects, this should just be the type name, "
"and the module name explicitly stored in the type dict as the value for key "
"``'__module__'``."
msgstr ""

# f8664272092a4c26a3eaf4d8f8d8ba88
#: ../src/Doc/c-api/typeobj.rst:117
msgid ""
"For statically allocated type objects, the tp_name field should contain a "
"dot. Everything before the last dot is made accessible as the :attr:"
"`__module__` attribute, and everything after the last dot is made accessible "
"as the :attr:`__name__` attribute."
msgstr ""

# ddffa2af2756445cb5e0085bb9db3748
#: ../src/Doc/c-api/typeobj.rst:122
msgid ""
"If no dot is present, the entire :attr:`tp_name` field is made accessible as "
"the :attr:`__name__` attribute, and the :attr:`__module__` attribute is "
"undefined (unless explicitly set in the dictionary, as explained above).  "
"This means your type will be impossible to pickle."
msgstr ""

# 05eaf529408541dab03549792141fdf6
#: ../src/Doc/c-api/typeobj.rst:133
msgid ""
"These fields allow calculating the size in bytes of instances of the type."
msgstr ""

# aba58c5ff0a14a87820667c6bfe2817c
#: ../src/Doc/c-api/typeobj.rst:135
msgid ""
"There are two kinds of types: types with fixed-length instances have a zero :"
"attr:`tp_itemsize` field, types with variable-length instances have a non-"
"zero :attr:`tp_itemsize` field.  For a type with fixed-length instances, all "
"instances have the same size, given in :attr:`tp_basicsize`."
msgstr ""

# d442ff3477334f2f8c293cae0db0f4e7
#: ../src/Doc/c-api/typeobj.rst:140
msgid ""
"For a type with variable-length instances, the instances must have an :attr:"
"`ob_size` field, and the instance size is :attr:`tp_basicsize` plus N times :"
"attr:`tp_itemsize`, where N is the \"length\" of the object.  The value of N "
"is typically stored in the instance's :attr:`ob_size` field.  There are "
"exceptions:  for example, long ints use a negative :attr:`ob_size` to "
"indicate a negative number, and N is ``abs(ob_size)`` there.  Also, the "
"presence of an :attr:`ob_size` field in the instance layout doesn't mean "
"that the instance structure is variable-length (for example, the structure "
"for the list type has fixed-length instances, yet those instances have a "
"meaningful :attr:`ob_size` field)."
msgstr ""

# 67d5f95557214b1aaac004b74bc8a95d
#: ../src/Doc/c-api/typeobj.rst:151
msgid ""
"The basic size includes the fields in the instance declared by the macro :c:"
"macro:`PyObject_HEAD` or :c:macro:`PyObject_VAR_HEAD` (whichever is used to "
"declare the instance struct) and this in turn includes the :attr:`_ob_prev` "
"and :attr:`_ob_next` fields if they are present.  This means that the only "
"correct way to get an initializer for the :attr:`tp_basicsize` is to use the "
"``sizeof`` operator on the struct used to declare the instance layout. The "
"basic size does not include the GC header size (this is new in Python 2.2; "
"in 2.1 and 2.0, the GC header size was included in :attr:`tp_basicsize`)."
msgstr ""

# 2c4d010caa554e82b64b3c310565e39d
#: ../src/Doc/c-api/typeobj.rst:160
msgid ""
"These fields are inherited separately by subtypes.  If the base type has a "
"non-zero :attr:`tp_itemsize`, it is generally not safe to set :attr:"
"`tp_itemsize` to a different non-zero value in a subtype (though this "
"depends on the implementation of the base type)."
msgstr ""

# 62c5762355af478196a76f6830883e0f
#: ../src/Doc/c-api/typeobj.rst:165
msgid ""
"A note about alignment: if the variable items require a particular "
"alignment, this should be taken care of by the value of :attr:"
"`tp_basicsize`.  Example: suppose a type implements an array of ``double``. :"
"attr:`tp_itemsize` is ``sizeof(double)``. It is the programmer's "
"responsibility that :attr:`tp_basicsize` is a multiple of ``sizeof(double)`` "
"(assuming this is the alignment requirement for ``double``)."
msgstr ""

# adf5ccf20686403ab413033e9947a4e8
#: ../src/Doc/c-api/typeobj.rst:175
msgid ""
"A pointer to the instance destructor function.  This function must be "
"defined unless the type guarantees that its instances will never be "
"deallocated (as is the case for the singletons ``None`` and ``Ellipsis``)."
msgstr ""

# 9dadf12477464e8c99db6910574daf4f
#: ../src/Doc/c-api/typeobj.rst:179
msgid ""
"The destructor function is called by the :c:func:`Py_DECREF` and :c:func:"
"`Py_XDECREF` macros when the new reference count is zero.  At this point, "
"the instance is still in existence, but there are no references to it.  The "
"destructor function should free all references which the instance owns, free "
"all memory buffers owned by the instance (using the freeing function "
"corresponding to the allocation function used to allocate the buffer), and "
"finally (as its last action) call the type's :attr:`tp_free` function.  If "
"the type is not subtypable (doesn't have the :const:`Py_TPFLAGS_BASETYPE` "
"flag bit set), it is permissible to call the object deallocator directly "
"instead of via :attr:`tp_free`.  The object deallocator should be the one "
"used to allocate the instance; this is normally :c:func:`PyObject_Del` if "
"the instance was allocated using :c:func:`PyObject_New` or :c:func:"
"`PyObject_VarNew`, or :c:func:`PyObject_GC_Del` if the instance was "
"allocated using :c:func:`PyObject_GC_New` or :c:func:`PyObject_GC_NewVar`."
msgstr ""

# 4c34deac19fb4c3abf408e88b6aa7393
# bba97a1c6d69402095a3aab85a5cfc63
# 8dcd04f2c71741fcbd5b38b9e208321e
# 35e84141c11f41dfa3017de28acee0ee
# bf5eb8ca4df34b3ebe19c706854d8d57
# d3bb0a04974a4de4a1149cdf61a23648
# 0d35edbbd3c74922bf3e59ec996096eb
# 40642db92492464693e89b00d968d3bf
# dcdd071fbe2840c1b463e3499fd5ee8d
# c677e0baaa354e7bb5af04cdda44439b
#: ../src/Doc/c-api/typeobj.rst:194 ../src/Doc/c-api/typeobj.rst:223
#: ../src/Doc/c-api/typeobj.rst:287 ../src/Doc/c-api/typeobj.rst:355
#: ../src/Doc/c-api/typeobj.rst:373 ../src/Doc/c-api/typeobj.rst:763
#: ../src/Doc/c-api/typeobj.rst:781 ../src/Doc/c-api/typeobj.rst:874
#: ../src/Doc/c-api/typeobj.rst:885 ../src/Doc/c-api/typeobj.rst:970
msgid "This field is inherited by subtypes."
msgstr ""

# 277df9d2ffbf4b05ae794496d85b6231
#: ../src/Doc/c-api/typeobj.rst:199
msgid "An optional pointer to the instance print function."
msgstr ""

# b14c0799f40b4594927df223389257e8
#: ../src/Doc/c-api/typeobj.rst:201
msgid ""
"The print function is only called when the instance is printed to a *real* "
"file; when it is printed to a pseudo-file (like a :class:`StringIO` "
"instance), the instance's :attr:`tp_repr` or :attr:`tp_str` function is "
"called to convert it to a string.  These are also called when the type's :"
"attr:`tp_print` field is *NULL*.  A type should never implement :attr:"
"`tp_print` in a way that produces different output than :attr:`tp_repr` or :"
"attr:`tp_str` would."
msgstr ""

# f8781891ea574a88a9d948750dc5bae1
#: ../src/Doc/c-api/typeobj.rst:208
msgid ""
"The print function is called with the same signature as :c:func:"
"`PyObject_Print`: ``int tp_print(PyObject *self, FILE *file, int flags)``.  "
"The *self* argument is the instance to be printed.  The *file* argument is "
"the stdio file to which it is to be printed.  The *flags* argument is "
"composed of flag bits. The only flag bit currently defined is :const:"
"`Py_PRINT_RAW`. When the :const:`Py_PRINT_RAW` flag bit is set, the instance "
"should be printed the same way as :attr:`tp_str` would format it; when the :"
"const:`Py_PRINT_RAW` flag bit is clear, the instance should be printed the "
"same was as :attr:`tp_repr` would format it. It should return ``-1`` and set "
"an exception condition when an error occurred during the comparison."
msgstr ""

# 0d4997b58cc34756b3533f0d812b278a
#: ../src/Doc/c-api/typeobj.rst:219
msgid ""
"It is possible that the :attr:`tp_print` field will be deprecated. In any "
"case, it is recommended not to define :attr:`tp_print`, but instead to rely "
"on :attr:`tp_repr` and :attr:`tp_str` for printing."
msgstr ""

# bd2744dd0155461287e2363e526f2133
#: ../src/Doc/c-api/typeobj.rst:228
msgid "An optional pointer to the get-attribute-string function."
msgstr ""

# 8a3f3453e9ad4edb87ca7adffef04c6a
#: ../src/Doc/c-api/typeobj.rst:230
msgid ""
"This field is deprecated.  When it is defined, it should point to a function "
"that acts the same as the :attr:`tp_getattro` function, but taking a C "
"string instead of a Python string object to give the attribute name.  The "
"signature is the same as for :c:func:`PyObject_GetAttrString`."
msgstr ""

# 29be3ee2403c4b9baeaeb248f369e65d
#: ../src/Doc/c-api/typeobj.rst:235
msgid ""
"This field is inherited by subtypes together with :attr:`tp_getattro`: a "
"subtype inherits both :attr:`tp_getattr` and :attr:`tp_getattro` from its "
"base type when the subtype's :attr:`tp_getattr` and :attr:`tp_getattro` are "
"both *NULL*."
msgstr ""

# 0c1730edcf9f40d98cd440431a426451
#: ../src/Doc/c-api/typeobj.rst:242
msgid "An optional pointer to the set-attribute-string function."
msgstr ""

# a0577e09d7f7471a83b48da63fda5c4f
#: ../src/Doc/c-api/typeobj.rst:244
msgid ""
"This field is deprecated.  When it is defined, it should point to a function "
"that acts the same as the :attr:`tp_setattro` function, but taking a C "
"string instead of a Python string object to give the attribute name.  The "
"signature is the same as for :c:func:`PyObject_SetAttrString`."
msgstr ""

# 4274c4f101cf4b2ab8c86b7e7e76ea61
#: ../src/Doc/c-api/typeobj.rst:249
msgid ""
"This field is inherited by subtypes together with :attr:`tp_setattro`: a "
"subtype inherits both :attr:`tp_setattr` and :attr:`tp_setattro` from its "
"base type when the subtype's :attr:`tp_setattr` and :attr:`tp_setattro` are "
"both *NULL*."
msgstr ""

# 51bcb82e01364882a77dfdd4dafc8b05
#: ../src/Doc/c-api/typeobj.rst:256
msgid "An optional pointer to the three-way comparison function."
msgstr ""

# 788d1866d3074fd1a027f578c42c0825
#: ../src/Doc/c-api/typeobj.rst:258
msgid ""
"The signature is the same as for :c:func:`PyObject_Compare`. The function "
"should return ``1`` if *self* greater than *other*, ``0`` if *self* is equal "
"to *other*, and ``-1`` if *self* less than *other*.  It should return ``-1`` "
"and set an exception condition when an error occurred during the comparison."
msgstr ""

# efa1dad1d020447ab5944b1741c64444
#: ../src/Doc/c-api/typeobj.rst:263
msgid ""
"This field is inherited by subtypes together with :attr:`tp_richcompare` "
"and :attr:`tp_hash`: a subtypes inherits all three of :attr:`tp_compare`, :"
"attr:`tp_richcompare`, and :attr:`tp_hash` when the subtype's :attr:"
"`tp_compare`, :attr:`tp_richcompare`, and :attr:`tp_hash` are all *NULL*."
msgstr ""

# c41c0daad00f44ef8f6fd29f43381475
#: ../src/Doc/c-api/typeobj.rst:273
msgid ""
"An optional pointer to a function that implements the built-in function :"
"func:`repr`."
msgstr ""

# c83ba8d4056e415a8bc92295dc08bd47
#: ../src/Doc/c-api/typeobj.rst:276
msgid ""
"The signature is the same as for :c:func:`PyObject_Repr`; it must return a "
"string or a Unicode object.  Ideally, this function should return a string "
"that, when passed to :func:`eval`, given a suitable environment, returns an "
"object with the same value.  If this is not feasible, it should return a "
"string starting with ``'<'`` and ending with ``'>'`` from which both the "
"type and the value of the object can be deduced."
msgstr ""

# 4b5cd9b9f03f467a85c72b660c692705
#: ../src/Doc/c-api/typeobj.rst:283
msgid ""
"When this field is not set, a string of the form ``<%s object at %p>`` is "
"returned, where ``%s`` is replaced by the type name, and ``%p`` by the "
"object's memory address."
msgstr ""

# 5b47e57ec178436f931a9bf940a2fdea
#: ../src/Doc/c-api/typeobj.rst:291
msgid ""
"Pointer to an additional structure that contains fields relevant only to "
"objects which implement the number protocol.  These fields are documented "
"in :ref:`number-structs`."
msgstr ""

# aad9b4c33cf8407faf3bafad1bca957d
#: ../src/Doc/c-api/typeobj.rst:295
msgid ""
"The :attr:`tp_as_number` field is not inherited, but the contained fields "
"are inherited individually."
msgstr ""

# 386b1b24011a4ea89a0443b186ceb2ab
#: ../src/Doc/c-api/typeobj.rst:301
msgid ""
"Pointer to an additional structure that contains fields relevant only to "
"objects which implement the sequence protocol.  These fields are documented "
"in :ref:`sequence-structs`."
msgstr ""

# baefd16df82c4b8099e3dfd945fbeda5
#: ../src/Doc/c-api/typeobj.rst:305
msgid ""
"The :attr:`tp_as_sequence` field is not inherited, but the contained fields "
"are inherited individually."
msgstr ""

# a3855f941ab4432b8ebe97be820e3438
#: ../src/Doc/c-api/typeobj.rst:311
msgid ""
"Pointer to an additional structure that contains fields relevant only to "
"objects which implement the mapping protocol.  These fields are documented "
"in :ref:`mapping-structs`."
msgstr ""

# 322effed1fb34f1e8274168af9e575d5
#: ../src/Doc/c-api/typeobj.rst:315
msgid ""
"The :attr:`tp_as_mapping` field is not inherited, but the contained fields "
"are inherited individually."
msgstr ""

# e45ee43e11a24bdb8e5446e9fdfa33e3
#: ../src/Doc/c-api/typeobj.rst:323
msgid ""
"An optional pointer to a function that implements the built-in function :"
"func:`hash`."
msgstr ""

# 5a8df10b0bac4bdda4d34cc87e74cf1a
#: ../src/Doc/c-api/typeobj.rst:326
msgid ""
"The signature is the same as for :c:func:`PyObject_Hash`; it must return a C "
"long.  The value ``-1`` should not be returned as a normal return value; "
"when an error occurs during the computation of the hash value, the function "
"should set an exception and return ``-1``."
msgstr ""

# 64993b7b9d604307a8827d33d985e53f
#: ../src/Doc/c-api/typeobj.rst:331
msgid ""
"This field can be set explicitly to :c:func:`PyObject_HashNotImplemented` to "
"block inheritance of the hash method from a parent type. This is interpreted "
"as the equivalent of ``__hash__ = None`` at the Python level, causing "
"``isinstance(o, collections.Hashable)`` to correctly return ``False``. Note "
"that the converse is also true - setting ``__hash__ = None`` on a class at "
"the Python level will result in the ``tp_hash`` slot being set to :c:func:"
"`PyObject_HashNotImplemented`."
msgstr ""

# 6746f0a320c94336bf32cccdad651dcb
#: ../src/Doc/c-api/typeobj.rst:339
msgid ""
"When this field is not set, two possibilities exist: if the :attr:"
"`tp_compare` and :attr:`tp_richcompare` fields are both *NULL*, a default "
"hash value based on the object's address is returned; otherwise, a :exc:"
"`TypeError` is raised."
msgstr ""

# 4e16ef0b740443e98212d18040474852
#: ../src/Doc/c-api/typeobj.rst:343
msgid ""
"This field is inherited by subtypes together with :attr:`tp_richcompare` "
"and :attr:`tp_compare`: a subtypes inherits all three of :attr:"
"`tp_compare`, :attr:`tp_richcompare`, and :attr:`tp_hash`, when the "
"subtype's :attr:`tp_compare`, :attr:`tp_richcompare` and :attr:`tp_hash` are "
"all *NULL*."
msgstr ""

# 949e0f942dbe4430af7065cecaa586ae
#: ../src/Doc/c-api/typeobj.rst:351
msgid ""
"An optional pointer to a function that implements calling the object.  This "
"should be *NULL* if the object is not callable.  The signature is the same "
"as for :c:func:`PyObject_Call`."
msgstr ""

# a6f2439be35948139cf6cf58bfc68265
#: ../src/Doc/c-api/typeobj.rst:360
msgid ""
"An optional pointer to a function that implements the built-in operation :"
"func:`str`.  (Note that :class:`str` is a type now, and :func:`str` calls "
"the constructor for that type.  This constructor calls :c:func:"
"`PyObject_Str` to do the actual work, and :c:func:`PyObject_Str` will call "
"this handler.)"
msgstr ""

# 3a7f9a584b5d4af781a9f40871c14636
#: ../src/Doc/c-api/typeobj.rst:365
msgid ""
"The signature is the same as for :c:func:`PyObject_Str`; it must return a "
"string or a Unicode object.  This function should return a \"friendly\" "
"string representation of the object, as this is the representation that will "
"be used by the print statement."
msgstr ""

# 7fe823afc61543f887dcf2e08bd64ec9
#: ../src/Doc/c-api/typeobj.rst:370
msgid ""
"When this field is not set, :c:func:`PyObject_Repr` is called to return a "
"string representation."
msgstr ""

# d48a1ad1488a4fcb9669f81ff5cde60a
#: ../src/Doc/c-api/typeobj.rst:378
msgid "An optional pointer to the get-attribute function."
msgstr ""

# 4c2357a3ef044e2491ab976e08e79d22
#: ../src/Doc/c-api/typeobj.rst:380
msgid ""
"The signature is the same as for :c:func:`PyObject_GetAttr`.  It is usually "
"convenient to set this field to :c:func:`PyObject_GenericGetAttr`, which "
"implements the normal way of looking for object attributes."
msgstr ""

# c54163d70914457ab11aa3ac211b8490
#: ../src/Doc/c-api/typeobj.rst:384
msgid ""
"This field is inherited by subtypes together with :attr:`tp_getattr`: a "
"subtype inherits both :attr:`tp_getattr` and :attr:`tp_getattro` from its "
"base type when the subtype's :attr:`tp_getattr` and :attr:`tp_getattro` are "
"both *NULL*."
msgstr ""

# 99f713c987324be8a01b7af90bb0d3c5
#: ../src/Doc/c-api/typeobj.rst:391
msgid "An optional pointer to the set-attribute function."
msgstr ""

# b9dc7cbdc28541d5acc936f6d728ae69
#: ../src/Doc/c-api/typeobj.rst:393
msgid ""
"The signature is the same as for :c:func:`PyObject_SetAttr`.  It is usually "
"convenient to set this field to :c:func:`PyObject_GenericSetAttr`, which "
"implements the normal way of setting object attributes."
msgstr ""

# 6578bc12d33d492384647e26f7460668
#: ../src/Doc/c-api/typeobj.rst:397
msgid ""
"This field is inherited by subtypes together with :attr:`tp_setattr`: a "
"subtype inherits both :attr:`tp_setattr` and :attr:`tp_setattro` from its "
"base type when the subtype's :attr:`tp_setattr` and :attr:`tp_setattro` are "
"both *NULL*."
msgstr ""

# 1f7f5c5ad937439fa487e1ac4dcfda86
#: ../src/Doc/c-api/typeobj.rst:404
msgid ""
"Pointer to an additional structure that contains fields relevant only to "
"objects which implement the buffer interface.  These fields are documented "
"in :ref:`buffer-structs`."
msgstr ""

# 6da8ec1f16054098ae5eef130e0762f4
#: ../src/Doc/c-api/typeobj.rst:408
msgid ""
"The :attr:`tp_as_buffer` field is not inherited, but the contained fields "
"are inherited individually."
msgstr ""

# 8997d30700f74bb692654946eb45371f
#: ../src/Doc/c-api/typeobj.rst:414
msgid ""
"This field is a bit mask of various flags.  Some flags indicate variant "
"semantics for certain situations; others are used to indicate that certain "
"fields in the type object (or in the extension structures referenced via :"
"attr:`tp_as_number`, :attr:`tp_as_sequence`, :attr:`tp_as_mapping`, and :"
"attr:`tp_as_buffer`) that were historically not always present are valid; if "
"such a flag bit is clear, the type fields it guards must not be accessed and "
"must be considered to have a zero or *NULL* value instead."
msgstr ""

# a1d9db0a0e5942dbbdc13b68626ccd8a
#: ../src/Doc/c-api/typeobj.rst:422
msgid ""
"Inheritance of this field is complicated.  Most flag bits are inherited "
"individually, i.e. if the base type has a flag bit set, the subtype inherits "
"this flag bit.  The flag bits that pertain to extension structures are "
"strictly inherited if the extension structure is inherited, i.e. the base "
"type's value of the flag bit is copied into the subtype together with a "
"pointer to the extension structure.  The :const:`Py_TPFLAGS_HAVE_GC` flag "
"bit is inherited together with the :attr:`tp_traverse` and :attr:`tp_clear` "
"fields, i.e. if the :const:`Py_TPFLAGS_HAVE_GC` flag bit is clear in the "
"subtype and the :attr:`tp_traverse` and :attr:`tp_clear` fields in the "
"subtype exist (as indicated by the :const:`Py_TPFLAGS_HAVE_RICHCOMPARE` flag "
"bit) and have *NULL* values."
msgstr ""

# cd5d1b234a82460a9f0739c5c4077459
#: ../src/Doc/c-api/typeobj.rst:434
msgid ""
"The following bit masks are currently defined; these can be ORed together "
"using the ``|`` operator to form the value of the :attr:`tp_flags` field.  "
"The macro :c:func:`PyType_HasFeature` takes a type and a flags value, *tp* "
"and *f*, and checks whether ``tp->tp_flags & f`` is non-zero."
msgstr ""

# 40322bcef88343a8b8b1b82c6008b6aa
#: ../src/Doc/c-api/typeobj.rst:442
msgid ""
"If this bit is set, the :c:type:`PyBufferProcs` struct referenced by :attr:"
"`tp_as_buffer` has the :attr:`bf_getcharbuffer` field."
msgstr ""

# 5f613ab262e9479b943749654d57ed18
#: ../src/Doc/c-api/typeobj.rst:448
msgid ""
"If this bit is set, the :c:type:`PySequenceMethods` struct referenced by :"
"attr:`tp_as_sequence` has the :attr:`sq_contains` field."
msgstr ""

# 541e9fa92ce14cf8af72f24b7b4ca998
#: ../src/Doc/c-api/typeobj.rst:454
msgid ""
"This bit is obsolete.  The bit it used to name is no longer in use.  The "
"symbol is now defined as zero."
msgstr ""

# 54dd4fccc3594fcb96c274a0afd9ade6
#: ../src/Doc/c-api/typeobj.rst:460
msgid ""
"If this bit is set, the :c:type:`PySequenceMethods` struct referenced by :"
"attr:`tp_as_sequence` and the :c:type:`PyNumberMethods` structure referenced "
"by :attr:`tp_as_number` contain the fields for in-place operators. In "
"particular, this means that the :c:type:`PyNumberMethods` structure has the "
"fields :attr:`nb_inplace_add`, :attr:`nb_inplace_subtract`, :attr:"
"`nb_inplace_multiply`, :attr:`nb_inplace_divide`, :attr:"
"`nb_inplace_remainder`, :attr:`nb_inplace_power`, :attr:"
"`nb_inplace_lshift`, :attr:`nb_inplace_rshift`, :attr:`nb_inplace_and`, :"
"attr:`nb_inplace_xor`, and :attr:`nb_inplace_or`; and the :c:type:"
"`PySequenceMethods` struct has the fields :attr:`sq_inplace_concat` and :"
"attr:`sq_inplace_repeat`."
msgstr ""

# a4bd1f2cc61a446ab4aa26d16c1cef1a
#: ../src/Doc/c-api/typeobj.rst:475
msgid ""
"If this bit is set, the binary and ternary operations in the :c:type:"
"`PyNumberMethods` structure referenced by :attr:`tp_as_number` accept "
"arguments of arbitrary object types, and do their own type conversions if "
"needed.  If this bit is clear, those operations require that all arguments "
"have the current type as their type, and the caller is supposed to perform a "
"coercion operation first.  This applies to :attr:`nb_add`, :attr:"
"`nb_subtract`, :attr:`nb_multiply`, :attr:`nb_divide`, :attr:"
"`nb_remainder`, :attr:`nb_divmod`, :attr:`nb_power`, :attr:`nb_lshift`, :"
"attr:`nb_rshift`, :attr:`nb_and`, :attr:`nb_xor`, and :attr:`nb_or`."
msgstr ""

# 47d061b1f1fb4e638326506cf5972ee5
#: ../src/Doc/c-api/typeobj.rst:488
msgid ""
"If this bit is set, the type object has the :attr:`tp_richcompare` field, as "
"well as the :attr:`tp_traverse` and the :attr:`tp_clear` fields."
msgstr ""

# 4569b71a563042e88f02372aa290f333
#: ../src/Doc/c-api/typeobj.rst:494
msgid ""
"If this bit is set, the :attr:`tp_weaklistoffset` field is defined.  "
"Instances of a type are weakly referenceable if the type's :attr:"
"`tp_weaklistoffset` field has a value greater than zero."
msgstr ""

# 9e3336c42cf6405ea0e44249140cc606
#: ../src/Doc/c-api/typeobj.rst:501
msgid ""
"If this bit is set, the type object has the :attr:`tp_iter` and :attr:"
"`tp_iternext` fields."
msgstr ""

# 24647d2a379441c1b028fbd417f4395f
#: ../src/Doc/c-api/typeobj.rst:507
msgid ""
"If this bit is set, the type object has several new fields defined starting "
"in Python 2.2: :attr:`tp_methods`, :attr:`tp_members`, :attr:`tp_getset`, :"
"attr:`tp_base`, :attr:`tp_dict`, :attr:`tp_descr_get`, :attr:"
"`tp_descr_set`, :attr:`tp_dictoffset`, :attr:`tp_init`, :attr:`tp_alloc`, :"
"attr:`tp_new`, :attr:`tp_free`, :attr:`tp_is_gc`, :attr:`tp_bases`, :attr:"
"`tp_mro`, :attr:`tp_cache`, :attr:`tp_subclasses`, and :attr:`tp_weaklist`."
msgstr ""

# 96f299f2091a44dcbe904dd314bf3146
#: ../src/Doc/c-api/typeobj.rst:517
msgid ""
"This bit is set when the type object itself is allocated on the heap.  In "
"this case, the :attr:`ob_type` field of its instances is considered a "
"reference to the type, and the type object is INCREF'ed when a new instance "
"is created, and DECREF'ed when an instance is destroyed (this does not apply "
"to instances of subtypes; only the type referenced by the instance's ob_type "
"gets INCREF'ed or DECREF'ed)."
msgstr ""

# 3e5db355f110422980e590b103600235
#: ../src/Doc/c-api/typeobj.rst:527
msgid ""
"This bit is set when the type can be used as the base type of another type.  "
"If this bit is clear, the type cannot be subtyped (similar to a \"final\" "
"class in Java)."
msgstr ""

# 9df6dec4550348f385fa2b13b6424ec1
#: ../src/Doc/c-api/typeobj.rst:534
msgid ""
"This bit is set when the type object has been fully initialized by :c:func:"
"`PyType_Ready`."
msgstr ""

# d5e4f659849c4be68af469bac938ae07
#: ../src/Doc/c-api/typeobj.rst:540
msgid ""
"This bit is set while :c:func:`PyType_Ready` is in the process of "
"initializing the type object."
msgstr ""

# 9f3bea56b3e8483cb2d85e0298eedcb2
#: ../src/Doc/c-api/typeobj.rst:546
msgid ""
"This bit is set when the object supports garbage collection.  If this bit is "
"set, instances must be created using :c:func:`PyObject_GC_New` and destroyed "
"using :c:func:`PyObject_GC_Del`.  More information in section :ref:"
"`supporting-cycle-detection`.  This bit also implies that the GC-related "
"fields :attr:`tp_traverse` and :attr:`tp_clear` are present in the type "
"object; but those fields also exist when :const:`Py_TPFLAGS_HAVE_GC` is "
"clear but :const:`Py_TPFLAGS_HAVE_RICHCOMPARE` is set."
msgstr ""

# bbadeac2c2b848a7b484bb244d7d6862
#: ../src/Doc/c-api/typeobj.rst:558
msgid ""
"This is a bitmask of all the bits that pertain to the existence of certain "
"fields in the type object and its extension structures. Currently, it "
"includes the following bits: :const:`Py_TPFLAGS_HAVE_GETCHARBUFFER`, :const:"
"`Py_TPFLAGS_HAVE_SEQUENCE_IN`, :const:`Py_TPFLAGS_HAVE_INPLACEOPS`, :const:"
"`Py_TPFLAGS_HAVE_RICHCOMPARE`, :const:`Py_TPFLAGS_HAVE_WEAKREFS`, :const:"
"`Py_TPFLAGS_HAVE_ITER`, and :const:`Py_TPFLAGS_HAVE_CLASS`."
msgstr ""

# 34286101a54f4eb386b9cb8f548b957b
#: ../src/Doc/c-api/typeobj.rst:568
msgid ""
"An optional pointer to a NUL-terminated C string giving the docstring for "
"this type object.  This is exposed as the :attr:`__doc__` attribute on the "
"type and instances of the type."
msgstr ""

# e99f6b204f294bcf950407b71ffffdd7
#: ../src/Doc/c-api/typeobj.rst:572
msgid "This field is *not* inherited by subtypes."
msgstr ""

# a1da68e150bf44988a6d2f1a3ac4c6ba
#: ../src/Doc/c-api/typeobj.rst:574
msgid ""
"The following three fields only exist if the :const:"
"`Py_TPFLAGS_HAVE_RICHCOMPARE` flag bit is set."
msgstr ""

# 442f6b558429432a82db7ab34312b030
#: ../src/Doc/c-api/typeobj.rst:580
msgid ""
"An optional pointer to a traversal function for the garbage collector.  This "
"is only used if the :const:`Py_TPFLAGS_HAVE_GC` flag bit is set.  More "
"information about Python's garbage collection scheme can be found in "
"section :ref:`supporting-cycle-detection`."
msgstr ""

# 6b7ff431819841bab5adb33a0649484d
#: ../src/Doc/c-api/typeobj.rst:585
msgid ""
"The :attr:`tp_traverse` pointer is used by the garbage collector to detect "
"reference cycles. A typical implementation of a :attr:`tp_traverse` function "
"simply calls :c:func:`Py_VISIT` on each of the instance's members that are "
"Python objects.  For example, this is function :c:func:`local_traverse` from "
"the :mod:`thread` extension module::"
msgstr ""

# 76c593872e3b4aa3b959b945dbc85079
#: ../src/Doc/c-api/typeobj.rst:600
msgid ""
"Note that :c:func:`Py_VISIT` is called only on those members that can "
"participate in reference cycles.  Although there is also a ``self->key`` "
"member, it can only be *NULL* or a Python string and therefore cannot be "
"part of a reference cycle."
msgstr ""

# 0c121b2b23184288897c78959ab4d126
#: ../src/Doc/c-api/typeobj.rst:604
msgid ""
"On the other hand, even if you know a member can never be part of a cycle, "
"as a debugging aid you may want to visit it anyway just so the :mod:`gc` "
"module's :func:`get_referents` function will include it."
msgstr ""

# 25043f853efa48adbb9ad389937267e3
#: ../src/Doc/c-api/typeobj.rst:608
msgid ""
"Note that :c:func:`Py_VISIT` requires the *visit* and *arg* parameters to :c:"
"func:`local_traverse` to have these specific names; don't name them just "
"anything."
msgstr ""

# 38095ab4519c4137b2c3a168584d4cce
#: ../src/Doc/c-api/typeobj.rst:612
msgid ""
"This field is inherited by subtypes together with :attr:`tp_clear` and the :"
"const:`Py_TPFLAGS_HAVE_GC` flag bit: the flag bit, :attr:`tp_traverse`, and :"
"attr:`tp_clear` are all inherited from the base type if they are all zero in "
"the subtype *and* the subtype has the :const:`Py_TPFLAGS_HAVE_RICHCOMPARE` "
"flag bit set."
msgstr ""

# fd48d3b0ae8a46259f88feba8f054ff0
#: ../src/Doc/c-api/typeobj.rst:621
msgid ""
"An optional pointer to a clear function for the garbage collector. This is "
"only used if the :const:`Py_TPFLAGS_HAVE_GC` flag bit is set."
msgstr ""

# c2593f778318434d8902b7f5487190de
#: ../src/Doc/c-api/typeobj.rst:624
msgid ""
"The :attr:`tp_clear` member function is used to break reference cycles in "
"cyclic garbage detected by the garbage collector.  Taken together, all :attr:"
"`tp_clear` functions in the system must combine to break all reference "
"cycles.  This is subtle, and if in any doubt supply a :attr:`tp_clear` "
"function.  For example, the tuple type does not implement a :attr:`tp_clear` "
"function, because it's possible to prove that no reference cycle can be "
"composed entirely of tuples. Therefore the :attr:`tp_clear` functions of "
"other types must be sufficient to break any cycle containing a tuple.  This "
"isn't immediately obvious, and there's rarely a good reason to avoid "
"implementing :attr:`tp_clear`."
msgstr ""

# bf9f8694a9334bb39428607edc85e29c
#: ../src/Doc/c-api/typeobj.rst:634
msgid ""
"Implementations of :attr:`tp_clear` should drop the instance's references to "
"those of its members that may be Python objects, and set its pointers to "
"those members to *NULL*, as in the following example::"
msgstr ""

# b3a4823ba610496db915fe3b2d7d3ac2
#: ../src/Doc/c-api/typeobj.rst:648
msgid ""
"The :c:func:`Py_CLEAR` macro should be used, because clearing references is "
"delicate:  the reference to the contained object must not be decremented "
"until after the pointer to the contained object is set to *NULL*.  This is "
"because decrementing the reference count may cause the contained object to "
"become trash, triggering a chain of reclamation activity that may include "
"invoking arbitrary Python code (due to finalizers, or weakref callbacks, "
"associated with the contained object). If it's possible for such code to "
"reference *self* again, it's important that the pointer to the contained "
"object be *NULL* at that time, so that *self* knows the contained object can "
"no longer be used.  The :c:func:`Py_CLEAR` macro performs the operations in "
"a safe order."
msgstr ""

# 73ed6e959ade458bb3d949a5421a1c96
#: ../src/Doc/c-api/typeobj.rst:659
msgid ""
"Because the goal of :attr:`tp_clear` functions is to break reference cycles, "
"it's not necessary to clear contained objects like Python strings or Python "
"integers, which can't participate in reference cycles. On the other hand, it "
"may be convenient to clear all contained Python objects, and write the "
"type's :attr:`tp_dealloc` function to invoke :attr:`tp_clear`."
msgstr ""

# 3b96f06402f246a981fa23492498017c
#: ../src/Doc/c-api/typeobj.rst:665
msgid ""
"More information about Python's garbage collection scheme can be found in "
"section :ref:`supporting-cycle-detection`."
msgstr ""

# ee135230fe754118bf2de425d810d882
#: ../src/Doc/c-api/typeobj.rst:668
msgid ""
"This field is inherited by subtypes together with :attr:`tp_traverse` and "
"the :const:`Py_TPFLAGS_HAVE_GC` flag bit: the flag bit, :attr:`tp_traverse`, "
"and :attr:`tp_clear` are all inherited from the base type if they are all "
"zero in the subtype *and* the subtype has the :const:"
"`Py_TPFLAGS_HAVE_RICHCOMPARE` flag bit set."
msgstr ""

# 538ae9ad74f2416690a687adad61d8ae
#: ../src/Doc/c-api/typeobj.rst:677
msgid ""
"An optional pointer to the rich comparison function, whose signature is "
"``PyObject *tp_richcompare(PyObject *a, PyObject *b, int op)``."
msgstr ""

# a4b0423d744a43c38b8698d5553ba677
#: ../src/Doc/c-api/typeobj.rst:680
msgid ""
"The function should return the result of the comparison (usually ``Py_True`` "
"or ``Py_False``).  If the comparison is undefined, it must return "
"``Py_NotImplemented``, if another error occurred it must return ``NULL`` and "
"set an exception condition."
msgstr ""

# 9ae7714cdb3947558b94f62b48a3468c
#: ../src/Doc/c-api/typeobj.rst:687
msgid ""
"If you want to implement a type for which only a limited set of comparisons "
"makes sense (e.g. ``==`` and ``!=``, but not ``<`` and friends), directly "
"raise :exc:`TypeError` in the rich comparison function."
msgstr ""

# 639e7b9671c647a8b05ba82666395351
#: ../src/Doc/c-api/typeobj.rst:691
msgid ""
"This field is inherited by subtypes together with :attr:`tp_compare` and :"
"attr:`tp_hash`: a subtype inherits all three of :attr:`tp_compare`, :attr:"
"`tp_richcompare`, and :attr:`tp_hash`, when the subtype's :attr:"
"`tp_compare`, :attr:`tp_richcompare`, and :attr:`tp_hash` are all *NULL*."
msgstr ""

# b3154de1dda140af983a6e6e2fe8c635
#: ../src/Doc/c-api/typeobj.rst:696
msgid ""
"The following constants are defined to be used as the third argument for :"
"attr:`tp_richcompare` and for :c:func:`PyObject_RichCompare`:"
msgstr ""

# 26fab38551ce4c92ba68a0ad9625ea82
#: ../src/Doc/c-api/typeobj.rst:700
msgid "Constant"
msgstr ""

# dc02823955dd420b96b0417d5b87f2e8
#: ../src/Doc/c-api/typeobj.rst:700
msgid "Comparison"
msgstr ""

# 67caebef8b5b44d992044b43067c8390
#: ../src/Doc/c-api/typeobj.rst:702
msgid ":const:`Py_LT`"
msgstr ""

# 1a5c4cbf0fae4b218cfa4e4d40fd32c3
#: ../src/Doc/c-api/typeobj.rst:702
msgid "``<``"
msgstr ""

# d6a2c61500e74a1097dfabbd8cc4250a
#: ../src/Doc/c-api/typeobj.rst:704
msgid ":const:`Py_LE`"
msgstr ""

# c133d2992b8c482081414431c885da0e
#: ../src/Doc/c-api/typeobj.rst:704
msgid "``<=``"
msgstr ""

# b32831887c3142d782c918b1cabb3d78
#: ../src/Doc/c-api/typeobj.rst:706
msgid ":const:`Py_EQ`"
msgstr ""

# 7248dd8ada974e27ba06dc1e822bca5a
#: ../src/Doc/c-api/typeobj.rst:706
msgid "``==``"
msgstr ""

# 57281b731c2e46ce93d08be6b3907a18
#: ../src/Doc/c-api/typeobj.rst:708
msgid ":const:`Py_NE`"
msgstr ""

# 10c1195801cc4ea29c5edab4c4911b55
#: ../src/Doc/c-api/typeobj.rst:708
msgid "``!=``"
msgstr ""

# fff44e1c0e594c4c82342907e3b944f4
#: ../src/Doc/c-api/typeobj.rst:710
msgid ":const:`Py_GT`"
msgstr ""

# 05784eb703e34a6eaf72d666d0672b4b
#: ../src/Doc/c-api/typeobj.rst:710
msgid "``>``"
msgstr ""

# c7385657983e41b6857014c294e2e64c
#: ../src/Doc/c-api/typeobj.rst:712
msgid ":const:`Py_GE`"
msgstr ""

# b558faee27ea4f3fbe51aca518aea66c
#: ../src/Doc/c-api/typeobj.rst:712
msgid "``>=``"
msgstr ""

# 64db332926d349aabd6253de2b0aa68a
#: ../src/Doc/c-api/typeobj.rst:716
msgid ""
"The next field only exists if the :const:`Py_TPFLAGS_HAVE_WEAKREFS` flag bit "
"is set."
msgstr ""

# 3b6ce7aab99b44d591c96b5ccde8703f
#: ../src/Doc/c-api/typeobj.rst:721
msgid ""
"If the instances of this type are weakly referenceable, this field is "
"greater than zero and contains the offset in the instance structure of the "
"weak reference list head (ignoring the GC header, if present); this offset "
"is used by :c:func:`PyObject_ClearWeakRefs` and the :c:func:`PyWeakref_\\*` "
"functions.  The instance structure needs to include a field of type :c:type:"
"`PyObject\\*` which is initialized to *NULL*."
msgstr ""

# 61ac38fbc696499cb2b976a09956224a
#: ../src/Doc/c-api/typeobj.rst:728
msgid ""
"Do not confuse this field with :attr:`tp_weaklist`; that is the list head "
"for weak references to the type object itself."
msgstr ""

# 7e7f8973fe8444eab77b1769eaaedecd
#: ../src/Doc/c-api/typeobj.rst:731
msgid ""
"This field is inherited by subtypes, but see the rules listed below. A "
"subtype may override this offset; this means that the subtype uses a "
"different weak reference list head than the base type.  Since the list head "
"is always found via :attr:`tp_weaklistoffset`, this should not be a problem."
msgstr ""

# f27f83fce823437f8fba2daf48e19c5e
#: ../src/Doc/c-api/typeobj.rst:736
msgid ""
"When a type defined by a class statement has no :attr:`__slots__` "
"declaration, and none of its base types are weakly referenceable, the type "
"is made weakly referenceable by adding a weak reference list head slot to "
"the instance layout and setting the :attr:`tp_weaklistoffset` of that slot's "
"offset."
msgstr ""

# 6cc618714ae24aeea7abd55758065713
#: ../src/Doc/c-api/typeobj.rst:741
msgid ""
"When a type's :attr:`__slots__` declaration contains a slot named :attr:"
"`__weakref__`, that slot becomes the weak reference list head for instances "
"of the type, and the slot's offset is stored in the type's :attr:"
"`tp_weaklistoffset`."
msgstr ""

# e50535819e684c56bf9c978a939836d7
#: ../src/Doc/c-api/typeobj.rst:746
msgid ""
"When a type's :attr:`__slots__` declaration does not contain a slot named :"
"attr:`__weakref__`, the type inherits its :attr:`tp_weaklistoffset` from its "
"base type."
msgstr ""

# a4afa4a7201e4488bd20fa9b35048168
#: ../src/Doc/c-api/typeobj.rst:750
msgid ""
"The next two fields only exist if the :const:`Py_TPFLAGS_HAVE_ITER` flag bit "
"is set."
msgstr ""

# b131c19695b54168b64dd988f8f60e52
#: ../src/Doc/c-api/typeobj.rst:756
msgid ""
"An optional pointer to a function that returns an iterator for the object.  "
"Its presence normally signals that the instances of this type are iterable "
"(although sequences may be iterable without this function, and classic "
"instances always have this function, even if they don't define an :meth:"
"`__iter__` method)."
msgstr ""

# 944e094eaa8a46079a84d0cb232123d6
#: ../src/Doc/c-api/typeobj.rst:761
msgid "This function has the same signature as :c:func:`PyObject_GetIter`."
msgstr ""

# 582dbb813c8a40cfbdbf0d3da9d9c789
#: ../src/Doc/c-api/typeobj.rst:768
msgid ""
"An optional pointer to a function that returns the next item in an iterator. "
"When the iterator is exhausted, it must return *NULL*; a :exc:"
"`StopIteration` exception may or may not be set.  When another error occurs, "
"it must return *NULL* too.  Its presence normally signals that the instances "
"of this type are iterators (although classic instances always have this "
"function, even if they don't define a :meth:`next` method)."
msgstr ""

# ae586ab7218e4e15b88b277622437c3c
#: ../src/Doc/c-api/typeobj.rst:775
msgid ""
"Iterator types should also define the :attr:`tp_iter` function, and that "
"function should return the iterator instance itself (not a new iterator "
"instance)."
msgstr ""

# 2f82c6f296c044b1ad4d39ca7a2244d5
#: ../src/Doc/c-api/typeobj.rst:779
msgid "This function has the same signature as :c:func:`PyIter_Next`."
msgstr ""

# a415c7b72f094b78a8e89a6889191485
#: ../src/Doc/c-api/typeobj.rst:783
msgid ""
"The next fields, up to and including :attr:`tp_weaklist`, only exist if the :"
"const:`Py_TPFLAGS_HAVE_CLASS` flag bit is set."
msgstr ""

# efe586758a5f47239bc53165708bc9c0
#: ../src/Doc/c-api/typeobj.rst:789
msgid ""
"An optional pointer to a static *NULL*-terminated array of :c:type:"
"`PyMethodDef` structures, declaring regular methods of this type."
msgstr ""

# e811e87013364a8a96d39096b7dba3c0
#: ../src/Doc/c-api/typeobj.rst:792
msgid ""
"For each entry in the array, an entry is added to the type's dictionary "
"(see :attr:`tp_dict` below) containing a method descriptor."
msgstr ""

# 5a9dc8ba444b4461ae43e363759b981c
#: ../src/Doc/c-api/typeobj.rst:795
msgid ""
"This field is not inherited by subtypes (methods are inherited through a "
"different mechanism)."
msgstr ""

# c15ea96f585244139e1f404e4e43b07e
#: ../src/Doc/c-api/typeobj.rst:801
msgid ""
"An optional pointer to a static *NULL*-terminated array of :c:type:"
"`PyMemberDef` structures, declaring regular data members (fields or slots) "
"of instances of this type."
msgstr ""

# f14850b5ba424cedb89c6ee053416daf
#: ../src/Doc/c-api/typeobj.rst:805
msgid ""
"For each entry in the array, an entry is added to the type's dictionary "
"(see :attr:`tp_dict` below) containing a member descriptor."
msgstr ""

# 5c0508cc7e9f4542af03817e44d5bfe2
#: ../src/Doc/c-api/typeobj.rst:808
msgid ""
"This field is not inherited by subtypes (members are inherited through a "
"different mechanism)."
msgstr ""

# 09caeb3159994f58af2d693f0164c44f
#: ../src/Doc/c-api/typeobj.rst:814
msgid ""
"An optional pointer to a static *NULL*-terminated array of :c:type:"
"`PyGetSetDef` structures, declaring computed attributes of instances of this "
"type."
msgstr ""

# 68d96d1f22dc4bca93a4dbbc1805acd9
#: ../src/Doc/c-api/typeobj.rst:817
msgid ""
"For each entry in the array, an entry is added to the type's dictionary "
"(see :attr:`tp_dict` below) containing a getset descriptor."
msgstr ""

# 000c9cdae6e24b289ebc35029aad909f
#: ../src/Doc/c-api/typeobj.rst:820
msgid ""
"This field is not inherited by subtypes (computed attributes are inherited "
"through a different mechanism)."
msgstr ""

# 693302b703f04ae5918a26857372aa94
#: ../src/Doc/c-api/typeobj.rst:825
msgid "Docs for PyGetSetDef::"
msgstr ""

# 4557ce1088614d278c6ae6daab1d3260
#: ../src/Doc/c-api/typeobj.rst:841
msgid ""
"An optional pointer to a base type from which type properties are "
"inherited.  At this level, only single inheritance is supported; multiple "
"inheritance require dynamically creating a type object by calling the "
"metatype."
msgstr ""

# 3f4fd858e5f841519de5b1465f006715
#: ../src/Doc/c-api/typeobj.rst:845
msgid ""
"This field is not inherited by subtypes (obviously), but it defaults to "
"``&PyBaseObject_Type`` (which to Python programmers is known as the type :"
"class:`object`)."
msgstr ""

# 37d7158767bd49cfb4ce29f0fcaa0b07
#: ../src/Doc/c-api/typeobj.rst:852
msgid "The type's dictionary is stored here by :c:func:`PyType_Ready`."
msgstr ""

# fb27a67846c84738927b66c4307d50ae
#: ../src/Doc/c-api/typeobj.rst:854
msgid ""
"This field should normally be initialized to *NULL* before PyType_Ready is "
"called; it may also be initialized to a dictionary containing initial "
"attributes for the type.  Once :c:func:`PyType_Ready` has initialized the "
"type, extra attributes for the type may be added to this dictionary only if "
"they don't correspond to overloaded operations (like :meth:`__add__`)."
msgstr ""

# 1402073c08404448b0e97c0b80a7c914
#: ../src/Doc/c-api/typeobj.rst:860
msgid ""
"This field is not inherited by subtypes (though the attributes defined in "
"here are inherited through a different mechanism)."
msgstr ""

# 145681994c24463a88c8212c4de13bf3
#: ../src/Doc/c-api/typeobj.rst:866
msgid "An optional pointer to a \"descriptor get\" function."
msgstr ""

# 0259eb6b08264a09adae81aed34b160b
# e31b9c51327d464189c85ce41f54e4fc
# c23ed7bcbfaf469e8f7322d405a8e812
# 6879487142384f3998175c76407cd227
# fa1a0dd892f042cbaa716ae35ef6817e
#: ../src/Doc/c-api/typeobj.rst:868 ../src/Doc/c-api/typeobj.rst:881
#: ../src/Doc/c-api/typeobj.rst:952 ../src/Doc/c-api/typeobj.rst:977
#: ../src/Doc/c-api/typeobj.rst:1008
msgid "The function signature is ::"
msgstr ""

# 99366363f2254cd5bfc6b99a4b49cf6f
#: ../src/Doc/c-api/typeobj.rst:879
msgid "An optional pointer to a \"descriptor set\" function."
msgstr ""

# b000266c9dd44c858680eb7f0da49a3a
#: ../src/Doc/c-api/typeobj.rst:892
msgid ""
"If the instances of this type have a dictionary containing instance "
"variables, this field is non-zero and contains the offset in the instances "
"of the type of the instance variable dictionary; this offset is used by :c:"
"func:`PyObject_GenericGetAttr`."
msgstr ""

# 1abc4a0397fd49019810d44a48e79f06
#: ../src/Doc/c-api/typeobj.rst:897
msgid ""
"Do not confuse this field with :attr:`tp_dict`; that is the dictionary for "
"attributes of the type object itself."
msgstr ""

# b9d3b3af57e54c92bf7059d3b412714b
#: ../src/Doc/c-api/typeobj.rst:900
msgid ""
"If the value of this field is greater than zero, it specifies the offset "
"from the start of the instance structure.  If the value is less than zero, "
"it specifies the offset from the *end* of the instance structure.  A "
"negative offset is more expensive to use, and should only be used when the "
"instance structure contains a variable-length part.  This is used for "
"example to add an instance variable dictionary to subtypes of :class:`str` "
"or :class:`tuple`. Note that the :attr:`tp_basicsize` field should account "
"for the dictionary added to the end in that case, even though the dictionary "
"is not included in the basic object layout.  On a system with a pointer size "
"of 4 bytes, :attr:`tp_dictoffset` should be set to ``-4`` to indicate that "
"the dictionary is at the very end of the structure."
msgstr ""

# a110240186844b7aacec6ff4fdda0768
#: ../src/Doc/c-api/typeobj.rst:912
msgid ""
"The real dictionary offset in an instance can be computed from a negative :"
"attr:`tp_dictoffset` as follows::"
msgstr ""

# dd6a1789c89b4c869f89dc03ff8869b1
#: ../src/Doc/c-api/typeobj.rst:919
msgid ""
"where :attr:`tp_basicsize`, :attr:`tp_itemsize` and :attr:`tp_dictoffset` "
"are taken from the type object, and :attr:`ob_size` is taken from the "
"instance.  The absolute value is taken because long ints use the sign of :"
"attr:`ob_size` to store the sign of the number.  (There's never a need to do "
"this calculation yourself; it is done for you by :c:func:"
"`_PyObject_GetDictPtr`.)"
msgstr ""

# 17b8379694034436beb174523d867537
#: ../src/Doc/c-api/typeobj.rst:925
msgid ""
"This field is inherited by subtypes, but see the rules listed below. A "
"subtype may override this offset; this means that the subtype instances "
"store the dictionary at a difference offset than the base type.  Since the "
"dictionary is always found via :attr:`tp_dictoffset`, this should not be a "
"problem."
msgstr ""

# 2aa4ecafe35545938d98ad48014ca36c
#: ../src/Doc/c-api/typeobj.rst:930
msgid ""
"When a type defined by a class statement has no :attr:`__slots__` "
"declaration, and none of its base types has an instance variable dictionary, "
"a dictionary slot is added to the instance layout and the :attr:"
"`tp_dictoffset` is set to that slot's offset."
msgstr ""

# b23b858e3e3d443b964c5a9dee1b6de1
#: ../src/Doc/c-api/typeobj.rst:935
msgid ""
"When a type defined by a class statement has a :attr:`__slots__` "
"declaration, the type inherits its :attr:`tp_dictoffset` from its base type."
msgstr ""

# 7b8693a33ce44f6f93d6da9d011904d6
#: ../src/Doc/c-api/typeobj.rst:938
msgid ""
"(Adding a slot named :attr:`__dict__` to the :attr:`__slots__` declaration "
"does not have the expected effect, it just causes confusion.  Maybe this "
"should be added as a feature just like :attr:`__weakref__` though.)"
msgstr ""

# 4fed7ec95dd04394b092f1154ed9fc8b
#: ../src/Doc/c-api/typeobj.rst:945
msgid "An optional pointer to an instance initialization function."
msgstr ""

# 6027cdbb2d754a8aa7b31094f6644467
#: ../src/Doc/c-api/typeobj.rst:947
msgid ""
"This function corresponds to the :meth:`__init__` method of classes.  Like :"
"meth:`__init__`, it is possible to create an instance without calling :meth:"
"`__init__`, and it is possible to reinitialize an instance by calling its :"
"meth:`__init__` method again."
msgstr ""

# cea5501195934072ae1bedce5a5b6698
#: ../src/Doc/c-api/typeobj.rst:956
msgid ""
"The self argument is the instance to be initialized; the *args* and *kwds* "
"arguments represent positional and keyword arguments of the call to :meth:"
"`__init__`."
msgstr ""

# 0a67a07afce64fc48aea63ea0ac3a4e4
#: ../src/Doc/c-api/typeobj.rst:960
msgid ""
"The :attr:`tp_init` function, if not *NULL*, is called when an instance is "
"created normally by calling its type, after the type's :attr:`tp_new` "
"function has returned an instance of the type.  If the :attr:`tp_new` "
"function returns an instance of some other type that is not a subtype of the "
"original type, no :attr:`tp_init` function is called; if :attr:`tp_new` "
"returns an instance of a subtype of the original type, the subtype's :attr:"
"`tp_init` is called.  (VERSION NOTE: described here is what is implemented "
"in Python 2.2.1 and later.  In Python 2.2, the :attr:`tp_init` of the type "
"of the object returned by :attr:`tp_new` was always called, if not *NULL*.)"
msgstr ""

# 841ed6391b2d4fffb75f72f70c6a90e3
#: ../src/Doc/c-api/typeobj.rst:975
msgid "An optional pointer to an instance allocation function."
msgstr ""

# 046d013dfa1447719b8206275c1560bb
#: ../src/Doc/c-api/typeobj.rst:981
msgid ""
"The purpose of this function is to separate memory allocation from memory "
"initialization.  It should return a pointer to a block of memory of adequate "
"length for the instance, suitably aligned, and initialized to zeros, but "
"with :attr:`ob_refcnt` set to ``1`` and :attr:`ob_type` set to the type "
"argument.  If the type's :attr:`tp_itemsize` is non-zero, the object's :attr:"
"`ob_size` field should be initialized to *nitems* and the length of the "
"allocated memory block should be ``tp_basicsize + nitems*tp_itemsize``, "
"rounded up to a multiple of ``sizeof(void*)``; otherwise, *nitems* is not "
"used and the length of the block should be :attr:`tp_basicsize`."
msgstr ""

# 91f7f45569b645ca9c9e3d80edecc945
#: ../src/Doc/c-api/typeobj.rst:991
msgid ""
"Do not use this function to do any other instance initialization, not even "
"to allocate additional memory; that should be done by :attr:`tp_new`."
msgstr ""

# ab64547acb00487b902276334bf99314
#: ../src/Doc/c-api/typeobj.rst:994
msgid ""
"This field is inherited by static subtypes, but not by dynamic subtypes "
"(subtypes created by a class statement); in the latter, this field is always "
"set to :c:func:`PyType_GenericAlloc`, to force a standard heap allocation "
"strategy. That is also the recommended value for statically defined types."
msgstr ""

# 5a37bdbaaaed41bebdcc7684954982af
#: ../src/Doc/c-api/typeobj.rst:1002
msgid "An optional pointer to an instance creation function."
msgstr ""

# 42ec93767f234009af8186d564820816
#: ../src/Doc/c-api/typeobj.rst:1004
msgid ""
"If this function is *NULL* for a particular type, that type cannot be called "
"to create new instances; presumably there is some other way to create "
"instances, like a factory function."
msgstr ""

# a8f1239587c249e896ac796ed512a9c2
#: ../src/Doc/c-api/typeobj.rst:1012
msgid ""
"The subtype argument is the type of the object being created; the *args* and "
"*kwds* arguments represent positional and keyword arguments of the call to "
"the type.  Note that subtype doesn't have to equal the type whose :attr:"
"`tp_new` function is called; it may be a subtype of that type (but not an "
"unrelated type)."
msgstr ""

# f645c28d462247efb1d2f6968714af98
#: ../src/Doc/c-api/typeobj.rst:1018
msgid ""
"The :attr:`tp_new` function should call ``subtype->tp_alloc(subtype, nitems)"
"`` to allocate space for the object, and then do only as much further "
"initialization as is absolutely necessary.  Initialization that can safely "
"be ignored or repeated should be placed in the :attr:`tp_init` handler.  A "
"good rule of thumb is that for immutable types, all initialization should "
"take place in :attr:`tp_new`, while for mutable types, most initialization "
"should be deferred to :attr:`tp_init`."
msgstr ""

# a522d927488c46a491b23da16e11593e
#: ../src/Doc/c-api/typeobj.rst:1026
msgid ""
"This field is inherited by subtypes, except it is not inherited by static "
"types whose :attr:`tp_base` is *NULL* or ``&PyBaseObject_Type``.  The latter "
"exception is a precaution so that old extension types don't become callable "
"simply by being linked with Python 2.2."
msgstr ""

# 7f9bc9b47d944638999d015eb262e78d
#: ../src/Doc/c-api/typeobj.rst:1034
msgid "An optional pointer to an instance deallocation function."
msgstr ""

# 7cecee82fa44420085ac3babefaabb7d
#: ../src/Doc/c-api/typeobj.rst:1036
msgid ""
"The signature of this function has changed slightly: in Python 2.2 and "
"2.2.1, its signature is :c:type:`destructor`::"
msgstr ""

# 5920fa3afd8a47e885a4530d9c1824a9
#: ../src/Doc/c-api/typeobj.rst:1041
msgid "In Python 2.3 and beyond, its signature is :c:type:`freefunc`::"
msgstr ""

# a5fa12c8ddea4e24b68db2d522f85516
#: ../src/Doc/c-api/typeobj.rst:1045
msgid ""
"The only initializer that is compatible with both versions is "
"``_PyObject_Del``, whose definition has suitably adapted in Python 2.3."
msgstr ""

# 8e7dbb7c78564b03a6d8dcb681715bae
#: ../src/Doc/c-api/typeobj.rst:1048
msgid ""
"This field is inherited by static subtypes, but not by dynamic subtypes "
"(subtypes created by a class statement); in the latter, this field is set to "
"a deallocator suitable to match :c:func:`PyType_GenericAlloc` and the value "
"of the :const:`Py_TPFLAGS_HAVE_GC` flag bit."
msgstr ""

# ac1f7289620e4e7ab2fe348bc63dcbfd
#: ../src/Doc/c-api/typeobj.rst:1056
msgid "An optional pointer to a function called by the garbage collector."
msgstr ""

# 65fb00ca7fdb406cad2a960f7e2808a1
#: ../src/Doc/c-api/typeobj.rst:1058
msgid ""
"The garbage collector needs to know whether a particular object is "
"collectible or not.  Normally, it is sufficient to look at the object's "
"type's :attr:`tp_flags` field, and check the :const:`Py_TPFLAGS_HAVE_GC` "
"flag bit.  But some types have a mixture of statically and dynamically "
"allocated instances, and the statically allocated instances are not "
"collectible.  Such types should define this function; it should return ``1`` "
"for a collectible instance, and ``0`` for a non-collectible instance. The "
"signature is ::"
msgstr ""

# b1792554e09344f989bab39bc0ed034c
#: ../src/Doc/c-api/typeobj.rst:1068
msgid ""
"(The only example of this are types themselves.  The metatype, :c:data:"
"`PyType_Type`, defines this function to distinguish between statically and "
"dynamically allocated types.)"
msgstr ""

# 07c92798daeb4859b9849bc20c09ad40
#: ../src/Doc/c-api/typeobj.rst:1072
msgid ""
"This field is inherited by subtypes.  (VERSION NOTE: in Python 2.2, it was "
"not inherited.  It is inherited in 2.2.1 and later versions.)"
msgstr ""

# cd18d01c55e64341bdfaf9e988fa5f3e
#: ../src/Doc/c-api/typeobj.rst:1078
msgid "Tuple of base types."
msgstr ""

# 0a07d2c89bbb442d8f355cff33eb69cb
#: ../src/Doc/c-api/typeobj.rst:1080
msgid ""
"This is set for types created by a class statement.  It should be *NULL* for "
"statically defined types."
msgstr ""

# 803bcc45612c4ae3aedbe32c8087b9e0
#: ../src/Doc/c-api/typeobj.rst:1083
msgid "This field is not inherited."
msgstr ""

# b12434c6588345aca51561b724cfad80
#: ../src/Doc/c-api/typeobj.rst:1088
msgid ""
"Tuple containing the expanded set of base types, starting with the type "
"itself and ending with :class:`object`, in Method Resolution Order."
msgstr ""

# 2b83a628e96743a2b126a0d2e4194334
#: ../src/Doc/c-api/typeobj.rst:1091
msgid ""
"This field is not inherited; it is calculated fresh by :c:func:"
"`PyType_Ready`."
msgstr ""

# e2daefdf42b84e22aabde79602575504
#: ../src/Doc/c-api/typeobj.rst:1096
msgid "Unused.  Not inherited.  Internal use only."
msgstr ""

# 3b392394f724402cb544944eec8d5f9b
#: ../src/Doc/c-api/typeobj.rst:1101
msgid ""
"List of weak references to subclasses.  Not inherited.  Internal use only."
msgstr ""

# 7b19279292ac43ba83ffb538f435b0e5
#: ../src/Doc/c-api/typeobj.rst:1106
msgid ""
"Weak reference list head, for weak references to this type object.  Not "
"inherited.  Internal use only."
msgstr ""

#: ../src/Doc/c-api/typeobj.rst:1109
msgid ""
"The remaining fields are only defined if the feature test macro :const:"
"`COUNT_ALLOCS` is defined, and are for internal use only. They are "
"documented here for completeness.  None of these fields are inherited by "
"subtypes."
msgstr ""

# 928733b183284862a75a3eaa0807466e
#: ../src/Doc/c-api/typeobj.rst:1117
msgid "Number of allocations."
msgstr ""

#: ../src/Doc/c-api/typeobj.rst:1122
#, fuzzy
msgid "Number of frees."
msgstr "Nombres"

# 88405ffe022c4f31b40e912f0ebd183b
#: ../src/Doc/c-api/typeobj.rst:1127
msgid "Maximum simultaneously allocated objects."
msgstr ""

# fb00f0a4b944477598ccac14cc6ac9ce
#: ../src/Doc/c-api/typeobj.rst:1132
msgid ""
"Pointer to the next type object with a non-zero :attr:`tp_allocs` field."
msgstr ""

#: ../src/Doc/c-api/typeobj.rst:1134
msgid ""
"Also, note that, in a garbage collected Python, tp_dealloc may be called "
"from any Python thread, not just the thread which created the object (if the "
"object becomes part of a refcount cycle, that cycle might be collected by a "
"garbage collection on any thread).  This is not a problem for Python API "
"calls, since the thread on which tp_dealloc is called will own the Global "
"Interpreter Lock (GIL). However, if the object being destroyed in turn "
"destroys objects from some other C or C++ library, care should be taken to "
"ensure that destroying those objects on the thread which called tp_dealloc "
"will not violate any assumptions of the library."
msgstr ""

#: ../src/Doc/c-api/typeobj.rst:1148
msgid "Number Object Structures"
msgstr ""

# 983944e5cb4148b6b0c7724b12d198c0
#: ../src/Doc/c-api/typeobj.rst:1155
msgid ""
"This structure holds pointers to the functions which an object uses to "
"implement the number protocol.  Almost every function below is used by the "
"function of similar name documented in the :ref:`number` section."
msgstr ""

# 552578d2dd224945a0749a4aa8021ca1
#: ../src/Doc/c-api/typeobj.rst:1159
msgid "Here is the structure definition::"
msgstr ""

# ca533ec618bb4938914f3b82d79b3243
#: ../src/Doc/c-api/typeobj.rst:1210
msgid ""
"Binary and ternary functions may receive different kinds of arguments, "
"depending on the flag bit :const:`Py_TPFLAGS_CHECKTYPES`:"
msgstr ""

# f99446854acf4b21b4a16ad4dc677451
#: ../src/Doc/c-api/typeobj.rst:1213
msgid ""
"If :const:`Py_TPFLAGS_CHECKTYPES` is not set, the function arguments are "
"guaranteed to be of the object's type; the caller is responsible for calling "
"the coercion method specified by the :attr:`nb_coerce` member to convert the "
"arguments:"
msgstr ""

# 4b723224911940e0810192c67f511fb5
#: ../src/Doc/c-api/typeobj.rst:1220
msgid ""
"This function is used by :c:func:`PyNumber_CoerceEx` and has the same "
"signature.  The first argument is always a pointer to an object of the "
"defined type.  If the conversion to a common \"larger\" type is possible, "
"the function replaces the pointers with new references to the converted "
"objects and returns ``0``.  If the conversion is not possible, the function "
"returns ``1``.  If an error condition is set, it will return ``-1``."
msgstr ""

# f836824977654d8e8ac6d3e8a86aacc8
#: ../src/Doc/c-api/typeobj.rst:1227
msgid ""
"If the :const:`Py_TPFLAGS_CHECKTYPES` flag is set, binary and ternary "
"functions must check the type of all their operands, and implement the "
"necessary conversions (at least one of the operands is an instance of the "
"defined type).  This is the recommended way; with Python 3 coercion will "
"disappear completely."
msgstr ""

# 8ced00c7bca14c78aca25d705fc4ce95
#: ../src/Doc/c-api/typeobj.rst:1233
msgid ""
"If the operation is not defined for the given operands, binary and ternary "
"functions must return ``Py_NotImplemented``, if another error occurred they "
"must return ``NULL`` and set an exception."
msgstr ""

#: ../src/Doc/c-api/typeobj.rst:1241
msgid "Mapping Object Structures"
msgstr ""

# 7ce475fc35bb4096b07b7df79196e229
#: ../src/Doc/c-api/typeobj.rst:1248
msgid ""
"This structure holds pointers to the functions which an object uses to "
"implement the mapping protocol.  It has three members:"
msgstr ""

# df656c21fc3649258766118ba8d15ef9
#: ../src/Doc/c-api/typeobj.rst:1253
msgid ""
"This function is used by :c:func:`PyMapping_Length` and :c:func:"
"`PyObject_Size`, and has the same signature.  This slot may be set to *NULL* "
"if the object has no defined length."
msgstr ""

# 92d2b643e83a474385a2c6f5ad08a594
#: ../src/Doc/c-api/typeobj.rst:1259
msgid ""
"This function is used by :c:func:`PyObject_GetItem` and has the same "
"signature.  This slot must be filled for the :c:func:`PyMapping_Check` "
"function to return ``1``, it can be *NULL* otherwise."
msgstr ""

# c56db85413f84454813b0f352c132e52
#: ../src/Doc/c-api/typeobj.rst:1265
msgid ""
"This function is used by :c:func:`PyObject_SetItem` and has the same "
"signature.  If this slot is *NULL*, the object does not support item "
"assignment."
msgstr ""

#: ../src/Doc/c-api/typeobj.rst:1273
msgid "Sequence Object Structures"
msgstr ""

# f524c7586e5e4f6b8794695a7c5c42dc
#: ../src/Doc/c-api/typeobj.rst:1280
msgid ""
"This structure holds pointers to the functions which an object uses to "
"implement the sequence protocol."
msgstr ""

# 6281d0e13771417d81344ea74f3a3a45
#: ../src/Doc/c-api/typeobj.rst:1285
msgid ""
"This function is used by :c:func:`PySequence_Size` and :c:func:"
"`PyObject_Size`, and has the same signature."
msgstr ""

# 5831c20501a64d47a505d720e7f84812
#: ../src/Doc/c-api/typeobj.rst:1290
msgid ""
"This function is used by :c:func:`PySequence_Concat` and has the same "
"signature.  It is also used by the ``+`` operator, after trying the numeric "
"addition via the :attr:`tp_as_number.nb_add` slot."
msgstr ""

# f0980fcc813543dbb13c75acc7e0766b
#: ../src/Doc/c-api/typeobj.rst:1296
msgid ""
"This function is used by :c:func:`PySequence_Repeat` and has the same "
"signature.  It is also used by the ``*`` operator, after trying numeric "
"multiplication via the :attr:`tp_as_number.nb_mul` slot."
msgstr ""

# 708cef70b0ed407d8b97031ce1861799
#: ../src/Doc/c-api/typeobj.rst:1302
msgid ""
"This function is used by :c:func:`PySequence_GetItem` and has the same "
"signature.  This slot must be filled for the :c:func:`PySequence_Check` "
"function to return ``1``, it can be *NULL* otherwise."
msgstr ""

# 914fe6af0bc046b792a0d6e9bf0cc838
#: ../src/Doc/c-api/typeobj.rst:1306
msgid ""
"Negative indexes are handled as follows: if the :attr:`sq_length` slot is "
"filled, it is called and the sequence length is used to compute a positive "
"index which is passed to :attr:`sq_item`.  If :attr:`sq_length` is *NULL*, "
"the index is passed as is to the function."
msgstr ""

# 34dcfddc94914e66a9cc821d7adef219
#: ../src/Doc/c-api/typeobj.rst:1313
msgid ""
"This function is used by :c:func:`PySequence_SetItem` and has the same "
"signature.  This slot may be left to *NULL* if the object does not support "
"item assignment."
msgstr ""

# f03bfc73ddc94484ba5654ec4ba6f94f
#: ../src/Doc/c-api/typeobj.rst:1319
msgid ""
"This function may be used by :c:func:`PySequence_Contains` and has the same "
"signature.  This slot may be left to *NULL*, in this case :c:func:"
"`PySequence_Contains` simply traverses the sequence until it finds a match."
msgstr ""

# 307c7cde83334b41a786e9116187a4c3
#: ../src/Doc/c-api/typeobj.rst:1326
msgid ""
"This function is used by :c:func:`PySequence_InPlaceConcat` and has the same "
"signature.  It should modify its first operand, and return it."
msgstr ""

# 61b87b11cbfa4592a2788abffe9b58b8
#: ../src/Doc/c-api/typeobj.rst:1331
msgid ""
"This function is used by :c:func:`PySequence_InPlaceRepeat` and has the same "
"signature.  It should modify its first operand, and return it."
msgstr ""

#: ../src/Doc/c-api/typeobj.rst:1341
msgid "Buffer Object Structures"
msgstr ""

# 365ea80d4f9246c5930eea18f308d141
#: ../src/Doc/c-api/typeobj.rst:1346
msgid ""
"The buffer interface exports a model where an object can expose its internal "
"data as a set of chunks of data, where each chunk is specified as a pointer/"
"length pair.  These chunks are called :dfn:`segments` and are presumed to be "
"non-contiguous in memory."
msgstr ""

# b29cafed8d41425ca9e8ee25bd4faee0
#: ../src/Doc/c-api/typeobj.rst:1351
msgid ""
"If an object does not export the buffer interface, then its :attr:"
"`tp_as_buffer` member in the :c:type:`PyTypeObject` structure should be "
"*NULL*.  Otherwise, the :attr:`tp_as_buffer` will point to a :c:type:"
"`PyBufferProcs` structure."
msgstr ""

# f4d42531598245148b786487c4528c34
#: ../src/Doc/c-api/typeobj.rst:1357
msgid ""
"It is very important that your :c:type:`PyTypeObject` structure uses :const:"
"`Py_TPFLAGS_DEFAULT` for the value of the :attr:`tp_flags` member rather "
"than ``0``.  This tells the Python runtime that your :c:type:`PyBufferProcs` "
"structure contains the :attr:`bf_getcharbuffer` slot. Older versions of "
"Python did not have this member, so a new Python interpreter using an old "
"extension needs to be able to test for its presence before using it."
msgstr ""

# 1114b8e2cb28449d8fa2f123302cf67f
#: ../src/Doc/c-api/typeobj.rst:1367
msgid ""
"Structure used to hold the function pointers which define an implementation "
"of the buffer protocol."
msgstr ""

# 9ebf2b51869d42ee8c820f65f699d9f3
#: ../src/Doc/c-api/typeobj.rst:1370
msgid ""
"The first slot is :attr:`bf_getreadbuffer`, of type :c:type:"
"`getreadbufferproc`. If this slot is *NULL*, then the object does not "
"support reading from the internal data.  This is non-sensical, so "
"implementors should fill this in, but callers should test that the slot "
"contains a non-*NULL* value."
msgstr ""

# bbe3aba37bde4390889765465fa24260
#: ../src/Doc/c-api/typeobj.rst:1375
msgid ""
"The next slot is :attr:`bf_getwritebuffer` having type :c:type:"
"`getwritebufferproc`.  This slot may be *NULL* if the object does not allow "
"writing into its returned buffers."
msgstr ""

# 096adaec1d2c4d0cbfbfec332028503c
#: ../src/Doc/c-api/typeobj.rst:1379
msgid ""
"The third slot is :attr:`bf_getsegcount`, with type :c:type:"
"`getsegcountproc`. This slot must not be *NULL* and is used to inform the "
"caller how many segments the object contains.  Simple objects such as :c:"
"type:`PyString_Type` and :c:type:`PyBuffer_Type` objects contain a single "
"segment."
msgstr ""

# 6a9bfad2b9fb4799a6aa9e5978a9eff8
#: ../src/Doc/c-api/typeobj.rst:1386
msgid ""
"The last slot is :attr:`bf_getcharbuffer`, of type :c:type:"
"`getcharbufferproc`. This slot will only be present if the :const:"
"`Py_TPFLAGS_HAVE_GETCHARBUFFER` flag is present in the :attr:`tp_flags` "
"field of the object's :c:type:`PyTypeObject`. Before using this slot, the "
"caller should test whether it is present by using the :c:func:"
"`PyType_HasFeature` function.  If the flag is present, :attr:"
"`bf_getcharbuffer` may be *NULL*, indicating that the object's contents "
"cannot be used as *8-bit characters*. The slot function may also raise an "
"error if the object's contents cannot be interpreted as 8-bit characters. "
"For example, if the object is an array which is configured to hold floating "
"point values, an exception may be raised if a caller attempts to use :attr:"
"`bf_getcharbuffer` to fetch a sequence of 8-bit characters. This notion of "
"exporting the internal buffers as \"text\" is used to distinguish between "
"objects that are binary in nature, and those which have character-based "
"content."
msgstr ""

# 3ed43edff9a3490e918a2c7d0313a696
#: ../src/Doc/c-api/typeobj.rst:1402
msgid ""
"The current policy seems to state that these characters may be multi-byte "
"characters. This implies that a buffer size of *N* does not mean there are "
"*N* characters present."
msgstr ""

# e36076ec351f46aa89b254e94eecfc77
#: ../src/Doc/c-api/typeobj.rst:1409
msgid ""
"Flag bit set in the type structure to indicate that the :attr:"
"`bf_getcharbuffer` slot is known.  This being set does not indicate that the "
"object supports the buffer interface or that the :attr:`bf_getcharbuffer` "
"slot is non-*NULL*."
msgstr ""

# 200dacd933414e2cae6a0ebc2175c799
#: ../src/Doc/c-api/typeobj.rst:1416
msgid ""
"Return a pointer to a readable segment of the buffer in ``*ptrptr``.  This "
"function is allowed to raise an exception, in which case it must return "
"``-1``. The *segment* which is specified must be zero or positive, and "
"strictly less than the number of segments returned by the :attr:"
"`bf_getsegcount` slot function.  On success, it returns the length of the "
"segment, and sets ``*ptrptr`` to a pointer to that memory."
msgstr ""

# 6fd52798c421449c9aae4e4408fc5521
#: ../src/Doc/c-api/typeobj.rst:1426
msgid ""
"Return a pointer to a writable memory buffer in ``*ptrptr``, and the length "
"of that segment as the function return value.  The memory buffer must "
"correspond to buffer segment *segment*.  Must return ``-1`` and set an "
"exception on error. :exc:`TypeError` should be raised if the object only "
"supports read-only buffers, and :exc:`SystemError` should be raised when "
"*segment* specifies a segment that doesn't exist."
msgstr ""

# f375172a6aff4987b0bfa676ec0e8e36
#: ../src/Doc/c-api/typeobj.rst:1440
msgid ""
"Return the number of memory segments which comprise the buffer.  If *lenp* "
"is not *NULL*, the implementation must report the sum of the sizes (in "
"bytes) of all segments in ``*lenp``. The function cannot fail."
msgstr ""

# 2d4d98c23b1a42948cda3cbdb337e73e
#: ../src/Doc/c-api/typeobj.rst:1447
msgid ""
"Return the size of the segment *segment* that *ptrptr*  is set to.  "
"``*ptrptr`` is set to the memory buffer. Returns ``-1`` on error."
msgstr ""

#: ../src/Doc/c-api/unicode.rst:6
msgid "Unicode Objects and Codecs"
msgstr ""

#: ../src/Doc/c-api/unicode.rst:11
msgid "Unicode Objects"
msgstr ""

#: ../src/Doc/c-api/unicode.rst:15
msgid "Unicode Type"
msgstr ""

#: ../src/Doc/c-api/unicode.rst:17
msgid ""
"These are the basic Unicode object types used for the Unicode implementation "
"in Python:"
msgstr ""

# c1e649eb23be4f71ac41c559f0ceba22
#: ../src/Doc/c-api/unicode.rst:23
msgid ""
"This type represents the storage type which is used by Python internally as "
"basis for holding Unicode ordinals.  Python's default builds use a 16-bit "
"type for :c:type:`Py_UNICODE` and store Unicode values internally as UCS2. "
"It is also possible to build a UCS4 version of Python (most recent Linux "
"distributions come with UCS4 builds of Python). These builds then use a 32-"
"bit type for :c:type:`Py_UNICODE` and store Unicode data internally as UCS4. "
"On platforms where :c:type:`wchar_t` is available and compatible with the "
"chosen Python Unicode build variant, :c:type:`Py_UNICODE` is a typedef alias "
"for :c:type:`wchar_t` to enhance native platform compatibility. On all other "
"platforms, :c:type:`Py_UNICODE` is a typedef alias for either :c:type:"
"`unsigned short` (UCS2) or :c:type:`unsigned long` (UCS4)."
msgstr ""

#: ../src/Doc/c-api/unicode.rst:35
msgid ""
"Note that UCS2 and UCS4 Python builds are not binary compatible. Please keep "
"this in mind when writing extensions or interfaces."
msgstr ""

# ae3416e1cbb44bef9dd6ae627aae824f
#: ../src/Doc/c-api/unicode.rst:41
msgid "This subtype of :c:type:`PyObject` represents a Python Unicode object."
msgstr ""

# 6e35130632d740799835c7ba394b8d28
#: ../src/Doc/c-api/unicode.rst:46
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python Unicode type.  "
"It is exposed to Python code as ``unicode`` and ``types.UnicodeType``."
msgstr ""

#: ../src/Doc/c-api/unicode.rst:49
msgid ""
"The following APIs are really C macros and can be used to do fast checks and "
"to access internal read-only data of Unicode objects:"
msgstr ""

# 85c1f9d187d847e3872befc3fbf682b7
#: ../src/Doc/c-api/unicode.rst:55
msgid ""
"Return true if the object *o* is a Unicode object or an instance of a "
"Unicode subtype."
msgstr ""

# 2cc4d9512fd843b7b59c8a2c1bbf8502
#: ../src/Doc/c-api/unicode.rst:64
msgid ""
"Return true if the object *o* is a Unicode object, but not an instance of a "
"subtype."
msgstr ""

# 167fb5788db3440d9a6d1673d5f50e1a
#: ../src/Doc/c-api/unicode.rst:72
msgid ""
"Return the size of the object.  *o* has to be a :c:type:`PyUnicodeObject` "
"(not checked)."
msgstr ""

# fda64e2fddb24be7b9a688cb21ec19f9
#: ../src/Doc/c-api/unicode.rst:82
msgid ""
"Return the size of the object's internal buffer in bytes.  *o* has to be a :"
"c:type:`PyUnicodeObject` (not checked)."
msgstr ""

# 533a5ff2e73e4c008a7483fb849367ab
#: ../src/Doc/c-api/unicode.rst:92
msgid ""
"Return a pointer to the internal :c:type:`Py_UNICODE` buffer of the object.  "
"*o* has to be a :c:type:`PyUnicodeObject` (not checked)."
msgstr ""

# 51981019d52149eb9a9e358f742f5a10
#: ../src/Doc/c-api/unicode.rst:98
msgid ""
"Return a pointer to the internal buffer of the object. *o* has to be a :c:"
"type:`PyUnicodeObject` (not checked)."
msgstr ""

#: ../src/Doc/c-api/unicode.rst:110
msgid "Unicode Character Properties"
msgstr ""

#: ../src/Doc/c-api/unicode.rst:112
msgid ""
"Unicode provides many different character properties. The most often needed "
"ones are available through these macros which are mapped to C functions "
"depending on the Python configuration."
msgstr ""

# 9d5ecd35542c4ba88d3a88184f3cf6d9
#: ../src/Doc/c-api/unicode.rst:119
msgid "Return 1 or 0 depending on whether *ch* is a whitespace character."
msgstr ""

# 5644cff9b88c49a3bb84e9074963c3e1
#: ../src/Doc/c-api/unicode.rst:124
msgid "Return 1 or 0 depending on whether *ch* is a lowercase character."
msgstr ""

# 3275410f63644f7a9b47934eb957d42e
#: ../src/Doc/c-api/unicode.rst:129
msgid "Return 1 or 0 depending on whether *ch* is an uppercase character."
msgstr ""

# be288660e35f4f7fb57a205359bcd733
#: ../src/Doc/c-api/unicode.rst:134
msgid "Return 1 or 0 depending on whether *ch* is a titlecase character."
msgstr ""

# 9b4d2c17a93e404a9269222527ef2f07
#: ../src/Doc/c-api/unicode.rst:139
msgid "Return 1 or 0 depending on whether *ch* is a linebreak character."
msgstr ""

# 9d6a905f7c424bdca310c658d82a7f67
#: ../src/Doc/c-api/unicode.rst:144
msgid "Return 1 or 0 depending on whether *ch* is a decimal character."
msgstr ""

# ef4098491ebd425abf4ff6acbcfd164d
#: ../src/Doc/c-api/unicode.rst:149
msgid "Return 1 or 0 depending on whether *ch* is a digit character."
msgstr ""

# 024498c275ed4a2591cc010182216c88
#: ../src/Doc/c-api/unicode.rst:154
msgid "Return 1 or 0 depending on whether *ch* is a numeric character."
msgstr ""

# 10d5745a55c342678bed0627a0fd9eaa
#: ../src/Doc/c-api/unicode.rst:159
msgid "Return 1 or 0 depending on whether *ch* is an alphabetic character."
msgstr ""

# 8f92be5fb6e6442f92fcc7f81331b00f
#: ../src/Doc/c-api/unicode.rst:164
msgid "Return 1 or 0 depending on whether *ch* is an alphanumeric character."
msgstr ""

#: ../src/Doc/c-api/unicode.rst:166
msgid "These APIs can be used for fast direct character conversions:"
msgstr ""

# ecb896bc52ec49f3b6ae27067394a403
#: ../src/Doc/c-api/unicode.rst:171
msgid "Return the character *ch* converted to lower case."
msgstr ""

# 1c8faf9aa47b4bd9b000e0de817b8b0a
#: ../src/Doc/c-api/unicode.rst:176
msgid "Return the character *ch* converted to upper case."
msgstr ""

# 078c33c05fa443f5b41a50fa965b99d6
#: ../src/Doc/c-api/unicode.rst:181
msgid "Return the character *ch* converted to title case."
msgstr ""

# 82b75559fff64620a3e6d20afe30ee02
#: ../src/Doc/c-api/unicode.rst:186
msgid ""
"Return the character *ch* converted to a decimal positive integer.  Return "
"``-1`` if this is not possible.  This macro does not raise exceptions."
msgstr ""

# 72bae7f64c584f84a359cc8bd8f86517
#: ../src/Doc/c-api/unicode.rst:192
msgid ""
"Return the character *ch* converted to a single digit integer. Return ``-1`` "
"if this is not possible.  This macro does not raise exceptions."
msgstr ""

# 4e709eb9cf4149ba9007e03af01b0b2b
#: ../src/Doc/c-api/unicode.rst:198
msgid ""
"Return the character *ch* converted to a double. Return ``-1.0`` if this is "
"not possible.  This macro does not raise exceptions."
msgstr ""

#: ../src/Doc/c-api/unicode.rst:203
msgid "Plain Py_UNICODE"
msgstr ""

#: ../src/Doc/c-api/unicode.rst:205
msgid ""
"To create Unicode objects and access their basic sequence properties, use "
"these APIs:"
msgstr ""

# 724a1bfb537a46f591cd5e24349d1aa6
#: ../src/Doc/c-api/unicode.rst:211
msgid ""
"Create a Unicode object from the Py_UNICODE buffer *u* of the given size. "
"*u* may be *NULL* which causes the contents to be undefined. It is the "
"user's responsibility to fill in the needed data.  The buffer is copied into "
"the new object. If the buffer is not *NULL*, the return value might be a "
"shared object. Therefore, modification of the resulting Unicode object is "
"only allowed when *u* is *NULL*."
msgstr ""

# df4a5feea1b441408a3b4e6e54d45d2a
#: ../src/Doc/c-api/unicode.rst:225
msgid ""
"Create a Unicode object from the char buffer *u*.  The bytes will be "
"interpreted as being UTF-8 encoded.  *u* may also be *NULL* which causes the "
"contents to be undefined. It is the user's responsibility to fill in the "
"needed data.  The buffer is copied into the new object. If the buffer is not "
"*NULL*, the return value might be a shared object. Therefore, modification "
"of the resulting Unicode object is only allowed when *u* is *NULL*."
msgstr ""

# 4822c7a320274c86b325bed6c7c51062
#: ../src/Doc/c-api/unicode.rst:237
msgid ""
"Create a Unicode object from an UTF-8 encoded null-terminated char buffer "
"*u*."
msgstr ""

# 058a61eb04934c40a5d0a6da1482ff59
#: ../src/Doc/c-api/unicode.rst:245
msgid ""
"Take a C :c:func:`printf`\\ -style *format* string and a variable number of "
"arguments, calculate the size of the resulting Python unicode string and "
"return a string with the values formatted into it.  The variable arguments "
"must be C types and must correspond exactly to the format characters in the "
"*format* string.  The following format characters are allowed:"
msgstr ""

# 993a9d1617f64ee999e2f4ff2e468d87
#: ../src/Doc/c-api/unicode.rst:298
msgid ":attr:`%U`"
msgstr ""

#: ../src/Doc/c-api/unicode.rst:298 ../src/Doc/c-api/unicode.rst:307
#: ../src/Doc/c-api/unicode.rst:310
#, fuzzy
msgid "PyObject\\*"
msgstr "Objets bytes"

#: ../src/Doc/c-api/unicode.rst:298
#, fuzzy
msgid "A unicode object."
msgstr "Objets Code"

# 19d02724328347a8acdf35b213782955
#: ../src/Doc/c-api/unicode.rst:300
msgid ":attr:`%V`"
msgstr ""

# 0facd30369ed4af0b9b8b0e6a0c6511d
#: ../src/Doc/c-api/unicode.rst:300
msgid "PyObject\\*, char \\*"
msgstr ""

# f9710975af7d40f69b90266549168b9b
#: ../src/Doc/c-api/unicode.rst:300
msgid ""
"A unicode object (which may be *NULL*) and a null-terminated C character "
"array as a second parameter (which will be used, if the first parameter is "
"*NULL*)."
msgstr ""

# 16123e2f19a04f53b8f20480a3ebfaaa
#: ../src/Doc/c-api/unicode.rst:307
msgid ":attr:`%S`"
msgstr ""

# 8c22426dd9f941a7b753c3f4aa3d9d62
#: ../src/Doc/c-api/unicode.rst:307
msgid "The result of calling :func:`PyObject_Unicode`."
msgstr ""

# 141f8970997b4348a9cfc1f62278ec51
#: ../src/Doc/c-api/unicode.rst:310
msgid ":attr:`%R`"
msgstr ""

# 4d02118f693a4672a7ac42309bcda93a
#: ../src/Doc/c-api/unicode.rst:310
msgid "The result of calling :func:`PyObject_Repr`."
msgstr ""

# 230788c9945a492eafa96edaeecf9e24
#: ../src/Doc/c-api/unicode.rst:322
msgid ""
"Identical to :func:`PyUnicode_FromFormat` except that it takes exactly two "
"arguments."
msgstr ""

# c7b2d6fe97fd4aa0996241d026a5856a
#: ../src/Doc/c-api/unicode.rst:330
msgid ""
"Return a read-only pointer to the Unicode object's internal :c:type:"
"`Py_UNICODE` buffer, *NULL* if *unicode* is not a Unicode object. Note that "
"the resulting :c:type:`Py_UNICODE*` string may contain embedded null "
"characters, which would cause the string to be truncated when used in most C "
"functions."
msgstr ""

# 121248a33fa94a8a882b8d4234d94276
#: ../src/Doc/c-api/unicode.rst:339
msgid "Return the length of the Unicode object."
msgstr ""

# cc782b3976574a8b9550445fa89e79db
#: ../src/Doc/c-api/unicode.rst:348
msgid ""
"Coerce an encoded object *obj* to an Unicode object and return a reference "
"with incremented refcount."
msgstr ""

# 864ee09db6394d25a2351a36572c22ca
#: ../src/Doc/c-api/unicode.rst:351
msgid ""
"String and other char buffer compatible objects are decoded according to the "
"given encoding and using the error handling defined by errors.  Both can be "
"*NULL* to have the interface use the default values (see the next section "
"for details)."
msgstr ""

# 13f129df6975420f9315331621e74fc0
#: ../src/Doc/c-api/unicode.rst:356
msgid ""
"All other objects, including Unicode objects, cause a :exc:`TypeError` to be "
"set."
msgstr ""

# 52dd3f3f897b4c4398624a31b240ef88
#: ../src/Doc/c-api/unicode.rst:359
msgid ""
"The API returns *NULL* if there was an error.  The caller is responsible for "
"decref'ing the returned objects."
msgstr ""

# ea59f469ad0040539c545236000b8dfe
#: ../src/Doc/c-api/unicode.rst:365
msgid ""
"Shortcut for ``PyUnicode_FromEncodedObject(obj, NULL, \"strict\")`` which is "
"used throughout the interpreter whenever coercion to Unicode is needed."
msgstr ""

# 9bfca0b5cd2e4af6979e4b875beb5765
#: ../src/Doc/c-api/unicode.rst:368
msgid ""
"If the platform supports :c:type:`wchar_t` and provides a header file wchar."
"h, Python can interface directly to this type using the following functions. "
"Support is optimized if Python's own :c:type:`Py_UNICODE` type is identical "
"to the system's :c:type:`wchar_t`."
msgstr ""

#: ../src/Doc/c-api/unicode.rst:375
msgid "wchar_t Support"
msgstr ""

# 2a4607aab6ad4458a5a90aa07759eda7
#: ../src/Doc/c-api/unicode.rst:377
msgid ":c:type:`wchar_t` support for platforms which support it:"
msgstr ""

# 9bff4df14615432c8709dfef3ef59a0d
#: ../src/Doc/c-api/unicode.rst:381
msgid ""
"Create a Unicode object from the :c:type:`wchar_t` buffer *w* of the given "
"*size*. Return *NULL* on failure."
msgstr ""

# d6caf46daf2c4847a044006ea3d0eb02
#: ../src/Doc/c-api/unicode.rst:391
msgid ""
"Copy the Unicode object contents into the :c:type:`wchar_t` buffer *w*.  At "
"most *size* :c:type:`wchar_t` characters are copied (excluding a possibly "
"trailing 0-termination character).  Return the number of :c:type:`wchar_t` "
"characters copied or -1 in case of an error.  Note that the resulting :c:"
"type:`wchar_t` string may or may not be 0-terminated.  It is the "
"responsibility of the caller to make sure that the :c:type:`wchar_t` string "
"is 0-terminated in case this is required by the application. Also, note that "
"the :c:type:`wchar_t*` string might contain null characters, which would "
"cause the string to be truncated when used with most C functions."
msgstr ""

#: ../src/Doc/c-api/unicode.rst:410
msgid "Built-in Codecs"
msgstr ""

#: ../src/Doc/c-api/unicode.rst:412
msgid ""
"Python provides a set of built-in codecs which are written in C for speed. "
"All of these codecs are directly usable via the following functions."
msgstr ""

# 32e15506810845edae27cda4cf8a2835
#: ../src/Doc/c-api/unicode.rst:415
msgid ""
"Many of the following APIs take two arguments encoding and errors, and they "
"have the same semantics as the ones of the built-in :func:`unicode` Unicode "
"object constructor."
msgstr ""

# a7d4d947010c4b188a2d6edf2e33f6b1
#: ../src/Doc/c-api/unicode.rst:419
msgid ""
"Setting encoding to *NULL* causes the default encoding to be used which is "
"ASCII.  The file system calls should use :c:data:"
"`Py_FileSystemDefaultEncoding` as the encoding for file names. This variable "
"should be treated as read-only: on some systems, it will be a pointer to a "
"static string, on others, it will change at run-time (such as when the "
"application invokes setlocale)."
msgstr ""

#: ../src/Doc/c-api/unicode.rst:425
msgid ""
"Error handling is set by errors which may also be set to *NULL* meaning to "
"use the default handling defined for the codec.  Default error handling for "
"all built-in codecs is \"strict\" (:exc:`ValueError` is raised)."
msgstr ""

#: ../src/Doc/c-api/unicode.rst:429
msgid ""
"The codecs all use a similar interface.  Only deviation from the following "
"generic ones are documented for simplicity."
msgstr ""

#: ../src/Doc/c-api/unicode.rst:434
msgid "Generic Codecs"
msgstr ""

#: ../src/Doc/c-api/unicode.rst:436
msgid "These are the generic codec APIs:"
msgstr ""

# b583969961c84d7e9cb2045090315a1c
#: ../src/Doc/c-api/unicode.rst:441
msgid ""
"Create a Unicode object by decoding *size* bytes of the encoded string *s*. "
"*encoding* and *errors* have the same meaning as the parameters of the same "
"name in the :func:`unicode` built-in function.  The codec to be used is "
"looked up using the Python codec registry.  Return *NULL* if an exception "
"was raised by the codec."
msgstr ""

# 554dad9def1a49deb6beb2b1ec1f0aee
#: ../src/Doc/c-api/unicode.rst:454
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer *s* of the given *size* and return a "
"Python string object.  *encoding* and *errors* have the same meaning as the "
"parameters of the same name in the Unicode :meth:`encode` method.  The codec "
"to be used is looked up using the Python codec registry.  Return *NULL* if "
"an exception was raised by the codec."
msgstr ""

# 75b04fbea09d42029139473c94a3936c
#: ../src/Doc/c-api/unicode.rst:467
msgid ""
"Encode a Unicode object and return the result as Python string object. "
"*encoding* and *errors* have the same meaning as the parameters of the same "
"name in the Unicode :meth:`encode` method. The codec to be used is looked up "
"using the Python codec registry. Return *NULL* if an exception was raised by "
"the codec."
msgstr ""

#: ../src/Doc/c-api/unicode.rst:475
msgid "UTF-8 Codecs"
msgstr ""

#: ../src/Doc/c-api/unicode.rst:477
msgid "These are the UTF-8 codec APIs:"
msgstr ""

# 126e9b46364d4f9d97eed771c770acef
#: ../src/Doc/c-api/unicode.rst:482
msgid ""
"Create a Unicode object by decoding *size* bytes of the UTF-8 encoded string "
"*s*. Return *NULL* if an exception was raised by the codec."
msgstr ""

# dd8a557a2c0d4dadaa82676fb68d5a37
#: ../src/Doc/c-api/unicode.rst:492
msgid ""
"If *consumed* is *NULL*, behave like :c:func:`PyUnicode_DecodeUTF8`. If "
"*consumed* is not *NULL*, trailing incomplete UTF-8 byte sequences will not "
"be treated as an error. Those bytes will not be decoded and the number of "
"bytes that have been decoded will be stored in *consumed*."
msgstr ""

# 57c5547e43ea4ff4a4854d664c03b175
#: ../src/Doc/c-api/unicode.rst:506
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer *s* of the given *size* using UTF-8 "
"and return a Python string object.  Return *NULL* if an exception was raised "
"by the codec."
msgstr ""

# e97cb699ee10495bb61514c734c7abd9
#: ../src/Doc/c-api/unicode.rst:516
msgid ""
"Encode a Unicode object using UTF-8 and return the result as Python string "
"object.  Error handling is \"strict\".  Return *NULL* if an exception was "
"raised by the codec."
msgstr ""

#: ../src/Doc/c-api/unicode.rst:522
msgid "UTF-32 Codecs"
msgstr ""

#: ../src/Doc/c-api/unicode.rst:524
msgid "These are the UTF-32 codec APIs:"
msgstr ""

# 0db0f22d02af48a480b8757a79a95f98
#: ../src/Doc/c-api/unicode.rst:529
msgid ""
"Decode *size* bytes from a UTF-32 encoded buffer string and return the "
"corresponding Unicode object.  *errors* (if non-*NULL*) defines the error "
"handling. It defaults to \"strict\"."
msgstr ""

# 1aee21115aa64b5384c307ee3337a3ac
# 9d0548a8a6f74cd18144359cf16bcce6
#: ../src/Doc/c-api/unicode.rst:533 ../src/Doc/c-api/unicode.rst:609
msgid ""
"If *byteorder* is non-*NULL*, the decoder starts decoding using the given "
"byte order::"
msgstr ""

# 86d25039895e417c86f526896cd17230
#: ../src/Doc/c-api/unicode.rst:540
msgid ""
"If ``*byteorder`` is zero, and the first four bytes of the input data are a "
"byte order mark (BOM), the decoder switches to this byte order and the BOM "
"is not copied into the resulting Unicode string.  If ``*byteorder`` is "
"``-1`` or ``1``, any byte order mark is copied to the output."
msgstr ""

# 3c9176cd55eb4bd8adf524ca27f64b8e
# dbb9b42b53ab40149dacbdaab39889c1
#: ../src/Doc/c-api/unicode.rst:545 ../src/Doc/c-api/unicode.rst:622
msgid ""
"After completion, *\\*byteorder* is set to the current byte order at the end "
"of input data."
msgstr ""

# 875dab1db7304efba2672e0d5c5b72e6
#: ../src/Doc/c-api/unicode.rst:548
msgid ""
"In a narrow build codepoints outside the BMP will be decoded as surrogate "
"pairs."
msgstr ""

# 111b711e2d0d41ab97d0ccf66c2a05a7
# 304888e79c69445e99ffd162eba1ec62
#: ../src/Doc/c-api/unicode.rst:550 ../src/Doc/c-api/unicode.rst:625
msgid "If *byteorder* is *NULL*, the codec starts in native order mode."
msgstr ""

# 57326b8696c44bfbb15b04f8fb6ce66a
# 4193a55d2a454e099aa9b8af344cdb8c
# 04dc04aae8f0461ebbd06eaa46e52321
# bfbc8da02bf74b36a8b8497e04f078da
#: ../src/Doc/c-api/unicode.rst:552 ../src/Doc/c-api/unicode.rst:583
#: ../src/Doc/c-api/unicode.rst:627 ../src/Doc/c-api/unicode.rst:666
msgid "Return *NULL* if an exception was raised by the codec."
msgstr ""

# 80124895eccb4df6a991dff495b1367b
#: ../src/Doc/c-api/unicode.rst:559
msgid ""
"If *consumed* is *NULL*, behave like :c:func:`PyUnicode_DecodeUTF32`. If "
"*consumed* is not *NULL*, :c:func:`PyUnicode_DecodeUTF32Stateful` will not "
"treat trailing incomplete UTF-32 byte sequences (such as a number of bytes "
"not divisible by four) as an error. Those bytes will not be decoded and the "
"number of bytes that have been decoded will be stored in *consumed*."
msgstr ""

# 3efebdb738404774abfd6f5b765b3335
#: ../src/Doc/c-api/unicode.rst:570
msgid ""
"Return a Python bytes object holding the UTF-32 encoded value of the Unicode "
"data in *s*.  Output is written according to the following byte order::"
msgstr ""

# 8b0966bba2dd46d9b65eee5ad88eb083
# b513a9761fde41d6a8db8055452fbae0
#: ../src/Doc/c-api/unicode.rst:577 ../src/Doc/c-api/unicode.rst:659
msgid ""
"If byteorder is ``0``, the output string will always start with the Unicode "
"BOM mark (U+FEFF). In the other two modes, no BOM mark is prepended."
msgstr ""

# c67fe9bdcf8140778f255bfebecc85ef
#: ../src/Doc/c-api/unicode.rst:580
msgid ""
"If *Py_UNICODE_WIDE* is not defined, surrogate pairs will be output as a "
"single codepoint."
msgstr ""

# 17f1c1c08b0840faa75324453f2abebd
#: ../src/Doc/c-api/unicode.rst:590
msgid ""
"Return a Python string using the UTF-32 encoding in native byte order. The "
"string always starts with a BOM mark.  Error handling is \"strict\".  Return "
"*NULL* if an exception was raised by the codec."
msgstr ""

#: ../src/Doc/c-api/unicode.rst:598
msgid "UTF-16 Codecs"
msgstr ""

#: ../src/Doc/c-api/unicode.rst:600
msgid "These are the UTF-16 codec APIs:"
msgstr ""

# b27515a820bf4f3e8a30fb4ca42ad6e3
#: ../src/Doc/c-api/unicode.rst:605
msgid ""
"Decode *size* bytes from a UTF-16 encoded buffer string and return the "
"corresponding Unicode object.  *errors* (if non-*NULL*) defines the error "
"handling. It defaults to \"strict\"."
msgstr ""

# f43d29987386439f9ab84e7be20a2b4a
#: ../src/Doc/c-api/unicode.rst:616
msgid ""
"If ``*byteorder`` is zero, and the first two bytes of the input data are a "
"byte order mark (BOM), the decoder switches to this byte order and the BOM "
"is not copied into the resulting Unicode string.  If ``*byteorder`` is "
"``-1`` or ``1``, any byte order mark is copied to the output (where it will "
"result in either a ``\\ufeff`` or a ``\\ufffe`` character)."
msgstr ""

# 455b4843da2b4452b449d6115e9713ff
#: ../src/Doc/c-api/unicode.rst:636
msgid ""
"If *consumed* is *NULL*, behave like :c:func:`PyUnicode_DecodeUTF16`. If "
"*consumed* is not *NULL*, :c:func:`PyUnicode_DecodeUTF16Stateful` will not "
"treat trailing incomplete UTF-16 byte sequences (such as an odd number of "
"bytes or a split surrogate pair) as an error. Those bytes will not be "
"decoded and the number of bytes that have been decoded will be stored in "
"*consumed*."
msgstr ""

# 7dd52c483afe41f3ab0bc82fce1a7d7c
#: ../src/Doc/c-api/unicode.rst:652
msgid ""
"Return a Python string object holding the UTF-16 encoded value of the "
"Unicode data in *s*.  Output is written according to the following byte "
"order::"
msgstr ""

# ee5b71ee97e747e987fe0b8667221ba5
#: ../src/Doc/c-api/unicode.rst:662
msgid ""
"If *Py_UNICODE_WIDE* is defined, a single :c:type:`Py_UNICODE` value may get "
"represented as a surrogate pair. If it is not defined, each :c:type:"
"`Py_UNICODE` values is interpreted as an UCS-2 character."
msgstr ""

# a64d491607c84ad6bc3ac32845cc87a5
#: ../src/Doc/c-api/unicode.rst:675
msgid ""
"Return a Python string using the UTF-16 encoding in native byte order. The "
"string always starts with a BOM mark.  Error handling is \"strict\".  Return "
"*NULL* if an exception was raised by the codec."
msgstr ""

# 8b6077a7359548d8bd80d9ab25cdd6f1
#: ../src/Doc/c-api/unicode.rst:681
msgid "UTF-7 Codecs"
msgstr ""

# 358ce588fcbc4d99ae77f6ad37666271
#: ../src/Doc/c-api/unicode.rst:683
msgid "These are the UTF-7 codec APIs:"
msgstr ""

# fa547423e7db452dbc150e84ada593f8
#: ../src/Doc/c-api/unicode.rst:688
msgid ""
"Create a Unicode object by decoding *size* bytes of the UTF-7 encoded string "
"*s*.  Return *NULL* if an exception was raised by the codec."
msgstr ""

# 940d980536dc4ace9653adb7f7f04d66
#: ../src/Doc/c-api/unicode.rst:694
msgid ""
"If *consumed* is *NULL*, behave like :c:func:`PyUnicode_DecodeUTF7`.  If "
"*consumed* is not *NULL*, trailing incomplete UTF-7 base-64 sections will "
"not be treated as an error.  Those bytes will not be decoded and the number "
"of bytes that have been decoded will be stored in *consumed*."
msgstr ""

# 915d1a5136e44666829c8efa86d98de3
#: ../src/Doc/c-api/unicode.rst:702
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given size using UTF-7 and "
"return a Python bytes object.  Return *NULL* if an exception was raised by "
"the codec."
msgstr ""

# 2c968962519646e0a9d689a790f6a6b2
#: ../src/Doc/c-api/unicode.rst:706
msgid ""
"If *base64SetO* is nonzero, \"Set O\" (punctuation that has no otherwise "
"special meaning) will be encoded in base-64.  If *base64WhiteSpace* is "
"nonzero, whitespace will be encoded in base-64.  Both are set to zero for "
"the Python \"utf-7\" codec."
msgstr ""

#: ../src/Doc/c-api/unicode.rst:713
msgid "Unicode-Escape Codecs"
msgstr ""

#: ../src/Doc/c-api/unicode.rst:715
msgid "These are the \"Unicode Escape\" codec APIs:"
msgstr ""

# 2bdc82928ec34f389a28cdc600ea9317
#: ../src/Doc/c-api/unicode.rst:720
msgid ""
"Create a Unicode object by decoding *size* bytes of the Unicode-Escape "
"encoded string *s*.  Return *NULL* if an exception was raised by the codec."
msgstr ""

# 709abfe1005c46ebae79e7e35c29d253
#: ../src/Doc/c-api/unicode.rst:730
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using Unicode-"
"Escape and return a Python string object.  Return *NULL* if an exception was "
"raised by the codec."
msgstr ""

# 65ed15b8243c490d9ed8ab8351db7390
#: ../src/Doc/c-api/unicode.rst:741
msgid ""
"Encode a Unicode object using Unicode-Escape and return the result as Python "
"string object.  Error handling is \"strict\". Return *NULL* if an exception "
"was raised by the codec."
msgstr ""

#: ../src/Doc/c-api/unicode.rst:747
msgid "Raw-Unicode-Escape Codecs"
msgstr ""

#: ../src/Doc/c-api/unicode.rst:749
msgid "These are the \"Raw Unicode Escape\" codec APIs:"
msgstr ""

# 6b94e6da769d441fa042592a3622628c
#: ../src/Doc/c-api/unicode.rst:754
msgid ""
"Create a Unicode object by decoding *size* bytes of the Raw-Unicode-Escape "
"encoded string *s*.  Return *NULL* if an exception was raised by the codec."
msgstr ""

# 2e6af73a0d2747ba907f1d37b1261de7
#: ../src/Doc/c-api/unicode.rst:764
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using Raw-Unicode-"
"Escape and return a Python string object.  Return *NULL* if an exception was "
"raised by the codec."
msgstr ""

# 7f27c2736d9143b3b835d91b9d33e6e6
#: ../src/Doc/c-api/unicode.rst:775
msgid ""
"Encode a Unicode object using Raw-Unicode-Escape and return the result as "
"Python string object. Error handling is \"strict\". Return *NULL* if an "
"exception was raised by the codec."
msgstr ""

#: ../src/Doc/c-api/unicode.rst:781
msgid "Latin-1 Codecs"
msgstr ""

#: ../src/Doc/c-api/unicode.rst:783
msgid ""
"These are the Latin-1 codec APIs: Latin-1 corresponds to the first 256 "
"Unicode ordinals and only these are accepted by the codecs during encoding."
msgstr ""

# 9065767c7f3c4d94941540d49b5eec0e
#: ../src/Doc/c-api/unicode.rst:789
msgid ""
"Create a Unicode object by decoding *size* bytes of the Latin-1 encoded "
"string *s*.  Return *NULL* if an exception was raised by the codec."
msgstr ""

# ed5a2246df964bb583e7ce36a383a77d
#: ../src/Doc/c-api/unicode.rst:799
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using Latin-1 and "
"return a Python string object.  Return *NULL* if an exception was raised by "
"the codec."
msgstr ""

# 1ba43eccd7384fbaa4faa220860f72a0
#: ../src/Doc/c-api/unicode.rst:809
msgid ""
"Encode a Unicode object using Latin-1 and return the result as Python string "
"object.  Error handling is \"strict\".  Return *NULL* if an exception was "
"raised by the codec."
msgstr ""

#: ../src/Doc/c-api/unicode.rst:815
msgid "ASCII Codecs"
msgstr ""

#: ../src/Doc/c-api/unicode.rst:817
msgid ""
"These are the ASCII codec APIs.  Only 7-bit ASCII data is accepted. All "
"other codes generate errors."
msgstr ""

# bd977847d41f4854a13ee585fb40a5a6
#: ../src/Doc/c-api/unicode.rst:823
msgid ""
"Create a Unicode object by decoding *size* bytes of the ASCII encoded string "
"*s*.  Return *NULL* if an exception was raised by the codec."
msgstr ""

# c136878bd5d44555b3d58fe978442c04
#: ../src/Doc/c-api/unicode.rst:833
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using ASCII and "
"return a Python string object.  Return *NULL* if an exception was raised by "
"the codec."
msgstr ""

# b9e02c0f6ab74e959f22ed00893e68ce
#: ../src/Doc/c-api/unicode.rst:843
msgid ""
"Encode a Unicode object using ASCII and return the result as Python string "
"object.  Error handling is \"strict\".  Return *NULL* if an exception was "
"raised by the codec."
msgstr ""

#: ../src/Doc/c-api/unicode.rst:849
msgid "Character Map Codecs"
msgstr ""

#: ../src/Doc/c-api/unicode.rst:851
msgid ""
"This codec is special in that it can be used to implement many different "
"codecs (and this is in fact what was done to obtain most of the standard "
"codecs included in the :mod:`encodings` package). The codec uses mapping to "
"encode and decode characters."
msgstr ""

#: ../src/Doc/c-api/unicode.rst:856
msgid ""
"Decoding mappings must map single string characters to single Unicode "
"characters, integers (which are then interpreted as Unicode ordinals) or "
"None (meaning \"undefined mapping\" and causing an error)."
msgstr ""

#: ../src/Doc/c-api/unicode.rst:860
msgid ""
"Encoding mappings must map single Unicode characters to single string "
"characters, integers (which are then interpreted as Latin-1 ordinals) or "
"None (meaning \"undefined mapping\" and causing an error)."
msgstr ""

#: ../src/Doc/c-api/unicode.rst:864
msgid ""
"The mapping objects provided must only support the __getitem__ mapping "
"interface."
msgstr ""

#: ../src/Doc/c-api/unicode.rst:867
msgid ""
"If a character lookup fails with a LookupError, the character is copied as-"
"is meaning that its ordinal value will be interpreted as Unicode or Latin-1 "
"ordinal resp. Because of this, mappings only need to contain those mappings "
"which map characters to different code points."
msgstr ""

#: ../src/Doc/c-api/unicode.rst:872
msgid "These are the mapping codec APIs:"
msgstr ""

# 82a682586e734641a9091939ef8bc75a
#: ../src/Doc/c-api/unicode.rst:876
msgid ""
"Create a Unicode object by decoding *size* bytes of the encoded string *s* "
"using the given *mapping* object.  Return *NULL* if an exception was raised "
"by the codec. If *mapping* is *NULL* latin-1 decoding will be done. Else it "
"can be a dictionary mapping byte or a unicode string, which is treated as a "
"lookup table. Byte values greater that the length of the string and U+FFFE "
"\"characters\" are treated as \"undefined mapping\"."
msgstr ""

# 69895947f2ab491da0bd8b30eb2405c7
#: ../src/Doc/c-api/unicode.rst:893
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using the given "
"*mapping* object and return a Python string object. Return *NULL* if an "
"exception was raised by the codec."
msgstr ""

# e23c06d78a1a451e976a1390062b3f06
#: ../src/Doc/c-api/unicode.rst:904
msgid ""
"Encode a Unicode object using the given *mapping* object and return the "
"result as Python string object.  Error handling is \"strict\".  Return "
"*NULL* if an exception was raised by the codec."
msgstr ""

#: ../src/Doc/c-api/unicode.rst:908
msgid "The following codec API is special in that maps Unicode to Unicode."
msgstr ""

# 4fa138f3cca946d99d62c88d09cc31f0
#: ../src/Doc/c-api/unicode.rst:913
msgid ""
"Translate a :c:type:`Py_UNICODE` buffer of the given *size* by applying a "
"character mapping *table* to it and return the resulting Unicode object.  "
"Return *NULL* when an exception was raised by the codec."
msgstr ""

# 8d26f58376a344fcb18a34118ed6eb1c
#: ../src/Doc/c-api/unicode.rst:917
msgid ""
"The *mapping* table must map Unicode ordinal integers to Unicode ordinal "
"integers or None (causing deletion of the character)."
msgstr ""

# ef34d7ee78b5493c9b409d267d7b3617
# 0c99cc8b2151499788928252d159df1c
#: ../src/Doc/c-api/unicode.rst:920 ../src/Doc/c-api/unicode.rst:1022
msgid ""
"Mapping tables need only provide the :meth:`__getitem__` interface; "
"dictionaries and sequences work well.  Unmapped character ordinals (ones "
"which cause a :exc:`LookupError`) are left untouched and are copied as-is."
msgstr ""

#: ../src/Doc/c-api/unicode.rst:930
msgid "MBCS codecs for Windows"
msgstr ""

#: ../src/Doc/c-api/unicode.rst:932
msgid ""
"These are the MBCS codec APIs. They are currently only available on Windows "
"and use the Win32 MBCS converters to implement the conversions.  Note that "
"MBCS (or DBCS) is a class of encodings, not just one.  The target encoding "
"is defined by the user settings on the machine running the codec."
msgstr ""

# d91376d80ec643e4b0f1f1ba4fac30a9
#: ../src/Doc/c-api/unicode.rst:940
msgid ""
"Create a Unicode object by decoding *size* bytes of the MBCS encoded string "
"*s*. Return *NULL* if an exception was raised by the codec."
msgstr ""

# 6c7d739a5086478f9799b132d37522f3
#: ../src/Doc/c-api/unicode.rst:950
msgid ""
"If *consumed* is *NULL*, behave like :c:func:`PyUnicode_DecodeMBCS`. If "
"*consumed* is not *NULL*, :c:func:`PyUnicode_DecodeMBCSStateful` will not "
"decode trailing lead byte and the number of bytes that have been decoded "
"will be stored in *consumed*."
msgstr ""

# df3d89ba47214ce1b8bef16e7ce60b5d
#: ../src/Doc/c-api/unicode.rst:960
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using MBCS and "
"return a Python string object.  Return *NULL* if an exception was raised by "
"the codec."
msgstr ""

# 38c7a09af71643edbde5206a4f989eaf
#: ../src/Doc/c-api/unicode.rst:970
msgid ""
"Encode a Unicode object using MBCS and return the result as Python string "
"object.  Error handling is \"strict\".  Return *NULL* if an exception was "
"raised by the codec."
msgstr ""

#: ../src/Doc/c-api/unicode.rst:976
msgid "Methods & Slots"
msgstr ""

#: ../src/Doc/c-api/unicode.rst:981
msgid "Methods and Slot Functions"
msgstr ""

#: ../src/Doc/c-api/unicode.rst:983
msgid ""
"The following APIs are capable of handling Unicode objects and strings on "
"input (we refer to them as strings in the descriptions) and return Unicode "
"objects or integers as appropriate."
msgstr ""

#: ../src/Doc/c-api/unicode.rst:987
msgid "They all return *NULL* or ``-1`` if an exception occurs."
msgstr ""

# 1a4ce1256ffc4954b19c7e0e46dbdd8a
#: ../src/Doc/c-api/unicode.rst:992
msgid "Concat two strings giving a new Unicode string."
msgstr ""

# d93c6135e2cb427f88bb17bf43306334
#: ../src/Doc/c-api/unicode.rst:997
msgid ""
"Split a string giving a list of Unicode strings.  If *sep* is *NULL*, "
"splitting will be done at all whitespace substrings.  Otherwise, splits "
"occur at the given separator.  At most *maxsplit* splits will be done.  If "
"negative, no limit is set.  Separators are not included in the resulting "
"list."
msgstr ""

# 75ecf5fc07614f53b23b02f85772bddc
#: ../src/Doc/c-api/unicode.rst:1009
msgid ""
"Split a Unicode string at line breaks, returning a list of Unicode strings. "
"CRLF is considered to be one line break.  If *keepend* is 0, the Line break "
"characters are not included in the resulting strings."
msgstr ""

# 0675f15fffd04882aece91ca1f1c539a
#: ../src/Doc/c-api/unicode.rst:1016
msgid ""
"Translate a string by applying a character mapping table to it and return "
"the resulting Unicode object."
msgstr ""

# 64ff1747a2c247b0882acdcf93aa2629
#: ../src/Doc/c-api/unicode.rst:1019
msgid ""
"The mapping table must map Unicode ordinal integers to Unicode ordinal "
"integers or None (causing deletion of the character)."
msgstr ""

# 7fb98fddff854c0b9ea1893ed7faa9f1
#: ../src/Doc/c-api/unicode.rst:1026
msgid ""
"*errors* has the usual meaning for codecs. It may be *NULL* which indicates "
"to use the default error handling."
msgstr ""

# afccad77e5e34a48ac38c27b2de35e0e
#: ../src/Doc/c-api/unicode.rst:1032
msgid ""
"Join a sequence of strings using the given *separator* and return the "
"resulting Unicode string."
msgstr ""

# cd06fb48645e49df8342f1e9ab58232b
#: ../src/Doc/c-api/unicode.rst:1038
msgid ""
"Return 1 if *substr* matches ``str[start:end]`` at the given tail end "
"(*direction* == -1 means to do a prefix match, *direction* == 1 a suffix "
"match), 0 otherwise. Return ``-1`` if an error occurred."
msgstr ""

# 53dd5cebf2374bc397abf54f6e46b35c
#: ../src/Doc/c-api/unicode.rst:1050
msgid ""
"Return the first position of *substr* in ``str[start:end]`` using the given "
"*direction* (*direction* == 1 means to do a forward search, *direction* == "
"-1 a backward search).  The return value is the index of the first match; a "
"value of ``-1`` indicates that no match was found, and ``-2`` indicates that "
"an error occurred and an exception has been set."
msgstr ""

# fbdd740dcd314f0ca626d4505463ca84
#: ../src/Doc/c-api/unicode.rst:1064
msgid ""
"Return the number of non-overlapping occurrences of *substr* in ``str[start:"
"end]``.  Return ``-1`` if an error occurred."
msgstr ""

# 0b09043b44ff480881a078814dea8b5b
#: ../src/Doc/c-api/unicode.rst:1075
msgid ""
"Replace at most *maxcount* occurrences of *substr* in *str* with *replstr* "
"and return the resulting Unicode object. *maxcount* == -1 means replace all "
"occurrences."
msgstr ""

# 8b567f6923f54c9eb40e6c72e50949e9
#: ../src/Doc/c-api/unicode.rst:1086
msgid ""
"Compare two strings and return -1, 0, 1 for less than, equal, and greater "
"than, respectively."
msgstr ""

# b9d019647f2346868e4e49b9abddd8a7
#: ../src/Doc/c-api/unicode.rst:1092
msgid "Rich compare two unicode strings and return one of the following:"
msgstr ""

# f635c3b8a09e4382895ac6948bef3721
#: ../src/Doc/c-api/unicode.rst:1094
msgid "``NULL`` in case an exception was raised"
msgstr ""

# 534e7ab4e06a4c8eabb9ba16ba284c18
#: ../src/Doc/c-api/unicode.rst:1095
msgid ":const:`Py_True` or :const:`Py_False` for successful comparisons"
msgstr ""

# b12a1166c2a649f8b11bb3c90bd696ce
#: ../src/Doc/c-api/unicode.rst:1096
msgid ":const:`Py_NotImplemented` in case the type combination is unknown"
msgstr ""

# 837f8df3176f42dab34eef54a37bbaf4
#: ../src/Doc/c-api/unicode.rst:1098
msgid ""
"Note that :const:`Py_EQ` and :const:`Py_NE` comparisons can cause a :exc:"
"`UnicodeWarning` in case the conversion of the arguments to Unicode fails "
"with a :exc:`UnicodeDecodeError`."
msgstr ""

# f60a8bad514e4d16989863070f48e982
#: ../src/Doc/c-api/unicode.rst:1102
msgid ""
"Possible values for *op* are :const:`Py_GT`, :const:`Py_GE`, :const:"
"`Py_EQ`, :const:`Py_NE`, :const:`Py_LT`, and :const:`Py_LE`."
msgstr ""

# fa4638541e9b40ed80b88ef5b7911deb
#: ../src/Doc/c-api/unicode.rst:1108
msgid ""
"Return a new string object from *format* and *args*; this is analogous to "
"``format % args``.  The *args* argument must be a tuple."
msgstr ""

# c69ca6b5b5e7482999d9a0dee886d5cd
#: ../src/Doc/c-api/unicode.rst:1114
msgid ""
"Check whether *element* is contained in *container* and return true or false "
"accordingly."
msgstr ""

# 5c583210a48840328db4e84e1b1dffa2
#: ../src/Doc/c-api/unicode.rst:1117
msgid ""
"*element* has to coerce to a one element Unicode string. ``-1`` is returned "
"if there was an error."
msgstr ""

#: ../src/Doc/c-api/utilities.rst:8
msgid "Utilities"
msgstr "Utilitaires"

#: ../src/Doc/c-api/utilities.rst:10
msgid ""
"The functions in this chapter perform various utility tasks, ranging from "
"helping C code be more portable across platforms, using Python modules from "
"C, and parsing function arguments and constructing Python values from C "
"values."
msgstr ""

#: ../src/Doc/c-api/veryhigh.rst:8
msgid "The Very High Level Layer"
msgstr ""

#: ../src/Doc/c-api/veryhigh.rst:10
msgid ""
"The functions in this chapter will let you execute Python source code given "
"in a file or a buffer, but they will not let you interact in a more detailed "
"way with the interpreter."
msgstr ""

#: ../src/Doc/c-api/veryhigh.rst:14
msgid ""
"Several of these functions accept a start symbol from the grammar as a "
"parameter.  The available start symbols are :const:`Py_eval_input`, :const:"
"`Py_file_input`, and :const:`Py_single_input`.  These are described "
"following the functions which accept them as parameters."
msgstr ""

# 66b80f9ce59e42468d7854f99d490515
#: ../src/Doc/c-api/veryhigh.rst:19
msgid ""
"Note also that several of these functions take :c:type:`FILE\\*` "
"parameters.  One particular issue which needs to be handled carefully is "
"that the :c:type:`FILE` structure for different C libraries can be different "
"and incompatible.  Under Windows (at least), it is possible for dynamically "
"linked extensions to actually use different libraries, so care should be "
"taken that :c:type:`FILE\\*` parameters are only passed to these functions "
"if it is certain that they were created by the same library that the Python "
"runtime is using."
msgstr ""

# 09490c448cea472cad8e25eea7dcc124
#: ../src/Doc/c-api/veryhigh.rst:30
msgid ""
"The main program for the standard interpreter.  This is made available for "
"programs which embed Python.  The *argc* and *argv* parameters should be "
"prepared exactly as those which are passed to a C program's :c:func:`main` "
"function.  It is important to note that the argument list may be modified "
"(but the contents of the strings pointed to by the argument list are not). "
"The return value will be ``0`` if the interpreter exits normally (ie, "
"without an exception), ``1`` if the interpreter exits due to an exception, "
"or ``2`` if the parameter list does not represent a valid Python command "
"line."
msgstr ""

# d4918b326c1d41f68f0e5575b386143d
#: ../src/Doc/c-api/veryhigh.rst:39
msgid ""
"Note that if an otherwise unhandled :exc:`SystemExit` is raised, this "
"function will not return ``1``, but exit the process, as long as "
"``Py_InspectFlag`` is not set."
msgstr ""

# f28003dc8892448783ac35b350d1b86b
#: ../src/Doc/c-api/veryhigh.rst:46
msgid ""
"This is a simplified interface to :c:func:`PyRun_AnyFileExFlags` below, "
"leaving *closeit* set to ``0`` and *flags* set to *NULL*."
msgstr ""

# e3040d841b3b447f97f1fe5f3a5b06cf
#: ../src/Doc/c-api/veryhigh.rst:52
msgid ""
"This is a simplified interface to :c:func:`PyRun_AnyFileExFlags` below, "
"leaving the *closeit* argument set to ``0``."
msgstr ""

# 5f4f5e9cab084fb293ff7e8c7375121f
#: ../src/Doc/c-api/veryhigh.rst:58
msgid ""
"This is a simplified interface to :c:func:`PyRun_AnyFileExFlags` below, "
"leaving the *flags* argument set to *NULL*."
msgstr ""

# aee78c7d4a3143d7a3f4874e4c34b8f0
#: ../src/Doc/c-api/veryhigh.rst:64
msgid ""
"If *fp* refers to a file associated with an interactive device (console or "
"terminal input or Unix pseudo-terminal), return the value of :c:func:"
"`PyRun_InteractiveLoop`, otherwise return the result of :c:func:"
"`PyRun_SimpleFile`.  If *filename* is *NULL*, this function uses ``\"???\"`` "
"as the filename."
msgstr ""

# e14dc57ee2e6498c8047e61d526d60f5
#: ../src/Doc/c-api/veryhigh.rst:73
msgid ""
"This is a simplified interface to :c:func:`PyRun_SimpleStringFlags` below, "
"leaving the *PyCompilerFlags\\** argument set to NULL."
msgstr ""

# ffc2f686289a4f4f855b8de4be9c9598
#: ../src/Doc/c-api/veryhigh.rst:79
msgid ""
"Executes the Python source code from *command* in the :mod:`__main__` module "
"according to the *flags* argument. If :mod:`__main__` does not already "
"exist, it is created.  Returns ``0`` on success or ``-1`` if an exception "
"was raised.  If there was an error, there is no way to get the exception "
"information. For the meaning of *flags*, see below."
msgstr ""

# a8981c84004645f1ba187aa9adb7e9e3
#: ../src/Doc/c-api/veryhigh.rst:85
msgid ""
"Note that if an otherwise unhandled :exc:`SystemExit` is raised, this "
"function will not return ``-1``, but exit the process, as long as "
"``Py_InspectFlag`` is not set."
msgstr ""

# 7a875ef7e70543d59e685a2c68ffdcae
#: ../src/Doc/c-api/veryhigh.rst:92
msgid ""
"This is a simplified interface to :c:func:`PyRun_SimpleFileExFlags` below, "
"leaving *closeit* set to ``0`` and *flags* set to *NULL*."
msgstr ""

# fad374a4f03e4e6ea3311fc57b8a1751
#: ../src/Doc/c-api/veryhigh.rst:98
msgid ""
"This is a simplified interface to :c:func:`PyRun_SimpleFileExFlags` below, "
"leaving *closeit* set to ``0``."
msgstr ""

# 54f19fbdfddd422cb0458231ac08ea59
#: ../src/Doc/c-api/veryhigh.rst:104
msgid ""
"This is a simplified interface to :c:func:`PyRun_SimpleFileExFlags` below, "
"leaving *flags* set to *NULL*."
msgstr ""

# 30ae7c2fd66c4a7bb9ec35ab2b131a86
#: ../src/Doc/c-api/veryhigh.rst:110
msgid ""
"Similar to :c:func:`PyRun_SimpleStringFlags`, but the Python source code is "
"read from *fp* instead of an in-memory string. *filename* should be the name "
"of the file.  If *closeit* is true, the file is closed before "
"PyRun_SimpleFileExFlags returns."
msgstr ""

# 2a3d25c64bb74bd898ccda006e4b3bc7
#: ../src/Doc/c-api/veryhigh.rst:118
msgid ""
"This is a simplified interface to :c:func:`PyRun_InteractiveOneFlags` below, "
"leaving *flags* set to *NULL*."
msgstr ""

# ed13b8896c5a4ae2bd603b47ce523aca
#: ../src/Doc/c-api/veryhigh.rst:124
msgid ""
"Read and execute a single statement from a file associated with an "
"interactive device according to the *flags* argument.  The user will be "
"prompted using ``sys.ps1`` and ``sys.ps2``.  Returns ``0`` when the input "
"was executed successfully, ``-1`` if there was an exception, or an error "
"code from the :file:`errcode.h` include file distributed as part of Python "
"if there was a parse error.  (Note that :file:`errcode.h` is not included "
"by :file:`Python.h`, so must be included specifically if needed.)"
msgstr ""

# 6839746b93da4ea3b37232cb9683313e
#: ../src/Doc/c-api/veryhigh.rst:135
msgid ""
"This is a simplified interface to :c:func:`PyRun_InteractiveLoopFlags` "
"below, leaving *flags* set to *NULL*."
msgstr ""

# b34a9916341a4ca2b8b513e3b34770d7
#: ../src/Doc/c-api/veryhigh.rst:141
msgid ""
"Read and execute statements from a file associated with an interactive "
"device until EOF is reached.  The user will be prompted using ``sys.ps1`` "
"and ``sys.ps2``.  Returns ``0`` at EOF."
msgstr ""

# 60a91f78b6484e9789e2fd9f9cde201c
#: ../src/Doc/c-api/veryhigh.rst:148
msgid ""
"This is a simplified interface to :c:func:"
"`PyParser_SimpleParseStringFlagsFilename` below, leaving  *filename* set to "
"*NULL* and *flags* set to ``0``."
msgstr ""

# 286e6eec3b9f40efb03d09047e393fa0
#: ../src/Doc/c-api/veryhigh.rst:155
msgid ""
"This is a simplified interface to :c:func:"
"`PyParser_SimpleParseStringFlagsFilename` below, leaving  *filename* set to "
"*NULL*."
msgstr ""

# ff1d15038ff340478f6e59a6ab57f678
#: ../src/Doc/c-api/veryhigh.rst:162
msgid ""
"Parse Python source code from *str* using the start token *start* according "
"to the *flags* argument.  The result can be used to create a code object "
"which can be evaluated efficiently. This is useful if a code fragment must "
"be evaluated many times."
msgstr ""

# 141774e3ddcf4ec1bbaf14eaa2151b88
#: ../src/Doc/c-api/veryhigh.rst:170
msgid ""
"This is a simplified interface to :c:func:`PyParser_SimpleParseFileFlags` "
"below, leaving *flags* set to ``0``"
msgstr ""

# 8db88632c7b149e483bb238d9ce3d814
#: ../src/Doc/c-api/veryhigh.rst:176
msgid ""
"Similar to :c:func:`PyParser_SimpleParseStringFlagsFilename`, but the Python "
"source code is read from *fp* instead of an in-memory string."
msgstr ""

# bc63c8acd85b45acaa2e02ab0627f957
#: ../src/Doc/c-api/veryhigh.rst:182
msgid ""
"This is a simplified interface to :c:func:`PyRun_StringFlags` below, leaving "
"*flags* set to *NULL*."
msgstr ""

# d42ece553bf1489fa0bfa01123ce1a37
#: ../src/Doc/c-api/veryhigh.rst:188
msgid ""
"Execute Python source code from *str* in the context specified by the "
"dictionaries *globals* and *locals* with the compiler flags specified by "
"*flags*.  The parameter *start* specifies the start token that should be "
"used to parse the source code."
msgstr ""

# 9b5eb0ffe0844791bf70869940d728d1
#: ../src/Doc/c-api/veryhigh.rst:193
msgid ""
"Returns the result of executing the code as a Python object, or *NULL* if an "
"exception was raised."
msgstr ""

# dcf5d72ae3e143dfb36b640bc4d7f9ec
#: ../src/Doc/c-api/veryhigh.rst:199
msgid ""
"This is a simplified interface to :c:func:`PyRun_FileExFlags` below, leaving "
"*closeit* set to ``0`` and *flags* set to *NULL*."
msgstr ""

# 207171cc729c41e6ae094a7a78a7b7fa
#: ../src/Doc/c-api/veryhigh.rst:205
msgid ""
"This is a simplified interface to :c:func:`PyRun_FileExFlags` below, leaving "
"*flags* set to *NULL*."
msgstr ""

# 13623bad8617459c91a315c2d50e98a4
#: ../src/Doc/c-api/veryhigh.rst:211
msgid ""
"This is a simplified interface to :c:func:`PyRun_FileExFlags` below, leaving "
"*closeit* set to ``0``."
msgstr ""

# 876b959c5c0b4227bdc6ae527df0658e
#: ../src/Doc/c-api/veryhigh.rst:217
msgid ""
"Similar to :c:func:`PyRun_StringFlags`, but the Python source code is read "
"from *fp* instead of an in-memory string. *filename* should be the name of "
"the file. If *closeit* is true, the file is closed before :c:func:"
"`PyRun_FileExFlags` returns."
msgstr ""

# 29c9739da9854bdd8fd4e393d58a51b6
#: ../src/Doc/c-api/veryhigh.rst:225
msgid ""
"This is a simplified interface to :c:func:`Py_CompileStringFlags` below, "
"leaving *flags* set to *NULL*."
msgstr ""

# 6104679aa9d7402ba0408b75facae4fc
#: ../src/Doc/c-api/veryhigh.rst:231
msgid ""
"Parse and compile the Python source code in *str*, returning the resulting "
"code object.  The start token is given by *start*; this can be used to "
"constrain the code which can be compiled and should be :const:"
"`Py_eval_input`, :const:`Py_file_input`, or :const:`Py_single_input`.  The "
"filename specified by *filename* is used to construct the code object and "
"may appear in tracebacks or :exc:`SyntaxError` exception messages.  This "
"returns *NULL* if the code cannot be parsed or compiled."
msgstr ""

# bad8da33a88e42a08f4eb89f0497caa6
#: ../src/Doc/c-api/veryhigh.rst:242
msgid ""
"This is a simplified interface to :c:func:`PyEval_EvalCodeEx`, with just the "
"code object, and the dictionaries of global and local variables. The other "
"arguments are set to *NULL*."
msgstr ""

# 0a4e0d24958b405ca34761a3f18977e2
#: ../src/Doc/c-api/veryhigh.rst:249
msgid ""
"Evaluate a precompiled code object, given a particular environment for its "
"evaluation.  This environment consists of dictionaries of global and local "
"variables, arrays of arguments, keywords and defaults, and a closure tuple "
"of cells."
msgstr ""

# 7f8b13528ae9439dad08ce88d037fcfc
#: ../src/Doc/c-api/veryhigh.rst:257
msgid ""
"Evaluate an execution frame.  This is a simplified interface to "
"PyEval_EvalFrameEx, for backward compatibility."
msgstr ""

# 19ef3505c09e478abdfb64b4b792c0eb
#: ../src/Doc/c-api/veryhigh.rst:263
msgid ""
"This is the main, unvarnished function of Python interpretation.  It is "
"literally 2000 lines long.  The code object associated with the execution "
"frame *f* is executed, interpreting bytecode and executing calls as needed. "
"The additional *throwflag* parameter can mostly be ignored - if true, then "
"it causes an exception to immediately be thrown; this is used for the :meth:"
"`throw` methods of generator objects."
msgstr ""

# be57ff7ca2b84797acf3d434c9974c48
#: ../src/Doc/c-api/veryhigh.rst:273
msgid ""
"This function changes the flags of the current evaluation frame, and returns "
"true on success, false on failure."
msgstr ""

# abff7a84c90c4efea60fc23a965d5032
#: ../src/Doc/c-api/veryhigh.rst:281
msgid ""
"The start symbol from the Python grammar for isolated expressions; for use "
"with :c:func:`Py_CompileString`."
msgstr ""

# 19426a82b20849758a72bc104efcf599
#: ../src/Doc/c-api/veryhigh.rst:289
msgid ""
"The start symbol from the Python grammar for sequences of statements as read "
"from a file or other source; for use with :c:func:`Py_CompileString`.  This "
"is the symbol to use when compiling arbitrarily long Python source code."
msgstr ""

# b4817eed20ef412eb9d0c3f907e8b3e6
#: ../src/Doc/c-api/veryhigh.rst:298
msgid ""
"The start symbol from the Python grammar for a single statement; for use "
"with :c:func:`Py_CompileString`. This is the symbol used for the interactive "
"interpreter loop."
msgstr ""

# 645c3e4d7d464120b5ead6d6190d7212
#: ../src/Doc/c-api/veryhigh.rst:305
msgid ""
"This is the structure used to hold compiler flags.  In cases where code is "
"only being compiled, it is passed as ``int flags``, and in cases where code "
"is being executed, it is passed as ``PyCompilerFlags *flags``.  In this "
"case, ``from __future__ import`` can modify *flags*."
msgstr ""

# 0fb192231c30477396c8b6a04b8b9f38
#: ../src/Doc/c-api/veryhigh.rst:310
msgid ""
"Whenever ``PyCompilerFlags *flags`` is *NULL*, :attr:`cf_flags` is treated "
"as equal to ``0``, and any modification due to ``from __future__ import`` is "
"discarded.  ::"
msgstr ""

# 2422c6e46a034dc99b3a2ad8a8f6f084
#: ../src/Doc/c-api/veryhigh.rst:321
msgid ""
"This bit can be set in *flags* to cause division operator ``/`` to be "
"interpreted as \"true division\" according to :pep:`238`."
msgstr ""

#: ../src/Doc/c-api/weakref.rst:6
msgid "Weak Reference Objects"
msgstr ""

#: ../src/Doc/c-api/weakref.rst:8
msgid ""
"Python supports *weak references* as first-class objects.  There are two "
"specific object types which directly implement weak references.  The first "
"is a simple reference object, and the second acts as a proxy for the "
"original object as much as it can."
msgstr ""

# 4ce0c8972a024cc6a3a44db9c1ab6af0
#: ../src/Doc/c-api/weakref.rst:16
msgid "Return true if *ob* is either a reference or proxy object."
msgstr ""

# 7a6bcd9b5b624f68a9beff8af6c27bd9
#: ../src/Doc/c-api/weakref.rst:23
msgid "Return true if *ob* is a reference object."
msgstr ""

# 75bcce2accc643678bd8470e2c9de92d
#: ../src/Doc/c-api/weakref.rst:30
msgid "Return true if *ob* is a proxy object."
msgstr ""

# f9f9d0b3e885463491558aafedfdadca
#: ../src/Doc/c-api/weakref.rst:37
msgid ""
"Return a weak reference object for the object *ob*.  This will always return "
"a new reference, but is not guaranteed to create a new object; an existing "
"reference object may be returned.  The second parameter, *callback*, can be "
"a callable object that receives notification when *ob* is garbage collected; "
"it should accept a single parameter, which will be the weak reference object "
"itself. *callback* may also be ``None`` or *NULL*.  If *ob* is not a weakly-"
"referencable object, or if *callback* is not callable, ``None``, or *NULL*, "
"this will return *NULL* and raise :exc:`TypeError`."
msgstr ""

# dc165d22f8994dac9f8fdb66c9f910b1
#: ../src/Doc/c-api/weakref.rst:51
msgid ""
"Return a weak reference proxy object for the object *ob*.  This will always "
"return a new reference, but is not guaranteed to create a new object; an "
"existing proxy object may be returned.  The second parameter, *callback*, "
"can be a callable object that receives notification when *ob* is garbage "
"collected; it should accept a single parameter, which will be the weak "
"reference object itself. *callback* may also be ``None`` or *NULL*.  If *ob* "
"is not a weakly-referencable object, or if *callback* is not callable, "
"``None``, or *NULL*, this will return *NULL* and raise :exc:`TypeError`."
msgstr ""

# d795d8e6d676436d8997bb1e5b0c4130
#: ../src/Doc/c-api/weakref.rst:65
msgid ""
"Return the referenced object from a weak reference, *ref*.  If the referent "
"is no longer live, returns :const:`Py_None`."
msgstr ""

# 16cf5618149a4e598b219629caccc0fb
#: ../src/Doc/c-api/weakref.rst:72
msgid ""
"This function returns a **borrowed reference** to the referenced object. "
"This means that you should always call :c:func:`Py_INCREF` on the object "
"except if you know that it cannot be destroyed while you are still using it."
msgstr ""

# a022ac6e3f3e4afe81890e470e976edd
#: ../src/Doc/c-api/weakref.rst:80
msgid ""
"Similar to :c:func:`PyWeakref_GetObject`, but implemented as a macro that "
"does no error checking."
msgstr ""

#~ msgid "See also"
#~ msgstr "Voir aussi"

#~ msgid "To allocate and create extension modules."
#~ msgstr "Allouer et créer des modules d'extension."

#~ msgid "Parsing arguments"
#~ msgstr "Analyse des arguments"

#~ msgid "Strings and buffers"
#~ msgstr "Chaînes et tampons"

#~ msgid "Unless otherwise stated, buffers are not NUL-terminated."
#~ msgstr "Sauf indication contraire, les tampons ne se terminent pas par NUL."

#~ msgid ""
#~ "This format does not accept bytes-like objects.  If you want to accept "
#~ "filesystem paths and convert them to C character strings, it is "
#~ "preferrable to use the ``O&`` format with :cfunc:`PyUnicode_FSConverter` "
#~ "as *converter*."
#~ msgstr ""
#~ "Ce format n'accepte pas les objets de type octets. Si vous voulez "
#~ "accepter des chemins de fichiers et les convertir en chaînes de "
#~ "caractères C, il vaut mieux utiliser le format ``O&`` avec :cfunc:"
#~ "`PyUnicode_FSConverter` comme *convertisseur*."

#~ msgid ""
#~ "This format accepts Unicode objects as well as objects supporting the "
#~ "buffer protocol. It fills a :ctype:`Py_buffer` structure provided by the "
#~ "caller. In this case the resulting C string may contain embedded NUL "
#~ "bytes. Unicode objects are converted to C strings using ``'utf-8'`` "
#~ "encoding."
#~ msgstr ""
#~ "Ce format accepte aussi bien les objets Unicode que des objets supportant "
#~ "le protocole de mémoire tampon.Il remplit une structure :ctype:"
#~ "`Py_buffer` fournie par l'appelant. Dans ce cas, La chaîne C qui en "
#~ "résulte peut contenir des octets NUL. Les objets Unicode sont convertis "
#~ "en chaînes C en utilisant un encodage ``'utf-8' ``."

#~ msgid ""
#~ "Like ``s*``, except that it doesn't accept mutable buffer-like objects "
#~ "such as :class:`bytearray`.  The result is stored into two C variables, "
#~ "the first one a pointer to a C string, the second one its length. The "
#~ "string may contain embedded null bytes. Unicode objects are converted to "
#~ "C strings using ``'utf-8'`` encoding."
#~ msgstr ""
#~ "Comme ``s*``, excepté qu'il n'accepte pas d'objets de type tampons "
#~ "mutables, comme :class:`bytearray`. Le résultat est stocké dans deux "
#~ "variables C, la première étant un pointeur sur une chaîne de caractères "
#~ "C, la seconde étant sa longueur. La chaîne de caractère peut contenir des "
#~ "octets nuls. Les objets Unicode sont convertis en chaînes de caractères C "
#~ "avec l'encodage ``'utf-8'``."

#~ msgid ""
#~ "Like ``s*``, but the Python object may also be ``None``, in which case "
#~ "the ``buf`` member of the :ctype:`Py_buffer` structure is set to *NULL*."
#~ msgstr ""
#~ "Comme ``s*``, mais l'objet Python peut aussi être ``None``, dans ce cas "
#~ "le champ ``buf`` de la structure :ctype:`Py_buffer` est définie à *NULL*."

#~ msgid ""
#~ "Like ``s#``, but the Python object may also be ``None``, in which case "
#~ "the C pointer is set to *NULL*."
#~ msgstr ""
#~ "Comme ``s#``, mais l'objet Python peut également être ``None``, dans ce "
#~ "cas le pointeur C est définie à *NULL*."

#~ msgid ""
#~ "This format converts a bytes-like object to a C pointer to a character "
#~ "string; it does not accept Unicode objects.  The bytes buffer must not "
#~ "contain embedded NUL bytes; if it does, a :exc:`TypeError` exception is "
#~ "raised."
#~ msgstr ""
#~ "Ce format converti un objet contenant des octets en un pointeur C sur une "
#~ "chaîne de caractères, il n'accepte pas d'objets Unicode. Le buffer ne "
#~ "doit pas contenir d'octets NUL ; s'il en contient, une exception :exc:"
#~ "`TypeError` sera levée."

#~ msgid ""
#~ "This variant on ``s*`` doesn't accept Unicode objects, only objects "
#~ "supporting the buffer protocol.  **This is the recommended way to accept "
#~ "binary data.**"
#~ msgstr ""
#~ "Cette variante sur ``s*`` n'accepte pas d'objets Unicode, seulement des "
#~ "objets supportant le protocole buffer. **C'est le moyen recommandé pour "
#~ "accepter des données binaires.**"

#~ msgid ""
#~ "This variant on ``s#`` doesn't accept Unicode objects, only bytes-like "
#~ "objects."
#~ msgstr ""
#~ "Cette variante de ``s#`` n'accepte pas les objets Unicode, uniquement des "
#~ "objets assimilés à des octets."

#~ msgid ""
#~ "Requires that the Python object is a :class:`bytes` object, without "
#~ "attempting any conversion.  Raises :exc:`TypeError` if the object is not "
#~ "a bytes object.  The C variable may also be declared as :ctype:`PyObject"
#~ "\\*`."
#~ msgstr ""
#~ "Nécessite que l'objet Python soit un objet class:`bytes`, sans tenter de "
#~ "faire aucune conversion au préalable. Si l'objet n'est pas un objet de "
#~ "type octets, une exception :exc:`TypeError` sera levée. La variable C "
#~ "peut également être de type :ctype:`PyObject\\*`."

#~ msgid ""
#~ "Requires that the Python object is a :class:`bytearray` object, without "
#~ "attempting any conversion.  Raises :exc:`TypeError` if the object is not "
#~ "a :class:`bytearray` object. The C variable may also be declared as :"
#~ "ctype:`PyObject\\*`."
#~ msgstr ""
#~ "Nécessite que l'objet Python soit un objet :class:`bytearray`, sans "
#~ "tenter de faire aucune conversion. Si l'objet n'est pas un objet de type :"
#~ "class:`bytearray`, une exception :exc:`TypeError` sera levée. La variable "
#~ "C peut aussi être de type :ctype:`PyObject\\*`."

#~ msgid ""
#~ "Convert a Python Unicode object to a C pointer to a NUL-terminated buffer "
#~ "of Unicode characters.  You must pass the address of a :ctype:"
#~ "`Py_UNICODE` pointer variable, which will be filled with the pointer to "
#~ "an existing Unicode buffer.  Please note that the width of a :ctype:"
#~ "`Py_UNICODE` character depends on compilation options (it is either 16 or "
#~ "32 bits). The Python string must not contain embedded NUL characters; if "
#~ "it does, a :exc:`TypeError` exception is raised."
#~ msgstr ""
#~ "Converti un objet Python Unicode en un pointeur C sur un tampon terminé "
#~ "par NUL de caractères Unicode. Vous devez fournir l'adresse d'une "
#~ "variable pointant sur un :ctype:`Py_UNICODE`, qui sera rempli avec le "
#~ "pointeur sur un tampon Unicode existant. Notez que la taille d'un "
#~ "caractère :ctype:`Py_UNICODE` dépend des options choisies à la "
#~ "compilation (16 ou 32 bits). La chaîne de caractères Python ne doit pas "
#~ "contenir de caractères NUL, sinon une exception  :exc:`TypeError` sera "
#~ "levée."

#~ msgid ""
#~ "Since ``u`` doesn't give you back the length of the string, and it may "
#~ "contain embedded NUL characters, it is recommended to use ``u#`` or ``U`` "
#~ "instead."
#~ msgstr ""
#~ "Comme ``u`` ne vous donne pas en retour la longueur de la chaîne, et "
#~ "comme il peut contenir des caractères NUL, il est recommandé d'utiliser à "
#~ "la place ``u#`` ou ``U``."

#~ msgid ""
#~ "Like ``u``, but the Python object may also be ``None``, in which case "
#~ "the :ctype:`Py_UNICODE` pointer is set to *NULL*."
#~ msgstr ""
#~ "Comme ``u``, mais l'objet Python peut aussi être ``None``, auquel cas le "
#~ "pointeur :ctype:`Py_UNICODE` est fixé à *NULL*."

#~ msgid ""
#~ "Like ``u#``, but the Python object may also be ``None``, in which case "
#~ "the :ctype:`Py_UNICODE` pointer is set to *NULL*."
#~ msgstr ""
#~ "Comme ``u#``, mais l'objet Python peut également être ``None``, auquel "
#~ "cas le pointeur :ctype:`Py_UNICODE` est fixé à *NULL*."

#~ msgid ""
#~ "This format accepts any object which implements the read-write buffer "
#~ "interface. It fills a :ctype:`Py_buffer` structure provided by the "
#~ "caller. The buffer may contain embedded null bytes. The caller have to "
#~ "call :cfunc:`PyBuffer_Release` when it is done with the buffer."
#~ msgstr ""
#~ "Ce format accepte n'importe quel objet qui implémente l'interface de "
#~ "mémoire tampon en lecture/écriture. Il remplit une structure :ctype:"
#~ "`Py_buffer` fournie par l'appelant. Le tampon peut contenir des octets "
#~ "nuls. L'appelant doit appeler :cfunc:`PyBuffer_Release` quand il n'a plus "
#~ "l'usage du tampon."

#~ msgid ""
#~ "Convert a Python byte, represented as a :class:`bytes` object of length "
#~ "1, to a C :ctype:`char`."
#~ msgstr ""
#~ "Convertit un octet Python, représenté comme un objet :class:`bytes` de "
#~ "longueur 1, en un type C :ctype:`char`."

#~ msgid "status = converter(object, address);"
#~ msgstr "status = conversion(objet, adresse);"

#~ msgid ""
#~ "If the *converter* returns Py_CLEANUP_SUPPORTED, it may get called a "
#~ "second time if the argument parsing eventually fails, giving the "
#~ "converter a chance to release any memory that it had already allocated. "
#~ "In this second call, the *object* parameter will be NULL; *address* will "
#~ "have the same value as in the original call."
#~ msgstr ""
#~ "Si la fonction de *conversion* retourne Py_CLEANUP_SUPPORTED, elle peut "
#~ "être appelée une seconde fois si l'analyse des arguments échoue, donnant "
#~ "ainsi à la fonction de conversion la possibilité de libérer la mémoire "
#~ "qu'elle avait allouée précédemment. Dans ce second appel, le paramètre "
#~ "correspondant à l'*objet* sera NULL; *adresse* aura la même valeur que "
#~ "dans le premier appel."

#~ msgid "Building values"
#~ msgstr "Construction des valeurs"

#~ msgid "Buffer Objects"
#~ msgstr "Les objets tampons"
