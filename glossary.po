# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2010, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-10-17 21:48\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 1.7.0\n"

#: ../src/Doc/glossary.rst:5
msgid "Glossary"
msgstr "Glossaire"

#: ../src/Doc/glossary.rst:12
msgid ""
"The default Python prompt of the interactive shell.  Often seen for code "
"examples which can be executed interactively in the interpreter."
msgstr ""
"L'invite de commande utilisée par défaut dans l'interpréteur interactif. On "
"la voit souvent dans des exemples de code qui peuvent être exécutés "
"interactivement dans l'interpréteur."

#: ../src/Doc/glossary.rst:16
msgid ""
"The default Python prompt of the interactive shell when entering code for an "
"indented code block or within a pair of matching left and right delimiters "
"(parentheses, square brackets or curly braces)."
msgstr ""
"L'invite de commande utilisée par défaut dans l'interpréteur interactif "
"lorsqu'on entre un bloc de code indenté ou entre deux délimiteurs "
"(parenthèses, crochets ou accolades)."

# I don’t know the accepted translation for “parse tree”
#: ../src/Doc/glossary.rst:21
#, fuzzy
msgid ""
"A tool that tries to convert Python 2.x code to Python 3.x code by handling "
"most of the incompatibilities which can be detected by parsing the source "
"and traversing the parse tree."
msgstr ""
"Un outil qui essaie de convertir du code pour Python 2.x en code pour Python "
"3.x en gérant la plupart des incompatibilités qui peuvent être détectées en "
"analysant la source et traversant l’arbre d’analyse."

# The strange space escaping are here to handle non-breaking spaces required by French typographic rules.
#: ../src/Doc/glossary.rst:25
msgid ""
"2to3 is available in the standard library as :mod:`lib2to3`; a standalone "
"entry point is provided as :file:`Tools/scripts/2to3`.  See :ref:`2to3-"
"reference`."
msgstr ""
"2to3 est disponible dans la bibliothèque standard sous le nom de :mod:"
"`lib2to3`\\ ; un point d’entrée indépendant est fourni via :file:`Tools/"
"scripts/2to3`. Cf. \\ :ref:`2to3-reference`."

#: ../src/Doc/glossary.rst:30
#, fuzzy
msgid ""
"Abstract base classes complement :term:`duck-typing` by providing a way to "
"define interfaces when other techniques like :func:`hasattr` would be clumsy "
"or subtly wrong (for example with :ref:`magic methods <new-style-special-"
"lookup>`).  ABCs introduce virtual subclasses, which are classes that don't "
"inherit from a class but are still recognized by :func:`isinstance` and :"
"func:`issubclass`; see the :mod:`abc` module documentation.  Python comes "
"with many built-in ABCs for data structures (in the :mod:`collections` "
"module), numbers (in the :mod:`numbers` module), and streams (in the :mod:"
"`io` module). You can create your own ABCs with the :mod:`abc` module."
msgstr ""
"Les classes de base abstraites (ABC, suivant l'abbréviation anglaise) "
"complètent le :term:`duck-typing` en fournissant un moyen de définir des "
"interfaces pour les cas où d'autres techniques comme :func:`hasattr` "
"seraient inélégantes. Python contient de nombreuses ABC pour les structures "
"de données (dans le module :mod:`collections`), les nombres (dans le module :"
"mod:`numbers`), et les flux (dans le module :mod:`io`). Vous pouvez créer "
"vos propres ABC avec le module :mod:`abc`."

#: ../src/Doc/glossary.rst:42
msgid ""
"A value passed to a function or method, assigned to a named local variable "
"in the function body.  A function or method may have both positional "
"arguments and keyword arguments in its definition. Positional and keyword "
"arguments may be variable-length: ``*`` accepts or passes (if in the "
"function definition or call) several positional arguments in a list, while "
"``**`` does the same for keyword arguments in a dictionary."
msgstr ""
"Une valeur passée à une fonction ou une méthode, assignée à une variable "
"locale nommée dans le corps de la fonction. Une fonction ou une méthode peut "
"aussi bien avoir des arguments de position que des arguments clé dans sa "
"définition. Les arguments de position et les arguments clé peuvent être de "
"longueur variable: ``*`` accepte ou passe (selon si c'est lors de la "
"définition ou lors de l'appel de la fonction) plusieurs arguments de "
"position dans une liste, tandis que ``**`` effectue la même chose pour les "
"arguments clé dans un dictionnaire."

#: ../src/Doc/glossary.rst:50
msgid ""
"Any expression may be used within the argument list, and the evaluated value "
"is passed to the local variable."
msgstr ""
"Une expression peut être utilisée dans la liste d'arguments, la valeur "
"évaluée est alors assignée à la variable locale."

#: ../src/Doc/glossary.rst:54
msgid ""
"A value associated with an object which is referenced by name using dotted "
"expressions.  For example, if an object *o* has an attribute *a* it would be "
"referenced as *o.a*."
msgstr ""
"Une valeur associée à un objet et référencé par un nom via une notation "
"utilisant des points. Par exemple, si un objet *o* a un attribut *a*, il "
"sera référencé par *o.a*."

#: ../src/Doc/glossary.rst:59
msgid ""
"Benevolent Dictator For Life, a.k.a. `Guido van Rossum <http://www.python."
"org/~guido/>`_, Python's creator."
msgstr ""
"Dictateur à vie bénévole, alias `Guido van Rossum <http://www.python.org/"
"~guido/>`_, le créateur de Python."

# 4784a51d6fea4eaf8eb8cc73ae492c9c
#: ../src/Doc/glossary.rst:63
msgid ""
"Python source code is compiled into bytecode, the internal representation of "
"a Python program in the CPython interpreter.  The bytecode is also cached in "
"``.pyc`` and ``.pyo`` files so that executing the same file is faster the "
"second time (recompilation from source to bytecode can be avoided).  This "
"\"intermediate language\" is said to run on a :term:`virtual machine` that "
"executes the machine code corresponding to each bytecode. Do note that "
"bytecodes are not expected to work between different Python virtual "
"machines, nor to be stable between Python releases."
msgstr ""

# 693ad59d4aec412cbf25431a52fb6593
#: ../src/Doc/glossary.rst:73
msgid ""
"A list of bytecode instructions can be found in the documentation for :ref:"
"`the dis module <bytecodes>`."
msgstr ""

#: ../src/Doc/glossary.rst:77
msgid ""
"A template for creating user-defined objects. Class definitions normally "
"contain method definitions which operate on instances of the class."
msgstr ""
"Un modèle pour créer des objets définis par l'utilisateur. Les définitions "
"de classes contiennent normalement des définitions de méthodes qui agissent "
"sur les instances de classe."

# 928bddece69547be8d24a486652fd651
#: ../src/Doc/glossary.rst:82
msgid ""
"Any class which does not inherit from :class:`object`.  See :term:`new-style "
"class`.  Classic classes have been removed in Python 3."
msgstr ""

# 80b9baf13e62410c9e2897e0c4be23cd
#: ../src/Doc/glossary.rst:86
msgid ""
"The implicit conversion of an instance of one type to another during an "
"operation which involves two arguments of the same type.  For example, ``int"
"(3.15)`` converts the floating point number to the integer ``3``, but in "
"``3+4.5``, each argument is of a different type (one int, one float), and "
"both must be converted to the same type before they can be added or it will "
"raise a ``TypeError``.  Coercion between two operands can be performed with "
"the ``coerce`` built-in function; thus, ``3+4.5`` is equivalent to calling "
"``operator.add(*coerce(3, 4.5))`` and results in ``operator.add(3.0, 4.5)"
"``.  Without coercion, all arguments of even compatible types would have to "
"be normalized to the same value by the programmer, e.g., ``float(3)+4.5`` "
"rather than just ``3+4.5``."
msgstr ""

#: ../src/Doc/glossary.rst:99
msgid ""
"An extension of the familiar real number system in which all numbers are "
"expressed as a sum of a real part and an imaginary part.  Imaginary numbers "
"are real multiples of the imaginary unit (the square root of ``-1``), often "
"written ``i`` in mathematics or ``j`` in engineering.  Python has built-in "
"support for complex numbers, which are written with this latter notation; "
"the imaginary part is written with a ``j`` suffix, e.g., ``3+1j``.  To get "
"access to complex equivalents of the :mod:`math` module, use :mod:`cmath`.  "
"Use of complex numbers is a fairly advanced mathematical feature.  If you're "
"not aware of a need for them, it's almost certain you can safely ignore them."
msgstr ""
"Une extension du système numéral réel familier dans laquelle tous les "
"nombres sont exprimés sous la forme d'une somme d'un réel et d'un "
"imaginaire. Les nombres imaginaures sont de réels multiples d'une unité "
"imaginaire (la racine carrée de ``-1``), souvent écrite ``i`` en "
"mathématiques ou ``j`` en ingénierie. Python supporte nativement les nombres "
"complexes, écrits avec cette dernière notation; la partie imaginaire est "
"écrite avec un suffixe ``j``, exemple, ``3+1j``. Pour utiliser les "
"équivalents complexes à :mod:`math`, utilisez :mod:`cmath`. L'utilisation "
"des nombres complexes est une caractéristiques des mathématiques avancées. "
"Si vous n'en avez pas l'utilité, vous pouvez les ignorer en toute "
"tranquilité."

#: ../src/Doc/glossary.rst:111
msgid ""
"An object which controls the environment seen in a :keyword:`with` statement "
"by defining :meth:`__enter__` and :meth:`__exit__` methods. See :pep:`343`."
msgstr ""

#: ../src/Doc/glossary.rst:116
#, fuzzy
msgid ""
"The canonical implementation of the Python programming language, as "
"distributed on `python.org <http://python.org>`_.  The term \"CPython\" is "
"used when necessary to distinguish this implementation from others such as "
"Jython or IronPython."
msgstr ""
"L'implémentation canonique du langage de programmation Python. Le terme "
"\"CPython\" est utilisé dans certains contextes lorsqu'il est nécessaire de "
"distingué cette implémentation des autres comme Jython ou IronPython"

#: ../src/Doc/glossary.rst:122
msgid ""
"A function returning another function, usually applied as a function "
"transformation using the ``@wrapper`` syntax.  Common examples for "
"decorators are :func:`classmethod` and :func:`staticmethod`."
msgstr ""
"Une fonction retournant une autre fonction, utilisé habituellement dans une "
"transformation de fonction via la syntaxe ``@wrapper``.Les exemples "
"habituels pour les décorateurs sont :func:`classmethod` et :func:"
"`staticmethod`."

#: ../src/Doc/glossary.rst:126
msgid ""
"The decorator syntax is merely syntactic sugar, the following two function "
"definitions are semantically equivalent::"
msgstr ""
"La syntaxe decorator est simplement du sucre syntaxique, les définitions des "
"deux fonctions suivantes sont sémantiquement équivalentes :"

#: ../src/Doc/glossary.rst:137
msgid ""
"The same concept exists for classes, but is less commonly used there.  See "
"the documentation for :ref:`function definitions <function>` and :ref:`class "
"definitions <class>` for more about decorators."
msgstr ""
"Quoique moins fréquemment utilisé, le même concept existe pour les classes. "
"Consultez la documentation :ref:`définitions de fonctions <function> et :ref:"
"`définitions de classes <class>` pour en savoir plus sur les decorators."

#: ../src/Doc/glossary.rst:142
#, fuzzy
msgid ""
"Any *new-style* object which defines the methods :meth:`__get__`, :meth:"
"`__set__`, or :meth:`__delete__`.  When a class attribute is a descriptor, "
"its special binding behavior is triggered upon attribute lookup.  Normally, "
"using *a.b* to get, set or delete an attribute looks up the object named *b* "
"in the class dictionary for *a*, but if *b* is a descriptor, the respective "
"descriptor method gets called.  Understanding descriptors is a key to a deep "
"understanding of Python because they are the basis for many features "
"including functions, methods, properties, class methods, static methods, and "
"reference to super classes."
msgstr ""
"N'importe quel objet définissant les méthodes :meth:`__get__`, :meth:"
"`__set__`, ou :meth:`__delete__`. Lorsque l'attribut d'une classe est un "
"descripteur, son comportement spécial est déclenché lors de la recherche des "
"attributs. En utilisant *a.b* pour obtenir, valoriser ou effacer un "
"attribut, il recherche l'objet nommé *b* dans la dictionnaire de la classe "
"pour *a*, mais si *b* est un descripteur, la méthode de ce descripteur est "
"alors appelée.Comprendre les descripteurs est la clé d'une compréhension "
"approfondie de Python, ils sont la base de nombre de ses caractéristiques "
"notamment les fonctions, méthodes, propriétés, méthodes de classe, méthodes "
"statiques, et les références aux classes mères. "

#: ../src/Doc/glossary.rst:152
msgid ""
"For more information about descriptors' methods, see :ref:`descriptors`."
msgstr ""
"Pour plus d'informations sur les méthodes des descripteurs, consultez :ref:"
"`descriptors`."

# f754f581b3d74b79bbd8141ea901dbaf
#: ../src/Doc/glossary.rst:155
msgid ""
"An associative array, where arbitrary keys are mapped to values.  The keys "
"can be any object with :meth:`__hash__`  and :meth:`__eq__` methods. Called "
"a hash in Perl."
msgstr ""

#: ../src/Doc/glossary.rst:160
msgid ""
"A string literal which appears as the first expression in a class, function "
"or module.  While ignored when the suite is executed, it is recognized by "
"the compiler and put into the :attr:`__doc__` attribute of the enclosing "
"class, function or module.  Since it is available via introspection, it is "
"the canonical place for documentation of the object."
msgstr ""

# 042c1d93e5ca4d8a96eab89d07ddb0df
#: ../src/Doc/glossary.rst:168
msgid ""
"A programming style which does not look at an object's type to determine if "
"it has the right interface; instead, the method or attribute is simply "
"called or used (\"If it looks like a duck and quacks like a duck, it must be "
"a duck.\")  By emphasizing interfaces rather than specific types, well-"
"designed code improves its flexibility by allowing polymorphic "
"substitution.  Duck-typing avoids tests using :func:`type` or :func:"
"`isinstance`.  (Note, however, that duck-typing can be complemented with :"
"term:`abstract base classes <abstract base class>`.)  Instead, it typically "
"employs :func:`hasattr` tests or :term:`EAFP` programming."
msgstr ""

#: ../src/Doc/glossary.rst:179
msgid ""
"Easier to ask for forgiveness than permission.  This common Python coding "
"style assumes the existence of valid keys or attributes and catches "
"exceptions if the assumption proves false.  This clean and fast style is "
"characterized by the presence of many :keyword:`try` and :keyword:`except` "
"statements.  The technique contrasts with the :term:`LBYL` style common to "
"many other languages such as C."
msgstr ""

#: ../src/Doc/glossary.rst:187
#, fuzzy
msgid ""
"A piece of syntax which can be evaluated to some value.  In other words, an "
"expression is an accumulation of expression elements like literals, names, "
"attribute access, operators or function calls which all return a value.  In "
"contrast to many other languages, not all language constructs are "
"expressions.  There are also :term:`statement`\\s which cannot be used as "
"expressions, such as :keyword:`print` or :keyword:`if`.  Assignments are "
"also statements, not expressions."
msgstr ""
"Une suite logique de termes et chiffres conformes à la syntaxe Python dont "
"l'évaluation fournit une valeur. En d'autres termes, une expression est une "
"suite d'éléments tels que des noms, opérateurs, littéraux, accès "
"d'attributs, méthodes ou fonctions qui aboutissent à une valeur. "
"Contrairement à beaucoup d'autres langages, les différentes constructions du "
"langage ne sont pas toutes des expressions. Il y a également des :term:"
"`statement`s qui ne peuvent pas être utilisés comme expressions, tel que :"
"keyword:`if`. Les affectations sont également des :term:`statements` et non "
"des expressions."

#: ../src/Doc/glossary.rst:196
msgid ""
"A module written in C or C++, using Python's C API to interact with the core "
"and with user code."
msgstr ""

# 76951cc850f44973adbb2272e984c10d
#: ../src/Doc/glossary.rst:200
msgid ""
"An object exposing a file-oriented API (with methods such as :meth:`read()` "
"or :meth:`write()`) to an underlying resource.  Depending on the way it was "
"created, a file object can mediate access to a real on-disk file or to "
"another type of storage or communication device (for example standard input/"
"output, in-memory buffers, sockets, pipes, etc.).  File objects are also "
"called :dfn:`file-like objects` or :dfn:`streams`."
msgstr ""

# 1fdf5a4475fa45a7a2c273be3699ac65
#: ../src/Doc/glossary.rst:208
msgid ""
"There are actually three categories of file objects: raw binary files, "
"buffered binary files and text files.  Their interfaces are defined in the :"
"mod:`io` module.  The canonical way to create a file object is by using the :"
"func:`open` function."
msgstr ""

# b948ad82982548409e3c905be43aa371
#: ../src/Doc/glossary.rst:214
msgid "A synonym for :term:`file object`."
msgstr ""

# 5725b635d290447cb6d0d89ad194b113
#: ../src/Doc/glossary.rst:217
msgid ""
"An object that tries to find the :term:`loader` for a module. It must "
"implement a method named :meth:`find_module`. See :pep:`302` for details."
msgstr ""

# 8325f98bd93d4e0887c926dca290641c
#: ../src/Doc/glossary.rst:222
msgid ""
"Mathematical division that rounds down to nearest integer.  The floor "
"division operator is ``//``.  For example, the expression ``11 // 4`` "
"evaluates to ``2`` in contrast to the ``2.75`` returned by float true "
"division.  Note that ``(-11) // 4`` is ``-3`` because that is ``-2.75`` "
"rounded *downward*. See :pep:`238`."
msgstr ""

#: ../src/Doc/glossary.rst:229
msgid ""
"A series of statements which returns some value to a caller. It can also be "
"passed zero or more arguments which may be used in the execution of the "
"body. See also :term:`argument` and :term:`method`."
msgstr ""

# e7a99770e34a43bd96520fc22dcfb18e
#: ../src/Doc/glossary.rst:234
msgid ""
"A pseudo-module which programmers can use to enable new language features "
"which are not compatible with the current interpreter.  For example, the "
"expression ``11/4`` currently evaluates to ``2``. If the module in which it "
"is executed had enabled *true division* by executing::"
msgstr ""

# 6ee85b1aab4c47e385f403ce68ed1cb3
#: ../src/Doc/glossary.rst:241
msgid ""
"the expression ``11/4`` would evaluate to ``2.75``.  By importing the :mod:"
"`__future__` module and evaluating its variables, you can see when a new "
"feature was first added to the language and when it will become the default::"
msgstr ""

#: ../src/Doc/glossary.rst:251
msgid ""
"The process of freeing memory when it is not used anymore.  Python performs "
"garbage collection via reference counting and a cyclic garbage collector "
"that is able to detect and break reference cycles."
msgstr ""

# bd6889e8844949f3a02cd584e41ac906
#: ../src/Doc/glossary.rst:258
msgid ""
"A function which returns an iterator.  It looks like a normal function "
"except that it contains :keyword:`yield` statements for producing a series a "
"values usable in a for-loop or that can be retrieved one at a time with the :"
"func:`next` function. Each :keyword:`yield` temporarily suspends processing, "
"remembering the location execution state (including local variables and "
"pending try-statements).  When the generator resumes, it picks-up where it "
"left-off (in contrast to functions which start fresh on every invocation)."
msgstr ""

#: ../src/Doc/glossary.rst:270
msgid ""
"An expression that returns an iterator.  It looks like a normal expression "
"followed by a :keyword:`for` expression defining a loop variable, range, and "
"an optional :keyword:`if` expression.  The combined expression generates "
"values for an enclosing function::"
msgstr ""

#: ../src/Doc/glossary.rst:279
msgid "See :term:`global interpreter lock`."
msgstr ""

# eae06790f2a14420857358b733306615
#: ../src/Doc/glossary.rst:282
msgid ""
"The mechanism used by the :term:`CPython` interpreter to assure that only "
"one thread executes Python :term:`bytecode` at a time. This simplifies the "
"CPython implementation by making the object model (including critical built-"
"in types such as :class:`dict`) implicitly safe against concurrent access.  "
"Locking the entire interpreter makes it easier for the interpreter to be "
"multi-threaded, at the expense of much of the parallelism afforded by multi-"
"processor machines."
msgstr ""

# 8cc9fbea059141b080140a49ecba1e16
#: ../src/Doc/glossary.rst:291
msgid ""
"However, some extension modules, either standard or third-party, are "
"designed so as to release the GIL when doing computationally-intensive tasks "
"such as compression or hashing.  Also, the GIL is always released when doing "
"I/O."
msgstr ""

# e78ce472d1e848ada067fdd3068fb708
#: ../src/Doc/glossary.rst:296
msgid ""
"Past efforts to create a \"free-threaded\" interpreter (one which locks "
"shared data at a much finer granularity) have not been successful because "
"performance suffered in the common single-processor case. It is believed "
"that overcoming this performance issue would make the implementation much "
"more complicated and therefore costlier to maintain."
msgstr ""

# 9913e09d19804a99aee1d8811c888425
#: ../src/Doc/glossary.rst:303
msgid ""
"An object is *hashable* if it has a hash value which never changes during "
"its lifetime (it needs a :meth:`__hash__` method), and can be compared to "
"other objects (it needs an :meth:`__eq__` or :meth:`__cmp__` method). "
"Hashable objects which compare equal must have the same hash value."
msgstr ""

#: ../src/Doc/glossary.rst:308
msgid ""
"Hashability makes an object usable as a dictionary key and a set member, "
"because these data structures use the hash value internally."
msgstr ""

#: ../src/Doc/glossary.rst:311
msgid ""
"All of Python's immutable built-in objects are hashable, while no mutable "
"containers (such as lists or dictionaries) are.  Objects which are instances "
"of user-defined classes are hashable by default; they all compare unequal, "
"and their hash value is their :func:`id`."
msgstr ""

# 8f1c753bef6f49ef9292eff2e5e4369e
#: ../src/Doc/glossary.rst:317
msgid ""
"An Integrated Development Environment for Python.  IDLE is a basic editor "
"and interpreter environment which ships with the standard distribution of "
"Python."
msgstr ""

#: ../src/Doc/glossary.rst:322
msgid ""
"An object with a fixed value.  Immutable objects include numbers, strings "
"and tuples.  Such an object cannot be altered.  A new object has to be "
"created if a different value has to be stored.  They play an important role "
"in places where a constant hash value is needed, for example as a key in a "
"dictionary."
msgstr ""

# 3a87150a8f954602982fd37339efd903
#: ../src/Doc/glossary.rst:329
msgid ""
"Mathematical division discarding any remainder.  For example, the expression "
"``11/4`` currently evaluates to ``2`` in contrast to the ``2.75`` returned "
"by float division.  Also called *floor division*. When dividing two integers "
"the outcome will always be another integer (having the floor function "
"applied to it). However, if one of the operands is another numeric type "
"(such as a :class:`float`), the result will be coerced (see :term:"
"`coercion`) to a common type.  For example, an integer divided by a float "
"will result in a float value, possibly with a decimal fraction.  Integer "
"division can be forced by using the ``//`` operator instead of the ``/`` "
"operator.  See also :term:`__future__`."
msgstr ""

#: ../src/Doc/glossary.rst:341
msgid ""
"An object that both finds and loads a module; both a :term:`finder` and :"
"term:`loader` object."
msgstr ""

#: ../src/Doc/glossary.rst:345
msgid ""
"Python has an interactive interpreter which means you can enter statements "
"and expressions at the interpreter prompt, immediately execute them and see "
"their results.  Just launch ``python`` with no arguments (possibly by "
"selecting it from your computer's main menu). It is a very powerful way to "
"test out new ideas or inspect modules and packages (remember ``help(x)``)."
msgstr ""

#: ../src/Doc/glossary.rst:353
msgid ""
"Python is an interpreted language, as opposed to a compiled one, though the "
"distinction can be blurry because of the presence of the bytecode compiler.  "
"This means that source files can be run directly without explicitly creating "
"an executable which is then run. Interpreted languages typically have a "
"shorter development/debug cycle than compiled ones, though their programs "
"generally also run more slowly.  See also :term:`interactive`."
msgstr ""

# 1766e991d3794bfcbd0f64236d91bdcd
#: ../src/Doc/glossary.rst:362
msgid ""
"An object capable of returning its members one at a time. Examples of "
"iterables include all sequence types (such as :class:`list`, :class:`str`, "
"and :class:`tuple`) and some non-sequence types like :class:`dict` and :"
"class:`file` and objects of any classes you define with an :meth:`__iter__` "
"or :meth:`__getitem__` method.  Iterables can be used in a :keyword:`for` "
"loop and in many other places where a sequence is needed (:func:`zip`, :func:"
"`map`, ...).  When an iterable object is passed as an argument to the built-"
"in function :func:`iter`, it returns an iterator for the object.  This "
"iterator is good for one pass over the set of values.  When using iterables, "
"it is usually not necessary to call :func:`iter` or deal with iterator "
"objects yourself.  The ``for`` statement does that automatically for you, "
"creating a temporary unnamed variable to hold the iterator for the duration "
"of the loop.  See also :term:`iterator`, :term:`sequence`, and :term:"
"`generator`."
msgstr ""

# f2537fc05b464913b2c4dbc25adaf0bc
#: ../src/Doc/glossary.rst:378
msgid ""
"An object representing a stream of data.  Repeated calls to the iterator's :"
"meth:`next` method return successive items in the stream.  When no more data "
"are available a :exc:`StopIteration` exception is raised instead.  At this "
"point, the iterator object is exhausted and any further calls to its :meth:"
"`next` method just raise :exc:`StopIteration` again.  Iterators are required "
"to have an :meth:`__iter__` method that returns the iterator object itself "
"so every iterator is also iterable and may be used in most places where "
"other iterables are accepted.  One notable exception is code which attempts "
"multiple iteration passes.  A container object (such as a :class:`list`) "
"produces a fresh new iterator each time you pass it to the :func:`iter` "
"function or use it in a :keyword:`for` loop.  Attempting this with an "
"iterator will just return the same exhausted iterator object used in the "
"previous iteration pass, making it appear like an empty container."
msgstr ""

#: ../src/Doc/glossary.rst:392
msgid "More information can be found in :ref:`typeiter`."
msgstr ""

# 4407f4d5ddab4943aa8b95ea3e95d087
#: ../src/Doc/glossary.rst:395
msgid ""
"A key function or collation function is a callable that returns a value used "
"for sorting or ordering.  For example, :func:`locale.strxfrm` is used to "
"produce a sort key that is aware of locale specific sort conventions."
msgstr ""

# b687dec848ca4394a8c48b2990d87905
#: ../src/Doc/glossary.rst:400
msgid ""
"A number of tools in Python accept key functions to control how elements are "
"ordered or grouped.  They include :func:`min`, :func:`max`, :func:`sorted`, :"
"meth:`list.sort`, :func:`heapq.nsmallest`, :func:`heapq.nlargest`, and :func:"
"`itertools.groupby`."
msgstr ""

# 41316a1c618c4d59ba353c58c75e89fe
#: ../src/Doc/glossary.rst:405
msgid ""
"There are several ways to create a key function.  For example. the :meth:"
"`str.lower` method can serve as a key function for case insensitive sorts.  "
"Alternatively, an ad-hoc key function can be built from a :keyword:`lambda` "
"expression such as ``lambda r: (r[0], r[2])``.  Also, the :mod:`operator` "
"module provides three key function constructors: :func:`~operator."
"attrgetter`, :func:`~operator.itemgetter`, and :func:`~operator."
"methodcaller`.  See the :ref:`Sorting HOW TO <sortinghowto>` for examples of "
"how to create and use key functions."
msgstr ""

#: ../src/Doc/glossary.rst:415
msgid ""
"Arguments which are preceded with a ``variable_name=`` in the call. The "
"variable name designates the local name in the function to which the value "
"is assigned.  ``**`` is used to accept or pass a dictionary of keyword "
"arguments.  See :term:`argument`."
msgstr ""

#: ../src/Doc/glossary.rst:421
msgid ""
"An anonymous inline function consisting of a single :term:`expression` which "
"is evaluated when the function is called.  The syntax to create a lambda "
"function is ``lambda [arguments]: expression``"
msgstr ""

#: ../src/Doc/glossary.rst:426
msgid ""
"Look before you leap.  This coding style explicitly tests for pre-conditions "
"before making calls or lookups.  This style contrasts with the :term:`EAFP` "
"approach and is characterized by the presence of many :keyword:`if` "
"statements."
msgstr ""

# 0dc5595fdc784d8f9afbc265a54ccb9e
#: ../src/Doc/glossary.rst:431
msgid ""
"In a multi-threaded environment, the LBYL approach can risk introducing a "
"race condition between \"the looking\" and \"the leaping\".  For example, "
"the code, ``if key in mapping: return mapping[key]`` can fail if another "
"thread removes *key* from *mapping* after the test, but before the lookup. "
"This issue can be solved with locks or by using the EAFP approach."
msgstr ""

#: ../src/Doc/glossary.rst:438
msgid ""
"A built-in Python :term:`sequence`.  Despite its name it is more akin to an "
"array in other languages than to a linked list since access to elements are O"
"(1)."
msgstr ""

# 0a233eff49d24efe9903158ed9a8fc7a
#: ../src/Doc/glossary.rst:443
msgid ""
"A compact way to process all or part of the elements in a sequence and "
"return a list with the results.  ``result = [\"0x%02x\" % x for x in range"
"(256) if x % 2 == 0]`` generates a list of strings containing even hex "
"numbers (0x..) in the range from 0 to 255. The :keyword:`if` clause is "
"optional.  If omitted, all elements in ``range(256)`` are processed."
msgstr ""

# f1f8f4cd6f1a4ae8850b0676e879f413
#: ../src/Doc/glossary.rst:451
msgid ""
"An object that loads a module. It must define a method named :meth:"
"`load_module`. A loader is typically returned by a :term:`finder`. See :pep:"
"`302` for details."
msgstr ""

# dd0ae5035bfa49fc9bd134314d09bfcd
#: ../src/Doc/glossary.rst:456
msgid ""
"A container object that supports arbitrary key lookups and implements the "
"methods specified in the :class:`~collections.Mapping` or :class:"
"`~collections.MutableMapping` :ref:`abstract base classes <collections-"
"abstract-base-classes>`.  Examples include :class:`dict`, :class:"
"`collections.defaultdict`, :class:`collections.OrderedDict` and :class:"
"`collections.Counter`."
msgstr ""

#: ../src/Doc/glossary.rst:464
msgid ""
"The class of a class.  Class definitions create a class name, a class "
"dictionary, and a list of base classes.  The metaclass is responsible for "
"taking those three arguments and creating the class.  Most object oriented "
"programming languages provide a default implementation.  What makes Python "
"special is that it is possible to create custom metaclasses.  Most users "
"never need this tool, but when the need arises, metaclasses can provide "
"powerful, elegant solutions.  They have been used for logging attribute "
"access, adding thread-safety, tracking object creation, implementing "
"singletons, and many other tasks."
msgstr ""

#: ../src/Doc/glossary.rst:474
msgid "More information can be found in :ref:`metaclasses`."
msgstr ""

#: ../src/Doc/glossary.rst:477
msgid ""
"A function which is defined inside a class body.  If called as an attribute "
"of an instance of that class, the method will get the instance object as its "
"first :term:`argument` (which is usually called ``self``). See :term:"
"`function` and :term:`nested scope`."
msgstr ""

# d91abe76105e44df9313330cad54ad2d
#: ../src/Doc/glossary.rst:483
msgid ""
"Method Resolution Order is the order in which base classes are searched for "
"a member during lookup. See `The Python 2.3 Method Resolution Order <http://"
"www.python.org/download/releases/2.3/mro/>`_."
msgstr ""

# c6741e9b5b1d47d7b0cf92e63d7437b1
#: ../src/Doc/glossary.rst:488
msgid "See :term:`method resolution order`."
msgstr ""

#: ../src/Doc/glossary.rst:491
msgid ""
"Mutable objects can change their value but keep their :func:`id`.  See also :"
"term:`immutable`."
msgstr ""

#: ../src/Doc/glossary.rst:495
msgid ""
"Any tuple-like class whose indexable elements are also accessible using "
"named attributes (for example, :func:`time.localtime` returns a tuple-like "
"object where the *year* is accessible either with an index such as ``t[0]`` "
"or with a named attribute like ``t.tm_year``)."
msgstr ""

#: ../src/Doc/glossary.rst:500
msgid ""
"A named tuple can be a built-in type such as :class:`time.struct_time`, or "
"it can be created with a regular class definition.  A full featured named "
"tuple can also be created with the factory function :func:`collections."
"namedtuple`.  The latter approach automatically provides extra features such "
"as a self-documenting representation like ``Employee(name='jones', "
"title='programmer')``."
msgstr ""

# 34a3f673792842659e93f26a12de05e7
#: ../src/Doc/glossary.rst:508
msgid ""
"The place where a variable is stored.  Namespaces are implemented as "
"dictionaries.  There are the local, global and built-in namespaces as well "
"as nested namespaces in objects (in methods).  Namespaces support modularity "
"by preventing naming conflicts.  For instance, the functions :func:"
"`__builtin__.open` and :func:`os.open` are distinguished by their "
"namespaces.  Namespaces also aid readability and maintainability by making "
"it clear which module implements a function.  For instance, writing :func:"
"`random.seed` or :func:`itertools.izip` makes it clear that those functions "
"are implemented by the :mod:`random` and :mod:`itertools` modules, "
"respectively."
msgstr ""

# 02211faabe3a4da0a7c887c874c296b1
#: ../src/Doc/glossary.rst:520
msgid ""
"The ability to refer to a variable in an enclosing definition.  For "
"instance, a function defined inside another function can refer to variables "
"in the outer function.  Note that nested scopes work only for reference and "
"not for assignment which will always write to the innermost scope.  In "
"contrast, local variables both read and write in the innermost scope.  "
"Likewise, global variables read and write to the global namespace."
msgstr ""

# c773104e69fe4899b0b7464f24f6b490
#: ../src/Doc/glossary.rst:528
msgid ""
"Any class which inherits from :class:`object`.  This includes all built-in "
"types like :class:`list` and :class:`dict`.  Only new-style classes can use "
"Python's newer, versatile features like :attr:`__slots__`, descriptors, "
"properties, and :meth:`__getattribute__`."
msgstr ""

# df747d6666004ea28dff736f8724ebfd
#: ../src/Doc/glossary.rst:533
msgid "More information can be found in :ref:`newstyle`."
msgstr ""

#: ../src/Doc/glossary.rst:536
msgid ""
"Any data with state (attributes or value) and defined behavior (methods).  "
"Also the ultimate base class of any :term:`new-style class`."
msgstr ""

#: ../src/Doc/glossary.rst:541
msgid ""
"The arguments assigned to local names inside a function or method, "
"determined by the order in which they were given in the call.  ``*`` is used "
"to either accept multiple positional arguments (when in the definition), or "
"pass several arguments as a list to a function.  See :term:`argument`."
msgstr ""

#: ../src/Doc/glossary.rst:548
msgid ""
"Nickname for the Python 3.x release line (coined long ago when the release "
"of version 3 was something in the distant future.)  This is also abbreviated "
"\"Py3k\"."
msgstr ""

#: ../src/Doc/glossary.rst:553
msgid ""
"An idea or piece of code which closely follows the most common idioms of the "
"Python language, rather than implementing code using concepts common to "
"other languages.  For example, a common idiom in Python is to loop over all "
"elements of an iterable using a :keyword:`for` statement.  Many other "
"languages don't have this type of construct, so people unfamiliar with "
"Python sometimes use a numerical counter instead::"
msgstr ""

#: ../src/Doc/glossary.rst:563
msgid "As opposed to the cleaner, Pythonic method::"
msgstr ""

#: ../src/Doc/glossary.rst:569
msgid ""
"The number of references to an object.  When the reference count of an "
"object drops to zero, it is deallocated.  Reference counting is generally "
"not visible to Python code, but it is a key element of the :term:`CPython` "
"implementation.  The :mod:`sys` module defines a :func:`~sys.getrefcount` "
"function that programmers can call to return the reference count for a "
"particular object."
msgstr ""

# 945a9d86a5f1422c9b37edd8e6f4f9cf
#: ../src/Doc/glossary.rst:577
msgid ""
"A declaration inside a :term:`new-style class` that saves memory by pre-"
"declaring space for instance attributes and eliminating instance "
"dictionaries.  Though popular, the technique is somewhat tricky to get right "
"and is best reserved for rare cases where there are large numbers of "
"instances in a memory-critical application."
msgstr ""

# e226f945a29143b097289a7b551d25ec
#: ../src/Doc/glossary.rst:584
msgid ""
"An :term:`iterable` which supports efficient element access using integer "
"indices via the :meth:`__getitem__` special method and defines a :meth:`len` "
"method that returns the length of the sequence. Some built-in sequence types "
"are :class:`list`, :class:`str`, :class:`tuple`, and :class:`unicode`. Note "
"that :class:`dict` also supports :meth:`__getitem__` and :meth:`__len__`, "
"but is considered a mapping rather than a sequence because the lookups use "
"arbitrary :term:`immutable` keys rather than integers."
msgstr ""

# 4785e95d3a154c2da121c0542a04ee79
#: ../src/Doc/glossary.rst:594
msgid ""
"An object usually containing a portion of a :term:`sequence`.  A slice is "
"created using the subscript notation, ``[]`` with colons between numbers "
"when several are given, such as in ``variable_name[1:3:5]``.  The bracket "
"(subscript) notation uses :class:`slice` objects internally (or in older "
"versions, :meth:`__getslice__` and :meth:`__setslice__`)."
msgstr ""

#: ../src/Doc/glossary.rst:601
msgid ""
"A method that is called implicitly by Python to execute a certain operation "
"on a type, such as addition.  Such methods have names starting and ending "
"with double underscores.  Special methods are documented in :ref:"
"`specialnames`."
msgstr ""

#: ../src/Doc/glossary.rst:607
msgid ""
"A statement is part of a suite (a \"block\" of code).  A statement is either "
"an :term:`expression` or a one of several constructs with a keyword, such "
"as :keyword:`if`, :keyword:`while` or :keyword:`for`."
msgstr ""

# 0c18843752e242b5bd5eaf59c9d9e380
#: ../src/Doc/glossary.rst:612
msgid ""
"A tuple with named elements. Struct sequences expose an interface similiar "
"to :term:`named tuple` in that elements can either be accessed either by "
"index or as an attribute. However, they do not have any of the named tuple "
"methods like :meth:`~collections.somenamedtuple._make` or :meth:"
"`~collections.somenamedtuple._asdict`. Examples of struct sequences include :"
"data:`sys.float_info` and the return value of :func:`os.stat`."
msgstr ""

#: ../src/Doc/glossary.rst:620
msgid ""
"A string which is bound by three instances of either a quotation mark (\") "
"or an apostrophe (').  While they don't provide any functionality not "
"available with single-quoted strings, they are useful for a number of "
"reasons.  They allow you to include unescaped single and double quotes "
"within a string and they can span multiple lines without the use of the "
"continuation character, making them especially useful when writing "
"docstrings."
msgstr ""

#: ../src/Doc/glossary.rst:629
msgid ""
"The type of a Python object determines what kind of object it is; every "
"object has a type.  An object's type is accessible as its :attr:`__class__` "
"attribute or can be retrieved with ``type(obj)``."
msgstr ""

# 45af0b22127142d898e66ebfd0567b9b
#: ../src/Doc/glossary.rst:634
msgid ""
"A manner of interpreting text streams in which all of the following are "
"recognized as ending a line: the Unix end-of-line convention ``'\\n'``, the "
"Windows convention ``'\\r\\n'``, and the old Macintosh convention "
"``'\\r'``.  See :pep:`278` and :pep:`3116`, as well as :func:`str."
"splitlines` for an additional use."
msgstr ""

# a32b4dd14aa647d8ad51034682f0c23b
#: ../src/Doc/glossary.rst:641
msgid ""
"The objects returned from :meth:`dict.viewkeys`, :meth:`dict.viewvalues`, "
"and :meth:`dict.viewitems` are called dictionary views.  They are lazy "
"sequences that will see changes in the underlying dictionary.  To force the "
"dictionary view to become a full list use ``list(dictview)``.  See :ref:"
"`dict-views`."
msgstr ""

#: ../src/Doc/glossary.rst:648
msgid ""
"A computer defined entirely in software.  Python's virtual machine executes "
"the :term:`bytecode` emitted by the bytecode compiler."
msgstr ""

#: ../src/Doc/glossary.rst:652
msgid ""
"Listing of Python design principles and philosophies that are helpful in "
"understanding and using the language.  The listing can be found by typing "
"\"``import this``\" at the interactive prompt."
msgstr ""

#~ msgid ""
#~ "def f(...):     ... f = staticmethod(f)  @staticmethod def f(...):     ..."
#~ msgstr "def f(...): ... f = staticmethod(f) @staticmethod def f(...): ..."

#~ msgid "for i in range(len(food)):     print(food[i])"
#~ msgstr "for i in range(len(food)): print(food[i])"
