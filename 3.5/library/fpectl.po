# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:42+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/fpectl.rst:2
msgid ":mod:`fpectl` --- Floating point exception control"
msgstr ""

#: ../Doc/library/fpectl.rst:13
msgid ""
"The :mod:`fpectl` module is not built by default, and its usage is "
"discouraged and may be dangerous except in the hands of experts.  See also "
"the section :ref:`fpectl-limitations` on limitations for more details."
msgstr ""

#: ../Doc/library/fpectl.rst:21
msgid ""
"Most computers carry out floating point operations in conformance with the "
"so-called IEEE-754 standard. On any real computer, some floating point "
"operations produce results that cannot be expressed as a normal floating "
"point value. For example, try ::"
msgstr ""

#: ../Doc/library/fpectl.rst:32
msgid ""
"(The example above will work on many platforms. DEC Alpha may be one "
"exception.) \"Inf\" is a special, non-numeric value in IEEE-754 that stands "
"for \"infinity\", and \"nan\" means \"not a number.\" Note that, other than "
"the non-numeric results, nothing special happened when you asked Python to "
"carry out those calculations. That is in fact the default behaviour "
"prescribed in the IEEE-754 standard, and if it works for you, stop reading "
"now."
msgstr ""

#: ../Doc/library/fpectl.rst:39
msgid ""
"In some circumstances, it would be better to raise an exception and stop "
"processing at the point where the faulty operation was attempted. The :mod:"
"`fpectl` module is for use in that situation. It provides control over "
"floating point units from several hardware manufacturers, allowing the user "
"to turn on the generation of :const:`SIGFPE` whenever any of the IEEE-754 "
"exceptions Division by Zero, Overflow, or Invalid Operation occurs. In "
"tandem with a pair of wrapper macros that are inserted into the C code "
"comprising your python system, :const:`SIGFPE` is trapped and converted into "
"the Python :exc:`FloatingPointError` exception."
msgstr ""

#: ../Doc/library/fpectl.rst:49
msgid ""
"The :mod:`fpectl` module defines the following functions and may raise the "
"given exception:"
msgstr ""

#: ../Doc/library/fpectl.rst:55
msgid ""
"Turn on the generation of :const:`SIGFPE`, and set up an appropriate signal "
"handler."
msgstr ""

#: ../Doc/library/fpectl.rst:61
msgid "Reset default handling of floating point exceptions."
msgstr ""

#: ../Doc/library/fpectl.rst:66
msgid ""
"After :func:`turnon_sigfpe` has been executed, a floating point operation "
"that raises one of the IEEE-754 exceptions Division by Zero, Overflow, or "
"Invalid operation will in turn raise this standard Python exception."
msgstr ""

#: ../Doc/library/fpectl.rst:74
msgid "Example"
msgstr "Exemple"

#: ../Doc/library/fpectl.rst:76
msgid ""
"The following example demonstrates how to start up and test operation of "
"the :mod:`fpectl` module. ::"
msgstr ""

#: ../Doc/library/fpectl.rst:99
msgid "Limitations and other considerations"
msgstr ""

#: ../Doc/library/fpectl.rst:101
msgid ""
"Setting up a given processor to trap IEEE-754 floating point errors "
"currently requires custom code on a per-architecture basis. You may have to "
"modify :mod:`fpectl` to control your particular hardware."
msgstr ""

#: ../Doc/library/fpectl.rst:105
msgid ""
"Conversion of an IEEE-754 exception to a Python exception requires that the "
"wrapper macros ``PyFPE_START_PROTECT`` and ``PyFPE_END_PROTECT`` be inserted "
"into your code in an appropriate fashion.  Python itself has been modified "
"to support the :mod:`fpectl` module, but many other codes of interest to "
"numerical analysts have not."
msgstr ""

#: ../Doc/library/fpectl.rst:111
msgid "The :mod:`fpectl` module is not thread-safe."
msgstr ""

#: ../Doc/library/fpectl.rst:116
msgid ""
"Some files in the source distribution may be interesting in learning more "
"about how this module operates. The include file :file:`Include/pyfpe.h` "
"discusses the implementation of this module at some length. :file:`Modules/"
"fpetestmodule.c` gives several examples of use. Many additional examples can "
"be found in :file:`Objects/floatobject.c`."
msgstr ""
