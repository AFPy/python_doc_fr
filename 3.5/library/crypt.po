# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:42+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/crypt.rst:2
msgid ":mod:`crypt` --- Function to check Unix passwords"
msgstr ""

#: ../Doc/library/crypt.rst:12
msgid "**Source code:** :source:`Lib/crypt.py`"
msgstr ""

#: ../Doc/library/crypt.rst:20
msgid ""
"This module implements an interface to the :manpage:`crypt(3)` routine, "
"which is a one-way hash function based upon a modified DES algorithm; see "
"the Unix man page for further details.  Possible uses include storing hashed "
"passwords so you can check passwords without storing the actual password, or "
"attempting to crack Unix passwords with a dictionary."
msgstr ""

#: ../Doc/library/crypt.rst:28
msgid ""
"Notice that the behavior of this module depends on the actual "
"implementation  of the :manpage:`crypt(3)` routine in the running system.  "
"Therefore, any extensions available on the current implementation will also  "
"be available on this module."
msgstr ""

#: ../Doc/library/crypt.rst:34
msgid "Hashing Methods"
msgstr ""

#: ../Doc/library/crypt.rst:38
msgid ""
"The :mod:`crypt` module defines the list of hashing methods (not all methods "
"are available on all platforms):"
msgstr ""

#: ../Doc/library/crypt.rst:43
msgid ""
"A Modular Crypt Format method with 16 character salt and 86 character hash.  "
"This is the strongest method."
msgstr ""

#: ../Doc/library/crypt.rst:48
msgid ""
"Another Modular Crypt Format method with 16 character salt and 43 character "
"hash."
msgstr ""

#: ../Doc/library/crypt.rst:53
msgid ""
"Another Modular Crypt Format method with 8 character salt and 22 character "
"hash."
msgstr ""

#: ../Doc/library/crypt.rst:58
msgid ""
"The traditional method with a 2 character salt and 13 characters of hash.  "
"This is the weakest method."
msgstr ""

#: ../Doc/library/crypt.rst:63
msgid "Module Attributes"
msgstr ""

#: ../Doc/library/crypt.rst:69
msgid ""
"A list of available password hashing algorithms, as ``crypt.METHOD_*`` "
"objects.  This list is sorted from strongest to weakest, and is guaranteed "
"to have at least ``crypt.METHOD_CRYPT``."
msgstr ""

#: ../Doc/library/crypt.rst:75
msgid "Module Functions"
msgstr ""

#: ../Doc/library/crypt.rst:77
msgid "The :mod:`crypt` module defines the following functions:"
msgstr ""

#: ../Doc/library/crypt.rst:81
msgid ""
"*word* will usually be a user's password as typed at a prompt or  in a "
"graphical interface.  The optional *salt* is either a string as returned "
"from :func:`mksalt`, one of the ``crypt.METHOD_*`` values (though not all "
"may be available on all platforms), or a full encrypted password including "
"salt, as returned by this function.  If *salt* is not provided, the "
"strongest method will be used (as returned by :func:`methods`."
msgstr ""

#: ../Doc/library/crypt.rst:89
msgid ""
"Checking a password is usually done by passing the plain-text password as "
"*word* and the full results of a previous :func:`crypt` call, which should "
"be the same as the results of this call."
msgstr ""

#: ../Doc/library/crypt.rst:93
msgid ""
"*salt* (either a random 2 or 16 character string, possibly prefixed with ``"
"$digit$`` to indicate the method) which will be used to perturb the "
"encryption algorithm.  The characters in *salt* must be in the set ``[./a-zA-"
"Z0-9]``, with the exception of Modular Crypt Format which prefixes a ``$digit"
"$``."
msgstr ""

#: ../Doc/library/crypt.rst:99
msgid ""
"Returns the hashed password as a string, which will be composed of "
"characters from the same alphabet as the salt."
msgstr ""

#: ../Doc/library/crypt.rst:104
msgid ""
"Since a few :manpage:`crypt(3)` extensions allow different values, with "
"different sizes in the *salt*, it is recommended to use  the full crypted "
"password as salt when checking for a password."
msgstr ""

#: ../Doc/library/crypt.rst:108
msgid "Accept ``crypt.METHOD_*`` values in addition to strings for *salt*."
msgstr ""

#: ../Doc/library/crypt.rst:114
msgid ""
"Return a randomly generated salt of the specified method.  If no *method* is "
"given, the strongest method available as returned by :func:`methods` is used."
msgstr ""

#: ../Doc/library/crypt.rst:118
msgid ""
"The return value is a string either of 2 characters in length for ``crypt."
"METHOD_CRYPT``, or 19 characters starting with ``$digit$`` and 16 random "
"characters from the set ``[./a-zA-Z0-9]``, suitable for passing as the "
"*salt* argument to :func:`crypt`."
msgstr ""

#: ../Doc/library/crypt.rst:126
msgid "Examples"
msgstr "Exemples"

#: ../Doc/library/crypt.rst:128
msgid ""
"A simple example illustrating typical use (a constant-time comparison "
"operation is needed to limit exposure to timing attacks. :func:`hmac."
"compare_digest` is suitable for this purpose)::"
msgstr ""

#: ../Doc/library/crypt.rst:148
msgid ""
"To generate a hash of a password using the strongest available method and "
"check it against the original::"
msgstr ""
