# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2015, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-12-22 00:52+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

# 1449553938de46628261f779c80009ef
#: faq/design.rst:3
msgid "Design and History FAQ"
msgstr "FAQ Histoire et Design"

# d5ff1313ef91401cb3e5fd8c30efefa6
#: faq/design.rst:6
msgid "Why does Python use indentation for grouping of statements?"
msgstr "Pourquoi Python utilise l'indentation pour grouper les instructions ?"

# fefd62ea84294096b31730f9843886e0
#: faq/design.rst:8
msgid ""
"Guido van Rossum believes that using indentation for grouping is extremely "
"elegant and contributes a lot to the clarity of the average Python program. "
"Most people learn to love this feature after a while."
msgstr ""
"Guido van Rossum pense que l'usage de l'indentation pour regrouper les blocs "
"d'instruction est élégant et contribue énormément à la clareté globale du "
"programme Python. La plupart des gens finissent par aimer cette "
"particularité au bout d'un moment."

# 5a26d246abfc4149982a653b50523a43
#: faq/design.rst:12
msgid ""
"Since there are no begin/end brackets there cannot be a disagreement between "
"grouping perceived by the parser and the human reader.  Occasionally C "
"programmers will encounter a fragment of code like this::"
msgstr ""
"Comme il n'y a pas d'accolades de début/fin, il ne peut y avoir de "
"différence entre le bloc perçu par l'analyseur syntaxique et le lecteur "
"humain. Parfois les programmeurs C pourront trouver un morceau de code comme "
"celui-ci::"

# 04777a40032e4017b4035f231092ac9d
#: faq/design.rst:21
msgid ""
"Only the ``x++`` statement is executed if the condition is true, but the "
"indentation leads you to believe otherwise.  Even experienced C programmers "
"will sometimes stare at it a long time wondering why ``y`` is being "
"decremented even for ``x > y``."
msgstr ""
"Seule l'instruction ``x++`` sera exécutée si la condition est vraie, mais "
"l'indentation pourrait vous faire penser le contraire. Mêmes des "
"développeurs C expérimentés resteront pendant un moment à se demander "
"pourquoi ``y`` est décrémenté même si ``x > y``."

# 19b33486ad2e4f01bc5e2cc61d5e4c39
#: faq/design.rst:26
msgid ""
"Because there are no begin/end brackets, Python is much less prone to coding-"
"style conflicts.  In C there are many different ways to place the braces. If "
"you're used to reading and writing code that uses one style, you will feel "
"at least slightly uneasy when reading (or being required to write) another "
"style."
msgstr ""
"Comme il n'y a pas d'accolades de début/fin, Python est moins sujet aux "
"conflits de style de code. En C, on peut placer les accolades de nombreuses "
"façons. Si vous êtes habitués à lire et écrire selon un style particulier, "
"vous pourriez vous sentir perturbé en lisant (ou en devant écrire) avec un "
"autre style."

# 4d53b7ddf53e4053b514a3fe802a88c0
#: faq/design.rst:31
msgid ""
"Many coding styles place begin/end brackets on a line by themselves.  This "
"makes programs considerably longer and wastes valuable screen space, making "
"it harder to get a good overview of a program.  Ideally, a function should "
"fit on one screen (say, 20-30 lines).  20 lines of Python can do a lot more "
"work than 20 lines of C.  This is not solely due to the lack of begin/end "
"brackets -- the lack of declarations and the high-level data types are also "
"responsible -- but the indentation-based syntax certainly helps."
msgstr ""
"Nombre de styles de programmation placent les accolades de début/fin sur une "
"ligne à part. Cela rend les sources beaucoup plus longues et fait perdre une "
"bonne partie de l'espace visible sur l'écran, rendant plus compliqué un "
"aperçu global du programme. Idéalement, une fonction doit être visible sur "
"un même écran (environ 20 ou 30 lignes). 20 lignes de Python peuvent faire "
"beaucoup plus que 20 lignes de C. Ce n'est pas seulement dû à l'absence "
"d'accolades de début/fin -- l'absence de déclarations et les types de haut-"
"niveau en sont également responsables -- mais la syntaxe basée sur "
"l'indentation y est pour beaucoup."

# d578acc09d744d86a37350e2dff14e65
#: faq/design.rst:41
msgid "Why am I getting strange results with simple arithmetic operations?"
msgstr ""
"Pourquoi ai-je d'étranges résultats suite à de simples opérations "
"arithmétiques ?"

# 77426d3070c84d6cbb2129c1e8b73def
#: faq/design.rst:43
msgid "See the next question."
msgstr "Voir la question suivante."

# 3d34a62d547a4c65aeaca681e5b69e91
#: faq/design.rst:47
msgid "Why are floating-point calculations so inaccurate?"
msgstr "Pourquoi les calculs à virgules flottantes sont si imprécis ?"

# cb5850cbdf794415b953d998857a81e3
#: faq/design.rst:49
msgid "Users are often surprised by results like this::"
msgstr "Les gens sont très souvent surpris par des résultats comme celui-ci ::"

# 4d92ba63408c4d608aa0fa189ebb70c4
#: faq/design.rst:54
msgid ""
"and think it is a bug in Python.  It's not.  This has little to do with "
"Python, and much more to do with how the underlying platform handles "
"floating-point numbers."
msgstr ""
"et pensent que c'est un bogue dans Python. Ça ne l'est pas. Ceci n'a rien à "
"voir avec Python, mais avec la manière dont la plateforme C sous-jacente "
"gère les nombres à virgule flottante et enfin, les imprécisions introduites "
"lors de l'écriture des nombres en chaînes de caractères d'un nombre fixe de "
"chiffres."

# 16e003c72b564ba9bec5d24e72581e06
#: faq/design.rst:58
msgid ""
"The :class:`float` type in CPython uses a C ``double`` for storage.  A :"
"class:`float` object's value is stored in binary floating-point with a fixed "
"precision (typically 53 bits) and Python uses C operations, which in turn "
"rely on the hardware implementation in the processor, to perform floating-"
"point operations. This means that as far as floating-point operations are "
"concerned, Python behaves like many popular languages including C and Java."
msgstr ""

# d5ead9b983c64dc49da6cd0ca7259b04
#: faq/design.rst:65
msgid ""
"Many numbers that can be written easily in decimal notation cannot be "
"expressed exactly in binary floating-point.  For example, after::"
msgstr ""

# 7764f7cbec5c46bfa75628ada89a2451
#: faq/design.rst:70
msgid ""
"the value stored for ``x`` is a (very good) approximation to the decimal "
"value ``1.2``, but is not exactly equal to it.  On a typical machine, the "
"actual stored value is::"
msgstr ""

# 311c1bfcf62c42bdb6d1586322e16110
#: faq/design.rst:76
msgid "which is exactly::"
msgstr "qui donne le résultat ::"

# 9f10112a14ad4278869fd3582e34be96
#: faq/design.rst:80
msgid ""
"The typical precision of 53 bits provides Python floats with 15-16 decimal "
"digits of accuracy."
msgstr ""

# b90b3357a25e44f982549146445c3d04
#: faq/design.rst:83
msgid ""
"For a fuller explanation, please see the :ref:`floating point arithmetic "
"<tut-fp-issues>` chapter in the Python tutorial."
msgstr ""
"Veuillez vous référer au chapitre sur :ref:`floating point arithmetic <tut-"
"fp-issues>` du tutoriel python pour de plus amples informations."

# a9c5d161b1a044ef93fee9bde7217bc1
#: faq/design.rst:88
msgid "Why are Python strings immutable?"
msgstr "Pourquoi les chaînes de caractères Python sont-elles immuable ?"

# 25bfc2db14e94ec1b7b9cca56c09558c
#: faq/design.rst:90
msgid "There are several advantages."
msgstr "Il y a plusieurs avantages."

# aa587efd7dfb4746846fe0d845483827
#: faq/design.rst:92
msgid ""
"One is performance: knowing that a string is immutable means we can allocate "
"space for it at creation time, and the storage requirements are fixed and "
"unchanging.  This is also one of the reasons for the distinction between "
"tuples and lists."
msgstr ""
"La première concerne la performance : savoir qu'une chaîne de caractères est "
"immuable signifie que l'allocation mémoire allouée lors de la création de "
"cette chaîne est fixe et figé. C'est aussi l'une des raisons pour lesquelles "
"on fait la distinction entre les tuples et les listes."

# da11edf50c7c4475b47bcbbe1ebda975
#: faq/design.rst:97
msgid ""
"Another advantage is that strings in Python are considered as \"elemental\" "
"as numbers.  No amount of activity will change the value 8 to anything else, "
"and in Python, no amount of activity will change the string \"eight\" to "
"anything else."
msgstr ""
"Un autre avantage est que les chaînes en Python sont considérées aussi "
"\"élémentaires\" que les nombres. Aucun processus ne changera la valeur du "
"nombre 8 en autre chose, et en Python, aucun processus changera la chaîne de "
"caractère \"huit\" en autre chose."

# 7d5fe1ce001440c9b13fab40e548f77c
#: faq/design.rst:105
msgid "Why must 'self' be used explicitly in method definitions and calls?"
msgstr ""
"Pourquoi \"self\" doit-il être explicitement utilisé dans les définitions et "
"les appels de méthode ?"

# 2378be76601a4ebbaeb7d1e90bf5825e
#: faq/design.rst:107
msgid ""
"The idea was borrowed from Modula-3.  It turns out to be very useful, for a "
"variety of reasons."
msgstr ""
"L'idée a été empruntée à Modula-3. Il s'avère être très utile, pour diverses "
"raisons."

# 0091be4a91cd4fbfa5b322ad4bc4024b
#: faq/design.rst:110
msgid ""
"First, it's more obvious that you are using a method or instance attribute "
"instead of a local variable.  Reading ``self.x`` or ``self.meth()`` makes it "
"absolutely clear that an instance variable or method is used even if you "
"don't know the class definition by heart.  In C++, you can sort of tell by "
"the lack of a local variable declaration (assuming globals are rare or "
"easily recognizable) -- but in Python, there are no local variable "
"declarations, so you'd have to look up the class definition to be sure.  "
"Some C++ and Java coding standards call for instance attributes to have an "
"``m_`` prefix, so this explicitness is still useful in those languages, too."
msgstr ""
"Tout d'abord, il est plus évident d'utiliser une méthode ou un attribut "
"d'instance par exemple au lieu d'une variable locale. Lire ``self.x``  ou "
"``self.meth()`` est sans ambiguité sur le fait que c'est une variable "
"d'instance ou une méthode qui est utilisée, même si vous ne connaissez pas "
"la définition de classe par cœur. En C++, vous pouvez les reconnaitre par "
"l'absence d'une déclaration de variable locale (en supposant que les "
"variables globales sont rares ou facilement reconnaissables) - mais en "
"Python, il n'y a pas de déclarations de variables locales, de sorte que vous "
"devez chercher la définition de classe pour être sûr. Certaines normes de "
"codages C++ et Java préfixent les attributs d'instance par ``m_``. Cette "
"syntaxe explicite est ainsi utile également pour ces langages."

# 1e7c276fd5124100a9d987b2604c3c36
#: faq/design.rst:120
msgid ""
"Second, it means that no special syntax is necessary if you want to "
"explicitly reference or call the method from a particular class.  In C++, if "
"you want to use a method from a base class which is overridden in a derived "
"class, you have to use the ``::`` operator -- in Python you can write "
"``baseclass.methodname(self, <argument list>)``.  This is particularly "
"useful for :meth:`__init__` methods, and in general in cases where a derived "
"class method wants to extend the base class method of the same name and thus "
"has to call the base class method somehow."
msgstr ""
"Ensuite, ça veut dire qu'aucune syntaxe spéciale n'est nécessaire si vous "
"souhaitez explicitement référencer ou appeler la méthode depuis une classe "
"en particulier. En C++, si vous utilisez la méthode d'une classe de base "
"elle-même surchargée par une classe dérivée, vous devez utiliser l'opérateur "
"``::`` -- en Python vous pouvez écrire ``baseclass.methodname(self, "
"<argument list>)``. C'est particulièrement utile pour les méthodes :meth:"
"`__init__`, et de manière générale dans les cas où une classe dérivée veut "
"étendre la méthode du même nom de la classe de base, devant ainsi appeler la "
"méthode de la classe de base d'une certaine manière."

# 19195c10fda647b5912d0feacbacd372
#: faq/design.rst:129
msgid ""
"Finally, for instance variables it solves a syntactic problem with "
"assignment: since local variables in Python are (by definition!) those "
"variables to which a value is assigned in a function body (and that aren't "
"explicitly declared global), there has to be some way to tell the "
"interpreter that an assignment was meant to assign to an instance variable "
"instead of to a local variable, and it should preferably be syntactic (for "
"efficiency reasons).  C++ does this through declarations, but Python doesn't "
"have declarations and it would be a pity having to introduce them just for "
"this purpose.  Using the explicit ``self.var`` solves this nicely.  "
"Similarly, for using instance variables, having to write ``self.var`` means "
"that references to unqualified names inside a method don't have to search "
"the instance's directories.  To put it another way, local variables and "
"instance variables live in two different namespaces, and you need to tell "
"Python which namespace to use."
msgstr ""
"Enfin, pour des variables d'instance, ça résout un problème syntactique pour "
"l'assignation : puisque les variables locales en Python sont (par "
"définition !) ces variables auxquelles les valeurs sont assignées dans le "
"corps d'une fonction (et n'étant pas déclarées explicitement globales), il "
"doit y avoir un moyen de dire à l'interpréteur qu'une assignation est censée "
"assigner une variable d'instance plutôt qu'une variable locale, et doit de "
"préférence être syntactique (pour des raisons d'efficacité). C++ fait ça au "
"travers de déclarations, mais Python n'a pas de déclarations et ça serait "
"dommage d'avoir à les introduire juste pour cette raison. Utiliser "
"explicitement ``self.var`` résout ça avec élégance. Pareillement, pour "
"utiliser des variables d'instance, avoir à écrire ``self.var`` signifie que "
"les références vers des noms non-qualifiés au sein d'une méthode n'ont pas à "
"être cherchés dans l'annuaire d'instances. En d'autres termes, les variables "
"locales et les variables d'instance vivent dans deux différents espaces de "
"noms, et vous devez dire à Python quel espace de noms utiliser."

# dff133f766f342abb37c3c5013baac7d
#: faq/design.rst:145
msgid "Why can't I use an assignment in an expression?"
msgstr "Pourquoi ne puis-je pas utiliser d'assignation dans une expression ?"

# 14e2e015012b4a2ab0f9b93a894d7d70
#: faq/design.rst:147
msgid ""
"Many people used to C or Perl complain that they want to use this C idiom:"
msgstr ""
"De nombreuses personnes habituées à C ou Perl se plaignent de vouloir "
"utiliser cet idiome C :"

# e91a38f2c8424f2eb44f6bac0e84c015
#: faq/design.rst:155
msgid "where in Python you're forced to write this::"
msgstr "où en Python vous êtes forcé à écrire ceci ::"

# 25610d053a234595b2ef044855921d20
#: faq/design.rst:163
msgid ""
"The reason for not allowing assignment in Python expressions is a common, "
"hard-to-find bug in those other languages, caused by this construct:"
msgstr ""
"La raison pour ne pas autoriser l'assignation dans les expressions en Python "
"est un bug fréquent, et difficile à trouver dans ces autres langages, causé "
"par cette construction :"

# ab19a1b7b33d459682a9ba848cc41e77
#: faq/design.rst:175
msgid ""
"The error is a simple typo: ``x = 0``, which assigns 0 to the variable "
"``x``, was written while the comparison ``x == 0`` is certainly what was "
"intended."
msgstr ""
"Cette erreur est une simple coquille : ``x = 0``, qui assigne 0 à la "
"variable ``x``, a été écrit alors que la comparaison ``x == 0`` est "
"certainement ce qui était souhaité."

# 7a49d6d6693d45129e797fb7223887f7
#: faq/design.rst:178
msgid ""
"Many alternatives have been proposed.  Most are hacks that save some typing "
"but use arbitrary or cryptic syntax or keywords, and fail the simple "
"criterion for language change proposals: it should intuitively suggest the "
"proper meaning to a human reader who has not yet been introduced to the "
"construct."
msgstr ""
"De nombreuses alternatives ont été proposées. La plupart des hacks "
"économisaient de la frappe mais utilisaient d'arbitraires ou cryptiques "
"syntaxes ou mot-clés et faillait le simple critère pour proposition de "
"changement du langage : ça doit intuitivement suggérer la bonne "
"signification au lecteur qui n'a pas encore été introduit à la construction."

# 7b8b0e3cef2e4a9f9e816e28c734384b
#: faq/design.rst:183
msgid ""
"An interesting phenomenon is that most experienced Python programmers "
"recognize the ``while True`` idiom and don't seem to be missing the "
"assignment in expression construct much; it's only newcomers who express a "
"strong desire to add this to the language."
msgstr ""
"Un phénomène intéressant est que la plupart des programmeurs Python "
"expérimentés reconnaissent l'idiome ``while True`` et ne semblent pas "
"manquer l'assignation dans la construction de l'expression; seuls les "
"nouveaux-venus expriment un fort désir d'ajouter ceci au langage."

# 89f649e679184cbdb8d603921f4dd7d1
#: faq/design.rst:188
msgid ""
"There's an alternative way of spelling this that seems attractive but is "
"generally less robust than the \"while True\" solution::"
msgstr ""
"Il y a une manière alternative de faire ça qui semble attrayante mais elle "
"est généralement moins robuste que la solution ``while True`` ::"

# 46e0fb42ca484bfbbe67f69ff4629d0c
#: faq/design.rst:196
msgid ""
"The problem with this is that if you change your mind about exactly how you "
"get the next line (e.g. you want to change it into ``sys.stdin.readline()``) "
"you have to remember to change two places in your program -- the second "
"occurrence is hidden at the bottom of the loop."
msgstr ""
"Le problème avec ceci est que si vous changez d'avis sur la manière dont "
"vous allez récupérer la prochaine ligne (ex : vous voulez changer en ``sys."
"stdin.readline()``) vous devez vous souvenir de le changer à deux endroits "
"dans votre programme -- la deuxième occurrence est cachée en bas de la "
"boucle."

# d3548a1960ef4e8c9a246a1faf1e47bb
#: faq/design.rst:201
msgid ""
"The best approach is to use iterators, making it possible to loop through "
"objects using the ``for`` statement.  For example, :term:`file objects <file "
"object>` support the iterator protocol, so you can write simply::"
msgstr ""
"La meilleur approche est d'utiliser les itérateurs, rendant possible de "
"boucler au travers d'objets en utilisant la déclaration ``for``. Par "
"exemple, dans la version actuelle de Python, les fichiers objets supportent "
"le protocole d'itérateur, vous pouvez alors simplement écrire ::"

# d2af2197bcf245dc8481af8510b46c1e
#: faq/design.rst:211
msgid ""
"Why does Python use methods for some functionality (e.g. list.index()) but "
"functions for other (e.g. len(list))?"
msgstr ""
"Pourquoi Python utilise des méthodes pour certaines fonctionnalités (ex : "
"list.index()) mais des fonctions pour d'autres (ex : len(list)) ?"

# 9448964d94bf4229be2d786e83ac5dfd
#: faq/design.rst:213
msgid ""
"The major reason is history. Functions were used for those operations that "
"were generic for a group of types and which were intended to work even for "
"objects that didn't have methods at all (e.g. tuples).  It is also "
"convenient to have a function that can readily be applied to an amorphous "
"collection of objects when you use the functional features of Python "
"(``map()``, ``zip()`` et al)."
msgstr ""
"La raison principale est historique. Les fonctions étaient utilisées pour "
"ces opérations qui étaient génériques pour un groupe de types et qui étaient "
"censés fonctionner même pour les objets qui n'avaient pas de méthodes du "
"tout (ex : tuples). C'est aussi pratique d'avoir une fonction qui s'apprête "
"bien à une collection amorphe d'objets lorsque vous utiliser les "
"fonctionnalités fonctionnelles de Python (``map()``, ``apply()`` et autres)."

# f1e4adf1ec0e454a8c67080a990cdfcb
#: faq/design.rst:219
msgid ""
"In fact, implementing ``len()``, ``max()``, ``min()`` as a built-in function "
"is actually less code than implementing them as methods for each type.  One "
"can quibble about individual cases but it's a part of Python, and it's too "
"late to make such fundamental changes now. The functions have to remain to "
"avoid massive code breakage."
msgstr ""
"En fait, implémenter ``len()``, ``max()``, ``min()`` en tant que fonction "
"intégrée produit moins de code que de les implémenter en tant que méthode "
"pour chaque type. Certains peuvent rouspéter pour des cas individuels mais "
"ça fait partie de Python et il est trop tard pour faire des changements si "
"fondamentaux maintenant. Ces fonctions doivent rester pour éviter la casse "
"massive de code."

# da42d03a20fc4d1eb123eedd22c5905e
#: faq/design.rst:229
msgid ""
"For string operations, Python has moved from external functions (the "
"``string`` module) to methods.  However, ``len()`` is still a function."
msgstr ""
"Pour les opérations de chaînes, Python a déplacé les fonctions externes (le "
"module ``string``) vers des méthodes. Cependant, ``len()`` est toujours une "
"fonction."

# 2d3c420b45be452280d2937d4e06cff7
#: faq/design.rst:234
msgid "Why is join() a string method instead of a list or tuple method?"
msgstr ""
"Pourquoi join() est une méthode de chaîne plutôt qu'une de liste ou de "
"tuple ?"

# 456c4822d9134a6db69ff18726c65dd7
#: faq/design.rst:236
msgid ""
"Strings became much more like other standard types starting in Python 1.6, "
"when methods were added which give the same functionality that has always "
"been available using the functions of the string module.  Most of these new "
"methods have been widely accepted, but the one which appears to make some "
"programmers feel uncomfortable is::"
msgstr ""
"Les chaînes sont devenues bien plus comme d'autres types standards à partir "
"de Python 1.6, lorsque les méthodes ont été ajoutées fournissant ainsi les "
"mêmes fonctionnalités que celles qui étaient déjà disponibles en utilisant "
"les fonctions du module string. La plupart de ces nouvelles méthodes ont été "
"largement acceptées, mais celle qui semble rendre certains programmeurs "
"inconfortables est ::"

# 0ed8e46bde3b4eed8924f32e2c41c5b3
#: faq/design.rst:244
msgid "which gives the result::"
msgstr "qui donne le résultat ::"

# fc4204e34d9648c4baad266b2b99c803
#: faq/design.rst:248
msgid "There are two common arguments against this usage."
msgstr "Il y a deux arguments fréquents contre cet usage."

# 1dc8a69a40644bbdb28e36d6ba2a1ffc
#: faq/design.rst:250
msgid ""
"The first runs along the lines of: \"It looks really ugly using a method of "
"a string literal (string constant)\", to which the answer is that it might, "
"but a string literal is just a fixed value. If the methods are to be allowed "
"on names bound to strings there is no logical reason to make them "
"unavailable on literals."
msgstr ""
"Le premier se caractérise par les lignes suivantes : \"C'est vraiment moche "
"d'utiliser une méthode de chaîne littérale (chaîne constante)\", à laquelle "
"la réponse est qu'il se peut, mais une chaîne littérale est juste une valeur "
"fixe. Si la méthode est autorisée sur des noms liés à des chaînes, il n'y a "
"pas de raison logique à les rendre indisponibles sur des chaînes littérales."

# 470328382fc04d4eaf4486dfc75a7202
#: faq/design.rst:256
msgid ""
"The second objection is typically cast as: \"I am really telling a sequence "
"to join its members together with a string constant\".  Sadly, you aren't.  "
"For some reason there seems to be much less difficulty with having :meth:"
"`~str.split` as a string method, since in that case it is easy to see that ::"
msgstr ""
"La deuxième objection se réfère typiquement à : \"Je suis réellement en "
"train de dire à une séquence de joindre ses membres avec une constante de "
"chaîne\". Malheureusement, vous ne l'êtes pas. Pour quelque raison, il "
"semble être bien moins difficile d'avoir :meth:`~str.split` en tant que "
"méthode de chaîne, puisque dans ce cas il est facile de voir que ::"

# b24255e43e4349219af700c6330565f8
#: faq/design.rst:263
msgid ""
"is an instruction to a string literal to return the substrings delimited by "
"the given separator (or, by default, arbitrary runs of white space)."
msgstr ""
"est une instruction à une chaîne littérale de retourner les sous-chaînes "
"délimitées par le séparateur fournit (ou, par défaut, les espaces)."

# fad16fed6df34cb49c3562e4b10821ad
#: faq/design.rst:266
msgid ""
":meth:`~str.join` is a string method because in using it you are telling the "
"separator string to iterate over a sequence of strings and insert itself "
"between adjacent elements.  This method can be used with any argument which "
"obeys the rules for sequence objects, including any new classes you might "
"define yourself. Similar methods exist for bytes and bytearray objects."
msgstr ""
":meth:`~str.join` est une méthode de chaîne parce qu'en l'utilisant vous "
"dites au séparateur de chaîne d'itérer autour d'une séquence de chaînes et "
"de s'insérer entre les éléments adjacents. Cette méthode peut être utilisée "
"avec n'importe quel argument qui obéit aux règles d'objets séquence, "
"incluant n'importe quelles nouvelles classes que vous pourriez définir vous-"
"même. Des méthodes similaires existent pour des objets bytes et bytearray."

# 292f763802c44b75921743c964d2cd26
#: faq/design.rst:274
msgid "How fast are exceptions?"
msgstr ""

# d818f0316c584a7e847eb8a94c93928e
#: faq/design.rst:276
msgid ""
"A try/except block is extremely efficient if no exceptions are raised.  "
"Actually catching an exception is expensive.  In versions of Python prior to "
"2.0 it was common to use this idiom::"
msgstr ""

# 3e88bf2f2d87450a80f0a7f5df5c7dd6
#: faq/design.rst:286
msgid ""
"This only made sense when you expected the dict to have the key almost all "
"the time.  If that wasn't the case, you coded it like this::"
msgstr ""

# b54abd5f483c4d9e8392b3ed893e9e76
#: faq/design.rst:294
msgid ""
"For this specific case, you could also use ``value = dict.setdefault(key, "
"getvalue(key))``, but only if the ``getvalue()`` call is cheap enough "
"because it is evaluated in all cases."
msgstr ""

# a10e87178b014c50a15ee86d4a9165c3
#: faq/design.rst:300
msgid "Why isn't there a switch or case statement in Python?"
msgstr ""

# 8728061ad7b1406ca042ab60e1db6caa
#: faq/design.rst:302
msgid ""
"You can do this easily enough with a sequence of ``if... elif... elif... "
"else``. There have been some proposals for switch statement syntax, but "
"there is no consensus (yet) on whether and how to do range tests.  See :pep:"
"`275` for complete details and the current status."
msgstr ""

# acffaf029bbf40f68b4adfbce5f846eb
#: faq/design.rst:307
msgid ""
"For cases where you need to choose from a very large number of "
"possibilities, you can create a dictionary mapping case values to functions "
"to call.  For example::"
msgstr ""

# 056058bdcfd647918d61a9e26856b372
#: faq/design.rst:321
msgid ""
"For calling methods on objects, you can simplify yet further by using the :"
"func:`getattr` built-in to retrieve methods with a particular name::"
msgstr ""

# 1bedbab062ae49e2b8f21ebad5d24a0c
#: faq/design.rst:333
msgid ""
"It's suggested that you use a prefix for the method names, such as "
"``visit_`` in this example.  Without such a prefix, if values are coming "
"from an untrusted source, an attacker would be able to call any method on "
"your object."
msgstr ""

# 8d700f1962754525823715e35d4d71c4
#: faq/design.rst:339
msgid ""
"Can't you emulate threads in the interpreter instead of relying on an OS-"
"specific thread implementation?"
msgstr ""

# c2576a4656224de7b31b5192beb2d23b
#: faq/design.rst:341
msgid ""
"Answer 1: Unfortunately, the interpreter pushes at least one C stack frame "
"for each Python stack frame.  Also, extensions can call back into Python at "
"almost random moments.  Therefore, a complete threads implementation "
"requires thread support for C."
msgstr ""

# ec697405ef7441dbb1cda12c917bb5d2
#: faq/design.rst:346
msgid ""
"Answer 2: Fortunately, there is `Stackless Python <http://www.stackless."
"com>`_, which has a completely redesigned interpreter loop that avoids the C "
"stack."
msgstr ""

# a2620c25f4d4484ba570136fbf1dc1a7
#: faq/design.rst:351
msgid "Why can't lambda forms contain statements?"
msgstr ""

# 354cab35dd3a4130b847387cabbec498
#: faq/design.rst:353
msgid ""
"Python lambda forms cannot contain statements because Python's syntactic "
"framework can't handle statements nested inside expressions.  However, in "
"Python, this is not a serious problem.  Unlike lambda forms in other "
"languages, where they add functionality, Python lambdas are only a shorthand "
"notation if you're too lazy to define a function."
msgstr ""

# 71841276977d45b1817cc266c4faaee4
#: faq/design.rst:359
msgid ""
"Functions are already first class objects in Python, and can be declared in "
"a local scope.  Therefore the only advantage of using a lambda form instead "
"of a locally-defined function is that you don't need to invent a name for "
"the function -- but that's just a local variable to which the function "
"object (which is exactly the same type of object that a lambda form yields) "
"is assigned!"
msgstr ""

# 0a3a0baf184e4e3daf423b9068218260
#: faq/design.rst:367
msgid "Can Python be compiled to machine code, C or some other language?"
msgstr ""

# 29b2df1050b342678a3e59e002824a8f
#: faq/design.rst:369
msgid "Practical answer:"
msgstr ""

# 8ce8cfd79bce4f208a577281bb3033a2
#: faq/design.rst:371
msgid ""
"`Cython <http://cython.org/>`_ and `Pyrex <http://www.cosc.canterbury.ac.nz/"
"~greg/python/Pyrex/>`_ compile a modified version of Python with optional "
"annotations into C extensions.  `Weave <http://www.scipy.org/Weave>`_ makes "
"it easy to intermingle Python and C code in various ways to increase "
"performance. `Nuitka <http://www.nuitka.net/>`_ is an up-and-coming compiler "
"of Python into C++ code, aiming to support the full Python language."
msgstr ""

# 6c7564f0bcd748eca1467c6a2a2f1bc7
#: faq/design.rst:378
msgid "Theoretical answer:"
msgstr ""

# 050dcc48becd40529201973fb6caf734
#: faq/design.rst:382
msgid ""
"Not trivially.  Python's high level data types, dynamic typing of objects "
"and run-time invocation of the interpreter (using :func:`eval` or :func:"
"`exec`) together mean that a naïvely \"compiled\" Python program would "
"probably consist mostly of calls into the Python run-time system, even for "
"seemingly simple operations like ``x+1``."
msgstr ""

# 191c4bdf0657420d92dac63eb197ea90
#: faq/design.rst:388
msgid ""
"Several projects described in the Python newsgroup or at past `Python "
"conferences <http://python.org/community/workshops/>`_ have shown that this "
"approach is feasible, although the speedups reached so far are only modest "
"(e.g. 2x).  Jython uses the same strategy for compiling to Java bytecode.  "
"(Jim Hugunin has demonstrated that in combination with whole-program "
"analysis, speedups of 1000x are feasible for small demo programs.  See the "
"proceedings from the `1997 Python conference <http://python.org/"
"workshops/1997-10/proceedings/>`_ for more information.)"
msgstr ""

# 47948edf67d94798adf127806ab5bfe8
#: faq/design.rst:399
msgid "How does Python manage memory?"
msgstr ""

# 0ced9be9263c40a3b9e3e766d435835b
#: faq/design.rst:401
msgid ""
"The details of Python memory management depend on the implementation.  The "
"standard implementation of Python, :term:`CPython`, uses reference counting "
"to detect inaccessible objects, and another mechanism to collect reference "
"cycles, periodically executing a cycle detection algorithm which looks for "
"inaccessible cycles and deletes the objects involved. The :mod:`gc` module "
"provides functions to perform a garbage collection, obtain debugging "
"statistics, and tune the collector's parameters."
msgstr ""

# 0f4630d3406744b18eaec6d230bccb84
#: faq/design.rst:409
msgid ""
"Other implementations (such as `Jython <http://www.jython.org>`_ or `PyPy "
"<http://www.pypy.org>`_), however, can rely on a different mechanism such as "
"a full-blown garbage collector.  This difference can cause some subtle "
"porting problems if your Python code depends on the behavior of the "
"reference counting implementation."
msgstr ""

# 948c1da593cd480488ea2dd8d3f9bec1
#: faq/design.rst:415
msgid ""
"In some Python implementations, the following code (which is fine in "
"CPython) will probably run out of file descriptors::"
msgstr ""

# 15757fcf2efc4d8783c2fa2d8e050a34
#: faq/design.rst:422
msgid ""
"Indeed, using CPython's reference counting and destructor scheme, each new "
"assignment to *f* closes the previous file.  With a traditional GC, however, "
"those file objects will only get collected (and closed) at varying and "
"possibly long intervals."
msgstr ""

# aad47797e855455ebccc3e67a5d7676c
#: faq/design.rst:427
msgid ""
"If you want to write code that will work with any Python implementation, you "
"should explicitly close the file or use the :keyword:`with` statement; this "
"will work regardless of memory management scheme::"
msgstr ""

# 7d265ff1617c412ead4adad67ea29112
#: faq/design.rst:437
msgid "Why doesn't CPython use a more traditional garbage collection scheme?"
msgstr "Pourquoi Python utilise l'indentation pour grouper les instructions ?"

# 4ce9b0a641e647d48826e27c9b9efe63
#: faq/design.rst:439
msgid ""
"For one thing, this is not a C standard feature and hence it's not portable. "
"(Yes, we know about the Boehm GC library.  It has bits of assembler code for "
"*most* common platforms, not for all of them, and although it is mostly "
"transparent, it isn't completely transparent; patches are required to get "
"Python to work with it.)"
msgstr ""

# f21ac5ef599e49b3adfa9c6a238a2070
#: faq/design.rst:445
msgid ""
"Traditional GC also becomes a problem when Python is embedded into other "
"applications.  While in a standalone Python it's fine to replace the "
"standard malloc() and free() with versions provided by the GC library, an "
"application embedding Python may want to have its *own* substitute for "
"malloc() and free(), and may not want Python's.  Right now, CPython works "
"with anything that implements malloc() and free() properly."
msgstr ""

# c075821e02904f5c83d843f0f48ad03f
#: faq/design.rst:454
msgid "Why isn't all memory freed when CPython exits?"
msgstr ""

# 9f4b26f16dee47f8aea6bd3290915a19
#: faq/design.rst:456
msgid ""
"Objects referenced from the global namespaces of Python modules are not "
"always deallocated when Python exits.  This may happen if there are circular "
"references.  There are also certain bits of memory that are allocated by the "
"C library that are impossible to free (e.g. a tool like Purify will complain "
"about these).  Python is, however, aggressive about cleaning up memory on "
"exit and does try to destroy every single object."
msgstr ""

# 2b354ceed3884097a4c25e6cb1b34b3b
#: faq/design.rst:463
msgid ""
"If you want to force Python to delete certain things on deallocation use "
"the :mod:`atexit` module to run a function that will force those deletions."
msgstr ""

# 6507d54058b24c6bbcc39dc16bfbf2e0
#: faq/design.rst:468
msgid "Why are there separate tuple and list data types?"
msgstr ""

# b78d0b42070244c58893c0fea8821679
#: faq/design.rst:470
msgid ""
"Lists and tuples, while similar in many respects, are generally used in "
"fundamentally different ways.  Tuples can be thought of as being similar to "
"Pascal records or C structs; they're small collections of related data which "
"may be of different types which are operated on as a group.  For example, a "
"Cartesian coordinate is appropriately represented as a tuple of two or three "
"numbers."
msgstr ""

# 4f6067a703854f93ba041e23b83867b5
#: faq/design.rst:477
msgid ""
"Lists, on the other hand, are more like arrays in other languages.  They "
"tend to hold a varying number of objects all of which have the same type and "
"which are operated on one-by-one.  For example, ``os.listdir('.')`` returns "
"a list of strings representing the files in the current directory.  "
"Functions which operate on this output would generally not break if you "
"added another file or two to the directory."
msgstr ""

# a65aa8e0225342a1b3c2b57f6e752058
#: faq/design.rst:484
msgid ""
"Tuples are immutable, meaning that once a tuple has been created, you can't "
"replace any of its elements with a new value.  Lists are mutable, meaning "
"that you can always change a list's elements.  Only immutable elements can "
"be used as dictionary keys, and hence only tuples and not lists can be used "
"as keys."
msgstr ""

# 62628e28f1e34c5bb46e5117d8e70b1a
#: faq/design.rst:491
msgid "How are lists implemented?"
msgstr ""

# 129035a24fd3406187941021d3395cd2
#: faq/design.rst:493
msgid ""
"Python's lists are really variable-length arrays, not Lisp-style linked "
"lists. The implementation uses a contiguous array of references to other "
"objects, and keeps a pointer to this array and the array's length in a list "
"head structure."
msgstr ""

# 6c5475551e4b4f449217741b131bcb9d
#: faq/design.rst:497
msgid ""
"This makes indexing a list ``a[i]`` an operation whose cost is independent "
"of the size of the list or the value of the index."
msgstr ""

# d1bc9bc719ea4b1ab08fac7dcdb37ba1
#: faq/design.rst:500
msgid ""
"When items are appended or inserted, the array of references is resized.  "
"Some cleverness is applied to improve the performance of appending items "
"repeatedly; when the array must be grown, some extra space is allocated so "
"the next few times don't require an actual resize."
msgstr ""

# 36df2f725ee6444992ac088b02d75eff
#: faq/design.rst:507
msgid "How are dictionaries implemented?"
msgstr ""

# d102180697d44e27a891a1339734b179
#: faq/design.rst:509
msgid ""
"Python's dictionaries are implemented as resizable hash tables.  Compared to "
"B-trees, this gives better performance for lookup (the most common operation "
"by far) under most circumstances, and the implementation is simpler."
msgstr ""

# cd2409f902d24032bb4bfc68e067aec1
#: faq/design.rst:513
msgid ""
"Dictionaries work by computing a hash code for each key stored in the "
"dictionary using the :func:`hash` built-in function.  The hash code varies "
"widely depending on the key; for example, \"Python\" hashes to -539294296 "
"while \"python\", a string that differs by a single bit, hashes to "
"1142331976.  The hash code is then used to calculate a location in an "
"internal array where the value will be stored. Assuming that you're storing "
"keys that all have different hash values, this means that dictionaries take "
"constant time -- O(1), in computer science notation -- to retrieve a key.  "
"It also means that no sorted order of the keys is maintained, and traversing "
"the array as the ``.keys()`` and ``.items()`` do will output the "
"dictionary's content in some arbitrary jumbled order."
msgstr ""

# 79cc6f81903f450c99108281b768f6aa
#: faq/design.rst:526
msgid "Why must dictionary keys be immutable?"
msgstr ""

# 59ae0c2022d143f7a11f2a5dc99e378b
#: faq/design.rst:528
msgid ""
"The hash table implementation of dictionaries uses a hash value calculated "
"from the key value to find the key.  If the key were a mutable object, its "
"value could change, and thus its hash could also change.  But since whoever "
"changes the key object can't tell that it was being used as a dictionary "
"key, it can't move the entry around in the dictionary.  Then, when you try "
"to look up the same object in the dictionary it won't be found because its "
"hash value is different. If you tried to look up the old value it wouldn't "
"be found either, because the value of the object found in that hash bin "
"would be different."
msgstr ""

# 630683a59c3046468c586b01584843a3
#: faq/design.rst:537
msgid ""
"If you want a dictionary indexed with a list, simply convert the list to a "
"tuple first; the function ``tuple(L)`` creates a tuple with the same entries "
"as the list ``L``.  Tuples are immutable and can therefore be used as "
"dictionary keys."
msgstr ""

# 9679decd334a42b7b9d84c9f691b6403
#: faq/design.rst:541
msgid "Some unacceptable solutions that have been proposed:"
msgstr ""

# 9695c1ea8266482299996abae781d987
#: faq/design.rst:543
msgid ""
"Hash lists by their address (object ID).  This doesn't work because if you "
"construct a new list with the same value it won't be found; e.g.::"
msgstr ""

# a795e7866ebb4478b9b6e3b0803f2adc
#: faq/design.rst:549
msgid ""
"would raise a KeyError exception because the id of the ``[1, 2]`` used in "
"the second line differs from that in the first line.  In other words, "
"dictionary keys should be compared using ``==``, not using :keyword:`is`."
msgstr ""

# 8e79d4d940e745c084cb6883a741d68b
#: faq/design.rst:553
msgid ""
"Make a copy when using a list as a key.  This doesn't work because the list, "
"being a mutable object, could contain a reference to itself, and then the "
"copying code would run into an infinite loop."
msgstr ""

# b61a9f7b40a54882b26bf22372f0ed25
#: faq/design.rst:557
msgid ""
"Allow lists as keys but tell the user not to modify them.  This would allow "
"a class of hard-to-track bugs in programs when you forgot or modified a list "
"by accident. It also invalidates an important invariant of dictionaries: "
"every value in ``d.keys()`` is usable as a key of the dictionary."
msgstr ""

# a2122701ccf64f68a2e3c6a3dc2b363a
#: faq/design.rst:562
msgid ""
"Mark lists as read-only once they are used as a dictionary key.  The problem "
"is that it's not just the top-level object that could change its value; you "
"could use a tuple containing a list as a key.  Entering anything as a key "
"into a dictionary would require marking all objects reachable from there as "
"read-only -- and again, self-referential objects could cause an infinite "
"loop."
msgstr ""

# 94f170a77d5144b8b555887bf947c5b4
#: faq/design.rst:568
msgid ""
"There is a trick to get around this if you need to, but use it at your own "
"risk: You can wrap a mutable structure inside a class instance which has "
"both a :meth:`__eq__` and a :meth:`__hash__` method.  You must then make "
"sure that the hash value for all such wrapper objects that reside in a "
"dictionary (or other hash based structure), remain fixed while the object is "
"in the dictionary (or other structure). ::"
msgstr ""

# 679bd672cfe846de8710ca8f5b3a9462
#: faq/design.rst:590
msgid ""
"Note that the hash computation is complicated by the possibility that some "
"members of the list may be unhashable and also by the possibility of "
"arithmetic overflow."
msgstr ""

# 4e65600943184e7fab43110e7260b8ef
#: faq/design.rst:594
msgid ""
"Furthermore it must always be the case that if ``o1 == o2`` (ie ``o1."
"__eq__(o2) is True``) then ``hash(o1) == hash(o2)`` (ie, ``o1.__hash__() == "
"o2.__hash__()``), regardless of whether the object is in a dictionary or "
"not.  If you fail to meet these restrictions dictionaries and other hash "
"based structures will misbehave."
msgstr ""

# 4e831cbe14b94316a2cd5538431f6b13
#: faq/design.rst:599
msgid ""
"In the case of ListWrapper, whenever the wrapper object is in a dictionary "
"the wrapped list must not change to avoid anomalies.  Don't do this unless "
"you are prepared to think hard about the requirements and the consequences "
"of not meeting them correctly.  Consider yourself warned."
msgstr ""

# 7e2e253e761c4befa3d478277dd1c8ba
#: faq/design.rst:606
msgid "Why doesn't list.sort() return the sorted list?"
msgstr ""

# a65585e7627740aa88f22eef823f2421
#: faq/design.rst:608
msgid ""
"In situations where performance matters, making a copy of the list just to "
"sort it would be wasteful. Therefore, :meth:`list.sort` sorts the list in "
"place. In order to remind you of that fact, it does not return the sorted "
"list.  This way, you won't be fooled into accidentally overwriting a list "
"when you need a sorted copy but also need to keep the unsorted version "
"around."
msgstr ""

# c9c5465af99d4f19ae0dd5f5e3697da9
#: faq/design.rst:614
msgid ""
"If you want to return a new list, use the built-in :func:`sorted` function "
"instead.  This function creates a new list from a provided iterable, sorts "
"it and returns it.  For example, here's how to iterate over the keys of a "
"dictionary in sorted order::"
msgstr ""

# 371c078927724115be074df534a5e9b6
#: faq/design.rst:624
msgid "How do you specify and enforce an interface spec in Python?"
msgstr ""

# c9594d2fed584b0abb397b7ab9f65a9d
#: faq/design.rst:626
msgid ""
"An interface specification for a module as provided by languages such as C++ "
"and Java describes the prototypes for the methods and functions of the "
"module.  Many feel that compile-time enforcement of interface specifications "
"helps in the construction of large programs."
msgstr ""

# 348be594eb1149cd8c0942105f367f06
#: faq/design.rst:631
msgid ""
"Python 2.6 adds an :mod:`abc` module that lets you define Abstract Base "
"Classes (ABCs).  You can then use :func:`isinstance` and :func:`issubclass` "
"to check whether an instance or a class implements a particular ABC.  The :"
"mod:`collections` module defines a set of useful ABCs such as :class:"
"`Iterable`, :class:`Container`, and :class:`MutableMapping`."
msgstr ""

# e447f7b790174414a145e4f57e8e8797
#: faq/design.rst:637
msgid ""
"For Python, many of the advantages of interface specifications can be "
"obtained by an appropriate test discipline for components.  There is also a "
"tool, PyChecker, which can be used to find problems due to subclassing."
msgstr ""

# 568c917e64e64d40a5f933c765b983ca
#: faq/design.rst:641
msgid ""
"A good test suite for a module can both provide a regression test and serve "
"as a module interface specification and a set of examples.  Many Python "
"modules can be run as a script to provide a simple \"self test.\"  Even "
"modules which use complex external interfaces can often be tested in "
"isolation using trivial \"stub\" emulations of the external interface.  The :"
"mod:`doctest` and :mod:`unittest` modules or third-party test frameworks can "
"be used to construct exhaustive test suites that exercise every line of code "
"in a module."
msgstr ""

# c07d67c1daf54817859077c522d61aa1
#: faq/design.rst:649
msgid ""
"An appropriate testing discipline can help build large complex applications "
"in Python as well as having interface specifications would.  In fact, it can "
"be better because an interface specification cannot test certain properties "
"of a program.  For example, the :meth:`append` method is expected to add new "
"elements to the end of some internal list; an interface specification cannot "
"test that your :meth:`append` implementation will actually do this "
"correctly, but it's trivial to check this property in a test suite."
msgstr ""

# bb93d63c705f4ab79492e7b9dd5b7155
#: faq/design.rst:657
msgid ""
"Writing test suites is very helpful, and you might want to design your code "
"with an eye to making it easily tested.  One increasingly popular technique, "
"test-directed development, calls for writing parts of the test suite first, "
"before you write any of the actual code.  Of course Python allows you to be "
"sloppy and not write test cases at all."
msgstr ""

# ebb6d527ebf84dd38fb784934e42e0b9
#: faq/design.rst:665
msgid "Why are default values shared between objects?"
msgstr ""

# 2a923b3296e8464ab9010c21316726c5
#: faq/design.rst:667
msgid ""
"This type of bug commonly bites neophyte programmers.  Consider this "
"function::"
msgstr ""

# 809f92dad4b8408ea9641cefed2af5a1
#: faq/design.rst:674
msgid ""
"The first time you call this function, ``mydict`` contains a single item.  "
"The second time, ``mydict`` contains two items because when ``foo()`` begins "
"executing, ``mydict`` starts out with an item already in it."
msgstr ""

# 9386ad81a7e24bfeb593520bd6d04b09
#: faq/design.rst:678
msgid ""
"It is often expected that a function call creates new objects for default "
"values. This is not what happens. Default values are created exactly once, "
"when the function is defined.  If that object is changed, like the "
"dictionary in this example, subsequent calls to the function will refer to "
"this changed object."
msgstr ""

# 6068e30c7954471586705d9adf8a335a
#: faq/design.rst:683
msgid ""
"By definition, immutable objects such as numbers, strings, tuples, and "
"``None``, are safe from change. Changes to mutable objects such as "
"dictionaries, lists, and class instances can lead to confusion."
msgstr ""

# 80d449e955df41549ad11d3b88dc4075
#: faq/design.rst:687
msgid ""
"Because of this feature, it is good programming practice to not use mutable "
"objects as default values.  Instead, use ``None`` as the default value and "
"inside the function, check if the parameter is ``None`` and create a new "
"list/dictionary/whatever if it is.  For example, don't write::"
msgstr ""

# 0aca63ac2c614ae2a1d3e2f428d96913
#: faq/design.rst:695
msgid "but::"
msgstr ""

# 7b33bdb562eb4950a7ef7cd2be29c2ef
#: faq/design.rst:701
msgid ""
"This feature can be useful.  When you have a function that's time-consuming "
"to compute, a common technique is to cache the parameters and the resulting "
"value of each call to the function, and return the cached value if the same "
"value is requested again.  This is called \"memoizing\", and can be "
"implemented like this::"
msgstr ""

# 6634fe2f5076466d893f0f1eb97e4fa1
#: faq/design.rst:716
msgid ""
"You could use a global variable containing a dictionary instead of the "
"default value; it's a matter of taste."
msgstr ""

# 0b1486ea8e2d4b8fa8e85bc1bb274ae6
#: faq/design.rst:721
msgid "Why is there no goto?"
msgstr ""

# ea70435280d34940a705632b43adba57
#: faq/design.rst:723
msgid ""
"You can use exceptions to provide a \"structured goto\" that even works "
"across function calls.  Many feel that exceptions can conveniently emulate "
"all reasonable uses of the \"go\" or \"goto\" constructs of C, Fortran, and "
"other languages.  For example::"
msgstr ""

# e2a5d1827a9349d0b591f790b61ec1f7
#: faq/design.rst:738
msgid ""
"This doesn't allow you to jump into the middle of a loop, but that's usually "
"considered an abuse of goto anyway.  Use sparingly."
msgstr ""

# 0f2ff1a5154e41f39a8ff57cec5561fa
#: faq/design.rst:743
msgid "Why can't raw strings (r-strings) end with a backslash?"
msgstr ""

# 87565ee1f05d472a84a6ec0cf6b47b87
#: faq/design.rst:745
msgid ""
"More precisely, they can't end with an odd number of backslashes: the "
"unpaired backslash at the end escapes the closing quote character, leaving "
"an unterminated string."
msgstr ""

# 4c19f1a351f844ca8ac4aaff444b4f6e
#: faq/design.rst:749
msgid ""
"Raw strings were designed to ease creating input for processors (chiefly "
"regular expression engines) that want to do their own backslash escape "
"processing. Such processors consider an unmatched trailing backslash to be "
"an error anyway, so raw strings disallow that.  In return, they allow you to "
"pass on the string quote character by escaping it with a backslash.  These "
"rules work well when r-strings are used for their intended purpose."
msgstr ""

# 97ab4014c2d54f9d88760704c00b38a8
#: faq/design.rst:756
msgid ""
"If you're trying to build Windows pathnames, note that all Windows system "
"calls accept forward slashes too::"
msgstr ""

# 57825404b75344ffb421e307cb5ca775
#: faq/design.rst:761
msgid ""
"If you're trying to build a pathname for a DOS command, try e.g. one of ::"
msgstr ""

# e85b2ba26d1a4a77b71dbc4e1ddb24d5
#: faq/design.rst:769
msgid "Why doesn't Python have a \"with\" statement for attribute assignments?"
msgstr ""

# e6105e8ca26a4e5299a66a364be6e0ca
#: faq/design.rst:771
msgid ""
"Python has a 'with' statement that wraps the execution of a block, calling "
"code on the entrance and exit from the block.  Some language have a "
"construct that looks like this::"
msgstr ""

# 0e18a2191f8f4d35b3c4b307db0a9ac7
#: faq/design.rst:779
msgid "In Python, such a construct would be ambiguous."
msgstr ""

# fa07f338b1984f9fa5132cc6ab70ba24
#: faq/design.rst:781
msgid ""
"Other languages, such as Object Pascal, Delphi, and C++, use static types, "
"so it's possible to know, in an unambiguous way, what member is being "
"assigned to. This is the main point of static typing -- the compiler "
"*always* knows the scope of every variable at compile time."
msgstr ""

# 1e73f2d47d104599993d639db8198fcb
#: faq/design.rst:786
msgid ""
"Python uses dynamic types. It is impossible to know in advance which "
"attribute will be referenced at runtime. Member attributes may be added or "
"removed from objects on the fly. This makes it impossible to know, from a "
"simple reading, what attribute is being referenced: a local one, a global "
"one, or a member attribute?"
msgstr ""

# b6e916642d7e44cebd7e1553eccc2312
#: faq/design.rst:792
msgid "For instance, take the following incomplete snippet::"
msgstr ""

# 4cfabcdff582402a8f952512f2226acc
#: faq/design.rst:798
msgid ""
"The snippet assumes that \"a\" must have a member attribute called \"x\".  "
"However, there is nothing in Python that tells the interpreter this. What "
"should happen if \"a\" is, let us say, an integer?  If there is a global "
"variable named \"x\", will it be used inside the with block?  As you see, "
"the dynamic nature of Python makes such choices much harder."
msgstr ""

# 1080e94fc42947c397b6917c7e03c50b
#: faq/design.rst:804
msgid ""
"The primary benefit of \"with\" and similar language features (reduction of "
"code volume) can, however, easily be achieved in Python by assignment.  "
"Instead of::"
msgstr ""

# 104d253c05f84f568bc5e455e85476b0
#: faq/design.rst:811
msgid "write this::"
msgstr ""

# 01dee2c99a254e33a3ae8111219d2a7e
#: faq/design.rst:818
msgid ""
"This also has the side-effect of increasing execution speed because name "
"bindings are resolved at run-time in Python, and the second version only "
"needs to perform the resolution once."
msgstr ""

# 623b5613d5884b5baea3851c9e273679
#: faq/design.rst:824
msgid "Why are colons required for the if/while/def/class statements?"
msgstr ""

# d0f8e7a5066642aa89d5d36a0f1e9b88
#: faq/design.rst:826
msgid ""
"The colon is required primarily to enhance readability (one of the results "
"of the experimental ABC language).  Consider this::"
msgstr ""

# 717013a0c9cd4f25a68a81b0f4aa1146
#: faq/design.rst:832
msgid "versus ::"
msgstr ""

# 0b8ea5465fd94959926e5f0212666fda
#: faq/design.rst:837
msgid ""
"Notice how the second one is slightly easier to read.  Notice further how a "
"colon sets off the example in this FAQ answer; it's a standard usage in "
"English."
msgstr ""

# 5d3d269db3f24eda8ae91a2f1d5bc4df
#: faq/design.rst:840
msgid ""
"Another minor reason is that the colon makes it easier for editors with "
"syntax highlighting; they can look for colons to decide when indentation "
"needs to be increased instead of having to do a more elaborate parsing of "
"the program text."
msgstr ""

# e9e2fee1d5bb4f80938328455051a9df
#: faq/design.rst:846
msgid "Why does Python allow commas at the end of lists and tuples?"
msgstr ""

# 60b6b7bcc9274cda99563612b6b7c316
#: faq/design.rst:848
msgid ""
"Python lets you add a trailing comma at the end of lists, tuples, and "
"dictionaries::"
msgstr ""

# 7efc9f64d5f94b8aa9031716eea6b56d
#: faq/design.rst:859
msgid "There are several reasons to allow this."
msgstr ""

# 7c2a341a5b42460b85d63548b5ae759b
#: faq/design.rst:861
msgid ""
"When you have a literal value for a list, tuple, or dictionary spread across "
"multiple lines, it's easier to add more elements because you don't have to "
"remember to add a comma to the previous line.  The lines can also be sorted "
"in your editor without creating a syntax error."
msgstr ""

# d001d8ece66e47b5a8cd7f4e6200d212
#: faq/design.rst:866
msgid ""
"Accidentally omitting the comma can lead to errors that are hard to "
"diagnose. For example::"
msgstr ""

# a68291c57ac0472289a354f10c14e6e5
#: faq/design.rst:876
msgid ""
"This list looks like it has four elements, but it actually contains three: "
"\"fee\", \"fiefoo\" and \"fum\".  Always adding the comma avoids this source "
"of error."
msgstr ""

# bf9679c2cb6d498f89783a7cfcf1112b
#: faq/design.rst:879
msgid ""
"Allowing the trailing comma may also make programmatic code generation "
"easier."
msgstr ""

# 887dfcd2bf4a44cdba1f5e6897180ab8
#: faq/extending.rst:3
msgid "Extending/Embedding FAQ"
msgstr ""

#: faq/extending.rst:0 faq/general.rst:0 faq/gui.rst:0 faq/library.rst:0
#: faq/programming.rst:0 faq/windows.rst:0
msgid "Contents"
msgstr ""

# 9415118080b34c9cab664276a23ef164
#: faq/extending.rst:14
msgid "Can I create my own functions in C?"
msgstr ""

# 63f4f8eac1244147b07d7c28c6d48805
#: faq/extending.rst:16
msgid ""
"Yes, you can create built-in modules containing functions, variables, "
"exceptions and even new types in C.  This is explained in the document :ref:"
"`extending-index`."
msgstr ""

# 778c694d36b94606b63309ed020ccbf4
#: faq/extending.rst:20
msgid "Most intermediate or advanced Python books will also cover this topic."
msgstr ""

# 738438181a2341729ac9e4ea83707cdf
#: faq/extending.rst:24
msgid "Can I create my own functions in C++?"
msgstr ""

# b42b7fe661bf4fd4b484ec67359ac940
#: faq/extending.rst:26
msgid ""
"Yes, using the C compatibility features found in C++.  Place ``extern \"C"
"\" { ... }`` around the Python include files and put ``extern \"C\"`` before "
"each function that is going to be called by the Python interpreter.  Global "
"or static C++ objects with constructors are probably not a good idea."
msgstr ""

# cf2eeec94fa24b1aaa31c1ea4a14cbb7
#: faq/extending.rst:35
msgid "Writing C is hard; are there any alternatives?"
msgstr ""

# 2e91b475d00d4b938c78d861a3a53fc1
#: faq/extending.rst:37
msgid ""
"There are a number of alternatives to writing your own C extensions, "
"depending on what you're trying to do."
msgstr ""

# baa35def6e5147f09eb9cc041c7c96e7
#: faq/extending.rst:42
msgid ""
"`Cython <http://cython.org>`_ and its relative `Pyrex <http://www.cosc."
"canterbury.ac.nz/~greg/python/Pyrex/>`_ are compilers that accept a slightly "
"modified form of Python and generate the corresponding C code.  Cython and "
"Pyrex make it possible to write an extension without having to learn "
"Python's C API."
msgstr ""

# 38d76409e1174c26bd3c73cdb8965f67
#: faq/extending.rst:48
msgid ""
"If you need to interface to some C or C++ library for which no Python "
"extension currently exists, you can try wrapping the library's data types "
"and functions with a tool such as `SWIG <http://www.swig.org>`_.  `SIP "
"<http://www.riverbankcomputing.co.uk/software/sip/>`__, `CXX <http://cxx."
"sourceforge.net/>`_ `Boost <http://www.boost.org/libs/python/doc/index."
"html>`_, or `Weave <http://www.scipy.org/Weave>`_ are also alternatives for "
"wrapping C++ libraries."
msgstr ""

# 92cc38e964644290b9c976957a4a101d
#: faq/extending.rst:59
msgid "How can I execute arbitrary Python statements from C?"
msgstr ""

# 5e3a254000504df189a388e53eaeefab
#: faq/extending.rst:61
msgid ""
"The highest-level function to do this is :c:func:`PyRun_SimpleString` which "
"takes a single string argument to be executed in the context of the module "
"``__main__`` and returns 0 for success and -1 when an exception occurred "
"(including ``SyntaxError``).  If you want more control, use :c:func:"
"`PyRun_String`; see the source for :c:func:`PyRun_SimpleString` in ``Python/"
"pythonrun.c``."
msgstr ""

# ffd03669e8974349bb6fa6a20b4a65b9
#: faq/extending.rst:70
msgid "How can I evaluate an arbitrary Python expression from C?"
msgstr ""

# 7f4432c276bb4bbba46a408cf618ae02
#: faq/extending.rst:72
msgid ""
"Call the function :c:func:`PyRun_String` from the previous question with the "
"start symbol :c:data:`Py_eval_input`; it parses an expression, evaluates it "
"and returns its value."
msgstr ""

# 61fa8e369dc04af4903114422429014c
#: faq/extending.rst:78
msgid "How do I extract C values from a Python object?"
msgstr ""

# 46f6644aeced4ff0a2bf879dc0c37c9f
#: faq/extending.rst:80
msgid ""
"That depends on the object's type.  If it's a tuple, :c:func:`PyTuple_Size` "
"returns its length and :c:func:`PyTuple_GetItem` returns the item at a "
"specified index.  Lists have similar functions, :c:func:`PyListSize` and :c:"
"func:`PyList_GetItem`."
msgstr ""

# 2b4652bd6c7345f18ad6afd721bef4fb
#: faq/extending.rst:85
msgid ""
"For bytes, :c:func:`PyBytes_Size` returns its length and :c:func:"
"`PyBytes_AsStringAndSize` provides a pointer to its value and its length.  "
"Note that Python bytes objects may contain null bytes so C's :c:func:"
"`strlen` should not be used."
msgstr ""

# 6a2fcc982cc64afb9f0a3880c4f6726c
#: faq/extending.rst:90
msgid ""
"To test the type of an object, first make sure it isn't *NULL*, and then "
"use :c:func:`PyBytes_Check`, :c:func:`PyTuple_Check`, :c:func:"
"`PyList_Check`, etc."
msgstr ""

# 5c53c0a4f36747d5b78aa62d0b8ae38e
#: faq/extending.rst:93
msgid ""
"There is also a high-level API to Python objects which is provided by the so-"
"called 'abstract' interface -- read ``Include/abstract.h`` for further "
"details.  It allows interfacing with any kind of Python sequence using calls "
"like :c:func:`PySequence_Length`, :c:func:`PySequence_GetItem`, etc.) as "
"well as many other useful protocols such as numbers (:c:func:"
"`PyNumber_Index` et. al.) and mappings in the PyMapping APIs."
msgstr ""

# 74279fbcd2a64fc2b12f6ec81e6d3195
#: faq/extending.rst:102
msgid "How do I use Py_BuildValue() to create a tuple of arbitrary length?"
msgstr ""

# 292f60ff324f45e09c38d6961fe79f8a
#: faq/extending.rst:104
msgid "You can't.  Use :c:func:`PyTuple_Pack` instead."
msgstr ""

# 5378452a36d04833972aa7ba2cb98f37
#: faq/extending.rst:108
msgid "How do I call an object's method from C?"
msgstr ""

# ec4db5e5be3b4075a8d3a580c59031a0
#: faq/extending.rst:110
msgid ""
"The :c:func:`PyObject_CallMethod` function can be used to call an arbitrary "
"method of an object.  The parameters are the object, the name of the method "
"to call, a format string like that used with :c:func:`Py_BuildValue`, and "
"the argument values::"
msgstr ""

# 5eaf86a6550b41328d504d1a020ac310
#: faq/extending.rst:119
msgid ""
"This works for any object that has methods -- whether built-in or user-"
"defined. You are responsible for eventually :c:func:`Py_DECREF`\\ 'ing the "
"return value."
msgstr ""

# 32f1d1663dc74bbcbca343d3000a05c1
#: faq/extending.rst:122
msgid ""
"To call, e.g., a file object's \"seek\" method with arguments 10, 0 "
"(assuming the file object pointer is \"f\")::"
msgstr ""

# be14be72ffba4296a1c5705925f0be1c
#: faq/extending.rst:133
msgid ""
"Note that since :c:func:`PyObject_CallObject` *always* wants a tuple for the "
"argument list, to call a function without arguments, pass \"()\" for the "
"format, and to call a function with one argument, surround the argument in "
"parentheses, e.g. \"(i)\"."
msgstr ""

# 456fc2c22c8041a4a022991aac17a2b5
#: faq/extending.rst:140
msgid ""
"How do I catch the output from PyErr_Print() (or anything that prints to "
"stdout/stderr)?"
msgstr ""

# 9ae4de2d7da64b8695aceb4fa27ba464
#: faq/extending.rst:142
msgid ""
"In Python code, define an object that supports the ``write()`` method.  "
"Assign this object to :data:`sys.stdout` and :data:`sys.stderr`.  Call "
"print_error, or just allow the standard traceback mechanism to work. Then, "
"the output will go wherever your ``write()`` method sends it."
msgstr ""

# fa019371c2ce4743946731b26c2f1fdd
#: faq/extending.rst:147
msgid "The easiest way to do this is to use the :class:`io.StringIO` class::"
msgstr ""

# 7968d1b77d494e969b99cc1f0d78df8a
#: faq/extending.rst:157
msgid "A custom object to do the same would look like this::"
msgstr ""

# 7435a0a7acdc4392a5a4fd3a3c37211f
#: faq/extending.rst:176
msgid "How do I access a module written in Python from C?"
msgstr ""

# b29c88f1b37a4a7e83249b923113f1ac
#: faq/extending.rst:178
msgid "You can get a pointer to the module object as follows::"
msgstr ""

# 74ceb4bf9ab14b888406c56b3d25d855
#: faq/extending.rst:182
msgid ""
"If the module hasn't been imported yet (i.e. it is not yet present in :data:"
"`sys.modules`), this initializes the module; otherwise it simply returns the "
"value of ``sys.modules[\"<modulename>\"]``.  Note that it doesn't enter the "
"module into any namespace -- it only ensures it has been initialized and is "
"stored in :data:`sys.modules`."
msgstr ""

# 45e016a8dcba4cf786c90e094c0ddc53
#: faq/extending.rst:188
msgid ""
"You can then access the module's attributes (i.e. any name defined in the "
"module) as follows::"
msgstr ""

# 2c00498567f1460a8a7ec0fe39790618
#: faq/extending.rst:193
msgid ""
"Calling :c:func:`PyObject_SetAttrString` to assign to variables in the "
"module also works."
msgstr ""

# d380f05f643e43d285f53e8f5e8b4a67
#: faq/extending.rst:198
msgid "How do I interface to C++ objects from Python?"
msgstr ""

# 176cb95f820144699b8922d8ec416b41
#: faq/extending.rst:200
msgid ""
"Depending on your requirements, there are many approaches.  To do this "
"manually, begin by reading :ref:`the \"Extending and Embedding\" document "
"<extending-index>`.  Realize that for the Python run-time system, there "
"isn't a whole lot of difference between C and C++ -- so the strategy of "
"building a new Python type around a C structure (pointer) type will also "
"work for C++ objects."
msgstr ""

# 7ea482bb81f542f4b5a3ad6ee38d354a
#: faq/extending.rst:206
msgid "For C++ libraries, see :ref:`c-wrapper-software`."
msgstr ""

# 2518be782a644e7aaebbfe2b3f09de81
#: faq/extending.rst:210
msgid "I added a module using the Setup file and the make fails; why?"
msgstr ""

# e51831ec4d2f4e1cb12b7fffae686bff
#: faq/extending.rst:212
msgid ""
"Setup must end in a newline, if there is no newline there, the build process "
"fails.  (Fixing this requires some ugly shell script hackery, and this bug "
"is so minor that it doesn't seem worth the effort.)"
msgstr ""

# 705b3c39810e46f79d5f56440f36357c
#: faq/extending.rst:218
msgid "How do I debug an extension?"
msgstr ""

# 5a73072225d4452b9d31220f46eb27f0
#: faq/extending.rst:220
msgid ""
"When using GDB with dynamically loaded extensions, you can't set a "
"breakpoint in your extension until your extension is loaded."
msgstr ""

# 5f5a789b3e5f4cddbaf93e6b52a03baa
#: faq/extending.rst:223
msgid "In your ``.gdbinit`` file (or interactively), add the command::"
msgstr ""

# 81c9f937d3ba4ba7b4f1054f9e3cf645
#: faq/extending.rst:227
msgid "Then, when you run GDB::"
msgstr ""

# be2abe1294fc4d82a282768e9cdc464e
#: faq/extending.rst:237
msgid ""
"I want to compile a Python module on my Linux system, but some files are "
"missing. Why?"
msgstr ""

# ccb066cb7d59407284ba2124d6a7e5f4
#: faq/extending.rst:239
msgid ""
"Most packaged versions of Python don't include the :file:`/usr/lib/python2."
"{x}/config/` directory, which contains various files required for compiling "
"Python extensions."
msgstr ""

# b4afc3c583b243a092405d993303cf55
#: faq/extending.rst:243
msgid "For Red Hat, install the python-devel RPM to get the necessary files."
msgstr ""

# 7502f761ddbf4cf190f8c1c8f073f4c4
#: faq/extending.rst:245
msgid "For Debian, run ``apt-get install python-dev``."
msgstr ""

# b2a7ce568f0c4a558ce60d38a1fdc0e6
#: faq/extending.rst:249
msgid ""
"What does \"SystemError: _PyImport_FixupExtension: module yourmodule not "
"loaded\" mean?"
msgstr ""

# d1a99f53d0d34877a27d544b4052198c
#: faq/extending.rst:251
msgid ""
"This means that you have created an extension module named \"yourmodule\", "
"but your module init function does not initialize with that name."
msgstr ""

# 681909e55b74469fb9b05bba8da3891f
#: faq/extending.rst:254
msgid "Every module init function will have a line similar to::"
msgstr ""

# fb457c0f1fe946c0b24473eb8b539628
#: faq/extending.rst:258
msgid ""
"If the string passed to this function is not the same name as your extension "
"module, the :exc:`SystemError` exception will be raised."
msgstr ""

# 6032e1abd0b54d8f87c5f27a0b9254c7
#: faq/extending.rst:263
msgid "How do I tell \"incomplete input\" from \"invalid input\"?"
msgstr ""

# 276fa970a27d4372b555cd029c0dab23
#: faq/extending.rst:265
msgid ""
"Sometimes you want to emulate the Python interactive interpreter's behavior, "
"where it gives you a continuation prompt when the input is incomplete (e.g. "
"you typed the start of an \"if\" statement or you didn't close your "
"parentheses or triple string quotes), but it gives you a syntax error "
"message immediately when the input is invalid."
msgstr ""

# f5eab61edc564aba8d49a77a67226945
#: faq/extending.rst:271
msgid ""
"In Python you can use the :mod:`codeop` module, which approximates the "
"parser's behavior sufficiently.  IDLE uses this, for example."
msgstr ""

# 03cdfbcea35242e8bb2d06c5796ec79b
#: faq/extending.rst:274
msgid ""
"The easiest way to do it in C is to call :c:func:`PyRun_InteractiveLoop` "
"(perhaps in a separate thread) and let the Python interpreter handle the "
"input for you. You can also set the :c:func:`PyOS_ReadlineFunctionPointer` "
"to point at your custom input function. See ``Modules/readline.c`` and "
"``Parser/myreadline.c`` for more hints."
msgstr ""

# 31c3c16afb3c4510910ba57a9b5b4f06
#: faq/extending.rst:280
msgid ""
"However sometimes you have to run the embedded Python interpreter in the "
"same thread as your rest application and you can't allow the :c:func:"
"`PyRun_InteractiveLoop` to stop while waiting for user input.  The one "
"solution then is to call :c:func:`PyParser_ParseString` and test for ``e."
"error`` equal to ``E_EOF``, which means the input is incomplete).  Here's a "
"sample code fragment, untested, inspired by code from Alex Farber::"
msgstr ""

# a08cd0ab3cc0494ca5ae2e1747859cb4
#: faq/extending.rst:313
msgid ""
"Another solution is trying to compile the received string with :c:func:"
"`Py_CompileString`. If it compiles without errors, try to execute the "
"returned code object by calling :c:func:`PyEval_EvalCode`. Otherwise save "
"the input for later. If the compilation fails, find out if it's an error or "
"just more input is required - by extracting the message string from the "
"exception tuple and comparing it to the string \"unexpected EOF while parsing"
"\".  Here is a complete example using the GNU readline library (you may want "
"to ignore **SIGINT** while calling readline())::"
msgstr ""

# a50f62033b604142946532b234690f83
#: faq/extending.rst:434
msgid "How do I find undefined g++ symbols __builtin_new or __pure_virtual?"
msgstr ""

# 2f02473464e543ef8d48243430ac2eb8
#: faq/extending.rst:436
msgid ""
"To dynamically load g++ extension modules, you must recompile Python, relink "
"it using g++ (change LINKCC in the Python Modules Makefile), and link your "
"extension module using g++ (e.g., ``g++ -shared -o mymodule.so mymodule.o``)."
msgstr ""

# e25d227ffa10451a8a2b85520b5eb7df
#: faq/extending.rst:442
msgid ""
"Can I create an object class with some methods implemented in C and others "
"in Python (e.g. through inheritance)?"
msgstr ""

# 48defc33ff82473fb7ff1033c3d90665
#: faq/extending.rst:444
msgid ""
"In Python 2.2, you can inherit from built-in classes such as :class:`int`, :"
"class:`list`, :class:`dict`, etc."
msgstr ""

# 4bf5a04da2d44a6baf3f54fff9858d5b
#: faq/extending.rst:447
msgid ""
"The Boost Python Library (BPL, http://www.boost.org/libs/python/doc/index."
"html) provides a way of doing this from C++ (i.e. you can inherit from an "
"extension class written in C++ using the BPL)."
msgstr ""

# 66d116b5dfef4080970cbf30427c603a
#: faq/extending.rst:453
msgid ""
"When importing module X, why do I get \"undefined symbol: PyUnicodeUCS2*\"?"
msgstr ""

# e81ec9361a8c46ce8a35cafcc1f2283e
#: faq/extending.rst:455
msgid ""
"You are using a version of Python that uses a 4-byte representation for "
"Unicode characters, but some C extension module you are importing was "
"compiled using a Python that uses a 2-byte representation for Unicode "
"characters (the default)."
msgstr ""

# 9060222c64774712a7375fc5073b0294
#: faq/extending.rst:459
msgid ""
"If instead the name of the undefined symbol starts with ``PyUnicodeUCS4``, "
"the problem is the reverse: Python was built using 2-byte Unicode "
"characters, and the extension module was compiled using a Python with 4-byte "
"Unicode characters."
msgstr ""

# 9c3ba2d4adaa4a4794857a1730a36ca2
#: faq/extending.rst:463
msgid ""
"This can easily occur when using pre-built extension packages.  RedHat Linux "
"7.x, in particular, provided a \"python2\" binary that is compiled with 4-"
"byte Unicode.  This only causes the link failure if the extension uses any "
"of the ``PyUnicode_*()`` functions.  It is also a problem if an extension "
"uses any of the Unicode-related format specifiers for :c:func:"
"`Py_BuildValue` (or similar) or parameter specifications for :c:func:"
"`PyArg_ParseTuple`."
msgstr ""

# 4538d593688c4a84bf594a88b82b3a66
#: faq/extending.rst:470
msgid ""
"You can check the size of the Unicode character a Python interpreter is "
"using by checking the value of sys.maxunicode:"
msgstr ""

# 47ac9d2a28c4464d96baf9c336801350
#: faq/extending.rst:479
msgid ""
"The only way to solve this problem is to use extension modules compiled with "
"a Python binary built using the same size for Unicode characters."
msgstr ""

# cdde0d0a743e489d8db6c25cdabbf1ad
#: faq/general.rst:5
msgid "General Python FAQ"
msgstr ""

# cac326f165a94509a272d61df281ef03
#: faq/general.rst:10
msgid "General Information"
msgstr ""

# 20ebf3f9d9024700a06d5cf02ab86547
# 5a58d654e3814ceeaac8147dc6d749c6
#: faq/general.rst:13 faq/installed.rst:6
msgid "What is Python?"
msgstr ""

# 58ad64b1a95d4149898c67c4f8524a1f
#: faq/general.rst:15
msgid ""
"Python is an interpreted, interactive, object-oriented programming "
"language.  It incorporates modules, exceptions, dynamic typing, very high "
"level dynamic data types, and classes.  Python combines remarkable power "
"with very clear syntax. It has interfaces to many system calls and "
"libraries, as well as to various window systems, and is extensible in C or C+"
"+.  It is also usable as an extension language for applications that need a "
"programmable interface. Finally, Python is portable: it runs on many Unix "
"variants, on the Mac, and on Windows 2000 and later."
msgstr ""

# 8016762a41ee4ed39ebc42a35c3c721b
#: faq/general.rst:24
msgid ""
"To find out more, start with :ref:`tutorial-index`.  The `Beginner's Guide "
"to Python <http://wiki.python.org/moin/BeginnersGuide>`_ links to other "
"introductory tutorials and resources for learning Python."
msgstr ""

# b0f2ec2c0065473882084a2a58763df6
#: faq/general.rst:30
msgid "What is the Python Software Foundation?"
msgstr ""

# ea982b9bf4b345ada0b49ba79b3fda8f
#: faq/general.rst:32
msgid ""
"The Python Software Foundation is an independent non-profit organization "
"that holds the copyright on Python versions 2.1 and newer.  The PSF's "
"mission is to advance open source technology related to the Python "
"programming language and to publicize the use of Python.  The PSF's home "
"page is at http://www.python.org/psf/."
msgstr ""

# a2a6525ce6624c6bb87a4fb4df6b8b39
#: faq/general.rst:38
msgid ""
"Donations to the PSF are tax-exempt in the US.  If you use Python and find "
"it helpful, please contribute via `the PSF donation page <http://www.python."
"org/psf/donations/>`_."
msgstr ""

# a6531e21c8134aaa970e9c3b218661cc
#: faq/general.rst:44
msgid "Are there copyright restrictions on the use of Python?"
msgstr ""

# 617c5f6dd1b346c68f6fb8b40d36069f
#: faq/general.rst:46
msgid ""
"You can do anything you want with the source, as long as you leave the "
"copyrights in and display those copyrights in any documentation about Python "
"that you produce.  If you honor the copyright rules, it's OK to use Python "
"for commercial use, to sell copies of Python in source or binary form "
"(modified or unmodified), or to sell products that incorporate Python in "
"some form.  We would still like to know about all commercial use of Python, "
"of course."
msgstr ""

# ae9d228080014f539997a059c1eb07e7
#: faq/general.rst:53
msgid ""
"See `the PSF license page <http://python.org/psf/license/>`_ to find further "
"explanations and a link to the full text of the license."
msgstr ""

# b1e06cb2e129423888bd367435ab0439
#: faq/general.rst:56
msgid ""
"The Python logo is trademarked, and in certain cases permission is required "
"to use it.  Consult `the Trademark Usage Policy <http://www.python.org/psf/"
"trademarks/>`__ for more information."
msgstr ""

# bded6d29e4e840e0b084b33ef4def775
#: faq/general.rst:62
msgid "Why was Python created in the first place?"
msgstr ""

# 127feb755915479f974d8eaaf81368c8
#: faq/general.rst:64
msgid ""
"Here's a *very* brief summary of what started it all, written by Guido van "
"Rossum:"
msgstr ""

# 457e2b3f74a04cee802521265badf5c9
#: faq/general.rst:67
msgid ""
"I had extensive experience with implementing an interpreted language in the "
"ABC group at CWI, and from working with this group I had learned a lot about "
"language design.  This is the origin of many Python features, including the "
"use of indentation for statement grouping and the inclusion of very-high-"
"level data types (although the details are all different in Python)."
msgstr ""

# 94311ffcee7745388cd999345aa11747
#: faq/general.rst:74
msgid ""
"I had a number of gripes about the ABC language, but also liked many of its "
"features.  It was impossible to extend the ABC language (or its "
"implementation) to remedy my complaints -- in fact its lack of extensibility "
"was one of its biggest problems.  I had some experience with using Modula-2+ "
"and talked with the designers of Modula-3 and read the Modula-3 report. "
"Modula-3 is the origin of the syntax and semantics used for exceptions, and "
"some other Python features."
msgstr ""

# 703f1363b22b4146a0b9463057ece3c2
#: faq/general.rst:82
msgid ""
"I was working in the Amoeba distributed operating system group at CWI.  We "
"needed a better way to do system administration than by writing either C "
"programs or Bourne shell scripts, since Amoeba had its own system call "
"interface which wasn't easily accessible from the Bourne shell.  My "
"experience with error handling in Amoeba made me acutely aware of the "
"importance of exceptions as a programming language feature."
msgstr ""

# eb4cdb72ecf34890b4774c8dd80e0453
#: faq/general.rst:89
msgid ""
"It occurred to me that a scripting language with a syntax like ABC but with "
"access to the Amoeba system calls would fill the need.  I realized that it "
"would be foolish to write an Amoeba-specific language, so I decided that I "
"needed a language that was generally extensible."
msgstr ""

# 856a6f00ec7f4f39bc03d40dd7f7a636
#: faq/general.rst:94
msgid ""
"During the 1989 Christmas holidays, I had a lot of time on my hand, so I "
"decided to give it a try.  During the next year, while still mostly working "
"on it in my own time, Python was used in the Amoeba project with increasing "
"success, and the feedback from colleagues made me add many early "
"improvements."
msgstr ""

# e67d50c36eee47468d22b725b46ed714
#: faq/general.rst:100
msgid ""
"In February 1991, after just over a year of development, I decided to post "
"to USENET.  The rest is in the ``Misc/HISTORY`` file."
msgstr ""

# ae9d45070f654332af53df0529d3bb04
#: faq/general.rst:105
msgid "What is Python good for?"
msgstr ""

# 4f14915a8c514e62ac6111d611546d18
#: faq/general.rst:107
msgid ""
"Python is a high-level general-purpose programming language that can be "
"applied to many different classes of problems."
msgstr ""

# 4edbb34397ed40e2a2ab96a92f3be2d1
#: faq/general.rst:110
msgid ""
"The language comes with a large standard library that covers areas such as "
"string processing (regular expressions, Unicode, calculating differences "
"between files), Internet protocols (HTTP, FTP, SMTP, XML-RPC, POP, IMAP, CGI "
"programming), software engineering (unit testing, logging, profiling, "
"parsing Python code), and operating system interfaces (system calls, "
"filesystems, TCP/IP sockets).  Look at the table of contents for :ref:"
"`library-index` to get an idea of what's available.  A wide variety of third-"
"party extensions are also available.  Consult `the Python Package Index "
"<http://pypi.python.org/pypi>`_ to find packages of interest to you."
msgstr ""

# 93fc40cbcd6547f7b6692892cd69b438
#: faq/general.rst:122
msgid "How does the Python version numbering scheme work?"
msgstr ""

# b205d53a0d3b4700a9fd5eeaba733148
#: faq/general.rst:124
msgid ""
"Python versions are numbered A.B.C or A.B.  A is the major version number -- "
"it is only incremented for really major changes in the language.  B is the "
"minor version number, incremented for less earth-shattering changes.  C is "
"the micro-level -- it is incremented for each bugfix release.  See :pep:`6` "
"for more information about bugfix releases."
msgstr ""

# 72d9fa80f6364855be6732a69cb82567
#: faq/general.rst:130
msgid ""
"Not all releases are bugfix releases.  In the run-up to a new major release, "
"a series of development releases are made, denoted as alpha, beta, or "
"release candidate.  Alphas are early releases in which interfaces aren't yet "
"finalized; it's not unexpected to see an interface change between two alpha "
"releases. Betas are more stable, preserving existing interfaces but possibly "
"adding new modules, and release candidates are frozen, making no changes "
"except as needed to fix critical bugs."
msgstr ""

# 099f7531a36c42bda0e620d607356efa
#: faq/general.rst:138
msgid ""
"Alpha, beta and release candidate versions have an additional suffix.  The "
"suffix for an alpha version is \"aN\" for some small number N, the suffix "
"for a beta version is \"bN\" for some small number N, and the suffix for a "
"release candidate version is \"cN\" for some small number N.  In other "
"words, all versions labeled 2.0aN precede the versions labeled 2.0bN, which "
"precede versions labeled 2.0cN, and *those* precede 2.0."
msgstr ""

# 09d69566733143d7b0d63dbf6817081f
#: faq/general.rst:145
msgid ""
"You may also find version numbers with a \"+\" suffix, e.g. \"2.2+\".  These "
"are unreleased versions, built directly from the Subversion trunk.  In "
"practice, after a final minor release is made, the Subversion trunk is "
"incremented to the next minor version, which becomes the \"a0\" version, e."
"g. \"2.4a0\"."
msgstr ""

# 90157c38d919490485189eb896db6188
#: faq/general.rst:151
msgid ""
"See also the documentation for ``sys.version``, ``sys.hexversion``, and "
"``sys.version_info``."
msgstr ""

# 1f0e6609bd0c4caea4f375ae4881b448
#: faq/general.rst:156
msgid "How do I obtain a copy of the Python source?"
msgstr ""

# 3c3b34c645374ed08bd492c607fd5e5f
#: faq/general.rst:158
msgid ""
"The latest Python source distribution is always available from python.org, "
"at http://www.python.org/download/.  The latest development sources can be "
"obtained via anonymous Mercurial access at http://hg.python.org/cpython."
msgstr ""

# 1cafc0bf6bc4484c95ff0c9cb91fcef4
#: faq/general.rst:162
msgid ""
"The source distribution is a gzipped tar file containing the complete C "
"source, Sphinx-formatted documentation, Python library modules, example "
"programs, and several useful pieces of freely distributable software.  The "
"source will compile and run out of the box on most UNIX platforms."
msgstr ""

# c753880ce39f43c0a49810e32294f916
#: faq/general.rst:167
msgid ""
"Consult the `Developer FAQ <http://docs.python.org/devguide/faq>`__ for more "
"information on getting the source code and compiling it."
msgstr ""

# 70552c22cae944ec8651310cbb1d09fa
#: faq/general.rst:172
msgid "How do I get documentation on Python?"
msgstr ""

# 7ece87e917024307be78168db076af35
#: faq/general.rst:176
msgid ""
"The standard documentation for the current stable version of Python is "
"available at http://docs.python.org/.  PDF, plain text, and downloadable "
"HTML versions are also available at http://docs.python.org/download.html."
msgstr ""

# feb4248ec2624e76b4271a3cb98a45b5
#: faq/general.rst:180
msgid ""
"The documentation is written in reStructuredText and processed by `the "
"Sphinx documentation tool <http://sphinx.pocoo.org/>`__.  The "
"reStructuredText source for the documentation is part of the Python source "
"distribution."
msgstr ""

# a3bacb31a9cb48c187f40293d2b0e5f9
#: faq/general.rst:186
msgid "I've never programmed before. Is there a Python tutorial?"
msgstr ""

# e92b254142904127a6fe768d1a0e99d1
#: faq/general.rst:188
msgid ""
"There are numerous tutorials and books available.  The standard "
"documentation includes :ref:`tutorial-index`."
msgstr ""

# c5ab3be8894642afa09e5ca3afea8375
#: faq/general.rst:191
msgid ""
"Consult `the Beginner's Guide <http://wiki.python.org/moin/BeginnersGuide>`_ "
"to find information for beginning Python programmers, including lists of "
"tutorials."
msgstr ""

# 221276d36746427494fbce04875b64dd
#: faq/general.rst:196
msgid "Is there a newsgroup or mailing list devoted to Python?"
msgstr ""

# 4e287804aab242e79eca13d19c15815b
#: faq/general.rst:198
msgid ""
"There is a newsgroup, :newsgroup:`comp.lang.python`, and a mailing list, "
"`python-list <http://mail.python.org/mailman/listinfo/python-list>`_.  The "
"newsgroup and mailing list are gatewayed into each other -- if you can read "
"news it's unnecessary to subscribe to the mailing list. :newsgroup:`comp."
"lang.python` is high-traffic, receiving hundreds of postings every day, and "
"Usenet readers are often more able to cope with this volume."
msgstr ""

# 05cac286ece64821bbecc0458d65aaf2
#: faq/general.rst:205
msgid ""
"Announcements of new software releases and events can be found in comp.lang."
"python.announce, a low-traffic moderated list that receives about five "
"postings per day.  It's available as `the python-announce mailing list "
"<http://mail.python.org/mailman/listinfo/python-announce-list>`_."
msgstr ""

# d0816eb08d724aef86d94f99d16ffeec
#: faq/general.rst:210
msgid ""
"More info about other mailing lists and newsgroups can be found at http://"
"www.python.org/community/lists/."
msgstr ""

# 9852f708666146f1a6531269571e8d3f
#: faq/general.rst:215
msgid "How do I get a beta test version of Python?"
msgstr ""

# 767e9c39be7c4ed28a500acfadc2d03e
#: faq/general.rst:217
msgid ""
"Alpha and beta releases are available from http://www.python.org/download/.  "
"All releases are announced on the comp.lang.python and comp.lang.python."
"announce newsgroups and on the Python home page at http://www.python.org/; "
"an RSS feed of news is available."
msgstr ""

# 3357e224d1f6436fae91592600a33a88
#: faq/general.rst:222
msgid ""
"You can also access the development version of Python through Subversion.  "
"See http://docs.python.org/devguide/faq for details."
msgstr ""

# 6ec77015da2c43cf92a5644cd6e76dfc
#: faq/general.rst:227
msgid "How do I submit bug reports and patches for Python?"
msgstr ""

# 41c739967ffe427eb9ea6ae84d39e950
#: faq/general.rst:229
msgid ""
"To report a bug or submit a patch, please use the Roundup installation at "
"http://bugs.python.org/."
msgstr ""

# e017983158ac467da2c4a103d61b7265
#: faq/general.rst:232
msgid ""
"You must have a Roundup account to report bugs; this makes it possible for "
"us to contact you if we have follow-up questions.  It will also enable "
"Roundup to send you updates as we act on your bug. If you had previously "
"used SourceForge to report bugs to Python, you can obtain your Roundup "
"password through Roundup's `password reset procedure <http://bugs.python.org/"
"user?@template=forgotten>`_."
msgstr ""

# f654f602b5414153bed4f3649a2794d2
#: faq/general.rst:238
msgid ""
"For more information on how Python is developed, consult `the Python "
"Developer's Guide <http://docs.python.org/devguide/>`_."
msgstr ""

# f33bb43d31974399a65bbe4480ed3e87
#: faq/general.rst:243
msgid "Are there any published articles about Python that I can reference?"
msgstr ""

# 2165ab69e44c41c1be2ed21df5500976
#: faq/general.rst:245
msgid "It's probably best to cite your favorite book about Python."
msgstr ""

# 003f2e1335a447749adc9725217e013a
#: faq/general.rst:247
msgid ""
"The very first article about Python was written in 1991 and is now quite "
"outdated."
msgstr ""

# 69f5631b1f6548c2833071f31bf1f116
#: faq/general.rst:250
msgid ""
"Guido van Rossum and Jelke de Boer, \"Interactively Testing Remote Servers "
"Using the Python Programming Language\", CWI Quarterly, Volume 4, Issue 4 "
"(December 1991), Amsterdam, pp 283-303."
msgstr ""

# 72833335d9f74df28b7569d8d4679f79
#: faq/general.rst:256
msgid "Are there any books on Python?"
msgstr ""

# 7b1b597c35b84e7c91247e878057c291
#: faq/general.rst:258
msgid ""
"Yes, there are many, and more are being published.  See the python.org wiki "
"at http://wiki.python.org/moin/PythonBooks for a list."
msgstr ""

# c2909724cfc849c39e3bd48d2b30019a
#: faq/general.rst:261
msgid ""
"You can also search online bookstores for \"Python\" and filter out the "
"Monty Python references; or perhaps search for \"Python\" and \"language\"."
msgstr ""

# bf50d403cfbf46afba9b6d0c0caac1e4
#: faq/general.rst:266
msgid "Where in the world is www.python.org located?"
msgstr ""

# 3bfe3c74e78c405b9b7ebe2b64699fea
#: faq/general.rst:268
msgid ""
"It's currently in Amsterdam, graciously hosted by `XS4ALL <http://www.xs4all."
"nl>`_.  Thanks to Thomas Wouters for his work in arranging python.org's "
"hosting."
msgstr ""

# 61352048d27d48488f971f068fc6e15c
#: faq/general.rst:274
msgid "Why is it called Python?"
msgstr ""

# 11fd747c9a8f4c28adccb3b1567485f4
#: faq/general.rst:276
msgid ""
"When he began implementing Python, Guido van Rossum was also reading the "
"published scripts from `\"Monty Python's Flying Circus\" <http://pythonline."
"com/>`__, a BBC comedy series from the 1970s.  Van Rossum thought he needed "
"a name that was short, unique, and slightly mysterious, so he decided to "
"call the language Python."
msgstr ""

# dd406fbdc9234f02a314d7597c6b19cb
#: faq/general.rst:284
msgid "Do I have to like \"Monty Python's Flying Circus\"?"
msgstr ""

# 62b7b25e91fe4f0da53c83717000eead
#: faq/general.rst:286
msgid "No, but it helps.  :)"
msgstr ""

# 1c01d7d0c84d4f20a21d401ccde1be9b
#: faq/general.rst:290
msgid "Python in the real world"
msgstr ""

# ec6541c47b3e47e19ea13de607cbb2f7
#: faq/general.rst:293
msgid "How stable is Python?"
msgstr ""

# 51192dc163454eba9f19cce0744dcbb5
#: faq/general.rst:295
msgid ""
"Very stable.  New, stable releases have been coming out roughly every 6 to "
"18 months since 1991, and this seems likely to continue.  Currently there "
"are usually around 18 months between major releases."
msgstr ""

# 7c05548e18e74f70bff145dcc4b22f13
#: faq/general.rst:299
msgid ""
"The developers issue \"bugfix\" releases of older versions, so the stability "
"of existing releases gradually improves.  Bugfix releases, indicated by a "
"third component of the version number (e.g. 2.5.3, 2.6.2), are managed for "
"stability; only fixes for known problems are included in a bugfix release, "
"and it's guaranteed that interfaces will remain the same throughout a series "
"of bugfix releases."
msgstr ""

# 3be581db286f42c09dde2a4b4992250a
#: faq/general.rst:306
msgid ""
"The latest stable releases can always be found on the `Python download page "
"<http://python.org/download/>`_.  There are two recommended production-ready "
"versions at this point in time, because at the moment there are two branches "
"of stable releases: 2.x and 3.x.  Python 3.x may be less useful than 2.x, "
"since currently there is more third party software available for Python 2 "
"than for Python 3.  Python 2 code will generally not run unchanged in Python "
"3."
msgstr ""

# 8249dd36186141c8b7605e0ff7fc1e0d
#: faq/general.rst:315
msgid "How many people are using Python?"
msgstr ""

# 896b51791ab045b1b9e59fb36d548a54
#: faq/general.rst:317
msgid ""
"There are probably tens of thousands of users, though it's difficult to "
"obtain an exact count."
msgstr ""

# 5c57a525afef4fa999a849f407e0f729
#: faq/general.rst:320
msgid ""
"Python is available for free download, so there are no sales figures, and "
"it's available from many different sites and packaged with many Linux "
"distributions, so download statistics don't tell the whole story either."
msgstr ""

# d378cf17a6134c6880d3876538cd2692
#: faq/general.rst:324
msgid ""
"The comp.lang.python newsgroup is very active, but not all Python users post "
"to the group or even read it."
msgstr ""

# 5b17bb52aff94134b07649287a3885f7
#: faq/general.rst:329
msgid "Have any significant projects been done in Python?"
msgstr ""

# d429ee45f6ba417d9c81d9858e762f0e
#: faq/general.rst:331
msgid ""
"See http://python.org/about/success for a list of projects that use Python. "
"Consulting the proceedings for `past Python conferences <http://python.org/"
"community/workshops/>`_ will reveal contributions from many different "
"companies and organizations."
msgstr ""

# 5acc9bf494a04271b4cba607d575ca1e
#: faq/general.rst:336
msgid ""
"High-profile Python projects include `the Mailman mailing list manager "
"<http://www.list.org>`_ and `the Zope application server <http://www.zope."
"org>`_.  Several Linux distributions, most notably `Red Hat <http://www."
"redhat.com>`_, have written part or all of their installer and system "
"administration software in Python.  Companies that use Python internally "
"include Google, Yahoo, and Lucasfilm Ltd."
msgstr ""

# c4d8cb0f4c424aae89ae192c1600c268
#: faq/general.rst:345
msgid "What new developments are expected for Python in the future?"
msgstr ""

# e1da151ab6e044fe898798482d3a1e31
#: faq/general.rst:347
msgid ""
"See http://www.python.org/dev/peps/ for the Python Enhancement Proposals "
"(PEPs). PEPs are design documents describing a suggested new feature for "
"Python, providing a concise technical specification and a rationale.  Look "
"for a PEP titled \"Python X.Y Release Schedule\", where X.Y is a version "
"that hasn't been publicly released yet."
msgstr ""

# d24d7670b8a14361af6c1b2dc305a04a
#: faq/general.rst:353
msgid ""
"New development is discussed on `the python-dev mailing list <http://mail."
"python.org/mailman/listinfo/python-dev/>`_."
msgstr ""

# 866dae132cb14a63b930c3947561cc90
#: faq/general.rst:358
msgid "Is it reasonable to propose incompatible changes to Python?"
msgstr ""

# 2f131ac4323246c6853c8eab07ff07b9
#: faq/general.rst:360
msgid ""
"In general, no.  There are already millions of lines of Python code around "
"the world, so any change in the language that invalidates more than a very "
"small fraction of existing programs has to be frowned upon.  Even if you can "
"provide a conversion program, there's still the problem of updating all "
"documentation; many books have been written about Python, and we don't want "
"to invalidate them all at a single stroke."
msgstr ""

# f2a073d7094646adb93ba519bee53986
#: faq/general.rst:367
msgid ""
"Providing a gradual upgrade path is necessary if a feature has to be "
"changed. :pep:`5` describes the procedure followed for introducing backward-"
"incompatible changes while minimizing disruption for users."
msgstr ""

# b5fe4ceee5234e17a724b3166962de1b
#: faq/general.rst:373
msgid "Is Python Y2K (Year 2000) Compliant?"
msgstr ""

# 8630f7158fb249219fc4ee6c6f0e09a0
#: faq/general.rst:377
msgid ""
"As of August, 2003 no major problems have been reported and Y2K compliance "
"seems to be a non-issue."
msgstr ""

# 504e90d664e24ec1a745804e6f126d3a
#: faq/general.rst:380
msgid ""
"Python does very few date calculations and for those it does perform relies "
"on the C library functions.  Python generally represents times either as "
"seconds since 1970 or as a ``(year, month, day, ...)`` tuple where the year "
"is expressed with four digits, which makes Y2K bugs unlikely.  So as long as "
"your C library is okay, Python should be okay.  Of course, it's possible "
"that a particular application written in Python makes assumptions about 2-"
"digit years."
msgstr ""

# aaeac519322145119e2eb1fbb4ab5d95
#: faq/general.rst:387
msgid ""
"Because Python is available free of charge, there are no absolute "
"guarantees. If there *are* unforeseen problems, liability is the user's "
"problem rather than the developers', and there is nobody you can sue for "
"damages.  The Python copyright notice contains the following disclaimer:"
msgstr ""

# e1b022408cea4a30aff04082c14cb99e
#: faq/general.rst:392
msgid ""
"4. PSF is making Python 2.3 available to Licensee on an \"AS IS\" basis.  "
"PSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED.  BY WAY OF "
"EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND DISCLAIMS ANY REPRESENTATION "
"OR WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT "
"THE USE OF PYTHON 2.3 WILL NOT INFRINGE ANY THIRD PARTY RIGHTS."
msgstr ""

# 63a353b870844c838fdb596b4ca0a65c
#: faq/general.rst:399
msgid ""
"5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 2.3 FOR "
"ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF "
"MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 2.3, OR ANY DERIVATIVE "
"THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF."
msgstr ""

# 27f2bd520e544e69a18e0b805f57f859
#: faq/general.rst:404
msgid ""
"The good news is that *if* you encounter a problem, you have full source "
"available to track it down and fix it.  This is one advantage of an open "
"source programming environment."
msgstr ""

# 7ab47cac99644c6fb732bd5383ced7b0
#: faq/general.rst:410
msgid "Is Python a good language for beginning programmers?"
msgstr ""

# e66a0777adbd428996dd5f08f93c3895
# 48fa95834f684c48a7609f39cbbd1f95
# b587c0f0a2ae4b32a1798138ed15ab32
# 68a913d75d0b45df8153b9ecd561146f
#: faq/general.rst:412 faq/library.rst:779 faq/programming.rst:15
#: faq/programming.rst:58
msgid "Yes."
msgstr ""

# 86153f8beec4462eafe44a70ac5a94ce
#: faq/general.rst:414
msgid ""
"It is still common to start students with a procedural and statically typed "
"language such as Pascal, C, or a subset of C++ or Java.  Students may be "
"better served by learning Python as their first language.  Python has a very "
"simple and consistent syntax and a large standard library and, most "
"importantly, using Python in a beginning programming course lets students "
"concentrate on important programming skills such as problem decomposition "
"and data type design.  With Python, students can be quickly introduced to "
"basic concepts such as loops and procedures.  They can probably even work "
"with user-defined objects in their very first course."
msgstr ""

# 40b635c6b2684444b2e5acdfe6ba0b05
#: faq/general.rst:424
msgid ""
"For a student who has never programmed before, using a statically typed "
"language seems unnatural.  It presents additional complexity that the "
"student must master and slows the pace of the course.  The students are "
"trying to learn to think like a computer, decompose problems, design "
"consistent interfaces, and encapsulate data.  While learning to use a "
"statically typed language is important in the long term, it is not "
"necessarily the best topic to address in the students' first programming "
"course."
msgstr ""

# 8a2951daa9cb4ae9ae2d2a8e6847b007
#: faq/general.rst:432
msgid ""
"Many other aspects of Python make it a good first language.  Like Java, "
"Python has a large standard library so that students can be assigned "
"programming projects very early in the course that *do* something.  "
"Assignments aren't restricted to the standard four-function calculator and "
"check balancing programs.  By using the standard library, students can gain "
"the satisfaction of working on realistic applications as they learn the "
"fundamentals of programming. Using the standard library also teaches "
"students about code reuse.  Third-party modules such as PyGame are also "
"helpful in extending the students' reach."
msgstr ""

# 1db266286c9c48bb95938a62347128f7
#: faq/general.rst:441
msgid ""
"Python's interactive interpreter enables students to test language features "
"while they're programming.  They can keep a window with the interpreter "
"running while they enter their program's source in another window.  If they "
"can't remember the methods for a list, they can do something like this::"
msgstr ""

# cfedea0beb5c4c50befe15cf388ab8ab
#: faq/general.rst:459
msgid ""
"With the interpreter, documentation is never far from the student as he's "
"programming."
msgstr ""

# 5391911106d54d88a83646db0ef316c4
#: faq/general.rst:462
msgid ""
"There are also good IDEs for Python.  IDLE is a cross-platform IDE for "
"Python that is written in Python using Tkinter.  PythonWin is a Windows-"
"specific IDE. Emacs users will be happy to know that there is a very good "
"Python mode for Emacs.  All of these programming environments provide syntax "
"highlighting, auto-indenting, and access to the interactive interpreter "
"while coding.  Consult http://www.python.org/editors/ for a full list of "
"Python editing environments."
msgstr ""

# 7123ac4d3fac4ebb9978c000b4f639c0
#: faq/general.rst:469
msgid ""
"If you want to discuss Python's use in education, you may be interested in "
"joining `the edu-sig mailing list <http://python.org/community/sigs/current/"
"edu-sig>`_."
msgstr ""

# 1ce44882603849faac814001aaeb63e0
#: faq/gui.rst:5
msgid "Graphic User Interface FAQ"
msgstr ""

# 00dc1a1a29c541648b9cda80033156fa
#: faq/gui.rst:13
msgid "General GUI Questions"
msgstr ""

# 277ccedb97844fb0a16a157ce20faf65
#: faq/gui.rst:16
msgid "What platform-independent GUI toolkits exist for Python?"
msgstr ""

# 1b00f84edb7c4048aa0a1717d0cd8690
#: faq/gui.rst:18
msgid ""
"Depending on what platform(s) you are aiming at, there are several.  Some of "
"them haven't been ported to Python 3 yet.  At least `Tkinter`_ and `Qt`_ are "
"known to be Python 3-compatible."
msgstr ""

# 5e36e244650a4b62873d0aaf99071b5f
#: faq/gui.rst:25
msgid "Tkinter"
msgstr ""

# 4290129f9daa4a27855614c03d58d81c
#: faq/gui.rst:27
msgid ""
"Standard builds of Python include an object-oriented interface to the Tcl/Tk "
"widget set, called :ref:`tkinter <Tkinter>`.  This is probably the easiest "
"to install (since it comes included with most `binary distributions <http://"
"www.python.org/download/>`_ of Python) and use. For more info about Tk, "
"including pointers to the source, see the `Tcl/Tk home page <http://www.tcl."
"tk>`_.  Tcl/Tk is fully portable to the MacOS, Windows, and Unix platforms."
msgstr ""

# 841b8c7c3a4b47faafa7d295a743b47f
#: faq/gui.rst:36
msgid "wxWidgets"
msgstr ""

# b6f2ef133fed460c811304ec864079ae
#: faq/gui.rst:38
msgid ""
"wxWidgets (http://www.wxwidgets.org) is a free, portable GUI class library "
"written in C++ that provides a native look and feel on a number of "
"platforms, with Windows, MacOS X, GTK, X11, all listed as current stable "
"targets.  Language bindings are available for a number of languages "
"including Python, Perl, Ruby, etc."
msgstr ""

# f794ef2512d4463fb10508635818a0ae
#: faq/gui.rst:44
msgid ""
"wxPython (http://www.wxpython.org) is the Python binding for wxwidgets.  "
"While it often lags slightly behind the official wxWidgets releases, it also "
"offers a number of features via pure Python extensions that are not "
"available in other language bindings.  There is an active wxPython user and "
"developer community."
msgstr ""

# 08ec307a468c43b78a7800fbf878e2a9
#: faq/gui.rst:50
msgid ""
"Both wxWidgets and wxPython are free, open source, software with permissive "
"licences that allow their use in commercial products as well as in freeware "
"or shareware."
msgstr ""

# c75e3fa39d84414ba0e88c742eb406ae
#: faq/gui.rst:56
msgid "Qt"
msgstr ""

# f01f07993cab447c8a9a8e9e9708f600
#: faq/gui.rst:58
msgid ""
"There are bindings available for the Qt toolkit (using either `PyQt <http://"
"www.riverbankcomputing.co.uk/software/pyqt/>`_ or `PySide <http://www.pyside."
"org/>`_) and for KDE (`PyKDE <http://www.riverbankcomputing.co.uk/software/"
"pykde/intro>`__). PyQt is currently more mature than PySide, but you must "
"buy a PyQt license from `Riverbank Computing <http://www.riverbankcomputing."
"co.uk/software/pyqt/license>`_ if you want to write proprietary "
"applications.  PySide is free for all applications."
msgstr ""

# c799dc74304f4d0096f6acdc879d0e66
#: faq/gui.rst:65
msgid ""
"Qt 4.5 upwards is licensed under the LGPL license; also, commercial licenses "
"are available from `Nokia <http://qt.nokia.com/>`_."
msgstr ""

# 93f7be66833d43a7b4601687b1e8cbdb
#: faq/gui.rst:69
msgid "Gtk+"
msgstr ""

# 443f7a473df549438a2856c8cc132f78
#: faq/gui.rst:71
msgid ""
"The `GObject introspection bindings <https://live.gnome.org/PyGObject>`_ for "
"Python allow you to write GTK+ 3 applications.  There is also a `Python GTK+ "
"3 Tutorial <http://python-gtk-3-tutorial.readthedocs.org/en/latest/>`_."
msgstr ""

# 2c9613f7ed6a4a538c77b33f76bfecf5
#: faq/gui.rst:75
msgid ""
"The older PyGtk bindings for the `Gtk+ 2 toolkit <http://www.gtk.org>`_ have "
"been implemented by James Henstridge; see <http://www.pygtk.org>."
msgstr ""

# ee6a9688dc0e45678d126653c19c7100
#: faq/gui.rst:79
msgid "FLTK"
msgstr ""

# 304ee004f2e94851b11da8a5ecece0d5
#: faq/gui.rst:81
msgid ""
"Python bindings for `the FLTK toolkit <http://www.fltk.org>`_, a simple yet "
"powerful and mature cross-platform windowing system, are available from `the "
"PyFLTK project <http://pyfltk.sourceforge.net>`_."
msgstr ""

# bcb389da15454abaa22298c32bce2ae7
#: faq/gui.rst:87
msgid "FOX"
msgstr ""

# da26a411b7f9449280c3753d8fa166dc
#: faq/gui.rst:89
msgid ""
"A wrapper for `the FOX toolkit <http://www.fox-toolkit.org/>`_ called `FXpy "
"<http://fxpy.sourceforge.net/>`_ is available.  FOX supports both Unix "
"variants and Windows."
msgstr ""

# 21831ad7fe934d2e8f2c187243e54348
#: faq/gui.rst:95
msgid "OpenGL"
msgstr ""

# 2f8773b11c7d4583b1c9b4aad18ad0f9
#: faq/gui.rst:97
msgid "For OpenGL bindings, see `PyOpenGL <http://pyopengl.sourceforge.net>`_."
msgstr ""

# cb3c2ddb8f884f0e8f6087da9a7d39bf
#: faq/gui.rst:101
msgid "What platform-specific GUI toolkits exist for Python?"
msgstr ""

# 451c6e3b59d14a0882b2c958f6c00595
#: faq/gui.rst:103
msgid ""
"`The Mac port <http://python.org/download/mac>`_ by Jack Jansen has a rich "
"and ever-growing set of modules that support the native Mac toolbox calls.  "
"The port supports MacOS X's Carbon libraries."
msgstr ""

# a5ce04bbb0b240f39b968a14a8b0d8a8
#: faq/gui.rst:107
msgid ""
"By installing the `PyObjc Objective-C bridge <http://pyobjc.sourceforge."
"net>`_, Python programs can use MacOS X's Cocoa libraries. See the "
"documentation that comes with the Mac port."
msgstr ""

# 84e21bac8bb24ce298447dbb874d9b0b
#: faq/gui.rst:111
msgid ""
":ref:`Pythonwin <windows-faq>` by Mark Hammond includes an interface to the "
"Microsoft Foundation Classes and a Python programming environment that's "
"written mostly in Python using the MFC classes."
msgstr ""

# b1297b24bffe4e8896f1911036b45ec3
#: faq/gui.rst:117
msgid "Tkinter questions"
msgstr ""

# cf8e95a81277484da3cec71f7d70a188
#: faq/gui.rst:120
msgid "How do I freeze Tkinter applications?"
msgstr ""

# 42d1cf681e204194b952163600be7029
#: faq/gui.rst:122
msgid ""
"Freeze is a tool to create stand-alone applications.  When freezing Tkinter "
"applications, the applications will not be truly stand-alone, as the "
"application will still need the Tcl and Tk libraries."
msgstr ""

# 43e47fe1e1df4bf3bc9a1aedfb3fc724
#: faq/gui.rst:126
msgid ""
"One solution is to ship the application with the Tcl and Tk libraries, and "
"point to them at run-time using the :envvar:`TCL_LIBRARY` and :envvar:"
"`TK_LIBRARY` environment variables."
msgstr ""

# 37a58b32b7fb42edb673aacc2db61943
#: faq/gui.rst:130
msgid ""
"To get truly stand-alone applications, the Tcl scripts that form the library "
"have to be integrated into the application as well. One tool supporting that "
"is SAM (stand-alone modules), which is part of the Tix distribution (http://"
"tix.sourceforge.net/)."
msgstr ""

# 2ef97c453c18431ca711d2d4a0c03245
#: faq/gui.rst:135
msgid ""
"Build Tix with SAM enabled, perform the appropriate call to :c:func:"
"`Tclsam_init`, etc. inside Python's :file:`Modules/tkappinit.c`, and link "
"with libtclsam and libtksam (you might include the Tix libraries as well)."
msgstr ""

# d8156412b3164708a1d6fcca669dd143
#: faq/gui.rst:142
msgid "Can I have Tk events handled while waiting for I/O?"
msgstr ""

# a36a7df9fc244a12bf212f430c32e6f7
#: faq/gui.rst:144
msgid ""
"Yes, and you don't even need threads!  But you'll have to restructure your I/"
"O code a bit.  Tk has the equivalent of Xt's :c:func:`XtAddInput()` call, "
"which allows you to register a callback function which will be called from "
"the Tk mainloop when I/O is possible on a file descriptor.  Here's what you "
"need::"
msgstr ""

# 0182c67fff1b4665afa741aa0da86b72
#: faq/gui.rst:152
msgid ""
"The file may be a Python file or socket object (actually, anything with a "
"fileno() method), or an integer file descriptor.  The mask is one of the "
"constants tkinter.READABLE or tkinter.WRITABLE.  The callback is called as "
"follows::"
msgstr ""

# bb787ea2208a4af89f13a11e4b3393c1
#: faq/gui.rst:159
msgid "You must unregister the callback when you're done, using ::"
msgstr ""

# acea7ab7f0724a0c9bd31dc93b01c03e
#: faq/gui.rst:163
msgid ""
"Note: since you don't know *how many bytes* are available for reading, you "
"can't use the Python file object's read or readline methods, since these "
"will insist on reading a predefined number of bytes.  For sockets, the :meth:"
"`recv` or :meth:`recvfrom` methods will work fine; for other files, use ``os."
"read(file.fileno(), maxbytecount)``."
msgstr ""

# da2d643171e44f598df5560aab89a525
#: faq/gui.rst:171
msgid "I can't get key bindings to work in Tkinter: why?"
msgstr ""

# d790564689e046a08fc1e50be746b590
#: faq/gui.rst:173
msgid ""
"An often-heard complaint is that event handlers bound to events with the :"
"meth:`bind` method don't get handled even when the appropriate key is "
"pressed."
msgstr ""

# 3473adc631ef4693b7efc97a26b99791
#: faq/gui.rst:176
msgid ""
"The most common cause is that the widget to which the binding applies "
"doesn't have \"keyboard focus\".  Check out the Tk documentation for the "
"focus command. Usually a widget is given the keyboard focus by clicking in "
"it (but not for labels; see the takefocus option)."
msgstr ""

# 1213b466ba5c4fa7a3621656965e139d
#: faq/index.rst:5
msgid "Python Frequently Asked Questions"
msgstr ""

# bb7498c83a8d4c2fa5b65e8593d1b799
#: faq/installed.rst:3
msgid "\"Why is Python Installed on my Computer?\" FAQ"
msgstr ""

# b6a5d1502fd144a1aab57e95415be053
#: faq/installed.rst:8
msgid ""
"Python is a programming language.  It's used for many different "
"applications. It's used in some high schools and colleges as an introductory "
"programming language because Python is easy to learn, but it's also used by "
"professional software developers at places such as Google, NASA, and "
"Lucasfilm Ltd."
msgstr ""

# ad985c66717249d2a70e4e8fab76aa14
#: faq/installed.rst:13
msgid ""
"If you wish to learn more about Python, start with the `Beginner's Guide to "
"Python <http://wiki.python.org/moin/BeginnersGuide>`_."
msgstr ""

# 24ac42f3589447d7ab84b36031d304dc
#: faq/installed.rst:18
msgid "Why is Python installed on my machine?"
msgstr ""

# 2d1e884119df4c00b4e0cc64cb27554d
#: faq/installed.rst:20
msgid ""
"If you find Python installed on your system but don't remember installing "
"it, there are several possible ways it could have gotten there."
msgstr ""

# 088ef71c4c4442fdb583c8be8c166e46
#: faq/installed.rst:23
msgid ""
"Perhaps another user on the computer wanted to learn programming and "
"installed it; you'll have to figure out who's been using the machine and "
"might have installed it."
msgstr ""

# afa507f191084947885fe5f0a6a10fc6
#: faq/installed.rst:26
msgid ""
"A third-party application installed on the machine might have been written "
"in Python and included a Python installation.  There are many such "
"applications, from GUI programs to network servers and administrative "
"scripts."
msgstr ""

# 78ef57fb501642d9b4ed2608af60e9ed
#: faq/installed.rst:29
msgid ""
"Some Windows machines also have Python installed.  At this writing we're "
"aware of computers from Hewlett-Packard and Compaq that include Python.  "
"Apparently some of HP/Compaq's administrative tools are written in Python."
msgstr ""

# 3d12fdf4e18844b6aef2b701e596bb87
#: faq/installed.rst:32
msgid ""
"Many Unix-compatible operating systems, such as Mac OS X and some Linux "
"distributions, have Python installed by default; it's included in the base "
"installation."
msgstr ""

# 41661085769246e9990fc2ae2580eb90
#: faq/installed.rst:38
msgid "Can I delete Python?"
msgstr ""

# 577dd3af1bea4b04a5e5def981a95b70
#: faq/installed.rst:40
msgid "That depends on where Python came from."
msgstr ""

# 1ddeee07487d4ea3ba479322192def26
#: faq/installed.rst:42
msgid ""
"If someone installed it deliberately, you can remove it without hurting "
"anything.  On Windows, use the Add/Remove Programs icon in the Control Panel."
msgstr ""

# d2ff943e5f8a4a5ea7ea98f47419dfe1
#: faq/installed.rst:45
msgid ""
"If Python was installed by a third-party application, you can also remove "
"it, but that application will no longer work.  You should use that "
"application's uninstaller rather than removing Python directly."
msgstr ""

# 3467be72dc394e448ad412d23d80c4da
#: faq/installed.rst:49
msgid ""
"If Python came with your operating system, removing it is not recommended.  "
"If you remove it, whatever tools were written in Python will no longer run, "
"and some of them might be important to you.  Reinstalling the whole system "
"would then be required to fix things again."
msgstr ""

# 24031087d79149d695e552c1591df6fb
#: faq/library.rst:5
msgid "Library and Extension FAQ"
msgstr ""

# 3da66899b5504b258d39c7c4c7ac4390
#: faq/library.rst:10
msgid "General Library Questions"
msgstr ""

# 9719b5abba344eb69aa4203f23b1329b
#: faq/library.rst:13
msgid "How do I find a module or application to perform task X?"
msgstr ""

# 516980af6b9c4b43b328dbd813705852
#: faq/library.rst:15
msgid ""
"Check :ref:`the Library Reference <library-index>` to see if there's a "
"relevant standard library module.  (Eventually you'll learn what's in the "
"standard library and will be able to skip this step.)"
msgstr ""

# 0c9a0e8b562d453eac916361e49df56b
#: faq/library.rst:19
msgid ""
"For third-party packages, search the `Python Package Index <http://pypi."
"python.org/pypi>`_ or try `Google <http://www.google.com>`_ or another Web "
"search engine.  Searching for \"Python\" plus a keyword or two for your "
"topic of interest will usually find something helpful."
msgstr ""

# 33f4486f46734d90be2f4823fffe06b2
#: faq/library.rst:26
msgid "Where is the math.py (socket.py, regex.py, etc.) source file?"
msgstr ""

# d2404decb67346dcae4e61e5b0cececb
#: faq/library.rst:28
msgid ""
"If you can't find a source file for a module it may be a built-in or "
"dynamically loaded module implemented in C, C++ or other compiled language. "
"In this case you may not have the source file or it may be something like :"
"file:`mathmodule.c`, somewhere in a C source directory (not on the Python "
"Path)."
msgstr ""

# 8c746e367bec455b93917978506ca3d1
#: faq/library.rst:33
msgid "There are (at least) three kinds of modules in Python:"
msgstr ""

# ed2aeb7170104194bac2543653f2ffac
#: faq/library.rst:35
msgid "modules written in Python (.py);"
msgstr ""

# 554d8ffcf7844660b42772383bf375fd
#: faq/library.rst:36
msgid ""
"modules written in C and dynamically loaded (.dll, .pyd, .so, .sl, etc);"
msgstr ""

# 7cd11ba47c724924b045096be7c6e4a1
#: faq/library.rst:37
msgid ""
"modules written in C and linked with the interpreter; to get a list of "
"these, type::"
msgstr ""

# a4a4d0c1bedc4737aace5a5b4e21e51c
#: faq/library.rst:45
msgid "How do I make a Python script executable on Unix?"
msgstr ""

# 1172fb09ccf64f8eb35a52d205b6f8b4
#: faq/library.rst:47
msgid ""
"You need to do two things: the script file's mode must be executable and the "
"first line must begin with ``#!`` followed by the path of the Python "
"interpreter."
msgstr ""

# b062ef195a444fe19287a6cbcfa2df6e
#: faq/library.rst:51
msgid ""
"The first is done by executing ``chmod +x scriptfile`` or perhaps ``chmod "
"755 scriptfile``."
msgstr ""

# bb24ec90f4ec450eaca993be93ac3fa5
#: faq/library.rst:54
msgid ""
"The second can be done in a number of ways.  The most straightforward way is "
"to write ::"
msgstr ""

# cfc83e264a4441038403c155f18a6c6d
#: faq/library.rst:59
msgid ""
"as the very first line of your file, using the pathname for where the Python "
"interpreter is installed on your platform."
msgstr ""

# 256c258dc55745a198dbcc6d98aa9185
#: faq/library.rst:62
msgid ""
"If you would like the script to be independent of where the Python "
"interpreter lives, you can use the :program:`env` program.  Almost all Unix "
"variants support the following, assuming the Python interpreter is in a "
"directory on the user's :envvar:`PATH`::"
msgstr ""

# ee5bc9ed50e243e89037134dcb331641
#: faq/library.rst:69
msgid ""
"*Don't* do this for CGI scripts.  The :envvar:`PATH` variable for CGI "
"scripts is often very minimal, so you need to use the actual absolute "
"pathname of the interpreter."
msgstr ""

# 8ab81b1fe1e1499ebc5ed68f1e30764c
#: faq/library.rst:73
msgid ""
"Occasionally, a user's environment is so full that the :program:`/usr/bin/"
"env` program fails; or there's no env program at all.  In that case, you can "
"try the following hack (due to Alex Rezinsky)::"
msgstr ""

# 358628f7b39441fba4a6ba909a762b7c
#: faq/library.rst:82
msgid ""
"The minor disadvantage is that this defines the script's __doc__ string. "
"However, you can fix that by adding ::"
msgstr ""

# bea8f0ff1ac34e21bdce4e5194a5c0d2
#: faq/library.rst:90
msgid "Is there a curses/termcap package for Python?"
msgstr ""

# 93475b665a4f495a956afdd498335798
#: faq/library.rst:94
msgid ""
"For Unix variants: The standard Python source distribution comes with a "
"curses module in the :source:`Modules` subdirectory, though it's not "
"compiled by default. (Note that this is not available in the Windows "
"distribution -- there is no curses module for Windows.)"
msgstr ""

# 656d010ab81d49a4a1969cafb740b13e
#: faq/library.rst:99
msgid ""
"The :mod:`curses` module supports basic curses features as well as many "
"additional functions from ncurses and SYSV curses such as colour, "
"alternative character set support, pads, and mouse support. This means the "
"module isn't compatible with operating systems that only have BSD curses, "
"but there don't seem to be any currently maintained OSes that fall into this "
"category."
msgstr ""

# a5f5d016ab834a359d8b1b2b7cad0aba
#: faq/library.rst:105
msgid ""
"For Windows: use `the consolelib module <http://effbot.org/zone/console-"
"index.htm>`_."
msgstr ""

# 49ff5dfa377a4999a659a3d3580ed55a
#: faq/library.rst:110
msgid "Is there an equivalent to C's onexit() in Python?"
msgstr ""

# 427cf309c4a74fd89ed57f61aec78b49
#: faq/library.rst:112
msgid ""
"The :mod:`atexit` module provides a register function that is similar to "
"C's :c:func:`onexit`."
msgstr ""

# 0ed412972c814660b6a5da74aef01702
#: faq/library.rst:117
msgid "Why don't my signal handlers work?"
msgstr ""

# 7c5973b0523e4be0a6fd65a41d6bb9c4
#: faq/library.rst:119
msgid ""
"The most common problem is that the signal handler is declared with the "
"wrong argument list.  It is called as ::"
msgstr ""

# e167870b41ba4c23ba9e6fce355943ed
#: faq/library.rst:124
msgid "so it should be declared with two arguments::"
msgstr ""

# a09d738a56004118bdd11e1528e6363e
#: faq/library.rst:131
msgid "Common tasks"
msgstr ""

# ed222808bc414ddb97e29aed4f7bd44c
#: faq/library.rst:134
msgid "How do I test a Python program or component?"
msgstr ""

# 12dd079c180a45db922a46a5ed072db8
#: faq/library.rst:136
msgid ""
"Python comes with two testing frameworks.  The :mod:`doctest` module finds "
"examples in the docstrings for a module and runs them, comparing the output "
"with the expected output given in the docstring."
msgstr ""

# 4c64335799234dd78b8e6ae59aedc91f
#: faq/library.rst:140
msgid ""
"The :mod:`unittest` module is a fancier testing framework modelled on Java "
"and Smalltalk testing frameworks."
msgstr ""

# 4661e1489d664b4a9e065cbbc88e09d3
#: faq/library.rst:143
msgid ""
"To make testing easier, you should use good modular design in your program. "
"Your program should have almost all functionality encapsulated in either "
"functions or class methods -- and this sometimes has the surprising and "
"delightful effect of making the program run faster (because local variable "
"accesses are faster than global accesses).  Furthermore the program should "
"avoid depending on mutating global variables, since this makes testing much "
"more difficult to do."
msgstr ""

# e060e46878494e56bda14eb8f9dcdf8e
#: faq/library.rst:151
msgid "The \"global main logic\" of your program may be as simple as ::"
msgstr ""

# c6d5ae31941a43a68c2e4270224b9002
#: faq/library.rst:156
msgid "at the bottom of the main module of your program."
msgstr ""

# b1023bea2ee94beab224edde63b34d42
#: faq/library.rst:158
msgid ""
"Once your program is organized as a tractable collection of functions and "
"class behaviours you should write test functions that exercise the "
"behaviours.  A test suite that automates a sequence of tests can be "
"associated with each module. This sounds like a lot of work, but since "
"Python is so terse and flexible it's surprisingly easy.  You can make coding "
"much more pleasant and fun by writing your test functions in parallel with "
"the \"production code\", since this makes it easy to find bugs and even "
"design flaws earlier."
msgstr ""

# 8e4a4ffa67ac4d66acfe97e8b90ed123
#: faq/library.rst:166
msgid ""
"\"Support modules\" that are not intended to be the main module of a program "
"may include a self-test of the module. ::"
msgstr ""

# 799b720774f6429aacb25fa02c3f1753
#: faq/library.rst:172
msgid ""
"Even programs that interact with complex external interfaces may be tested "
"when the external interfaces are unavailable by using \"fake\" interfaces "
"implemented in Python."
msgstr ""

# 1d8b8a5ba7414a2fbdd46fc9e3ae7606
#: faq/library.rst:178
msgid "How do I create documentation from doc strings?"
msgstr ""

# f2b0c8a6dcfe458fa2a6e378d1ef9093
#: faq/library.rst:180
msgid ""
"The :mod:`pydoc` module can create HTML from the doc strings in your Python "
"source code.  An alternative for creating API documentation purely from "
"docstrings is `epydoc <http://epydoc.sf.net/>`_.  `Sphinx <http://sphinx."
"pocoo.org>`_ can also include docstring content."
msgstr ""

# 3420ec2373ab41f1b3c9a3468d50eaf1
#: faq/library.rst:187
msgid "How do I get a single keypress at a time?"
msgstr ""

# 08d874063abc411ab87a164647c726c7
#: faq/library.rst:189
msgid ""
"For Unix variants there are several solutions.  It's straightforward to do "
"this using curses, but curses is a fairly large module to learn."
msgstr ""

# fd0565bf592e4d159d48825cabece71e
#: faq/library.rst:229
msgid "Threads"
msgstr ""

# 578ad8f63afc4af6aca51a4f8d2c96d9
#: faq/library.rst:232
msgid "How do I program using threads?"
msgstr ""

# 79405260aded4924b5db3b64e41ef188
#: faq/library.rst:234
msgid ""
"Be sure to use the :mod:`threading` module and not the :mod:`_thread` "
"module. The :mod:`threading` module builds convenient abstractions on top of "
"the low-level primitives provided by the :mod:`_thread` module."
msgstr ""

# 673e4cda4da843a9b69f1906992c1524
#: faq/library.rst:238
msgid ""
"Aahz has a set of slides from his threading tutorial that are helpful; see "
"http://www.pythoncraft.com/OSCON2001/."
msgstr ""

# 2916963583c747b999ab24e4b4ea2c6a
#: faq/library.rst:243
msgid "None of my threads seem to run: why?"
msgstr ""

# 9190169bebe5425fa1cccf375839f6fc
#: faq/library.rst:245
msgid ""
"As soon as the main thread exits, all threads are killed.  Your main thread "
"is running too quickly, giving the threads no time to do any work."
msgstr ""

# f254c085e9d542ecb60d614d1807b2d9
#: faq/library.rst:248
msgid ""
"A simple fix is to add a sleep to the end of the program that's long enough "
"for all the threads to finish::"
msgstr ""

# 732dc18a104f48fba1253a5fe1205497
#: faq/library.rst:262
msgid ""
"But now (on many platforms) the threads don't run in parallel, but appear to "
"run sequentially, one at a time!  The reason is that the OS thread scheduler "
"doesn't start a new thread until the previous thread is blocked."
msgstr ""

# 597d8f111e67481c8dddd9c5ad627a96
#: faq/library.rst:266
msgid "A simple fix is to add a tiny sleep to the start of the run function::"
msgstr ""

# 85bc6b6f7a43446fa5b26de611bf35d1
#: faq/library.rst:278
msgid ""
"Instead of trying to guess a good delay value for :func:`time.sleep`, it's "
"better to use some kind of semaphore mechanism.  One idea is to use the :mod:"
"`queue` module to create a queue object, let each thread append a token to "
"the queue when it finishes, and let the main thread read as many tokens from "
"the queue as there are threads."
msgstr ""

# c474f392c859447c81cef5b120ea48ad
#: faq/library.rst:286
msgid "How do I parcel out work among a bunch of worker threads?"
msgstr ""

# 7aca4fa85f1845c698678fc5cb1826a5
#: faq/library.rst:288
msgid ""
"The easiest way is to use the new :mod:`concurrent.futures` module, "
"especially the :mod:`~concurrent.futures.ThreadPoolExecutor` class."
msgstr ""

# 566caab8bbd7428f8c29be65ffb0c617
#: faq/library.rst:291
msgid ""
"Or, if you want fine control over the dispatching algorithm, you can write "
"your own logic manually.  Use the :mod:`queue` module to create a queue "
"containing a list of jobs.  The :class:`~queue.Queue` class maintains a list "
"of objects and has a ``.put(obj)`` method that adds items to the queue and a "
"``.get()`` method to return them.  The class will take care of the locking "
"necessary to ensure that each job is handed out exactly once."
msgstr ""

# 4e6d3f0b145648eb89ac470c21012395
#: faq/library.rst:298
msgid "Here's a trivial example::"
msgstr ""

# 8b6303bda2374b1d931653b7e117dd00
#: faq/library.rst:336
msgid "When run, this will produce the following output:"
msgstr ""

# 838ddecdd84b4266bc2c20ab647fc934
#: faq/library.rst:354
msgid ""
"Consult the module's documentation for more details; the :class:`~queue."
"Queue` class provides a featureful interface."
msgstr ""

# 9be22132a64b41259bca596febcd42d5
#: faq/library.rst:359
msgid "What kinds of global value mutation are thread-safe?"
msgstr ""

# 80270e07a0db4878bdbc355d92119316
#: faq/library.rst:361
msgid ""
"A :term:`global interpreter lock` (GIL) is used internally to ensure that "
"only one thread runs in the Python VM at a time.  In general, Python offers "
"to switch among threads only between bytecode instructions; how frequently "
"it switches can be set via :func:`sys.setswitchinterval`.  Each bytecode "
"instruction and therefore all the C implementation code reached from each "
"instruction is therefore atomic from the point of view of a Python program."
msgstr ""

# 3695e7e5bbd1478ca5d5e167ce2950f1
#: faq/library.rst:368
msgid ""
"In theory, this means an exact accounting requires an exact understanding of "
"the PVM bytecode implementation.  In practice, it means that operations on "
"shared variables of built-in data types (ints, lists, dicts, etc) that "
"\"look atomic\" really are."
msgstr ""

# 61c395c7efd547278ba01797057d6fb7
#: faq/library.rst:373
msgid ""
"For example, the following operations are all atomic (L, L1, L2 are lists, "
"D, D1, D2 are dicts, x, y are objects, i, j are ints)::"
msgstr ""

# 93f8312cf47f4d3fa577d76b04c7cf91
#: faq/library.rst:388
msgid "These aren't::"
msgstr ""

# 5763d2f096f747deab19c28609311da8
#: faq/library.rst:395
msgid ""
"Operations that replace other objects may invoke those other objects' :meth:"
"`__del__` method when their reference count reaches zero, and that can "
"affect things.  This is especially true for the mass updates to dictionaries "
"and lists.  When in doubt, use a mutex!"
msgstr ""

# a480f256214648eb8902144e87cb2cef
#: faq/library.rst:402
msgid "Can't we get rid of the Global Interpreter Lock?"
msgstr ""

# 48c816ea597540e7a340e5bd33877da8
#: faq/library.rst:406
msgid ""
"The :term:`global interpreter lock` (GIL) is often seen as a hindrance to "
"Python's deployment on high-end multiprocessor server machines, because a "
"multi-threaded Python program effectively only uses one CPU, due to the "
"insistence that (almost) all Python code can only run while the GIL is held."
msgstr ""

# 7fe7d4b2a9954fe4a3767527281de263
#: faq/library.rst:411
msgid ""
"Back in the days of Python 1.5, Greg Stein actually implemented a "
"comprehensive patch set (the \"free threading\" patches) that removed the "
"GIL and replaced it with fine-grained locking.  Adam Olsen recently did a "
"similar experiment in his `python-safethread <http://code.google.com/p/"
"python-safethread/>`_ project.  Unfortunately, both experiments exhibited a "
"sharp drop in single-thread performance (at least 30% slower), due to the "
"amount of fine-grained locking necessary to compensate for the removal of "
"the GIL."
msgstr ""

# 0ef66f35a71f4581b7f5cb2a3bcb1125
#: faq/library.rst:419
msgid ""
"This doesn't mean that you can't make good use of Python on multi-CPU "
"machines! You just have to be creative with dividing the work up between "
"multiple *processes* rather than multiple *threads*.  The :class:"
"`~concurrent.futures.ProcessPoolExecutor` class in the new :mod:`concurrent."
"futures` module provides an easy way of doing so; the :mod:`multiprocessing` "
"module provides a lower-level API in case you want more control over "
"dispatching of tasks."
msgstr ""

# d41a10d3135b47aeb2838e9d0c246992
#: faq/library.rst:427
msgid ""
"Judicious use of C extensions will also help; if you use a C extension to "
"perform a time-consuming task, the extension can release the GIL while the "
"thread of execution is in the C code and allow other threads to get some "
"work done.  Some standard library modules such as :mod:`zlib` and :mod:"
"`hashlib` already do this."
msgstr ""

# 00f1f0bb822547249b571219dff1f287
#: faq/library.rst:433
msgid ""
"It has been suggested that the GIL should be a per-interpreter-state lock "
"rather than truly global; interpreters then wouldn't be able to share "
"objects. Unfortunately, this isn't likely to happen either.  It would be a "
"tremendous amount of work, because many object implementations currently "
"have global state. For example, small integers and short strings are cached; "
"these caches would have to be moved to the interpreter state.  Other object "
"types have their own free list; these free lists would have to be moved to "
"the interpreter state. And so on."
msgstr ""

# ccb87ab551f546b4b7a5d082325abc00
#: faq/library.rst:442
msgid ""
"And I doubt that it can even be done in finite time, because the same "
"problem exists for 3rd party extensions.  It is likely that 3rd party "
"extensions are being written at a faster rate than you can convert them to "
"store all their global state in the interpreter state."
msgstr ""

# e225a71a39514efa8f0781edb54a1e73
#: faq/library.rst:447
msgid ""
"And finally, once you have multiple interpreters not sharing any state, what "
"have you gained over running each interpreter in a separate process?"
msgstr ""

# 2fdd183bed9b40828779b0aff8573c67
#: faq/library.rst:452
msgid "Input and Output"
msgstr "Les entrées/sorties"

# 3c86245db8d9482d8f9afd933994640b
#: faq/library.rst:455
msgid "How do I delete a file? (And other file questions...)"
msgstr ""

# 4596af83def3484191a4863360d63794
#: faq/library.rst:457
msgid ""
"Use ``os.remove(filename)`` or ``os.unlink(filename)``; for documentation, "
"see the :mod:`os` module.  The two functions are identical; :func:`~os."
"unlink` is simply the name of the Unix system call for this function."
msgstr ""

# ef6fcfb32283447fa05feca6c70ecbff
#: faq/library.rst:461
msgid ""
"To remove a directory, use :func:`os.rmdir`; use :func:`os.mkdir` to create "
"one. ``os.makedirs(path)`` will create any intermediate directories in "
"``path`` that don't exist. ``os.removedirs(path)`` will remove intermediate "
"directories as long as they're empty; if you want to delete an entire "
"directory tree and its contents, use :func:`shutil.rmtree`."
msgstr ""

# ad4aab8c9d174d57952e0a862a0f05cb
#: faq/library.rst:467
msgid "To rename a file, use ``os.rename(old_path, new_path)``."
msgstr ""

# 611d8d4df1024ee0af59650b189f8a1b
#: faq/library.rst:469
msgid ""
"To truncate a file, open it using ``f = open(filename, \"rb+\")``, and use "
"``f.truncate(offset)``; offset defaults to the current seek position.  "
"There's also ``os.ftruncate(fd, offset)`` for files opened with :func:`os."
"open`, where *fd* is the file descriptor (a small integer)."
msgstr ""

# 344cd301490f4325bc30a1c49e14471c
#: faq/library.rst:474
msgid ""
"The :mod:`shutil` module also contains a number of functions to work on "
"files including :func:`~shutil.copyfile`, :func:`~shutil.copytree`, and :"
"func:`~shutil.rmtree`."
msgstr ""

# db941bb7b5ec4b6fba7770311bb7785a
#: faq/library.rst:480
msgid "How do I copy a file?"
msgstr ""

# 333802abf27e4070b571ab6a785c90a3
#: faq/library.rst:482
msgid ""
"The :mod:`shutil` module contains a :func:`~shutil.copyfile` function.  Note "
"that on MacOS 9 it doesn't copy the resource fork and Finder info."
msgstr ""

# 8a54be70b8024999a8f98c9fc7ee79bd
#: faq/library.rst:487
msgid "How do I read (or write) binary data?"
msgstr ""

# 7851fa4694764effa1c998f0e302a1f5
#: faq/library.rst:489
msgid ""
"To read or write complex binary data formats, it's best to use the :mod:"
"`struct` module.  It allows you to take a string containing binary data "
"(usually numbers) and convert it to Python objects; and vice versa."
msgstr ""

# 74c3a684a1094e2ebebdac51b46e25e5
#: faq/library.rst:493
msgid ""
"For example, the following code reads two 2-byte integers and one 4-byte "
"integer in big-endian format from a file::"
msgstr ""

# 9841bd66e98d44ecbbfd94e684e6cb51
#: faq/library.rst:502
msgid ""
"The '>' in the format string forces big-endian data; the letter 'h' reads "
"one \"short integer\" (2 bytes), and 'l' reads one \"long integer\" (4 "
"bytes) from the string."
msgstr ""

# 3267654dbc5a4ddb8026f28ee4d23b1d
#: faq/library.rst:506
msgid ""
"For data that is more regular (e.g. a homogeneous list of ints or floats), "
"you can also use the :mod:`array` module."
msgstr ""

# e07211e4d4a448b09356408485069841
#: faq/library.rst:510
msgid ""
"To read and write binary data, it is mandatory to open the file in binary "
"mode (here, passing ``\"rb\"`` to :func:`open`).  If you use ``\"r\"`` "
"instead (the default), the file will be open in text mode and ``f.read()`` "
"will return :class:`str` objects rather than :class:`bytes` objects."
msgstr ""

# 51d891cf9d4b447f8709d48a548d2c27
#: faq/library.rst:518
msgid "I can't seem to use os.read() on a pipe created with os.popen(); why?"
msgstr ""

# c43936f06d3845398470b57c97f5a5f1
#: faq/library.rst:520
msgid ""
":func:`os.read` is a low-level function which takes a file descriptor, a "
"small integer representing the opened file.  :func:`os.popen` creates a high-"
"level file object, the same type returned by the built-in :func:`open` "
"function. Thus, to read *n* bytes from a pipe *p* created with :func:`os."
"popen`, you need to use ``p.read(n)``."
msgstr ""

# 47ffec40b7b8485abb10894948f43dfc
#: faq/library.rst:607
msgid "How do I access the serial (RS232) port?"
msgstr ""

# c7594f6b426644f29f20d0bb561a612d
#: faq/library.rst:609
msgid "For Win32, POSIX (Linux, BSD, etc.), Jython:"
msgstr ""

# f39b4914c7a24d1380a3c273375d79eb
#: faq/library.rst:611
msgid "http://pyserial.sourceforge.net"
msgstr ""

# 60cc62ecf61c4523b69892d5c47b9253
#: faq/library.rst:613
msgid "For Unix, see a Usenet post by Mitch Chapman:"
msgstr ""

# 5f2a344fb4db45629d22bcdce54ed096
#: faq/library.rst:615
msgid "http://groups.google.com/groups?selm=34A04430.CF9@ohioee.com"
msgstr ""

# 3273738bf9d940aeb1e4eaed642cd136
#: faq/library.rst:619
msgid "Why doesn't closing sys.stdout (stdin, stderr) really close it?"
msgstr ""

# f50e101bd5c54e378f1186d50781e53b
#: faq/library.rst:621
msgid ""
"Python :term:`file objects <file object>` are a high-level layer of "
"abstraction on low-level C file descriptors."
msgstr ""

# 87475336c45c489a90a3f17dec2d4905
#: faq/library.rst:624
msgid ""
"For most file objects you create in Python via the built-in :func:`open` "
"function, ``f.close()`` marks the Python file object as being closed from "
"Python's point of view, and also arranges to close the underlying C file "
"descriptor.  This also happens automatically in ``f``'s destructor, when "
"``f`` becomes garbage."
msgstr ""

# b9e3380ef74e469a8e36be722aae98a8
#: faq/library.rst:630
msgid ""
"But stdin, stdout and stderr are treated specially by Python, because of the "
"special status also given to them by C.  Running ``sys.stdout.close()`` "
"marks the Python-level file object as being closed, but does *not* close the "
"associated C file descriptor."
msgstr ""

# fa1072fb42024970be6dc686c7ba32e0
#: faq/library.rst:635
msgid ""
"To close the underlying C file descriptor for one of these three, you should "
"first be sure that's what you really want to do (e.g., you may confuse "
"extension modules trying to do I/O).  If it is, use :func:`os.close`::"
msgstr ""

# a4aeecfcc5f640e78bd3f19d43c46996
#: faq/library.rst:643
msgid "Or you can use the numeric constants 0, 1 and 2, respectively."
msgstr ""

# c9280518496d4a0d8cdef8e7dd2e2e2a
#: faq/library.rst:647
msgid "Network/Internet Programming"
msgstr ""

# b3af6f95d61543678db54e2313d7dd9a
#: faq/library.rst:650
msgid "What WWW tools are there for Python?"
msgstr ""

# e2262ef29e874cbc9b12d44e376bf383
#: faq/library.rst:652
msgid ""
"See the chapters titled :ref:`internet` and :ref:`netdata` in the Library "
"Reference Manual.  Python has many modules that will help you build server-"
"side and client-side web systems."
msgstr ""

# 92d5eca786484b2a91b3a7a29ac4b36c
#: faq/library.rst:658
msgid ""
"A summary of available frameworks is maintained by Paul Boddie at http://"
"wiki.python.org/moin/WebProgramming ."
msgstr ""

# c147b7e8f6db4d4daf985962894d4965
#: faq/library.rst:661
msgid ""
"Cameron Laird maintains a useful set of pages about Python web technologies "
"at http://phaseit.net/claird/comp.lang.python/web_python."
msgstr ""

# 6b6cb4b31d9a47fb9464eb692d9dcf00
#: faq/library.rst:666
msgid "How can I mimic CGI form submission (METHOD=POST)?"
msgstr ""

# 20c0ce1e52f142a590ed4c15df8d4bde
#: faq/library.rst:668
msgid ""
"I would like to retrieve web pages that are the result of POSTing a form. Is "
"there existing code that would let me do this easily?"
msgstr ""

# 57ebe1fecd2d42648874cf00ee32509b
#: faq/library.rst:671
msgid "Yes. Here's a simple example that uses urllib.request::"
msgstr ""

# 9058bdbf06c0406dbc373e1a755267c6
#: faq/library.rst:685
msgid ""
"Note that in general for percent-encoded POST operations, query strings must "
"be quoted using :func:`urllib.parse.urlencode`.  For example, to send "
"``name=Guy Steele, Jr.``::"
msgstr ""

#: faq/library.rst:693
msgid ":ref:`urllib-howto` for extensive examples."
msgstr ""

# 631de0a1c0f04e9bbbcde6122a6e965f
#: faq/library.rst:697
msgid "What module should I use to help with generating HTML?"
msgstr ""

# dd1797ab964f47b092265aa017f4f35f
#: faq/library.rst:701
msgid ""
"You can find a collection of useful links on the `Web Programming wiki page "
"<http://wiki.python.org/moin/WebProgramming>`_."
msgstr ""

# 1fbdc19bc01d42ba86b3cd1cc61e1fec
#: faq/library.rst:706
msgid "How do I send mail from a Python script?"
msgstr ""

# bf509ffebec4488881e06c2877dd00c7
#: faq/library.rst:708
msgid "Use the standard library module :mod:`smtplib`."
msgstr ""

# 5bbdede2ce5140b282e50a690cc95b17
#: faq/library.rst:710
msgid ""
"Here's a very simple interactive mail sender that uses it.  This method will "
"work on any host that supports an SMTP listener. ::"
msgstr ""

# f19144809b9e4d9185ae3c06edb68d69
#: faq/library.rst:730
msgid ""
"A Unix-only alternative uses sendmail.  The location of the sendmail program "
"varies between systems; sometimes it is ``/usr/lib/sendmail``, sometimes ``/"
"usr/sbin/sendmail``.  The sendmail manual page will help you out.  Here's "
"some sample code::"
msgstr ""

# 9b623f2fcaf64c6390f93bb4c4f2240b
#: faq/library.rst:749
msgid "How do I avoid blocking in the connect() method of a socket?"
msgstr ""

# 4f1820b952ca46f2879af9f0c705e826
#: faq/library.rst:751
msgid ""
"The :mod:`select` module is commonly used to help with asynchronous I/O on "
"sockets."
msgstr ""

# 1efc4a388ef148668e0c88d23566d06d
#: faq/library.rst:754
msgid ""
"To prevent the TCP connect from blocking, you can set the socket to non-"
"blocking mode.  Then when you do the ``connect()``, you will either connect "
"immediately (unlikely) or get an exception that contains the error number as "
"``.errno``. ``errno.EINPROGRESS`` indicates that the connection is in "
"progress, but hasn't finished yet.  Different OSes will return different "
"values, so you're going to have to check what's returned on your system."
msgstr ""

# 9e298c93853443409c17b06fda24b361
#: faq/library.rst:761
msgid ""
"You can use the ``connect_ex()`` method to avoid creating an exception.  It "
"will just return the errno value.  To poll, you can call ``connect_ex()`` "
"again later -- ``0`` or ``errno.EISCONN`` indicate that you're connected -- "
"or you can pass this socket to select to check if it's writable."
msgstr ""

# 288c1cc936ee4f9fb55af05d574bf55e
#: faq/library.rst:767
msgid ""
"The :mod:`asyncore` module presents a framework-like approach to the problem "
"of writing non-blocking networking code. The third-party `Twisted <http://"
"twistedmatrix.com/>`_ library is a popular and feature-rich alternative."
msgstr ""

# 0377bc36db084b00ba2ca50eed04f4b2
#: faq/library.rst:774
msgid "Databases"
msgstr ""

# f3fccd7268eb40e69f1e5a75d4d73c98
#: faq/library.rst:777
msgid "Are there any interfaces to database packages in Python?"
msgstr ""

# c5251f1f4c6f4efda71de89e5eb43dc2
#: faq/library.rst:781
msgid ""
"Interfaces to disk-based hashes such as :mod:`DBM <dbm.ndbm>` and :mod:`GDBM "
"<dbm.gnu>` are also included with standard Python.  There is also the :mod:"
"`sqlite3` module, which provides a lightweight disk-based relational "
"database."
msgstr ""

# 362fd00b79c847c39441692c7de0c72c
#: faq/library.rst:786
msgid ""
"Support for most relational databases is available.  See the "
"`DatabaseProgramming wiki page <http://wiki.python.org/moin/"
"DatabaseProgramming>`_ for details."
msgstr ""

# 6bf8c4f831e047ea9b547e122441c4c1
#: faq/library.rst:792
msgid "How do you implement persistent objects in Python?"
msgstr ""

# 866feb60aa194a5bb5bcbed8f8731191
#: faq/library.rst:794
msgid ""
"The :mod:`pickle` library module solves this in a very general way (though "
"you still can't store things like open files, sockets or windows), and the :"
"mod:`shelve` library module uses pickle and (g)dbm to create persistent "
"mappings containing arbitrary Python objects."
msgstr ""

# 8ea26d54ff1349ca85933b1a83e36f07
#: faq/library.rst:801
msgid "Mathematics and Numerics"
msgstr ""

# 3f37cc95a241404981d278109969ac64
#: faq/library.rst:804
msgid "How do I generate random numbers in Python?"
msgstr ""

# 237625d072824e0ea3d20387710d6d42
#: faq/library.rst:806
msgid ""
"The standard module :mod:`random` implements a random number generator.  "
"Usage is simple::"
msgstr ""

# 9502b7ca35f5411eb7df8d9195c04ae3
#: faq/library.rst:812
msgid "This returns a random floating point number in the range [0, 1)."
msgstr ""

# 2a86ac8e9e3c487a9920e68a2a8b2233
#: faq/library.rst:814
msgid ""
"There are also many other specialized generators in this module, such as:"
msgstr ""

# d1e5d9c4ea224fd1b65e5c402d956426
#: faq/library.rst:816
msgid "``randrange(a, b)`` chooses an integer in the range [a, b)."
msgstr ""

# b615187c7d7b4fc99eec4af05e49f46f
#: faq/library.rst:817
msgid "``uniform(a, b)`` chooses a floating point number in the range [a, b)."
msgstr ""

# 0d057d168d4e48e0a50f7bca3fff983f
#: faq/library.rst:818
msgid ""
"``normalvariate(mean, sdev)`` samples the normal (Gaussian) distribution."
msgstr ""

# 3331a9471d5c4011acf670531e4944ca
#: faq/library.rst:820
msgid "Some higher-level functions operate on sequences directly, such as:"
msgstr ""

# e98f20ec72994549aab2189ffb7c4ea9
#: faq/library.rst:822
msgid "``choice(S)`` chooses random element from a given sequence"
msgstr ""

# b8a6cd1aff9c4d13b6b461e9ba00b891
#: faq/library.rst:823
msgid "``shuffle(L)`` shuffles a list in-place, i.e. permutes it randomly"
msgstr ""

# b4e830ad69fd466b9ff5ea0246c980a8
#: faq/library.rst:825
msgid ""
"There's also a ``Random`` class you can instantiate to create independent "
"multiple random number generators."
msgstr ""

# d0c23cdf9cab40899b7b21927545abe9
#: faq/programming.rst:5
msgid "Programming FAQ"
msgstr ""

# 69653b7024f0459387a0a852585e6656
#: faq/programming.rst:10
msgid "General Questions"
msgstr ""

# 64af9577ef3344769591cd31130cfeaf
#: faq/programming.rst:13
msgid ""
"Is there a source code level debugger with breakpoints, single-stepping, "
"etc.?"
msgstr ""

# 83b2f400a1c146e3ace3f6b13ea22d2c
#: faq/programming.rst:17
msgid ""
"The pdb module is a simple but adequate console-mode debugger for Python. It "
"is part of the standard Python library, and is :mod:`documented in the "
"Library Reference Manual <pdb>`. You can also write your own debugger by "
"using the code for pdb as an example."
msgstr ""

# 5e41bd6f0ad946488816ce2fc3f7480c
#: faq/programming.rst:22
msgid ""
"The IDLE interactive development environment, which is part of the standard "
"Python distribution (normally available as Tools/scripts/idle), includes a "
"graphical debugger.  There is documentation for the IDLE debugger at http://"
"www.python.org/idle/doc/idle2.html#Debugger."
msgstr ""

# 9bb8363f43ae47ef896d324a22ad6cdb
#: faq/programming.rst:27
msgid ""
"PythonWin is a Python IDE that includes a GUI debugger based on pdb.  The "
"Pythonwin debugger colors breakpoints and has quite a few cool features such "
"as debugging non-Pythonwin programs.  Pythonwin is available as part of the "
"`Python for Windows Extensions <http://sourceforge.net/projects/pywin32/>`__ "
"project and as a part of the ActivePython distribution (see http://www."
"activestate.com/Products/ActivePython/index.html)."
msgstr ""

# 0312f5f158cc4ea0a71c523af438a041
#: faq/programming.rst:34
msgid ""
"`Boa Constructor <http://boa-constructor.sourceforge.net/>`_ is an IDE and "
"GUI builder that uses wxWidgets.  It offers visual frame creation and "
"manipulation, an object inspector, many views on the source like object "
"browsers, inheritance hierarchies, doc string generated html documentation, "
"an advanced debugger, integrated help, and Zope support."
msgstr ""

# ed98df01b1154ab28d5340a60a5f1705
#: faq/programming.rst:40
msgid ""
"`Eric <http://www.die-offenbachs.de/eric/index.html>`_ is an IDE built on "
"PyQt and the Scintilla editing component."
msgstr ""

# 8e5b31f63485455a95689730dcd78648
#: faq/programming.rst:43
msgid ""
"Pydb is a version of the standard Python debugger pdb, modified for use with "
"DDD (Data Display Debugger), a popular graphical debugger front end.  Pydb "
"can be found at http://bashdb.sourceforge.net/pydb/ and DDD can be found at "
"http://www.gnu.org/software/ddd."
msgstr ""

# 4c4e9ea4b8bc4cf7a5a1f0930f808d3b
#: faq/programming.rst:48
msgid ""
"There are a number of commercial Python IDEs that include graphical "
"debuggers. They include:"
msgstr ""

# b8c6d8b482c648ad83a537affb8d0f79
#: faq/programming.rst:51
msgid "Wing IDE (http://wingware.com/)"
msgstr ""

# 5ca55e812b53451592bf9e8a890aa614
#: faq/programming.rst:52
msgid "Komodo IDE (http://www.activestate.com/Products/Komodo)"
msgstr ""

# 685d1dd02bca4ca493529295da79a3ba
#: faq/programming.rst:56
msgid "Is there a tool to help find bugs or perform static analysis?"
msgstr ""

# 8ceb6735bfd442b5b0318a99fac01a73
#: faq/programming.rst:60
msgid ""
"PyChecker is a static analysis tool that finds bugs in Python source code "
"and warns about code complexity and style.  You can get PyChecker from "
"http://pychecker.sf.net."
msgstr ""

# 6132e266a0d1461bb5a5a2fc4b4cf515
#: faq/programming.rst:64
msgid ""
"`Pylint <http://www.logilab.org/projects/pylint>`_ is another tool that "
"checks if a module satisfies a coding standard, and also makes it possible "
"to write plug-ins to add a custom feature.  In addition to the bug checking "
"that PyChecker performs, Pylint offers some additional features such as "
"checking line length, whether variable names are well-formed according to "
"your coding standard, whether declared interfaces are fully implemented, and "
"more. http://www.logilab.org/card/pylint_manual provides a full list of "
"Pylint's features."
msgstr ""

# e10876b6cc29402698729d6ef470ffd5
#: faq/programming.rst:75
msgid "How can I create a stand-alone binary from a Python script?"
msgstr ""

# 637f8a4479a845ce810bd1b09e4a88cf
#: faq/programming.rst:77
msgid ""
"You don't need the ability to compile Python to C code if all you want is a "
"stand-alone program that users can download and run without having to "
"install the Python distribution first.  There are a number of tools that "
"determine the set of modules required by a program and bind these modules "
"together with a Python binary to produce a single executable."
msgstr ""

# f37e77335d4c4f80afcf282b93df34ec
#: faq/programming.rst:83
msgid ""
"One is to use the freeze tool, which is included in the Python source tree "
"as ``Tools/freeze``. It converts Python byte code to C arrays; a C compiler "
"you can embed all your modules into a new program, which is then linked with "
"the standard Python modules."
msgstr ""

# 52f4236c61664cc78d3c2174f41eba23
#: faq/programming.rst:88
msgid ""
"It works by scanning your source recursively for import statements (in both "
"forms) and looking for the modules in the standard Python path as well as in "
"the source directory (for built-in modules).  It then turns the bytecode for "
"modules written in Python into C code (array initializers that can be turned "
"into code objects using the marshal module) and creates a custom-made config "
"file that only contains those built-in modules which are actually used in "
"the program.  It then compiles the generated C code and links it with the "
"rest of the Python interpreter to form a self-contained binary which acts "
"exactly like your script."
msgstr ""

# 087fd708b5344134895de56c5268e10d
#: faq/programming.rst:97
msgid ""
"Obviously, freeze requires a C compiler.  There are several other utilities "
"which don't. One is Thomas Heller's py2exe (Windows only) at"
msgstr ""

# c1e17b0c03a54f778287f89f148728b3
#: faq/programming.rst:100
msgid "http://www.py2exe.org/"
msgstr ""

# b5848b5858754fafb7a49f042ecc19d8
#: faq/programming.rst:102
msgid ""
"Another is Christian Tismer's `SQFREEZE <http://starship.python.net/crew/"
"pirx>`_ which appends the byte code to a specially-prepared Python "
"interpreter that can find the byte code in the executable."
msgstr ""

# 524de35b17454c92b9882c6e0420dc87
#: faq/programming.rst:106
msgid ""
"Other tools include Fredrik Lundh's `Squeeze <http://www.pythonware.com/"
"products/python/squeeze>`_ and Anthony Tuininga's `cx_Freeze <http://"
"starship.python.net/crew/atuining/cx_Freeze/index.html>`_."
msgstr ""

# ae0165eb619b4cd0b0ac6c9546640cf8
#: faq/programming.rst:112
msgid "Are there coding standards or a style guide for Python programs?"
msgstr ""

# ca68b378bd514f2a9fafd06a1744083b
#: faq/programming.rst:114
msgid ""
"Yes.  The coding style required for standard library modules is documented "
"as :pep:`8`."
msgstr ""

# 502ec0ccc0a74bf885f2edae4ecad0bf
#: faq/programming.rst:119
msgid "Core Language"
msgstr ""

# 77465f46e93a48609d193d2bea342b47
#: faq/programming.rst:122
msgid "Why am I getting an UnboundLocalError when the variable has a value?"
msgstr ""

# 478b06e923344af09e9c2a50c11bc9dc
#: faq/programming.rst:124
msgid ""
"It can be a surprise to get the UnboundLocalError in previously working code "
"when it is modified by adding an assignment statement somewhere in the body "
"of a function."
msgstr ""

# 89e7d674180444f4896521e7d1c18467
#: faq/programming.rst:128
msgid "This code:"
msgstr ""

# da8b07055d8f4c80998fe95126a31468
#: faq/programming.rst:136
msgid "works, but this code:"
msgstr ""

# 80376a6d80ae4e69abbb96a35234de9d
#: faq/programming.rst:143
msgid "results in an UnboundLocalError:"
msgstr ""

# b88d3b9e58a3412e9a0c114b23ac7607
#: faq/programming.rst:150
msgid ""
"This is because when you make an assignment to a variable in a scope, that "
"variable becomes local to that scope and shadows any similarly named "
"variable in the outer scope.  Since the last statement in foo assigns a new "
"value to ``x``, the compiler recognizes it as a local variable.  "
"Consequently when the earlier ``print(x)`` attempts to print the "
"uninitialized local variable and an error results."
msgstr ""

# 610746ad89d6414298d700a8c8bcacf1
#: faq/programming.rst:157
msgid ""
"In the example above you can access the outer scope variable by declaring it "
"global:"
msgstr ""

# d588c9ffde5e4341897d243c825145d1
#: faq/programming.rst:168
msgid ""
"This explicit declaration is required in order to remind you that (unlike "
"the superficially analogous situation with class and instance variables) you "
"are actually modifying the value of the variable in the outer scope:"
msgstr ""

# 9c17178854e44bfdb70f31f300f389aa
#: faq/programming.rst:175
msgid ""
"You can do a similar thing in a nested scope using the :keyword:`nonlocal` "
"keyword:"
msgstr ""

# 7c43017e4914429e8a338641cb94b0be
#: faq/programming.rst:192
msgid "What are the rules for local and global variables in Python?"
msgstr ""

# 10225dff81c24adf894b849c186da1b2
#: faq/programming.rst:194
msgid ""
"In Python, variables that are only referenced inside a function are "
"implicitly global.  If a variable is assigned a new value anywhere within "
"the function's body, it's assumed to be a local.  If a variable is ever "
"assigned a new value inside the function, the variable is implicitly local, "
"and you need to explicitly declare it as 'global'."
msgstr ""

# d5cc06dfe35744deace98af9b3300bde
#: faq/programming.rst:200
msgid ""
"Though a bit surprising at first, a moment's consideration explains this.  "
"On one hand, requiring :keyword:`global` for assigned variables provides a "
"bar against unintended side-effects.  On the other hand, if ``global`` was "
"required for all global references, you'd be using ``global`` all the time.  "
"You'd have to declare as global every reference to a built-in function or to "
"a component of an imported module.  This clutter would defeat the usefulness "
"of the ``global`` declaration for identifying side-effects."
msgstr ""

# e59d67ee11844a4bb6ae4765c352c456
#: faq/programming.rst:210
msgid ""
"Why do lambdas defined in a loop with different values all return the same "
"result?"
msgstr ""

# 4ee6807f492a45d2adb6060967ebf856
#: faq/programming.rst:212
msgid ""
"Assume you use a for loop to define a few different lambdas (or even plain "
"functions), e.g.::"
msgstr ""

# 56ff891d4ef34f379422d8095e37584e
#: faq/programming.rst:219
msgid ""
"This gives you a list that contains 5 lambdas that calculate ``x**2``.  You "
"might expect that, when called, they would return, respectively, ``0``, "
"``1``, ``4``, ``9``, and ``16``.  However, when you actually try you will "
"see that they all return ``16``::"
msgstr ""

# 96bdc1341fcc4176a13251152d9104ba
#: faq/programming.rst:229
msgid ""
"This happens because ``x`` is not local to the lambdas, but is defined in "
"the outer scope, and it is accessed when the lambda is called --- not when "
"it is defined.  At the end of the loop, the value of ``x`` is ``4``, so all "
"the functions now return ``4**2``, i.e. ``16``.  You can also verify this by "
"changing the value of ``x`` and see how the results of the lambdas change::"
msgstr ""

# de8c914e39034e49ba2824d96e815970
#: faq/programming.rst:239
msgid ""
"In order to avoid this, you need to save the values in variables local to "
"the lambdas, so that they don't rely on the value of the global ``x``::"
msgstr ""

# 4681a96d7e014714929637125356f523
#: faq/programming.rst:246
msgid ""
"Here, ``n=x`` creates a new variable ``n`` local to the lambda and computed "
"when the lambda is defined so that it has the same value that ``x`` had at "
"that point in the loop.  This means that the value of ``n`` will be ``0`` in "
"the first lambda, ``1`` in the second, ``2`` in the third, and so on. "
"Therefore each lambda will now return the correct result::"
msgstr ""

# bcd405fd392348ee932adb3d49a09096
#: faq/programming.rst:257
msgid ""
"Note that this behaviour is not peculiar to lambdas, but applies to regular "
"functions too."
msgstr ""

# 78c97580a48f41f8a7ef560a8c433d5e
#: faq/programming.rst:262
msgid "How do I share global variables across modules?"
msgstr ""

# 05ee468757774d0b90a11aa58bb1c36b
#: faq/programming.rst:264
msgid ""
"The canonical way to share information across modules within a single "
"program is to create a special module (often called config or cfg).  Just "
"import the config module in all modules of your application; the module then "
"becomes available as a global name.  Because there is only one instance of "
"each module, any changes made to the module object get reflected "
"everywhere.  For example:"
msgstr ""

# 29427186942d4cd5b1400d9901797bdc
#: faq/programming.rst:270
msgid "config.py::"
msgstr ""

# 59f9c4ef92984faca3e1ffcc4197cf95
#: faq/programming.rst:274
msgid "mod.py::"
msgstr ""

# 888e691644424d1696b7c29c7a0d6019
#: faq/programming.rst:279
msgid "main.py::"
msgstr ""

# dc15b25e4f964b578e53f11f74d882dd
#: faq/programming.rst:285
msgid ""
"Note that using a module is also the basis for implementing the Singleton "
"design pattern, for the same reason."
msgstr ""

# 3ea109b3a6884e5985b5d594be1f0938
#: faq/programming.rst:290
msgid "What are the \"best practices\" for using import in a module?"
msgstr ""

# fcf9d809ffce4e1b8f174a88f9fa4ea2
#: faq/programming.rst:292
msgid ""
"In general, don't use ``from modulename import *``.  Doing so clutters the "
"importer's namespace.  Some people avoid this idiom even with the few "
"modules that were designed to be imported in this manner.  Modules designed "
"in this manner include :mod:`tkinter`, and :mod:`threading`."
msgstr ""

# 3d1ebf2959804db0a8bdaf652f99d1bf
#: faq/programming.rst:297
msgid ""
"Import modules at the top of a file.  Doing so makes it clear what other "
"modules your code requires and avoids questions of whether the module name "
"is in scope. Using one import per line makes it easy to add and delete "
"module imports, but using multiple imports per line uses less screen space."
msgstr ""

# 35ddb98796c6456da2e32605fa7222da
#: faq/programming.rst:302
msgid "It's good practice if you import modules in the following order:"
msgstr ""

# 62a1af34e51641858d8f04a6f1aca598
#: faq/programming.rst:304
msgid "standard library modules -- e.g. ``sys``, ``os``, ``getopt``, ``re``"
msgstr ""

# 8f235517cc444f018d5bc3ee4a6fb6e6
#: faq/programming.rst:305
msgid ""
"third-party library modules (anything installed in Python's site-packages "
"directory) -- e.g. mx.DateTime, ZODB, PIL.Image, etc."
msgstr ""

# a4e608ea656c4e90b4595ae933ceb750
#: faq/programming.rst:307
msgid "locally-developed modules"
msgstr ""

# 9ebfff50f3bd4ecf9908ff6412b4815c
#: faq/programming.rst:309
msgid ""
"Never use relative package imports.  If you're writing code that's in the "
"``package.sub.m1`` module and want to import ``package.sub.m2``, do not just "
"write ``from . import m2``, even though it's legal.  Write ``from package."
"sub import m2`` instead.  See :pep:`328` for details."
msgstr ""

# e7694dbded8c48fd9a3a3c98d924e657
#: faq/programming.rst:314
msgid ""
"It is sometimes necessary to move imports to a function or class to avoid "
"problems with circular imports.  Gordon McMillan says:"
msgstr ""

# 2d93a76770ba45559891ba950895cc38
#: faq/programming.rst:317
msgid ""
"Circular imports are fine where both modules use the \"import <module>\" "
"form of import.  They fail when the 2nd module wants to grab a name out of "
"the first (\"from module import name\") and the import is at the top level.  "
"That's because names in the 1st are not yet available, because the first "
"module is busy importing the 2nd."
msgstr ""

# fc90e7bde7424bb4af76b2a1e0b9b50c
#: faq/programming.rst:323
msgid ""
"In this case, if the second module is only used in one function, then the "
"import can easily be moved into that function.  By the time the import is "
"called, the first module will have finished initializing, and the second "
"module can do its import."
msgstr ""

# 3346172b78b742758b7c62bed6892587
#: faq/programming.rst:328
msgid ""
"It may also be necessary to move imports out of the top level of code if "
"some of the modules are platform-specific.  In that case, it may not even be "
"possible to import all of the modules at the top of the file.  In this case, "
"importing the correct modules in the corresponding platform-specific code is "
"a good option."
msgstr ""

# 0105037d4e764e3fb1a500f8ffe39d9f
#: faq/programming.rst:333
msgid ""
"Only move imports into a local scope, such as inside a function definition, "
"if it's necessary to solve a problem such as avoiding a circular import or "
"are trying to reduce the initialization time of a module.  This technique is "
"especially helpful if many of the imports are unnecessary depending on how "
"the program executes.  You may also want to move imports into a function if "
"the modules are only ever used in that function.  Note that loading a module "
"the first time may be expensive because of the one time initialization of "
"the module, but loading a module multiple times is virtually free, costing "
"only a couple of dictionary lookups.  Even if the module name has gone out "
"of scope, the module is probably available in :data:`sys.modules`."
msgstr ""

# 166138d99d3f40d98733353bb5a409c6
#: faq/programming.rst:344
msgid ""
"If only instances of a specific class use a module, then it is reasonable to "
"import the module in the class's ``__init__`` method and then assign the "
"module to an instance variable so that the module is always available (via "
"that instance variable) during the life of the object.  Note that to delay "
"an import until the class is instantiated, the import must be inside a "
"method.  Putting the import inside the class but outside of any method still "
"causes the import to occur when the module is initialized."
msgstr ""

# db820b15db6d46f69572344eb2ffaa26
#: faq/programming.rst:354
msgid ""
"How can I pass optional or keyword parameters from one function to another?"
msgstr ""

# fc9548ea85f544128798a85d01e89bfc
#: faq/programming.rst:356
msgid ""
"Collect the arguments using the ``*`` and ``**`` specifiers in the "
"function's parameter list; this gives you the positional arguments as a "
"tuple and the keyword arguments as a dictionary.  You can then pass these "
"arguments when calling another function by using ``*`` and ``**``::"
msgstr ""

# da5614f03a674db0bc9e58e2bfa18b31
#: faq/programming.rst:375
msgid "What is the difference between arguments and parameters?"
msgstr ""

# a03e9c86090d460783703cc35f3a3587
#: faq/programming.rst:377
msgid ""
":term:`Parameters <parameter>` are defined by the names that appear in a "
"function definition, whereas :term:`arguments <argument>` are the values "
"actually passed to a function when calling it.  Parameters define what types "
"of arguments a function can accept.  For example, given the function "
"definition::"
msgstr ""

# 4468450b1fb4469bb345d8e935149834
#: faq/programming.rst:385
msgid ""
"*foo*, *bar* and *kwargs* are parameters of ``func``.  However, when calling "
"``func``, for example::"
msgstr ""

# 11b8ad730bc54567b796bba4b2c94851
#: faq/programming.rst:390
msgid "the values ``42``, ``314``, and ``somevar`` are arguments."
msgstr ""

# 74f355be290a4a47a4cb1fabc0db5e81
#: faq/programming.rst:394
msgid "How do I write a function with output parameters (call by reference)?"
msgstr ""

# 4bbff3196808493a94597a2b8ed8a73a
#: faq/programming.rst:396
msgid ""
"Remember that arguments are passed by assignment in Python.  Since "
"assignment just creates references to objects, there's no alias between an "
"argument name in the caller and callee, and so no call-by-reference per se.  "
"You can achieve the desired effect in a number of ways."
msgstr ""

# 56af6ff2a10540d6b875cd2605fc5e28
#: faq/programming.rst:401
msgid "By returning a tuple of the results::"
msgstr ""

# 76ccb1cd395e4639b56381e21b4b9395
#: faq/programming.rst:412
msgid "This is almost always the clearest solution."
msgstr ""

# 25714268f56d402887ceced9f8892700
#: faq/programming.rst:414
msgid ""
"By using global variables.  This isn't thread-safe, and is not recommended."
msgstr ""
"En utilisant des variables globales. Ce qui n'est pas thread-safe, et n'est "
"donc pas recommandé."

# 5dae7a69b83f4264aa0163227c1590ae
#: faq/programming.rst:416
msgid "By passing a mutable (changeable in-place) object::"
msgstr "En passant un objet mutable (modifiable par remplacement)::"

# cff5b97e81224b2289cf5c178ac4c1d5
#: faq/programming.rst:426
msgid "By passing in a dictionary that gets mutated::"
msgstr "En utilisant un dictionnaire, qui est modifié (en place)."

# 9a84dbdb7dc64492a2d1a61a336a6a71
#: faq/programming.rst:436
msgid "Or bundle up values in a class instance::"
msgstr "Ou regrouper les valeurs dans une instance de classe::"

# 22d5746fefae40e1ab23c3be79ba369a
#: faq/programming.rst:452
msgid "There's almost never a good reason to get this complicated."
msgstr ""
"Il n'y a pratiquement jamais de bonne raison de faire quelque chose d'aussi "
"compliqué."

# b0349c7d59c4440bad6a5f47a543ddad
#: faq/programming.rst:454
msgid "Your best choice is to return a tuple containing the multiple results."
msgstr ""
"Votre meilleure option est de renvoyer un tuple contenant les résultats "
"multiples."

# d58c201c65214f9e93fb77bf86ed92ea
#: faq/programming.rst:458
msgid "How do you make a higher order function in Python?"
msgstr "Comment construire une fonction de grand ordre en Python?"

# dadc80e2489c45de84a9a41addc3236e
#: faq/programming.rst:460
msgid ""
"You have two choices: you can use nested scopes or you can use callable "
"objects. For example, suppose you wanted to define ``linear(a,b)`` which "
"returns a function ``f(x)`` that computes the value ``a*x+b``.  Using nested "
"scopes::"
msgstr ""
"Vous avez deux choix: vous pouvez utiliser les portées imbriquées ou vous "
"pouvez utiliser des objets appelable. Par exemple, supposons que vous "
"vouliez définir ``lineare (a, b)`` qui retourne une fonction ``f (x)`` qui "
"calcule la valeur ``a * x + b``. En utilisant les portées imbriquées::"

# c236121baeb040a49b8e4f48f049b6f8
#: faq/programming.rst:469
msgid "Or using a callable object::"
msgstr "Ou en utilisant un objet appelable."

# 4bba50f7dcff4228b9abb0fbfa3c5d9a
#: faq/programming.rst:479
msgid "In both cases, ::"
msgstr "dans les deux cas, ::"

# 8f258a16bb9a476eb35b53cfb582ee65
#: faq/programming.rst:483
msgid "gives a callable object where ``taxes(10e6) == 0.3 * 10e6 + 2``."
msgstr "retourne un objet appelable tel que ``taxes(10e6) == 0.3 * 10e6 + 2``."

# a4da4d59ead246f7879566a19db44bf4
#: faq/programming.rst:485
msgid ""
"The callable object approach has the disadvantage that it is a bit slower "
"and results in slightly longer code.  However, note that a collection of "
"callables can share their signature via inheritance::"
msgstr ""
"L'approche par objet appelables a le désavantage d'être légèrement plus "
"lente et de produire un code légèrement plus long. Cependant, il faut noter "
"qu'une collection d'objet appelables peuvent partager leur signatures par "
"héritage::"

# 17b71c83171e4c5cabe9af3836292e7c
#: faq/programming.rst:494
msgid "Object can encapsulate state for several methods::"
msgstr "Les objets peuvent encapsuler un état pour plusieurs méthodes::"

# 0ab7640728864c00b3703bd23bfb9805
#: faq/programming.rst:512
msgid ""
"Here ``inc()``, ``dec()`` and ``reset()`` act like functions which share the "
"same counting variable."
msgstr ""
"Ici ``inc()``, ``dec()`` et ``reset`` agissent comme des fonctions "
"partageant une même variable compteur."

# c3d0710902384fd1a9df614d1126926b
#: faq/programming.rst:517
msgid "How do I copy an object in Python?"
msgstr "Comment copier un objet en Python?"

# 6c29b77a7f9d423c96153027622b5202
#: faq/programming.rst:519
msgid ""
"In general, try :func:`copy.copy` or :func:`copy.deepcopy` for the general "
"case. Not all objects can be copied, but most can."
msgstr ""
"En général, essayez :funct:`copy.copy` ou :func:`copy.deepcopy` pour le cas "
"général. Tout les objets ne peuvent pas être copiés, mais la plupart peuvent."

# 3fa6857dc7a7440d94fb29a7b19b5861
#: faq/programming.rst:522
msgid ""
"Some objects can be copied more easily.  Dictionaries have a :meth:`~dict."
"copy` method::"
msgstr ""
"Certains objects peuvent être copiés plus facilement. Les Dictionnaires ont "
"une méthode :meth:`~dict.copy` ::"

# ff1e9bd0d804485e929af1c82d7df5fb
#: faq/programming.rst:527
msgid "Sequences can be copied by slicing::"
msgstr "Les séquences peuvent être copiées par tranches::"

# 934bc7a8c3664a769dd1a661e5f1cf2d
#: faq/programming.rst:533
msgid "How can I find the methods or attributes of an object?"
msgstr "Comment puis-je trouver les méthodes ou les attribues d'un objet?"

# f5a4f11fb95a4c20ab23e8defede30e4
#: faq/programming.rst:535
msgid ""
"For an instance x of a user-defined class, ``dir(x)`` returns an "
"alphabetized list of the names containing the instance attributes and "
"methods and attributes defined by its class."
msgstr ""
"Pour une instance x d'une classe définie par un utilisateur, ``dir(x)`` "
"renvoie une liste alphabétique des noms contenants les attributs de "
"l'instance, et les attributs et méthodes définies par sa classe."

# bb7a29591f8848c09ec96ea88f4ebc93
#: faq/programming.rst:541
msgid "How can my code discover the name of an object?"
msgstr "Comment mon code peut il découvrir le nom d'un objet?"

# 58959c3490484a59a800c0fecf2fb0b8
#: faq/programming.rst:543
msgid ""
"Generally speaking, it can't, because objects don't really have names. "
"Essentially, assignment always binds a name to a value; The same is true of "
"``def`` and ``class`` statements, but in that case the value is a callable. "
"Consider the following code::"
msgstr ""
"De façon générale, il ne peut pas, par ce que les objets n'ont pas "
"réellement de noms. Essentiellement, l'assignation attache un nom à une "
"valeur; C'est vrai aussi pour les mots clés ``def`` et ``class``, à la "
"différence que la valeur est un objet appelable."

# c6157d0835b140b6a6683db35dafbad7
#: faq/programming.rst:560
msgid ""
"Arguably the class has a name: even though it is bound to two names and "
"invoked through the name B the created instance is still reported as an "
"instance of class A.  However, it is impossible to say whether the "
"instance's name is a or b, since both names are bound to the same value."
msgstr ""
"Le fait que la classe ait un nom est discutable, même si elle a deux noms et "
"qu'elle est appelé via le nom B, l'instance crée déclare tout de même être "
"une instance de la classe A. De même Il est impossible de dire si le nom de "
"l'instance est a ou b, les deux noms sont attachés à la même valeur."

# 6cd769c745e844018b2f12255eb4db5b
#: faq/programming.rst:565
msgid ""
"Generally speaking it should not be necessary for your code to \"know the "
"names\" of particular values. Unless you are deliberately writing "
"introspective programs, this is usually an indication that a change of "
"approach might be beneficial."
msgstr ""
"De façon général, il ne devrait pas être nécessaire pour votre application "
"de \"connaitre le nom\" d'une valeur particulière. À moins que vous soyez "
"délibérément en train d'écrire un programme introspectif, c'est souvent une "
"indication qu'un changement d'approche pourrait être bénéfique."

# 40a75ddc618f43d4a70bc8caaea461dd
#: faq/programming.rst:570
msgid ""
"In comp.lang.python, Fredrik Lundh once gave an excellent analogy in answer "
"to this question:"
msgstr ""
"Sur comp.lang.python, Fredrik Lundh a donné un jour une excellente analogie "
"pour répondre à cette question:"

# 15275baf04ad436898b23860381bd7d4
#: faq/programming.rst:573
msgid ""
"The same way as you get the name of that cat you found on your porch: the "
"cat (object) itself cannot tell you its name, and it doesn't really care -- "
"so the only way to find out what it's called is to ask all your neighbours "
"(namespaces) if it's their cat (object)..."
msgstr ""
"De la même manière que vous trouvez le nom du chat que vous avez trouvé dans "
"votre coure: le chat ne peux pas vous dire lui même son nom, et il s'en "
"moque un peu -- alors le meilleur moyen de savoir comment il est appelé est "
"de demander à tous vos voisins (namespaces) si c'est leur chat (object)…"

# 6fccbeabf1b548088d16be4c5ab875a6
#: faq/programming.rst:578
msgid ""
"....and don't be surprised if you'll find that it's known by many names, or "
"no name at all!"
msgstr ""
"…et ne soyez pas surpris si vous découvrez qu'il est connus sous plusieurs "
"noms différents, ou pas de nom du tout!"

# d9e0bd32569e4f5a83273c10a5467996
#: faq/programming.rst:583
msgid "What's up with the comma operator's precedence?"
msgstr "Quel est le souci avec la précédente de l'opérateur virgule?"

# 2e1a466d40334de2a1b4ef687a7b0232
#: faq/programming.rst:585
msgid "Comma is not an operator in Python.  Consider this session::"
msgstr ""
"Virgule n'est pas un opérateur en Python. Observez la session suivante::"

# 52ff4871b2e741d29a5ffac45dd8e81c
#: faq/programming.rst:590
msgid ""
"Since the comma is not an operator, but a separator between expressions the "
"above is evaluated as if you had entered::"
msgstr ""
"Comme la virgule n'est pas un opérateur, mais un séparateur entre deux "
"expression, l'expression ci dessus, est évaluée de la même façon que si vous "
"aviez écrit::"

# d1332a06870648d08bd0395314c89327
#: faq/programming.rst:595
msgid "not::"
msgstr "et non::"

# 45f630ca29cc4eb597ebfc8de6bb519e
#: faq/programming.rst:599
msgid ""
"The same is true of the various assignment operators (``=``, ``+=`` etc).  "
"They are not truly operators but syntactic delimiters in assignment "
"statements."
msgstr ""
"Ceci est vrai de tous les opérateurs d'assignations (``=``, ``+=`` etc). Ce "
"ne sont pas vraiment des opérateurs mais des délimiteurs syntaxiques dans "
"les instructions d'assignation."

# 8bd1e091443441ed8570a57d776320f7
#: faq/programming.rst:604
msgid "Is there an equivalent of C's \"?:\" ternary operator?"
msgstr "Existe-t'il un équivalent à l'opérateur \"?:\" ternaire du C?"

# f285f229897d4744a78e0c6f0700ee66
#: faq/programming.rst:606
msgid "Yes, there is. The syntax is as follows::"
msgstr ""
"Oui, cette fonctionnalité à été ajouté à partir de Python 2.5. La syntaxe "
"est la suivante::"

# 73cd6ce4c2374f8da9b06640f8f197ae
#: faq/programming.rst:613
msgid ""
"Before this syntax was introduced in Python 2.5, a common idiom was to use "
"logical operators::"
msgstr ""

# c510a6b231e2483b91ec05fd6939c64d
#: faq/programming.rst:618
msgid ""
"However, this idiom is unsafe, as it can give wrong results when *on_true* "
"has a false boolean value.  Therefore, it is always better to use the ``... "
"if ... else ...`` form."
msgstr ""

# 89a0467898644b86b34e797e957aae58
#: faq/programming.rst:624
msgid "Is it possible to write obfuscated one-liners in Python?"
msgstr ""
"Est-il possible d'écrire des programmes volontairement difficile à "
"comprendre sur une seule ligne en Python?"

# 2ea3ad3255b146e69645a108ebf65168
#: faq/programming.rst:626
msgid ""
"Yes.  Usually this is done by nesting :keyword:`lambda` within :keyword:"
"`lambda`.  See the following three examples, due to Ulf Bartelt::"
msgstr ""
"Oui. Cela est généralement réalisé en imbriquant les :keyword:`lambda` les "
"uns dans les autres. Observez les trois exemples suivants, contribués par "
"Ulf Bartelt::"

# d5e4479ed4664292abb36aa713d38be9
#: faq/programming.rst:653
msgid "Don't try this at home, kids!"
msgstr "Les enfants, ne faîtes pas ça chez vous!"

# 38f370ff922d4cad97cb4392e86da3e1
#: faq/programming.rst:657
msgid "Numbers and strings"
msgstr "Nombres et chaines de caractères"

# f0399d8db1f1434c99969a1bc75abe5e
#: faq/programming.rst:660
msgid "How do I specify hexadecimal and octal integers?"
msgstr "Comment puis-je spécifier des entiers hexadécimaux ou octaux?"

# 9cddb378ebf840a6907ea34712e5cc03
#: faq/programming.rst:662
msgid ""
"To specify an octal digit, precede the octal value with a zero, and then a "
"lower or uppercase \"o\".  For example, to set the variable \"a\" to the "
"octal value \"10\" (8 in decimal), type::"
msgstr ""
"Pour spécifier un entier octal, faites précéder la valeur octale par un "
"zéro, puis un \"o\" majuscule ou minuscule. Par exemple assigner la valeur "
"octale \"10\" (8 en décimal) à \"a\", tapez::"

# 7cbd6620a86d4a46807fc6b440b34c13
#: faq/programming.rst:670
msgid ""
"Hexadecimal is just as easy.  Simply precede the hexadecimal number with a "
"zero, and then a lower or uppercase \"x\".  Hexadecimal digits can be "
"specified in lower or uppercase.  For example, in the Python interpreter::"
msgstr ""
"L'hexadécimal est tout aussi simple, faîtes précéder le nombre hexadécimal "
"par un zéro, puis un \"x\" majuscule ou minuscule. Les nombres hexadécimaux "
"peuvent être écrit en majuscules ou en minuscules. Par exemple, dans "
"l'interpréteur Python::"

# 97c920e330914b3386975e46ac22b4ac
#: faq/programming.rst:683
msgid "Why does -22 // 10 return -3?"
msgstr "Pourquoi -22//10 retourne-t'il -3?"

# 7e034545c01d4718aa6d044a50825cb3
#: faq/programming.rst:685
msgid ""
"It's primarily driven by the desire that ``i % j`` have the same sign as "
"``j``. If you want that, and also want::"
msgstr ""
"Cela est principalement due à la volonté que ``i % j`` ait le même signe que "
"j. Si vous voulez cela, vous voulez aussi::"

# 981900f14ec7465cb260c56e757caf1b
#: faq/programming.rst:690
msgid ""
"then integer division has to return the floor.  C also requires that "
"identity to hold, and then compilers that truncate ``i // j`` need to make "
"``i % j`` have the same sign as ``i``."
msgstr ""
"Alors la division entière doit retourner l'entier inférieur. Le C demande "
"aussi à ce que cette égalité soit vérifiée, et donc les compilateur qui "
"tronquent ``i//j`` ont besoin que ``i % j`` ait le même signe que ``i``."

# a02aa71ffe24478fa036447fb62745ab
#: faq/programming.rst:694
msgid ""
"There are few real use cases for ``i % j`` when ``j`` is negative.  When "
"``j`` is positive, there are many, and in virtually all of them it's more "
"useful for ``i % j`` to be ``>= 0``.  If the clock says 10 now, what did it "
"say 200 hours ago?  ``-190 % 12 == 2`` is useful; ``-190 % 12 == -10`` is a "
"bug waiting to bite."
msgstr ""
"Il y a peu de cas d'utilisation réels pour ``i%j`` quand ``j`` est négatif. "
"Quand ``j`` est positif, il y en a beaucoup, et dans pratiquement tous, il "
"est plus utile que ``i % j`` soit ``>=0``. Si l'horloge dit 10h maintenant, "
"que disait-elle il y a 200 heures? ``-190%12 == 2`` est utile; ``-192 % 12 "
"== -10`` est un bug qui attends pour mordre."

# c6a99c60f3b54f4498e29a28d5309d35
#: faq/programming.rst:702
msgid "How do I convert a string to a number?"
msgstr "Comment puis-je convertir une chaine de caractère en nombre?"

# 692e6a09a9ae4de0bb8dd7fd74c179b8
#: faq/programming.rst:704
msgid ""
"For integers, use the built-in :func:`int` type constructor, e.g. "
"``int('144') == 144``.  Similarly, :func:`float` converts to floating-point, "
"e.g. ``float('144') == 144.0``."
msgstr ""
"Pour les entiers, utilisez la fonction built-in :func: `int` de type "
"constructeur, par exemple ``int('144') == 144``. De façon similaire, :func:"
"`float` convertit en valeur flottante, par exemple ``float('144')`` == "
"144.0``."

# f5f00f53625e44d3a4cc6d424d3faa0c
#: faq/programming.rst:708
msgid ""
"By default, these interpret the number as decimal, so that ``int('0144') == "
"144`` and ``int('0x144')`` raises :exc:`ValueError`. ``int(string, base)`` "
"takes the base to convert from as a second optional argument, so "
"``int('0x144', 16) == 324``.  If the base is specified as 0, the number is "
"interpreted using Python's rules: a leading '0' indicates octal, and '0x' "
"indicates a hex number."
msgstr ""
"Par défaut, ces fonctions interprètent les nombre en tant que décimaux, de "
"telles façons que ``int('0144')==144`` et ``int('0x144')`` remontent :exc:"
"`ValueError`. ``int(string, base)`` prends la base depuis laquelle il faut "
"convertir dans le second argument, optionnel, donc ``int('0x144', 16) == "
"324``. Si la base donnée est 0, le nombre est interprété selon les règles "
"Python: un '0' en tête indique octal, et '0x' indique un hexadécimal."

# 05d6db8247ca414b9e61602c8932a5e6
#: faq/programming.rst:714
msgid ""
"Do not use the built-in function :func:`eval` if all you need is to convert "
"strings to numbers.  :func:`eval` will be significantly slower and it "
"presents a security risk: someone could pass you a Python expression that "
"might have unwanted side effects.  For example, someone could pass "
"``__import__('os').system(\"rm -rf $HOME\")`` which would erase your home "
"directory."
msgstr ""
"N'utilisez pas la fonction built-in :func:`eval` si tout ce que vous avez "
"besoin est de convertir des chaines en nombres. :func:`eval` sera "
"significativement plus lent et implique des risque de sécurité: quelqu'un "
"pourrait vous envoyez une expression Python pouvant avoir des effets de bord "
"indésirables. Par exemple, quelqu'un pourrait passer ``__import__('os')."
"system(\"rm -rf $HOME\")`` ce qui aurait pour effet d'effacer votre "
"répertoire personnel."

# 7c051b526be64d069a5c70bc8bc22193
#: faq/programming.rst:721
msgid ""
":func:`eval` also has the effect of interpreting numbers as Python "
"expressions, so that e.g. ``eval('09')`` gives a syntax error because Python "
"does not allow leading '0' in a decimal number (except '0')."
msgstr ""
":func:`eval` a aussi pour effet d'interpréter les nombres comme comme des "
"expression python, ainsi ``eval('09')`` produit une erreur de syntaxe par ce "
"que Python ne permet pas les '0' en tête d'un nombre décimal (à l'exception "
"du nombre '0')."

# c4e3fce1424b477881ce461f50c84bcb
#: faq/programming.rst:727
msgid "How do I convert a number to a string?"
msgstr "Comment convertir un nombre en chaine de caractère?"

# 10879c247e504e9fa86869d3867db0f7
#: faq/programming.rst:729
#, fuzzy
msgid ""
"To convert, e.g., the number 144 to the string '144', use the built-in type "
"constructor :func:`str`.  If you want a hexadecimal or octal representation, "
"use the built-in functions :func:`hex` or :func:`oct`.  For fancy "
"formatting, see the :ref:`string-formatting` section, e.g. ``\"{:04d}\"."
"format(144)`` yields ``'0144'`` and ``\"{:.3f}\".format(1/3)`` yields "
"``'0.333'``."
msgstr ""
"Pour convertir, par exemple, le nombre 144 en la chaîne '144 ', utilisez la "
"fonction intégrée: func: «str». Si vous voulez une représentation "
"hexadécimale ou octale, utilisez les fonctions intégrées :func:``hex`` ou: "
"func:``oct``. Pour une meilleure la mise en forme, voir la section :ref:"
"`string-formatting`, par exemple, ``\"{:04d) \".format (144)`` renvoit "
"``'0144'`` et ``\"{:.3f)\".format (1 / 3) donne ``'0,333' ``."

# 479261b9fb624aaab4249f5ab65eed21
#: faq/programming.rst:737
msgid "How do I modify a string in place?"
msgstr "Comment modifier une chaine de caractère \"en place\"?"

# 04e86c9be2054375bb00094fcfe97b9b
#: faq/programming.rst:739
msgid ""
"You can't, because strings are immutable.  In most situations, you should "
"simply construct a new string from the various parts you want to assemble it "
"from.  However, if you need an object with the ability to modify in-place "
"unicode data, try using a :class:`io.StringIO` object or the :mod:`array` "
"module::"
msgstr ""

# eb1bd3496051458da19a0ceea2401fcb
#: faq/programming.rst:768
msgid "How do I use strings to call functions/methods?"
msgstr ""
"Comment utiliser des chaines de caractères pour appeler des fonctions/"
"méthodes?"

# c887a39dc2d04d9c8756be207eb70156
#: faq/programming.rst:770
msgid "There are various techniques."
msgstr "Il y a différentes techniques."

# 70f2fd1673104226be16aa52b134c785
#: faq/programming.rst:772
msgid ""
"The best is to use a dictionary that maps strings to functions.  The primary "
"advantage of this technique is that the strings do not need to match the "
"names of the functions.  This is also the primary technique used to emulate "
"a case construct::"
msgstr ""
"La meilleure est d'utiliser un dictionnaire qui fait correspondre les "
"chaines de caractères à des fonctions. Le principal avantage de cette "
"technique est que les chaines n'ont pas besoin d'être égales aux noms de "
"fonctions. C'est aussi la principale façon d'imiter la construction \"case"
"\"::"

# 1ce0c7c3eb1d4b50926bc2603a8c56c7
#: faq/programming.rst:787
msgid "Use the built-in function :func:`getattr`::"
msgstr "Utiliser la fonction :func:`getattr`::"

# 6eb89ddda04e4ca692446483391bc4a2
#: faq/programming.rst:792
msgid ""
"Note that :func:`getattr` works on any object, including classes, class "
"instances, modules, and so on."
msgstr ""
"Notez que :func:`getattr` marche sur n'importe quel objet, ceci inclue les "
"classes, les instances de classes, les modules et ainsi de suite."

# 1b0450230a234c6ba24fb516977311bf
#: faq/programming.rst:795
msgid "This is used in several places in the standard library, like this::"
msgstr ""
"Ceci est utilisé dans plusieurs endroit de la bibliothèque standard, de "
"cette façon::"

# 3d6123dfd9de43fdb7a8e4b53b04c3b8
#: faq/programming.rst:808
msgid "Use :func:`locals` or :func:`eval` to resolve the function name::"
msgstr ""
"Utilisez :func:`locals` ou :func:`eval` pour résoudre le nom de fonction::"

# b0af6d2154854573a46de92c5417dada
#: faq/programming.rst:821
msgid ""
"Note: Using :func:`eval` is slow and dangerous.  If you don't have absolute "
"control over the contents of the string, someone could pass a string that "
"resulted in an arbitrary function being executed."
msgstr ""
"Note: En utilisant :func:`eval` est lent est dangereux. Si vous n'avez pas "
"un contrôle absolu sur le contenu de la chaine de caractère, quelqu'un peut "
"passer une chaine de caractère pouvant résulter en l'exécution de code "
"arbitraire."

# 3ed02d181ad74578892131f25627f17f
#: faq/programming.rst:826
msgid ""
"Is there an equivalent to Perl's chomp() for removing trailing newlines from "
"strings?"
msgstr ""
"Existe-t'il un équivalent à la fonction chomp() de Perl, pour retirer les "
"caractères de fin de ligne d'une chaine de caractère?"

# 0ed8c568502a4376b9385fd9a9158136
#: faq/programming.rst:828
msgid ""
"You can use ``S.rstrip(\"\\r\\n\")`` to remove all occurrences of any line "
"terminator from the end of the string ``S`` without removing other trailing "
"whitespace.  If the string ``S`` represents more than one line, with several "
"empty lines at the end, the line terminators for all the blank lines will be "
"removed::"
msgstr ""
"À partir de Python 2.2 vous pouvez utiliser ``S.rstrip(\"\r\n"
"\")`` pour retirer toute occurrence de n'importe quel terminateur de ligne à "
"la fin d'une chaine de caractère ``S``, sans retirer aucun espace de fin de "
"ligne. Si la chaine ``S`` représente plus d'une ligne, avec plusieurs lignes "
"vides, les terminateurs de lignes de toutes les lignes vides seront retirés::"

# c5dc2770577c48e889ccde7157b65579
#: faq/programming.rst:840
msgid ""
"Since this is typically only desired when reading text one line at a time, "
"using ``S.rstrip()`` this way works well."
msgstr ""
"Du fait que ce soit principalement utile en lisant un texte ligne à ligne, "
"utiliser ``S.rstrip()`` devrait marcher correctement."

# 62d12a06d35e4ee2925cb82449d312ed
#: faq/programming.rst:845
msgid "Is there a scanf() or sscanf() equivalent?"
msgstr "Existe-t'il un équivalent à scanf() ou sscanf()?"

# e4540d15f835475f889f1c4c9b57ed8f
#: faq/programming.rst:847
msgid "Not as such."
msgstr "Pas exactement."

# 312cda2f5f8f4522a186a9253f16520f
#: faq/programming.rst:849
msgid ""
"For simple input parsing, the easiest approach is usually to split the line "
"into whitespace-delimited words using the :meth:`~str.split` method of "
"string objects and then convert decimal strings to numeric values using :"
"func:`int` or :func:`float`.  ``split()`` supports an optional \"sep\" "
"parameter which is useful if the line uses something other than whitespace "
"as a separator."
msgstr ""
"Pour une simple analyse de chaine, l'approche la plus simple est "
"généralement de découper la ligne en mots délimités par des espaces, en "
"utilisant la méthode :meth:`~str.split` des objets chaine de caractères, et "
"ensuite de convertir les chaines de décimales en valeurs numériques en "
"utilisant la fonction :func:`int` ou :func:`float`, ``split()`` supporte un "
"paramètre optionnel \"sep\" qui est utile si la ligne utilise autre chose "
"que des espaces comme séparateur."

# 2d1c0265499547989ce5d99d5594a32e
#: faq/programming.rst:855
msgid ""
"For more complicated input parsing, regular expressions are more powerful "
"than C's :c:func:`sscanf` and better suited for the task."
msgstr ""
"Pour les analyses plus compliquées, les expressions rationnelles sont plus "
"puissantes que la fonction `sscanf` de C et mieux adaptées à la tâche."

# 7740dfbfc2e5403aa8a385cdc1651f65
#: faq/programming.rst:860
msgid "What does 'UnicodeDecodeError' or 'UnicodeEncodeError' error  mean?"
msgstr ""
"Que signifient les erreurs  'UnicodeDecodeError' ou 'UnicodeEncodeError'?"

# 6cadcb7c7ab84c398c698798b00ff69a
#: faq/programming.rst:862
msgid "See the :ref:`unicode-howto`."
msgstr "Regardez le :ref:`unicode-howto`."

# fc7966dfdd5b4391b1ce5008962aa891
#: faq/programming.rst:866
msgid "Performance"
msgstr ""

# 90d7fc55962a4d2fbf9d2bfcb3a937c9
#: faq/programming.rst:869
msgid "My program is too slow. How do I speed it up?"
msgstr ""

# bddcca7269a94b02a4b668826336a7bb
#: faq/programming.rst:871
msgid ""
"That's a tough one, in general.  First, here are a list of things to "
"remember before diving further:"
msgstr ""

# 479ba6c0161a4c1ba11be4bdd1fd4cf6
#: faq/programming.rst:874
msgid ""
"Performance characteristics vary across Python implementations.  This FAQ "
"focusses on :term:`CPython`."
msgstr ""

# ecdec0a365454a10bb8a57f4b46eb2cd
#: faq/programming.rst:876
msgid ""
"Behaviour can vary across operating systems, especially when talking about I/"
"O or multi-threading."
msgstr ""

# 773dc231eb9445c6a23a142c87fd48f7
#: faq/programming.rst:878
msgid ""
"You should always find the hot spots in your program *before* attempting to "
"optimize any code (see the :mod:`profile` module)."
msgstr ""

# 901128faa94a4cbd87a09f688a9cbc50
#: faq/programming.rst:880
msgid ""
"Writing benchmark scripts will allow you to iterate quickly when searching "
"for improvements (see the :mod:`timeit` module)."
msgstr ""

# 41db3d3543f9416a8cb447fefa4b3f01
#: faq/programming.rst:882
msgid ""
"It is highly recommended to have good code coverage (through unit testing or "
"any other technique) before potentially introducing regressions hidden in "
"sophisticated optimizations."
msgstr ""

# 36b2255fb43841669aa7aeb8295d3ef4
#: faq/programming.rst:886
msgid ""
"That being said, there are many tricks to speed up Python code.  Here are "
"some general principles which go a long way towards reaching acceptable "
"performance levels:"
msgstr ""

# e2438c40f3da4ca3bfc9bc30065b38e4
#: faq/programming.rst:890
msgid ""
"Making your algorithms faster (or changing to faster ones) can yield much "
"larger benefits than trying to sprinkle micro-optimization tricks all over "
"your code."
msgstr ""

# 77b3bb57af7b415cb84fe7db3f44f070
#: faq/programming.rst:894
msgid ""
"Use the right data structures.  Study documentation for the :ref:`bltin-"
"types` and the :mod:`collections` module."
msgstr ""

# cca146b53ce64ac99090fb0586d1c214
#: faq/programming.rst:897
msgid ""
"When the standard library provides a primitive for doing something, it is "
"likely (although not guaranteed) to be faster than any alternative you may "
"come up with.  This is doubly true for primitives written in C, such as "
"builtins and some extension types.  For example, be sure to use either the :"
"meth:`list.sort` built-in method or the related :func:`sorted` function to "
"do sorting (and see the `sorting mini-HOWTO <http://wiki.python.org/moin/"
"HowTo/Sorting>`_ for examples of moderately advanced usage)."
msgstr ""

# 22dc9e0c2cb64adbadb6b3b7a44b51e0
#: faq/programming.rst:906
msgid ""
"Abstractions tend to create indirections and force the interpreter to work "
"more.  If the levels of indirection outweigh the amount of useful work done, "
"your program will be slower.  You should avoid excessive abstraction, "
"especially under the form of tiny functions or methods (which are also often "
"detrimental to readability)."
msgstr ""

# bb978f71a216436bbe6042daab74037d
#: faq/programming.rst:912
msgid ""
"If you have reached the limit of what pure Python can allow, there are tools "
"to take you further away.  For example, `Cython <http://cython.org>`_ can "
"compile a slightly modified version of Python code into a C extension, and "
"can be used on many different platforms.  Cython can take advantage of "
"compilation (and optional type annotations) to make your code significantly "
"faster than when interpreted.  If you are confident in your C programming "
"skills, you can also :ref:`write a C extension module <extending-index>` "
"yourself."
msgstr ""

#: faq/programming.rst:922
msgid ""
"The wiki page devoted to `performance tips <http://wiki.python.org/moin/"
"PythonSpeed/PerformanceTips>`_."
msgstr ""

# 61e2b084bf484c429dcf0d7564bdc823
#: faq/programming.rst:928
msgid "What is the most efficient way to concatenate many strings together?"
msgstr ""

# ef1ba5a1363745c8ba96822c830e2c2d
#: faq/programming.rst:930
msgid ""
":class:`str` and :class:`bytes` objects are immutable, therefore "
"concatenating many strings together is inefficient as each concatenation "
"creates a new object.  In the general case, the total runtime cost is "
"quadratic in the total string length."
msgstr ""

# a9bfc91af35940a0a0652027e1caa14b
#: faq/programming.rst:935
msgid ""
"To accumulate many :class:`str` objects, the recommended idiom is to place "
"them into a list and call :meth:`str.join` at the end::"
msgstr ""

# 085d852ed7bf4ca4a40f0372e9bd55fe
#: faq/programming.rst:943
msgid "(another reasonably efficient idiom is to use :class:`io.StringIO`)"
msgstr ""

# d8fd86baa39b4f2d937ae16d8fd09d20
#: faq/programming.rst:945
msgid ""
"To accumulate many :class:`bytes` objects, the recommended idiom is to "
"extend a :class:`bytearray` object using in-place concatenation (the ``+=`` "
"operator)::"
msgstr ""

# e59454f4d8ba46ad8aebd3f82d587b0a
#: faq/programming.rst:954
msgid "Sequences (Tuples/Lists)"
msgstr "Sequences (Tuples/Lists)"

# 477f6691db5a46f19d858f2547c6d5fe
#: faq/programming.rst:957
msgid "How do I convert between tuples and lists?"
msgstr "Comment convertir les listes en tuples et inversement?"

# 5ceec27f61364569b0b86f1f09031d24
#: faq/programming.rst:959
msgid ""
"The type constructor ``tuple(seq)`` converts any sequence (actually, any "
"iterable) into a tuple with the same items in the same order."
msgstr ""
"Le constructeur de type ``tuple(seq)`` convertit toute séquence (en fait "
"tout itérable) en un tuple avec les mêmes éléments dans le même ordre…"

# efe674dce3444fbca1c4eb63cfc8f7da
#: faq/programming.rst:962
msgid ""
"For example, ``tuple([1, 2, 3])`` yields ``(1, 2, 3)`` and ``tuple('abc')`` "
"yields ``('a', 'b', 'c')``.  If the argument is a tuple, it does not make a "
"copy but returns the same object, so it is cheap to call :func:`tuple` when "
"you aren't sure that an object is already a tuple."
msgstr ""
"Par exemple ``tuple([1, 2, 3])`` renvoi ``(1, 2, 3)`` et ``tuple('abc')`` "
"renvoi ``('a', 'b', 'c')``. Si l'argument est un tuple, cela ne crèe pas une "
"copie, mais renvoi le même objet, ce qui en fait un fonction économique à "
"appeler quand vous ne savez pas si votre objet est déjà un tulpe."

# 9dc888944c3249ac905402ea67588a95
#: faq/programming.rst:967
msgid ""
"The type constructor ``list(seq)`` converts any sequence or iterable into a "
"list with the same items in the same order.  For example, ``list((1, 2, "
"3))`` yields ``[1, 2, 3]`` and ``list('abc')`` yields ``['a', 'b', 'c']``.  "
"If the argument is a list, it makes a copy just like ``seq[:]`` would."
msgstr ""
"Le constructeur de type ``list(seq)`` convertit toute séquence ou itérable "
"en liste contenant les mêmes éléments dans le même ordre. Par exemple, "
"``list((1,2,3))`` retourne ``[1,2,3]`` et ``list('abc')`` retourne "
"``['a','b','c']``. Si l'argument est une liste, il retourne une copie, de la "
"même façon que ``seq[:]``."

# 581dcf10570546beb5a3c9bc2eb8a620
#: faq/programming.rst:974
msgid "What's a negative index?"
msgstr "Qu'est-ce qu'un indexe négatif?"

# bbaf27ef0aac4a06a58e5ee69e7f4b01
#: faq/programming.rst:976
msgid ""
"Python sequences are indexed with positive numbers and negative numbers.  "
"For positive numbers 0 is the first index 1 is the second index and so "
"forth.  For negative indices -1 is the last index and -2 is the penultimate "
"(next to last) index and so forth.  Think of ``seq[-n]`` as the same as "
"``seq[len(seq)-n]``."
msgstr ""
"Les séquences Python sont indexées avec des nombres positifs aussi bien que "
"négatifs. Pour les nombres positifs, 0 est le premier index, 1 est le "
"second, et ainsi de suite. Pour les indexes négatifs, -1 est le dernier "
"index, -2 est le pénultième (avant dernier), et ainsi de suite. On peut "
"aussi dire que ``seq[-n]`` est équivalent à ``seq[len(seq)-n]``."

# 59cc9aae6ce54c7eb1ffebc805baa6c5
#: faq/programming.rst:981
msgid ""
"Using negative indices can be very convenient.  For example ``S[:-1]`` is "
"all of the string except for its last character, which is useful for "
"removing the trailing newline from a string."
msgstr ""
"Utiliser des indexes négatifs peut être très pratique. Par exemple "
"``S[:-1]`` indique la chaine entière a l'exception du dernier caractère, ce "
"qui est pratique pour retirer un caractère de fin de ligne en fin d'une "
"chaine."

# b91547290d234c91be092f2becd372b8
#: faq/programming.rst:987
msgid "How do I iterate over a sequence in reverse order?"
msgstr "Comment itérer à rebours sur une séquence?"

# 7230946109b14d2ea52b87f3566a063a
#: faq/programming.rst:989
msgid ""
"Use the :func:`reversed` built-in function, which is new in Python 2.4::"
msgstr ""
"Utilisez la fonction embarquée :func:`reversed`, qui est apparue en Python "
"2.4::"

# 2e1cf13f85af4142a556ab7e521d1954
#: faq/programming.rst:994
msgid ""
"This won't touch your original sequence, but build a new copy with reversed "
"order to iterate over."
msgstr ""
"Cela ne modifiera pas votre séquence initiale, mais construira à la place "
"une copie en ordre inverse pour itérer dessus."

# a99c5de3726d4becbd5dee205e607c42
#: faq/programming.rst:997
msgid "With Python 2.3, you can use an extended slice syntax::"
msgstr "Avec Python 2.3 vous pouvez utiliser la syntaxe étendue de tranches::"

# f7b764b9ed51494c9b4817d479d434f9
#: faq/programming.rst:1004
msgid "How do you remove duplicates from a list?"
msgstr "Comment retirer les doublons d'une liste?"

# 36cb3b1aea8d44bfa4b97075bbbdb88f
#: faq/programming.rst:1006
msgid "See the Python Cookbook for a long discussion of many ways to do this:"
msgstr ""
"Lisez le Python Cookbook pour trouver une longue discussion sur les "
"nombreuses façons de faire cela:"

# cfa97798827f4b7990e17048f7cf784e
#: faq/programming.rst:1008
msgid "http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/52560"
msgstr ""

# 0bd12eeedc5b429aaa28c0be309a49e2
#: faq/programming.rst:1010
msgid ""
"If you don't mind reordering the list, sort it and then scan from the end of "
"the list, deleting duplicates as you go::"
msgstr ""
"Si changer l'ordre de la liste ne vous dérange pas, commencez par trier "
"celle ci, puis parcourez la d'un bout à l'autre, en supprimant les doublons "
"trouvés en chemin::"

# 2d66ca2a2707410ba965ef0f3083e832
#: faq/programming.rst:1022
msgid ""
"If all elements of the list may be used as set keys (i.e. they are all :term:"
"`hashable`) this is often faster ::"
msgstr ""
"Si tous les éléments de la liste peuvent être utilisés comme des clés de "
"dictionnaire (cad, elles sont toutes hashables) ceci est souvent plus "
"rapide::"

# d078aa9ea55e412f8275a35ab9d302d6
#: faq/programming.rst:1027
msgid ""
"This converts the list into a set, thereby removing duplicates, and then "
"back into a list."
msgstr ""
"Ceci convertis la liste en un ensemble, ce qui supprime automatiquement les "
"doublons, puis la transforme à nouveau en liste."

# c572abadfa644e009cd48bdf5f588624
#: faq/programming.rst:1032
msgid "How do you make an array in Python?"
msgstr "Comment construire un tableau en Python?"

# c4ccc9a154164fd58a4c68d3f146d6be
#: faq/programming.rst:1034
msgid "Use a list::"
msgstr "Utilisez une liste::"

# f668d5046f344614a290b754ff3e8174
#: faq/programming.rst:1038
msgid ""
"Lists are equivalent to C or Pascal arrays in their time complexity; the "
"primary difference is that a Python list can contain objects of many "
"different types."
msgstr ""
"Les listes ont un cout équivalent à celui des tableau C ou Pascal; la "
"principale différence est qu'une liste Python peut contenir des objets de "
"différents types."

# b60e7822e5cc4dcdb779aa7e628c3c65
#: faq/programming.rst:1041
msgid ""
"The ``array`` module also provides methods for creating arrays of fixed "
"types with compact representations, but they are slower to index than "
"lists.  Also note that the Numeric extensions and others define array-like "
"structures with various characteristics as well."
msgstr ""
"Le module ``array`` fournit  des méthodes pour créer des tableaux de types "
"fixes dans une représentation compacte, mais ils sont plus lents à indexer "
"que les listes. Notez aussi que l'extension ``Numeric`` et d'autres, "
"fournissent différentes structures de types tableaux, avec des "
"caractéristiques différentes."

# d44449d0706a476496f4a1b68b4a97ce
#: faq/programming.rst:1046
msgid ""
"To get Lisp-style linked lists, you can emulate cons cells using tuples::"
msgstr ""
"Pour obtenir des listes chainées de type Lisp, vous pouvez émuler les \"cons "
"cells\" en utilisant des tuples::"

# 5f18332c08034a3a9d4bf96057392863
#: faq/programming.rst:1050
msgid ""
"If mutability is desired, you could use lists instead of tuples.  Here the "
"analogue of lisp car is ``lisp_list[0]`` and the analogue of cdr is "
"``lisp_list[1]``.  Only do this if you're sure you really need to, because "
"it's usually a lot slower than using Python lists."
msgstr ""
"Si vous voulez pouvoir modifier les éléments, utilisez une liste plutôt "
"qu'un tuple. Ici la version équivalente au \"car\" de Lisp est "
"``lisp_list[0]`` et l'équivalent à \"cdr\" est ``list_lip[1]``. Ne faîtes "
"ceci que si vous êtes réellement sûr d'en avoir besoin, cette méthode est en "
"générale bien plus lente que les listes Python."

# b3ab904398b842cd99ba477685003d2c
#: faq/programming.rst:1057
msgid "How do I create a multidimensional list?"
msgstr "Comment puis-je créer une liste à plusieurs dimensions?"

# fba490856f924b3a960e3f0559ce2e0d
#: faq/programming.rst:1059
msgid "You probably tried to make a multidimensional array like this::"
msgstr ""
"Vous avez probablement essayé de créer une liste à plusieurs dimensions de "
"cette façon::"

# 6c189136430645d18d00e403893c74dd
#: faq/programming.rst:1063
msgid "This looks correct if you print it::"
msgstr "Cela semble correct quand vous essayer de l'afficher::"

# 01fc752a5fc741a596dff8c8bc260603
#: faq/programming.rst:1068
msgid "But when you assign a value, it shows up in multiple places:"
msgstr ""
"Mais quand vous assignez une valeur, elle apparait en de multiples endroits::"

# 636f0c2c94e6472f8ff57918eb163748
#: faq/programming.rst:1074
msgid ""
"The reason is that replicating a list with ``*`` doesn't create copies, it "
"only creates references to the existing objects.  The ``*3`` creates a list "
"containing 3 references to the same list of length two.  Changes to one row "
"will show in all rows, which is almost certainly not what you want."
msgstr ""
"La raison en est que dupliquer une liste en utilisant ``*`` ne crée pas de "
"copies, cela crée seulement des références aux objets existants. Le ``*3`` "
"crée une liste contenant trois références à la même liste de longueur deux. "
"Un changement dans une colonne apparaîtra donc dans toutes les colonnes. Ce "
"qui n'est de façon quasi certaine, pas ce que vous souhaitez."

# c4e4fa85241045479f86e34b9246662e
#: faq/programming.rst:1079
msgid ""
"The suggested approach is to create a list of the desired length first and "
"then fill in each element with a newly created list::"
msgstr ""
"L'approche suggérée est de créer une liste de la longueur désiré d'abords, "
"puis de remplir tous les éléments avec une chaîne nouvellement créée."

# ca793149b3384de9870c837bd282af00
#: faq/programming.rst:1086
msgid ""
"This generates a list containing 3 different lists of length two.  You can "
"also use a list comprehension::"
msgstr ""
"Cette liste générée contient trois listes différentes de longueur deux. Vous "
"pouvez aussi utilisez la notation de compréhension de listes."

# ec3fd45a4e594ff9b41fa7f9c2fbf30f
#: faq/programming.rst:1092
#, fuzzy
msgid ""
"Or, you can use an extension that provides a matrix datatype; `Numeric "
"Python <http://numpy.scipy.org/>`_ is the best known."
msgstr ""
"Ou, vous pouvez utiliser une extension qui fournis un type de donnée de type "
"matrice; `Numeric Python <http://numpy.scipy.org/>`_ étant le plus connu."

# b9038ee908b6423fb2eb50237696d938
#: faq/programming.rst:1097
msgid "How do I apply a method to a sequence of objects?"
msgstr "Comment appliquer une méthode à une séquence d'objets?"

# 6ffb02a6ec894d2c9fc4fb18a2a563ed
#: faq/programming.rst:1099
msgid "Use a list comprehension::"
msgstr "Utilisez une compréhension de liste::"

# e64a0d70e44443e9a4be99a75b50c6ab
#: faq/programming.rst:1105
msgid "Dictionaries"
msgstr "Dictionnaires"

# 5b32d86adccd4cc4a39fe4b60637ad0b
#: faq/programming.rst:1108
msgid "How can I get a dictionary to display its keys in a consistent order?"
msgstr ""
"Comment puis-je faire afficher les éléments d'un dictionnaire dans un ordre "
"consistant?"

# a32f49ee6c694208ad40edd9fbe6d4d3
#: faq/programming.rst:1110
msgid ""
"You can't.  Dictionaries store their keys in an unpredictable order, so the "
"display order of a dictionary's elements will be similarly unpredictable."
msgstr ""
"Vous ne pouvez pas. Les dictionnaires enregistrent leurs clées dans un ordre "
"non prévisible, l'ordre d'affichage des éléments d'un dictionnaire sera donc "
"de la même façon imprévisible."

# bbebd85218a6412eada6be2438e24f05
#: faq/programming.rst:1113
msgid ""
"This can be frustrating if you want to save a printable version to a file, "
"make some changes and then compare it with some other printed dictionary.  "
"In this case, use the ``pprint`` module to pretty-print the dictionary; the "
"items will be presented in order sorted by the key."
msgstr ""
"Cela peut être frustrant si vous voulez sauvegarder une version affichable "
"dans un fichier, faire des changement puis comparer avec un autre "
"dictionnaire affiché. Dans ce cas, utilisez le module ``pprint``` pour "
"afficher joliement le dictionnaire; les éléments seront présentés triés par "
"clés."

# fa84ad3357604a34a486f0c72462a51f
#: faq/programming.rst:1118
msgid ""
"A more complicated solution is to subclass ``dict`` to create a "
"``SortedDict`` class that prints itself in a predictable order.  Here's one "
"simpleminded implementation of such a class::"
msgstr ""
"Une solution plus compliquée est de sousclasser ``dict`` pour créer une "
"classe``SorterDict`` qui s'affiche de façon prévisible. Voici une "
"implémentation simple d'une telle classe::"

# 27dcfc965ed74dad8cf595d5074c4452
#: faq/programming.rst:1130
msgid ""
"This will work for many common situations you might encounter, though it's "
"far from a perfect solution. The largest flaw is that if some values in the "
"dictionary are also dictionaries, their values won't be presented in any "
"particular order."
msgstr ""
"Cela marchera dans la plupart des situations que vous pourriez rencontrer, "
"même si c'est loin d'être une solution parfaite. Le plus gros problème avec "
"cette solution est que si certaines valeurs dans le dictionnaire sont aussi "
"des dictionnaire, alors elles ne seront pas présentées dans un ordre "
"particulier."

# 6c05a9515b944a2c9b761584242fa776
#: faq/programming.rst:1137
msgid ""
"I want to do a complicated sort: can you do a Schwartzian Transform in "
"Python?"
msgstr ""
"Je souhaite faire un tri compliqué: peut on faire une transformation de "
"Schwartz en Python?"

# 4be4101f69b1491681b3927098be9f58
#: faq/programming.rst:1139
msgid ""
"The technique, attributed to Randal Schwartz of the Perl community, sorts "
"the elements of a list by a metric which maps each element to its \"sort "
"value\". In Python, just use the ``key`` argument for the ``sort()`` method::"
msgstr ""
"Cette technique, attribuée à Randal Schwartz de la communauté Perl, trie les "
"éléments d'une liste selon une mesure qui fait correspondre chaque élément à "
"une \"valeur de tri\". En Python, utilisez simplement l'argument ``key`` de "
"la méthode ``sort``::"

# 236f633d5cfb4511bc2852a1be49b59f
#: faq/programming.rst:1146
msgid ""
"The ``key`` argument is new in Python 2.4, for older versions this kind of "
"sorting is quite simple to do with list comprehensions.  To sort a list of "
"strings by their uppercase values::"
msgstr ""
"L'argument ``key`` est apparus en Python 2.4, pour les anciennes versions de "
"Python, ce type de tri est relativement simple à faire avec des "
"compréhensions de liste. Pour trier une liste de chaines par leur valeur en "
"majuscule on peut faire::"

# 11bd4b045e5640749e19e92f72a03198
#: faq/programming.rst:1154
msgid ""
"To sort by the integer value of a subfield extending from positions 10-15 in "
"each string::"
msgstr ""
"Pour trier par la valeur d'un sous-champ allant des index 10 à 15 dans "
"chaque chaine chaine::"

# b076947bf02f46d18268e5df47cf76a8
#: faq/programming.rst:1161
msgid "For versions prior to 3.0, Isorted may also be computed by ::"
msgstr ""
"Pour les versions antérieures à 3.0, Isorted peut également être calculé par:"

# fdeea610a2d944218499b5802b41e729
#: faq/programming.rst:1172
msgid ""
"but since this method calls ``intfield()`` many times for each element of L, "
"it is slower than the Schwartzian Transform."
msgstr ""
"mais du fait que cette méthode appelle `` intfield () `` plusieurs fois pour "
"chaque élément de L, elle est plus lente que la transformée de Schwartz."

# e033d6b47f5845e8b212c4afd78728a0
#: faq/programming.rst:1177
msgid "How can I sort one list by values from another list?"
msgstr ""
"Comment puis-je trier une liste en fonction des valeurs d'une autre liste?"

# 1fded91566874c52932f3341b09f2e34
#: faq/programming.rst:1179
msgid ""
"Merge them into an iterator of tuples, sort the resulting list, and then "
"pick out the element you want. ::"
msgstr ""
"Fusionnez les dans un itérateur de tuples, trier la liste obtenue, puis "
"choisissez l'élément que vous voulez. ::"

# 524eb7a294a843d3adc0ab55d5fc479a
#: faq/programming.rst:1193
msgid "An alternative for the last step is::"
msgstr "Une alternative pour la dernière étape est la suivante::"

# 439cb6f1a44c4ee6b7dfef9d491f186a
#: faq/programming.rst:1198
msgid ""
"If you find this more legible, you might prefer to use this instead of the "
"final list comprehension.  However, it is almost twice as slow for long "
"lists.  Why? First, the ``append()`` operation has to reallocate memory, and "
"while it uses some tricks to avoid doing that each time, it still has to do "
"it occasionally, and that costs quite a bit.  Second, the expression "
"\"result.append\" requires an extra attribute lookup, and third, there's a "
"speed reduction from having to make all those function calls."
msgstr ""
"Si vous trouvez cela plus lisible, vous préférez peut-être utiliser ceci à "
"la place de la compréhension de la liste finale. Toutefois, ceci est presque "
"deux fois plus lent pour les longues listes. Pourquoi? Tout d'abord, "
"``append ()`` doit réaffecter la mémoire, et si il utilise quelques astuces "
"pour éviter de le faire à chaque fois, il doit encore le faire de temps en "
"temps, ce qui coûte assez cher. Deuxièmement, l'expression \"result.append\" "
"exige une recherche d'attribut supplémentaire, et enfin, tous ces appels de "
"fonction impactent la vitesse d'exécution."

# 14a3c1b76cb24686b708f5edfb21d85b
#: faq/programming.rst:1208
msgid "Objects"
msgstr "Objets"

# aedf888179394a6183815deda14576a2
#: faq/programming.rst:1211
msgid "What is a class?"
msgstr "Qu'est-ce qu'une classe?"

# d0c696fe07c5409db7f92c757d240abd
#: faq/programming.rst:1213
msgid ""
"A class is the particular object type created by executing a class "
"statement. Class objects are used as templates to create instance objects, "
"which embody both the data (attributes) and code (methods) specific to a "
"datatype."
msgstr ""
"Une classe est le type d'objet particulier créé par l'exécution d'une "
"déclaration de classe. Les objets de classe sont utilisés comme modèles pour "
"créer des objets, qui incarnent à la fois les données (attributs) et le code "
"(méthodes) spécifiques à un type de données."

# d47ee85673c94b89af95426accf13fba
#: faq/programming.rst:1217
msgid ""
"A class can be based on one or more other classes, called its base "
"class(es). It then inherits the attributes and methods of its base classes. "
"This allows an object model to be successively refined by inheritance.  You "
"might have a generic ``Mailbox`` class that provides basic accessor methods "
"for a mailbox, and subclasses such as ``MboxMailbox``, ``MaildirMailbox``, "
"``OutlookMailbox`` that handle various specific mailbox formats."
msgstr ""
"Une classe peut être fondée sur une ou plusieurs autres classes, appelée sa "
"ou ses classes de base. Il hérite alors les attributs et les méthodes de ses "
"classes de base. Cela permet à un modèle d'objet d'être successivement "
"raffinés par héritage. Vous pourriez avoir une classe générique ``Mailbox`` "
"qui fournit des méthodes d'accès de base pour une boîte aux lettres, et sous-"
"classes telles que ``MboxMailbox``, ``MaildirMailbox``, ``OutlookMailbox`` "
"qui gèrent les différents formats de boîtes aux lettres spécifiques."

# 612539b9826b46bcb22335cb4a4ba86b
#: faq/programming.rst:1226
msgid "What is a method?"
msgstr "Qu'est-ce qu'une méthode?"

# 3e4dd783df5f4fb2af96fe8cafa16134
#: faq/programming.rst:1228
msgid ""
"A method is a function on some object ``x`` that you normally call as ``x."
"name(arguments...)``.  Methods are defined as functions inside the class "
"definition::"
msgstr ""
"Une méthode est une fonction sur un  objet ``x`` appelez normalement comme "
"``x.name(arguments…)``. Les méthodes sont définies comme des fonctions à "
"l'intérieur de la définition de classe::"

# 9ea44ccd89c94b27a67f29c8c4221de7
#: faq/programming.rst:1238
msgid "What is self?"
msgstr "Qu'est-ce que self?"

# 0d06b046526b4342ad2343ffd4e9b438
#: faq/programming.rst:1240
msgid ""
"Self is merely a conventional name for the first argument of a method.  A "
"method defined as ``meth(self, a, b, c)`` should be called as ``x.meth(a, b, "
"c)`` for some instance ``x`` of the class in which the definition occurs; "
"the called method will think it is called as ``meth(x, a, b, c)``."
msgstr ""
"Self est simplement un nom conventionnel pour le premier argument d'une "
"méthode. Une méthode définie comme ``meth(self, a, b, c)`` doit être appelée "
"en tant que ``x.meth(a, b, c)``, pour une instance ``x`` de la classe dans "
"laquelle elle est définie, la méthode appelée considérera qu'elle est "
"appelée ``meth(x, a, b, c)``."

# 7f2b90b9ff6c4809b5df10f83a0ef5a7
#: faq/programming.rst:1245
msgid "See also :ref:`why-self`."
msgstr "Voir aussi: ref:`why-self`."

# e2687c45a88a4f6a8e5ac1ea591afe1d
#: faq/programming.rst:1249
msgid ""
"How do I check if an object is an instance of a given class or of a subclass "
"of it?"
msgstr ""
"Comment puis-je vérifier si un objet est une instance d'une classe donnée ou "
"d'une sous-classe de celui-ci?"

# 6c4089c0db9a454fa57f01eb67b7447b
#: faq/programming.rst:1251
msgid ""
"Use the built-in function ``isinstance(obj, cls)``.  You can check if an "
"object is an instance of any of a number of classes by providing a tuple "
"instead of a single class, e.g. ``isinstance(obj, (class1, class2, ...))``, "
"and can also check whether an object is one of Python's built-in types, e.g. "
"``isinstance(obj, str)`` or ``isinstance(obj, (int, float, complex))``."
msgstr ""
"Utilisez la fonction intégrée ``isInstance(obj, CLS)``. Vous pouvez vérifier "
"si un objet est une instance de n'importe lequel d'un certain nombre de "
"classes en fournissant un tuple à la place d'une seule classe, par exemple, "
"``IsInstance (obj, (Classe1, classe2, ...))``, et peut également vérifier si "
"un objet est l'un des types intégrés à Python, par exemple, ``IsInstance "
"(obj, str) isInstance`` ou ``(obj, (int, float, complexes ))``."

# 38ad1f94a6f64391ad9350957409e524
#: faq/programming.rst:1257
msgid ""
"Note that most programs do not use :func:`isinstance` on user-defined "
"classes very often.  If you are developing the classes yourself, a more "
"proper object-oriented style is to define methods on the classes that "
"encapsulate a particular behaviour, instead of checking the object's class "
"and doing a different thing based on what class it is.  For example, if you "
"have a function that does something::"
msgstr ""
"Notez que la plupart des programmes n'utilisent pas : func:``isInstance`` "
"sur les classes définies par l'utilisateur, très souvent. Si vous développez "
"vous-même les classes, un style plus appropriée orientée objet est de "
"définir des méthodes sur les classes qui encapsulent un comportement "
"particulier, au lieu de vérifier la classe de l'objet et de faire quelque "
"chose de différent en fonction de sa classe. Par exemple, si vous avez une "
"fonction qui fait quelque chose::"

# ddd883181d644313a51b37b7c998c4df
#: faq/programming.rst:1271
msgid ""
"A better approach is to define a ``search()`` method on all the classes and "
"just call it::"
msgstr ""
"Une meilleure approche est de définir une méthode ``search()`` sur toutes "
"les classes et qu'il suffit d'appeler::"

# f91dd6a6949144e7a459868edbb9158e
#: faq/programming.rst:1286
msgid "What is delegation?"
msgstr "Qu'est-ce que la délégation?"

# c7c3f2d76b2c4b4ab5f5e8140ea38f98
#: faq/programming.rst:1288
msgid ""
"Delegation is an object oriented technique (also called a design pattern). "
"Let's say you have an object ``x`` and want to change the behaviour of just "
"one of its methods.  You can create a new class that provides a new "
"implementation of the method you're interested in changing and delegates all "
"other methods to the corresponding method of ``x``."
msgstr ""
"La délégation est une technique orientée objet (aussi appelé un modèle de "
"conception). Disons que vous avez un objet ``x`` et que vous souhaitez "
"modifier le comportement d'une seule de ses méthodes. Vous pouvez créer une "
"nouvelle classe qui fournit une nouvelle implémentation de la méthode qui "
"vous intéresse dans l'évolution et les délégués de toutes les autres "
"méthodes la méthode correspondante de ``x``."

# 17f56f1b669244b2bd0ec89eadfde272
#: faq/programming.rst:1294
msgid ""
"Python programmers can easily implement delegation.  For example, the "
"following class implements a class that behaves like a file but converts all "
"written data to uppercase::"
msgstr ""
"Les programmeurs Python peuvent facilement mettre en œuvre la délégation. "
"Par exemple, la classe suivante implémente une classe qui se comporte comme "
"un fichier, mais convertit toutes les données écrites en majuscules:"

# e51dfb707f794799aac22e3836dda47b
#: faq/programming.rst:1309
msgid ""
"Here the ``UpperOut`` class redefines the ``write()`` method to convert the "
"argument string to uppercase before calling the underlying ``self.__outfile."
"write()`` method.  All other methods are delegated to the underlying ``self."
"__outfile`` object.  The delegation is accomplished via the ``__getattr__`` "
"method; consult :ref:`the language reference <attribute-access>` for more "
"information about controlling attribute access."
msgstr ""
"Ici, la classe ``UpperOut`` redéfinit la méthode  ``write()`` pour convertir "
"la chaîne d'argument en majuscules avant d'appeler la méthode sous-jacentes "
"``self.__outfile.write()``. Toutes les autres méthodes sont déléguées à "
"l'objet sous-jacent ``self.__outfile``. La délégation se fait par la méthode "
"``__getattr__``, consulter: ref:`the language reference <attribute-access>` "
"pour plus d'informations sur le contrôle d'accès d'attribut."

# f2657d8831734b28ad5e1a5603ddb775
#: faq/programming.rst:1316
msgid ""
"Note that for more general cases delegation can get trickier. When "
"attributes must be set as well as retrieved, the class must define a :meth:"
"`__setattr__` method too, and it must do so carefully.  The basic "
"implementation of :meth:`__setattr__` is roughly equivalent to the "
"following::"
msgstr ""
"Notez que pour une utilisation plus générale de la délégation, les choses "
"peuvent se compliquer. Lorsque les attributs doivent être définis aussi bien "
"que récupérés, la classe doit définir une méthode :meth:``__setattr__`` "
"aussi, et il doit le faire avec soin. La mise en œuvre basique de la "
"méthode :meth:``__setattr__`` est à peu près équivalent à ce qui suit:"

# 2c6cccf6bad34d399479553a2badd0b4
#: faq/programming.rst:1327
msgid ""
"Most :meth:`__setattr__` implementations must modify ``self.__dict__`` to "
"store local state for self without causing an infinite recursion."
msgstr ""
"La plupart des implémentations de: meth:`__setattr__` doivent modifier "
"``self.__dict__`` pour stocker l'état locale de self sans provoquer une "
"récursion infinie."

# 8b9d408d65d04eb696a036613d41c5ef
#: faq/programming.rst:1332
msgid ""
"How do I call a method defined in a base class from a derived class that "
"overrides it?"
msgstr ""
"Comment appeler une méthode définie dans une classe de base depuis une "
"classe dérivée qui la surcharge?"

# 5fa1d145a0364172bae041a2855ceabf
#: faq/programming.rst:1334
msgid "Use the built-in :func:`super` function::"
msgstr "Utiliser la fonction :func:`getattr`::"

# c8a6f07b0685461e9d774cd6ecfbd0aa
#: faq/programming.rst:1340
msgid ""
"For version prior to 3.0, you may be using classic classes: For a class "
"definition such as ``class Derived(Base): ...`` you can call method "
"``meth()`` defined in ``Base`` (or one of ``Base``'s base classes) as ``Base."
"meth(self, arguments...)``.  Here, ``Base.meth`` is an unbound method, so "
"you need to provide the ``self`` argument."
msgstr ""
"Pour version antérieure à 3.0, vous pouvez utiliser des classes classiques: "
"Pour une définition de classe telle que ``class derived(Base)...`` vous "
"pouvez appeler la méthode ``meth()`` défini dans `` `` Base (ou l'une des "
"classes de base de ``Base``) en faisant ``Base.meth(self, arguments...)``. "
"Ici, ``Base.meth`` est une méthode non liée, vous devez donc fournir "
"l'argument ``self``."

# e5d379a0646c47e993fc8842a3105cc9
#: faq/programming.rst:1348
msgid "How can I organize my code to make it easier to change the base class?"
msgstr ""
"Comment puis-je organiser mon code pour permettre de changer la classe de "
"base plus facilement?"

# d4bd980a6ce04ffab3e5ceb6bd57c32b
#: faq/programming.rst:1350
msgid ""
"You could define an alias for the base class, assign the real base class to "
"it before your class definition, and use the alias throughout your class.  "
"Then all you have to change is the value assigned to the alias.  "
"Incidentally, this trick is also handy if you want to decide dynamically (e."
"g. depending on availability of resources) which base class to use.  "
"Example::"
msgstr ""
"Vous pouvez définir un alias pour la classe de base, lui attribuer la classe "
"de base réelle avant la définition de classe, et utiliser l'alias au long de "
"votre classe. Ensuite, tout ce que vous devez changer est la valeur "
"attribuée à l'alias. Incidemment, cette astuce est également utile si vous "
"voulez décider dynamiquement (par exemple en fonction de la disponibilité "
"des ressources) la classe de base à utiliser. Exemple::"

# c0839fb0a2a141c28dbc68c2b64fcd07
#: faq/programming.rst:1365
msgid "How do I create static class data and static class methods?"
msgstr ""
"Comment puis-je créer des données statiques de classe et des méthodes "
"statiques de classe?"

# 51b382f1f7c340ae8ff9ad8999f8afdd
#: faq/programming.rst:1367
msgid ""
"Both static data and static methods (in the sense of C++ or Java) are "
"supported in Python."
msgstr ""
"Tant les données statiques que les méthodes statiques (dans le sens de C + + "
"ou Java) sont pris en charge en Python."

# f3b27062960b473197a6d572edf2674b
#: faq/programming.rst:1370
msgid ""
"For static data, simply define a class attribute.  To assign a new value to "
"the attribute, you have to explicitly use the class name in the assignment::"
msgstr ""
"Pour les données statiques, il suffit de définir un attribut de classe. Pour "
"attribuer une nouvelle valeur à l'attribut, vous devez explicitement "
"utiliser le nom de classe dans l'affectation:"

# d6972f161ebd40fcbf6cb5e95b89fff7
#: faq/programming.rst:1382
msgid ""
"``c.count`` also refers to ``C.count`` for any ``c`` such that "
"``isinstance(c, C)`` holds, unless overridden by ``c`` itself or by some "
"class on the base-class search path from ``c.__class__`` back to ``C``."
msgstr ""
"``c.count`` se réfère également à ``C.count`` pour tout ``c`` telle que "
"``isInstance (c, C)`` est vrai, sauf remplacement par ``c`` lui-même ou par "
"une classe sur le chemin de recherche de classe de base de ``c.__class__`` "
"jusqu'à ``C``."

# fe4cdbbed83a4df7b6f07ebded51d932
#: faq/programming.rst:1386
msgid ""
"Caution: within a method of C, an assignment like ``self.count = 42`` "
"creates a new and unrelated instance named \"count\" in ``self``'s own "
"dict.  Rebinding of a class-static data name must always specify the class "
"whether inside a method or not::"
msgstr ""
"Attention: dans une méthode de C, une affectation comme ``self.count=42`` "
"crée une nouvelle instance et sans rapport avec le nom \"count\" dans dans "
"le dictionnaire de données de ``self``. La redéfinition d'une donnée "
"statique de classe doit toujours spécifier la classe que l'on soit à "
"l'intérieur d'une méthode ou non:"

# 71749b400f5c4f2699bb7385c4aef2f5
#: faq/programming.rst:1393
msgid "Static methods are possible::"
msgstr "Les méthodes statiques sont possibles depuis Python 2.2::"

# 1a034770406e426d9d9b60e663c2f0d0
#: faq/programming.rst:1401
msgid ""
"However, a far more straightforward way to get the effect of a static method "
"is via a simple module-level function::"
msgstr ""
"Cependant, d'une manière beaucoup plus simple pour obtenir l'effet d'une "
"méthode statique se fait par une simple fonction au niveau du module::"

# ca6bc65c5a124523b471c6720814821c
#: faq/programming.rst:1407
msgid ""
"If your code is structured so as to define one class (or tightly related "
"class hierarchy) per module, this supplies the desired encapsulation."
msgstr ""
"Si votre code est structuré de manière à définir une classe (ou bien la "
"hiérarchie des classes connexes) par module, ceci fournira l'encapsulation "
"souhaitée."

# d2eb38520af148d19ecfa4cac42832d1
#: faq/programming.rst:1412
msgid "How can I overload constructors (or methods) in Python?"
msgstr "Comment puis-je surcharger les constructeurs (ou méthodes) en Python?"

# 826cffcfe2b841c49b91ae27a9aef8ab
#: faq/programming.rst:1414
msgid ""
"This answer actually applies to all methods, but the question usually comes "
"up first in the context of constructors."
msgstr ""
"Cette réponse s'applique en fait à toutes les méthodes, mais la question "
"vient généralement en premier dans le contexte des constructeurs."

# 847b8eeebeec45e1b3b3e0bb8766c9e5
#: faq/programming.rst:1417
msgid "In C++ you'd write"
msgstr "In C++ you'd write"

# 1fd873b6f18f48b48f0702107d0833b9
#: faq/programming.rst:1426
msgid ""
"In Python you have to write a single constructor that catches all cases "
"using default arguments.  For example::"
msgstr ""
"En Python, vous devez écrire un constructeur unique qui considère tous les "
"cas en utilisant des arguments par défaut. Par exemple::"

# 9e61f787b0a24c20b6e7cff8271bdd54
#: faq/programming.rst:1436
msgid "This is not entirely equivalent, but close enough in practice."
msgstr ""
"Ce n'est pas tout à fait équivalent, mais suffisamment proche dans la "
"pratique."

# 3bee2386480c4a3f84316fc7b6f088b5
#: faq/programming.rst:1438
msgid "You could also try a variable-length argument list, e.g. ::"
msgstr ""
"Vous pouvez aussi utiliser une liste d'arguments de longueur variable, par "
"exemple ::"

# 95c67615e23b4722af34b1220cedbde2
#: faq/programming.rst:1443
msgid "The same approach works for all method definitions."
msgstr "La même approche fonctionne pour toutes les définitions de méthode."

# c4a1829e941a45e58bc8caaa1249dc2e
#: faq/programming.rst:1447
msgid "I try to use __spam and I get an error about _SomeClassName__spam."
msgstr ""
"J'essaie d'utiliser __spam et j'obtiens une erreur à propos de "
"_SomeClassName__spam."

# aee03f8a9a3c43c79965a98643287e30
#: faq/programming.rst:1449
msgid ""
"Variable names with double leading underscores are \"mangled\" to provide a "
"simple but effective way to define class private variables.  Any identifier "
"of the form ``__spam`` (at least two leading underscores, at most one "
"trailing underscore) is textually replaced with ``_classname__spam``, where "
"``classname`` is the current class name with any leading underscores "
"stripped."
msgstr ""
"Les noms de variables avec le double de soulignement sont «déformés» pour "
"fournir un moyen simple mais efficace de définir variables privées à la "
"classe. Tout identificateur de la forme ``__spam`` (au moins deux traits de "
"soulignement préfixe, au plus un soulignement suffix) est textuellement "
"remplacé par ``_classname__spam``, où ``classname`` est le nom de la classe "
"en cours avec les traits de soulignement dépouillés."

# 1db497b48ed8418781a458259f31c498
#: faq/programming.rst:1455
msgid ""
"This doesn't guarantee privacy: an outside user can still deliberately "
"access the \"_classname__spam\" attribute, and private values are visible in "
"the object's ``__dict__``.  Many Python programmers never bother to use "
"private variable names at all."
msgstr ""
"Cela ne garantit pas la privauté de l'accès : un utilisateur extérieur peut "
"encore délibérément acceder à l'attribut ``_classname__spam``, et les "
"valeurs privées sont visibles dans `` l'objet __dict__ ``. De nombreux "
"programmeurs Python ne prennent jamais la peine d'utiliser des noms de "
"variable privée."

# 492ba041eaf0401f9fa14acf3d27932a
#: faq/programming.rst:1462
msgid "My class defines __del__ but it is not called when I delete the object."
msgstr ""
"Ma classe définit __del__ mais il n'est pas appelé lorsque je supprime "
"l'objet."

# 84d70669fd7740b09edb15dd59623728
#: faq/programming.rst:1464
msgid "There are several possible reasons for this."
msgstr "Il y a plusieurs raisons possibles pour cela."

# e0df2530eeed4d16a4f23000068f8cb1
#: faq/programming.rst:1466
msgid ""
"The del statement does not necessarily call :meth:`__del__` -- it simply "
"decrements the object's reference count, and if this reaches zero :meth:"
"`__del__` is called."
msgstr ""
"La commande del n'appelle pas forcément: meth: `__del__` - il décrémente "
"simplement le compteur de références de l'objet, et si celui ci arrive à "
"zéro: meth: `__del__` est appelée."

# d2e2318f86384c3286bbc3db9b4b9bab
#: faq/programming.rst:1470
msgid ""
"If your data structures contain circular links (e.g. a tree where each child "
"has a parent reference and each parent has a list of children) the reference "
"counts will never go back to zero.  Once in a while Python runs an algorithm "
"to detect such cycles, but the garbage collector might run some time after "
"the last reference to your data structure vanishes, so your :meth:`__del__` "
"method may be called at an inconvenient and random time. This is "
"inconvenient if you're trying to reproduce a problem. Worse, the order in "
"which object's :meth:`__del__` methods are executed is arbitrary.  You can "
"run :func:`gc.collect` to force a collection, but there *are* pathological "
"cases where objects will never be collected."
msgstr ""

# 5a4fc6d3af374da8a3cd76b598816569
#: faq/programming.rst:1481
msgid ""
"Despite the cycle collector, it's still a good idea to define an explicit "
"``close()`` method on objects to be called whenever you're done with them.  "
"The ``close()`` method can then remove attributes that refer to subobjecs.  "
"Don't call :meth:`__del__` directly -- :meth:`__del__` should call "
"``close()`` and ``close()`` should make sure that it can be called more than "
"once for the same object."
msgstr ""

# b3fbc62bc0bc4035a9347948ce87bc0f
#: faq/programming.rst:1488
msgid ""
"Another way to avoid cyclical references is to use the :mod:`weakref` "
"module, which allows you to point to objects without incrementing their "
"reference count. Tree data structures, for instance, should use weak "
"references for their parent and sibling references (if they need them!)."
msgstr ""

# 0c8fdc7af4984f99a5a1b7037dde5909
#: faq/programming.rst:1501
msgid ""
"Finally, if your :meth:`__del__` method raises an exception, a warning "
"message is printed to :data:`sys.stderr`."
msgstr ""

# 67069d83722d40598ac356492fcdcc09
#: faq/programming.rst:1506
msgid "How do I get a list of all instances of a given class?"
msgstr ""

# dbf13aa93c524fcd96c23cfa68664c1c
#: faq/programming.rst:1508
msgid ""
"Python does not keep track of all instances of a class (or of a built-in "
"type). You can program the class's constructor to keep track of all "
"instances by keeping a list of weak references to each instance."
msgstr ""

# 391bfb176d534e5c8dc78ee90a988c11
#: faq/programming.rst:1514
msgid "Modules"
msgstr "Modules"

# 9f3b7a4546c0494b9d8991e262c7be52
#: faq/programming.rst:1517
msgid "How do I create a .pyc file?"
msgstr ""

# 6350020719a547d3a4038ea0849b87ae
#: faq/programming.rst:1519
msgid ""
"When a module is imported for the first time (or when the source is more "
"recent than the current compiled file) a ``.pyc`` file containing the "
"compiled code should be created in the same directory as the ``.py`` file."
msgstr ""

# 332fc38069e64933aefab1cef46415d0
#: faq/programming.rst:1523
msgid ""
"One reason that a ``.pyc`` file may not be created is permissions problems "
"with the directory. This can happen, for example, if you develop as one user "
"but run as another, such as if you are testing with a web server.  Creation "
"of a .pyc file is automatic if you're importing a module and Python has the "
"ability (permissions, free space, etc...) to write the compiled module back "
"to the directory."
msgstr ""

# 8735718135ad4689a24e6949012dbdd3
#: faq/programming.rst:1530
msgid ""
"Running Python on a top level script is not considered an import and no ``."
"pyc`` will be created.  For example, if you have a top-level module ``abc."
"py`` that imports another module ``xyz.py``, when you run abc, ``xyz.pyc`` "
"will be created since xyz is imported, but no ``abc.pyc`` file will be "
"created since ``abc.py`` isn't being imported."
msgstr ""

# cec712d38dfe4c369778155b3cf0a39e
#: faq/programming.rst:1536
msgid ""
"If you need to create abc.pyc -- that is, to create a .pyc file for a module "
"that is not imported -- you can, using the :mod:`py_compile` and :mod:"
"`compileall` modules."
msgstr ""

# 5eee7834613446e09cb357fae8f01f10
#: faq/programming.rst:1540
msgid ""
"The :mod:`py_compile` module can manually compile any module.  One way is to "
"use the ``compile()`` function in that module interactively::"
msgstr ""

# 5eef4b086907413fa474bdf83ec32c57
#: faq/programming.rst:1546
msgid ""
"This will write the ``.pyc`` to the same location as ``abc.py`` (or you can "
"override that with the optional parameter ``cfile``)."
msgstr ""

# ffb2adbf95dc41d7b90de139b794b825
#: faq/programming.rst:1549
msgid ""
"You can also automatically compile all files in a directory or directories "
"using the :mod:`compileall` module.  You can do it from the shell prompt by "
"running ``compileall.py`` and providing the path of a directory containing "
"Python files to compile::"
msgstr ""

# 515c7b40e5bc49828c8b1932a5a0b9c8
#: faq/programming.rst:1558
msgid "How do I find the current module name?"
msgstr ""

# 0c24a5a77c4c411fb704852ffcccd185
#: faq/programming.rst:1560
msgid ""
"A module can find out its own module name by looking at the predefined "
"global variable ``__name__``.  If this has the value ``'__main__'``, the "
"program is running as a script.  Many modules that are usually used by "
"importing them also provide a command-line interface or a self-test, and "
"only execute this code after checking ``__name__``::"
msgstr ""

# 5bc17894eca242498be67d972ded5a63
#: faq/programming.rst:1575
msgid "How can I have modules that mutually import each other?"
msgstr ""

# 1e3f343f209344e596b881c3ec356fb0
#: faq/programming.rst:1577
msgid "Suppose you have the following modules:"
msgstr ""

# 9a095c246fd447ea80b3139793bb089e
#: faq/programming.rst:1579
msgid "foo.py::"
msgstr ""

# 51a288dbcfb84153bbf670a1581ab183
#: faq/programming.rst:1584
msgid "bar.py::"
msgstr ""

# 3472421b8ce3446a80207dd10919ca5f
#: faq/programming.rst:1589
msgid "The problem is that the interpreter will perform the following steps:"
msgstr ""

# f70da25b8db041e0b5a396bd50a466f4
#: faq/programming.rst:1591
msgid "main imports foo"
msgstr ""

# b1622575753242f5999899ee592798d8
#: faq/programming.rst:1592
msgid "Empty globals for foo are created"
msgstr ""

# a05b0434ddde4adabf1ec43f4e690029
#: faq/programming.rst:1593
msgid "foo is compiled and starts executing"
msgstr ""

# 63490c23ef474e6cb8d552c9d6771639
#: faq/programming.rst:1594
msgid "foo imports bar"
msgstr ""

# 33266f7c0f224735b387ec74e833fbdc
#: faq/programming.rst:1595
msgid "Empty globals for bar are created"
msgstr ""

# 9ddee90f6ef64d0fa6c7292e82f03d04
#: faq/programming.rst:1596
msgid "bar is compiled and starts executing"
msgstr ""

# f945a64f67aa4f6cb3b7b8c96da27962
#: faq/programming.rst:1597
msgid ""
"bar imports foo (which is a no-op since there already is a module named foo)"
msgstr ""

# db3d691768334177b138cf5886d63290
#: faq/programming.rst:1598
msgid "bar.foo_var = foo.foo_var"
msgstr ""

# 1f2b972e912a49ab9b0cb1825390020a
#: faq/programming.rst:1600
msgid ""
"The last step fails, because Python isn't done with interpreting ``foo`` yet "
"and the global symbol dictionary for ``foo`` is still empty."
msgstr ""

# 7b2edde9b59a405ea55e1b4837d763d8
#: faq/programming.rst:1603
msgid ""
"The same thing happens when you use ``import foo``, and then try to access "
"``foo.foo_var`` in global code."
msgstr ""

# e1a3186cf4964d199a0ccfa18501a373
#: faq/programming.rst:1606
msgid "There are (at least) three possible workarounds for this problem."
msgstr ""

# ed4c8a09944c4cea926fd8827150d885
#: faq/programming.rst:1608
msgid ""
"Guido van Rossum recommends avoiding all uses of ``from <module> import ..."
"``, and placing all code inside functions.  Initializations of global "
"variables and class variables should use constants or built-in functions "
"only.  This means everything from an imported module is referenced as "
"``<module>.<name>``."
msgstr ""

# c2f0bd3c518946da85e8888711d5def7
#: faq/programming.rst:1613
msgid ""
"Jim Roskind suggests performing steps in the following order in each module:"
msgstr ""

# cffdc93dbea9447fbc14c74d38c28777
#: faq/programming.rst:1615
msgid ""
"exports (globals, functions, and classes that don't need imported base "
"classes)"
msgstr ""

# 0329487ccf5240b8adf409fddae647f0
#: faq/programming.rst:1617
msgid "``import`` statements"
msgstr ""

# faa4a784e68e4276a47776b60174a164
#: faq/programming.rst:1618
msgid ""
"active code (including globals that are initialized from imported values)."
msgstr ""

# bc104337b6ff4b1daa40776f3857a5f2
#: faq/programming.rst:1620
msgid ""
"van Rossum doesn't like this approach much because the imports appear in a "
"strange place, but it does work."
msgstr ""

# b83ca7f2a39b427e8fc49bcb3f704235
#: faq/programming.rst:1623
msgid ""
"Matthias Urlichs recommends restructuring your code so that the recursive "
"import is not necessary in the first place."
msgstr ""

# 6daf0cb60bd34126b7f5a51e41bf7daf
#: faq/programming.rst:1626
msgid "These solutions are not mutually exclusive."
msgstr ""

# 52ce8c59edd745ccbac5c2e54ab5253a
#: faq/programming.rst:1630
msgid "__import__('x.y.z') returns <module 'x'>; how do I get z?"
msgstr ""

# dcb8b2708bb64f5ea075739ee6e40fc1
#: faq/programming.rst:1632
msgid "Try::"
msgstr ""

# f8aef33068e5422aa426971d5b920beb
#: faq/programming.rst:1636
msgid "For more realistic situations, you may have to do something like ::"
msgstr ""

# b9ad45fa4dda4e81a48d894b026d9646
#: faq/programming.rst:1642
msgid ""
"See :mod:`importlib` for a convenience function called :func:`~importlib."
"import_module`."
msgstr ""

# 442bc4ff35234493afa9f3d70a661d38
#: faq/programming.rst:1648
msgid ""
"When I edit an imported module and reimport it, the changes don't show up.  "
"Why does this happen?"
msgstr ""

# b346762ec71f48c58537c1520c77c1d1
#: faq/programming.rst:1650
msgid ""
"For reasons of efficiency as well as consistency, Python only reads the "
"module file on the first time a module is imported.  If it didn't, in a "
"program consisting of many modules where each one imports the same basic "
"module, the basic module would be parsed and re-parsed many times.  To force "
"rereading of a changed module, do this::"
msgstr ""

# 252a5966685b4d03973d6391d0af3ed1
#: faq/programming.rst:1660
msgid ""
"Warning: this technique is not 100% fool-proof.  In particular, modules "
"containing statements like ::"
msgstr ""

# a934c4acfab54830be665b49f09aabd0
#: faq/programming.rst:1665
msgid ""
"will continue to work with the old version of the imported objects.  If the "
"module contains class definitions, existing class instances will *not* be "
"updated to use the new class definition.  This can result in the following "
"paradoxical behaviour:"
msgstr ""

# 3703155baff048cd8eea7cdc7cac98d2
#: faq/programming.rst:1678
msgid ""
"The nature of the problem is made clear if you print out the \"identity\" of "
"the class objects:"
msgstr ""

# 74204cb70d154d029261200c4f0897d9
#: faq/windows.rst:7
msgid "Python on Windows FAQ"
msgstr ""

# 15f0adc207b54953844e2199effa7a65
#: faq/windows.rst:16
msgid "How do I run a Python program under Windows?"
msgstr ""

# 0998ecd4c6114a34aad6ae4c86bf81f8
#: faq/windows.rst:18
msgid ""
"This is not necessarily a straightforward question. If you are already "
"familiar with running programs from the Windows command line then everything "
"will seem obvious; otherwise, you might need a little more guidance."
msgstr ""

#: faq/windows.rst:0
msgid "|Python Development on XP|_"
msgstr ""

# e7980de569ff4fe3bffdb567c1b5de1b
#: faq/windows.rst:25
msgid ""
"This series of screencasts aims to get you up and running with Python on "
"Windows XP.  The knowledge is distilled into 1.5 hours and will get you up "
"and running with the right Python distribution, coding in your choice of "
"IDE, and debugging and writing solid code with unit-tests."
msgstr ""

# 7ee84cbb2f8541f89377dc846bd8f045
#: faq/windows.rst:34
msgid ""
"Unless you use some sort of integrated development environment, you will end "
"up *typing* Windows commands into what is variously referred to as a \"DOS "
"window\" or \"Command prompt window\".  Usually you can create such a window "
"from your Start menu; under Windows 7 the menu selection is :menuselection:"
"`Start --> Programs --> Accessories --> Command Prompt`.  You should be able "
"to recognize when you have started such a window because you will see a "
"Windows \"command prompt\", which usually looks like this::"
msgstr ""

# 5577441963394f5a988817814bf7cb9f
#: faq/windows.rst:44
msgid ""
"The letter may be different, and there might be other things after it, so "
"you might just as easily see something like::"
msgstr ""

# f12e657e0c10431188ab00af789469fd
#: faq/windows.rst:49
msgid ""
"depending on how your computer has been set up and what else you have "
"recently done with it.  Once you have started such a window, you are well on "
"the way to running Python programs."
msgstr ""

# b2a2f473896642c0a44ed7288ba694c9
#: faq/windows.rst:53
msgid ""
"You need to realize that your Python scripts have to be processed by another "
"program called the Python *interpreter*.  The interpreter reads your script, "
"compiles it into bytecodes, and then executes the bytecodes to run your "
"program. So, how do you arrange for the interpreter to handle your Python?"
msgstr ""

# 5d236d9118784f3fadec358a2d88ac5e
#: faq/windows.rst:58
msgid ""
"First, you need to make sure that your command window recognises the word "
"\"python\" as an instruction to start the interpreter.  If you have opened a "
"command window, you should try entering the command ``python`` and hitting "
"return.::"
msgstr ""

# facfdd3cd3af4e0eb71891af46bc7c7c
#: faq/windows.rst:65
msgid "You should then see something like::"
msgstr ""

# 133de9c5cdeb4f579e1ccf328cc522d6
#: faq/windows.rst:71
msgid ""
"You have started the interpreter in \"interactive mode\". That means you can "
"enter Python statements or expressions interactively and have them executed "
"or evaluated while you wait.  This is one of Python's strongest features.  "
"Check it by entering a few expressions of your choice and seeing the "
"results::"
msgstr ""

# d59900ffc5734d0da1a94262325c58db
#: faq/windows.rst:81
msgid ""
"Many people use the interactive mode as a convenient yet highly programmable "
"calculator.  When you want to end your interactive Python session, hold the "
"Ctrl key down while you enter a Z, then hit the \"Enter\" key to get back to "
"your Windows command prompt."
msgstr ""

# d61759bc9c3a499fae997cc68b30af96
#: faq/windows.rst:86
msgid ""
"You may also find that you have a Start-menu entry such as :menuselection:"
"`Start --> Programs --> Python 3.3 --> Python (command line)` that results "
"in you seeing the ``>>>`` prompt in a new window.  If so, the window will "
"disappear after you enter the Ctrl-Z character; Windows is running a single "
"\"python\" command in the window, and closes it when you terminate the "
"interpreter."
msgstr ""

# 6efb8a17c7ed4f94920b0de2ae9e02b5
#: faq/windows.rst:92
msgid ""
"If the ``python`` command, instead of displaying the interpreter prompt "
"``>>>``, gives you a message like::"
msgstr ""

#: faq/windows.rst:0
msgid "|Adding Python to DOS Path|_"
msgstr ""

# 07881719ef3b4320aa4a1f4b2e9e1e33
#: faq/windows.rst:100
msgid ""
"Python is not added to the DOS path by default.  This screencast will walk "
"you through the steps to add the correct entry to the `System Path`, "
"allowing Python to be executed from the command-line by all users."
msgstr ""

# 3c099fdf71cf4f8784ac306bb61583c3
#: faq/windows.rst:109
msgid "or::"
msgstr ""

# 8d8e5460464c42b2855bfb089f2aa50a
#: faq/windows.rst:113
msgid ""
"then you need to make sure that your computer knows where to find the Python "
"interpreter.  To do this you will have to modify a setting called PATH, "
"which is a list of directories where Windows will look for programs."
msgstr ""

# 0ddec0c7abbb4b5eba77b427baf8ed07
#: faq/windows.rst:117
msgid ""
"You should arrange for Python's installation directory to be added to the "
"PATH of every command window as it starts.  If you installed Python fairly "
"recently then the command ::"
msgstr ""

# 431ed14cadc9469ab6b346541e4e5cb9
#: faq/windows.rst:123
msgid ""
"will probably tell you where it is installed; the usual location is "
"something like ``C:\\Python33``.  Otherwise you will be reduced to a search "
"of your whole disk ... use :menuselection:`Tools --> Find` or hit the :"
"guilabel:`Search` button and look for \"python.exe\".  Supposing you "
"discover that Python is installed in the ``C:\\Python33`` directory (the "
"default at the time of writing), you should make sure that entering the "
"command ::"
msgstr ""

# eaaca93f3a254da89baba6e086f7f7c3
#: faq/windows.rst:132
msgid ""
"starts up the interpreter as above (and don't forget you'll need a \"CTRL-Z"
"\" and an \"Enter\" to get out of it). Once you have verified the directory, "
"you can add it to the system path to make it easier to start Python by just "
"running the ``python`` command. This is currently an option in the installer "
"as of CPython 3.3."
msgstr ""

# 312740be6d06469c94dfaf9b518d3588
#: faq/windows.rst:138
msgid ""
"More information about environment variables can be found on the :ref:`Using "
"Python on Windows <setting-envvars>` page."
msgstr ""

# b50a18a19d5041b2b527bf23a5e97213
#: faq/windows.rst:142
msgid "How do I make Python scripts executable?"
msgstr ""

# 8d0377eb7323496faa7ea5642997dce0
#: faq/windows.rst:144
msgid ""
"On Windows, the standard Python installer already associates the .py "
"extension with a file type (Python.File) and gives that file type an open "
"command that runs the interpreter (``D:\\Program Files\\Python\\python.exe "
"\"%1\" %*``).  This is enough to make scripts executable from the command "
"prompt as 'foo.py'.  If you'd rather be able to execute the script by simple "
"typing 'foo' with no extension you need to add .py to the PATHEXT "
"environment variable."
msgstr ""

# 243705aafb414227993dbe98ef9d891d
#: faq/windows.rst:152
msgid "Why does Python sometimes take so long to start?"
msgstr ""

# 0cf70294ca9349fd9fd794493eb69b76
#: faq/windows.rst:154
msgid ""
"Usually Python starts very quickly on Windows, but occasionally there are "
"bug reports that Python suddenly begins to take a long time to start up.  "
"This is made even more puzzling because Python will work fine on other "
"Windows systems which appear to be configured identically."
msgstr ""

# c7c7d520bdaa41bb8422fb57bf9633cd
#: faq/windows.rst:159
msgid ""
"The problem may be caused by a misconfiguration of virus checking software "
"on the problem machine.  Some virus scanners have been known to introduce "
"startup overhead of two orders of magnitude when the scanner is configured "
"to monitor all reads from the filesystem.  Try checking the configuration of "
"virus scanning software on your systems to ensure that they are indeed "
"configured identically. McAfee, when configured to scan all file system read "
"activity, is a particular offender."
msgstr ""

# 6273ef2f07544479afc8aec29724330a
#: faq/windows.rst:169
msgid "How do I make an executable from a Python script?"
msgstr "Comment construire un tableau en Python?"

# c2c10c4c13444811889b5b2c827b04ea
#: faq/windows.rst:171
msgid ""
"See http://www.py2exe.org/ for a distutils extension that allows you to "
"create console and GUI executables from Python code."
msgstr ""

# e819b27705514faf8558776af0c0074d
#: faq/windows.rst:175
msgid "Is a ``*.pyd`` file the same as a DLL?"
msgstr ""

# bdbc2a2bd2fd4eb2a8801b903e43694f
#: faq/windows.rst:179
msgid ""
"Yes, .pyd files are dll's, but there are a few differences.  If you have a "
"DLL named ``foo.pyd``, then it must have a function ``initfoo()``.  You can "
"then write Python \"import foo\", and Python will search for foo.pyd (as "
"well as foo.py, foo.pyc) and if it finds it, will attempt to call "
"``initfoo()`` to initialize it.  You do not link your .exe with foo.lib, as "
"that would cause Windows to require the DLL to be present."
msgstr ""

# 9ee50ddd34134aa9be09d37a24215292
#: faq/windows.rst:186
msgid ""
"Note that the search path for foo.pyd is PYTHONPATH, not the same as the "
"path that Windows uses to search for foo.dll.  Also, foo.pyd need not be "
"present to run your program, whereas if you linked your program with a dll, "
"the dll is required.  Of course, foo.pyd is required if you want to say "
"``import foo``.  In a DLL, linkage is declared in the source code with "
"``__declspec(dllexport)``. In a .pyd, linkage is defined in a list of "
"available functions."
msgstr ""

# bbb022fab30e484e9482d36c338cbcc9
#: faq/windows.rst:195
msgid "How can I embed Python into a Windows application?"
msgstr ""

# 2db32007ee3d410caad3154943eb503a
#: faq/windows.rst:197
msgid ""
"Embedding the Python interpreter in a Windows app can be summarized as "
"follows:"
msgstr ""

# e0f234ec75274b4fb09b2b2f166c9af8
#: faq/windows.rst:199
msgid ""
"Do _not_ build Python into your .exe file directly.  On Windows, Python must "
"be a DLL to handle importing modules that are themselves DLL's.  (This is "
"the first key undocumented fact.)  Instead, link to :file:`python{NN}.dll`; "
"it is typically installed in ``C:\\Windows\\System``.  *NN* is the Python "
"version, a number such as \"33\" for Python 3.3."
msgstr ""

# 5ed638d3105c47899102e56b7531833c
#: faq/windows.rst:205
msgid ""
"You can link to Python in two different ways.  Load-time linking means "
"linking against :file:`python{NN}.lib`, while run-time linking means linking "
"against :file:`python{NN}.dll`.  (General note: :file:`python{NN}.lib` is "
"the so-called \"import lib\" corresponding to :file:`python{NN}.dll`.  It "
"merely defines symbols for the linker.)"
msgstr ""

# 933326eec2724334b78f3836a3eb415e
#: faq/windows.rst:211
msgid ""
"Run-time linking greatly simplifies link options; everything happens at run "
"time.  Your code must load :file:`python{NN}.dll` using the Windows "
"``LoadLibraryEx()`` routine.  The code must also use access routines and "
"data in :file:`python{NN}.dll` (that is, Python's C API's) using pointers "
"obtained by the Windows ``GetProcAddress()`` routine.  Macros can make using "
"these pointers transparent to any C code that calls routines in Python's C "
"API."
msgstr ""

# 5bbb17f665dc4f70af9d292c0ae99abc
#: faq/windows.rst:218
msgid ""
"Borland note: convert :file:`python{NN}.lib` to OMF format using Coff2Omf."
"exe first."
msgstr ""

# 74d7be880d8941fb95400ec5fc514723
#: faq/windows.rst:223
msgid ""
"If you use SWIG, it is easy to create a Python \"extension module\" that "
"will make the app's data and methods available to Python.  SWIG will handle "
"just about all the grungy details for you.  The result is C code that you "
"link *into* your .exe file (!)  You do _not_ have to create a DLL file, and "
"this also simplifies linking."
msgstr ""

# 813531ef0dad4df78d65db37efa603d6
#: faq/windows.rst:229
msgid ""
"SWIG will create an init function (a C function) whose name depends on the "
"name of the extension module.  For example, if the name of the module is "
"leo, the init function will be called initleo().  If you use SWIG shadow "
"classes, as you should, the init function will be called initleoc().  This "
"initializes a mostly hidden helper class used by the shadow class."
msgstr ""

# edc8a0143b1b41b5b7ef2b7dda4626b2
#: faq/windows.rst:235
msgid ""
"The reason you can link the C code in step 2 into your .exe file is that "
"calling the initialization function is equivalent to importing the module "
"into Python! (This is the second key undocumented fact.)"
msgstr ""

# 33ce27c63f4647f995e1eaa5a3f09ed1
#: faq/windows.rst:239
msgid ""
"In short, you can use the following code to initialize the Python "
"interpreter with your extension module."
msgstr ""

# afaaa2457cae49be8fa6d155d73bb835
#: faq/windows.rst:250
msgid ""
"There are two problems with Python's C API which will become apparent if you "
"use a compiler other than MSVC, the compiler used to build pythonNN.dll."
msgstr ""

# 5962268b1e104d8889843e12efe3be78
#: faq/windows.rst:253
msgid ""
"Problem 1: The so-called \"Very High Level\" functions that take FILE * "
"arguments will not work in a multi-compiler environment because each "
"compiler's notion of a struct FILE will be different.  From an "
"implementation standpoint these are very _low_ level functions."
msgstr ""

# 2ec92ff7dca4472b81795037bd94d094
#: faq/windows.rst:258
msgid ""
"Problem 2: SWIG generates the following code when generating wrappers to "
"void functions:"
msgstr ""

# f430548e03a640f6bd2b74d6474cefe2
#: faq/windows.rst:267
msgid ""
"Alas, Py_None is a macro that expands to a reference to a complex data "
"structure called _Py_NoneStruct inside pythonNN.dll.  Again, this code will "
"fail in a mult-compiler environment.  Replace such code by:"
msgstr ""

# ee92e190b5154a06ba195c549bf329ae
#: faq/windows.rst:275
msgid ""
"It may be possible to use SWIG's ``%typemap`` command to make the change "
"automatically, though I have not been able to get this to work (I'm a "
"complete SWIG newbie)."
msgstr ""

# d4380c6e6f3a410688a82ec20efc7394
#: faq/windows.rst:279
msgid ""
"Using a Python shell script to put up a Python interpreter window from "
"inside your Windows app is not a good idea; the resulting window will be "
"independent of your app's windowing system.  Rather, you (or the "
"wxPythonWindow class) should create a \"native\" interpreter window.  It is "
"easy to connect that window to the Python interpreter.  You can redirect "
"Python's i/o to _any_ object that supports read and write, so all you need "
"is a Python object (defined in your extension module) that contains read() "
"and write() methods."
msgstr ""

# 23d9abe41810425894773a31b64fe1f2
#: faq/windows.rst:288
msgid "How do I keep editors from inserting tabs into my Python source?"
msgstr ""

# e5f1650daa01494c948cc88b17491a31
#: faq/windows.rst:290
msgid ""
"The FAQ does not recommend using tabs, and the Python style guide, :pep:`8`, "
"recommends 4 spaces for distributed Python code; this is also the Emacs "
"python-mode default."
msgstr ""

# 561ddebdf796485ba22f24e8a50cb536
#: faq/windows.rst:294
msgid ""
"Under any editor, mixing tabs and spaces is a bad idea.  MSVC is no "
"different in this respect, and is easily configured to use spaces: Take :"
"menuselection:`Tools --> Options --> Tabs`, and for file type \"Default\" "
"set \"Tab size\" and \"Indent size\" to 4, and select the \"Insert spaces\" "
"radio button."
msgstr ""

# d9d34eaca5ae411d99cfe18c299a7ed9
#: faq/windows.rst:299
msgid ""
"If you suspect mixed tabs and spaces are causing problems in leading "
"whitespace, run Python with the :option:`-t` switch or run ``Tools/Scripts/"
"tabnanny.py`` to check a directory tree in batch mode."
msgstr ""

# e612bbbfb3214b1099deeca98774bd02
#: faq/windows.rst:305
msgid "How do I check for a keypress without blocking?"
msgstr ""

# f8d081d973174732909ed8d273ea1484
#: faq/windows.rst:307
msgid ""
"Use the msvcrt module.  This is a standard Windows-specific extension "
"module. It defines a function ``kbhit()`` which checks whether a keyboard "
"hit is present, and ``getch()`` which gets one character without echoing it."
msgstr ""

# 4e1b3e8e72f8473b85ae8f87fe0a65ab
#: faq/windows.rst:313
msgid "How do I emulate os.kill() in Windows?"
msgstr ""

# 84e479e9a80f409da2f799119b78e003
#: faq/windows.rst:315
msgid ""
"Prior to Python 2.7 and 3.2, to terminate a process, you can use :mod:"
"`ctypes`::"
msgstr ""

# b1e44b5909734866aa7612b312a3a36d
#: faq/windows.rst:325
msgid ""
"In 2.7 and 3.2, :func:`os.kill` is implemented similar to the above "
"function, with the additional feature of being able to send CTRL+C and CTRL"
"+BREAK to console subprocesses which are designed to handle those signals. "
"See :func:`os.kill` for further details."
msgstr ""

# ce48e85a726646848afb2ceaae6a3073
#: faq/windows.rst:331
msgid "How do I extract the downloaded documentation on Windows?"
msgstr ""

# d3dab21d5ed74bc69ffd84619a40453e
#: faq/windows.rst:333
msgid ""
"Sometimes, when you download the documentation package to a Windows machine "
"using a web browser, the file extension of the saved file ends up being ."
"EXE. This is a mistake; the extension should be .TGZ."
msgstr ""

# b1ed05a5a4ea41cc8ecb29f2eeba72ae
#: faq/windows.rst:337
msgid ""
"Simply rename the downloaded file to have the .TGZ extension, and WinZip "
"will be able to handle it.  (If your copy of WinZip doesn't, get a newer one "
"from http://www.winzip.com.)"
msgstr ""
