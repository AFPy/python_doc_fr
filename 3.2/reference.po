# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2015, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-12-20 13:09\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

# 185142084a974d80bcb8c1acbe8699b2
#: reference/compound_stmts.rst:5
msgid "Compound statements"
msgstr ""

# 36186c0100b34b03b26df81f0594812d
#: reference/compound_stmts.rst:9
msgid ""
"Compound statements contain (groups of) other statements; they affect or "
"control the execution of those other statements in some way.  In general, "
"compound statements span multiple lines, although in simple incarnations a "
"whole compound statement may be contained in one line."
msgstr ""

# b62d6354d6984ad0958808982dfd6d82
#: reference/compound_stmts.rst:14
msgid ""
"The :keyword:`if`, :keyword:`while` and :keyword:`for` statements implement "
"traditional control flow constructs.  :keyword:`try` specifies exception "
"handlers and/or cleanup code for a group of statements, while the :keyword:"
"`with` statement allows the execution of initialization and finalization "
"code around a block of code.  Function and class definitions are also "
"syntactically compound statements."
msgstr ""

# 9a4507ab452c434289288bf366c7aa3b
#: reference/compound_stmts.rst:25
msgid ""
"Compound statements consist of one or more 'clauses.'  A clause consists of "
"a header and a 'suite.'  The clause headers of a particular compound "
"statement are all at the same indentation level. Each clause header begins "
"with a uniquely identifying keyword and ends with a colon.  A suite is a "
"group of statements controlled by a clause.  A suite can be one or more "
"semicolon-separated simple statements on the same line as the header, "
"following the header's colon, or it can be one or more indented statements "
"on subsequent lines.  Only the latter form of suite can contain nested "
"compound statements; the following is illegal, mostly because it wouldn't be "
"clear to which :keyword:`if` clause a following :keyword:`else` clause would "
"belong::"
msgstr ""

# 68eb668302f147ff988de7811afe6249
#: reference/compound_stmts.rst:38
msgid ""
"Also note that the semicolon binds tighter than the colon in this context, "
"so that in the following example, either all or none of the :func:`print` "
"calls are executed::"
msgstr ""

# 06a0a9a9fdf54b419253482e8cb2d9cf
#: reference/compound_stmts.rst:44
msgid "Summarizing:"
msgstr ""

# f187d30b953f4a919ea8c9d94cc38796
#: reference/compound_stmts.rst:63
msgid ""
"Note that statements always end in a ``NEWLINE`` possibly followed by a "
"``DEDENT``.  Also note that optional continuation clauses always begin with "
"a keyword that cannot start a statement, thus there are no ambiguities (the "
"'dangling :keyword:`else`' problem is solved in Python by requiring nested :"
"keyword:`if` statements to be indented)."
msgstr ""

# e05b0b234fa24ebea1743520fc2bf61d
#: reference/compound_stmts.rst:69
msgid ""
"The formatting of the grammar rules in the following sections places each "
"clause on a separate line for clarity."
msgstr ""

# 616ab8ff4b8f4c02972e128a6e52fd56
#: reference/compound_stmts.rst:78
msgid "The :keyword:`if` statement"
msgstr ""

# 4f651f85f50246bfaba88fef9d5f0e1e
#: reference/compound_stmts.rst:87
msgid "The :keyword:`if` statement is used for conditional execution:"
msgstr ""

# 28c4d94e1dfc468087eb053d55e85464
#: reference/compound_stmts.rst:94
msgid ""
"It selects exactly one of the suites by evaluating the expressions one by "
"one until one is found to be true (see section :ref:`booleans` for the "
"definition of true and false); then that suite is executed (and no other "
"part of the :keyword:`if` statement is executed or evaluated).  If all "
"expressions are false, the suite of the :keyword:`else` clause, if present, "
"is executed."
msgstr ""

# 14f9f10d9c674a58bae6a4969864b85a
#: reference/compound_stmts.rst:104
msgid "The :keyword:`while` statement"
msgstr ""

# 5590d15584db454ab1d1bb1df3d7f0d9
#: reference/compound_stmts.rst:112
msgid ""
"The :keyword:`while` statement is used for repeated execution as long as an "
"expression is true:"
msgstr ""

# cd415589d45c44f78ef04bdfa89fee4e
#: reference/compound_stmts.rst:119
msgid ""
"This repeatedly tests the expression and, if it is true, executes the first "
"suite; if the expression is false (which may be the first time it is tested) "
"the suite of the :keyword:`else` clause, if present, is executed and the "
"loop terminates."
msgstr ""

# cda7d50c7f484afdb335bc3be076077c
#: reference/compound_stmts.rst:128
msgid ""
"A :keyword:`break` statement executed in the first suite terminates the loop "
"without executing the :keyword:`else` clause's suite.  A :keyword:`continue` "
"statement executed in the first suite skips the rest of the suite and goes "
"back to testing the expression."
msgstr ""

# f220f27ebe2243498e727ce051f7d7b9
#: reference/compound_stmts.rst:137
msgid "The :keyword:`for` statement"
msgstr ""

# 22cacd883a34490d8acb28cbf26aefea
#: reference/compound_stmts.rst:150
msgid ""
"The :keyword:`for` statement is used to iterate over the elements of a "
"sequence (such as a string, tuple or list) or other iterable object:"
msgstr ""

# 26259deaa63d471aadda6ca148b7e7db
#: reference/compound_stmts.rst:157
msgid ""
"The expression list is evaluated once; it should yield an iterable object.  "
"An iterator is created for the result of the ``expression_list``.  The suite "
"is then executed once for each item provided by the iterator, in the order "
"of ascending indices.  Each item in turn is assigned to the target list "
"using the standard rules for assignments (see :ref:`assignment`), and then "
"the suite is executed.  When the items are exhausted (which is immediately "
"when the sequence is empty or an iterator raises a :exc:`StopIteration` "
"exception), the suite in the :keyword:`else` clause, if present, is "
"executed, and the loop terminates."
msgstr ""

# 890c2615ee734a0eb9d8447ef9233e73
#: reference/compound_stmts.rst:170
msgid ""
"A :keyword:`break` statement executed in the first suite terminates the loop "
"without executing the :keyword:`else` clause's suite.  A :keyword:`continue` "
"statement executed in the first suite skips the rest of the suite and "
"continues with the next item, or with the :keyword:`else` clause if there "
"was no next item."
msgstr ""

# 3a4351657ab94279be6dcbfa6c3ba08d
#: reference/compound_stmts.rst:176
msgid ""
"The suite may assign to the variable(s) in the target list; this does not "
"affect the next item assigned to it."
msgstr ""

# 339727c93f1b451899994c268330856d
#: reference/compound_stmts.rst:182
msgid ""
"Names in the target list are not deleted when the loop is finished, but if "
"the sequence is empty, it will not have been assigned to at all by the "
"loop.  Hint: the built-in function :func:`range` returns an iterator of "
"integers suitable to emulate the effect of Pascal's ``for i := a to b do``; "
"e.g., ``list(range(3))`` returns the list ``[0, 1, 2]``."
msgstr ""

# 92142bf7d5b84f5b85f5c603b559895c
#: reference/compound_stmts.rst:194
msgid ""
"There is a subtlety when the sequence is being modified by the loop (this "
"can only occur for mutable sequences, i.e. lists).  An internal counter is "
"used to keep track of which item is used next, and this is incremented on "
"each iteration.  When this counter has reached the length of the sequence "
"the loop terminates.  This means that if the suite deletes the current (or a "
"previous) item from the sequence, the next item will be skipped (since it "
"gets the index of the current item which has already been treated).  "
"Likewise, if the suite inserts an item in the sequence before the current "
"item, the current item will be treated again the next time through the loop. "
"This can lead to nasty bugs that can be avoided by making a temporary copy "
"using a slice of the whole sequence, e.g., ::"
msgstr ""

# f509b6fdd81e413bb8deccc57e0d4bd9
#: reference/compound_stmts.rst:215
msgid "The :keyword:`try` statement"
msgstr ""

# 9103ac66bd0d4992ad430e271e2e7d84
#: reference/compound_stmts.rst:223
msgid ""
"The :keyword:`try` statement specifies exception handlers and/or cleanup "
"code for a group of statements:"
msgstr ""

# b01e4043ee5140a5b1c498b55c9da637
#: reference/compound_stmts.rst:236
msgid ""
"The :keyword:`except` clause(s) specify one or more exception handlers. When "
"no exception occurs in the :keyword:`try` clause, no exception handler is "
"executed. When an exception occurs in the :keyword:`try` suite, a search for "
"an exception handler is started.  This search inspects the except clauses in "
"turn until one is found that matches the exception.  An expression-less "
"except clause, if present, must be last; it matches any exception.  For an "
"except clause with an expression, that expression is evaluated, and the "
"clause matches the exception if the resulting object is \"compatible\" with "
"the exception.  An object is compatible with an exception if it is the class "
"or a base class of the exception object or a tuple containing an item "
"compatible with the exception."
msgstr ""

# 0dafd4d3948945cc81d087903c3c3da4
#: reference/compound_stmts.rst:247
msgid ""
"If no except clause matches the exception, the search for an exception "
"handler continues in the surrounding code and on the invocation stack.  [#]_"
msgstr ""

# aede09e52c8d472fa80d77c2baa19b8e
#: reference/compound_stmts.rst:250
msgid ""
"If the evaluation of an expression in the header of an except clause raises "
"an exception, the original search for a handler is canceled and a search "
"starts for the new exception in the surrounding code and on the call stack "
"(it is treated as if the entire :keyword:`try` statement raised the "
"exception)."
msgstr ""

# 72bde52e25eb4e47888c074b72cfcefb
#: reference/compound_stmts.rst:255
msgid ""
"When a matching except clause is found, the exception is assigned to the "
"target specified after the :keyword:`as` keyword in that except clause, if "
"present, and the except clause's suite is executed.  All except clauses must "
"have an executable block.  When the end of this block is reached, execution "
"continues normally after the entire try statement.  (This means that if two "
"nested handlers exist for the same exception, and the exception occurs in "
"the try clause of the inner handler, the outer handler will not handle the "
"exception.)"
msgstr ""

# 6fed319cd71a4e3eb2b4d50d5db54d7a
#: reference/compound_stmts.rst:263
msgid ""
"When an exception has been assigned using ``as target``, it is cleared at "
"the end of the except clause.  This is as if ::"
msgstr ""

# e26dc945637943029e415acee36624b4
#: reference/compound_stmts.rst:269
msgid "was translated to ::"
msgstr ""

# 9f77441fa2f748528e99bb520de2dead
#: reference/compound_stmts.rst:277
msgid ""
"This means the exception must be assigned to a different name to be able to "
"refer to it after the except clause.  Exceptions are cleared because with "
"the traceback attached to them, they form a reference cycle with the stack "
"frame, keeping all locals in that frame alive until the next garbage "
"collection occurs."
msgstr ""

# c065467c0f364c6f90ec8e5ff97b64c0
#: reference/compound_stmts.rst:286
msgid ""
"Before an except clause's suite is executed, details about the exception are "
"stored in the :mod:`sys` module and can be access via :func:`sys.exc_info`. :"
"func:`sys.exc_info` returns a 3-tuple consisting of the exception class, the "
"exception instance and a traceback object (see section :ref:`types`) "
"identifying the point in the program where the exception occurred.  :func:"
"`sys.exc_info` values are restored to their previous values (before the "
"call) when returning from a function that handled an exception."
msgstr ""

# 2fa2899ac0ff4b05b23ee9864b14b0d0
#: reference/compound_stmts.rst:300
msgid ""
"The optional :keyword:`else` clause is executed if and when control flows "
"off the end of the :keyword:`try` clause. [#]_ Exceptions in the :keyword:"
"`else` clause are not handled by the preceding :keyword:`except` clauses."
msgstr ""

# e7ab28799f2440e097805a33c84150fc
#: reference/compound_stmts.rst:306
msgid ""
"If :keyword:`finally` is present, it specifies a 'cleanup' handler.  The :"
"keyword:`try` clause is executed, including any :keyword:`except` and :"
"keyword:`else` clauses.  If an exception occurs in any of the clauses and is "
"not handled, the exception is temporarily saved. The :keyword:`finally` "
"clause is executed.  If there is a saved exception it is re-raised at the "
"end of the :keyword:`finally` clause.  If the :keyword:`finally` clause "
"raises another exception, the saved exception is set as the context of the "
"new exception. If the :keyword:`finally` clause executes a :keyword:`return` "
"or :keyword:`break` statement, the saved exception is discarded::"
msgstr ""

# 1ed8c3d2542644b1a4789a4f12da6b0d
#: reference/compound_stmts.rst:325
msgid ""
"The exception information is not available to the program during execution "
"of the :keyword:`finally` clause."
msgstr ""

# 75ee72563d1a4161aca3e8ef7a74c632
#: reference/compound_stmts.rst:333
msgid ""
"When a :keyword:`return`, :keyword:`break` or :keyword:`continue` statement "
"is executed in the :keyword:`try` suite of a :keyword:`try`...\\ :keyword:"
"`finally` statement, the :keyword:`finally` clause is also executed 'on the "
"way out.' A :keyword:`continue` statement is illegal in the :keyword:"
"`finally` clause. (The reason is a problem with the current implementation "
"--- this restriction may be lifted in the future)."
msgstr ""

# 9408f0173bfd48e69437584d062da285
#: reference/compound_stmts.rst:340
msgid ""
"Additional information on exceptions can be found in section :ref:"
"`exceptions`, and information on using the :keyword:`raise` statement to "
"generate exceptions may be found in section :ref:`raise`."
msgstr ""

# 31dde72de64f48ee879184c957dbed44
#: reference/compound_stmts.rst:349
msgid "The :keyword:`with` statement"
msgstr ""

# 871f4483bacf40c2b56dace0f37626f0
#: reference/compound_stmts.rst:353
msgid ""
"The :keyword:`with` statement is used to wrap the execution of a block with "
"methods defined by a context manager (see section :ref:`context-managers`). "
"This allows common :keyword:`try`...\\ :keyword:`except`...\\ :keyword:"
"`finally` usage patterns to be encapsulated for convenient reuse."
msgstr ""

# 1b59c00989424298996487d40da3e214
#: reference/compound_stmts.rst:362
msgid ""
"The execution of the :keyword:`with` statement with one \"item\" proceeds as "
"follows:"
msgstr ""

# c63586fd9abb4c78b35c5fa12cc54514
#: reference/compound_stmts.rst:364
msgid ""
"The context expression (the expression given in the :token:`with_item`) is "
"evaluated to obtain a context manager."
msgstr ""

# 26f682d7751b4b08a1e6cf312436dfd5
#: reference/compound_stmts.rst:367
msgid "The context manager's :meth:`__exit__` is loaded for later use."
msgstr ""

# ff541b3909cc45d5b2fb0dda297acfc9
#: reference/compound_stmts.rst:369
msgid "The context manager's :meth:`__enter__` method is invoked."
msgstr ""

# 2af52704ae0c4bed85aaf4f20bb61c0a
#: reference/compound_stmts.rst:371
msgid ""
"If a target was included in the :keyword:`with` statement, the return value "
"from :meth:`__enter__` is assigned to it."
msgstr ""

# f808785b58de4fc7b903f481eef8f591
#: reference/compound_stmts.rst:376
msgid ""
"The :keyword:`with` statement guarantees that if the :meth:`__enter__` "
"method returns without an error, then :meth:`__exit__` will always be "
"called. Thus, if an error occurs during the assignment to the target list, "
"it will be treated the same as an error occurring within the suite would be. "
"See step 6 below."
msgstr ""

# a508a27012284ee49f59ecd49183beb7
#: reference/compound_stmts.rst:382
msgid "The suite is executed."
msgstr ""

# e830e925e0054903b954817a0c122ae2
#: reference/compound_stmts.rst:384
msgid ""
"The context manager's :meth:`__exit__` method is invoked.  If an exception "
"caused the suite to be exited, its type, value, and traceback are passed as "
"arguments to :meth:`__exit__`. Otherwise, three :const:`None` arguments are "
"supplied."
msgstr ""

# 93de91934cc04a05b090f35fc4659e41
#: reference/compound_stmts.rst:389
msgid ""
"If the suite was exited due to an exception, and the return value from the :"
"meth:`__exit__` method was false, the exception is reraised.  If the return "
"value was true, the exception is suppressed, and execution continues with "
"the statement following the :keyword:`with` statement."
msgstr ""

# 8cfc6ac5deac4b44afb678a2a5d937d9
#: reference/compound_stmts.rst:394
msgid ""
"If the suite was exited for any reason other than an exception, the return "
"value from :meth:`__exit__` is ignored, and execution proceeds at the normal "
"location for the kind of exit that was taken."
msgstr ""

# e92a4e9815a04af08aebba43de0ea2a2
#: reference/compound_stmts.rst:398
msgid ""
"With more than one item, the context managers are processed as if multiple :"
"keyword:`with` statements were nested::"
msgstr ""

# a5e45fbfce6542e4bc4ad57516f07505
# 19177cb2d5f94452923e2aa6309f6bb2
# 0421f18510314bc093e7cc6416ac4670
# 2208b2eab0544a859830ba7a189aa97d
#: reference/compound_stmts.rst:404 reference/compound_stmts.rst:479
#: reference/compound_stmts.rst:591 reference/compound_stmts.rst:613
msgid "is equivalent to ::"
msgstr ""

# 5864a2436d2c4d03b03c377af37aad37
# cfe7dd0dae4c42e8a9b3ad62c67412cf
#: reference/compound_stmts.rst:416 reference/datamodel.rst:1997
msgid ":pep:`0343` - The \"with\" statement"
msgstr ""

# 650177c88ae14a5f8d1697599385fff8
# d0d5bf4a056c4d2d90861a2b74c44585
#: reference/compound_stmts.rst:416 reference/datamodel.rst:1997
msgid ""
"The specification, background, and examples for the Python :keyword:`with` "
"statement."
msgstr ""

# 365334dbbdcb4bf1981c875c3ad5aa97
#: reference/compound_stmts.rst:427
msgid "Function definitions"
msgstr ""

# 3c85966dd3444e8eb8f9b36fe07e0461
#: reference/compound_stmts.rst:439
msgid ""
"A function definition defines a user-defined function object (see section :"
"ref:`types`):"
msgstr ""

# 435b4bdd740144908628fc52b08cb339
#: reference/compound_stmts.rst:456
msgid ""
"A function definition is an executable statement.  Its execution binds the "
"function name in the current local namespace to a function object (a wrapper "
"around the executable code for the function).  This function object contains "
"a reference to the current global namespace as the global namespace to be "
"used when the function is called."
msgstr ""

# 351ddeb537394407a095ca53f8c730c5
#: reference/compound_stmts.rst:462
msgid ""
"The function definition does not execute the function body; this gets "
"executed only when the function is called. [#]_"
msgstr ""

# ce9f4bac2fbe4f4f8445289f3f65596e
#: reference/compound_stmts.rst:468
msgid ""
"A function definition may be wrapped by one or more :term:`decorator` "
"expressions. Decorator expressions are evaluated when the function is "
"defined, in the scope that contains the function definition.  The result "
"must be a callable, which is invoked with the function object as the only "
"argument. The returned value is bound to the function name instead of the "
"function object.  Multiple decorators are applied in nested fashion. For "
"example, the following code ::"
msgstr ""

# 2e735f2bad5146fa8128c33281d157fe
#: reference/compound_stmts.rst:488
msgid ""
"When one or more :term:`parameters <parameter>` have the form *parameter* "
"``=`` *expression*, the function is said to have \"default parameter values."
"\"  For a parameter with a default value, the corresponding :term:`argument` "
"may be omitted from a call, in which case the parameter's default value is "
"substituted.  If a parameter has a default value, all following parameters "
"up until the \"``*``\" must also have a default value --- this is a "
"syntactic restriction that is not expressed by the grammar."
msgstr ""

# e53205bd42ad4663bc49ac06eccd0f79
#: reference/compound_stmts.rst:496
msgid ""
"**Default parameter values are evaluated when the function definition is "
"executed.** This means that the expression is evaluated once, when the "
"function is defined, and that the same \"pre-computed\" value is used for "
"each call.  This is especially important to understand when a default "
"parameter is a mutable object, such as a list or a dictionary: if the "
"function modifies the object (e.g. by appending an item to a list), the "
"default value is in effect modified. This is generally not what was "
"intended.  A way around this is to use ``None`` as the default, and "
"explicitly test for it in the body of the function, e.g.::"
msgstr ""

# 918a556949b34674b69bf95d1f49c957
#: reference/compound_stmts.rst:515
msgid ""
"Function call semantics are described in more detail in section :ref:"
"`calls`. A function call always assigns values to all parameters mentioned "
"in the parameter list, either from position arguments, from keyword "
"arguments, or from default values.  If the form \"``*identifier``\" is "
"present, it is initialized to a tuple receiving any excess positional "
"parameters, defaulting to the empty tuple.  If the form \"``**identifier``\" "
"is present, it is initialized to a new dictionary receiving any excess "
"keyword arguments, defaulting to a new empty dictionary. Parameters after "
"\"``*``\" or \"``*identifier``\" are keyword-only parameters and may only be "
"passed used keyword arguments."
msgstr ""

# d4ccad21efb642f8b58ba34bc896f546
#: reference/compound_stmts.rst:527
msgid ""
"Parameters may have annotations of the form \"``: expression``\" following "
"the parameter name.  Any parameter may have an annotation even those of the "
"form ``*identifier`` or ``**identifier``.  Functions may have \"return\" "
"annotation of the form \"``-> expression``\" after the parameter list.  "
"These annotations can be any valid Python expression and are evaluated when "
"the function definition is executed.  Annotations may be evaluated in a "
"different order than they appear in the source code.  The presence of "
"annotations does not change the semantics of a function.  The annotation "
"values are available as values of a dictionary keyed by the parameters' "
"names in the :attr:`__annotations__` attribute of the function object."
msgstr ""

# 744c5858a1dc4014a93cea7dbbab99af
#: reference/compound_stmts.rst:540
msgid ""
"It is also possible to create anonymous functions (functions not bound to a "
"name), for immediate use in expressions.  This uses lambda forms, described "
"in section :ref:`lambda`.  Note that the lambda form is merely a shorthand "
"for a simplified function definition; a function defined in a \":keyword:"
"`def`\" statement can be passed around or assigned to another name just like "
"a function defined by a lambda form.  The \":keyword:`def`\" form is "
"actually more powerful since it allows the execution of multiple statements "
"and annotations."
msgstr ""

# ae9d00a3152f42428d69d0d10f7c7585
#: reference/compound_stmts.rst:548
msgid ""
"**Programmer's note:** Functions are first-class objects.  A \"``def``\" "
"form executed inside a function definition defines a local function that can "
"be returned or passed around.  Free variables used in the nested function "
"can access the local variables of the function containing the def.  See "
"section :ref:`naming` for details."
msgstr ""

# df039fca6e4c4dd69b7c7992f469bf37
#: reference/compound_stmts.rst:556
msgid ":pep:`3107` - Function Annotations"
msgstr ""

# 43bbe029c9644d92be6f49603283e71e
#: reference/compound_stmts.rst:557
msgid "The original specification for function annotations."
msgstr ""

# 8d98bd797ff44cea9c87097022eba5a1
#: reference/compound_stmts.rst:563
msgid "Class definitions"
msgstr ""

# dbae5236c6754439a7fb865f909a35ec
#: reference/compound_stmts.rst:575
msgid "A class definition defines a class object (see section :ref:`types`):"
msgstr ""

# 0238752b180c46ad8e4dbf658f659148
#: reference/compound_stmts.rst:582
msgid ""
"A class definition is an executable statement.  The inheritance list usually "
"gives a list of base classes (see :ref:`metaclasses` for more advanced "
"uses), so each item in the list should evaluate to a class object which "
"allows subclassing.  Classes without an inheritance list inherit, by "
"default, from the base class :class:`object`; hence, ::"
msgstr ""

# aa5a0f63da6f4f1ead4e7cb56ed93544
#: reference/compound_stmts.rst:596
msgid ""
"The class's suite is then executed in a new execution frame (see :ref:"
"`naming`), using a newly created local namespace and the original global "
"namespace. (Usually, the suite contains mostly function definitions.)  When "
"the class's suite finishes execution, its execution frame is discarded but "
"its local namespace is saved. [#]_ A class object is then created using the "
"inheritance list for the base classes and the saved local namespace for the "
"attribute dictionary.  The class name is bound to this class object in the "
"original local namespace."
msgstr ""

# 77549f1c029a4f2e9977b7c9d1c2fa8e
#: reference/compound_stmts.rst:605
msgid ""
"Class creation can be customized heavily using :ref:`metaclasses "
"<metaclasses>`."
msgstr ""

# 3688b136d73043ccbda9f324c739fc9a
#: reference/compound_stmts.rst:607
msgid "Classes can also be decorated: just like when decorating functions, ::"
msgstr ""

# b454e1bfd1494e93a0239fdf2db22c6f
#: reference/compound_stmts.rst:618
msgid ""
"The evaluation rules for the decorator expressions are the same as for "
"function decorators.  The result must be a class object, which is then bound "
"to the class name."
msgstr ""

# a9414effaa0042d8b658c1e270487970
#: reference/compound_stmts.rst:622
msgid ""
"**Programmer's note:** Variables defined in the class definition are class "
"attributes; they are shared by instances.  Instance attributes can be set in "
"a method with ``self.name = value``.  Both class and instance attributes are "
"accessible through the notation \"``self.name``\", and an instance attribute "
"hides a class attribute with the same name when accessed in this way.  Class "
"attributes can be used as defaults for instance attributes, but using "
"mutable values there can lead to unexpected results.  :ref:`Descriptors "
"<descriptors>` can be used to create instance variables with different "
"implementation details."
msgstr ""

# ebfa966e732b4687a5963bf7841913f9
#: reference/compound_stmts.rst:634
msgid ":pep:`3115` - Metaclasses in Python 3 :pep:`3129` - Class Decorators"
msgstr ""

# 645e3d8f146540538eab8bd489af8543
# 147ebb8bfe824d458986ed0b390d19f4
# 2e9e7489812549b89dbea20ca6166fcc
# 9b212774f0ac48c6aa4dc81923c1f307
#: reference/compound_stmts.rst:639 reference/datamodel.rst:2077
#: reference/executionmodel.rst:234 reference/expressions.rst:1332
msgid "Footnotes"
msgstr ""

# e8b22194bff646d9a3481005142bccfb
#: reference/compound_stmts.rst:640
msgid ""
"The exception is propagated to the invocation stack unless there is a :"
"keyword:`finally` clause which happens to raise another exception. That new "
"exception causes the old one to be lost."
msgstr ""

# e5f2353ec5d24295ab2228a727afb77a
#: reference/compound_stmts.rst:644
msgid ""
"Currently, control \"flows off the end\" except in the case of an exception "
"or the execution of a :keyword:`return`, :keyword:`continue`, or :keyword:"
"`break` statement."
msgstr ""

# 3627be4855704c67944cf6423771b4e0
#: reference/compound_stmts.rst:648
msgid ""
"A string literal appearing as the first statement in the function body is "
"transformed into the function's ``__doc__`` attribute and therefore the "
"function's :term:`docstring`."
msgstr ""

# 367f83b99875423f8765ef67586ab4a9
#: reference/compound_stmts.rst:652
msgid ""
"A string literal appearing as the first statement in the class body is "
"transformed into the namespace's ``__doc__`` item and therefore the class's :"
"term:`docstring`."
msgstr ""

# 494ae36e2e404cb8b81db532030ac903
#: reference/datamodel.rst:6
msgid "Data model"
msgstr ""

# 01ac99c962454c30942416b23f6411ef
#: reference/datamodel.rst:12
msgid "Objects, values and types"
msgstr ""

# 3c0e04c3ff504686afce84dcc8d357f6
#: reference/datamodel.rst:18
msgid ""
":dfn:`Objects` are Python's abstraction for data.  All data in a Python "
"program is represented by objects or by relations between objects. (In a "
"sense, and in conformance to Von Neumann's model of a \"stored program "
"computer,\" code is also represented by objects.)"
msgstr ""

# 5e6f232e6c4e48e99468a158a2479cb7
#: reference/datamodel.rst:35
msgid ""
"Every object has an identity, a type and a value.  An object's *identity* "
"never changes once it has been created; you may think of it as the object's "
"address in memory.  The ':keyword:`is`' operator compares the identity of "
"two objects; the :func:`id` function returns an integer representing its "
"identity (currently implemented as its address). An object's :dfn:`type` is "
"also unchangeable. [#]_ An object's type determines the operations that the "
"object supports (e.g., \"does it have a length?\") and also defines the "
"possible values for objects of that type.  The :func:`type` function returns "
"an object's type (which is an object itself).  The *value* of some objects "
"can change.  Objects whose value can change are said to be *mutable*; "
"objects whose value is unchangeable once they are created are called "
"*immutable*. (The value of an immutable container object that contains a "
"reference to a mutable object can change when the latter's value is changed; "
"however the container is still considered immutable, because the collection "
"of objects it contains cannot be changed.  So, immutability is not strictly "
"the same as having an unchangeable value, it is more subtle.) An object's "
"mutability is determined by its type; for instance, numbers, strings and "
"tuples are immutable, while dictionaries and lists are mutable."
msgstr ""

# da4ec763778e4a1badc0fcd8de72b427
#: reference/datamodel.rst:58
msgid ""
"Objects are never explicitly destroyed; however, when they become "
"unreachable they may be garbage-collected.  An implementation is allowed to "
"postpone garbage collection or omit it altogether --- it is a matter of "
"implementation quality how garbage collection is implemented, as long as no "
"objects are collected that are still reachable."
msgstr ""

# cc920ba42077477faf7c6644ab42a89e
#: reference/datamodel.rst:66
msgid ""
"CPython currently uses a reference-counting scheme with (optional) delayed "
"detection of cyclically linked garbage, which collects most objects as soon "
"as they become unreachable, but is not guaranteed to collect garbage "
"containing circular references.  See the documentation of the :mod:`gc` "
"module for information on controlling the collection of cyclic garbage. "
"Other implementations act differently and CPython may change. Do not depend "
"on immediate finalization of objects when they become unreachable (ex: "
"always close files)."
msgstr ""

# e4ffbcdaa4c9496186d73766a30d9d55
#: reference/datamodel.rst:75
msgid ""
"Note that the use of the implementation's tracing or debugging facilities "
"may keep objects alive that would normally be collectable. Also note that "
"catching an exception with a ':keyword:`try`...\\ :keyword:`except`' "
"statement may keep objects alive."
msgstr ""

# 73b5385e4def4a92832a923f93aef89c
#: reference/datamodel.rst:80
msgid ""
"Some objects contain references to \"external\" resources such as open files "
"or windows.  It is understood that these resources are freed when the object "
"is garbage-collected, but since garbage collection is not guaranteed to "
"happen, such objects also provide an explicit way to release the external "
"resource, usually a :meth:`close` method. Programs are strongly recommended "
"to explicitly close such objects.  The ':keyword:`try`...\\ :keyword:"
"`finally`' statement and the ':keyword:`with`' statement provide convenient "
"ways to do this."
msgstr ""

# aab9dc699f9d4eddb458689051282cbb
#: reference/datamodel.rst:90
msgid ""
"Some objects contain references to other objects; these are called "
"*containers*. Examples of containers are tuples, lists and dictionaries.  "
"The references are part of a container's value.  In most cases, when we talk "
"about the value of a container, we imply the values, not the identities of "
"the contained objects; however, when we talk about the mutability of a "
"container, only the identities of the immediately contained objects are "
"implied.  So, if an immutable container (like a tuple) contains a reference "
"to a mutable object, its value changes if that mutable object is changed."
msgstr ""

# b9f0dd8a02824cfb99c99e24ee5c31c4
#: reference/datamodel.rst:99
msgid ""
"Types affect almost all aspects of object behavior.  Even the importance of "
"object identity is affected in some sense: for immutable types, operations "
"that compute new values may actually return a reference to any existing "
"object with the same type and value, while for mutable objects this is not "
"allowed.  E.g., after ``a = 1; b = 1``, ``a`` and ``b`` may or may not refer "
"to the same object with the value one, depending on the implementation, but "
"after ``c = []; d = []``, ``c`` and ``d`` are guaranteed to refer to two "
"different, unique, newly created empty lists. (Note that ``c = d = []`` "
"assigns the same object to both ``c`` and ``d``.)"
msgstr ""

# 9ddec1c7c0a94780a738b74ad549abd4
#: reference/datamodel.rst:113
msgid "The standard type hierarchy"
msgstr ""

# a7ead267fb3f4944b6f616f9a036e1f7
#: reference/datamodel.rst:122
msgid ""
"Below is a list of the types that are built into Python.  Extension modules "
"(written in C, Java, or other languages, depending on the implementation) "
"can define additional types.  Future versions of Python may add types to the "
"type hierarchy (e.g., rational numbers, efficiently stored arrays of "
"integers, etc.), although such additions will often be provided via the "
"standard library instead."
msgstr ""

# eff551e5fe0349a89f10ca69ee159698
#: reference/datamodel.rst:133
msgid ""
"Some of the type descriptions below contain a paragraph listing 'special "
"attributes.'  These are attributes that provide access to the implementation "
"and are not intended for general use.  Their definition may change in the "
"future."
msgstr ""

# acea6e7f47a3482c98fc07df17093677
#: reference/datamodel.rst:143
msgid "None"
msgstr ""

# 2c435e74b76d4a29bd520f39f227639d
#: reference/datamodel.rst:140
msgid ""
"This type has a single value.  There is a single object with this value. "
"This object is accessed through the built-in name ``None``. It is used to "
"signify the absence of a value in many situations, e.g., it is returned from "
"functions that don't explicitly return anything. Its truth value is false."
msgstr ""

# 99080faa8c794f179233e1a37ff3f22c
#: reference/datamodel.rst:153
msgid "NotImplemented"
msgstr ""

# 9f9b8e364644442b89cf303241a39b22
#: reference/datamodel.rst:148
msgid ""
"This type has a single value.  There is a single object with this value. "
"This object is accessed through the built-in name ``NotImplemented``. "
"Numeric methods and rich comparison methods may return this value if they do "
"not implement the operation for the operands provided.  (The interpreter "
"will then try the reflected operation, or some other fallback, depending on "
"the operator.)  Its truth value is true."
msgstr ""

# 54e9524ccd2b42bc860852c10b86f301
#: reference/datamodel.rst:160
msgid "Ellipsis"
msgstr ""

# d078bc25957f4595b1ca1d62abf620b8
#: reference/datamodel.rst:158
msgid ""
"This type has a single value.  There is a single object with this value. "
"This object is accessed through the literal ``...`` or the built-in name "
"``Ellipsis``.  Its truth value is true."
msgstr ""

# ca58bfb9fb6945a8a041748002185aa3
#: reference/datamodel.rst:230
msgid ":class:`numbers.Number`"
msgstr ""

# 3693e62eff5b4714b70418af46a7298a
#: reference/datamodel.rst:165
msgid ""
"These are created by numeric literals and returned as results by arithmetic "
"operators and arithmetic built-in functions.  Numeric objects are immutable; "
"once created their value never changes.  Python numbers are of course "
"strongly related to mathematical numbers, but subject to the limitations of "
"numerical representation in computers."
msgstr ""

# 4e69bfe25db14653946d6804f538f6dc
#: reference/datamodel.rst:171
msgid ""
"Python distinguishes between integers, floating point numbers, and complex "
"numbers:"
msgstr ""

# 42912c3b2e4e47dcb2c3029108929533
#: reference/datamodel.rst:205
msgid ":class:`numbers.Integral`"
msgstr ""

# 17717c2a3fa8438f8b2bd426d69450c1
#: reference/datamodel.rst:177
msgid ""
"These represent elements from the mathematical set of integers (positive and "
"negative)."
msgstr ""

# 78f836ba356642af841d0c040bb3ecd6
#: reference/datamodel.rst:180
msgid "There are two types of integers:"
msgstr ""

# 95598e063fad4f889f649561414618e1
#: reference/datamodel.rst:182
msgid "Integers (:class:`int`)"
msgstr ""

# b90ea270023b4563ac8940cef573c451
#: reference/datamodel.rst:184
msgid ""
"These represent numbers in an unlimited range, subject to available "
"(virtual) memory only.  For the purpose of shift and mask operations, a "
"binary representation is assumed, and negative numbers are represented in a "
"variant of 2's complement which gives the illusion of an infinite string of "
"sign bits extending to the left."
msgstr ""

# a552cacdd5f445f0a787cab19646ffab
#: reference/datamodel.rst:200
msgid "Booleans (:class:`bool`)"
msgstr ""

# a2ea512e2bbe45c9964cea970d41d2b0
#: reference/datamodel.rst:196
msgid ""
"These represent the truth values False and True.  The two objects "
"representing the values False and True are the only Boolean objects. The "
"Boolean type is a subtype of the integer type, and Boolean values behave "
"like the values 0 and 1, respectively, in almost all contexts, the exception "
"being that when converted to a string, the strings ``\"False\"`` or ``\"True"
"\"`` are returned, respectively."
msgstr ""

# 319a668b54724688a45f3d74e5886909
#: reference/datamodel.rst:204
msgid ""
"The rules for integer representation are intended to give the most "
"meaningful interpretation of shift and mask operations involving negative "
"integers."
msgstr ""

# 0176b9ba74b44367916136228b97f675
#: reference/datamodel.rst:220
msgid ":class:`numbers.Real` (:class:`float`)"
msgstr ""

# ea46084dd8204189b1bc2c91172458f5
#: reference/datamodel.rst:214
msgid ""
"These represent machine-level double precision floating point numbers. You "
"are at the mercy of the underlying machine architecture (and C or Java "
"implementation) for the accepted range and handling of overflow. Python does "
"not support single-precision floating point numbers; the savings in "
"processor and memory usage that are usually the reason for using these is "
"dwarfed by the overhead of using objects in Python, so there is no reason to "
"complicate the language with two kinds of floating point numbers."
msgstr ""

# 1657768773e241ed98b27a64e5c2e2fb
#: reference/datamodel.rst:230
msgid ":class:`numbers.Complex` (:class:`complex`)"
msgstr ""

# 63694ba508784adf9c9430aceba78b5b
#: reference/datamodel.rst:227
msgid ""
"These represent complex numbers as a pair of machine-level double precision "
"floating point numbers.  The same caveats apply as for floating point "
"numbers. The real and imaginary parts of a complex number ``z`` can be "
"retrieved through the read-only attributes ``z.real`` and ``z.imag``."
msgstr ""

# 7a7d02fea5414a3aa6d0dddee708dbe1
#: reference/datamodel.rst:346
msgid "Sequences"
msgstr ""

# 5b2079956ad94662a08ae72590ee6d34
#: reference/datamodel.rst:240
msgid ""
"These represent finite ordered sets indexed by non-negative numbers. The "
"built-in function :func:`len` returns the number of items of a sequence. "
"When the length of a sequence is *n*, the index set contains the numbers 0, "
"1, ..., *n*-1.  Item *i* of sequence *a* is selected by ``a[i]``."
msgstr ""

# 69cb067c13d941ffb0b62c95f29d49ec
#: reference/datamodel.rst:247
msgid ""
"Sequences also support slicing: ``a[i:j]`` selects all items with index *k* "
"such that *i* ``<=`` *k* ``<`` *j*.  When used as an expression, a slice is "
"a sequence of the same type.  This implies that the index set is renumbered "
"so that it starts at 0."
msgstr ""

# 17b44a90d8e44de482512250948f5719
#: reference/datamodel.rst:252
msgid ""
"Some sequences also support \"extended slicing\" with a third \"step\" "
"parameter: ``a[i:j:k]`` selects all items of *a* with index *x* where ``x = "
"i + n*k``, *n* ``>=`` ``0`` and *i* ``<=`` *x* ``<`` *j*."
msgstr ""

# 79a37ef4437d4940a2083ae10ab2b011
#: reference/datamodel.rst:256
msgid "Sequences are distinguished according to their mutability:"
msgstr ""

# 96f7fd6bb3614bb9b0145d8e09eb3ae9
#: reference/datamodel.rst:310
msgid "Immutable sequences"
msgstr ""

# f26e6339701c4c23a6406ba6b83a8944
#: reference/datamodel.rst:263
msgid ""
"An object of an immutable sequence type cannot change once it is created.  "
"(If the object contains references to other objects, these other objects may "
"be mutable and may be changed; however, the collection of objects directly "
"referenced by an immutable object cannot change.)"
msgstr ""

# db401c9d87404ee28d6833505bc8791e
#: reference/datamodel.rst:268
msgid "The following types are immutable sequences:"
msgstr ""

# a91b3e002d9946ebb83662166d6405e4
#: reference/datamodel.rst:288
msgid "Strings"
msgstr "Les chaînes de caractères"

# 319ab8f769484b6ea6fc0b1214fb5b2f
#: reference/datamodel.rst:279
msgid ""
"The items of a string object are Unicode code units.  A Unicode code unit is "
"represented by a string object of one item and can hold either a 16-bit or "
"32-bit value representing a Unicode ordinal (the maximum value for the "
"ordinal is given in ``sys.maxunicode``, and depends on how Python is "
"configured at compile time).  Surrogate pairs may be present in the Unicode "
"object, and will be reported as two separate items.  The built-in functions :"
"func:`chr` and :func:`ord` convert between code units and nonnegative "
"integers representing the Unicode ordinals as defined in the Unicode "
"Standard 3.0. Conversion from and to other encodings are possible through "
"the string method :meth:`encode`."
msgstr ""

# ad0215c300574f1d89bc2154828dd899
#: reference/datamodel.rst:301
msgid "Tuples"
msgstr ""

# 758053809c8846d79fa17355a4c2fc7f
#: reference/datamodel.rst:296
msgid ""
"The items of a tuple are arbitrary Python objects. Tuples of two or more "
"items are formed by comma-separated lists of expressions.  A tuple of one "
"item (a 'singleton') can be formed by affixing a comma to an expression (an "
"expression by itself does not create a tuple, since parentheses must be "
"usable for grouping of expressions).  An empty tuple can be formed by an "
"empty pair of parentheses."
msgstr ""

# 2421fb32fb1e4aca8778f99a65d550c4
#: reference/datamodel.rst:310
msgid "Bytes"
msgstr ""

# f534add18148499699c53fa5fc0ee9ca
#: reference/datamodel.rst:306
msgid ""
"A bytes object is an immutable array.  The items are 8-bit bytes, "
"represented by integers in the range 0 <= x < 256.  Bytes literals (like "
"``b'abc'``) and the built-in function :func:`bytes` can be used to construct "
"bytes objects.  Also, bytes objects can be decoded to strings via the :meth:"
"`decode` method."
msgstr ""

# 5a502a68fd0b400788ff451a43c81bfa
#: reference/datamodel.rst:346
msgid "Mutable sequences"
msgstr ""

# 8d4419815473453d89f3dba95befa01b
#: reference/datamodel.rst:322
msgid ""
"Mutable sequences can be changed after they are created.  The subscription "
"and slicing notations can be used as the target of assignment and :keyword:"
"`del` (delete) statements."
msgstr ""

# a3afd5edb9734032aca3af5c322ba46a
#: reference/datamodel.rst:326
msgid "There are currently two intrinsic mutable sequence types:"
msgstr ""

# f9c3628931b7430aa5c2e5ebd8183bc9
#: reference/datamodel.rst:333
msgid "Lists"
msgstr "Les listes"

# edc05caf4d21482b9765055280459795
#: reference/datamodel.rst:331
msgid ""
"The items of a list are arbitrary Python objects.  Lists are formed by "
"placing a comma-separated list of expressions in square brackets. (Note that "
"there are no special cases needed to form lists of length 0 or 1.)"
msgstr ""

# 2d85992669f84016a1a7b2d8dd8c4bae
#: reference/datamodel.rst:341
msgid "Byte Arrays"
msgstr ""

# 29f25d7ad8624b6687c6241a33541211
#: reference/datamodel.rst:338
msgid ""
"A bytearray object is a mutable array. They are created by the built-in :"
"func:`bytearray` constructor.  Aside from being mutable (and hence "
"unhashable), byte arrays otherwise provide the same interface and "
"functionality as immutable bytes objects."
msgstr ""

# 080cb10f17f143ae80fb3fe2b0843ebf
#: reference/datamodel.rst:345
msgid ""
"The extension module :mod:`array` provides an additional example of a "
"mutable sequence type, as does the :mod:`collections` module."
msgstr ""

# 07f7931e96f44826b218026fe7ae83ce
#: reference/datamodel.rst:380
msgid "Set types"
msgstr ""

# c9addf32711d436885d6487bb7c557eb
#: reference/datamodel.rst:353
msgid ""
"These represent unordered, finite sets of unique, immutable objects. As "
"such, they cannot be indexed by any subscript. However, they can be iterated "
"over, and the built-in function :func:`len` returns the number of items in a "
"set. Common uses for sets are fast membership testing, removing duplicates "
"from a sequence, and computing mathematical operations such as intersection, "
"union, difference, and symmetric difference."
msgstr ""

# 29eac83cea7b41619272a356f9bbf96a
#: reference/datamodel.rst:360
msgid ""
"For set elements, the same immutability rules apply as for dictionary keys. "
"Note that numeric types obey the normal rules for numeric comparison: if two "
"numbers compare equal (e.g., ``1`` and ``1.0``), only one of them can be "
"contained in a set."
msgstr ""

# ca062bfe2340409192dc65e87f99d5ee
#: reference/datamodel.rst:365
msgid "There are currently two intrinsic set types:"
msgstr ""

# 1937a0c7be204194b435016203af22de
#: reference/datamodel.rst:372
msgid "Sets"
msgstr "Les ensembles"

# a253888144f3483bb45c316d499c68a1
#: reference/datamodel.rst:370
msgid ""
"These represent a mutable set. They are created by the built-in :func:`set` "
"constructor and can be modified afterwards by several methods, such as :meth:"
"`add`."
msgstr ""

# 22d2d9dada364da7b46251a5bfc2cc14
#: reference/datamodel.rst:380
msgid "Frozen sets"
msgstr ""

# df18243509a54c0b9a60719a3cbc86b8
#: reference/datamodel.rst:377
msgid ""
"These represent an immutable set.  They are created by the built-in :func:"
"`frozenset` constructor.  As a frozenset is immutable and :term:`hashable`, "
"it can be used again as an element of another set, or as a dictionary key."
msgstr ""

# 16d600cf0ef649948b73fb62042fdf4c
#: reference/datamodel.rst:417
msgid "Mappings"
msgstr ""

# 43c86b7190474ff3ae89af65085d9755
#: reference/datamodel.rst:388
msgid ""
"These represent finite sets of objects indexed by arbitrary index sets. The "
"subscript notation ``a[k]`` selects the item indexed by ``k`` from the "
"mapping ``a``; this can be used in expressions and as the target of "
"assignments or :keyword:`del` statements. The built-in function :func:`len` "
"returns the number of items in a mapping."
msgstr ""

# e1e63c35305841ddac72794c8b20ec5d
#: reference/datamodel.rst:394
msgid "There is currently a single intrinsic mapping type:"
msgstr ""

# 0fd60e822e4145299e8a7b7a3f3de1bb
#: reference/datamodel.rst:417
msgid "Dictionaries"
msgstr "Dictionnaires"

# 203a923201bc4b9daab79e655054846c
#: reference/datamodel.rst:399
msgid ""
"These represent finite sets of objects indexed by nearly arbitrary values.  "
"The only types of values not acceptable as keys are values containing lists "
"or dictionaries or other mutable types that are compared by value rather "
"than by object identity, the reason being that the efficient implementation "
"of dictionaries requires a key's hash value to remain constant. Numeric "
"types used for keys obey the normal rules for numeric comparison: if two "
"numbers compare equal (e.g., ``1`` and ``1.0``) then they can be used "
"interchangeably to index the same dictionary entry."
msgstr ""

# 028ed2adef89498eabc8d9597a3c1b62
#: reference/datamodel.rst:408
msgid ""
"Dictionaries are mutable; they can be created by the ``{...}`` notation (see "
"section :ref:`dict`)."
msgstr ""

# f493f46406d74dbb8e7307a6c93cc9ab
#: reference/datamodel.rst:415
msgid ""
"The extension modules :mod:`dbm.ndbm` and :mod:`dbm.gnu` provide additional "
"examples of mapping types, as does the :mod:`collections` module."
msgstr ""

# d717cda4d4c545e0874a3b067718e6ca
#: reference/datamodel.rst:635
msgid "Callable types"
msgstr ""

# 1f072686450349429992e60e495f1856
#: reference/datamodel.rst:426
msgid ""
"These are the types to which the function call operation (see section :ref:"
"`calls`) can be applied:"
msgstr ""

# 1cf1041dd40248648664b95404e1e52f
#: reference/datamodel.rst:512
msgid "User-defined functions"
msgstr ""

# 6385942f76294c83beeb087c47f52feb
#: reference/datamodel.rst:435
msgid ""
"A user-defined function object is created by a function definition (see "
"section :ref:`function`).  It should be called with an argument list "
"containing the same number of items as the function's formal parameter list."
msgstr ""

# a2a68a829c6a4b95bbc0b94f1f75a7ba
#: reference/datamodel.rst:440
msgid "Special attributes:"
msgstr ""

# 9d711989725a497ab177d297f9a4f25b
#: reference/datamodel.rst:443
msgid "Attribute"
msgstr ""

# 7fdc8ec2dcb44e88b90441aae7593ac7
# f843844a8170487d824bf30dd060b91b
# 1253efe9361a4ad8851832f970e1958f
#: reference/datamodel.rst:443 reference/lexical_analysis.rst:460
#: reference/lexical_analysis.rst:493
msgid "Meaning"
msgstr ""

# 1238c213e9ea4c96ba5449dd98485eda
#: reference/datamodel.rst:445
msgid ":attr:`__doc__`"
msgstr ""

# f90d92bc783546379bb674abedec04a8
#: reference/datamodel.rst:445
msgid "The function's documentation string, or ``None`` if unavailable"
msgstr ""

# d47656c0a2204133abe5e682ba4e4d6f
# 9c100b3eff9241098ed2c883ac9bc340
# 00253cbcb24d4dcd9f1bd32218ff6a55
# 1ca3d6422cf7455c945fec95a9efa7ad
# 554da1fae0d8419a9df01f58dd47758e
# 7ead7bfe087c46038a8f4f790892d3d2
# de8453ae40d94f6a99049eb4e0678ed5
# 5242dd3bc29f42509f79eee5998bc717
#: reference/datamodel.rst:445 reference/datamodel.rst:449
#: reference/datamodel.rst:451 reference/datamodel.rst:455
#: reference/datamodel.rst:461 reference/datamodel.rst:471
#: reference/datamodel.rst:479 reference/datamodel.rst:486
msgid "Writable"
msgstr ""

# ff213fd428f0426596e857e41cb0819f
#: reference/datamodel.rst:449
msgid ":attr:`__name__`"
msgstr ""

# bf463af8c20d429081b2b399b83fd5a7
#: reference/datamodel.rst:449
msgid "The function's name"
msgstr ""

# 60032a00738a4ca587de344f6fe1a573
#: reference/datamodel.rst:451
msgid ":attr:`__module__`"
msgstr ""

# ed17c36c749b4041b5f74636891cd066
#: reference/datamodel.rst:451
msgid ""
"The name of the module the function was defined in, or ``None`` if "
"unavailable."
msgstr ""

# feafa38b1aae42fea34e95cc9c84165a
#: reference/datamodel.rst:455
msgid ":attr:`__defaults__`"
msgstr ""

# c91c5f0dc2164593a07f66f854e88436
#: reference/datamodel.rst:455
msgid ""
"A tuple containing default argument values for those arguments that have "
"defaults, or ``None`` if no arguments have a default value"
msgstr ""

# f27eb11b46584b3e83bfe42caf75694e
#: reference/datamodel.rst:461
msgid ":attr:`__code__`"
msgstr ""

# 34136783a5c54d70be3234e3d6d2c4db
#: reference/datamodel.rst:461
msgid "The code object representing the compiled function body."
msgstr ""

# 3a9a0e87ab4f42849748c9dd4298fe96
#: reference/datamodel.rst:464
msgid ":attr:`__globals__`"
msgstr ""

# 5aae1546dee5473fa2a684fac33b88cf
#: reference/datamodel.rst:464
msgid ""
"A reference to the dictionary that holds the function's global variables --- "
"the global namespace of the module in which the function was defined."
msgstr ""

# 206153061c3f47949fb38163e4f2362b
# 054b8a72575d4da39868d3d3f6681efe
#: reference/datamodel.rst:464 reference/datamodel.rst:475
msgid "Read-only"
msgstr ""

# 1efb3e870e6b4275a783c8df772bc23a
#: reference/datamodel.rst:471
msgid ":attr:`__dict__`"
msgstr ""

# de34085abf554685b3a5bbedc65a7128
#: reference/datamodel.rst:471
msgid "The namespace supporting arbitrary function attributes."
msgstr ""

# a2aa76c527144a31b3c24c3a51867d0a
#: reference/datamodel.rst:475
msgid ":attr:`__closure__`"
msgstr ""

# 63571f0444ec437baeed3e18c899990c
#: reference/datamodel.rst:475
msgid ""
"``None`` or a tuple of cells that contain bindings for the function's free "
"variables."
msgstr ""

# c20e88dea9fb4cc0a4996aaa4a90c3f2
#: reference/datamodel.rst:479
msgid ":attr:`__annotations__`"
msgstr ""

# 20cc9915219e4edb8b56e702bb8b4ad2
#: reference/datamodel.rst:479
msgid ""
"A dict containing annotations of parameters.  The keys of the dict are the "
"parameter names, or ``'return'`` for the return annotation, if provided."
msgstr ""

# 17bf62f84f944082a5501192c94b8607
#: reference/datamodel.rst:486
msgid ":attr:`__kwdefaults__`"
msgstr ""

# 13d16b5193f2498d8b8ed9c402fdc939
#: reference/datamodel.rst:486
msgid "A dict containing defaults for keyword-only parameters."
msgstr ""

# e0e169e9085e420bb9f438c2a647cd5a
#: reference/datamodel.rst:490
msgid ""
"Most of the attributes labelled \"Writable\" check the type of the assigned "
"value."
msgstr ""

# e16b38d39a55435f8830f6c19b217889
#: reference/datamodel.rst:492
msgid ""
"Function objects also support getting and setting arbitrary attributes, "
"which can be used, for example, to attach metadata to functions.  Regular "
"attribute dot-notation is used to get and set such attributes. *Note that "
"the current implementation only supports function attributes on user-defined "
"functions. Function attributes on built-in functions may be supported in the "
"future.*"
msgstr ""

# c858683d4ed9451787f86cdd8156cd43
#: reference/datamodel.rst:498
msgid ""
"Additional information about a function's definition can be retrieved from "
"its code object; see the description of internal types below."
msgstr ""

# 830a5ff2fd714b3bbd2f57ec6dfbd57e
#: reference/datamodel.rst:581
msgid "Instance methods"
msgstr ""

# 0d6bf205a29a463490a11eed7a57c439
#: reference/datamodel.rst:520
msgid ""
"An instance method object combines a class, a class instance and any "
"callable object (normally a user-defined function)."
msgstr ""

# c8e6333125c84a06988dad75b334a401
#: reference/datamodel.rst:530
msgid ""
"Special read-only attributes: :attr:`__self__` is the class instance "
"object, :attr:`__func__` is the function object; :attr:`__doc__` is the "
"method's documentation (same as ``__func__.__doc__``); :attr:`__name__` is "
"the method name (same as ``__func__.__name__``); :attr:`__module__` is the "
"name of the module the method was defined in, or ``None`` if unavailable."
msgstr ""

# bb2e4dc13f8b44ed922937cfd16a66f8
#: reference/datamodel.rst:536
msgid ""
"Methods also support accessing (but not setting) the arbitrary function "
"attributes on the underlying function object."
msgstr ""

# df5d9772a64f4a2582ff2801196843ea
#: reference/datamodel.rst:539
msgid ""
"User-defined method objects may be created when getting an attribute of a "
"class (perhaps via an instance of that class), if that attribute is a user-"
"defined function object or a class method object."
msgstr ""

# 276326d307644b2881730ea4114816f8
#: reference/datamodel.rst:543
msgid ""
"When an instance method object is created by retrieving a user-defined "
"function object from a class via one of its instances, its :attr:`__self__` "
"attribute is the instance, and the method object is said to be bound.  The "
"new method's :attr:`__func__` attribute is the original function object."
msgstr ""

# 28f383584cf74b3e89757a8d23887b85
#: reference/datamodel.rst:549
msgid ""
"When a user-defined method object is created by retrieving another method "
"object from a class or instance, the behaviour is the same as for a function "
"object, except that the :attr:`__func__` attribute of the new instance is "
"not the original method object but its :attr:`__func__` attribute."
msgstr ""

# dd6b1a30c9c34bb1af525ae50679e17f
#: reference/datamodel.rst:555
msgid ""
"When an instance method object is created by retrieving a class method "
"object from a class or instance, its :attr:`__self__` attribute is the class "
"itself, and its :attr:`__func__` attribute is the function object underlying "
"the class method."
msgstr ""

# 1e4e9fee129b4781842c1677b7ac6d24
#: reference/datamodel.rst:560
msgid ""
"When an instance method object is called, the underlying function (:attr:"
"`__func__`) is called, inserting the class instance (:attr:`__self__`) in "
"front of the argument list.  For instance, when :class:`C` is a class which "
"contains a definition for a function :meth:`f`, and ``x`` is an instance of :"
"class:`C`, calling ``x.f(1)`` is equivalent to calling ``C.f(x, 1)``."
msgstr ""

# 1ea93400f05348e28a76e000b57a123d
#: reference/datamodel.rst:567
msgid ""
"When an instance method object is derived from a class method object, the "
"\"class instance\" stored in :attr:`__self__` will actually be the class "
"itself, so that calling either ``x.f(1)`` or ``C.f(1)`` is equivalent to "
"calling ``f(C,1)`` where ``f`` is the underlying function."
msgstr ""

# 28b0cf8a8aa946fbbcf9269aa552a69f
#: reference/datamodel.rst:572
msgid ""
"Note that the transformation from function object to instance method object "
"happens each time the attribute is retrieved from the instance.  In some "
"cases, a fruitful optimization is to assign the attribute to a local "
"variable and call that local variable. Also notice that this transformation "
"only happens for user-defined functions; other callable objects (and all non-"
"callable objects) are retrieved without transformation.  It is also "
"important to note that user-defined functions which are attributes of a "
"class instance are not converted to bound methods; this *only* happens when "
"the function is an attribute of the class."
msgstr ""

# ac081ff54a9749dd8691ecac1c16cb2a
#: reference/datamodel.rst:596
msgid "Generator functions"
msgstr ""

# cb78c03bbdad44feba60709a9f694235
#: reference/datamodel.rst:588
msgid ""
"A function or method which uses the :keyword:`yield` statement (see section :"
"ref:`yield`) is called a :dfn:`generator function`.  Such a function, when "
"called, always returns an iterator object which can be used to execute the "
"body of the function:  calling the iterator's :meth:`iterator__next__` "
"method will cause the function to execute until it provides a value using "
"the :keyword:`yield` statement.  When the function executes a :keyword:"
"`return` statement or falls off the end, a :exc:`StopIteration` exception is "
"raised and the iterator will have reached the end of the set of values to be "
"returned."
msgstr ""

# 096485e1ea6f468aa2226faa5b9b3174
#: reference/datamodel.rst:611
msgid "Built-in functions"
msgstr ""

# f359fbac8bf94bfb9e582a19d263ec02
#: reference/datamodel.rst:604
msgid ""
"A built-in function object is a wrapper around a C function.  Examples of "
"built-in functions are :func:`len` and :func:`math.sin` (:mod:`math` is a "
"standard built-in module). The number and type of the arguments are "
"determined by the C function. Special read-only attributes: :attr:`__doc__` "
"is the function's documentation string, or ``None`` if unavailable; :attr:"
"`__name__` is the function's name; :attr:`__self__` is set to ``None`` (but "
"see the next item); :attr:`__module__` is the name of the module the "
"function was defined in or ``None`` if unavailable."
msgstr ""

# 131357531a01421ebcdfca39f24d3a21
#: reference/datamodel.rst:623
msgid "Built-in methods"
msgstr ""

# 33537140f61a4cef868c60105b524f89
#: reference/datamodel.rst:619
msgid ""
"This is really a different disguise of a built-in function, this time "
"containing an object passed to the C function as an implicit extra "
"argument.  An example of a built-in method is ``alist.append()``, assuming "
"*alist* is a list object. In this case, the special read-only attribute :"
"attr:`__self__` is set to the object denoted by *alist*."
msgstr ""

# 9b149acd08d045f39989fa11c324515b
#: reference/datamodel.rst:630
msgid "Classes"
msgstr "Classes"

# 0c576d877f4e45a5ba5bb4d50c5b47aa
#: reference/datamodel.rst:626
msgid ""
"Classes are callable.  These objects normally act as factories for new "
"instances of themselves, but variations are possible for class types that "
"override :meth:`__new__`.  The arguments of the call are passed to :meth:"
"`__new__` and, in the typical case, to :meth:`__init__` to initialize the "
"new instance."
msgstr ""

# d4b632dc35df45639760e2628fac0fb4
#: reference/datamodel.rst:635
msgid "Class Instances"
msgstr ""

# a4e49b917f3a418481d483529665e1a3
#: reference/datamodel.rst:633
msgid ""
"Instances of arbitrary classes can be made callable by defining a :meth:"
"`__call__` method in their class."
msgstr ""

# f545724ae9f94c499e81890303e7be98
#: reference/datamodel.rst:678
msgid "Modules"
msgstr ""

# ba18ee1e58f8443fa55df1c43a9b6e16
#: reference/datamodel.rst:642
msgid ""
"Modules are imported by the :keyword:`import` statement (see section :ref:"
"`import`). A module object has a namespace implemented by a dictionary "
"object (this is the dictionary referenced by the __globals__ attribute of "
"functions defined in the module).  Attribute references are translated to "
"lookups in this dictionary, e.g., ``m.x`` is equivalent to ``m.__dict__[\"x"
"\"]``. A module object does not contain the code object used to initialize "
"the module (since it isn't needed once the initialization is done)."
msgstr ""

# e98e1f5ed3694984956a6a41be0c791b
#: reference/datamodel.rst:651
msgid ""
"Attribute assignment updates the module's namespace dictionary, e.g., ``m.x "
"= 1`` is equivalent to ``m.__dict__[\"x\"] = 1``."
msgstr ""

# 7c00f7a1aebb46198d7ba2621f478006
#: reference/datamodel.rst:656
msgid ""
"Special read-only attribute: :attr:`__dict__` is the module's namespace as a "
"dictionary object."
msgstr ""

# 22c8a7645e4e44229c6b7ccfdfc2431e
#: reference/datamodel.rst:661
msgid ""
"Because of the way CPython clears module dictionaries, the module dictionary "
"will be cleared when the module falls out of scope even if the dictionary "
"still has live references.  To avoid this, copy the dictionary or keep the "
"module around while using its dictionary directly."
msgstr ""

# 91dfa08e57d74608ba361e7ca425165e
#: reference/datamodel.rst:672
msgid ""
"Predefined (writable) attributes: :attr:`__name__` is the module's name; :"
"attr:`__doc__` is the module's documentation string, or ``None`` if "
"unavailable; :attr:`__file__` is the pathname of the file from which the "
"module was loaded, if it was loaded from a file. The :attr:`__file__` "
"attribute is not present for C modules that are statically linked into the "
"interpreter; for extension modules loaded dynamically from a shared library, "
"it is the pathname of the shared library file."
msgstr ""

# 3b0c1600df8343979987dee81bd561e1
#: reference/datamodel.rst:734
msgid "Custom classes"
msgstr ""

# 7f05fb3f82404e43aed9861dd74c7090
#: reference/datamodel.rst:681
msgid ""
"Custom class types are typically created by class definitions (see section :"
"ref:`class`).  A class has a namespace implemented by a dictionary object. "
"Class attribute references are translated to lookups in this dictionary, e."
"g., ``C.x`` is translated to ``C.__dict__[\"x\"]`` (although there are a "
"number of hooks which allow for other means of locating attributes). When "
"the attribute name is not found there, the attribute search continues in the "
"base classes. This search of the base classes uses the C3 method resolution "
"order which behaves correctly even in the presence of 'diamond' inheritance "
"structures where there are multiple inheritance paths leading back to a "
"common ancestor. Additional details on the C3 MRO used by Python can be "
"found in the documentation accompanying the 2.3 release at http://www.python."
"org/download/releases/2.3/mro/."
msgstr ""

# ce78359b2fca4082bcb4d844f5f48d5a
#: reference/datamodel.rst:705
msgid ""
"When a class attribute reference (for class :class:`C`, say) would yield a "
"class method object, it is transformed into an instance method object whose :"
"attr:`__self__` attributes is :class:`C`.  When it would yield a static "
"method object, it is transformed into the object wrapped by the static "
"method object. See section :ref:`descriptors` for another way in which "
"attributes retrieved from a class may differ from those actually contained "
"in its :attr:`__dict__`."
msgstr ""

# 653d81b983c048fb91da5d4ba1e36c5d
#: reference/datamodel.rst:715
msgid ""
"Class attribute assignments update the class's dictionary, never the "
"dictionary of a base class."
msgstr ""

# e7e4631baec14be9ae3cf252e3ebb48c
#: reference/datamodel.rst:720
msgid ""
"A class object can be called (see above) to yield a class instance (see "
"below)."
msgstr ""

# fd4ffa7afc194140a01fa58de7ad9369
#: reference/datamodel.rst:729
msgid ""
"Special attributes: :attr:`__name__` is the class name; :attr:`__module__` "
"is the module name in which the class was defined; :attr:`__dict__` is the "
"dictionary containing the class's namespace; :attr:`__bases__` is a tuple "
"(possibly empty or a singleton) containing the base classes, in the order of "
"their occurrence in the base class list; :attr:`__doc__` is the class's "
"documentation string, or None if undefined."
msgstr ""

# cc9ca4b38d044aad8dc627f026f28a61
#: reference/datamodel.rst:777
msgid "Class instances"
msgstr ""

# 63543bf9a74d45cf99df4f561403282f
#: reference/datamodel.rst:743
msgid ""
"A class instance is created by calling a class object (see above).  A class "
"instance has a namespace implemented as a dictionary which is the first "
"place in which attribute references are searched.  When an attribute is not "
"found there, and the instance's class has an attribute by that name, the "
"search continues with the class attributes.  If a class attribute is found "
"that is a user-defined function object, it is transformed into an instance "
"method object whose :attr:`__self__` attribute is the instance.  Static "
"method and class method objects are also transformed; see above under "
"\"Classes\".  See section :ref:`descriptors` for another way in which "
"attributes of a class retrieved via its instances may differ from the "
"objects actually stored in the class's :attr:`__dict__`.  If no class "
"attribute is found, and the object's class has a :meth:`__getattr__` method, "
"that is called to satisfy the lookup."
msgstr ""

# 59e28a83f5d84c90a8f7aa301d4986a9
#: reference/datamodel.rst:759
msgid ""
"Attribute assignments and deletions update the instance's dictionary, never "
"a class's dictionary.  If the class has a :meth:`__setattr__` or :meth:"
"`__delattr__` method, this is called instead of updating the instance "
"dictionary directly."
msgstr ""

# 97ce689c4a1944b98f5ac168cfcfdc12
#: reference/datamodel.rst:769
msgid ""
"Class instances can pretend to be numbers, sequences, or mappings if they "
"have methods with certain special names.  See section :ref:`specialnames`."
msgstr ""

# 27be631e0f124383a7d1a5851abc5112
#: reference/datamodel.rst:776
msgid ""
"Special attributes: :attr:`__dict__` is the attribute dictionary; :attr:"
"`__class__` is the instance's class."
msgstr ""

# f00c35e93b4841a484eb95e88173ffaa
#: reference/datamodel.rst:803
msgid "I/O objects (also known as file objects)"
msgstr ""

# 6011f7d7e5444d8ba64bbf2f9f365028
#: reference/datamodel.rst:793
msgid ""
"A :term:`file object` represents an open file.  Various shortcuts are "
"available to create file objects: the :func:`open` built-in function, and "
"also :func:`os.popen`, :func:`os.fdopen`, and the :meth:`makefile` method of "
"socket objects (and perhaps by other functions or methods provided by "
"extension modules)."
msgstr ""

# 5fb1fde8652847e897ebff13cf8bc268
#: reference/datamodel.rst:799
msgid ""
"The objects ``sys.stdin``, ``sys.stdout`` and ``sys.stderr`` are initialized "
"to file objects corresponding to the interpreter's standard input, output "
"and error streams; they are all open in text mode and therefore follow the "
"interface defined by the :class:`io.TextIOBase` abstract class."
msgstr ""

# 15cc7a432c2f4a5cb1fd3403574d1da9
#: reference/datamodel.rst:997
msgid "Internal types"
msgstr ""

# 3e9afd4edf994fb0be1aa32de32c3fbc
#: reference/datamodel.rst:810
msgid ""
"A few types used internally by the interpreter are exposed to the user. "
"Their definitions may change with future versions of the interpreter, but "
"they are mentioned here for completeness."
msgstr ""

# ffd8ad899642400bb12edac1fd79d94e
#: reference/datamodel.rst:880
msgid "Code objects"
msgstr ""

# 4e1e96bd8429455c93e58555aeaf2976
#: reference/datamodel.rst:819
msgid ""
"Code objects represent *byte-compiled* executable Python code, or :term:"
"`bytecode`. The difference between a code object and a function object is "
"that the function object contains an explicit reference to the function's "
"globals (the module in which it was defined), while a code object contains "
"no context; also the default argument values are stored in the function "
"object, not in the code object (because they represent values calculated at "
"run-time).  Unlike function objects, code objects are immutable and contain "
"no references (directly or indirectly) to mutable objects."
msgstr ""

# 01f5edb84b274ff4b74dda6663a2cb9c
#: reference/datamodel.rst:844
msgid ""
"Special read-only attributes: :attr:`co_name` gives the function name; :attr:"
"`co_argcount` is the number of positional arguments (including arguments "
"with default values); :attr:`co_nlocals` is the number of local variables "
"used by the function (including arguments); :attr:`co_varnames` is a tuple "
"containing the names of the local variables (starting with the argument "
"names); :attr:`co_cellvars` is a tuple containing the names of local "
"variables that are referenced by nested functions; :attr:`co_freevars` is a "
"tuple containing the names of free variables; :attr:`co_code` is a string "
"representing the sequence of bytecode instructions; :attr:`co_consts` is a "
"tuple containing the literals used by the bytecode; :attr:`co_names` is a "
"tuple containing the names used by the bytecode; :attr:`co_filename` is the "
"filename from which the code was compiled; :attr:`co_firstlineno` is the "
"first line number of the function; :attr:`co_lnotab` is a string encoding "
"the mapping from bytecode offsets to line numbers (for details see the "
"source code of the interpreter); :attr:`co_stacksize` is the required stack "
"size (including local variables); :attr:`co_flags` is an integer encoding a "
"number of flags for the interpreter."
msgstr ""

# 7232cb6661734dea9615820e4f959544
#: reference/datamodel.rst:863
msgid ""
"The following flag bits are defined for :attr:`co_flags`: bit ``0x04`` is "
"set if the function uses the ``*arguments`` syntax to accept an arbitrary "
"number of positional arguments; bit ``0x08`` is set if the function uses the "
"``**keywords`` syntax to accept arbitrary keyword arguments; bit ``0x20`` is "
"set if the function is a generator."
msgstr ""

# 600e8302000f426f801d49c0b766f916
#: reference/datamodel.rst:869
msgid ""
"Future feature declarations (``from __future__ import division``) also use "
"bits in :attr:`co_flags` to indicate whether a code object was compiled with "
"a particular feature enabled: bit ``0x2000`` is set if the function was "
"compiled with future division enabled; bits ``0x10`` and ``0x1000`` were "
"used in earlier versions of Python."
msgstr ""

# 7f04ee7973a34cc383e54eed49257752
#: reference/datamodel.rst:875
msgid "Other bits in :attr:`co_flags` are reserved for internal use."
msgstr ""

# 42f5302bdcdb47879db832ba8b4d588a
#: reference/datamodel.rst:879
msgid ""
"If a code object represents a function, the first item in :attr:`co_consts` "
"is the documentation string of the function, or ``None`` if undefined."
msgstr ""

# 03353233cf974efc97e5bc1b8fb0fce3
#: reference/datamodel.rst:915
msgid "Frame objects"
msgstr ""

# 3e3f0f1d819442dbb27122ae5a74ce6f
#: reference/datamodel.rst:887
msgid ""
"Frame objects represent execution frames.  They may occur in traceback "
"objects (see below)."
msgstr ""

# 41ffad22fada4c258443d1f4754ffc56
#: reference/datamodel.rst:898
msgid ""
"Special read-only attributes: :attr:`f_back` is to the previous stack frame "
"(towards the caller), or ``None`` if this is the bottom stack frame; :attr:"
"`f_code` is the code object being executed in this frame; :attr:`f_locals` "
"is the dictionary used to look up local variables; :attr:`f_globals` is used "
"for global variables; :attr:`f_builtins` is used for built-in (intrinsic) "
"names; :attr:`f_lasti` gives the precise instruction (this is an index into "
"the bytecode string of the code object)."
msgstr ""

# 0811ceea6ff04c94a5aa8e72ae37ed60
#: reference/datamodel.rst:910
msgid ""
"Special writable attributes: :attr:`f_trace`, if not ``None``, is a function "
"called at the start of each source code line (this is used by the "
"debugger); :attr:`f_lineno` is the current line number of the frame --- "
"writing to this from within a trace function jumps to the given line (only "
"for the bottom-most frame).  A debugger can implement a Jump command (aka "
"Set Next Statement) by writing to f_lineno."
msgstr ""

# d946c8ed717d447b994de370436ab974
#: reference/datamodel.rst:953
msgid "Traceback objects"
msgstr ""

# b8f32d8d1fca4637876599b923d47201
#: reference/datamodel.rst:928
msgid ""
"Traceback objects represent a stack trace of an exception.  A traceback "
"object is created when an exception occurs.  When the search for an "
"exception handler unwinds the execution stack, at each unwound level a "
"traceback object is inserted in front of the current traceback.  When an "
"exception handler is entered, the stack trace is made available to the "
"program. (See section :ref:`try`.) It is accessible as the third item of the "
"tuple returned by ``sys.exc_info()``. When the program contains no suitable "
"handler, the stack trace is written (nicely formatted) to the standard error "
"stream; if the interpreter is interactive, it is also made available to the "
"user as ``sys.last_traceback``."
msgstr ""

# ee76dd3b361e463f8855383d9f7217cb
#: reference/datamodel.rst:946
msgid ""
"Special read-only attributes: :attr:`tb_next` is the next level in the stack "
"trace (towards the frame where the exception occurred), or ``None`` if there "
"is no next level; :attr:`tb_frame` points to the execution frame of the "
"current level; :attr:`tb_lineno` gives the line number where the exception "
"occurred; :attr:`tb_lasti` indicates the precise instruction.  The line "
"number and last instruction in the traceback may differ from the line number "
"of its frame object if the exception occurred in a :keyword:`try` statement "
"with no matching except clause or with a finally clause."
msgstr ""

# 650d9326169a4cf6a45e8d18af30ae33
#: reference/datamodel.rst:979
msgid "Slice objects"
msgstr ""

# 395db6dc141448bfb7f6451143266ebf
#: reference/datamodel.rst:958
msgid ""
"Slice objects are used to represent slices for :meth:`__getitem__` methods.  "
"They are also created by the built-in :func:`slice` function."
msgstr ""

# e18a4821a8b14b92b996569ca670ae2a
#: reference/datamodel.rst:966
msgid ""
"Special read-only attributes: :attr:`start` is the lower bound; :attr:`stop` "
"is the upper bound; :attr:`step` is the step value; each is ``None`` if "
"omitted. These attributes can have any type."
msgstr ""

# e4be682db219417a96baed1a76a214d0
#: reference/datamodel.rst:970
msgid "Slice objects support one method:"
msgstr ""

# c710a3f43f024a51a14d095912d6f8fc
#: reference/datamodel.rst:974
msgid ""
"This method takes a single integer argument *length* and computes "
"information about the slice that the slice object would describe if applied "
"to a sequence of *length* items.  It returns a tuple of three integers; "
"respectively these are the *start* and *stop* indices and the *step* or "
"stride length of the slice. Missing or out-of-bounds indices are handled in "
"a manner consistent with regular slices."
msgstr ""

# c744f10c84974790bf3b501e2c0a9320
#: reference/datamodel.rst:989
msgid "Static method objects"
msgstr ""

# 32556d47e3bb43d0b58a617d8568854c
#: reference/datamodel.rst:982
msgid ""
"Static method objects provide a way of defeating the transformation of "
"function objects to method objects described above. A static method object "
"is a wrapper around any other object, usually a user-defined method object. "
"When a static method object is retrieved from a class or a class instance, "
"the object actually returned is the wrapped object, which is not subject to "
"any further transformation. Static method objects are not themselves "
"callable, although the objects they wrap usually are. Static method objects "
"are created by the built-in :func:`staticmethod` constructor."
msgstr ""

# f4f3c263aaa3420ca2b24a4594cdc201
#: reference/datamodel.rst:997
msgid "Class method objects"
msgstr ""

# 269c1c4378c34eaa8254a7cee25416dc
#: reference/datamodel.rst:992
msgid ""
"A class method object, like a static method object, is a wrapper around "
"another object that alters the way in which that object is retrieved from "
"classes and class instances. The behaviour of class method objects upon such "
"retrieval is described above, under \"User-defined methods\". Class method "
"objects are created by the built-in :func:`classmethod` constructor."
msgstr ""

# 890c61cb565a4640b4da248ba23af9bd
#: reference/datamodel.rst:1002
msgid "Special method names"
msgstr ""

# f4abf6e995554d8eae42d0afe757a7eb
#: reference/datamodel.rst:1008
msgid ""
"A class can implement certain operations that are invoked by special syntax "
"(such as arithmetic operations or subscripting and slicing) by defining "
"methods with special names. This is Python's approach to :dfn:`operator "
"overloading`, allowing classes to define their own behavior with respect to "
"language operators.  For instance, if a class defines a method named :meth:"
"`__getitem__`, and ``x`` is an instance of this class, then ``x[i]`` is "
"roughly equivalent to ``type(x).__getitem__(x, i)``.  Except where "
"mentioned, attempts to execute an operation raise an exception when no "
"appropriate method is defined (typically :exc:`AttributeError` or :exc:"
"`TypeError`)."
msgstr ""

# 8c55161c2eed4b0298fea21a67a700ec
#: reference/datamodel.rst:1018
msgid ""
"When implementing a class that emulates any built-in type, it is important "
"that the emulation only be implemented to the degree that it makes sense for "
"the object being modelled.  For example, some sequences may work well with "
"retrieval of individual elements, but extracting a slice may not make "
"sense.  (One example of this is the :class:`NodeList` interface in the W3C's "
"Document Object Model.)"
msgstr ""

# 1247a2995ba44f6fac2afedcc4ccd965
#: reference/datamodel.rst:1028
msgid "Basic customization"
msgstr ""

# bd5fea045d3b4668aca49b378a0e3cbf
#: reference/datamodel.rst:1034
msgid ""
"Called to create a new instance of class *cls*.  :meth:`__new__` is a static "
"method (special-cased so you need not declare it as such) that takes the "
"class of which an instance was requested as its first argument.  The "
"remaining arguments are those passed to the object constructor expression "
"(the call to the class).  The return value of :meth:`__new__` should be the "
"new object instance (usually an instance of *cls*)."
msgstr ""

# 52cacd4d928e44f68a1a4e34977762bd
#: reference/datamodel.rst:1041
msgid ""
"Typical implementations create a new instance of the class by invoking the "
"superclass's :meth:`__new__` method using ``super(currentclass, cls)."
"__new__(cls[, ...])`` with appropriate arguments and then modifying the "
"newly-created instance as necessary before returning it."
msgstr ""

# eb596097dd904ae985dde70a0c57a036
#: reference/datamodel.rst:1046
msgid ""
"If :meth:`__new__` returns an instance of *cls*, then the new instance's :"
"meth:`__init__` method will be invoked like ``__init__(self[, ...])``, where "
"*self* is the new instance and the remaining arguments are the same as were "
"passed to :meth:`__new__`."
msgstr ""

# 0b0ae22c138846fb89fdf8d15ead6cf8
#: reference/datamodel.rst:1051
msgid ""
"If :meth:`__new__` does not return an instance of *cls*, then the new "
"instance's :meth:`__init__` method will not be invoked."
msgstr ""

# e43f1093a6ea4cafa061e0f09a89c35b
#: reference/datamodel.rst:1054
msgid ""
":meth:`__new__` is intended mainly to allow subclasses of immutable types "
"(like int, str, or tuple) to customize instance creation.  It is also "
"commonly overridden in custom metaclasses in order to customize class "
"creation."
msgstr ""

# 8f3dca6452b44253ac6b2f4310f53548
#: reference/datamodel.rst:1063
msgid ""
"Called when the instance is created.  The arguments are those passed to the "
"class constructor expression.  If a base class has an :meth:`__init__` "
"method, the derived class's :meth:`__init__` method, if any, must explicitly "
"call it to ensure proper initialization of the base class part of the "
"instance; for example: ``BaseClass.__init__(self, [args...])``.  As a "
"special constraint on constructors, no value may be returned; doing so will "
"cause a :exc:`TypeError` to be raised at runtime."
msgstr ""

# dc13cba87a404e7a8be7f43de001f952
#: reference/datamodel.rst:1078
msgid ""
"Called when the instance is about to be destroyed.  This is also called a "
"destructor.  If a base class has a :meth:`__del__` method, the derived "
"class's :meth:`__del__` method, if any, must explicitly call it to ensure "
"proper deletion of the base class part of the instance.  Note that it is "
"possible (though not recommended!) for the :meth:`__del__` method to "
"postpone destruction of the instance by creating a new reference to it.  It "
"may then be called at a later time when this new reference is deleted.  It "
"is not guaranteed that :meth:`__del__` methods are called for objects that "
"still exist when the interpreter exits."
msgstr ""

# 4463e8acb3164a6d849d22f1085a9ba5
#: reference/datamodel.rst:1090
msgid ""
"``del x`` doesn't directly call ``x.__del__()`` --- the former decrements "
"the reference count for ``x`` by one, and the latter is only called when "
"``x``'s reference count reaches zero.  Some common situations that may "
"prevent the reference count of an object from going to zero include: "
"circular references between objects (e.g., a doubly-linked list or a tree "
"data structure with parent and child pointers); a reference to the object on "
"the stack frame of a function that caught an exception (the traceback stored "
"in ``sys.exc_info()[2]`` keeps the stack frame alive); or a reference to the "
"object on the stack frame that raised an unhandled exception in interactive "
"mode (the traceback stored in ``sys.last_traceback`` keeps the stack frame "
"alive).  The first situation can only be remedied by explicitly breaking the "
"cycles; the latter two situations can be resolved by storing ``None`` in "
"``sys.last_traceback``. Circular references which are garbage are detected "
"when the option cycle detector is enabled (it's on by default), but can only "
"be cleaned up if there are no Python- level :meth:`__del__` methods "
"involved. Refer to the documentation for the :mod:`gc` module for more "
"information about how :meth:`__del__` methods are handled by the cycle "
"detector, particularly the description of the ``garbage`` value."
msgstr ""

# 2ddda9a8abce4286868afff79fc756c8
#: reference/datamodel.rst:1112
msgid ""
"Due to the precarious circumstances under which :meth:`__del__` methods are "
"invoked, exceptions that occur during their execution are ignored, and a "
"warning is printed to ``sys.stderr`` instead.  Also, when :meth:`__del__` is "
"invoked in response to a module being deleted (e.g., when execution of the "
"program is done), other globals referenced by the :meth:`__del__` method may "
"already have been deleted or in the process of being torn down (e.g. the "
"import machinery shutting down).  For this reason, :meth:`__del__` methods "
"should do the absolute minimum needed to maintain external invariants.  "
"Starting with version 1.5, Python guarantees that globals whose name begins "
"with a single underscore are deleted from their module before other globals "
"are deleted; if no other references to such globals exist, this may help in "
"assuring that imported modules are still available at the time when the :"
"meth:`__del__` method is called."
msgstr ""

# 562745dab2da4cf1917e19ba3f0f0fa9
#: reference/datamodel.rst:1133
msgid ""
"Called by the :func:`repr` built-in function to compute the \"official\" "
"string representation of an object.  If at all possible, this should look "
"like a valid Python expression that could be used to recreate an object with "
"the same value (given an appropriate environment).  If this is not possible, "
"a string of the form ``<...some useful description...>`` should be returned. "
"The return value must be a string object. If a class defines :meth:"
"`__repr__` but not :meth:`__str__`, then :meth:`__repr__` is also used when "
"an \"informal\" string representation of instances of that class is required."
msgstr ""

# 5bcef120356d4287af9f636aa8460db0
#: reference/datamodel.rst:1142
msgid ""
"This is typically used for debugging, so it is important that the "
"representation is information-rich and unambiguous."
msgstr ""

# 2bc1ed00621947998c62cc74cf118605
#: reference/datamodel.rst:1153
msgid ""
"Called by :func:`str(object) <str>` and the built-in functions :func:"
"`format` and :func:`print` to compute the \"informal\" or nicely printable "
"string representation of an object.  The return value must be a :ref:`string "
"<typesseq>` object."
msgstr ""

# 14b2bf70dd994368b006df68d0e5e2bf
#: reference/datamodel.rst:1158
msgid ""
"This method differs from :meth:`object.__repr__` in that there is no "
"expectation that :meth:`__str__` return a valid Python expression: a more "
"convenient or concise representation can be used."
msgstr ""

# 0f7d5e01380e49e8a0948f4573e4c56e
#: reference/datamodel.rst:1162
msgid ""
"The default implementation defined by the built-in type :class:`object` "
"calls :meth:`object.__repr__`."
msgstr ""

# 185bcb5ec4fb40d2ac875971c0446986
#: reference/datamodel.rst:1172
msgid ""
"Called by :func:`bytes` to compute a byte-string representation of an "
"object. This should return a ``bytes`` object."
msgstr ""

# f2b519a3065e4c48b12e4f1e6c2d140a
#: reference/datamodel.rst:1183
msgid ""
"Called by the :func:`format` built-in function (and by extension, the :meth:"
"`str.format` method of class :class:`str`) to produce a \"formatted\" string "
"representation of an object. The ``format_spec`` argument is a string that "
"contains a description of the formatting options desired. The interpretation "
"of the ``format_spec`` argument is up to the type implementing :meth:"
"`__format__`, however most classes will either delegate formatting to one of "
"the built-in types, or use a similar formatting option syntax."
msgstr ""

# 6857caa0a44842d39fec3cc29e042deb
#: reference/datamodel.rst:1192
msgid ""
"See :ref:`formatspec` for a description of the standard formatting syntax."
msgstr ""

# c609b1285f654dccb1f3938e9e650b25
#: reference/datamodel.rst:1194
msgid "The return value must be a string object."
msgstr ""

# 8911c1cf5c5843378c4a3f0307c08e26
#: reference/datamodel.rst:1208
msgid ""
"These are the so-called \"rich comparison\" methods. The correspondence "
"between operator symbols and method names is as follows: ``x<y`` calls ``x."
"__lt__(y)``, ``x<=y`` calls ``x.__le__(y)``, ``x==y`` calls ``x.__eq__(y)``, "
"``x!=y`` calls ``x.__ne__(y)``, ``x>y`` calls ``x.__gt__(y)``, and ``x>=y`` "
"calls ``x.__ge__(y)``."
msgstr ""

# 063f48365d8b4bf0a71396222af7c52f
#: reference/datamodel.rst:1214
msgid ""
"A rich comparison method may return the singleton ``NotImplemented`` if it "
"does not implement the operation for a given pair of arguments. By "
"convention, ``False`` and ``True`` are returned for a successful comparison. "
"However, these methods can return any value, so if the comparison operator "
"is used in a Boolean context (e.g., in the condition of an ``if`` "
"statement), Python will call :func:`bool` on the value to determine if the "
"result is true or false."
msgstr ""

# ece9764f9b454c9ebd4268da8bd86e38
#: reference/datamodel.rst:1221
msgid ""
"There are no implied relationships among the comparison operators. The truth "
"of ``x==y`` does not imply that ``x!=y`` is false.  Accordingly, when "
"defining :meth:`__eq__`, one should also define :meth:`__ne__` so that the "
"operators will behave as expected.  See the paragraph on :meth:`__hash__` "
"for some important notes on creating :term:`hashable` objects which support "
"custom comparison operations and are usable as dictionary keys."
msgstr ""

# 6ee6dee0860d4c28b6d260990ae868a2
#: reference/datamodel.rst:1228
msgid ""
"There are no swapped-argument versions of these methods (to be used when the "
"left argument does not support the operation but the right argument does); "
"rather, :meth:`__lt__` and :meth:`__gt__` are each other's reflection, :meth:"
"`__le__` and :meth:`__ge__` are each other's reflection, and :meth:`__eq__` "
"and :meth:`__ne__` are their own reflection."
msgstr ""

# ac8cf6d776314d6b907fb7989fc5831a
#: reference/datamodel.rst:1234
msgid "Arguments to rich comparison methods are never coerced."
msgstr ""

# 87abcde8f25c4dfbab26d2b3bc58d444
#: reference/datamodel.rst:1236
msgid ""
"To automatically generate ordering operations from a single root operation, "
"see :func:`functools.total_ordering`."
msgstr ""

# d63675a64601422984712e61dd314711
#: reference/datamodel.rst:1245
msgid ""
"Called by built-in function :func:`hash` and for operations on members of "
"hashed collections including :class:`set`, :class:`frozenset`, and :class:"
"`dict`.  :meth:`__hash__` should return an integer.  The only required "
"property is that objects which compare equal have the same hash value; it is "
"advised to somehow mix together (e.g. using exclusive or) the hash values "
"for the components of the object that also play a part in comparison of "
"objects."
msgstr ""

# 51f67c9bd5a84e24ade09aac56a77487
#: reference/datamodel.rst:1252
msgid ""
"If a class does not define an :meth:`__eq__` method it should not define a :"
"meth:`__hash__` operation either; if it defines :meth:`__eq__` but not :meth:"
"`__hash__`, its instances will not be usable as items in hashable "
"collections.  If a class defines mutable objects and implements an :meth:"
"`__eq__` method, it should not implement :meth:`__hash__`, since the "
"implementation of hashable collections requires that a key's hash value is "
"immutable (if the object's hash value changes, it will be in the wrong hash "
"bucket)."
msgstr ""

# 14f846e67a3b48869c9a521668be058f
#: reference/datamodel.rst:1262
msgid ""
"User-defined classes have :meth:`__eq__` and :meth:`__hash__` methods by "
"default; with them, all objects compare unequal (except with themselves) and "
"``x.__hash__()`` returns ``id(x)``."
msgstr ""

# 34b5d2f43f204ea5a7da064c8e2a2079
#: reference/datamodel.rst:1266
msgid ""
"A class that overrides :meth:`__eq__` and does not define :meth:`__hash__` "
"will have its :meth:`__hash__` implicitly set to ``None``.  When the :meth:"
"`__hash__` method of a class is ``None``, instances of the class will raise "
"an appropriate :exc:`TypeError` when a program attempts to retrieve their "
"hash value, and will also be correctly identified as unhashable when "
"checking ``isinstance(obj, collections.Hashable``)."
msgstr ""

# 4c612349812c46aea7aa0660b0692c7d
#: reference/datamodel.rst:1273
msgid ""
"If a class that overrides :meth:`__eq__` needs to retain the implementation "
"of :meth:`__hash__` from a parent class, the interpreter must be told this "
"explicitly by setting ``__hash__ = <ParentClass>.__hash__``."
msgstr ""

# 372cf164ddd44240b5725c7ac8718591
#: reference/datamodel.rst:1277
msgid ""
"If a class that does not override :meth:`__eq__` wishes to suppress hash "
"support, it should include ``__hash__ = None`` in the class definition. A "
"class which defines its own :meth:`__hash__` that explicitly raises a :exc:"
"`TypeError` would be incorrectly identified as hashable by an "
"``isinstance(obj, collections.Hashable)`` call."
msgstr ""

# d9d0df5f5eab41ec83d1563159eab062
#: reference/datamodel.rst:1283
msgid "See also the :option:`-R` command-line option."
msgstr ""

# 7af7fb9f8d8e4d2e9f99ad51280b077f
#: reference/datamodel.rst:1290
msgid ""
"Called to implement truth value testing and the built-in operation "
"``bool()``; should return ``False`` or ``True``.  When this method is not "
"defined, :meth:`__len__` is called, if it is defined, and the object is "
"considered true if its result is nonzero.  If a class defines neither :meth:"
"`__len__` nor :meth:`__bool__`, all its instances are considered true."
msgstr ""

# bc0bdd94a05c460c91b73bcbad7ed64b
#: reference/datamodel.rst:1301
msgid "Customizing attribute access"
msgstr ""

# a4a3bfdc4094468a80a4bd79be91d24b
#: reference/datamodel.rst:1303
msgid ""
"The following methods can be defined to customize the meaning of attribute "
"access (use of, assignment to, or deletion of ``x.name``) for class "
"instances."
msgstr ""

# e8ef935bbc96496dac29a30fd298b357
#: reference/datamodel.rst:1311
msgid ""
"Called when an attribute lookup has not found the attribute in the usual "
"places (i.e. it is not an instance attribute nor is it found in the class "
"tree for ``self``).  ``name`` is the attribute name. This method should "
"return the (computed) attribute value or raise an :exc:`AttributeError` "
"exception."
msgstr ""

# ddc024a85d61450baa2ce1dcda257893
#: reference/datamodel.rst:1316
msgid ""
"Note that if the attribute is found through the normal mechanism, :meth:"
"`__getattr__` is not called.  (This is an intentional asymmetry between :"
"meth:`__getattr__` and :meth:`__setattr__`.) This is done both for "
"efficiency reasons and because otherwise :meth:`__getattr__` would have no "
"way to access other attributes of the instance.  Note that at least for "
"instance variables, you can fake total control by not inserting any values "
"in the instance attribute dictionary (but instead inserting them in another "
"object).  See the :meth:`__getattribute__` method below for a way to "
"actually get total control over attribute access."
msgstr ""

# 8ca9cea51894453bbce178e11ac0c2d8
#: reference/datamodel.rst:1329
msgid ""
"Called unconditionally to implement attribute accesses for instances of the "
"class. If the class also defines :meth:`__getattr__`, the latter will not be "
"called unless :meth:`__getattribute__` either calls it explicitly or raises "
"an :exc:`AttributeError`. This method should return the (computed) attribute "
"value or raise an :exc:`AttributeError` exception. In order to avoid "
"infinite recursion in this method, its implementation should always call the "
"base class method with the same name to access any attributes it needs, for "
"example, ``object.__getattribute__(self, name)``."
msgstr ""

# 7d1bdfa2fa7e4c3fbbfd9d0221978a8d
#: reference/datamodel.rst:1340
msgid ""
"This method may still be bypassed when looking up special methods as the "
"result of implicit invocation via language syntax or built-in functions. "
"See :ref:`special-lookup`."
msgstr ""

# 074167903ba6494395833d5b492ab8dc
#: reference/datamodel.rst:1347
msgid ""
"Called when an attribute assignment is attempted.  This is called instead of "
"the normal mechanism (i.e. store the value in the instance dictionary). "
"*name* is the attribute name, *value* is the value to be assigned to it."
msgstr ""

# e38a5b4cb698457abfc1d8dad921c149
#: reference/datamodel.rst:1351
msgid ""
"If :meth:`__setattr__` wants to assign to an instance attribute, it should "
"call the base class method with the same name, for example, ``object."
"__setattr__(self, name, value)``."
msgstr ""

# 30de73686a6f495bbe33a155d34ec236
#: reference/datamodel.rst:1358
msgid ""
"Like :meth:`__setattr__` but for attribute deletion instead of assignment.  "
"This should only be implemented if ``del obj.name`` is meaningful for the "
"object."
msgstr ""

# 567ae498fb3c4022b989c2b89bdcd95d
#: reference/datamodel.rst:1364
msgid ""
"Called when :func:`dir` is called on the object.  A list must be returned."
msgstr ""

# 8b01ed37aeeb4d31a34e3933df3599df
#: reference/datamodel.rst:1370
msgid "Implementing Descriptors"
msgstr ""

# 8d38fd92e46f48a48b38f1fe59b65f70
#: reference/datamodel.rst:1372
msgid ""
"The following methods only apply when an instance of the class containing "
"the method (a so-called *descriptor* class) appears in an *owner* class (the "
"descriptor must be in either the owner's class dictionary or in the class "
"dictionary for one of its parents).  In the examples below, \"the attribute"
"\" refers to the attribute whose name is the key of the property in the "
"owner class' :attr:`__dict__`."
msgstr ""

# 079e4ade70e1491db365a9edf3e11bec
#: reference/datamodel.rst:1382
msgid ""
"Called to get the attribute of the owner class (class attribute access) or "
"of an instance of that class (instance attribute access). *owner* is always "
"the owner class, while *instance* is the instance that the attribute was "
"accessed through, or ``None`` when the attribute is accessed through the "
"*owner*.  This method should return the (computed) attribute value or raise "
"an :exc:`AttributeError` exception."
msgstr ""

# c049bb93cd0946bcbb45f090d8a0e10f
#: reference/datamodel.rst:1392
msgid ""
"Called to set the attribute on an instance *instance* of the owner class to "
"a new value, *value*."
msgstr ""

# 56b58e689f144daa915004515ddc015b
#: reference/datamodel.rst:1398
msgid ""
"Called to delete the attribute on an instance *instance* of the owner class."
msgstr ""

# 97a43698ad1746c5be9a810ccb8b9cfb
#: reference/datamodel.rst:1404
msgid "Invoking Descriptors"
msgstr ""

# 9cb482a950834c409f0fac2527086088
#: reference/datamodel.rst:1406
msgid ""
"In general, a descriptor is an object attribute with \"binding behavior\", "
"one whose attribute access has been overridden by methods in the descriptor "
"protocol:  :meth:`__get__`, :meth:`__set__`, and :meth:`__delete__`. If any "
"of those methods are defined for an object, it is said to be a descriptor."
msgstr ""

# 199b642e153d44b6aa9c8a2861330a52
#: reference/datamodel.rst:1411
msgid ""
"The default behavior for attribute access is to get, set, or delete the "
"attribute from an object's dictionary. For instance, ``a.x`` has a lookup "
"chain starting with ``a.__dict__['x']``, then ``type(a).__dict__['x']``, and "
"continuing through the base classes of ``type(a)`` excluding metaclasses."
msgstr ""

# 10d5eecb134145ca873599f0a99d557b
#: reference/datamodel.rst:1416
msgid ""
"However, if the looked-up value is an object defining one of the descriptor "
"methods, then Python may override the default behavior and invoke the "
"descriptor method instead.  Where this occurs in the precedence chain "
"depends on which descriptor methods were defined and how they were called."
msgstr ""

# c34d154046f14665af2efa368ecbf66e
#: reference/datamodel.rst:1421
msgid ""
"The starting point for descriptor invocation is a binding, ``a.x``. How the "
"arguments are assembled depends on ``a``:"
msgstr ""

# e1da6ec76deb4d79b9668a8bc18baa54
#: reference/datamodel.rst:1426
msgid "Direct Call"
msgstr ""

# 8ebb8e6bd24b46f29ed887caa47ed582
#: reference/datamodel.rst:1425
msgid ""
"The simplest and least common call is when user code directly invokes a "
"descriptor method:    ``x.__get__(a)``."
msgstr ""

# daf2f068081240d89f8e258368b91447
#: reference/datamodel.rst:1430
msgid "Instance Binding"
msgstr ""

# 7e7e2b48a7b343a68970cd46fd4924c6
#: reference/datamodel.rst:1429
msgid ""
"If binding to an object instance, ``a.x`` is transformed into the call: "
"``type(a).__dict__['x'].__get__(a, type(a))``."
msgstr ""

# 7210af48a2df4a3e9c1a838e85acca6b
#: reference/datamodel.rst:1434
msgid "Class Binding"
msgstr ""

# ac65cf5b73eb45728a6e7e0c298eafbf
#: reference/datamodel.rst:1433
msgid ""
"If binding to a class, ``A.x`` is transformed into the call: ``A."
"__dict__['x'].__get__(None, A)``."
msgstr ""

# 057439afd4fc4d29bab38f0d7435d8f2
#: reference/datamodel.rst:1440
msgid "Super Binding"
msgstr ""

# ff01aa42cde942acbd68c4858a95e48e
#: reference/datamodel.rst:1437
msgid ""
"If ``a`` is an instance of :class:`super`, then the binding ``super(B, obj)."
"m()`` searches ``obj.__class__.__mro__`` for the base class ``A`` "
"immediately preceding ``B`` and then invokes the descriptor with the call: "
"``A.__dict__['m'].__get__(obj, obj.__class__)``."
msgstr ""

# 01bd5ecbfdf4496188f500814df2607b
#: reference/datamodel.rst:1442
msgid ""
"For instance bindings, the precedence of descriptor invocation depends on "
"the which descriptor methods are defined.  A descriptor can define any "
"combination of :meth:`__get__`, :meth:`__set__` and :meth:`__delete__`.  If "
"it does not define :meth:`__get__`, then accessing the attribute will return "
"the descriptor object itself unless there is a value in the object's "
"instance dictionary.  If the descriptor defines :meth:`__set__` and/or :meth:"
"`__delete__`, it is a data descriptor; if it defines neither, it is a non-"
"data descriptor.  Normally, data descriptors define both :meth:`__get__` "
"and :meth:`__set__`, while non-data descriptors have just the :meth:"
"`__get__` method.  Data descriptors with :meth:`__set__` and :meth:`__get__` "
"defined always override a redefinition in an instance dictionary.  In "
"contrast, non-data descriptors can be overridden by instances."
msgstr ""

# 1de88d7faae54c1688565e23b2c599be
#: reference/datamodel.rst:1455
msgid ""
"Python methods (including :func:`staticmethod` and :func:`classmethod`) are "
"implemented as non-data descriptors.  Accordingly, instances can redefine "
"and override methods.  This allows individual instances to acquire behaviors "
"that differ from other instances of the same class."
msgstr ""

# f079a9eccf5c46c19966a04219e6f72e
#: reference/datamodel.rst:1460
msgid ""
"The :func:`property` function is implemented as a data descriptor. "
"Accordingly, instances cannot override the behavior of a property."
msgstr ""

# 2805bde6bf1f473f9f49f749040f7d9c
#: reference/datamodel.rst:1467
msgid "__slots__"
msgstr ""

# 351ce55ffd27424e92c4936827191fb5
#: reference/datamodel.rst:1469
msgid ""
"By default, instances of classes have a dictionary for attribute storage.  "
"This wastes space for objects having very few instance variables.  The space "
"consumption can become acute when creating large numbers of instances."
msgstr ""

# 5c74c491e30942aead805c5c3c5d26d3
#: reference/datamodel.rst:1473
msgid ""
"The default can be overridden by defining *__slots__* in a class definition. "
"The *__slots__* declaration takes a sequence of instance variables and "
"reserves just enough space in each instance to hold a value for each "
"variable.  Space is saved because *__dict__* is not created for each "
"instance."
msgstr ""

# 8d02b8b82c5147369b7adfdbb763c687
#: reference/datamodel.rst:1481
msgid ""
"This class variable can be assigned a string, iterable, or sequence of "
"strings with variable names used by instances.  If defined in a class, "
"*__slots__* reserves space for the declared variables and prevents the "
"automatic creation of *__dict__* and *__weakref__* for each instance."
msgstr ""

# c9f468098b3b440788f8ffc48f055195
#: reference/datamodel.rst:1488
msgid "Notes on using *__slots__*"
msgstr ""

# 6b2c8d1393464209893d41bec61cccb6
#: reference/datamodel.rst:1490
msgid ""
"When inheriting from a class without *__slots__*, the *__dict__* attribute "
"of that class will always be accessible, so a *__slots__* definition in the "
"subclass is meaningless."
msgstr ""

# 9db66289c06b4d758c866d87045983a1
#: reference/datamodel.rst:1494
msgid ""
"Without a *__dict__* variable, instances cannot be assigned new variables "
"not listed in the *__slots__* definition.  Attempts to assign to an unlisted "
"variable name raises :exc:`AttributeError`. If dynamic assignment of new "
"variables is desired, then add ``'__dict__'`` to the sequence of strings in "
"the *__slots__* declaration."
msgstr ""

# 707ac93f63b6495fbe21bb11d731ce58
#: reference/datamodel.rst:1500
msgid ""
"Without a *__weakref__* variable for each instance, classes defining "
"*__slots__* do not support weak references to its instances. If weak "
"reference support is needed, then add ``'__weakref__'`` to the sequence of "
"strings in the *__slots__* declaration."
msgstr ""

# d7ee09dfb77743d18650ccf56be9c2bf
#: reference/datamodel.rst:1505
msgid ""
"*__slots__* are implemented at the class level by creating descriptors (:ref:"
"`descriptors`) for each variable name.  As a result, class attributes cannot "
"be used to set default values for instance variables defined by *__slots__*; "
"otherwise, the class attribute would overwrite the descriptor assignment."
msgstr ""

# 1c68a81cb01340b2bfdb143a44836fe8
#: reference/datamodel.rst:1511
msgid ""
"The action of a *__slots__* declaration is limited to the class where it is "
"defined.  As a result, subclasses will have a *__dict__* unless they also "
"define *__slots__* (which must only contain names of any *additional* slots)."
msgstr ""

# 3c594a7ce6d94476ace6cd46cefcab87
#: reference/datamodel.rst:1515
msgid ""
"If a class defines a slot also defined in a base class, the instance "
"variable defined by the base class slot is inaccessible (except by "
"retrieving its descriptor directly from the base class). This renders the "
"meaning of the program undefined.  In the future, a check may be added to "
"prevent this."
msgstr ""

# 34f06fac30994a19ac320fe2a1c8f085
#: reference/datamodel.rst:1520
msgid ""
"Nonempty *__slots__* does not work for classes derived from \"variable-length"
"\" built-in types such as :class:`int`, :class:`str` and :class:`tuple`."
msgstr ""

# 759882c67cc74a92aa8ed753e701e7fa
#: reference/datamodel.rst:1523
msgid ""
"Any non-string iterable may be assigned to *__slots__*. Mappings may also be "
"used; however, in the future, special meaning may be assigned to the values "
"corresponding to each key."
msgstr ""

# b3df469ac2ba4808be3eb4e071873ce4
#: reference/datamodel.rst:1527
msgid ""
"*__class__* assignment works only if both classes have the same *__slots__*."
msgstr ""

# 5a477dd98ebb4817aa2b469eed574243
#: reference/datamodel.rst:1533
msgid "Customizing class creation"
msgstr ""

# bbb5dbed8d4047bfaa76c0b4e6e0dc1f
#: reference/datamodel.rst:1535
msgid ""
"By default, classes are constructed using :func:`type`. A class definition "
"is read into a separate namespace and the value of class name is bound to "
"the result of ``type(name, bases, dict)``."
msgstr ""

# 5d79e3833e9c4a00a5b00d7fd754172b
#: reference/datamodel.rst:1539
msgid ""
"When the class definition is read, if a callable ``metaclass`` keyword "
"argument is passed after the bases in the class definition, the callable "
"given will be called instead of :func:`type`.  If other keyword arguments "
"are passed, they will also be passed to the metaclass.  This allows classes "
"or functions to be written which monitor or alter the class creation process:"
msgstr ""

# 251660eba64544e0ae61d9c2fd1a5379
#: reference/datamodel.rst:1545
msgid "Modifying the class dictionary prior to the class being created."
msgstr ""

# 95fb097d0c29447bb492ef5b63b6f6ae
#: reference/datamodel.rst:1547
msgid ""
"Returning an instance of another class -- essentially performing the role of "
"a factory function."
msgstr ""

# 1d2143d575ad43a8ad5b6b5def248d9d
#: reference/datamodel.rst:1550
msgid ""
"These steps will have to be performed in the metaclass's :meth:`__new__` "
"method -- :meth:`type.__new__` can then be called from this method to create "
"a class with different properties.  This example adds a new element to the "
"class dictionary before creating the class::"
msgstr ""

# 90fda53b7d8e466692ceee930bc382ab
#: reference/datamodel.rst:1560
msgid ""
"You can of course also override other class methods (or add new methods); "
"for example defining a custom :meth:`__call__` method in the metaclass "
"allows custom behavior when the class is called, e.g. not always creating a "
"new instance."
msgstr ""

# 80c7556b4b6a4edb8f0d504056ac549d
#: reference/datamodel.rst:1564
msgid ""
"If the metaclass has a :meth:`__prepare__` attribute (usually implemented as "
"a class or static method), it is called before the class body is evaluated "
"with the name of the class and a tuple of its bases for arguments.  It "
"should return an object that supports the mapping interface that will be "
"used to store the namespace of the class.  The default is a plain "
"dictionary.  This could be used, for example, to keep track of the order "
"that class attributes are declared in by returning an ordered dictionary."
msgstr ""

# 62d5847d3cbc420e8350c7b8c5baea50
#: reference/datamodel.rst:1572
msgid ""
"The appropriate metaclass is determined by the following precedence rules:"
msgstr ""

# ecce10f691794f2dbf10959dd45b6032
#: reference/datamodel.rst:1574
msgid ""
"If the ``metaclass`` keyword argument is passed with the bases, it is used."
msgstr ""

# 662da5d8642a42b08bb9e3dea50f72b9
#: reference/datamodel.rst:1576
msgid "Otherwise, if there is at least one base class, its metaclass is used."
msgstr ""

# 474dfa7a1c6d425abf7d3a2d0e61ca1e
#: reference/datamodel.rst:1578
msgid "Otherwise, the default metaclass (:class:`type`) is used."
msgstr ""

# c7c1f59f67bb4060aac8ac0487089655
#: reference/datamodel.rst:1580
msgid ""
"The potential uses for metaclasses are boundless. Some ideas that have been "
"explored including logging, interface checking, automatic delegation, "
"automatic property creation, proxies, frameworks, and automatic resource "
"locking/synchronization."
msgstr ""

# 51c193052dc0470daf8d8222eeb8828e
#: reference/datamodel.rst:1585
msgid ""
"Here is an example of a metaclass that uses an :class:`collections."
"OrderedDict` to remember the order that class members were defined::"
msgstr ""

# 88c0135d3fc942e3889c11cdbef9a9f0
#: reference/datamodel.rst:1608
msgid ""
"When the class definition for *A* gets executed, the process begins with "
"calling the metaclass's :meth:`__prepare__` method which returns an empty :"
"class:`collections.OrderedDict`.  That mapping records the methods and "
"attributes of *A* as they are defined within the body of the class "
"statement. Once those definitions are executed, the ordered dictionary is "
"fully populated and the metaclass's :meth:`__new__` method gets invoked.  "
"That method builds the new type and it saves the ordered dictionary keys in "
"an attribute called ``members``."
msgstr ""

# 36672008cc394e08b33f9b4f546179ef
#: reference/datamodel.rst:1619
msgid "Customizing instance and subclass checks"
msgstr ""

# 6ef356f0bd4247739e911a4bf271b9a5
#: reference/datamodel.rst:1621
msgid ""
"The following methods are used to override the default behavior of the :func:"
"`isinstance` and :func:`issubclass` built-in functions."
msgstr ""

# 00f911f0a16e47789573530dc669ec08
#: reference/datamodel.rst:1624
msgid ""
"In particular, the metaclass :class:`abc.ABCMeta` implements these methods "
"in order to allow the addition of Abstract Base Classes (ABCs) as \"virtual "
"base classes\" to any class or type (including built-in types), including "
"other ABCs."
msgstr ""

# b75c651816fe4d81ac7dff408ec35be2
#: reference/datamodel.rst:1631
msgid ""
"Return true if *instance* should be considered a (direct or indirect) "
"instance of *class*. If defined, called to implement ``isinstance(instance, "
"class)``."
msgstr ""

# 183ff89873b44bdda100b9ec391d14b2
#: reference/datamodel.rst:1638
msgid ""
"Return true if *subclass* should be considered a (direct or indirect) "
"subclass of *class*.  If defined, called to implement ``issubclass(subclass, "
"class)``."
msgstr ""

# 3b651ea1ef8f442eaf8b549723cbd61a
#: reference/datamodel.rst:1643
msgid ""
"Note that these methods are looked up on the type (metaclass) of a class.  "
"They cannot be defined as class methods in the actual class.  This is "
"consistent with the lookup of special methods that are called on instances, "
"only in this case the instance is itself a class."
msgstr ""

# befd72521832414881c073afb1c4b857
#: reference/datamodel.rst:1654
msgid ":pep:`3119` - Introducing Abstract Base Classes"
msgstr ""

# 90a277b85a634688976a375c2517eb7f
#: reference/datamodel.rst:1651
msgid ""
"Includes the specification for customizing :func:`isinstance` and :func:"
"`issubclass` behavior through :meth:`__instancecheck__` and :meth:"
"`__subclasscheck__`, with motivation for this functionality in the context "
"of adding Abstract Base Classes (see the :mod:`abc` module) to the language."
msgstr ""

# d9450d97a2074c3f97773ba223302ce9
#: reference/datamodel.rst:1661
msgid "Emulating callable objects"
msgstr ""

# 8ff961d942e848cab8d0324ab7b103ce
#: reference/datamodel.rst:1668
msgid ""
"Called when the instance is \"called\" as a function; if this method is "
"defined, ``x(arg1, arg2, ...)`` is a shorthand for ``x.__call__(arg1, "
"arg2, ...)``."
msgstr ""

# 40abfeea24ba4922a2f598e079fe90c7
#: reference/datamodel.rst:1675
msgid "Emulating container types"
msgstr ""

# 529ceb26cc1d4bccb1199b1ed99d6514
#: reference/datamodel.rst:1677
msgid ""
"The following methods can be defined to implement container objects.  "
"Containers usually are sequences (such as lists or tuples) or mappings (like "
"dictionaries), but can represent other containers as well.  The first set of "
"methods is used either to emulate a sequence or to emulate a mapping; the "
"difference is that for a sequence, the allowable keys should be the integers "
"*k* for which ``0 <= k < N`` where *N* is the length of the sequence, or "
"slice objects, which define a range of items.  It is also recommended that "
"mappings provide the methods :meth:`keys`, :meth:`values`, :meth:`items`, :"
"meth:`get`, :meth:`clear`, :meth:`setdefault`, :meth:`pop`, :meth:"
"`popitem`, :meth:`copy`, and :meth:`update` behaving similar to those for "
"Python's standard dictionary objects.  The :mod:`collections` module "
"provides a :class:`MutableMapping` abstract base class to help create those "
"methods from a base set of :meth:`__getitem__`, :meth:`__setitem__`, :meth:"
"`__delitem__`, and :meth:`keys`. Mutable sequences should provide methods :"
"meth:`append`, :meth:`count`, :meth:`index`, :meth:`extend`, :meth:"
"`insert`, :meth:`pop`, :meth:`remove`, :meth:`reverse` and :meth:`sort`, "
"like Python standard list objects.  Finally, sequence types should implement "
"addition (meaning concatenation) and multiplication (meaning repetition) by "
"defining the methods :meth:`__add__`, :meth:`__radd__`, :meth:`__iadd__`, :"
"meth:`__mul__`, :meth:`__rmul__` and :meth:`__imul__` described below; they "
"should not define other numerical operators.  It is recommended that both "
"mappings and sequences implement the :meth:`__contains__` method to allow "
"efficient use of the ``in`` operator; for mappings, ``in`` should search the "
"mapping's keys; for sequences, it should search through the values.  It is "
"further recommended that both mappings and sequences implement the :meth:"
"`__iter__` method to allow efficient iteration through the container; for "
"mappings, :meth:`__iter__` should be the same as :meth:`keys`; for "
"sequences, it should iterate through the values."
msgstr ""

# cb001e29c3bd4e70ad9db618438c3a9e
#: reference/datamodel.rst:1711
msgid ""
"Called to implement the built-in function :func:`len`.  Should return the "
"length of the object, an integer ``>=`` 0.  Also, an object that doesn't "
"define a :meth:`__bool__` method and whose :meth:`__len__` method returns "
"zero is considered to be false in a Boolean context."
msgstr ""

# 972663f2523048f5973be67ec4a1d349
#: reference/datamodel.rst:1719
msgid ""
"Slicing is done exclusively with the following three methods.  A call like ::"
msgstr ""

# a6bce2e8ef5b448b8d16e0a284b07121
#: reference/datamodel.rst:1723
msgid "is translated to ::"
msgstr ""

# 0c45df9c50bf4fd2b79c5f77ba972bd7
#: reference/datamodel.rst:1727
msgid "and so forth.  Missing slice items are always filled in with ``None``."
msgstr ""

# 9ef3084edd084750a9c593599c9f52f3
#: reference/datamodel.rst:1734
msgid ""
"Called to implement evaluation of ``self[key]``. For sequence types, the "
"accepted keys should be integers and slice objects.  Note that the special "
"interpretation of negative indexes (if the class wishes to emulate a "
"sequence type) is up to the :meth:`__getitem__` method. If *key* is of an "
"inappropriate type, :exc:`TypeError` may be raised; if of a value outside "
"the set of indexes for the sequence (after any special interpretation of "
"negative values), :exc:`IndexError` should be raised. For mapping types, if "
"*key* is missing (not in the container), :exc:`KeyError` should be raised."
msgstr ""

# a327afd60fd34b4caf13c13a5f817cad
#: reference/datamodel.rst:1745
msgid ""
":keyword:`for` loops expect that an :exc:`IndexError` will be raised for "
"illegal indexes to allow proper detection of the end of the sequence."
msgstr ""

# ab5c8a9c4b1f4e099e78e9fd1aaabfe4
#: reference/datamodel.rst:1751
msgid ""
"Called to implement assignment to ``self[key]``.  Same note as for :meth:"
"`__getitem__`.  This should only be implemented for mappings if the objects "
"support changes to the values for keys, or if new keys can be added, or for "
"sequences if elements can be replaced.  The same exceptions should be raised "
"for improper *key* values as for the :meth:`__getitem__` method."
msgstr ""

# 2f5f8ee6b4bc4b3a9a1d0d3bb0940d6e
#: reference/datamodel.rst:1760
msgid ""
"Called to implement deletion of ``self[key]``.  Same note as for :meth:"
"`__getitem__`.  This should only be implemented for mappings if the objects "
"support removal of keys, or for sequences if elements can be removed from "
"the sequence.  The same exceptions should be raised for improper *key* "
"values as for the :meth:`__getitem__` method."
msgstr ""

# 9f69d059678545618165ca96e4bc5fb1
#: reference/datamodel.rst:1769
msgid ""
"This method is called when an iterator is required for a container. This "
"method should return a new iterator object that can iterate over all the "
"objects in the container.  For mappings, it should iterate over the keys of "
"the container, and should also be made available as the method :meth:`keys`."
msgstr ""

# 6e75d66ae50f409c9a23ab1e28efb22b
#: reference/datamodel.rst:1774
msgid ""
"Iterator objects also need to implement this method; they are required to "
"return themselves.  For more information on iterator objects, see :ref:"
"`typeiter`."
msgstr ""

# 7b8ec6f0e1d247e6bb05fc9f59e529fa
#: reference/datamodel.rst:1780
msgid ""
"Called (if present) by the :func:`reversed` built-in to implement reverse "
"iteration.  It should return a new iterator object that iterates over all "
"the objects in the container in reverse order."
msgstr ""

# cfd706e8cb1d4cc7a15447db8125abb6
#: reference/datamodel.rst:1784
msgid ""
"If the :meth:`__reversed__` method is not provided, the :func:`reversed` "
"built-in will fall back to using the sequence protocol (:meth:`__len__` and :"
"meth:`__getitem__`).  Objects that support the sequence protocol should only "
"provide :meth:`__reversed__` if they can provide an implementation that is "
"more efficient than the one provided by :func:`reversed`."
msgstr ""

# 422b6ba33b5643069890c1c87cf13bcb
#: reference/datamodel.rst:1791
msgid ""
"The membership test operators (:keyword:`in` and :keyword:`not in`) are "
"normally implemented as an iteration through a sequence.  However, container "
"objects can supply the following special method with a more efficient "
"implementation, which also does not require the object be a sequence."
msgstr ""

# 705f89ce97004760aaed299948aec694
#: reference/datamodel.rst:1798
msgid ""
"Called to implement membership test operators.  Should return true if *item* "
"is in *self*, false otherwise.  For mapping objects, this should consider "
"the keys of the mapping rather than the values or the key-item pairs."
msgstr ""

# d1b104f6055541f6a15fba79d75f4fb9
#: reference/datamodel.rst:1802
msgid ""
"For objects that don't define :meth:`__contains__`, the membership test "
"first tries iteration via :meth:`__iter__`, then the old sequence iteration "
"protocol via :meth:`__getitem__`, see :ref:`this section in the language "
"reference <membership-test-details>`."
msgstr ""

# c6ef61a168e44485b5784da207ad7fff
#: reference/datamodel.rst:1811
msgid "Emulating numeric types"
msgstr ""

# 71897fe5abb14492839a97bfc6618c8e
#: reference/datamodel.rst:1813
msgid ""
"The following methods can be defined to emulate numeric objects. Methods "
"corresponding to operations that are not supported by the particular kind of "
"number implemented (e.g., bitwise operations for non-integral numbers) "
"should be left undefined."
msgstr ""

# 1b3a303e5d2a4fe5b1a99293c3c7ef70
#: reference/datamodel.rst:1838
msgid ""
"These methods are called to implement the binary arithmetic operations (``"
"+``, ``-``, ``*``, ``/``, ``//``, ``%``, :func:`divmod`, :func:`pow`, "
"``**``, ``<<``, ``>>``, ``&``, ``^``, ``|``).  For instance, to evaluate the "
"expression ``x + y``, where *x* is an instance of a class that has an :meth:"
"`__add__` method, ``x.__add__(y)`` is called.  The :meth:`__divmod__` method "
"should be the equivalent to using :meth:`__floordiv__` and :meth:`__mod__`; "
"it should not be related to :meth:`__truediv__`.  Note that :meth:`__pow__` "
"should be defined to accept an optional third argument if the ternary "
"version of the built-in :func:`pow` function is to be supported."
msgstr ""

# 5e4872732a9440489b23242ba3d75f6e
#: reference/datamodel.rst:1848
msgid ""
"If one of those methods does not support the operation with the supplied "
"arguments, it should return ``NotImplemented``."
msgstr ""

# f86b140ee4174a31b412bd8c25155744
#: reference/datamodel.rst:1870
msgid ""
"These methods are called to implement the binary arithmetic operations (``"
"+``, ``-``, ``*``, ``/``, ``//``, ``%``, :func:`divmod`, :func:`pow`, "
"``**``, ``<<``, ``>>``, ``&``, ``^``, ``|``) with reflected (swapped) "
"operands. These functions are only called if the left operand does not "
"support the corresponding operation and the operands are of different types. "
"[#]_  For instance, to evaluate the expression ``x - y``, where *y* is an "
"instance of a class that has an :meth:`__rsub__` method, ``y.__rsub__(x)`` "
"is called if ``x.__sub__(y)`` returns *NotImplemented*."
msgstr ""

# 18664c10626a400aad30fc32039e5e66
#: reference/datamodel.rst:1881
msgid ""
"Note that ternary :func:`pow` will not try calling :meth:`__rpow__` (the "
"coercion rules would become too complicated)."
msgstr ""

# 2e201a2672d74681bcf659749b072e73
#: reference/datamodel.rst:1886
msgid ""
"If the right operand's type is a subclass of the left operand's type and "
"that subclass provides the reflected method for the operation, this method "
"will be called before the left operand's non-reflected method.  This "
"behavior allows subclasses to override their ancestors' operations."
msgstr ""

# c9dba4c870d64c69ae4f3612d875054d
#: reference/datamodel.rst:1905
msgid ""
"These methods are called to implement the augmented arithmetic assignments "
"(``+=``, ``-=``, ``*=``, ``/=``, ``//=``, ``%=``, ``**=``, ``<<=``, ``>>=``, "
"``&=``, ``^=``, ``|=``).  These methods should attempt to do the operation "
"in-place (modifying *self*) and return the result (which could be, but does "
"not have to be, *self*).  If a specific method is not defined, the augmented "
"assignment falls back to the normal methods.  For instance, to execute the "
"statement ``x += y``, where *x* is an instance of a class that has an :meth:"
"`__iadd__` method, ``x.__iadd__(y)`` is called.  If *x* is an instance of a "
"class that does not define a :meth:`__iadd__` method, ``x.__add__(y)`` and "
"``y.__radd__(x)`` are considered, as with the evaluation of ``x + y``."
msgstr ""

# e970b2344d7e4f819b6edac944b96aa5
#: reference/datamodel.rst:1924
msgid ""
"Called to implement the unary arithmetic operations (``-``, ``+``, :func:"
"`abs` and ``~``)."
msgstr ""

# 6680fc40cda04edf898e5ef9b2252c33
#: reference/datamodel.rst:1939
msgid ""
"Called to implement the built-in functions :func:`complex`, :func:`int`, :"
"func:`float` and :func:`round`.  Should return a value of the appropriate "
"type."
msgstr ""

# 35abf4a1a3784257b044e92006f0daf2
#: reference/datamodel.rst:1946
msgid ""
"Called to implement :func:`operator.index`.  Also called whenever Python "
"needs an integer object (such as in slicing, or in the built-in :func:"
"`bin`, :func:`hex` and :func:`oct` functions). Must return an integer."
msgstr ""

# f1fb50f7cd514223ad5449aff05c3c6e
#: reference/datamodel.rst:1954
msgid "With Statement Context Managers"
msgstr ""

# 223fcb1d6713414fa0b22383fed834bf
#: reference/datamodel.rst:1956
msgid ""
"A :dfn:`context manager` is an object that defines the runtime context to be "
"established when executing a :keyword:`with` statement. The context manager "
"handles the entry into, and the exit from, the desired runtime context for "
"the execution of the block of code.  Context managers are normally invoked "
"using the :keyword:`with` statement (described in section :ref:`with`), but "
"can also be used by directly invoking their methods."
msgstr ""

# e78ac477328a4535a72603176003c1b4
#: reference/datamodel.rst:1967
msgid ""
"Typical uses of context managers include saving and restoring various kinds "
"of global state, locking and unlocking resources, closing opened files, etc."
msgstr ""

# eaca1583b6934fc38f81fe5935b5d1f6
#: reference/datamodel.rst:1970
msgid ""
"For more information on context managers, see :ref:`typecontextmanager`."
msgstr ""

# 533cf956f80c4118b62214d507563794
#: reference/datamodel.rst:1975
msgid ""
"Enter the runtime context related to this object. The :keyword:`with` "
"statement will bind this method's return value to the target(s) specified in "
"the :keyword:`as` clause of the statement, if any."
msgstr ""

# 5a0717101f244d8293ee4e75311f2ce7
#: reference/datamodel.rst:1982
msgid ""
"Exit the runtime context related to this object. The parameters describe the "
"exception that caused the context to be exited. If the context was exited "
"without an exception, all three arguments will be :const:`None`."
msgstr ""

# ccbe536db4e34b9c82798405ecc0f7fd
#: reference/datamodel.rst:1986
msgid ""
"If an exception is supplied, and the method wishes to suppress the exception "
"(i.e., prevent it from being propagated), it should return a true value. "
"Otherwise, the exception will be processed normally upon exit from this "
"method."
msgstr ""

# 58b048155f3441db8b650cdf2ea6f6f5
#: reference/datamodel.rst:1990
msgid ""
"Note that :meth:`__exit__` methods should not reraise the passed-in "
"exception; this is the caller's responsibility."
msgstr ""

# ff6be34c962a46a5be743c937240646b
#: reference/datamodel.rst:2004
msgid "Special method lookup"
msgstr ""

# a6ec3a7152ce477ea0baac75f1b42d7d
#: reference/datamodel.rst:2006
msgid ""
"For custom classes, implicit invocations of special methods are only "
"guaranteed to work correctly if defined on an object's type, not in the "
"object's instance dictionary.  That behaviour is the reason why the "
"following code raises an exception::"
msgstr ""

# 070c130deda74ea88a8dfe0fe01c9027
#: reference/datamodel.rst:2021
msgid ""
"The rationale behind this behaviour lies with a number of special methods "
"such as :meth:`__hash__` and :meth:`__repr__` that are implemented by all "
"objects, including type objects. If the implicit lookup of these methods "
"used the conventional lookup process, they would fail when invoked on the "
"type object itself::"
msgstr ""

# 82a9857fe4ef4bdb915adf3f0e486486
#: reference/datamodel.rst:2034
msgid ""
"Incorrectly attempting to invoke an unbound method of a class in this way is "
"sometimes referred to as 'metaclass confusion', and is avoided by bypassing "
"the instance when looking up special methods::"
msgstr ""

# 29b7090b38c94412a8dd8a95a1940aac
#: reference/datamodel.rst:2043
msgid ""
"In addition to bypassing any instance attributes in the interest of "
"correctness, implicit special method lookup generally also bypasses the :"
"meth:`__getattribute__` method even of the object's metaclass::"
msgstr ""

# afb26c9007084bf68f74b9fd971d97ce
#: reference/datamodel.rst:2069
msgid ""
"Bypassing the :meth:`__getattribute__` machinery in this fashion provides "
"significant scope for speed optimisations within the interpreter, at the "
"cost of some flexibility in the handling of special methods (the special "
"method *must* be set on the class object itself in order to be consistently "
"invoked by the interpreter)."
msgstr ""

# e79ffdc00fc84502a11ab551752f1a45
#: reference/datamodel.rst:2078
msgid ""
"It *is* possible in some cases to change an object's type, under certain "
"controlled conditions. It generally isn't a good idea though, since it can "
"lead to some very strange behaviour if it is handled incorrectly."
msgstr ""

# fa7fb2c3f0ab478a9d562ba8b728b5e7
#: reference/datamodel.rst:2082
msgid ""
"For operands of the same type, it is assumed that if the non-reflected "
"method (such as :meth:`__add__`) fails the operation is not supported, which "
"is why the reflected method is not called."
msgstr ""

# b6ca7b0b45364ffa90d6ee27e483fd63
#: reference/executionmodel.rst:6
msgid "Execution model"
msgstr ""

# cc1878989bc54f8da1412a5068cb7484
#: reference/executionmodel.rst:14
msgid "Naming and binding"
msgstr ""

# d15e78962848407383066889806305d8
#: reference/executionmodel.rst:25
msgid ""
":dfn:`Names` refer to objects.  Names are introduced by name binding "
"operations. Each occurrence of a name in the program text refers to the :dfn:"
"`binding` of that name established in the innermost function block "
"containing the use."
msgstr ""

# 2fcf41e318ab449cb83c5d400ecb04e3
#: reference/executionmodel.rst:31
msgid ""
"A :dfn:`block` is a piece of Python program text that is executed as a unit. "
"The following are blocks: a module, a function body, and a class definition. "
"Each command typed interactively is a block.  A script file (a file given as "
"standard input to the interpreter or specified on the interpreter command "
"line the first argument) is a code block.  A script command (a command "
"specified on the interpreter command line with the '**-c**' option) is a "
"code block.  The string argument passed to the built-in functions :func:"
"`eval` and :func:`exec` is a code block."
msgstr ""

# b387117702754b12be0bd551e077f990
#: reference/executionmodel.rst:42
msgid ""
"A code block is executed in an :dfn:`execution frame`.  A frame contains "
"some administrative information (used for debugging) and determines where "
"and how execution continues after the code block's execution has completed."
msgstr ""

# 41c8769ec0b34c08a4c85a6694c14831
#: reference/executionmodel.rst:48
msgid ""
"A :dfn:`scope` defines the visibility of a name within a block.  If a local "
"variable is defined in a block, its scope includes that block.  If the "
"definition occurs in a function block, the scope extends to any blocks "
"contained within the defining one, unless a contained block introduces a "
"different binding for the name.  The scope of names defined in a class block "
"is limited to the class block; it does not extend to the code blocks of "
"methods -- this includes comprehensions and generator expressions since they "
"are implemented using a function scope.  This means that the following will "
"fail::"
msgstr ""

# 3bc2b424c9a34003985c7f87f602c3fa
#: reference/executionmodel.rst:63
msgid ""
"When a name is used in a code block, it is resolved using the nearest "
"enclosing scope.  The set of all such scopes visible to a code block is "
"called the block's :dfn:`environment`."
msgstr ""

# 00003d67c09744a1bde0937efb68a2c4
#: reference/executionmodel.rst:69
msgid ""
"If a name is bound in a block, it is a local variable of that block, unless "
"declared as :keyword:`nonlocal`.  If a name is bound at the module level, it "
"is a global variable.  (The variables of the module code block are local and "
"global.)  If a variable is used in a code block but not defined there, it is "
"a :dfn:`free variable`."
msgstr ""

# 52ee6fb3d7604dee91fd4f6029e95e39
#: reference/executionmodel.rst:79
msgid ""
"When a name is not found at all, a :exc:`NameError` exception is raised.  If "
"the name refers to a local variable that has not been bound, a :exc:"
"`UnboundLocalError` exception is raised.  :exc:`UnboundLocalError` is a "
"subclass of :exc:`NameError`."
msgstr ""

# 794e4f5d9b8f4b978f10be90b70148b8
#: reference/executionmodel.rst:86
msgid ""
"The following constructs bind names: formal parameters to functions, :"
"keyword:`import` statements, class and function definitions (these bind the "
"class or function name in the defining block), and targets that are "
"identifiers if occurring in an assignment, :keyword:`for` loop header, or "
"after :keyword:`as` in a :keyword:`with` statement or :keyword:`except` "
"clause. The :keyword:`import` statement of the form ``from ... import *`` "
"binds all names defined in the imported module, except those beginning with "
"an underscore.  This form may only be used at the module level."
msgstr ""

# 012aa0d7843f4134ad688435a385254c
#: reference/executionmodel.rst:96
msgid ""
"A target occurring in a :keyword:`del` statement is also considered bound "
"for this purpose (though the actual semantics are to unbind the name)."
msgstr ""

# cda0696bfc3a4fe99cd59bf9b1c09792
#: reference/executionmodel.rst:99
msgid ""
"Each assignment or import statement occurs within a block defined by a class "
"or function definition or at the module level (the top-level code block)."
msgstr ""

# 70e2c7a1014e4b66a02663842cd7623a
#: reference/executionmodel.rst:102
msgid ""
"If a name binding operation occurs anywhere within a code block, all uses of "
"the name within the block are treated as references to the current block.  "
"This can lead to errors when a name is used within a block before it is "
"bound.  This rule is subtle.  Python lacks declarations and allows name "
"binding operations to occur anywhere within a code block.  The local "
"variables of a code block can be determined by scanning the entire text of "
"the block for name binding operations."
msgstr ""

# 07a6fdbf435640f09264937be64de1ef
#: reference/executionmodel.rst:109
msgid ""
"If the :keyword:`global` statement occurs within a block, all uses of the "
"name specified in the statement refer to the binding of that name in the top-"
"level namespace.  Names are resolved in the top-level namespace by searching "
"the global namespace, i.e. the namespace of the module containing the code "
"block, and the builtins namespace, the namespace of the module :mod:"
"`builtins`.  The global namespace is searched first.  If the name is not "
"found there, the builtins namespace is searched.  The global statement must "
"precede all uses of the name."
msgstr ""

# 66f9fb27d9ee42a198b58b2f66034509
#: reference/executionmodel.rst:121
msgid ""
"The builtins namespace associated with the execution of a code block is "
"actually found by looking up the name ``__builtins__`` in its global "
"namespace; this should be a dictionary or a module (in the latter case the "
"module's dictionary is used).  By default, when in the :mod:`__main__` "
"module, ``__builtins__`` is the built-in module :mod:`builtins`; when in any "
"other module, ``__builtins__`` is an alias for the dictionary of the :mod:"
"`builtins` module itself.  ``__builtins__`` can be set to a user-created "
"dictionary to create a weak form of restricted execution."
msgstr ""

# f164afe2bc0740b49d434de1c6151e65
#: reference/executionmodel.rst:132
msgid ""
"Users should not touch ``__builtins__``; it is strictly an implementation "
"detail.  Users wanting to override values in the builtins namespace should :"
"keyword:`import` the :mod:`builtins` module and modify its attributes "
"appropriately."
msgstr ""

# 8ba560fd1c764d9cb53c3b140c5bc1fd
#: reference/executionmodel.rst:139
msgid ""
"The namespace for a module is automatically created the first time a module "
"is imported.  The main module for a script is always called :mod:`__main__`."
msgstr ""

# 50a17144a2d244fd9d88d1fa79cac6ed
#: reference/executionmodel.rst:142
msgid ""
"The :keyword:`global` statement has the same scope as a name binding "
"operation in the same block.  If the nearest enclosing scope for a free "
"variable contains a global statement, the free variable is treated as a "
"global."
msgstr ""

# 7e7cd83a5b764eb79c43edc8cb172141
#: reference/executionmodel.rst:146
msgid ""
"A class definition is an executable statement that may use and define names. "
"These references follow the normal rules for name resolution.  The namespace "
"of the class definition becomes the attribute dictionary of the class.  "
"Names defined at the class scope are not visible in methods."
msgstr ""

# aced038bcd274667baa3e2619f8808d5
#: reference/executionmodel.rst:155
msgid "Interaction with dynamic features"
msgstr ""

# 79895bbc63fd46dcb05193a763650735
#: reference/executionmodel.rst:157
msgid ""
"There are several cases where Python statements are illegal when used in "
"conjunction with nested scopes that contain free variables."
msgstr ""

# de5023f0a7e4486d8eb112e1367b8f41
#: reference/executionmodel.rst:160
msgid ""
"If a variable is referenced in an enclosing scope, it is illegal to delete "
"the name.  An error will be reported at compile time."
msgstr ""

# bc06f510a1a140a39b21a8eaae2488a9
#: reference/executionmodel.rst:163
msgid ""
"If the wild card form of import --- ``import *`` --- is used in a function "
"and the function contains or is a nested block with free variables, the "
"compiler will raise a :exc:`SyntaxError`."
msgstr ""

# 0c060dd4abf04c3fb0f0abb64d26e2f6
#: reference/executionmodel.rst:169
msgid ""
"The :func:`eval` and :func:`exec` functions do not have access to the full "
"environment for resolving names.  Names may be resolved in the local and "
"global namespaces of the caller.  Free variables are not resolved in the "
"nearest enclosing namespace, but in the global namespace.  [#]_ The :func:"
"`exec` and :func:`eval` functions have optional arguments to override the "
"global and local namespace.  If only one namespace is specified, it is used "
"for both."
msgstr ""

# c805cfd40f014857aa12c8a1e7bc352b
#: reference/executionmodel.rst:180
msgid "Exceptions"
msgstr "Exceptions"

# 00b56de03b5144039d457c7a8479c3f1
#: reference/executionmodel.rst:191
msgid ""
"Exceptions are a means of breaking out of the normal flow of control of a "
"code block in order to handle errors or other exceptional conditions.  An "
"exception is *raised* at the point where the error is detected; it may be "
"*handled* by the surrounding code block or by any code block that directly "
"or indirectly invoked the code block where the error occurred."
msgstr ""

# 65dbc88b4aa54e51b081e24b9e0c73b9
#: reference/executionmodel.rst:197
msgid ""
"The Python interpreter raises an exception when it detects a run-time error "
"(such as division by zero).  A Python program can also explicitly raise an "
"exception with the :keyword:`raise` statement. Exception handlers are "
"specified with the :keyword:`try` ... :keyword:`except` statement.  The :"
"keyword:`finally` clause of such a statement can be used to specify cleanup "
"code which does not handle the exception, but is executed whether an "
"exception occurred or not in the preceding code."
msgstr ""

# b4360c7112554a1d942ae2d14c27a17d
#: reference/executionmodel.rst:207
msgid ""
"Python uses the \"termination\" model of error handling: an exception "
"handler can find out what happened and continue execution at an outer level, "
"but it cannot repair the cause of the error and retry the failing operation "
"(except by re-entering the offending piece of code from the top)."
msgstr ""

# 0b12a1c2c3824c56b9592a79c9f4245e
#: reference/executionmodel.rst:214
msgid ""
"When an exception is not handled at all, the interpreter terminates "
"execution of the program, or returns to its interactive main loop.  In "
"either case, it prints a stack backtrace, except when the exception is :exc:"
"`SystemExit`."
msgstr ""

# 9ab0c65600e946638b98e20590853cca
#: reference/executionmodel.rst:218
msgid ""
"Exceptions are identified by class instances.  The :keyword:`except` clause "
"is selected depending on the class of the instance: it must reference the "
"class of the instance or a base class thereof.  The instance can be received "
"by the handler and can carry additional information about the exceptional "
"condition."
msgstr ""

# 990ca7ac29d4402580e20b9d1c9bd9b3
#: reference/executionmodel.rst:225
msgid ""
"Exception messages are not part of the Python API.  Their contents may "
"change from one version of Python to the next without warning and should not "
"be relied on by code which will run under multiple versions of the "
"interpreter."
msgstr ""

# d0f7313a9ace4a699207274d5c4c2c84
#: reference/executionmodel.rst:229
msgid ""
"See also the description of the :keyword:`try` statement in section :ref:"
"`try` and :keyword:`raise` statement in section :ref:`raise`."
msgstr ""

# c637de152fd9436581ded53096ad7f67
#: reference/executionmodel.rst:235
msgid ""
"This limitation occurs because the code that is executed by these operations "
"is not available at the time the module is compiled."
msgstr ""

# 04d80656a2ea4d5ea05471567ba52aee
#: reference/expressions.rst:6
msgid "Expressions"
msgstr ""

# 0b1f7f7fe4ec4e67a9ea6797747a27b0
#: reference/expressions.rst:10
msgid ""
"This chapter explains the meaning of the elements of expressions in Python."
msgstr ""

# fd35c19dbdc5450f99fb23c7dd26eca6
#: reference/expressions.rst:12
msgid ""
"**Syntax Notes:** In this and the following chapters, extended BNF notation "
"will be used to describe syntax, not lexical analysis.  When (one "
"alternative of) a syntax rule has the form"
msgstr ""

# 69b7815808d24ffba1c63bacd9d6de12
#: reference/expressions.rst:19
msgid ""
"and no semantics are given, the semantics of this form of ``name`` are the "
"same as for ``othername``."
msgstr ""

# 76ee085dc5324f98836e25b7c53b1ddf
#: reference/expressions.rst:26
msgid "Arithmetic conversions"
msgstr ""

# 33b0c49928bb4a5c8724c41c36986214
#: reference/expressions.rst:30
msgid ""
"When a description of an arithmetic operator below uses the phrase \"the "
"numeric arguments are converted to a common type,\" this means that the "
"operator implementation for built-in types works that way:"
msgstr ""

# 7f61b3c8974d4e1ea7d64b608c800b16
#: reference/expressions.rst:34
msgid ""
"If either argument is a complex number, the other is converted to complex;"
msgstr ""

# c82d283057bd4762af1a759601dbba2e
#: reference/expressions.rst:36
msgid ""
"otherwise, if either argument is a floating point number, the other is "
"converted to floating point;"
msgstr ""

# 784af8bf803843bb8f9b7eafd71111d7
#: reference/expressions.rst:39
msgid "otherwise, both must be integers and no conversion is necessary."
msgstr ""

# f1704f12dcc048299d4c4ba6300d9647
#: reference/expressions.rst:41
msgid ""
"Some additional rules apply for certain operators (e.g., a string left "
"argument to the '%' operator).  Extensions must define their own conversion "
"behavior."
msgstr ""

# 1d582e138b66441b901cad2d4092b300
#: reference/expressions.rst:48
msgid "Atoms"
msgstr ""

# 804fb1c55ede47c3986c882df4858d72
#: reference/expressions.rst:52
msgid ""
"Atoms are the most basic elements of expressions.  The simplest atoms are "
"identifiers or literals.  Forms enclosed in parentheses, brackets or braces "
"are also categorized syntactically as atoms.  The syntax for atoms is:"
msgstr ""

# b32ddecfb7a04a5b8e7b3aba35db9b89
#: reference/expressions.rst:65
msgid "Identifiers (Names)"
msgstr ""

# 41b32d68615c473f86f39dd5d6b275d7
#: reference/expressions.rst:69
msgid ""
"An identifier occurring as an atom is a name.  See section :ref:"
"`identifiers` for lexical definition and section :ref:`naming` for "
"documentation of naming and binding."
msgstr ""

# 9739ba8f74f54dbe8d605455746f0d53
#: reference/expressions.rst:75
msgid ""
"When the name is bound to an object, evaluation of the atom yields that "
"object. When a name is not bound, an attempt to evaluate it raises a :exc:"
"`NameError` exception."
msgstr ""

# d7f7b3598ef6436c92872fd9c30e8e20
#: reference/expressions.rst:83
msgid ""
"**Private name mangling:** When an identifier that textually occurs in a "
"class definition begins with two or more underscore characters and does not "
"end in two or more underscores, it is considered a :dfn:`private name` of "
"that class. Private names are transformed to a longer form before code is "
"generated for them.  The transformation inserts the class name in front of "
"the name, with leading underscores removed, and a single underscore inserted "
"in front of the class name.  For example, the identifier ``__spam`` "
"occurring in a class named ``Ham`` will be transformed to ``_Ham__spam``.  "
"This transformation is independent of the syntactical context in which the "
"identifier is used.  If the transformed name is extremely long (longer than "
"255 characters), implementation defined truncation may happen.  If the class "
"name consists only of underscores, no transformation is done."
msgstr ""

# c094035905d44e0798900ddf6469870e
# 16fbb9ebc8274fac9ade432cdab8cb19
#: reference/expressions.rst:100 reference/lexical_analysis.rst:386
msgid "Literals"
msgstr ""

# 2e0494459ae54b41a1464eb6dffe3a96
#: reference/expressions.rst:104
msgid "Python supports string and bytes literals and various numeric literals:"
msgstr ""

# a7cad1f69b824701a51e086eaf9fd192
#: reference/expressions.rst:110
msgid ""
"Evaluation of a literal yields an object of the given type (string, bytes, "
"integer, floating point number, complex number) with the given value.  The "
"value may be approximated in the case of floating point and imaginary "
"(complex) literals.  See section :ref:`literals` for details."
msgstr ""

# 11594842f8f94cb0b0b74b29fdd20ceb
#: reference/expressions.rst:119
msgid ""
"All literals correspond to immutable data types, and hence the object's "
"identity is less important than its value.  Multiple evaluations of literals "
"with the same value (either the same occurrence in the program text or a "
"different occurrence) may obtain the same object or a different object with "
"the same value."
msgstr ""

# 5b3db0dc56f14960842a15f49db4777e
#: reference/expressions.rst:129
msgid "Parenthesized forms"
msgstr ""

# 3cbf656bb5eb44ce97f89d5c942c7796
#: reference/expressions.rst:133
msgid ""
"A parenthesized form is an optional expression list enclosed in parentheses:"
msgstr ""

# 1838984dfdf64fa6944e35d43ec3269b
#: reference/expressions.rst:138
msgid ""
"A parenthesized expression list yields whatever that expression list yields: "
"if the list contains at least one comma, it yields a tuple; otherwise, it "
"yields the single expression that makes up the expression list."
msgstr ""

# 56da78fa687a48e5957c68f79f4e8a79
#: reference/expressions.rst:144
msgid ""
"An empty pair of parentheses yields an empty tuple object.  Since tuples are "
"immutable, the rules for literals apply (i.e., two occurrences of the empty "
"tuple may or may not yield the same object)."
msgstr ""

# 043e2b2b68ce498ca7d17c844f2b55e1
#: reference/expressions.rst:152
msgid ""
"Note that tuples are not formed by the parentheses, but rather by use of the "
"comma operator.  The exception is the empty tuple, for which parentheses "
"*are* required --- allowing unparenthesized \"nothing\" in expressions would "
"cause ambiguities and allow common typos to pass uncaught."
msgstr ""

# 210f76d4833b40c697eb34e069e473d9
#: reference/expressions.rst:161
msgid "Displays for lists, sets and dictionaries"
msgstr ""

# d08299e44aca497a823e0bbd43d60cd4
#: reference/expressions.rst:163
msgid ""
"For constructing a list, a set or a dictionary Python provides special "
"syntax called \"displays\", each of them in two flavors:"
msgstr ""

# 21a0d83a1be04b43bc30a123a5561162
#: reference/expressions.rst:166
msgid "either the container contents are listed explicitly, or"
msgstr ""

# d6077358fff04a25a2c37ed2a755b241
#: reference/expressions.rst:168
msgid ""
"they are computed via a set of looping and filtering instructions, called a :"
"dfn:`comprehension`."
msgstr ""

# 8e8560964f86452e9989c6e995b0996f
#: reference/expressions.rst:171
msgid "Common syntax elements for comprehensions are:"
msgstr ""

# f47846e0176547eba49a9ca504a5663e
#: reference/expressions.rst:179
msgid ""
"The comprehension consists of a single expression followed by at least one :"
"keyword:`for` clause and zero or more :keyword:`for` or :keyword:`if` "
"clauses. In this case, the elements of the new container are those that "
"would be produced by considering each of the :keyword:`for` or :keyword:`if` "
"clauses a block, nesting from left to right, and evaluating the expression "
"to produce an element each time the innermost block is reached."
msgstr ""

# 67a87eddee994a0fb667bf3643d50632
#: reference/expressions.rst:186
msgid ""
"Note that the comprehension is executed in a separate scope, so names "
"assigned to in the target list don't \"leak\" in the enclosing scope."
msgstr ""

# 882be620a7ea4c1a89933af2a373084d
#: reference/expressions.rst:193
msgid "List displays"
msgstr ""

# 11978b8a953145bd88b8c3157dae43d8
#: reference/expressions.rst:201
msgid ""
"A list display is a possibly empty series of expressions enclosed in square "
"brackets:"
msgstr ""

# dadd93ac0b61419db640877fcb2e9fb0
#: reference/expressions.rst:207
msgid ""
"A list display yields a new list object, the contents being specified by "
"either a list of expressions or a comprehension.  When a comma-separated "
"list of expressions is supplied, its elements are evaluated from left to "
"right and placed into the list object in that order.  When a comprehension "
"is supplied, the list is constructed from the elements resulting from the "
"comprehension."
msgstr ""

# 4962182e0f614486b4600a97f5a1ac00
#: reference/expressions.rst:217
msgid "Set displays"
msgstr ""

# e784c46ef4d0424ab1c231ce5b1e70c2
#: reference/expressions.rst:222
msgid ""
"A set display is denoted by curly braces and distinguishable from dictionary "
"displays by the lack of colons separating keys and values:"
msgstr ""

# 7eb9fde9980c453b80f5e09ac5257b11
#: reference/expressions.rst:228
msgid ""
"A set display yields a new mutable set object, the contents being specified "
"by either a sequence of expressions or a comprehension.  When a comma-"
"separated list of expressions is supplied, its elements are evaluated from "
"left to right and added to the set object.  When a comprehension is "
"supplied, the set is constructed from the elements resulting from the "
"comprehension."
msgstr ""

# 904597db77a0434684ec35eb969f0cf9
#: reference/expressions.rst:234
msgid ""
"An empty set cannot be constructed with ``{}``; this literal constructs an "
"empty dictionary."
msgstr ""

# a7f6662e610a4fca81928a73e2a11ec8
#: reference/expressions.rst:241
msgid "Dictionary displays"
msgstr ""

# 3af159c35a7a49d5a9af55dccdf2c4d3
#: reference/expressions.rst:247
msgid ""
"A dictionary display is a possibly empty series of key/datum pairs enclosed "
"in curly braces:"
msgstr ""

# 16e183efb3bc47c8a7ecc0625230995c
#: reference/expressions.rst:256
msgid "A dictionary display yields a new dictionary object."
msgstr ""

# d69a0d349436433e8b33804509ee9507
#: reference/expressions.rst:258
msgid ""
"If a comma-separated sequence of key/datum pairs is given, they are "
"evaluated from left to right to define the entries of the dictionary: each "
"key object is used as a key into the dictionary to store the corresponding "
"datum.  This means that you can specify the same key multiple times in the "
"key/datum list, and the final dictionary's value for that key will be the "
"last one given."
msgstr ""

# 904babea703340a38c606f42747507c4
#: reference/expressions.rst:264
msgid ""
"A dict comprehension, in contrast to list and set comprehensions, needs two "
"expressions separated with a colon followed by the usual \"for\" and \"if\" "
"clauses. When the comprehension is run, the resulting key and value elements "
"are inserted in the new dictionary in the order they are produced."
msgstr ""

# 324bf67eb2414f43bd4a5404fd8876a6
#: reference/expressions.rst:272
msgid ""
"Restrictions on the types of the key values are listed earlier in section :"
"ref:`types`.  (To summarize, the key type should be :term:`hashable`, which "
"excludes all mutable objects.)  Clashes between duplicate keys are not "
"detected; the last datum (textually rightmost in the display) stored for a "
"given key value prevails."
msgstr ""

# 675bd659f35346d59b6e3dae7fe8b138
#: reference/expressions.rst:282
msgid "Generator expressions"
msgstr ""

# a8c59d7b7bf343cf8226b9ff97516abe
#: reference/expressions.rst:287
msgid "A generator expression is a compact generator notation in parentheses:"
msgstr ""

# 98f605637d8b42d6ab8151ce0fd81c46
#: reference/expressions.rst:292
msgid ""
"A generator expression yields a new generator object.  Its syntax is the "
"same as for comprehensions, except that it is enclosed in parentheses "
"instead of brackets or curly braces."
msgstr ""

# 1a8175128b174e2a81f69bfa5ac39544
#: reference/expressions.rst:296
msgid ""
"Variables used in the generator expression are evaluated lazily when the :"
"meth:`~generator.__next__` method is called for generator object (in the "
"same fashion as normal generators).  However, the leftmost :keyword:`for` "
"clause is immediately evaluated, so that an error produced by it can be seen "
"before any other possible error in the code that handles the generator "
"expression. Subsequent :keyword:`for` clauses cannot be evaluated "
"immediately since they may depend on the previous :keyword:`for` loop. For "
"example: ``(x*y for x in range(10) for y in bar(x))``."
msgstr ""

# 2422b3b82f2c4aef8ddd5046d0e63ab8
#: reference/expressions.rst:305
msgid ""
"The parentheses can be omitted on calls with only one argument.  See "
"section :ref:`calls` for the detail."
msgstr ""

# 38171075ef5e4538a8f103ca00e5f4c7
#: reference/expressions.rst:312
msgid "Yield expressions"
msgstr ""

# 82c55b715f814e1eb44baf0c470c452d
#: reference/expressions.rst:323
msgid ""
"The :keyword:`yield` expression is only used when defining a generator "
"function, and can only be used in the body of a function definition.  Using "
"a :keyword:`yield` expression in a function definition is sufficient to "
"cause that definition to create a generator function instead of a normal "
"function."
msgstr ""

# 4ec40ad6ddf04b76ac6e287ff8a954aa
#: reference/expressions.rst:328
msgid ""
"When a generator function is called, it returns an iterator known as a "
"generator.  That generator then controls the execution of a generator "
"function. The execution starts when one of the generator's methods is "
"called.  At that time, the execution proceeds to the first :keyword:`yield` "
"expression, where it is suspended again, returning the value of :token:"
"`expression_list` to generator's caller.  By suspended we mean that all "
"local state is retained, including the current bindings of local variables, "
"the instruction pointer, and the internal evaluation stack.  When the "
"execution is resumed by calling one of the generator's methods, the function "
"can proceed exactly as if the :keyword:`yield` expression was just another "
"external call.  The value of the :keyword:`yield` expression after resuming "
"depends on the method which resumed the execution."
msgstr ""

# 4e10d884542c4a2ab6ba39a7f73b69f2
#: reference/expressions.rst:343
msgid ""
"All of this makes generator functions quite similar to coroutines; they "
"yield multiple times, they have more than one entry point and their "
"execution can be suspended.  The only difference is that a generator "
"function cannot control where should the execution continue after it yields; "
"the control is always transferred to the generator's caller."
msgstr ""

# 826946d52e6f4eafa47ed4f872c835ce
# 0fc2d4d4319b40ad971c1c986bdec784
#: reference/expressions.rst:349 reference/simple_stmts.rst:465
msgid ""
"The :keyword:`yield` statement is allowed in the :keyword:`try` clause of a :"
"keyword:`try` ...  :keyword:`finally` construct.  If the generator is not "
"resumed before it is finalized (by reaching a zero reference count or by "
"being garbage collected), the generator-iterator's :meth:`close` method will "
"be called, allowing any pending :keyword:`finally` clauses to execute."
msgstr ""

# 24041dd7993c4a1391a857e8470e61ae
#: reference/expressions.rst:359
msgid "Generator-iterator methods"
msgstr ""

# 133e2a96d65f440c9b50fe3442373eed
#: reference/expressions.rst:361
msgid ""
"This subsection describes the methods of a generator iterator.  They can be "
"used to control the execution of a generator function."
msgstr ""

# 76bd0d8cbc3b455e8403b8c8dedbe78a
#: reference/expressions.rst:364
msgid ""
"Note that calling any of the generator methods below when the generator is "
"already executing raises a :exc:`ValueError` exception."
msgstr ""

# d76fd7e46898498d8a9a434280a6cdd7
#: reference/expressions.rst:372
msgid ""
"Starts the execution of a generator function or resumes it at the last "
"executed :keyword:`yield` expression.  When a generator function is resumed "
"with a :meth:`~generator.__next__` method, the current :keyword:`yield` "
"expression always evaluates to :const:`None`.  The execution then continues "
"to the next :keyword:`yield` expression, where the generator is suspended "
"again, and the value of the :token:`expression_list` is returned to :meth:"
"`next`'s caller. If the generator exits without yielding another value, a :"
"exc:`StopIteration` exception is raised."
msgstr ""

# d2810efa5f8746038fc3a81a8d29c242
#: reference/expressions.rst:382
msgid ""
"This method is normally called implicitly, e.g. by a :keyword:`for` loop, or "
"by the built-in :func:`next` function."
msgstr ""

# bc94996353664123a4d0ae0e3a1cf468
#: reference/expressions.rst:388
msgid ""
"Resumes the execution and \"sends\" a value into the generator function.  "
"The ``value`` argument becomes the result of the current :keyword:`yield` "
"expression.  The :meth:`send` method returns the next value yielded by the "
"generator, or raises :exc:`StopIteration` if the generator exits without "
"yielding another value.  When :meth:`send` is called to start the generator, "
"it must be called with :const:`None` as the argument, because there is no :"
"keyword:`yield` expression that could receive the value."
msgstr ""

# c08e6b170dcc41ff82c15f62ca4ce47c
#: reference/expressions.rst:399
msgid ""
"Raises an exception of type ``type`` at the point where generator was "
"paused, and returns the next value yielded by the generator function.  If "
"the generator exits without yielding another value, a :exc:`StopIteration` "
"exception is raised.  If the generator function does not catch the passed-in "
"exception, or raises a different exception, then that exception propagates "
"to the caller."
msgstr ""

# 22e35fa6fa0849c18da8bd66f0ad6aa3
#: reference/expressions.rst:410
msgid ""
"Raises a :exc:`GeneratorExit` at the point where the generator function was "
"paused.  If the generator function then raises :exc:`StopIteration` (by "
"exiting normally, or due to already being closed) or :exc:`GeneratorExit` "
"(by not catching the exception), close returns to its caller.  If the "
"generator yields a value, a :exc:`RuntimeError` is raised.  If the generator "
"raises any other exception, it is propagated to the caller.  :meth:`close` "
"does nothing if the generator has already exited due to an exception or "
"normal exit."
msgstr ""

# a9d934ec1274439d8574835d686c69e7
#: reference/expressions.rst:418
msgid ""
"Here is a simple example that demonstrates the behavior of generators and "
"generator functions::"
msgstr ""

# 7b0f77c966c44f0c94b477aa46eae38e
# 04c1755b2de444ccaa584243aa718187
#: reference/expressions.rst:449 reference/simple_stmts.rst:474
msgid ":pep:`0255` - Simple Generators"
msgstr ""

# 679c085cd4c1476eb5c92d1df60dccac
# 592743b816354973888a6b2a53a705d6
#: reference/expressions.rst:449 reference/simple_stmts.rst:474
msgid ""
"The proposal for adding generators and the :keyword:`yield` statement to "
"Python."
msgstr ""

# 03720628a1ae4f628143ced7f3c0ae48
# eab42641f3c2430b804babf544919acc
#: reference/expressions.rst:452 reference/simple_stmts.rst:477
msgid ":pep:`0342` - Coroutines via Enhanced Generators"
msgstr ""

# 6305a26d664b43b983747d495b7b7a59
#: reference/expressions.rst:452
msgid ""
"The proposal to enhance the API and syntax of generators, making them usable "
"as simple coroutines."
msgstr ""

# 6b8ca21dd4864c8a8f1ae4e324b22e35
#: reference/expressions.rst:459
msgid "Primaries"
msgstr ""

# b04afdcedc2249b5a11650ae769b6345
#: reference/expressions.rst:463
msgid ""
"Primaries represent the most tightly bound operations of the language. Their "
"syntax is:"
msgstr ""

# 5113cadf31124748b3b29a09fde9aa66
#: reference/expressions.rst:473
msgid "Attribute references"
msgstr ""

# 45d318a5677742a6a0f026aa04b890d6
#: reference/expressions.rst:477
msgid "An attribute reference is a primary followed by a period and a name:"
msgstr ""

# 93d388d147b143c5b37a0b6f3dd98c97
#: reference/expressions.rst:487
msgid ""
"The primary must evaluate to an object of a type that supports attribute "
"references, which most objects do.  This object is then asked to produce the "
"attribute whose name is the identifier (which can be customized by "
"overriding the :meth:`__getattr__` method).  If this attribute is not "
"available, the exception :exc:`AttributeError` is raised.  Otherwise, the "
"type and value of the object produced is determined by the object.  Multiple "
"evaluations of the same attribute reference may yield different objects."
msgstr ""

# e08b08632a234d80b865de434d4f2932
#: reference/expressions.rst:499
msgid "Subscriptions"
msgstr ""

# f173b64c21c940ebae2c0bb3f24934d7
#: reference/expressions.rst:512
msgid ""
"A subscription selects an item of a sequence (string, tuple or list) or "
"mapping (dictionary) object:"
msgstr ""

# 3d6a93cc55c04edeae5f2f4d2dd4d95a
#: reference/expressions.rst:518
msgid ""
"The primary must evaluate to an object that supports subscription, e.g. a "
"list or dictionary.  User-defined objects can support subscription by "
"defining a :meth:`__getitem__` method."
msgstr ""

# 98d34410ca8c4aa581937fd958fc6367
#: reference/expressions.rst:522
msgid ""
"For built-in objects, there are two types of objects that support "
"subscription:"
msgstr ""

# 65fd4c9b179e41d3914ba4170cb78da9
#: reference/expressions.rst:524
msgid ""
"If the primary is a mapping, the expression list must evaluate to an object "
"whose value is one of the keys of the mapping, and the subscription selects "
"the value in the mapping that corresponds to that key.  (The expression list "
"is a tuple except if it has exactly one item.)"
msgstr ""

# 029bb997763944409d8dd1b47cf7e980
#: reference/expressions.rst:529
msgid ""
"If the primary is a sequence, the expression (list) must evaluate to an "
"integer or a slice (as discussed in the following section)."
msgstr ""

# 47c474ce081547819c0bea8590f80db7
#: reference/expressions.rst:532
msgid ""
"The formal syntax makes no special provision for negative indices in "
"sequences; however, built-in sequences all provide a :meth:`__getitem__` "
"method that interprets negative indices by adding the length of the sequence "
"to the index (so that ``x[-1]`` selects the last item of ``x``).  The "
"resulting value must be a nonnegative integer less than the number of items "
"in the sequence, and the subscription selects the item whose index is that "
"value (counting from zero). Since the support for negative indices and "
"slicing occurs in the object's :meth:`__getitem__` method, subclasses "
"overriding this method will need to explicitly add that support."
msgstr ""

# 3dc1e28b27604bdd844f0350b7a89f2c
#: reference/expressions.rst:546
msgid ""
"A string's items are characters.  A character is not a separate data type "
"but a string of exactly one character."
msgstr ""

# 31f0d8d5cedb43bfb6c715d2ebebae55
#: reference/expressions.rst:553
msgid "Slicings"
msgstr ""

# 9152ba19a8924ecca8bb9b432e258d60
#: reference/expressions.rst:565
msgid ""
"A slicing selects a range of items in a sequence object (e.g., a string, "
"tuple or list).  Slicings may be used as expressions or as targets in "
"assignment or :keyword:`del` statements.  The syntax for a slicing:"
msgstr ""

# e3586f949d1643a2a8bbae13513750e8
#: reference/expressions.rst:578
msgid ""
"There is ambiguity in the formal syntax here: anything that looks like an "
"expression list also looks like a slice list, so any subscription can be "
"interpreted as a slicing.  Rather than further complicating the syntax, this "
"is disambiguated by defining that in this case the interpretation as a "
"subscription takes priority over the interpretation as a slicing (this is "
"the case if the slice list contains no proper slice)."
msgstr ""

# cd73524ec5344b6eb19e91b8e6ae6fd3
#: reference/expressions.rst:590
msgid ""
"The semantics for a slicing are as follows.  The primary must evaluate to a "
"mapping object, and it is indexed (using the same :meth:`__getitem__` method "
"as normal subscription) with a key that is constructed from the slice list, "
"as follows.  If the slice list contains at least one comma, the key is a "
"tuple containing the conversion of the slice items; otherwise, the "
"conversion of the lone slice item is the key.  The conversion of a slice "
"item that is an expression is that expression.  The conversion of a proper "
"slice is a slice object (see section :ref:`types`) whose :attr:`start`, :"
"attr:`stop` and :attr:`step` attributes are the values of the expressions "
"given as lower bound, upper bound and stride, respectively, substituting "
"``None`` for missing expressions."
msgstr ""

# 887b89be06954daabea62da082d8cd5f
#: reference/expressions.rst:611
msgid "Calls"
msgstr ""

# a7b24a192d6e4ca9bf473e28b27666b5
#: reference/expressions.rst:613
msgid ""
"A call calls a callable object (e.g., a :term:`function`) with a possibly "
"empty series of :term:`arguments <argument>`:"
msgstr ""

# b26c4bfd0be3417f9d27cff4b85f9ed9
#: reference/expressions.rst:629
msgid ""
"A trailing comma may be present after the positional and keyword arguments "
"but does not affect the semantics."
msgstr ""

# 7e318358a9404a4fb725a7ef2ecee936
#: reference/expressions.rst:635
msgid ""
"The primary must evaluate to a callable object (user-defined functions, "
"built-in functions, methods of built-in objects, class objects, methods of "
"class instances, and all objects having a :meth:`__call__` method are "
"callable).  All argument expressions are evaluated before the call is "
"attempted.  Please refer to section :ref:`function` for the syntax of "
"formal :term:`parameter` lists."
msgstr ""

# d961757e6774480ab0fe4dd0147e662f
#: reference/expressions.rst:643
msgid ""
"If keyword arguments are present, they are first converted to positional "
"arguments, as follows.  First, a list of unfilled slots is created for the "
"formal parameters.  If there are N positional arguments, they are placed in "
"the first N slots.  Next, for each keyword argument, the identifier is used "
"to determine the corresponding slot (if the identifier is the same as the "
"first formal parameter name, the first slot is used, and so on).  If the "
"slot is already filled, a :exc:`TypeError` exception is raised. Otherwise, "
"the value of the argument is placed in the slot, filling it (even if the "
"expression is ``None``, it fills the slot).  When all arguments have been "
"processed, the slots that are still unfilled are filled with the "
"corresponding default value from the function definition.  (Default values "
"are calculated, once, when the function is defined; thus, a mutable object "
"such as a list or dictionary used as default value will be shared by all "
"calls that don't specify an argument value for the corresponding slot; this "
"should usually be avoided.)  If there are any unfilled slots for which no "
"default value is specified, a :exc:`TypeError` exception is raised.  "
"Otherwise, the list of filled slots is used as the argument list for the "
"call."
msgstr ""

# 2c03192ceab642259048072c5847b651
#: reference/expressions.rst:663
msgid ""
"An implementation may provide built-in functions whose positional parameters "
"do not have names, even if they are 'named' for the purpose of "
"documentation, and which therefore cannot be supplied by keyword.  In "
"CPython, this is the case for functions implemented in C that use :c:func:"
"`PyArg_ParseTuple` to parse their arguments."
msgstr ""

# 07ac60a41e794236b594b7ce8a809dca
#: reference/expressions.rst:669
msgid ""
"If there are more positional arguments than there are formal parameter "
"slots, a :exc:`TypeError` exception is raised, unless a formal parameter "
"using the syntax ``*identifier`` is present; in this case, that formal "
"parameter receives a tuple containing the excess positional arguments (or an "
"empty tuple if there were no excess positional arguments)."
msgstr ""

# 1ea759136b104b7f8cd8ff5157a27d87
#: reference/expressions.rst:675
msgid ""
"If any keyword argument does not correspond to a formal parameter name, a :"
"exc:`TypeError` exception is raised, unless a formal parameter using the "
"syntax ``**identifier`` is present; in this case, that formal parameter "
"receives a dictionary containing the excess keyword arguments (using the "
"keywords as keys and the argument values as corresponding values), or a "
"(new) empty dictionary if there were no excess keyword arguments."
msgstr ""

# 143a51dc8afc48ad8919ae6edee396b1
#: reference/expressions.rst:685
msgid ""
"If the syntax ``*expression`` appears in the function call, ``expression`` "
"must evaluate to an iterable.  Elements from this iterable are treated as if "
"they were additional positional arguments; if there are positional arguments "
"*x1*, ..., *xN*, and ``expression`` evaluates to a sequence *y1*, ..., *yM*, "
"this is equivalent to a call with M+N positional arguments *x1*, ..., *xN*, "
"*y1*, ..., *yM*."
msgstr ""

# ea48206384f34d70a84d6e7617f6b37c
#: reference/expressions.rst:692
msgid ""
"A consequence of this is that although the ``*expression`` syntax may appear "
"*after* some keyword arguments, it is processed *before* the keyword "
"arguments (and the ``**expression`` argument, if any -- see below).  So::"
msgstr ""

# 734f5a5de82b4539a4e8b481f7426d08
#: reference/expressions.rst:708
msgid ""
"It is unusual for both keyword arguments and the ``*expression`` syntax to "
"be used in the same call, so in practice this confusion does not arise."
msgstr ""

# 67fae01472864746806a90af38b93924
#: reference/expressions.rst:714
msgid ""
"If the syntax ``**expression`` appears in the function call, ``expression`` "
"must evaluate to a mapping, the contents of which are treated as additional "
"keyword arguments.  In the case of a keyword appearing in both "
"``expression`` and as an explicit keyword argument, a :exc:`TypeError` "
"exception is raised."
msgstr ""

# 81c2b811503a4dfc845f211d5b563afa
#: reference/expressions.rst:719
msgid ""
"Formal parameters using the syntax ``*identifier`` or ``**identifier`` "
"cannot be used as positional argument slots or as keyword argument names."
msgstr ""

# 14873963fac64078b08aa1a1e4922705
#: reference/expressions.rst:722
msgid ""
"A call always returns some value, possibly ``None``, unless it raises an "
"exception.  How this value is computed depends on the type of the callable "
"object."
msgstr ""

# 89797c24dbd64c71b8494f80c7de171d
#: reference/expressions.rst:726
msgid "If it is---"
msgstr ""

# 7f6f01f6bcec4d62863b165352a4fb26
#: reference/expressions.rst:739
msgid "a user-defined function:"
msgstr ""

# 6ad4d87ff438434f915c590bfb5120a0
#: reference/expressions.rst:735
msgid ""
"The code block for the function is executed, passing it the argument list.  "
"The first thing the code block will do is bind the formal parameters to the "
"arguments; this is described in section :ref:`function`.  When the code "
"block executes a :keyword:`return` statement, this specifies the return "
"value of the function call."
msgstr ""

# 0b77d7555b8e47c1afe1d6bcf66da2a7
#: reference/expressions.rst:753
msgid "a built-in function or method:"
msgstr ""

# 606509bb12ef4327b79df10b2cb1528a
#: reference/expressions.rst:752
msgid ""
"The result is up to the interpreter; see :ref:`built-in-funcs` for the "
"descriptions of built-in functions and methods."
msgstr ""

# 0f78d0c778584d97aea207a5bc0de41b
#: reference/expressions.rst:760
msgid "a class object:"
msgstr ""

# 7e112489ab714d079984162d44027fae
#: reference/expressions.rst:760
msgid "A new instance of that class is returned."
msgstr ""

# cf01c1f8336c443296872b461977bfd3
#: reference/expressions.rst:770
msgid "a class instance method:"
msgstr ""

# 0ba823bbca5f4eb7ac156e6f249cd68c
#: reference/expressions.rst:768
msgid ""
"The corresponding user-defined function is called, with an argument list "
"that is one longer than the argument list of the call: the instance becomes "
"the first argument."
msgstr ""

# b9660bc1a68244059eb99aa5e715a6f2
#: reference/expressions.rst:779
msgid "a class instance:"
msgstr ""

# e35fdd5df88349028e3e77ad8283b3b1
#: reference/expressions.rst:777
msgid ""
"The class must define a :meth:`__call__` method; the effect is then the same "
"as if that method was called."
msgstr ""

# bafcf8285885411cada4734c0d58b9da
#: reference/expressions.rst:784
msgid "The power operator"
msgstr ""

# c3794650a0de4c74a94090889c42cdbb
#: reference/expressions.rst:786
msgid ""
"The power operator binds more tightly than unary operators on its left; it "
"binds less tightly than unary operators on its right.  The syntax is:"
msgstr ""

# 1903fb52d26d4a84b7539aca93126edf
#: reference/expressions.rst:792
msgid ""
"Thus, in an unparenthesized sequence of power and unary operators, the "
"operators are evaluated from right to left (this does not constrain the "
"evaluation order for the operands): ``-1**2`` results in ``-1``."
msgstr ""

# 080bec196170472594d49b7875f2bf79
#: reference/expressions.rst:796
msgid ""
"The power operator has the same semantics as the built-in :func:`pow` "
"function, when called with two arguments: it yields its left argument raised "
"to the power of its right argument.  The numeric arguments are first "
"converted to a common type, and the result is of that type."
msgstr ""

# ec550be98a5648cda8a6c26f4e3bbb2a
#: reference/expressions.rst:801
msgid ""
"For int operands, the result has the same type as the operands unless the "
"second argument is negative; in that case, all arguments are converted to "
"float and a float result is delivered. For example, ``10**2`` returns "
"``100``, but ``10**-2`` returns ``0.01``."
msgstr ""

# 362ed0a56b0e4e9190442409c387a62f
#: reference/expressions.rst:806
msgid ""
"Raising ``0.0`` to a negative power results in a :exc:`ZeroDivisionError`. "
"Raising a negative number to a fractional power results in a :class:"
"`complex` number. (In earlier versions it raised a :exc:`ValueError`.)"
msgstr ""

# e96704d443314fe39d75397011b2e7d8
#: reference/expressions.rst:814
msgid "Unary arithmetic and bitwise operations"
msgstr ""

# 924d6ce4a7a54ca6b55cc9901b90d430
#: reference/expressions.rst:820
msgid "All unary arithmetic and bitwise operations have the same priority:"
msgstr ""

# 21ec519845074de9a979c10e0fe8d9b1
#: reference/expressions.rst:829
msgid ""
"The unary ``-`` (minus) operator yields the negation of its numeric argument."
msgstr ""

# 9c2ac77225e44b8ba0b26fbd978ac92d
#: reference/expressions.rst:833
msgid "The unary ``+`` (plus) operator yields its numeric argument unchanged."
msgstr ""

# 876fe5c3d3774ae6939585c52f9d360b
#: reference/expressions.rst:838
msgid ""
"The unary ``~`` (invert) operator yields the bitwise inversion of its "
"integer argument.  The bitwise inversion of ``x`` is defined as ``-(x+1)``.  "
"It only applies to integral numbers."
msgstr ""

# ee27ef83fc524a70850c94566fb58237
#: reference/expressions.rst:844
msgid ""
"In all three cases, if the argument does not have the proper type, a :exc:"
"`TypeError` exception is raised."
msgstr ""

# 7fe64b416ccc41d68b3fa560d4d03b04
#: reference/expressions.rst:851
msgid "Binary arithmetic operations"
msgstr ""

# e19f955ceec9463d942143fe781c703a
#: reference/expressions.rst:855
msgid ""
"The binary arithmetic operations have the conventional priority levels.  "
"Note that some of these operations also apply to certain non-numeric types.  "
"Apart from the power operator, there are only two levels, one for "
"multiplicative operators and one for additive operators:"
msgstr ""

# 8b73ef6a368a442a941841c6eb791271
#: reference/expressions.rst:867
msgid ""
"The ``*`` (multiplication) operator yields the product of its arguments.  "
"The arguments must either both be numbers, or one argument must be an "
"integer and the other must be a sequence. In the former case, the numbers "
"are converted to a common type and then multiplied together.  In the latter "
"case, sequence repetition is performed; a negative repetition factor yields "
"an empty sequence."
msgstr ""

# eb581e37e15e452c97210816bee25aca
#: reference/expressions.rst:877
msgid ""
"The ``/`` (division) and ``//`` (floor division) operators yield the "
"quotient of their arguments.  The numeric arguments are first converted to a "
"common type. Integer division yields a float, while floor division of "
"integers results in an integer; the result is that of mathematical division "
"with the 'floor' function applied to the result.  Division by zero raises "
"the :exc:`ZeroDivisionError` exception."
msgstr ""

# 7c9972c16490405eabebcafa3c8efe7c
#: reference/expressions.rst:886
msgid ""
"The ``%`` (modulo) operator yields the remainder from the division of the "
"first argument by the second.  The numeric arguments are first converted to "
"a common type.  A zero right argument raises the :exc:`ZeroDivisionError` "
"exception.  The arguments may be floating point numbers, e.g., ``3.14%0.7`` "
"equals ``0.34`` (since ``3.14`` equals ``4*0.7 + 0.34``.)  The modulo "
"operator always yields a result with the same sign as its second operand (or "
"zero); the absolute value of the result is strictly smaller than the "
"absolute value of the second operand [#]_."
msgstr ""

# 46c6032a0d604d87ae309146233b2fdd
#: reference/expressions.rst:895
msgid ""
"The floor division and modulo operators are connected by the following "
"identity: ``x == (x//y)*y + (x%y)``.  Floor division and modulo are also "
"connected with the built-in function :func:`divmod`: ``divmod(x, y) == (x//"
"y, x%y)``. [#]_."
msgstr ""

# ca6c238381d74d738e0783337f665e3a
#: reference/expressions.rst:900
msgid ""
"In addition to performing the modulo operation on numbers, the ``%`` "
"operator is also overloaded by string objects to perform old-style string "
"formatting (also known as interpolation).  The syntax for string formatting "
"is described in the Python Library Reference, section :ref:`old-string-"
"formatting`."
msgstr ""

# 7be987ec406648c89b8289a1469172c6
#: reference/expressions.rst:905
msgid ""
"The floor division operator, the modulo operator, and the :func:`divmod` "
"function are not defined for complex numbers.  Instead, convert to a "
"floating point number using the :func:`abs` function if appropriate."
msgstr ""

# f72a24c97eb04b4f890a4407beafd793
#: reference/expressions.rst:911
msgid ""
"The ``+`` (addition) operator yields the sum of its arguments.  The "
"arguments must either both be numbers or both sequences of the same type.  "
"In the former case, the numbers are converted to a common type and then "
"added together.  In the latter case, the sequences are concatenated."
msgstr ""

# f3bac1d1a5214a26a4488cc1f94a3695
#: reference/expressions.rst:918
msgid ""
"The ``-`` (subtraction) operator yields the difference of its arguments.  "
"The numeric arguments are first converted to a common type."
msgstr ""

# e0381e16a3304770934bfd6b102aed24
#: reference/expressions.rst:925
msgid "Shifting operations"
msgstr ""

# 8b76210eedda4be8b3b381250b795a3a
#: reference/expressions.rst:929
msgid ""
"The shifting operations have lower priority than the arithmetic operations:"
msgstr ""

# 6c5ebd0dcd4f455a89512c2dcb95d045
#: reference/expressions.rst:934
msgid ""
"These operators accept integers as arguments.  They shift the first argument "
"to the left or right by the number of bits given by the second argument."
msgstr ""

# 3959ecc5cff54cc59701295f0097f266
#: reference/expressions.rst:939
msgid ""
"A right shift by *n* bits is defined as division by ``pow(2,n)``.  A left "
"shift by *n* bits is defined as multiplication with ``pow(2,n)``."
msgstr ""

# 837f9ab2ad30421dbe3b25fa7639c06f
#: reference/expressions.rst:944
msgid ""
"In the current implementation, the right-hand operand is required to be at "
"most :attr:`sys.maxsize`.  If the right-hand operand is larger than :attr:"
"`sys.maxsize` an :exc:`OverflowError` exception is raised."
msgstr ""

# abd5a3be0d1a4501a7691f921c8345af
#: reference/expressions.rst:951
msgid "Binary bitwise operations"
msgstr ""

# fcfbb58d71684381b2e469f2bc74a715
#: reference/expressions.rst:955
msgid "Each of the three bitwise operations has a different priority level:"
msgstr ""

# 3a59dc5088924491b655fdf8089dc5d4
#: reference/expressions.rst:964
msgid ""
"The ``&`` operator yields the bitwise AND of its arguments, which must be "
"integers."
msgstr ""

# 20c41247a9da411bbe5a0eef67d35be1
#: reference/expressions.rst:971
msgid ""
"The ``^`` operator yields the bitwise XOR (exclusive OR) of its arguments, "
"which must be integers."
msgstr ""

# 2aa5e5cf9f0c4ed2927e232f24a50cf8
#: reference/expressions.rst:978
msgid ""
"The ``|`` operator yields the bitwise (inclusive) OR of its arguments, which "
"must be integers."
msgstr ""

# a05eb027af6a4148b0682eb92d600c44
#: reference/expressions.rst:989
msgid "Comparisons"
msgstr ""

# 909f0ffcfb8649d0987234384a39f424
#: reference/expressions.rst:995
msgid ""
"Unlike C, all comparison operations in Python have the same priority, which "
"is lower than that of any arithmetic, shifting or bitwise operation.  Also "
"unlike C, expressions like ``a < b < c`` have the interpretation that is "
"conventional in mathematics:"
msgstr ""

# 456aa141a98c4af9b928c055d30cfa23
#: reference/expressions.rst:1005
msgid "Comparisons yield boolean values: ``True`` or ``False``."
msgstr ""

# 3b41c18162294f83821d58ced2df0ac5
#: reference/expressions.rst:1009
msgid ""
"Comparisons can be chained arbitrarily, e.g., ``x < y <= z`` is equivalent "
"to ``x < y and y <= z``, except that ``y`` is evaluated only once (but in "
"both cases ``z`` is not evaluated at all when ``x < y`` is found to be "
"false)."
msgstr ""

# 13c5cccd162542aa8fb0c9accb3f3870
#: reference/expressions.rst:1013
msgid ""
"Formally, if *a*, *b*, *c*, ..., *y*, *z* are expressions and *op1*, "
"*op2*, ..., *opN* are comparison operators, then ``a op1 b op2 c ... y opN "
"z`` is equivalent to ``a op1 b and b op2 c and ... y opN z``, except that "
"each expression is evaluated at most once."
msgstr ""

# fbc08b386c4d4c5993adb5ff8f2a897c
#: reference/expressions.rst:1018
msgid ""
"Note that ``a op1 b op2 c`` doesn't imply any kind of comparison between *a* "
"and *c*, so that, e.g., ``x < y > z`` is perfectly legal (though perhaps not "
"pretty)."
msgstr ""

# 885ca2d57dc848ecbef85fd936577d54
#: reference/expressions.rst:1022
msgid ""
"The operators ``<``, ``>``, ``==``, ``>=``, ``<=``, and ``!=`` compare the "
"values of two objects.  The objects need not have the same type. If both are "
"numbers, they are converted to a common type.  Otherwise, the ``==`` and ``!"
"=`` operators *always* consider objects of different types to be unequal, "
"while the ``<``, ``>``, ``>=`` and ``<=`` operators raise a :exc:`TypeError` "
"when comparing objects of different types that do not implement these "
"operators for the given pair of types.  You can control comparison behavior "
"of objects of non-built-in types by defining rich comparison methods like :"
"meth:`__gt__`, described in section :ref:`customization`."
msgstr ""

# 5632c66734254c7abdb96492154977d6
#: reference/expressions.rst:1032
msgid "Comparison of objects of the same type depends on the type:"
msgstr ""

# cfb43139bf504858a77d0437aeab7c03
#: reference/expressions.rst:1034
msgid "Numbers are compared arithmetically."
msgstr ""

# 2c55aa2ab5dc49b78bc69bd8034f603d
#: reference/expressions.rst:1036
msgid ""
"The values :const:`float('NaN')` and :const:`Decimal('NaN')` are special. "
"The are identical to themselves, ``x is x`` but are not equal to themselves, "
"``x != x``.  Additionally, comparing any value to a not-a-number value will "
"return ``False``.  For example, both ``3 < float('NaN')`` and ``float('NaN') "
"< 3`` will return ``False``."
msgstr ""

# 792b047d34444340a5c5b9fb8da2ed9a
#: reference/expressions.rst:1042
msgid ""
"Bytes objects are compared lexicographically using the numeric values of "
"their elements."
msgstr ""

# edaeeff9247b4d19a30df4ee6248944c
#: reference/expressions.rst:1045
msgid ""
"Strings are compared lexicographically using the numeric equivalents (the "
"result of the built-in function :func:`ord`) of their characters. [#]_ "
"String and bytes object can't be compared!"
msgstr ""

# 0aad79d01e49482cb42f10b2235afc99
#: reference/expressions.rst:1049
msgid ""
"Tuples and lists are compared lexicographically using comparison of "
"corresponding elements.  This means that to compare equal, each element must "
"compare equal and the two sequences must be of the same type and have the "
"same length."
msgstr ""

# f7c8780942df4173a8446fd6d8a565b3
#: reference/expressions.rst:1054
msgid ""
"If not equal, the sequences are ordered the same as their first differing "
"elements.  For example, ``[1,2,x] <= [1,2,y]`` has the same value as ``x <= "
"y``.  If the corresponding element does not exist, the shorter sequence is "
"ordered first (for example, ``[1,2] < [1,2,3]``)."
msgstr ""

# 9df722d1c73a4642a608e8120d24c015
#: reference/expressions.rst:1059
msgid ""
"Mappings (dictionaries) compare equal if and only if they have the same "
"``(key, value)`` pairs. Order comparisons ``('<', '<=', '>=', '>')`` raise :"
"exc:`TypeError`."
msgstr ""

# 5a8f5590a5124da6b23c10e095679397
#: reference/expressions.rst:1063
msgid ""
"Sets and frozensets define comparison operators to mean subset and superset "
"tests.  Those relations do not define total orderings (the two sets ``{1,2}"
"`` and {2,3} are not equal, nor subsets of one another, nor supersets of one "
"another).  Accordingly, sets are not appropriate arguments for functions "
"which depend on total ordering.  For example, :func:`min`, :func:`max`, and :"
"func:`sorted` produce undefined results given a list of sets as inputs."
msgstr ""

# b816e5b60023465183c8b3fc0550016d
#: reference/expressions.rst:1070
msgid ""
"Most other objects of built-in types compare unequal unless they are the "
"same object; the choice whether one object is considered smaller or larger "
"than another one is made arbitrarily but consistently within one execution "
"of a program."
msgstr ""

# c095051aacb74426944d3b9d360bf87e
#: reference/expressions.rst:1075
msgid ""
"Comparison of objects of the differing types depends on whether either of "
"the types provide explicit support for the comparison.  Most numeric types "
"can be compared with one another.  When cross-type comparison is not "
"supported, the comparison method returns ``NotImplemented``."
msgstr ""

# 832f182546834d6c8c2b8683ed2d2950
#: reference/expressions.rst:1082
msgid ""
"The operators :keyword:`in` and :keyword:`not in` test for membership.  ``x "
"in s`` evaluates to true if *x* is a member of *s*, and false otherwise.  "
"``x not in s`` returns the negation of ``x in s``.  All built-in sequences "
"and set types support this as well as dictionary, for which :keyword:`in` "
"tests whether a the dictionary has a given key. For container types such as "
"list, tuple, set, frozenset, dict, or collections.deque, the expression ``x "
"in y`` is equivalent to ``any(x is e or x == e for e in y)``."
msgstr ""

# d39e3da3bbcc4cb5b8041fa365cb2064
#: reference/expressions.rst:1090
msgid ""
"For the string and bytes types, ``x in y`` is true if and only if *x* is a "
"substring of *y*.  An equivalent test is ``y.find(x) != -1``.  Empty strings "
"are always considered to be a substring of any other string, so ``\"\" in "
"\"abc\"`` will return ``True``."
msgstr ""

# 27f33dee7eac47f69b8ddf523aede282
#: reference/expressions.rst:1095
msgid ""
"For user-defined classes which define the :meth:`__contains__` method, ``x "
"in y`` is true if and only if ``y.__contains__(x)`` is true."
msgstr ""

# eca513d84fe14887bc816803595074ff
#: reference/expressions.rst:1098
msgid ""
"For user-defined classes which do not define :meth:`__contains__` but do "
"define :meth:`__iter__`, ``x in y`` is true if some value ``z`` with ``x == "
"z`` is produced while iterating over ``y``.  If an exception is raised "
"during the iteration, it is as if :keyword:`in` raised that exception."
msgstr ""

# 120c0c9e11604f5a8358757608d56f08
#: reference/expressions.rst:1103
msgid ""
"Lastly, the old-style iteration protocol is tried: if a class defines :meth:"
"`__getitem__`, ``x in y`` is true if and only if there is a non-negative "
"integer index *i* such that ``x == y[i]``, and all lower integer indices do "
"not raise :exc:`IndexError` exception.  (If any other exception is raised, "
"it is as if :keyword:`in` raised that exception)."
msgstr ""

# c1c9091ae48e41c58f15f46ba986fe19
#: reference/expressions.rst:1115
msgid ""
"The operator :keyword:`not in` is defined to have the inverse true value of :"
"keyword:`in`."
msgstr ""

# 36bf7f25e2d64690a3e8cd16c80ee8b2
#: reference/expressions.rst:1123
msgid ""
"The operators :keyword:`is` and :keyword:`is not` test for object identity: "
"``x is y`` is true if and only if *x* and *y* are the same object.  ``x is "
"not y`` yields the inverse truth value. [#]_"
msgstr ""

# ef70098bab5a4dcb9f67a02b48a7dde3
#: reference/expressions.rst:1134
msgid "Boolean operations"
msgstr ""

# 841656af40794359a207a794dc46e73c
#: reference/expressions.rst:1145
msgid ""
"In the context of Boolean operations, and also when expressions are used by "
"control flow statements, the following values are interpreted as false: "
"``False``, ``None``, numeric zero of all types, and empty strings and "
"containers (including strings, tuples, lists, dictionaries, sets and "
"frozensets).  All other values are interpreted as true.  User-defined "
"objects can customize their truth value by providing a :meth:`__bool__` "
"method."
msgstr ""

# 7087fe4d7b4a487fa5087ac85f54d059
#: reference/expressions.rst:1154
msgid ""
"The operator :keyword:`not` yields ``True`` if its argument is false, "
"``False`` otherwise."
msgstr ""

# 4c1bac3c42b94d2194c2cbc63ae095a8
#: reference/expressions.rst:1159
msgid ""
"The expression ``x and y`` first evaluates *x*; if *x* is false, its value "
"is returned; otherwise, *y* is evaluated and the resulting value is returned."
msgstr ""

# 3036ef6506eb4e889a2ae172c747a266
#: reference/expressions.rst:1164
msgid ""
"The expression ``x or y`` first evaluates *x*; if *x* is true, its value is "
"returned; otherwise, *y* is evaluated and the resulting value is returned."
msgstr ""

# 041a786a908b43eda36217f25713ffbb
#: reference/expressions.rst:1167
msgid ""
"(Note that neither :keyword:`and` nor :keyword:`or` restrict the value and "
"type they return to ``False`` and ``True``, but rather return the last "
"evaluated argument.  This is sometimes useful, e.g., if ``s`` is a string "
"that should be replaced by a default value if it is empty, the expression "
"``s or 'foo'`` yields the desired value.  Because :keyword:`not` has to "
"invent a value anyway, it does not bother to return a value of the same type "
"as its argument, so e.g., ``not 'foo'`` yields ``False``, not ``''``.)"
msgstr ""

# afdd4e1c119a49a38434638cf2c6e167
#: reference/expressions.rst:1177
msgid "Conditional expressions"
msgstr ""

# a0227d4192b049beacd12f0d1fabd34d
#: reference/expressions.rst:1188
msgid ""
"Conditional expressions (sometimes called a \"ternary operator\") have the "
"lowest priority of all Python operations."
msgstr ""

# 6434898b156443f78001f61fcc250cd6
#: reference/expressions.rst:1191
msgid ""
"The expression ``x if C else y`` first evaluates the condition, *C* (*not* "
"*x*); if *C* is true, *x* is evaluated and its value is returned; otherwise, "
"*y* is evaluated and its value is returned."
msgstr ""

# 49a037d2eea94882a3473d11a4b03342
#: reference/expressions.rst:1195
msgid "See :pep:`308` for more details about conditional expressions."
msgstr ""

# bbb7ff8d4f2847449e1f7301a1b5796b
#: reference/expressions.rst:1202
msgid "Lambdas"
msgstr ""

# ad53e8ac010b4f1bb482239ba1a0814d
#: reference/expressions.rst:1213
msgid ""
"Lambda forms (lambda expressions) have the same syntactic position as "
"expressions.  They are a shorthand to create anonymous functions; the "
"expression ``lambda arguments: expression`` yields a function object.  The "
"unnamed object behaves like a function object defined with ::"
msgstr ""

# da1a117f8cc04f849d90dc34705e8a02
#: reference/expressions.rst:1221
msgid ""
"See section :ref:`function` for the syntax of parameter lists.  Note that "
"functions created with lambda forms cannot contain statements or annotations."
msgstr ""

# 4bd55a041ab148feab2d9ed9dcda6a33
#: reference/expressions.rst:1228
msgid "Expression lists"
msgstr ""

# 38ed14c18acb410b853106eae9a335bd
#: reference/expressions.rst:1237
msgid ""
"An expression list containing at least one comma yields a tuple.  The length "
"of the tuple is the number of expressions in the list.  The expressions are "
"evaluated from left to right."
msgstr ""

# 0a14819b88b44946b29f9e6e923952ce
#: reference/expressions.rst:1243
msgid ""
"The trailing comma is required only to create a single tuple (a.k.a. a "
"*singleton*); it is optional in all other cases.  A single expression "
"without a trailing comma doesn't create a tuple, but rather yields the value "
"of that expression. (To create an empty tuple, use an empty pair of "
"parentheses: ``()``.)"
msgstr ""

# c7d4efe2ab62492ab3460b7e40dff80d
#: reference/expressions.rst:1253
msgid "Evaluation order"
msgstr ""

# c64284f4e67844a1bfbc4dbab0d7ffdc
#: reference/expressions.rst:1257
msgid ""
"Python evaluates expressions from left to right.  Notice that while "
"evaluating an assignment, the right-hand side is evaluated before the left-"
"hand side."
msgstr ""

# e8c4992d909f4b4984668fa34d6429c7
#: reference/expressions.rst:1260
msgid ""
"In the following lines, expressions will be evaluated in the arithmetic "
"order of their suffixes::"
msgstr ""

# 5ae16983b7e54e8d8ed602f550dde2c7
#: reference/expressions.rst:1274
msgid "Operator precedence"
msgstr ""

# 9362b778d06c482283bd0f33807a6a2a
#: reference/expressions.rst:1278
msgid ""
"The following table summarizes the operator precedences in Python, from "
"lowest precedence (least binding) to highest precedence (most binding).  "
"Operators in the same box have the same precedence.  Unless the syntax is "
"explicitly given, operators are binary.  Operators in the same box group "
"left to right (except for comparisons, including tests, which all have the "
"same precedence and chain from left to right --- see section :ref:"
"`comparisons` --- and exponentiation, which groups from right to left)."
msgstr ""

# 11acfbe4c86949058852c1eb7f4d53dd
#: reference/expressions.rst:1288
msgid "Operator"
msgstr ""

# 22ace3b733074afaa9063510c73a83e6
#: reference/expressions.rst:1288
msgid "Description"
msgstr ""

# bf1f44addd974d86b701096ae59e646c
#: reference/expressions.rst:1290
msgid ":keyword:`lambda`"
msgstr ""

# 01e92da280ac49d6a1e914568493e821
#: reference/expressions.rst:1290
msgid "Lambda expression"
msgstr ""

# e6f452c527c34670b6603faeea01f2f9
#: reference/expressions.rst:1292
msgid ":keyword:`if` -- :keyword:`else`"
msgstr ""

# 3b3657afd9fb4b8184eeb01a17dff70d
#: reference/expressions.rst:1292
msgid "Conditional expression"
msgstr ""

# 84cde9c2b1ad4759a8897c206899ecc1
#: reference/expressions.rst:1294
msgid ":keyword:`or`"
msgstr ""

# 596923a456c944329cdbcc0384252eef
#: reference/expressions.rst:1294
msgid "Boolean OR"
msgstr ""

# 238f26f3ff1d400db409e2a46d31c1de
#: reference/expressions.rst:1296
msgid ":keyword:`and`"
msgstr ""

# 1b754091ee0e4dadb65531993998342c
#: reference/expressions.rst:1296
msgid "Boolean AND"
msgstr ""

# 3676ea753d504470b7c84e825f7f2499
#: reference/expressions.rst:1298
msgid ":keyword:`not` ``x``"
msgstr ""

# d8697937f0964db88d24e3e1949a4928
#: reference/expressions.rst:1298
msgid "Boolean NOT"
msgstr ""

# f6de0617fe4647dbaf3f26ac8c9d41c0
#: reference/expressions.rst:1300
msgid ""
":keyword:`in`, :keyword:`not in`, :keyword:`is`, :keyword:`is not`, ``<``, "
"``<=``, ``>``, ``>=``, ``!=``, ``==``"
msgstr ""

# 30488e3b5eed4dfe857abaeaae73dd16
#: reference/expressions.rst:1300
msgid "Comparisons, including membership tests and identity tests,"
msgstr ""

# f21d29d9a5bd40368f914b7498568a2c
#: reference/expressions.rst:1304
msgid "``|``"
msgstr ""

# d8e9e2e5c5914ecc8f79955ba8c7208c
#: reference/expressions.rst:1304
msgid "Bitwise OR"
msgstr ""

# b030a6bb04334055829525cd53d8c08f
#: reference/expressions.rst:1306
msgid "``^``"
msgstr ""

# 2fe8f4e8124642099b82307918676141
#: reference/expressions.rst:1306
msgid "Bitwise XOR"
msgstr ""

# 6dac70b6b842425b98aef0c583526ac5
#: reference/expressions.rst:1308
msgid "``&``"
msgstr ""

# 10ed660aed804470bc522ab2ec3a9253
#: reference/expressions.rst:1308
msgid "Bitwise AND"
msgstr ""

# 7ce0462518424e04a7ee74dbb1232c45
#: reference/expressions.rst:1310
msgid "``<<``, ``>>``"
msgstr ""

# 110f2709708642e9ad245b09ae7696b6
#: reference/expressions.rst:1310
msgid "Shifts"
msgstr ""

# d4c3600c2f084ddca2dc5279a70ee4d7
#: reference/expressions.rst:1312
msgid "``+``, ``-``"
msgstr ""

# 772dee2743ba410a981d1cdb8a157a8b
#: reference/expressions.rst:1312
msgid "Addition and subtraction"
msgstr ""

# 1bc9be029dbc4e75ae5dc2a4dfd06ad4
#: reference/expressions.rst:1314
msgid "``*``, ``/``, ``//``, ``%``"
msgstr ""

# dbbc046c7afb4770bb12d363f1abd5c4
#: reference/expressions.rst:1314
msgid "Multiplication, division, remainder [#]_"
msgstr ""

# ad86fe9117734e90bfeb677ceba0e29c
#: reference/expressions.rst:1317
msgid "``+x``, ``-x``, ``~x``"
msgstr ""

# d4c8bf6fa0d4404b84e1815428f65e19
#: reference/expressions.rst:1317
msgid "Positive, negative, bitwise NOT"
msgstr ""

# 1e3b7a11bd7b4249ae111ae9cfba5b35
#: reference/expressions.rst:1319
msgid "``**``"
msgstr ""

# 544da978acbf4f769d9475a718d93749
#: reference/expressions.rst:1319
msgid "Exponentiation [#]_"
msgstr ""

# 514bdba5ab8342ecbb7dc674ffe2e1db
#: reference/expressions.rst:1321
msgid "``x[index]``, ``x[index:index]``, ``x(arguments...)``, ``x.attribute``"
msgstr ""

# e5e8122bb92b449fb17af9967f7db1d3
#: reference/expressions.rst:1321
msgid "Subscription, slicing, call, attribute reference"
msgstr ""

# ea283298f16d438da3f0e7f223fc33ea
#: reference/expressions.rst:1324
msgid ""
"``(expressions...)``, ``[expressions...]``, ``{key: value...}``, "
"``{expressions...}``"
msgstr ""

# 4f869c05814849379c7b2354ce9d4c8e
#: reference/expressions.rst:1324
msgid "Binding or tuple display, list display, dictionary display, set display"
msgstr ""

# fe137f30f93a457aaa53de706ef7b1df
#: reference/expressions.rst:1333
msgid ""
"While ``abs(x%y) < abs(y)`` is true mathematically, for floats it may not be "
"true numerically due to roundoff.  For example, and assuming a platform on "
"which a Python float is an IEEE 754 double-precision number, in order that "
"``-1e-100 % 1e100`` have the same sign as ``1e100``, the computed result is "
"``-1e-100 + 1e100``, which is numerically exactly equal to ``1e100``.  The "
"function :func:`math.fmod` returns a result whose sign matches the sign of "
"the first argument instead, and so returns ``-1e-100`` in this case. Which "
"approach is more appropriate depends on the application."
msgstr ""

# e1ed3031341f45cb854a7315fb8f286e
#: reference/expressions.rst:1342
msgid ""
"If x is very close to an exact integer multiple of y, it's possible for ``x//"
"y`` to be one larger than ``(x-x%y)//y`` due to rounding.  In such cases, "
"Python returns the latter result, in order to preserve that ``divmod(x,y)[0] "
"* y + x % y`` be very close to ``x``."
msgstr ""

# f0569c90575548e38d540dd130cfe92c
#: reference/expressions.rst:1347
msgid ""
"While comparisons between strings make sense at the byte level, they may be "
"counter-intuitive to users.  For example, the strings ``\"\\u00C7\"`` and ``"
"\"\\u0327\\u0043\"`` compare differently, even though they both represent "
"the same unicode character (LATIN CAPITAL LETTER C WITH CEDILLA).  To "
"compare strings in a human recognizable way, compare using :func:"
"`unicodedata.normalize`."
msgstr ""

# be66404e231c41d99a4ddd61f22dede0
#: reference/expressions.rst:1354
msgid ""
"Due to automatic garbage-collection, free lists, and the dynamic nature of "
"descriptors, you may notice seemingly unusual behaviour in certain uses of "
"the :keyword:`is` operator, like those involving comparisons between "
"instance methods, or constants.  Check their documentation for more info."
msgstr ""

# 6197f348d0114d13a07fc833aac8891e
#: reference/expressions.rst:1359
msgid ""
"The ``%`` operator is also used for string formatting; the same precedence "
"applies."
msgstr ""

# 0fb8a0ec24e64f1286b1dc6b04f8dfb0
#: reference/expressions.rst:1362
msgid ""
"The power operator ``**`` binds less tightly than an arithmetic or bitwise "
"unary operator on its right, that is, ``2**-1`` is ``0.5``."
msgstr ""

# 7ea9eed68be3466eb90e47a2af6d2eba
#: reference/grammar.rst:2
msgid "Full Grammar specification"
msgstr ""

# d32adb1c51924de1aeba6806e25c2691
#: reference/grammar.rst:4
msgid ""
"This is the full Python grammar, as it is read by the parser generator and "
"used to parse Python source files:"
msgstr ""

# 5b9984a2a16d448eb87bbfefddb74bd3
#: reference/index.rst:5
msgid "The Python Language Reference"
msgstr ""

# 7574cc65a7e447488fc3d3cc9947bbdc
#: reference/index.rst:7
msgid ""
"This reference manual describes the syntax and \"core semantics\" of the "
"language. It is terse, but attempts to be exact and complete. The semantics "
"of non-essential built-in object types and of the built-in functions and "
"modules are described in :ref:`library-index`. For an informal introduction "
"to the language, see :ref:`tutorial-index`. For C or C++ programmers, two "
"additional manuals exist: :ref:`extending-index` describes the high-level "
"picture of how to write a Python extension module, and the :ref:`c-api-"
"index` describes the interfaces available to C/C++ programmers in detail."
msgstr ""

# 4fb5fc7a6f74432394f1d308fd42b6f8
#: reference/introduction.rst:6
msgid "Introduction"
msgstr "Introduction"

# 9d6e461c68f74f47b9120ce8ea467891
#: reference/introduction.rst:8
msgid ""
"This reference manual describes the Python programming language. It is not "
"intended as a tutorial."
msgstr ""

# f37deb70344a4495940ed2190306f827
#: reference/introduction.rst:11
msgid ""
"While I am trying to be as precise as possible, I chose to use English "
"rather than formal specifications for everything except syntax and lexical "
"analysis. This should make the document more understandable to the average "
"reader, but will leave room for ambiguities. Consequently, if you were "
"coming from Mars and tried to re-implement Python from this document alone, "
"you might have to guess things and in fact you would probably end up "
"implementing quite a different language. On the other hand, if you are using "
"Python and wonder what the precise rules about a particular area of the "
"language are, you should definitely be able to find them here. If you would "
"like to see a more formal definition of the language, maybe you could "
"volunteer your time --- or invent a cloning machine :-)."
msgstr ""

# 09d6ca3d33104814b66ad8c80c1750d9
#: reference/introduction.rst:23
msgid ""
"It is dangerous to add too many implementation details to a language "
"reference document --- the implementation may change, and other "
"implementations of the same language may work differently.  On the other "
"hand, CPython is the one Python implementation in widespread use (although "
"alternate implementations continue to gain support), and its particular "
"quirks are sometimes worth being mentioned, especially where the "
"implementation imposes additional limitations. Therefore, you'll find short "
"\"implementation notes\" sprinkled throughout the text."
msgstr ""

# 58d045f8fdd94520a43aff8cf9ad9b81
#: reference/introduction.rst:32
msgid ""
"Every Python implementation comes with a number of built-in and standard "
"modules.  These are documented in :ref:`library-index`.  A few built-in "
"modules are mentioned when they interact in a significant way with the "
"language definition."
msgstr ""

# f86e6d5426c646ed94dc9dd7765d4eee
#: reference/introduction.rst:41
msgid "Alternate Implementations"
msgstr ""

# 01b4c755ad1f412fa9ab57517a943620
#: reference/introduction.rst:43
msgid ""
"Though there is one Python implementation which is by far the most popular, "
"there are some alternate implementations which are of particular interest to "
"different audiences."
msgstr ""

# b2350eca88c64efaa022d8eb1fb17cf5
#: reference/introduction.rst:47
msgid "Known implementations include:"
msgstr ""

# 326dbde79758418cb276a4c0e6479bad
#: reference/introduction.rst:51
msgid "CPython"
msgstr ""

# c48ab5ba96ec4543a055c96374daed88
#: reference/introduction.rst:50
msgid ""
"This is the original and most-maintained implementation of Python, written "
"in C. New language features generally appear here first."
msgstr ""

# d522baec1c5749faad071fc32b2a9fcb
#: reference/introduction.rst:57
msgid "Jython"
msgstr ""

# e96e526ecc224837809cffa2388855c8
#: reference/introduction.rst:54
msgid ""
"Python implemented in Java.  This implementation can be used as a scripting "
"language for Java applications, or can be used to create applications using "
"the Java class libraries.  It is also often used to create tests for Java "
"libraries. More information can be found at `the Jython website <http://www."
"jython.org/>`_."
msgstr ""

# 9cee308a889d406a94b5555af2f2c069
#: reference/introduction.rst:63
msgid "Python for .NET"
msgstr ""

# 79f3de79b2074d1287e14829974f3fd9
#: reference/introduction.rst:60
msgid ""
"This implementation actually uses the CPython implementation, but is a "
"managed .NET application and makes .NET libraries available.  It was created "
"by Brian Lloyd.  For more information, see the `Python for .NET home page "
"<http://pythonnet.sourceforge.net>`_."
msgstr ""

# ba10fe89d2d94a948cded6094438ecbd
#: reference/introduction.rst:69
msgid "IronPython"
msgstr ""

# d20e7c80d52f42b5a9f34a7f52417b56
#: reference/introduction.rst:66
msgid ""
"An alternate Python for .NET.  Unlike Python.NET, this is a complete Python "
"implementation that generates IL, and compiles Python code directly to .NET "
"assemblies.  It was created by Jim Hugunin, the original creator of Jython.  "
"For more information, see `the IronPython website <http://www.ironpython.net/"
">`_."
msgstr ""

# 08ccc7c8822142c4ad1bdfdbd82f60bb
#: reference/introduction.rst:77
msgid "PyPy"
msgstr ""

# c8b0fd7e3d4c466bbfdc0a399d8af031
#: reference/introduction.rst:72
msgid ""
"An implementation of Python written completely in Python. It supports "
"several advanced features not found in other implementations like stackless "
"support and a Just in Time compiler. One of the goals of the project is to "
"encourage experimentation with the language itself by making it easier to "
"modify the interpreter (since it is written in Python).  Additional "
"information is available on `the PyPy project's home page <http://pypy.org/"
">`_."
msgstr ""

# 3df89a19c36546da9ae81cf9a540c74e
#: reference/introduction.rst:79
msgid ""
"Each of these implementations varies in some way from the language as "
"documented in this manual, or introduces specific information beyond what's "
"covered in the standard Python documentation.  Please refer to the "
"implementation-specific documentation to determine what else you need to "
"know about the specific implementation you're using."
msgstr ""

# 7f75d8b1d63f4f179adfba4ad252c00a
#: reference/introduction.rst:89
msgid "Notation"
msgstr ""

# 1a06048f8f83415db47cda8f5fddff38
#: reference/introduction.rst:93
msgid ""
"The descriptions of lexical analysis and syntax use a modified BNF grammar "
"notation.  This uses the following style of definition:"
msgstr ""

# a2dc7223568647cabff7c99d9b4b6d3f
#: reference/introduction.rst:100
msgid ""
"The first line says that a ``name`` is an ``lc_letter`` followed by a "
"sequence of zero or more ``lc_letter``\\ s and underscores.  An "
"``lc_letter`` in turn is any of the single characters ``'a'`` through "
"``'z'``.  (This rule is actually adhered to for the names defined in lexical "
"and grammar rules in this document.)"
msgstr ""

# d0f322341b5d447eb0a7656a7bfba3c8
#: reference/introduction.rst:105
msgid ""
"Each rule begins with a name (which is the name defined by the rule) and ``::"
"=``.  A vertical bar (``|``) is used to separate alternatives; it is the "
"least binding operator in this notation.  A star (``*``) means zero or more "
"repetitions of the preceding item; likewise, a plus (``+``) means one or "
"more repetitions, and a phrase enclosed in square brackets (``[ ]``) means "
"zero or one occurrences (in other words, the enclosed phrase is optional).  "
"The ``*`` and ``+`` operators bind as tightly as possible; parentheses are "
"used for grouping.  Literal strings are enclosed in quotes.  White space is "
"only meaningful to separate tokens. Rules are normally contained on a single "
"line; rules with many alternatives may be formatted alternatively with each "
"line after the first beginning with a vertical bar."
msgstr ""

# 6ef3b6971e644686bbcb5a5e7146068e
#: reference/introduction.rst:119
msgid ""
"In lexical definitions (as the example above), two more conventions are "
"used: Two literal characters separated by three dots mean a choice of any "
"single character in the given (inclusive) range of ASCII characters.  A "
"phrase between angular brackets (``<...>``) gives an informal description of "
"the symbol defined; e.g., this could be used to describe the notion of "
"'control character' if needed."
msgstr ""

# 755acc404ce2484eb74fa765973eadad
#: reference/introduction.rst:126
msgid ""
"Even though the notation used is almost the same, there is a big difference "
"between the meaning of lexical and syntactic definitions: a lexical "
"definition operates on the individual characters of the input source, while "
"a syntax definition operates on the stream of tokens generated by the "
"lexical analysis. All uses of BNF in the next chapter (\"Lexical Analysis\") "
"are lexical definitions; uses in subsequent chapters are syntactic "
"definitions."
msgstr ""

# 515f87feab6e4ac781f840fd9b8e9ddf
#: reference/lexical_analysis.rst:6
msgid "Lexical analysis"
msgstr ""

# 257cc5c0abb14b0786c8a6b8b1d2dc50
#: reference/lexical_analysis.rst:10
msgid ""
"A Python program is read by a *parser*.  Input to the parser is a stream of "
"*tokens*, generated by the *lexical analyzer*.  This chapter describes how "
"the lexical analyzer breaks a file into tokens."
msgstr ""

# dcaa73963d44415b862ab89076746beb
#: reference/lexical_analysis.rst:14
msgid ""
"Python reads program text as Unicode code points; the encoding of a source "
"file can be given by an encoding declaration and defaults to UTF-8, see :pep:"
"`3120` for details.  If the source file cannot be decoded, a :exc:"
"`SyntaxError` is raised."
msgstr ""

# c0d1acca8f1648a883ed6223282d9f41
#: reference/lexical_analysis.rst:23
msgid "Line structure"
msgstr ""

# 9355b34fea2f4dcdab42e649239a74a2
#: reference/lexical_analysis.rst:27
msgid "A Python program is divided into a number of *logical lines*."
msgstr ""

# 1292c3c77c814ad9a7e4a7e45b906a76
#: reference/lexical_analysis.rst:33
msgid "Logical lines"
msgstr ""

# 221bc4ed6e2a43deb166a1c5ac3c3796
#: reference/lexical_analysis.rst:37
msgid ""
"The end of a logical line is represented by the token NEWLINE.  Statements "
"cannot cross logical line boundaries except where NEWLINE is allowed by the "
"syntax (e.g., between statements in compound statements). A logical line is "
"constructed from one or more *physical lines* by following the explicit or "
"implicit *line joining* rules."
msgstr ""

# c2a3ea9a03cf42eca507d54691d752d3
#: reference/lexical_analysis.rst:47
msgid "Physical lines"
msgstr ""

# 688b121b1d1e40f691673adcc173399c
#: reference/lexical_analysis.rst:49
msgid ""
"A physical line is a sequence of characters terminated by an end-of-line "
"sequence.  In source files, any of the standard platform line termination "
"sequences can be used - the Unix form using ASCII LF (linefeed), the Windows "
"form using the ASCII sequence CR LF (return followed by linefeed), or the "
"old Macintosh form using the ASCII CR (return) character.  All of these "
"forms can be used equally, regardless of platform."
msgstr ""

# c5da808dbab44bfeb84fc0c5d9e51383
#: reference/lexical_analysis.rst:56
msgid ""
"When embedding Python, source code strings should be passed to Python APIs "
"using the standard C conventions for newline characters (the ``\\n`` "
"character, representing ASCII LF, is the line terminator)."
msgstr ""

# d48b5eedfeeb434fb4a42d2d8e41b65a
#: reference/lexical_analysis.rst:64
msgid "Comments"
msgstr ""

# b3e367e7a8e946628f7fdafb924ddb72
#: reference/lexical_analysis.rst:68
msgid ""
"A comment starts with a hash character (``#``) that is not part of a string "
"literal, and ends at the end of the physical line.  A comment signifies the "
"end of the logical line unless the implicit line joining rules are invoked. "
"Comments are ignored by the syntax; they are not tokens."
msgstr ""

# e5e6f829e5b84a6698500341b05636a1
#: reference/lexical_analysis.rst:77
msgid "Encoding declarations"
msgstr ""

# 5084a8c84710420c9d5b7998d8b956d7
#: reference/lexical_analysis.rst:81
msgid ""
"If a comment in the first or second line of the Python script matches the "
"regular expression ``coding[=:]\\s*([-\\w.]+)``, this comment is processed "
"as an encoding declaration; the first group of this expression names the "
"encoding of the source code file. The recommended forms of this expression "
"are ::"
msgstr ""

# 6a0e23d57c064c7d879f01eb450f902f
#: reference/lexical_analysis.rst:88
msgid "which is recognized also by GNU Emacs, and ::"
msgstr ""

# f43acb73b13141debfdff8f55ebbdb25
#: reference/lexical_analysis.rst:92
msgid "which is recognized by Bram Moolenaar's VIM."
msgstr ""

# c92031ce193042188275d34a362f0a8e
#: reference/lexical_analysis.rst:94
msgid ""
"If no encoding declaration is found, the default encoding is UTF-8.  In "
"addition, if the first bytes of the file are the UTF-8 byte-order mark "
"(``b'\\xef\\xbb\\xbf'``), the declared file encoding is UTF-8 (this is "
"supported, among others, by Microsoft's :program:`notepad`)."
msgstr ""

# aeec9145e52844bf84d94e19bbff9a27
#: reference/lexical_analysis.rst:99
msgid ""
"If an encoding is declared, the encoding name must be recognized by Python. "
"The encoding is used for all lexical analysis, including string literals, "
"comments and identifiers. The encoding declaration must appear on a line of "
"its own."
msgstr ""

# a9be0a37887d485c88fa433731dfb863
#: reference/lexical_analysis.rst:109
msgid "Explicit line joining"
msgstr ""

# 8e36ae41d68e48808070c90ed72ca3b3
#: reference/lexical_analysis.rst:113
msgid ""
"Two or more physical lines may be joined into logical lines using backslash "
"characters (``\\``), as follows: when a physical line ends in a backslash "
"that is not part of a string literal or comment, it is joined with the "
"following forming a single logical line, deleting the backslash and the "
"following end-of-line character.  For example::"
msgstr ""

# 530d62d9feda4eff85b936d797a66180
#: reference/lexical_analysis.rst:124
msgid ""
"A line ending in a backslash cannot carry a comment.  A backslash does not "
"continue a comment.  A backslash does not continue a token except for string "
"literals (i.e., tokens other than string literals cannot be split across "
"physical lines using a backslash).  A backslash is illegal elsewhere on a "
"line outside a string literal."
msgstr ""

# 5ab8aa373ed34a6d94d05cd81c2a2b20
#: reference/lexical_analysis.rst:134
msgid "Implicit line joining"
msgstr ""

# bf8930bb637d4e7689cffb83a7c44624
#: reference/lexical_analysis.rst:136
msgid ""
"Expressions in parentheses, square brackets or curly braces can be split "
"over more than one physical line without using backslashes. For example::"
msgstr ""

# ffef6813c4fa4f1da49b73ba794e5384
#: reference/lexical_analysis.rst:144
msgid ""
"Implicitly continued lines can carry comments.  The indentation of the "
"continuation lines is not important.  Blank continuation lines are allowed. "
"There is no NEWLINE token between implicit continuation lines.  Implicitly "
"continued lines can also occur within triple-quoted strings (see below); in "
"that case they cannot carry comments."
msgstr ""

# a62b472212004ec4ab8f014c07eabef8
#: reference/lexical_analysis.rst:154
msgid "Blank lines"
msgstr ""

# 5ab221016a6c411394bb8c3efb98ccc8
#: reference/lexical_analysis.rst:158
msgid ""
"A logical line that contains only spaces, tabs, formfeeds and possibly a "
"comment, is ignored (i.e., no NEWLINE token is generated).  During "
"interactive input of statements, handling of a blank line may differ "
"depending on the implementation of the read-eval-print loop.  In the "
"standard interactive interpreter, an entirely blank logical line (i.e. one "
"containing not even whitespace or a comment) terminates a multi-line "
"statement."
msgstr ""

# 5b1239a51d9541fc99b53d34854aa8c2
#: reference/lexical_analysis.rst:169
msgid "Indentation"
msgstr ""

# 3160041cf7864d1fac324a177f906e9f
#: reference/lexical_analysis.rst:173
msgid ""
"Leading whitespace (spaces and tabs) at the beginning of a logical line is "
"used to compute the indentation level of the line, which in turn is used to "
"determine the grouping of statements."
msgstr ""

# 206b531f0e494dcbb291613826c593a6
#: reference/lexical_analysis.rst:177
msgid ""
"Tabs are replaced (from left to right) by one to eight spaces such that the "
"total number of characters up to and including the replacement is a multiple "
"of eight (this is intended to be the same rule as used by Unix).  The total "
"number of spaces preceding the first non-blank character then determines the "
"line's indentation.  Indentation cannot be split over multiple physical "
"lines using backslashes; the whitespace up to the first backslash determines "
"the indentation."
msgstr ""

# 557352d0c3ab48ff885cbcd392b019f9
#: reference/lexical_analysis.rst:185
msgid ""
"Indentation is rejected as inconsistent if a source file mixes tabs and "
"spaces in a way that makes the meaning dependent on the worth of a tab in "
"spaces; a :exc:`TabError` is raised in that case."
msgstr ""

# f812d8ef833141ed9192a3c601d1eac6
#: reference/lexical_analysis.rst:189
msgid ""
"**Cross-platform compatibility note:** because of the nature of text editors "
"on non-UNIX platforms, it is unwise to use a mixture of spaces and tabs for "
"the indentation in a single source file.  It should also be noted that "
"different platforms may explicitly limit the maximum indentation level."
msgstr ""

# 2b422cebc0fa459d876dfa1d635fd7c7
#: reference/lexical_analysis.rst:194
msgid ""
"A formfeed character may be present at the start of the line; it will be "
"ignored for the indentation calculations above.  Formfeed characters "
"occurring elsewhere in the leading whitespace have an undefined effect (for "
"instance, they may reset the space count to zero)."
msgstr ""

# 5d8576bbd6ec4874bd026c60422661ad
#: reference/lexical_analysis.rst:201
msgid ""
"The indentation levels of consecutive lines are used to generate INDENT and "
"DEDENT tokens, using a stack, as follows."
msgstr ""

# e727653f58234fc5a5f8da0f5b5e78c8
#: reference/lexical_analysis.rst:204
msgid ""
"Before the first line of the file is read, a single zero is pushed on the "
"stack; this will never be popped off again.  The numbers pushed on the stack "
"will always be strictly increasing from bottom to top.  At the beginning of "
"each logical line, the line's indentation level is compared to the top of "
"the stack. If it is equal, nothing happens. If it is larger, it is pushed on "
"the stack, and one INDENT token is generated.  If it is smaller, it *must* "
"be one of the numbers occurring on the stack; all numbers on the stack that "
"are larger are popped off, and for each number popped off a DEDENT token is "
"generated.  At the end of the file, a DEDENT token is generated for each "
"number remaining on the stack that is larger than zero."
msgstr ""

# 38fa7e4d56054c7f8241956897ac8a22
#: reference/lexical_analysis.rst:215
msgid ""
"Here is an example of a correctly (though confusingly) indented piece of "
"Python code::"
msgstr ""

# ab4ba2e487e54f8fb86f36b2619fb714
#: reference/lexical_analysis.rst:230
msgid "The following example shows various indentation errors::"
msgstr ""

# 1f1a0cdbec244e409afa01bdf6bcd656
#: reference/lexical_analysis.rst:240
msgid ""
"(Actually, the first three errors are detected by the parser; only the last "
"error is found by the lexical analyzer --- the indentation of ``return r`` "
"does not match a level popped off the stack.)"
msgstr ""

# c0ee6d9f809e4fb2a085eb7b7cf1442b
#: reference/lexical_analysis.rst:248
msgid "Whitespace between tokens"
msgstr ""

# ab27b499492244e1bdcb5004aa454094
#: reference/lexical_analysis.rst:250
msgid ""
"Except at the beginning of a logical line or in string literals, the "
"whitespace characters space, tab and formfeed can be used interchangeably to "
"separate tokens.  Whitespace is needed between two tokens only if their "
"concatenation could otherwise be interpreted as a different token (e.g., ab "
"is one token, but a b is two tokens)."
msgstr ""

# eb24151ad9414cbd9ccac25f08cc2f62
#: reference/lexical_analysis.rst:260
msgid "Other tokens"
msgstr ""

# 37e41f31b0814a53801d28a375eb30b0
#: reference/lexical_analysis.rst:262
msgid ""
"Besides NEWLINE, INDENT and DEDENT, the following categories of tokens "
"exist: *identifiers*, *keywords*, *literals*, *operators*, and *delimiters*. "
"Whitespace characters (other than line terminators, discussed earlier) are "
"not tokens, but serve to delimit tokens. Where ambiguity exists, a token "
"comprises the longest possible string that forms a legal token, when read "
"from left to right."
msgstr ""

# e406b09d73f14fb48f9dc25c0b372c63
#: reference/lexical_analysis.rst:272
msgid "Identifiers and keywords"
msgstr ""

# 7fd8921b36194f5da907be9a1345555b
#: reference/lexical_analysis.rst:276
msgid ""
"Identifiers (also referred to as *names*) are described by the following "
"lexical definitions."
msgstr ""

# 405c04c4d33643bba0afd48d6bb6105b
#: reference/lexical_analysis.rst:279
msgid ""
"The syntax of identifiers in Python is based on the Unicode standard annex "
"UAX-31, with elaboration and changes as defined below; see also :pep:`3131` "
"for further details."
msgstr ""

# 06f1ffafc6f14352bac529b44ed91d62
#: reference/lexical_analysis.rst:283
msgid ""
"Within the ASCII range (U+0001..U+007F), the valid characters for "
"identifiers are the same as in Python 2.x: the uppercase and lowercase "
"letters ``A`` through ``Z``, the underscore ``_`` and, except for the first "
"character, the digits ``0`` through ``9``."
msgstr ""

# 6ca40f80f16347bbbd5497ee0270f048
#: reference/lexical_analysis.rst:288
msgid ""
"Python 3.0 introduces additional characters from outside the ASCII range "
"(see :pep:`3131`).  For these characters, the classification uses the "
"version of the Unicode Character Database as included in the :mod:"
"`unicodedata` module."
msgstr ""

# b51ade6cf3c149f294dd3ddbdf28397b
#: reference/lexical_analysis.rst:292
msgid "Identifiers are unlimited in length.  Case is significant."
msgstr ""

# f916c8f06dbc4f74b2b6158f874d2196
#: reference/lexical_analysis.rst:301
msgid "The Unicode category codes mentioned above stand for:"
msgstr ""

# 30c36de245624f549506a0f7c219c2d9
#: reference/lexical_analysis.rst:303
msgid "*Lu* - uppercase letters"
msgstr ""

# 381e089cd93e419b82e1ee18614a951e
#: reference/lexical_analysis.rst:304
msgid "*Ll* - lowercase letters"
msgstr ""

# 6d345453abc545a28d71812a0dc2be09
#: reference/lexical_analysis.rst:305
msgid "*Lt* - titlecase letters"
msgstr ""

# 9ba5396b5cd34f2c8032b20aa9a9f5cc
#: reference/lexical_analysis.rst:306
msgid "*Lm* - modifier letters"
msgstr ""

# 38dee85a68e24cbf8add6dfec714b264
#: reference/lexical_analysis.rst:307
msgid "*Lo* - other letters"
msgstr ""

# 44c5b0e6deb9417e9ce162e1211a8f3c
#: reference/lexical_analysis.rst:308
msgid "*Nl* - letter numbers"
msgstr ""

# 1af5d8c39d7c45aea74f0ab06c7df740
#: reference/lexical_analysis.rst:309
msgid "*Mn* - nonspacing marks"
msgstr ""

# c1286467d96e4b11970ec68de1830911
#: reference/lexical_analysis.rst:310
msgid "*Mc* - spacing combining marks"
msgstr ""

# c3d92a10914546f68ec04dbfa240025b
#: reference/lexical_analysis.rst:311
msgid "*Nd* - decimal numbers"
msgstr ""

# 28016efddd9b490f8bcd203ba9928d02
#: reference/lexical_analysis.rst:312
msgid "*Pc* - connector punctuations"
msgstr ""

# 980d6a436fa9498c96f9b3a09c52726c
#: reference/lexical_analysis.rst:313
msgid ""
"*Other_ID_Start* - explicit list of characters in `PropList.txt <http://"
"unicode.org/Public/UNIDATA/PropList.txt>`_ to support backwards compatibility"
msgstr ""

# 2875f6a8684141f9a620d6b2e4a1eb75
#: reference/lexical_analysis.rst:314
msgid "*Other_ID_Continue* - likewise"
msgstr ""

# dd1789ca765b4b268249b17bbdf2ffbe
#: reference/lexical_analysis.rst:316
msgid ""
"All identifiers are converted into the normal form NFKC while parsing; "
"comparison of identifiers is based on NFKC."
msgstr ""

# 8f4a9d997eab43458c05c5b6237c7876
#: reference/lexical_analysis.rst:319
msgid ""
"A non-normative HTML file listing all valid identifier characters for "
"Unicode 4.1 can be found at http://www.dcl.hpi.uni-potsdam.de/home/loewis/"
"table-3131.html."
msgstr ""

# 42f5a642783e4136b9d9b9598cf79ee2
#: reference/lexical_analysis.rst:327
msgid "Keywords"
msgstr ""

# 1bf516fbbf7641b1b26e6290a5e03b33
#: reference/lexical_analysis.rst:333
msgid ""
"The following identifiers are used as reserved words, or *keywords* of the "
"language, and cannot be used as ordinary identifiers.  They must be spelled "
"exactly as written here:"
msgstr ""

# 12a55967b597435e8aa03018f911cccc
#: reference/lexical_analysis.rst:350
msgid "Reserved classes of identifiers"
msgstr ""

# 6d2402559803488aa9c60afb0bea6e1d
#: reference/lexical_analysis.rst:352
msgid ""
"Certain classes of identifiers (besides keywords) have special meanings.  "
"These classes are identified by the patterns of leading and trailing "
"underscore characters:"
msgstr ""

# 25f34b9dda834a02871c5b57f6f2bf1f
#: reference/lexical_analysis.rst:366
msgid "``_*``"
msgstr ""

# 24440be63bed4d468a8023f071f77955
#: reference/lexical_analysis.rst:357
msgid ""
"Not imported by ``from module import *``.  The special identifier ``_`` is "
"used in the interactive interpreter to store the result of the last "
"evaluation; it is stored in the :mod:`builtins` module.  When not in "
"interactive mode, ``_`` has no special meaning and is not defined. See "
"section :ref:`import`."
msgstr ""

# 1c2dfd41781f4ced9bd6e0ebdc7faafa
#: reference/lexical_analysis.rst:364
msgid ""
"The name ``_`` is often used in conjunction with internationalization; refer "
"to the documentation for the :mod:`gettext` module for more information on "
"this convention."
msgstr ""

# c09f0e5fbf46476bbc1d784aa8a9dc9c
#: reference/lexical_analysis.rst:374
msgid "``__*__``"
msgstr ""

# f2e4b078ed5c430e8bdd29b7a029b8f3
#: reference/lexical_analysis.rst:369
msgid ""
"System-defined names. These names are defined by the interpreter and its "
"implementation (including the standard library).  Current system names are "
"discussed in the :ref:`specialnames` section and elsewhere.  More will "
"likely be defined in future versions of Python.  *Any* use of ``__*__`` "
"names, in any context, that does not follow explicitly documented use, is "
"subject to breakage without warning."
msgstr ""

# a67242c8546b414186f6fb3381a75ac2
#: reference/lexical_analysis.rst:381
msgid "``__*``"
msgstr ""

# 884abe0e96964e008c251d9d354f2eb1
#: reference/lexical_analysis.rst:377
msgid ""
"Class-private names.  Names in this category, when used within the context "
"of a class definition, are re-written to use a mangled form to help avoid "
"name clashes between \"private\" attributes of base and derived classes. See "
"section :ref:`atom-identifiers`."
msgstr ""

# 4ec6d6de0dd54fa8a0bf779c13ad1f4a
#: reference/lexical_analysis.rst:390
msgid "Literals are notations for constant values of some built-in types."
msgstr ""

# 84ebc95dfb3b4938a62c71270af03180
#: reference/lexical_analysis.rst:396
msgid "String and Bytes literals"
msgstr ""

# 2b3cf8705c414f01be867151375b69c0
#: reference/lexical_analysis.rst:400
msgid "String literals are described by the following lexical definitions:"
msgstr ""

# f5cea222a2c34e7c8f0c84d02d2d4cc4
#: reference/lexical_analysis.rst:424
msgid ""
"One syntactic restriction not indicated by these productions is that "
"whitespace is not allowed between the :token:`stringprefix` or :token:"
"`bytesprefix` and the rest of the literal. The source character set is "
"defined by the encoding declaration; it is UTF-8 if no encoding declaration "
"is given in the source file; see section :ref:`encodings`."
msgstr ""

# 980f6187611a4eee88340f0fdb965544
#: reference/lexical_analysis.rst:432
msgid ""
"In plain English: Both types of literals can be enclosed in matching single "
"quotes (``'``) or double quotes (``\"``).  They can also be enclosed in "
"matching groups of three single or double quotes (these are generally "
"referred to as *triple-quoted strings*).  The backslash (``\\``) character "
"is used to escape characters that otherwise have a special meaning, such as "
"newline, backslash itself, or the quote character."
msgstr ""

# 81d8ff31b8b64425b220d67d114f9268
#: reference/lexical_analysis.rst:439
msgid ""
"Bytes literals are always prefixed with ``'b'`` or ``'B'``; they produce an "
"instance of the :class:`bytes` type instead of the :class:`str` type.  They "
"may only contain ASCII characters; bytes with a numeric value of 128 or "
"greater must be expressed with escapes."
msgstr ""

# 83548cfa32bc4976ad0cfc9d73d5a6e5
#: reference/lexical_analysis.rst:444
msgid ""
"Both string and bytes literals may optionally be prefixed with a letter "
"``'r'`` or ``'R'``; such strings are called :dfn:`raw strings` and treat "
"backslashes as literal characters.  As a result, in string literals, "
"``'\\U'`` and ``'\\u'`` escapes in raw strings are not treated specially."
msgstr ""

# 3f7ce33a1933439eb2fa336143a62e6b
#: reference/lexical_analysis.rst:449
msgid ""
"In triple-quoted strings, unescaped newlines and quotes are allowed (and are "
"retained), except that three unescaped quotes in a row terminate the "
"string.  (A \"quote\" is the character used to open the string, i.e. either "
"``'`` or ``\"``.)"
msgstr ""

# 0a106f3370e44a87a81f207d3e631312
#: reference/lexical_analysis.rst:455
msgid ""
"Unless an ``'r'`` or ``'R'`` prefix is present, escape sequences in strings "
"are interpreted according to rules similar to those used by Standard C.  The "
"recognized escape sequences are:"
msgstr ""

# a46d74d286a74c1695a30dc405c41f9a
# ca92444331214b4eb0f1780bfb38cb69
#: reference/lexical_analysis.rst:460 reference/lexical_analysis.rst:493
msgid "Escape Sequence"
msgstr ""

# 77f1727ba499432b91afdf76443dbc78
# 9fd8d6ed0b724beaa10ddae05a473dc7
#: reference/lexical_analysis.rst:460 reference/lexical_analysis.rst:493
msgid "Notes"
msgstr "Notes"

# 6882c60ff53b4bfebadaf104cacf5a54
#: reference/lexical_analysis.rst:462
msgid "``\\newline``"
msgstr ""

# 32b15da5e4084cfc9be665126ce37a67
#: reference/lexical_analysis.rst:462
msgid "Backslash and newline ignored"
msgstr ""

# bf1a1c60291843aa808a2de3ecd0e807
#: reference/lexical_analysis.rst:464
msgid "``\\\\``"
msgstr ""

# 6abc69b1088e491dbd43a85c05b4963e
#: reference/lexical_analysis.rst:464
msgid "Backslash (``\\``)"
msgstr ""

# c1aa2dfae01f4f33984f858e7045110d
#: reference/lexical_analysis.rst:466
msgid "``\\'``"
msgstr ""

# 0ece13d0898d4ff2b38d107bb962af73
#: reference/lexical_analysis.rst:466
msgid "Single quote (``'``)"
msgstr ""

# 5bb78004c1714d99ba9e57e9bb026009
#: reference/lexical_analysis.rst:468
msgid "``\\\"``"
msgstr ""

# edbb608de01d4f2684ca784e6cf0165b
#: reference/lexical_analysis.rst:468
msgid "Double quote (``\"``)"
msgstr ""

# 041a816925244793a05772ca7e1b3642
#: reference/lexical_analysis.rst:470
msgid "``\\a``"
msgstr ""

# 883fd47601734ea2b8745831efa60a10
#: reference/lexical_analysis.rst:470
msgid "ASCII Bell (BEL)"
msgstr ""

# 02c1d7e4a37747a6a5d3698694f5c87b
#: reference/lexical_analysis.rst:472
msgid "``\\b``"
msgstr ""

# 3373791b09b0440190d399dae2d31d71
#: reference/lexical_analysis.rst:472
msgid "ASCII Backspace (BS)"
msgstr ""

# f3885393d0da476c92c094e75d9942fe
#: reference/lexical_analysis.rst:474
msgid "``\\f``"
msgstr ""

# 3b1474ce3cb04a65b65f2765a6a786c1
#: reference/lexical_analysis.rst:474
msgid "ASCII Formfeed (FF)"
msgstr ""

# b4d9b512ea5747cb9cd9ba56f07dc9f5
#: reference/lexical_analysis.rst:476
msgid "``\\n``"
msgstr ""

# 9686e7aa30f24dc4b46a0d2ab6d765b1
#: reference/lexical_analysis.rst:476
msgid "ASCII Linefeed (LF)"
msgstr ""

# de71dab3ffc442418e29a6eaa998080a
#: reference/lexical_analysis.rst:478
msgid "``\\r``"
msgstr ""

# d5239eb4b4f6494a897a19d96bc892b7
#: reference/lexical_analysis.rst:478
msgid "ASCII Carriage Return (CR)"
msgstr ""

# 63e400ce9a1c49fca30999336eb7ab4a
#: reference/lexical_analysis.rst:480
msgid "``\\t``"
msgstr ""

# 759f7b4695c84462894e395400569c0b
#: reference/lexical_analysis.rst:480
msgid "ASCII Horizontal Tab (TAB)"
msgstr ""

# 553b5080ba6f4b58b52e539d4f029793
#: reference/lexical_analysis.rst:482
msgid "``\\v``"
msgstr ""

# ffd569ecdee54a72b41b6a677c988007
#: reference/lexical_analysis.rst:482
msgid "ASCII Vertical Tab (VT)"
msgstr ""

# 7fce290c183b468daae5c47c1201a662
#: reference/lexical_analysis.rst:484
msgid "``\\ooo``"
msgstr ""

# 8688b949ebd34a09a963dc3bbc1597ff
#: reference/lexical_analysis.rst:484
msgid "Character with octal value *ooo*"
msgstr ""

# 590dd7e1ba114b9caf74cbe4b2abdef6
#: reference/lexical_analysis.rst:484
msgid "(1,3)"
msgstr ""

# 2a1f6c28327b4da9866ccb4c63e9132a
#: reference/lexical_analysis.rst:487
msgid "``\\xhh``"
msgstr ""

# 039cbfa3d8df4b848a58aae1dca1f6ac
#: reference/lexical_analysis.rst:487
msgid "Character with hex value *hh*"
msgstr ""

# e22f1823c0f7484881839cf0775ffb61
#: reference/lexical_analysis.rst:487
msgid "(2,3)"
msgstr ""

# cf134ea64d46450aa67e40de3e357635
#: reference/lexical_analysis.rst:490
msgid "Escape sequences only recognized in string literals are:"
msgstr ""

# cb630e286292497485435715aab777c2
#: reference/lexical_analysis.rst:495
msgid "``\\N{name}``"
msgstr ""

# d0ef48d6dccd4c469b9d70fb55bd4caa
#: reference/lexical_analysis.rst:495
msgid "Character named *name* in the Unicode database"
msgstr ""

# 19133d6274994977b68c19c82246d7b0
#: reference/lexical_analysis.rst:498
msgid "``\\uxxxx``"
msgstr ""

# 47c02f81485d4d958eaba28aa6559930
#: reference/lexical_analysis.rst:498
msgid "Character with 16-bit hex value *xxxx*"
msgstr ""

# 4574ac7f0cbf4674979a5b478b1a0a0b
#: reference/lexical_analysis.rst:498
msgid "\\(4)"
msgstr ""

# ef38e5eb3ca14e09897137881d1f2185
#: reference/lexical_analysis.rst:501
msgid "``\\Uxxxxxxxx``"
msgstr ""

# 19a674ba61bb4677b52d2c5fc86db6c8
#: reference/lexical_analysis.rst:501
msgid "Character with 32-bit hex value *xxxxxxxx*"
msgstr ""

# ccae5f43d21b4820acd0aeac0363d9cc
#: reference/lexical_analysis.rst:501
msgid "\\(5)"
msgstr ""

# 4479fd5872d14d3aa4f38c2eb7289050
#: reference/lexical_analysis.rst:505
msgid "Notes:"
msgstr "Notes : "

# 237865d42a5148f68c46c32c23241a43
#: reference/lexical_analysis.rst:508
msgid "As in Standard C, up to three octal digits are accepted."
msgstr ""

# 0c20f3f838904eeaa4faccc87511b801
#: reference/lexical_analysis.rst:511
msgid "Unlike in Standard C, exactly two hex digits are required."
msgstr ""

# a8f9cf7f6ba045db83590c2387ec326f
#: reference/lexical_analysis.rst:514
msgid ""
"In a bytes literal, hexadecimal and octal escapes denote the byte with the "
"given value. In a string literal, these escapes denote a Unicode character "
"with the given value."
msgstr ""

# d9a25f1d690e4d5e9d48513be8369fb8
#: reference/lexical_analysis.rst:519
msgid ""
"Individual code units which form parts of a surrogate pair can be encoded "
"using this escape sequence.  Exactly four hex digits are required."
msgstr ""

# 29a4878958f7453ca3d9536f3cc153e0
#: reference/lexical_analysis.rst:523
msgid ""
"Any Unicode character can be encoded this way, but characters outside the "
"Basic Multilingual Plane (BMP) will be encoded using a surrogate pair if "
"Python is compiled to use 16-bit code units (the default).  Exactly eight "
"hex digits are required."
msgstr ""

# 1f7792a18cb74733b399013cbf7b7554
#: reference/lexical_analysis.rst:531
msgid ""
"Unlike Standard C, all unrecognized escape sequences are left in the string "
"unchanged, i.e., *the backslash is left in the string*.  (This behavior is "
"useful when debugging: if an escape sequence is mistyped, the resulting "
"output is more easily recognized as broken.)  It is also important to note "
"that the escape sequences only recognized in string literals fall into the "
"category of unrecognized escapes for bytes literals."
msgstr ""

# a92897f8d2bb44e1ae27c437304efccb
#: reference/lexical_analysis.rst:538
msgid ""
"Even in a raw string, string quotes can be escaped with a backslash, but the "
"backslash remains in the string; for example, ``r\"\\\"\"`` is a valid "
"string literal consisting of two characters: a backslash and a double quote; "
"``r\"\\\"`` is not a valid string literal (even a raw string cannot end in "
"an odd number of backslashes).  Specifically, *a raw string cannot end in a "
"single backslash* (since the backslash would escape the following quote "
"character).  Note also that a single backslash followed by a newline is "
"interpreted as those two characters as part of the string, *not* as a line "
"continuation."
msgstr ""

# 08e0f8814e9647c8aa8c880c1589b5cd
#: reference/lexical_analysis.rst:551
msgid "String literal concatenation"
msgstr ""

# 04189de9005b4a7c96bfdc850c8330d2
#: reference/lexical_analysis.rst:553
msgid ""
"Multiple adjacent string or bytes literals (delimited by whitespace), "
"possibly using different quoting conventions, are allowed, and their meaning "
"is the same as their concatenation.  Thus, ``\"hello\" 'world'`` is "
"equivalent to ``\"helloworld\"``.  This feature can be used to reduce the "
"number of backslashes needed, to split long strings conveniently across long "
"lines, or even to add comments to parts of strings, for example::"
msgstr ""

# 61488fed426c4e6c985399ccdbbc2ae1
#: reference/lexical_analysis.rst:564
msgid ""
"Note that this feature is defined at the syntactical level, but implemented "
"at compile time.  The '+' operator must be used to concatenate string "
"expressions at run time.  Also note that literal concatenation can use "
"different quoting styles for each component (even mixing raw strings and "
"triple quoted strings)."
msgstr ""

# bba656628c854924bccab2529c6545d7
#: reference/lexical_analysis.rst:573
msgid "Numeric literals"
msgstr ""

# 8e06307486034c6b849d6a6a9240c23d
#: reference/lexical_analysis.rst:579
msgid ""
"There are three types of numeric literals: integers, floating point numbers, "
"and imaginary numbers.  There are no complex literals (complex numbers can "
"be formed by adding a real number and an imaginary number)."
msgstr ""

# 3749b638aa904929ad9ac28a63d80927
#: reference/lexical_analysis.rst:583
msgid ""
"Note that numeric literals do not include a sign; a phrase like ``-1`` is "
"actually an expression composed of the unary operator '``-``' and the "
"literal ``1``."
msgstr ""

# 3eb08423659041de8b8d54d1008675bd
#: reference/lexical_analysis.rst:591
msgid "Integer literals"
msgstr ""

# 245729610cd34373be37f0e5bfca870c
#: reference/lexical_analysis.rst:593
msgid "Integer literals are described by the following lexical definitions:"
msgstr ""

# d4edccd55c8b4f94b2277b8125f17288
#: reference/lexical_analysis.rst:607
msgid ""
"There is no limit for the length of integer literals apart from what can be "
"stored in available memory."
msgstr ""

# a464bf6a28ae4c1995fac52114b9f241
#: reference/lexical_analysis.rst:610
msgid ""
"Note that leading zeros in a non-zero decimal number are not allowed. This "
"is for disambiguation with C-style octal literals, which Python used before "
"version 3.0."
msgstr ""

# 768623ca44b94e569042bbe358360d70
#: reference/lexical_analysis.rst:614
msgid "Some examples of integer literals::"
msgstr ""

# 74690068b9794c7c83a4b7cee1a8978b
#: reference/lexical_analysis.rst:624
msgid "Floating point literals"
msgstr ""

# 198295368eaa403e9799aaa3f2d0674e
#: reference/lexical_analysis.rst:626
msgid ""
"Floating point literals are described by the following lexical definitions:"
msgstr ""

# 3cf1cba84cf345bc8826f31ce6037e86
#: reference/lexical_analysis.rst:636
msgid ""
"Note that the integer and exponent parts are always interpreted using radix "
"10. For example, ``077e010`` is legal, and denotes the same number as "
"``77e10``. The allowed range of floating point literals is implementation-"
"dependent. Some examples of floating point literals::"
msgstr ""

# f536c6e85a464edeb5a07081ca7c526c
#: reference/lexical_analysis.rst:643
msgid ""
"Note that numeric literals do not include a sign; a phrase like ``-1`` is "
"actually an expression composed of the unary operator ``-`` and the literal "
"``1``."
msgstr ""

# 620dfe8df0924ea4924fecfd4bd1ec12
#: reference/lexical_analysis.rst:651
msgid "Imaginary literals"
msgstr ""

# 3a6fbbde005b4d2881dee333232a003b
#: reference/lexical_analysis.rst:653
msgid "Imaginary literals are described by the following lexical definitions:"
msgstr ""

# cecb270e1af54e4cb9d050657e87446a
#: reference/lexical_analysis.rst:658
msgid ""
"An imaginary literal yields a complex number with a real part of 0.0.  "
"Complex numbers are represented as a pair of floating point numbers and have "
"the same restrictions on their range.  To create a complex number with a "
"nonzero real part, add a floating point number to it, e.g., ``(3+4j)``.  "
"Some examples of imaginary literals::"
msgstr ""

# 411a392bb3674716ab1bbd436a7558eb
#: reference/lexical_analysis.rst:670
msgid "Operators"
msgstr ""

# 2e063182a1b34ee69b597bf61348a228
#: reference/lexical_analysis.rst:674
msgid "The following tokens are operators::"
msgstr ""

# 64833f8a93aa4af083e1338689d7e85a
#: reference/lexical_analysis.rst:684
msgid "Delimiters"
msgstr ""

# 4da27fef9799422abbcb4b3dce23e203
#: reference/lexical_analysis.rst:688
msgid "The following tokens serve as delimiters in the grammar::"
msgstr ""

# 98190a1606e74ecf965499af0001746b
#: reference/lexical_analysis.rst:695
msgid ""
"The period can also occur in floating-point and imaginary literals.  A "
"sequence of three periods has a special meaning as an ellipsis literal. The "
"second half of the list, the augmented assignment operators, serve lexically "
"as delimiters, but also perform an operation."
msgstr ""

# a695fd77756e43d58b1c081f9343fbcb
#: reference/lexical_analysis.rst:700
msgid ""
"The following printing ASCII characters have special meaning as part of "
"other tokens or are otherwise significant to the lexical analyzer::"
msgstr ""

# bb2241a690314dd48b4c00597591faf7
#: reference/lexical_analysis.rst:705
msgid ""
"The following printing ASCII characters are not used in Python.  Their "
"occurrence outside string literals and comments is an unconditional error::"
msgstr ""

# f5bbcf29ca2a4248bb2a81d66f37a5f0
#: reference/simple_stmts.rst:6
msgid "Simple statements"
msgstr ""

# e7bb041daf6547f58a26e830d59d731a
#: reference/simple_stmts.rst:10
msgid ""
"Simple statements are comprised within a single logical line. Several simple "
"statements may occur on a single line separated by semicolons.  The syntax "
"for simple statements is:"
msgstr ""

# df6e3b1e24a44a76b040000d36339463
#: reference/simple_stmts.rst:34
msgid "Expression statements"
msgstr ""

# 584cc81520d840f08ef7c376e56e7edb
#: reference/simple_stmts.rst:41
msgid ""
"Expression statements are used (mostly interactively) to compute and write a "
"value, or (usually) to call a procedure (a function that returns no "
"meaningful result; in Python, procedures return the value ``None``).  Other "
"uses of expression statements are allowed and occasionally useful.  The "
"syntax for an expression statement is:"
msgstr ""

# 1e4401fe7a54412f9d519db4647fdf63
#: reference/simple_stmts.rst:50
msgid ""
"An expression statement evaluates the expression list (which may be a single "
"expression)."
msgstr ""

# 69c802ce42fc4c48acbe9363b9303ae5
#: reference/simple_stmts.rst:62
msgid ""
"In interactive mode, if the value is not ``None``, it is converted to a "
"string using the built-in :func:`repr` function and the resulting string is "
"written to standard output on a line by itself (except if the result is "
"``None``, so that procedure calls do not cause any output.)"
msgstr ""

# 44861526a37d4dacbc8494236f3595d7
#: reference/simple_stmts.rst:70
msgid "Assignment statements"
msgstr ""

# 7ebb6fe46eba42bea94af7f4e1ffb02e
#: reference/simple_stmts.rst:79
msgid ""
"Assignment statements are used to (re)bind names to values and to modify "
"attributes or items of mutable objects:"
msgstr ""

# f7b369d5691a4016a70bafee32b0c0f7
# 1fee7cd04f9c4de5973e529b40a8e6ee
#: reference/simple_stmts.rst:93 reference/simple_stmts.rst:273
msgid ""
"(See section :ref:`primaries` for the syntax definitions for the last three "
"symbols.)"
msgstr ""

# d9c96c6e672746ad9c4f6228afc16e4d
#: reference/simple_stmts.rst:96
msgid ""
"An assignment statement evaluates the expression list (remember that this "
"can be a single expression or a comma-separated list, the latter yielding a "
"tuple) and assigns the single resulting object to each of the target lists, "
"from left to right."
msgstr ""

# 7ba901929e2d4c679397f2490ee07233
#: reference/simple_stmts.rst:105
msgid ""
"Assignment is defined recursively depending on the form of the target "
"(list). When a target is part of a mutable object (an attribute reference, "
"subscription or slicing), the mutable object must ultimately perform the "
"assignment and decide about its validity, and may raise an exception if the "
"assignment is unacceptable.  The rules observed by various types and the "
"exceptions raised are given with the definition of the object types (see "
"section :ref:`types`)."
msgstr ""

# 50c0462c3a9c43a39405e682c1a98618
#: reference/simple_stmts.rst:114
msgid ""
"Assignment of an object to a target list, optionally enclosed in parentheses "
"or square brackets, is recursively defined as follows."
msgstr ""

# 2a0e1f3973a748208920bf92af7b4b3f
#: reference/simple_stmts.rst:117
msgid ""
"If the target list is a single target: The object is assigned to that target."
msgstr ""

# 36b407a49b544d9bb10ec2e8ce81f122
#: reference/simple_stmts.rst:119
msgid ""
"If the target list is a comma-separated list of targets: The object must be "
"an iterable with the same number of items as there are targets in the target "
"list, and the items are assigned, from left to right, to the corresponding "
"targets."
msgstr ""

# 9644dec1fe3548f687f9fc1b6de5cbc9
#: reference/simple_stmts.rst:123
msgid ""
"If the target list contains one target prefixed with an asterisk, called a "
"\"starred\" target: The object must be a sequence with at least as many "
"items as there are targets in the target list, minus one.  The first items "
"of the sequence are assigned, from left to right, to the targets before the "
"starred target.  The final items of the sequence are assigned to the targets "
"after the starred target.  A list of the remaining items in the sequence is "
"then assigned to the starred target (the list can be empty)."
msgstr ""

# e8f5f63568854fb6b9df99aa1c486c4f
#: reference/simple_stmts.rst:131
msgid ""
"Else: The object must be a sequence with the same number of items as there "
"are targets in the target list, and the items are assigned, from left to "
"right, to the corresponding targets."
msgstr ""

# 4e5461a90b6f4d129415a597b5e9b809
#: reference/simple_stmts.rst:135
msgid ""
"Assignment of an object to a single target is recursively defined as follows."
msgstr ""

# 14fd7a77d5614a7da55f20743245c21d
#: reference/simple_stmts.rst:137
msgid "If the target is an identifier (name):"
msgstr ""

# ab9880d25bf7441580153ab448f8beb3
#: reference/simple_stmts.rst:139
msgid ""
"If the name does not occur in a :keyword:`global` or :keyword:`nonlocal` "
"statement in the current code block: the name is bound to the object in the "
"current local namespace."
msgstr ""

# 288f8dc7a2c946c6aac28742a77aefb2
#: reference/simple_stmts.rst:143
msgid ""
"Otherwise: the name is bound to the object in the global namespace or the "
"outer namespace determined by :keyword:`nonlocal`, respectively."
msgstr ""

# a9690ed4824d4e439004eab3913aca7c
#: reference/simple_stmts.rst:148
msgid ""
"The name is rebound if it was already bound.  This may cause the reference "
"count for the object previously bound to the name to reach zero, causing the "
"object to be deallocated and its destructor (if it has one) to be called."
msgstr ""

# 323823064a4246aab51886a23fe34b78
#: reference/simple_stmts.rst:152
msgid ""
"If the target is a target list enclosed in parentheses or in square "
"brackets: The object must be an iterable with the same number of items as "
"there are targets in the target list, and its items are assigned, from left "
"to right, to the corresponding targets."
msgstr ""

# 83fb88f03e9c4682bab20975f5bc48b8
#: reference/simple_stmts.rst:159
msgid ""
"If the target is an attribute reference: The primary expression in the "
"reference is evaluated.  It should yield an object with assignable "
"attributes; if this is not the case, :exc:`TypeError` is raised.  That "
"object is then asked to assign the assigned object to the given attribute; "
"if it cannot perform the assignment, it raises an exception (usually but not "
"necessarily :exc:`AttributeError`)."
msgstr ""

# 8e1c8cd74f8f4fe599260f28aa9c3116
#: reference/simple_stmts.rst:168
msgid ""
"Note: If the object is a class instance and the attribute reference occurs "
"on both sides of the assignment operator, the RHS expression, ``a.x`` can "
"access either an instance attribute or (if no instance attribute exists) a "
"class attribute.  The LHS target ``a.x`` is always set as an instance "
"attribute, creating it if necessary.  Thus, the two occurrences of ``a.x`` "
"do not necessarily refer to the same attribute: if the RHS expression refers "
"to a class attribute, the LHS creates a new instance attribute as the target "
"of the assignment::"
msgstr ""

# 56b9657246a84b4a850414998185dc88
#: reference/simple_stmts.rst:182
msgid ""
"This description does not necessarily apply to descriptor attributes, such "
"as properties created with :func:`property`."
msgstr ""

# 7b24505b14394e339d51c5874b55f362
#: reference/simple_stmts.rst:189
msgid ""
"If the target is a subscription: The primary expression in the reference is "
"evaluated.  It should yield either a mutable sequence object (such as a "
"list) or a mapping object (such as a dictionary).  Next, the subscript "
"expression is evaluated."
msgstr ""

# 9ba3b16c67e74f2f961b62b2f94bfdd7
#: reference/simple_stmts.rst:198
msgid ""
"If the primary is a mutable sequence object (such as a list), the subscript "
"must yield an integer.  If it is negative, the sequence's length is added to "
"it.  The resulting value must be a nonnegative integer less than the "
"sequence's length, and the sequence is asked to assign the assigned object "
"to its item with that index.  If the index is out of range, :exc:"
"`IndexError` is raised (assignment to a subscripted sequence cannot add new "
"items to a list)."
msgstr ""

# 0ef1879238b14184a519624e9892c56b
#: reference/simple_stmts.rst:209
msgid ""
"If the primary is a mapping object (such as a dictionary), the subscript "
"must have a type compatible with the mapping's key type, and the mapping is "
"then asked to create a key/datum pair which maps the subscript to the "
"assigned object.  This can either replace an existing key/value pair with "
"the same key value, or insert a new key/value pair (if no key with the same "
"value existed)."
msgstr ""

# 64255212b78a467a8c2326793edb292b
#: reference/simple_stmts.rst:215
msgid ""
"For user-defined objects, the :meth:`__setitem__` method is called with "
"appropriate arguments."
msgstr ""

# e5de01191ec2423896dab022741e4d6a
#: reference/simple_stmts.rst:220
msgid ""
"If the target is a slicing: The primary expression in the reference is "
"evaluated.  It should yield a mutable sequence object (such as a list).  The "
"assigned object should be a sequence object of the same type.  Next, the "
"lower and upper bound expressions are evaluated, insofar they are present; "
"defaults are zero and the sequence's length.  The bounds should evaluate to "
"integers. If either bound is negative, the sequence's length is added to "
"it.  The resulting bounds are clipped to lie between zero and the sequence's "
"length, inclusive.  Finally, the sequence object is asked to replace the "
"slice with the items of the assigned sequence.  The length of the slice may "
"be different from the length of the assigned sequence, thus changing the "
"length of the target sequence, if the object allows it."
msgstr ""

# d9200bb4527148b18d4bd95587a03349
#: reference/simple_stmts.rst:234
msgid ""
"In the current implementation, the syntax for targets is taken to be the "
"same as for expressions, and invalid syntax is rejected during the code "
"generation phase, causing less detailed error messages."
msgstr ""

# b23b129243f44fe2b2b0df421b8b697c
#: reference/simple_stmts.rst:238
msgid ""
"WARNING: Although the definition of assignment implies that overlaps between "
"the left-hand side and the right-hand side are 'safe' (for example ``a, b = "
"b, a`` swaps two variables), overlaps *within* the collection of assigned-to "
"variables are not safe!  For instance, the following program prints ``[0, "
"2]``::"
msgstr ""

# 8f29ac8032db4826a1ee6ed1535e9cc1
#: reference/simple_stmts.rst:251
msgid ":pep:`3132` - Extended Iterable Unpacking"
msgstr ""

# ddbdb0c017584f9f909c070e5571ac60
#: reference/simple_stmts.rst:252
msgid "The specification for the ``*target`` feature."
msgstr ""

# 942da963ab8e4888a1b9bdbf72581ba9
#: reference/simple_stmts.rst:258
msgid "Augmented assignment statements"
msgstr ""

# 6c8b7398ad174d43aa5de1d4ca5b7934
#: reference/simple_stmts.rst:264
msgid ""
"Augmented assignment is the combination, in a single statement, of a binary "
"operation and an assignment statement:"
msgstr ""

# c7f77188cb6244cdbfd5773911591b67
#: reference/simple_stmts.rst:276
msgid ""
"An augmented assignment evaluates the target (which, unlike normal "
"assignment statements, cannot be an unpacking) and the expression list, "
"performs the binary operation specific to the type of assignment on the two "
"operands, and assigns the result to the original target.  The target is only "
"evaluated once."
msgstr ""

# 92fa86b6f42c40bd8f5d81e4530b3484
#: reference/simple_stmts.rst:281
msgid ""
"An augmented assignment expression like ``x += 1`` can be rewritten as ``x = "
"x + 1`` to achieve a similar, but not exactly equal effect. In the augmented "
"version, ``x`` is only evaluated once. Also, when possible, the actual "
"operation is performed *in-place*, meaning that rather than creating a new "
"object and assigning that to the target, the old object is modified instead."
msgstr ""

# 585c975450e4403fbc7ff62792d67a2e
#: reference/simple_stmts.rst:287
msgid ""
"With the exception of assigning to tuples and multiple targets in a single "
"statement, the assignment done by augmented assignment statements is handled "
"the same way as normal assignments. Similarly, with the exception of the "
"possible *in-place* behavior, the binary operation performed by augmented "
"assignment is the same as the normal binary operations."
msgstr ""

# 589710eaa71f4940a7e3badc9056520c
#: reference/simple_stmts.rst:293
msgid ""
"For targets which are attribute references, the same :ref:`caveat about "
"class and instance attributes <attr-target-note>` applies as for regular "
"assignments."
msgstr ""

# a18ccaf0f4304f00b7ffca6d99489fca
#: reference/simple_stmts.rst:300
msgid "The :keyword:`assert` statement"
msgstr ""

# 559d383d589748b78bcd3a9060fd238b
#: reference/simple_stmts.rst:306
msgid ""
"Assert statements are a convenient way to insert debugging assertions into a "
"program:"
msgstr ""

# fb7e7cfe68b94fadadaec2f9338a5caa
#: reference/simple_stmts.rst:312
msgid "The simple form, ``assert expression``, is equivalent to ::"
msgstr ""

# 2224bf31b36449f9b2d9bab2394d8f41
#: reference/simple_stmts.rst:317
msgid ""
"The extended form, ``assert expression1, expression2``, is equivalent to ::"
msgstr ""

# 2d530fafed4b46f5a7dfd36e87d43991
#: reference/simple_stmts.rst:326
msgid ""
"These equivalences assume that :const:`__debug__` and :exc:`AssertionError` "
"refer to the built-in variables with those names.  In the current "
"implementation, the built-in variable :const:`__debug__` is ``True`` under "
"normal circumstances, ``False`` when optimization is requested (command line "
"option -O).  The current code generator emits no code for an assert "
"statement when optimization is requested at compile time.  Note that it is "
"unnecessary to include the source code for the expression that failed in the "
"error message; it will be displayed as part of the stack trace."
msgstr ""

# 7079e29dbb1045539f9f2ee9d40da0c7
#: reference/simple_stmts.rst:335
msgid ""
"Assignments to :const:`__debug__` are illegal.  The value for the built-in "
"variable is determined when the interpreter starts."
msgstr ""

# c009a972820a43e1804d3ffbcc38d151
#: reference/simple_stmts.rst:342
msgid "The :keyword:`pass` statement"
msgstr ""

# a94453c06d6c4cd9bb7560317101961d
#: reference/simple_stmts.rst:352
msgid ""
":keyword:`pass` is a null operation --- when it is executed, nothing "
"happens. It is useful as a placeholder when a statement is required "
"syntactically, but no code needs to be executed, for example::"
msgstr ""

# 288b535315634e27932ef6057bb19f19
#: reference/simple_stmts.rst:364
msgid "The :keyword:`del` statement"
msgstr "L'instruction :keyword:`del`"

# 8df7c631ea3e46f68276c706eeabb253
#: reference/simple_stmts.rst:374
msgid ""
"Deletion is recursively defined very similar to the way assignment is "
"defined. Rather than spelling it out in full details, here are some hints."
msgstr ""

# b2db8a999f894d7caf41aa79db80a3ce
#: reference/simple_stmts.rst:377
msgid ""
"Deletion of a target list recursively deletes each target, from left to "
"right."
msgstr ""

# 436bcf2a612947e5b65c610211500209
#: reference/simple_stmts.rst:383
msgid ""
"Deletion of a name removes the binding of that name from the local or global "
"namespace, depending on whether the name occurs in a :keyword:`global` "
"statement in the same code block.  If the name is unbound, a :exc:"
"`NameError` exception will be raised."
msgstr ""

# fa41c5d69e5c4f9a9ee4161767f34e5f
#: reference/simple_stmts.rst:390
msgid ""
"Deletion of attribute references, subscriptions and slicings is passed to "
"the primary object involved; deletion of a slicing is in general equivalent "
"to assignment of an empty slice of the right type (but even this is "
"determined by the sliced object)."
msgstr ""

# ee1d9ee6da96446e8dcdccf95b5c2311
#: reference/simple_stmts.rst:403
msgid "The :keyword:`return` statement"
msgstr ""

# cca7365a4fd94a4880db9bcfa79a5cd3
#: reference/simple_stmts.rst:413
msgid ""
":keyword:`return` may only occur syntactically nested in a function "
"definition, not within a nested class definition."
msgstr ""

# c3378f55df0d4bd9b824d3e7d7f99972
#: reference/simple_stmts.rst:416
msgid ""
"If an expression list is present, it is evaluated, else ``None`` is "
"substituted."
msgstr ""

# 0c4d9c71676f4282a15c1ecd309f499f
#: reference/simple_stmts.rst:418
msgid ""
":keyword:`return` leaves the current function call with the expression list "
"(or ``None``) as return value."
msgstr ""

# e270c1322b0c4c558c5b7e5523aeaa19
#: reference/simple_stmts.rst:423
msgid ""
"When :keyword:`return` passes control out of a :keyword:`try` statement with "
"a :keyword:`finally` clause, that :keyword:`finally` clause is executed "
"before really leaving the function."
msgstr ""

# 8d504b5df88a4708be5b63227f21f122
#: reference/simple_stmts.rst:427
msgid ""
"In a generator function, the :keyword:`return` statement is not allowed to "
"include an :token:`expression_list`.  In that context, a bare :keyword:"
"`return` indicates that the generator is done and will cause :exc:"
"`StopIteration` to be raised."
msgstr ""

# b22e1573aa1942b18291ffe9fd031c8e
#: reference/simple_stmts.rst:436
msgid "The :keyword:`yield` statement"
msgstr ""

# 8d4b82558045456f954bd99c1dee4c65
#: reference/simple_stmts.rst:448
msgid ""
"The :keyword:`yield` statement is only used when defining a generator "
"function, and is only used in the body of the generator function. Using a :"
"keyword:`yield` statement in a function definition is sufficient to cause "
"that definition to create a generator function instead of a normal function. "
"When a generator function is called, it returns an iterator known as a "
"generator iterator, or more commonly, a generator.  The body of the "
"generator function is executed by calling the :func:`next` function on the "
"generator repeatedly until it raises an exception."
msgstr ""

# 9c4f89a9ef6a4db7a62ce8d889545683
#: reference/simple_stmts.rst:457
msgid ""
"When a :keyword:`yield` statement is executed, the state of the generator is "
"frozen and the value of :token:`expression_list` is returned to :meth:"
"`next`'s caller.  By \"frozen\" we mean that all local state is retained, "
"including the current bindings of local variables, the instruction pointer, "
"and the internal evaluation stack: enough information is saved so that the "
"next time :func:`next` is invoked, the function can proceed exactly as if "
"the :keyword:`yield` statement were just another external call."
msgstr ""

# 8b3824d8fefc4bab9b17193e45669ad3
#: reference/simple_stmts.rst:477
msgid ""
"The proposal that, among other generator enhancements, proposed allowing :"
"keyword:`yield` to appear inside a :keyword:`try` ... :keyword:`finally` "
"block."
msgstr ""

# ab14f79779eb4565b498fe7d6a97eadc
#: reference/simple_stmts.rst:484
msgid "The :keyword:`raise` statement"
msgstr ""

# 83e46cb472c042168320f795dc5422fc
#: reference/simple_stmts.rst:495
msgid ""
"If no expressions are present, :keyword:`raise` re-raises the last exception "
"that was active in the current scope.  If no exception is active in the "
"current scope, a :exc:`RuntimeError` exception is raised indicating that "
"this is an error."
msgstr ""

# cae004ef7e6842069496a336f61301b8
#: reference/simple_stmts.rst:500
msgid ""
"Otherwise, :keyword:`raise` evaluates the first expression as the exception "
"object.  It must be either a subclass or an instance of :class:"
"`BaseException`. If it is a class, the exception instance will be obtained "
"when needed by instantiating the class with no arguments."
msgstr ""

# 432d1f285797453a8392760cf7a0c711
#: reference/simple_stmts.rst:505
msgid ""
"The :dfn:`type` of the exception is the exception instance's class, the :dfn:"
"`value` is the instance itself."
msgstr ""

# f392c800043b43cdaf95fe5ab4911775
#: reference/simple_stmts.rst:510
msgid ""
"A traceback object is normally created automatically when an exception is "
"raised and attached to it as the :attr:`__traceback__` attribute, which is "
"writable. You can create an exception and set your own traceback in one step "
"using the :meth:`with_traceback` exception method (which returns the same "
"exception instance, with its traceback set to its argument), like so::"
msgstr ""

# 9f468e9bc7c045cc8a77e1a6558db6ad
#: reference/simple_stmts.rst:522
msgid ""
"The ``from`` clause is used for exception chaining: if given, the second "
"*expression* must be another exception class or instance, which will then be "
"attached to the raised exception as the :attr:`__cause__` attribute (which "
"is writable).  If the raised exception is not handled, both exceptions will "
"be printed::"
msgstr ""

# 4999168f905e423dbd16ac483c525f8f
#: reference/simple_stmts.rst:543
msgid ""
"A similar mechanism works implicitly if an exception is raised inside an "
"exception handler: the previous exception is then attached as the new "
"exception's :attr:`__context__` attribute::"
msgstr ""

# 275294875faf451799ab89edb33533bf
#: reference/simple_stmts.rst:562
msgid ""
"Additional information on exceptions can be found in section :ref:"
"`exceptions`, and information about handling exceptions is in section :ref:"
"`try`."
msgstr ""

# 5769c8377fd042c7bf087d5cf9deff45
#: reference/simple_stmts.rst:569
msgid "The :keyword:`break` statement"
msgstr ""

# 8b0b4d1fd29f4b77812c45efdcb6bd5e
#: reference/simple_stmts.rst:580
msgid ""
":keyword:`break` may only occur syntactically nested in a :keyword:`for` or :"
"keyword:`while` loop, but not nested in a function or class definition "
"within that loop."
msgstr ""

# 2ffd5983bc7747aaa78c4aa29e7278f3
#: reference/simple_stmts.rst:587
msgid ""
"It terminates the nearest enclosing loop, skipping the optional :keyword:"
"`else` clause if the loop has one."
msgstr ""

# f166240560714195960225fff594f669
#: reference/simple_stmts.rst:590
msgid ""
"If a :keyword:`for` loop is terminated by :keyword:`break`, the loop control "
"target keeps its current value."
msgstr ""

# 5ad10a512a9f4e2480ab3541fedfc3a9
#: reference/simple_stmts.rst:595
msgid ""
"When :keyword:`break` passes control out of a :keyword:`try` statement with "
"a :keyword:`finally` clause, that :keyword:`finally` clause is executed "
"before really leaving the loop."
msgstr ""

# 1179fcb7fad74a87a9dd3a15aaac1acd
#: reference/simple_stmts.rst:603
msgid "The :keyword:`continue` statement"
msgstr ""

# 1bd4f71740144bb78ce272d6689e61b4
#: reference/simple_stmts.rst:615
msgid ""
":keyword:`continue` may only occur syntactically nested in a :keyword:`for` "
"or :keyword:`while` loop, but not nested in a function or class definition "
"or :keyword:`finally` clause within that loop.  It continues with the next "
"cycle of the nearest enclosing loop."
msgstr ""

# 909ef3436daa4453b277abef5d78e9ed
#: reference/simple_stmts.rst:620
msgid ""
"When :keyword:`continue` passes control out of a :keyword:`try` statement "
"with a :keyword:`finally` clause, that :keyword:`finally` clause is executed "
"before really starting the next loop cycle."
msgstr ""

# 2565d7e22eec4edaa75a78d198d88e8a
#: reference/simple_stmts.rst:629
msgid "The :keyword:`import` statement"
msgstr ""

# e6c2e11dba89497dbce1e1f00a7923c1
#: reference/simple_stmts.rst:648
msgid ""
"Import statements are executed in two steps: (1) find a module, and "
"initialize it if necessary; (2) define a name or names in the local "
"namespace (of the scope where the :keyword:`import` statement occurs). The "
"statement comes in two forms differing on whether it uses the :keyword:"
"`from` keyword. The first form (without :keyword:`from`) repeats these steps "
"for each identifier in the list. The form with :keyword:`from` performs step "
"(1) once, and then performs step (2) repeatedly. For a reference "
"implementation of step (1), see the :mod:`importlib` module."
msgstr ""

# e4579195aed5413394b481c8e6bb6ae5
#: reference/simple_stmts.rst:660
msgid ""
"To understand how step (1) occurs, one must first understand how Python "
"handles hierarchical naming of modules. To help organize modules and provide "
"a hierarchy in naming, Python has a concept of packages. A package can "
"contain other packages and modules while modules cannot contain other "
"modules or packages. From a file system perspective, packages are "
"directories and modules are files. The original `specification for packages "
"<http://www.python.org/doc/essays/packages.html>`_ is still available to "
"read, although minor details have changed since the writing of that document."
msgstr ""

# e4d90e6db2fa4954b4e6dd8a628e4075
#: reference/simple_stmts.rst:672
msgid ""
"Once the name of the module is known (unless otherwise specified, the term "
"\"module\" will refer to both packages and modules), searching for the "
"module or package can begin. The first place checked is :data:`sys.modules`, "
"the cache of all modules that have been imported previously. If the module "
"is found there then it is used in step (2) of import unless ``None`` is "
"found in :data:`sys.modules`, in which case :exc:`ImportError` is raised."
msgstr ""

# be437e196cc84e0791b58df4f931b59a
#: reference/simple_stmts.rst:686
msgid ""
"If the module is not found in the cache, then :data:`sys.meta_path` is "
"searched (the specification for :data:`sys.meta_path` can be found in :pep:"
"`302`). The object is a list of :term:`finder` objects which are queried in "
"order as to whether they know how to load the module by calling their :meth:"
"`find_module` method with the name of the module. If the module happens to "
"be contained within a package (as denoted by the existence of a dot in the "
"name), then a second argument to :meth:`find_module` is given as the value "
"of the :attr:`__path__` attribute from the parent package (everything up to "
"the last dot in the name of the module being imported). If a finder can find "
"the module it returns a :term:`loader` (discussed later) or returns ``None``."
msgstr ""

# 794401651233412faf9a5c1cf3114324
#: reference/simple_stmts.rst:702
msgid ""
"If none of the finders on :data:`sys.meta_path` are able to find the module "
"then some implicitly defined finders are queried. Implementations of Python "
"vary in what implicit meta path finders are defined. The one they all do "
"define, though, is one that handles :data:`sys.path_hooks`, :data:`sys."
"path_importer_cache`, and :data:`sys.path`."
msgstr ""

# 38ac0abfc66b4fc6ad8057369bb51ba7
#: reference/simple_stmts.rst:708
msgid ""
"The implicit finder searches for the requested module in the \"paths\" "
"specified in one of two places (\"paths\" do not have to be file system "
"paths). If the module being imported is supposed to be contained within a "
"package then the second argument passed to :meth:`find_module`, :attr:"
"`__path__` on the parent package, is used as the source of paths. If the "
"module is not contained in a package then :data:`sys.path` is used as the "
"source of paths."
msgstr ""

# 238ee0525ea1441899ba4cccf6adc437
#: reference/simple_stmts.rst:715
msgid ""
"Once the source of paths is chosen it is iterated over to find a finder that "
"can handle that path. The dict at :data:`sys.path_importer_cache` caches "
"finders for paths and is checked for a finder. If the path does not have a "
"finder cached then :data:`sys.path_hooks` is searched by calling each object "
"in the list with a single argument of the path, returning a finder or "
"raises :exc:`ImportError`. If a finder is returned then it is cached in :"
"data:`sys.path_importer_cache` and then used for that path entry. If no "
"finder can be found but the path exists then a value of ``None`` is stored "
"in :data:`sys.path_importer_cache` to signify that an implicit, file-based "
"finder that handles modules stored as individual files should be used for "
"that path. If the path does not exist then a finder which always returns "
"``None`` is placed in the cache for the path."
msgstr ""

# f1895971580b46b7b016d688d21928be
#: reference/simple_stmts.rst:733
msgid ""
"If no finder can find the module then :exc:`ImportError` is raised. "
"Otherwise some finder returned a loader whose :meth:`load_module` method is "
"called with the name of the module to load (see :pep:`302` for the original "
"definition of loaders). A loader has several responsibilities to perform on "
"a module it loads. First, if the module already exists in :data:`sys."
"modules` (a possibility if the loader is called outside of the import "
"machinery) then it is to use that module for initialization and not a new "
"module. But if the module does not exist in :data:`sys.modules` then it is "
"to be added to that dict before initialization begins. If an error occurs "
"during loading of the module and it was added to :data:`sys.modules` it is "
"to be removed from the dict. If an error occurs but the module was already "
"in :data:`sys.modules` it is left in the dict."
msgstr ""

# 54ccc29f35154e4891cd4e64fa7aa2e6
#: reference/simple_stmts.rst:753
msgid ""
"The loader must set several attributes on the module. :data:`__name__` is to "
"be set to the name of the module. :data:`__file__` is to be the \"path\" to "
"the file unless the module is built-in (and thus listed in :data:`sys."
"builtin_module_names`) in which case the attribute is not set. If what is "
"being imported is a package then :data:`__path__` is to be set to a list of "
"paths to be searched when looking for modules and packages contained within "
"the package being imported. :data:`__package__` is optional but should be "
"set to the name of package that contains the module or package (the empty "
"string is used for module not contained in a package). :data:`__loader__` is "
"also optional but should be set to the loader object that is loading the "
"module."
msgstr ""

# 4057f08988e44254966e3096fb152bfe
#: reference/simple_stmts.rst:768
msgid ""
"If an error occurs during loading then the loader raises :exc:`ImportError` "
"if some other exception is not already being propagated. Otherwise the "
"loader returns the module that was loaded and initialized."
msgstr ""

# 652e72b12b854bfeb1c051b76b135635
#: reference/simple_stmts.rst:772
msgid ""
"When step (1) finishes without raising an exception, step (2) can begin."
msgstr ""

# ecee340616fe4effb1f816a6072d5be0
#: reference/simple_stmts.rst:774
msgid ""
"The first form of :keyword:`import` statement binds the module name in the "
"local namespace to the module object, and then goes on to import the next "
"identifier, if any.  If the module name is followed by :keyword:`as`, the "
"name following :keyword:`as` is used as the local name for the module."
msgstr ""

# 58f85f6d25304231aef8b00d874a3365
#: reference/simple_stmts.rst:783
msgid ""
"The :keyword:`from` form does not bind the module name: it goes through the "
"list of identifiers, looks each one of them up in the module found in step "
"(1), and binds the name in the local namespace to the object thus found.  As "
"with the first form of :keyword:`import`, an alternate local name can be "
"supplied by specifying \":keyword:`as` localname\".  If a name is not "
"found, :exc:`ImportError` is raised.  If the list of identifiers is replaced "
"by a star (``'*'``), all public names defined in the module are bound in the "
"local namespace of the :keyword:`import` statement."
msgstr ""

# 90ded263db9e4acda3c6b1415b2e99cc
#: reference/simple_stmts.rst:794
msgid ""
"The *public names* defined by a module are determined by checking the "
"module's namespace for a variable named ``__all__``; if defined, it must be "
"a sequence of strings which are names defined or imported by that module.  "
"The names given in ``__all__`` are all considered public and are required to "
"exist.  If ``__all__`` is not defined, the set of public names includes all "
"names found in the module's namespace which do not begin with an underscore "
"character (``'_'``). ``__all__`` should contain the entire public API. It is "
"intended to avoid accidentally exporting items that are not part of the API "
"(such as library modules which were imported and used within the module)."
msgstr ""

# e216155d5c0942908d6e51a915ff1a72
#: reference/simple_stmts.rst:804
msgid ""
"The :keyword:`from` form with ``*`` may only occur in a module scope.  The "
"wild card form of import --- ``import *`` --- is only allowed at the module "
"level. Attempting to use it in class or function definitions will raise a :"
"exc:`SyntaxError`."
msgstr ""

# 5fb7ebc2daef4bd2b493a04f2efe3f01
#: reference/simple_stmts.rst:812
msgid ""
"When specifying what module to import you do not have to specify the "
"absolute name of the module. When a module or package is contained within "
"another package it is possible to make a relative import within the same top "
"package without having to mention the package name. By using leading dots in "
"the specified module or package after :keyword:`from` you can specify how "
"high to traverse up the current package hierarchy without specifying exact "
"names. One leading dot means the current package where the module making the "
"import exists. Two dots means up one package level. Three dots is up two "
"levels, etc. So if you execute ``from . import mod`` from a module in the "
"``pkg`` package then you will end up importing ``pkg.mod``. If you execute "
"``from ..subpkg2 import mod`` from within ``pkg.subpkg1`` you will import "
"``pkg.subpkg2.mod``. The specification for relative imports is contained "
"within :pep:`328`."
msgstr ""

# 5cdc986ea81c4215aaffd0c0eff7d44c
#: reference/simple_stmts.rst:825
msgid ""
":func:`importlib.import_module` is provided to support applications that "
"determine which modules need to be loaded dynamically."
msgstr ""

# 4f5955139d764b8ea1ad5e45766912b4
#: reference/simple_stmts.rst:832
msgid "Future statements"
msgstr ""

# 1e9f281f2743410e8dfb507744456c98
#: reference/simple_stmts.rst:836
msgid ""
"A :dfn:`future statement` is a directive to the compiler that a particular "
"module should be compiled using syntax or semantics that will be available "
"in a specified future release of Python.  The future statement is intended "
"to ease migration to future versions of Python that introduce incompatible "
"changes to the language.  It allows use of the new features on a per-module "
"basis before the release in which the feature becomes standard."
msgstr ""

# 8a6e51fd0e674ba6ba5cf9c79f786068
#: reference/simple_stmts.rst:851
msgid ""
"A future statement must appear near the top of the module.  The only lines "
"that can appear before a future statement are:"
msgstr ""

# 01eb105a02224c4889aa7ab071c7242a
#: reference/simple_stmts.rst:854
msgid "the module docstring (if any),"
msgstr ""

# ef21d6f797b24299adaf1f92dee1e9fb
#: reference/simple_stmts.rst:855
msgid "comments,"
msgstr ""

# eae656ae092048d9b9b359b518dceb73
#: reference/simple_stmts.rst:856
msgid "blank lines, and"
msgstr ""

# 9cc89cdbc8cf4ab0a443bea7120e8292
#: reference/simple_stmts.rst:857
msgid "other future statements."
msgstr ""

# f4843e44c98148fb83af2719c751290a
#: reference/simple_stmts.rst:861
msgid ""
"The features recognized by Python 3.0 are ``absolute_import``, ``division``, "
"``generators``, ``unicode_literals``, ``print_function``, ``nested_scopes`` "
"and ``with_statement``.  They are all redundant because they are always "
"enabled, and only kept for backwards compatibility."
msgstr ""

# 53a55a3229cf41c5927d7b80be91c45f
#: reference/simple_stmts.rst:866
msgid ""
"A future statement is recognized and treated specially at compile time: "
"Changes to the semantics of core constructs are often implemented by "
"generating different code.  It may even be the case that a new feature "
"introduces new incompatible syntax (such as a new reserved word), in which "
"case the compiler may need to parse the module differently.  Such decisions "
"cannot be pushed off until runtime."
msgstr ""

# 1f74b5e62bda40f68150647e3a1535c6
#: reference/simple_stmts.rst:873
msgid ""
"For any given release, the compiler knows which feature names have been "
"defined, and raises a compile-time error if a future statement contains a "
"feature not known to it."
msgstr ""

# c8988186496d41cd83480c8811636b68
#: reference/simple_stmts.rst:877
msgid ""
"The direct runtime semantics are the same as for any import statement: there "
"is a standard module :mod:`__future__`, described later, and it will be "
"imported in the usual way at the time the future statement is executed."
msgstr ""

# 5154512a801649eaa1ea01b6a0317954
#: reference/simple_stmts.rst:881
msgid ""
"The interesting runtime semantics depend on the specific feature enabled by "
"the future statement."
msgstr ""

# 0fe9e8258fa5432bad43cf1487295972
#: reference/simple_stmts.rst:884
msgid "Note that there is nothing special about the statement::"
msgstr ""

# a704448f409c4ec7b6be811e300a60cf
#: reference/simple_stmts.rst:888
msgid ""
"That is not a future statement; it's an ordinary import statement with no "
"special semantics or syntax restrictions."
msgstr ""

# 9f893fcaf8d54986be330d93bb7db5dd
#: reference/simple_stmts.rst:891
msgid ""
"Code compiled by calls to the built-in functions :func:`exec` and :func:"
"`compile` that occur in a module :mod:`M` containing a future statement "
"will, by default, use the new syntax or semantics associated with the future "
"statement.  This can be controlled by optional arguments to :func:`compile` "
"--- see the documentation of that function for details."
msgstr ""

# b0dbc26eb4334138a9bbca8006430e40
#: reference/simple_stmts.rst:897
msgid ""
"A future statement typed at an interactive interpreter prompt will take "
"effect for the rest of the interpreter session.  If an interpreter is "
"started with the :option:`-i` option, is passed a script name to execute, "
"and the script includes a future statement, it will be in effect in the "
"interactive session started after the script is executed."
msgstr ""

# 8f42b884219c4bda8f014cffe555f091
#: reference/simple_stmts.rst:905
msgid ":pep:`236` - Back to the __future__"
msgstr ""

# ee51f23ac2f440b3ac86fec6e096727a
#: reference/simple_stmts.rst:906
msgid "The original proposal for the __future__ mechanism."
msgstr ""

# 51baaca6622f4529b56a9624b9324b91
#: reference/simple_stmts.rst:912
msgid "The :keyword:`global` statement"
msgstr ""

# 7b6b9c2748f747d2a95c34c9a45b0f37
#: reference/simple_stmts.rst:921
msgid ""
"The :keyword:`global` statement is a declaration which holds for the entire "
"current code block.  It means that the listed identifiers are to be "
"interpreted as globals.  It would be impossible to assign to a global "
"variable without :keyword:`global`, although free variables may refer to "
"globals without being declared global."
msgstr ""

# c8d3fe3a118045e191a914973df3623e
#: reference/simple_stmts.rst:927
msgid ""
"Names listed in a :keyword:`global` statement must not be used in the same "
"code block textually preceding that :keyword:`global` statement."
msgstr ""

# 09a96a2a6a8e4a11acc3170204d1c6ff
#: reference/simple_stmts.rst:930
msgid ""
"Names listed in a :keyword:`global` statement must not be defined as formal "
"parameters or in a :keyword:`for` loop control target, :keyword:`class` "
"definition, function definition, or :keyword:`import` statement."
msgstr ""

# 44fb859174df42a9b8af894668415b87
#: reference/simple_stmts.rst:936
msgid ""
"The current implementation does not enforce the latter two restrictions, but "
"programs should not abuse this freedom, as future implementations may "
"enforce them or silently change the meaning of the program."
msgstr ""

# e28f9326e353493dace52d804da5c3a9
#: reference/simple_stmts.rst:945
msgid ""
"**Programmer's note:** the :keyword:`global` is a directive to the parser.  "
"It applies only to code parsed at the same time as the :keyword:`global` "
"statement. In particular, a :keyword:`global` statement contained in a "
"string or code object supplied to the built-in :func:`exec` function does "
"not affect the code block *containing* the function call, and code contained "
"in such a string is unaffected by :keyword:`global` statements in the code "
"containing the function call.  The same applies to the :func:`eval` and :"
"func:`compile` functions."
msgstr ""

# 9d46469e1cfd4eb2a38b9a2c1bfbca27
#: reference/simple_stmts.rst:957
msgid "The :keyword:`nonlocal` statement"
msgstr ""

# a7d064a704014623976170c3894d211b
#: reference/simple_stmts.rst:968
msgid ""
"The :keyword:`nonlocal` statement causes the listed identifiers to refer to "
"previously bound variables in the nearest enclosing scope.  This is "
"important because the default behavior for binding is to search the local "
"namespace first.  The statement allows encapsulated code to rebind variables "
"outside of the local scope besides the global (module) scope."
msgstr ""

# 2d92303a3ca54a7b9cd01e5913532884
#: reference/simple_stmts.rst:978
msgid ""
"Names listed in a :keyword:`nonlocal` statement, unlike to those listed in "
"a :keyword:`global` statement, must refer to pre-existing bindings in an "
"enclosing scope (the scope in which a new binding should be created cannot "
"be determined unambiguously)."
msgstr ""

# ce5c3ffcdb414f65b4cf458897945e12
#: reference/simple_stmts.rst:983
msgid ""
"Names listed in a :keyword:`nonlocal` statement must not collide with pre-"
"existing bindings in the local scope."
msgstr ""

# 27229eb4c7bc4f859a74e92105775a85
#: reference/simple_stmts.rst:988
msgid ":pep:`3104` - Access to Names in Outer Scopes"
msgstr ""

# b799b68b3c954afe8eb4af317211403d
#: reference/simple_stmts.rst:989
msgid "The specification for the :keyword:`nonlocal` statement."
msgstr ""

# 88f261adefba4f6791919079f207ab2e
#: reference/toplevel_components.rst:6
msgid "Top-level components"
msgstr ""

# a1d4350e2ba14e518f1db7edb38047ac
#: reference/toplevel_components.rst:10
msgid ""
"The Python interpreter can get its input from a number of sources: from a "
"script passed to it as standard input or as program argument, typed in "
"interactively, from a module source file, etc.  This chapter gives the "
"syntax used in these cases."
msgstr ""

# effe8ef987574c7a808b0bebb254bf63
#: reference/toplevel_components.rst:19
msgid "Complete Python programs"
msgstr ""

# ec21a9d75ca34df793dd2ea3203285e1
#: reference/toplevel_components.rst:28
msgid ""
"While a language specification need not prescribe how the language "
"interpreter is invoked, it is useful to have a notion of a complete Python "
"program.  A complete Python program is executed in a minimally initialized "
"environment: all built-in and standard modules are available, but none have "
"been initialized, except for :mod:`sys` (various system services), :mod:"
"`builtins` (built-in functions, exceptions and ``None``) and :mod:"
"`__main__`.  The latter is used to provide the local and global namespace "
"for execution of the complete program."
msgstr ""

# 67b1ba2f22f64758a67d0b63e20ad073
#: reference/toplevel_components.rst:36
msgid ""
"The syntax for a complete Python program is that for file input, described "
"in the next section."
msgstr ""

# d4eb019f501045a6af5cf44a20a9cf1b
#: reference/toplevel_components.rst:43
msgid ""
"The interpreter may also be invoked in interactive mode; in this case, it "
"does not read and execute a complete program but reads and executes one "
"statement (possibly compound) at a time.  The initial environment is "
"identical to that of a complete program; each statement is executed in the "
"namespace of :mod:`__main__`."
msgstr ""

# fa217c9460d44e2cb5ee9c17df23006d
#: reference/toplevel_components.rst:54
msgid ""
"Under Unix, a complete program can be passed to the interpreter in three "
"forms: with the :option:`-c` *string* command line option, as a file passed "
"as the first command line argument, or as standard input.  If the file or "
"standard input is a tty device, the interpreter enters interactive mode; "
"otherwise, it executes the file as a complete program."
msgstr ""

# 1515d3d4af954029934edecbbec2712f
#: reference/toplevel_components.rst:64
msgid "File input"
msgstr ""

# a5af6bd602264fcd91988e79b3464914
#: reference/toplevel_components.rst:66
msgid "All input read from non-interactive files has the same form:"
msgstr ""

# 1e1f51eb5b794a5980ab27178379bc51
#: reference/toplevel_components.rst:71
msgid "This syntax is used in the following situations:"
msgstr ""

# 1642b844455b49978c6439a8718ed7c1
#: reference/toplevel_components.rst:73
msgid "when parsing a complete Python program (from a file or from a string);"
msgstr ""

# f71326ede4c04ed4999661f84f3266f4
#: reference/toplevel_components.rst:75
msgid "when parsing a module;"
msgstr ""

# 7a3359972bd146479ee9f21939f8b2b8
#: reference/toplevel_components.rst:77
msgid "when parsing a string passed to the :func:`exec` function;"
msgstr ""

# bced35d22bcd4f4cb7cca76e175f3e80
#: reference/toplevel_components.rst:83
msgid "Interactive input"
msgstr ""

# 94ce5b8cc1e44b7d83e9b182ba92329a
#: reference/toplevel_components.rst:85
msgid "Input in interactive mode is parsed using the following grammar:"
msgstr ""

# 89a97672db6d4c44807910139de0610c
#: reference/toplevel_components.rst:90
msgid ""
"Note that a (top-level) compound statement must be followed by a blank line "
"in interactive mode; this is needed to help the parser detect the end of the "
"input."
msgstr ""

# 873468a2bfcc4125bf6a9c8f0ffc48fe
#: reference/toplevel_components.rst:97
msgid "Expression input"
msgstr ""

# bf13138fa681479e9a3666ad6cd5b18f
#: reference/toplevel_components.rst:103
msgid ""
"There are two forms of expression input.  Both ignore leading whitespace. "
"The string argument to :func:`eval` must have the following form:"
msgstr ""

# 50ea7b9547ea414ca8310386497871f1
#: reference/toplevel_components.rst:114
msgid ""
"Note: to read 'raw' input line without interpretation, you can use the :meth:"
"`readline` method of file objects, including ``sys.stdin``."
msgstr ""
