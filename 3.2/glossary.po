# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2015, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-12-20 13:09\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

# b74ebfaf987a4c60aed73e734502260b
#: glossary.rst:5
msgid "Glossary"
msgstr "Glossaire"

# dd1b79c99d12453db3afa0bdc27c3596
#: glossary.rst:12
msgid ""
"The default Python prompt of the interactive shell.  Often seen for code "
"examples which can be executed interactively in the interpreter."
msgstr ""
"L'invite de commande utilisée par défaut dans l'interpréteur interactif. On "
"la voit souvent dans des exemples de code qui peuvent être exécutés "
"interactivement dans l'interpréteur."

# 305ea78330ff44bda6b23bbf1bede01a
#: glossary.rst:16
msgid ""
"The default Python prompt of the interactive shell when entering code for an "
"indented code block or within a pair of matching left and right delimiters "
"(parentheses, square brackets or curly braces)."
msgstr ""
"L'invite de commande utilisée par défaut dans l'interpréteur interactif "
"lorsqu'on entre un bloc de code indenté ou entre deux délimiteurs "
"(parenthèses, crochets ou accolades)."

# a60a984f2f9842d1a58873f63827ca4e
#: glossary.rst:21
msgid ""
"A tool that tries to convert Python 2.x code to Python 3.x code by handling "
"most of the incompatibilities which can be detected by parsing the source "
"and traversing the parse tree."
msgstr ""
"Un outil qui essaie de convertir du code pour Python 2.x en code pour Python "
"3.x en gérant la plupart des incompatibilités qui peuvent être détectées en "
"analysant la source et parcourant son arbre syntaxique."

# d35630f491ca4cb5a2549a49e51128ef
#: glossary.rst:25
msgid ""
"2to3 is available in the standard library as :mod:`lib2to3`; a standalone "
"entry point is provided as :file:`Tools/scripts/2to3`.  See :ref:`2to3-"
"reference`."
msgstr ""
"2to3 est disponible dans la bibliothèque standard sous le nom de :mod:"
"`lib2to3`\\ ; un point d’entrée indépendant est fourni via :file:`Tools/"
"scripts/2to3`. Cf. \\ :ref:`2to3-reference`."

# c4992c6ceb534c6696a5d28fea42ea7a
#: glossary.rst:30
msgid ""
"Abstract base classes complement :term:`duck-typing` by providing a way to "
"define interfaces when other techniques like :func:`hasattr` would be clumsy "
"or subtly wrong (for example with :ref:`magic methods <special-lookup>`).  "
"ABCs introduce virtual subclasses, which are classes that don't inherit from "
"a class but are still recognized by :func:`isinstance` and :func:"
"`issubclass`; see the :mod:`abc` module documentation.  Python comes with "
"many built-in ABCs for data structures (in the :mod:`collections` module), "
"numbers (in the :mod:`numbers` module), streams (in the :mod:`io` module), "
"import finders and loaders (in the :mod:`importlib.abc` module).  You can "
"create your own ABCs with the :mod:`abc` module."
msgstr ""

# 25e25b57c0424daa8e01f56776fa6c3e
#: glossary.rst:43
msgid ""
"A value passed to a :term:`function` (or :term:`method`) when calling the "
"function.  There are two types of arguments:"
msgstr ""

# ca832f9b5c274fef986153f487821cf3
#: glossary.rst:46
msgid ""
":dfn:`keyword argument`: an argument preceded by an identifier (e.g. "
"``name=``) in a function call or passed as a value in a dictionary preceded "
"by ``**``.  For example, ``3`` and ``5`` are both keyword arguments in the "
"following calls to :func:`complex`::"
msgstr ""
":dfn:`argument nommé`: un argument précédé d'un identifiant (comme "
"``name=``) ou un dictionnaire précédé de ``**``, lors d'un appel de "
"fonction. Par exemple, ``3`` et ``5`` sont tous les deux des arguments "
"nommés dans l'appel à :func:`complex` ici ::"

# e303d38ba78f4953b2f653be4af80e89
#: glossary.rst:54
msgid ""
":dfn:`positional argument`: an argument that is not a keyword argument. "
"Positional arguments can appear at the beginning of an argument list and/or "
"be passed as elements of an :term:`iterable` preceded by ``*``. For example, "
"``3`` and ``5`` are both positional arguments in the following calls::"
msgstr ""
":dfn:`argument positionnel` : Un argument qui n'est pas nommé. Les arguments "
"positionnels apparaissent au début de la liste des arguments, ou donnés sous "
"forme d'un :term:`itérable` précédé par ``*``. Par exemple, ``3`` et ``5`` "
"sont tous les deux des arguments positionnels dans les appels suivants ::"

# 17cdeb2ddb56460ebf13ef0041c61550
#: glossary.rst:63
msgid ""
"Arguments are assigned to the named local variables in a function body. See "
"the :ref:`calls` section for the rules governing this assignment. "
"Syntactically, any expression can be used to represent an argument; the "
"evaluated value is assigned to the local variable."
msgstr ""
"Les arguments se retrouvent dans le corps de la fonction appelée parmi les "
"variables locales. Voir la section :ref:`calls` à propos des règles dictant "
"cet affectation. Syntaxiquement, toute expression est acceptée comme "
"argument, et c'est la valeur résultante de l'expression qui sera affectée à "
"la variable locale."

# 4a6aa4b8f9b741ee9df327829f63df69
#: glossary.rst:68
msgid ""
"See also the :term:`parameter` glossary entry, the FAQ question on :ref:`the "
"difference between arguments and parameters <faq-argument-vs-parameter>`, "
"and :pep:`362`."
msgstr ""
"Voir aussi :term:`paramètre` dans le glossaire, la FAQ à aussi une question "
"à propos de `la différence entre argument et paramètre <faq-argument-vs-"
"parameter>` et la :pep:`362`."

# 42fea1d5940d4b3bbb2dcd24f4099aca
#: glossary.rst:73
msgid ""
"A value associated with an object which is referenced by name using dotted "
"expressions.  For example, if an object *o* has an attribute *a* it would be "
"referenced as *o.a*."
msgstr ""
"Une valeur associée à un objet et référencé par un nom via une notation "
"utilisant des points. Par exemple, si un objet *o* a un attribut *a*, il "
"sera référencé par *o.a*."

# 420765cdfdd3436084cfa824044f046f
#: glossary.rst:78
msgid ""
"Benevolent Dictator For Life, a.k.a. `Guido van Rossum <http://www.python."
"org/~guido/>`_, Python's creator."
msgstr ""

# 68089286948b4328a9c60081077a2f0c
#: glossary.rst:82
msgid ""
"Python source code is compiled into bytecode, the internal representation of "
"a Python program in the CPython interpreter.  The bytecode is also cached in "
"``.pyc`` and ``.pyo`` files so that executing the same file is faster the "
"second time (recompilation from source to bytecode can be avoided).  This "
"\"intermediate language\" is said to run on a :term:`virtual machine` that "
"executes the machine code corresponding to each bytecode. Do note that "
"bytecodes are not expected to work between different Python virtual "
"machines, nor to be stable between Python releases."
msgstr ""
"Le code source, en Python, est compilé en un bytecode, la représentation "
"interne à CPython d'un programme Python. Le bytecode est aussi stocké dans "
"un fichier nommé ``.pyc`` ou ``.pyo``. Ces caches permettent de charger les "
"fichiers plus rapidement lors de la 2ème exécution (en évitant ainsi de "
"recommencer la compilation en bytecode). On dit que ce *langage "
"intermédiaire* est exécuté sur une :term:`machine virtuelle` qui exécute des "
"instructions machine pour chaque instruction du bytecode. Notez que le "
"bytecode n'a pas vocation à fonctionner entre différentes sur différentes "
"machines virtuelle Python, encore moins entre différentes version de Python."

# c878760a876a44a28f6a24c375c3f0c3
#: glossary.rst:92
msgid ""
"A list of bytecode instructions can be found in the documentation for :ref:"
"`the dis module <bytecodes>`."
msgstr ""
"Une liste des instructions du bytecode se trouve dans la documentation du :"
"ref:`module dis <bytecodes>`."

# c5bb278240304cebb3938a0a46282e44
#: glossary.rst:96
msgid ""
"A template for creating user-defined objects. Class definitions normally "
"contain method definitions which operate on instances of the class."
msgstr ""
"Un modèle pour créer des objets définis par l'utilisateur. Les définitions "
"de classes contiennent normalement des définitions de méthodes qui agissent "
"sur les instances de classe."

# 26f288fbeca9415c86a6d4d623c254bf
#: glossary.rst:101
msgid ""
"The implicit conversion of an instance of one type to another during an "
"operation which involves two arguments of the same type.  For example, "
"``int(3.15)`` converts the floating point number to the integer ``3``, but "
"in ``3+4.5``, each argument is of a different type (one int, one float), and "
"both must be converted to the same type before they can be added or it will "
"raise a ``TypeError``.  Without coercion, all arguments of even compatible "
"types would have to be normalized to the same value by the programmer, e.g., "
"``float(3)+4.5`` rather than just ``3+4.5``."
msgstr ""
"La conversion implicite d'une instance d'un type vers un autre lors d'une "
"opération impliquant deux opérandes de même type. Par exemple ``int(3.15)`` "
"convertis explicitement le nombre a virgule flottante en nombre entier (ici, "
"``3``), mais dans l'opération ``3 + 4.5``, les deux opérandes ont un type "
"différent, alors qu'elles doivent avoir le même type pour être additionnées, "
"sans quoi une exception ``TypeError`` serait levée. Sans coercition, toutes "
"les opérandes, même de types compatibles, devraient être convertis (on parle "
"aussi de \"cast\") explicitement par le développeur, par exemple : "
"``float(3) + 4.5`` au lieu du simple ``3 + 4.5``."

# 8b4441266e6647cdaf37fa2e534bb500
#: glossary.rst:111
msgid ""
"An extension of the familiar real number system in which all numbers are "
"expressed as a sum of a real part and an imaginary part.  Imaginary numbers "
"are real multiples of the imaginary unit (the square root of ``-1``), often "
"written ``i`` in mathematics or ``j`` in engineering.  Python has built-in "
"support for complex numbers, which are written with this latter notation; "
"the imaginary part is written with a ``j`` suffix, e.g., ``3+1j``.  To get "
"access to complex equivalents of the :mod:`math` module, use :mod:`cmath`.  "
"Use of complex numbers is a fairly advanced mathematical feature.  If you're "
"not aware of a need for them, it's almost certain you can safely ignore them."
msgstr ""
"Une extension du système numéral réel familier dans laquelle tous les "
"nombres sont exprimés sous la forme d'une somme d'un réel et d'un "
"imaginaire. Les nombres imaginaures sont de réels multiples d'une unité "
"imaginaire (la racine carrée de ``-1``), souvent écrite ``i`` en "
"mathématiques ou ``j`` en ingénierie. Python supporte nativement les nombres "
"complexes, écrits avec cette dernière notation; la partie imaginaire est "
"écrite avec un suffixe ``j``, exemple, ``3+1j``. Pour utiliser les "
"équivalents complexes à :mod:`math`, utilisez :mod:`cmath`. L'utilisation "
"des nombres complexes est une caractéristiques des mathématiques avancées. "
"Si vous n'en avez pas l'utilité, vous pouvez les ignorer en toute "
"tranquilité."

# 71391d4487c34a6f925beb337856b9e1
#: glossary.rst:123
msgid ""
"An object which controls the environment seen in a :keyword:`with` statement "
"by defining :meth:`__enter__` and :meth:`__exit__` methods. See :pep:`343`."
msgstr ""
"Un objet contrôlant l'environnement a l'intérieur d'une instruction :keyword:"
"`with` en définissant les méthodes :meth:`__enter__` et :meth:`__exit__`. "
"Consultez la :pep:`343`."

# 4dcf038daf164cdebb7516b83a40ee5c
#: glossary.rst:128
msgid ""
"The canonical implementation of the Python programming language, as "
"distributed on `python.org <http://python.org>`_.  The term \"CPython\" is "
"used when necessary to distinguish this implementation from others such as "
"Jython or IronPython."
msgstr ""

# feb6afd789ee4621b27ff78e392e076b
#: glossary.rst:134
msgid ""
"A function returning another function, usually applied as a function "
"transformation using the ``@wrapper`` syntax.  Common examples for "
"decorators are :func:`classmethod` and :func:`staticmethod`."
msgstr ""
"Une fonction retournant une autre fonction, utilisé habituellement dans une "
"transformation de fonction via la syntaxe ``@wrapper``.Les exemples "
"habituels pour les décorateurs sont :func:`classmethod` et :func:"
"`staticmethod`."

# 7e0a34cefe1342ff8c874c9d58c21be1
#: glossary.rst:138
msgid ""
"The decorator syntax is merely syntactic sugar, the following two function "
"definitions are semantically equivalent::"
msgstr ""
"La syntaxe decorator est simplement du sucre syntaxique, les définitions des "
"deux fonctions suivantes sont sémantiquement équivalentes :"

# af12f65ec98940fd9e7b50605ace9093
#: glossary.rst:149
msgid ""
"The same concept exists for classes, but is less commonly used there.  See "
"the documentation for :ref:`function definitions <function>` and :ref:`class "
"definitions <class>` for more about decorators."
msgstr ""
"Quoique moins fréquemment utilisé, le même concept existe pour les classes. "
"Consultez la documentation :ref:`définitions de fonctions <fonction>` et :"
"ref:`définitions de classes <classe>` pour en savoir plus sur les decorators."

# 124a072ddf6c4087a72fa658f916d909
#: glossary.rst:154
msgid ""
"Any object which defines the methods :meth:`__get__`, :meth:`__set__`, or :"
"meth:`__delete__`.  When a class attribute is a descriptor, its special "
"binding behavior is triggered upon attribute lookup.  Normally, using *a.b* "
"to get, set or delete an attribute looks up the object named *b* in the "
"class dictionary for *a*, but if *b* is a descriptor, the respective "
"descriptor method gets called.  Understanding descriptors is a key to a deep "
"understanding of Python because they are the basis for many features "
"including functions, methods, properties, class methods, static methods, and "
"reference to super classes."
msgstr ""
"N'importe quel objet définissant les méthodes :meth:`__get__`, :meth:"
"`__set__`, ou :meth:`__delete__`. Lorsque l'attribut d'une classe est un "
"descripteur, son comportement spécial est déclenché lors de la recherche des "
"attributs. En utilisant *a.b* pour obtenir, valoriser ou effacer un "
"attribut, il recherche l'objet nommé *b* dans la dictionnaire de la classe "
"pour *a*, mais si *b* est un descripteur, la méthode de ce descripteur est "
"alors appelée. Comprendre les descripteurs est la clé d'une compréhension "
"approfondie de Python, ils sont la base de nombre de ses caractéristiques "
"notamment les fonctions, méthodes, propriétés, méthodes de classe, méthodes "
"statiques, et les références aux classes mères."

# 2e73f050ed524a78ad23fd77befc91b5
#: glossary.rst:164
msgid ""
"For more information about descriptors' methods, see :ref:`descriptors`."
msgstr ""
"Pour plus d'informations sur les méthodes des descripteurs, consultez :ref:"
"`descriptors`."

# b874f641a53c4145b41bc3991549ec5e
#: glossary.rst:167
msgid ""
"An associative array, where arbitrary keys are mapped to values.  The keys "
"can be any object with :meth:`__hash__` and :meth:`__eq__` methods. Called a "
"hash in Perl."
msgstr ""
"Une structure de donnée associant des clefs et des valeurs. Les clefs "
"peuvent être n'importe quel objet comportant les méthodes :meth:`__hash__` "
"et :meth:`__eq__``. Elle s'appelle \"hash\" en Perl."

# 3b6e8f13409a4612afabc41139042098
#: glossary.rst:172
msgid ""
"A string literal which appears as the first expression in a class, function "
"or module.  While ignored when the suite is executed, it is recognized by "
"the compiler and put into the :attr:`__doc__` attribute of the enclosing "
"class, function or module.  Since it is available via introspection, it is "
"the canonical place for documentation of the object."
msgstr ""
"Une chaîne littérale étant la première expression d'une classe, fonction, ou "
"module. Bien qu'ignoré à l'exécution, elles sont reconnues par le "
"compilateur, et placées dans l'attribut :attr:`__doc__` de sa classe, "
"fonction, ou module respectif. Puisque cette chaîne est disponible par "
"introspection, c'est l'endroit idéal pour documenter l'objet."

# f663bce6664840bd9d4b3dd9ab62811c
#: glossary.rst:180
msgid ""
"A programming style which does not look at an object's type to determine if "
"it has the right interface; instead, the method or attribute is simply "
"called or used (\"If it looks like a duck and quacks like a duck, it must be "
"a duck.\")  By emphasizing interfaces rather than specific types, well-"
"designed code improves its flexibility by allowing polymorphic "
"substitution.  Duck-typing avoids tests using :func:`type` or :func:"
"`isinstance`.  (Note, however, that duck-typing can be complemented with :"
"term:`abstract base classes <abstract base class>`.)  Instead, it typically "
"employs :func:`hasattr` tests or :term:`EAFP` programming."
msgstr ""
"Un style de programmation qui ne prend pas en compte le type d'un objet pour "
"déterminer s'il respecte une interface, mais qui qui appelle simplement la "
"méthode ou l'attribut (*Si ça à un bec et que ça cancane, c'est un canard*). "
"En se concentrant sur les interfaces plutôt que les types, du code bien "
"construit améliore sa flexibilité en autorisant des substitutions "
"polymorphiques. Le duck-typing évitent de vérifier les types via :func:"
"`type` ou :func:`isinstance`, (notez cependant que le duck-typing peut "
"travailler de pair avec les :term:`classes de base abstraites <classe de "
"base abstraite>`.) À la place, le duck-typique utilise plutôt :func:"
"`hasattr` ou la programmation :term:`EAFP`."

# 890b0e0c238a4aaaa1abc1962015bd12
#: glossary.rst:191
msgid ""
"Easier to ask for forgiveness than permission.  This common Python coding "
"style assumes the existence of valid keys or attributes and catches "
"exceptions if the assumption proves false.  This clean and fast style is "
"characterized by the presence of many :keyword:`try` and :keyword:`except` "
"statements.  The technique contrasts with the :term:`LBYL` style common to "
"many other languages such as C."
msgstr ""
"Il est plus simple de demander pardon que demander permission. Ce style de "
"développement Python fait l'hypothèse que le code est valide, et attrape les "
"exceptions si cette hypothèse s'avère fausse. Ce style, propre et efficace, "
"est caractérisé par la présence de beaucoup de mot clé :keyword:`try` et :"
"keyword:`except`. Cette technique de programmation contraste avec le style :"
"term:`LBYL` présent courament dans des langages tel que C."

# ebeea7ccf05c43c1b31e84a4bf05ced4
#: glossary.rst:199
msgid ""
"A piece of syntax which can be evaluated to some value.  In other words, an "
"expression is an accumulation of expression elements like literals, names, "
"attribute access, operators or function calls which all return a value.  In "
"contrast to many other languages, not all language constructs are "
"expressions.  There are also :term:`statement`\\s which cannot be used as "
"expressions, such as :keyword:`if`.  Assignments are also statements, not "
"expressions."
msgstr ""
"Une suite logique de termes et chiffres conformes à la syntaxe Python dont "
"l'évaluation fournit une valeur. En d'autres termes, une expression est une "
"suite d'éléments tels que des noms, opérateurs, littéraux, accès "
"d'attributs, méthodes ou fonctions qui aboutissent à une valeur. "
"Contrairement à beaucoup d'autres langages, les différentes constructions du "
"langage ne sont pas toutes des expressions. Il y a également des :term:"
"`instructions`\\s qui ne peuvent pas être utilisés comme expressions, tel "
"que :keyword:`if`. Les affectations sont également des :term:`instructions` "
"et non des expressions."

# fb2165a91d4f4072893d3564a7f4232c
#: glossary.rst:208
msgid ""
"A module written in C or C++, using Python's C API to interact with the core "
"and with user code."
msgstr ""
"Un module écrit en C ou C++, utilisant l'API C de Python pour interagir avec "
"Python et le code de l'utilisateur."

# dafd914aeacc4123add48bc81855fbbe
#: glossary.rst:212
msgid ""
"An object exposing a file-oriented API (with methods such as :meth:`read()` "
"or :meth:`write()`) to an underlying resource.  Depending on the way it was "
"created, a file object can mediate access to a real on-disk file or to "
"another type of storage or communication device (for example standard input/"
"output, in-memory buffers, sockets, pipes, etc.).  File objects are also "
"called :dfn:`file-like objects` or :dfn:`streams`."
msgstr ""
"Un objet exposant une ressource via une API orientée fichier (avec les "
"méthodes :meth:`read()` ou :meth:`write()`). En fonction de la manière dont "
"ils ont été créés, les objets fichiers peuvent exposer un fichier sur le "
"disque, ou un autre type de stockage ou de communication (typiquement "
"l'entrée standard, la sortie standard, un tampon en mémoire, des "
"sockets, ...). Les objets fichiers sont aussi appelés :dfn:`file-like-"
"objects` ou :dfn:`streams`."

# 82f05fb05c23410e92ca56b6c132de1f
#: glossary.rst:220
msgid ""
"There are actually three categories of file objects: raw binary files, "
"buffered binary files and text files.  Their interfaces are defined in the :"
"mod:`io` module.  The canonical way to create a file object is by using the :"
"func:`open` function."
msgstr ""

# 7645c945c87544fbbd8292e12856c6cc
#: glossary.rst:226
msgid "A synonym for :term:`file object`."
msgstr "Un synonyme de :term:`objet fichier `."

# fadf745cbbb545fd9a125c4c1f3d0d5a
#: glossary.rst:229
msgid ""
"An object that tries to find the :term:`loader` for a module. It must "
"implement a method named :meth:`find_module`. See :pep:`302` for details "
"and :class:`importlib.abc.Finder` for an :term:`abstract base class`."
msgstr ""

# cb17ef220f9c49df804be5120495001c
#: glossary.rst:235
msgid ""
"Mathematical division that rounds down to nearest integer.  The floor "
"division operator is ``//``.  For example, the expression ``11 // 4`` "
"evaluates to ``2`` in contrast to the ``2.75`` returned by float true "
"division.  Note that ``(-11) // 4`` is ``-3`` because that is ``-2.75`` "
"rounded *downward*. See :pep:`238`."
msgstr ""
"Division mathématique arrondissant à l'entier le plus petit. L'opérateur de "
"la division entière est ``//``. Par exemple l'expression ``11 // 4`` vaut "
"``2``, contrairement à ``11 / 4`` qui vaut ``2.75``. Notez que ``(-11) // "
"4`` vaut ``-3`` car l'arrondi se fait par le bas. Voir la :pep:`328`."

# 9ad098200b484478960360e3206c408c
#: glossary.rst:242
msgid ""
"A series of statements which returns some value to a caller. It can also be "
"passed zero or more :term:`arguments <argument>` which may be used in the "
"execution of the body. See also :term:`parameter`, :term:`method`, and the :"
"ref:`function` section."
msgstr ""
"Une suite d'instructions qui renvoient une valeur à celui qui l'appelle. On "
"peut aussi lui passer des :term:`arguments <argument>` qui pourront être "
"utilisés dans le corps de la fonction. Voir aussi :term:`paramètre`, :term:"
"`méthode`, et :ref:`function`."

# 315d152269b94764a10666697f25632f
#: glossary.rst:248
msgid ""
"A pseudo-module which programmers can use to enable new language features "
"which are not compatible with the current interpreter."
msgstr ""
"Un pseudo-module que les développeurs peuvent utiliser pour activer de "
"nouvelles fonctionnalités du langage qui ne sont pas compatibles avec "
"l'interpréteur utilisé."

# 74aab2b3e88e48f2b1ad5d34f6e3984c
#: glossary.rst:251
msgid ""
"By importing the :mod:`__future__` module and evaluating its variables, you "
"can see when a new feature was first added to the language and when it "
"becomes the default::"
msgstr ""
"En important le module :mod:`__future__` et en affichant ses variables, vous "
"pouvez voir quand une nouvelle fonctionnalité à été rajoutée dans le "
"langage, et quand elle devient le comportement par défaut ::"

# 01eecca14a96432a81f1a79f9c92c970
#: glossary.rst:260
msgid ""
"The process of freeing memory when it is not used anymore.  Python performs "
"garbage collection via reference counting and a cyclic garbage collector "
"that is able to detect and break reference cycles."
msgstr ""
"Le processus de libérer de la mémoire lorsqu'elle n'est plus utilisée. "
"Python utilise un ramasse-miettes par comptage de référence, et un ramasse "
"miette cyclique capable de détecter et casser les références circulaires."

# 9a6b9acf453f4d1a81cb230329384c2f
#: glossary.rst:267
msgid ""
"A function which returns an iterator.  It looks like a normal function "
"except that it contains :keyword:`yield` statements for producing a series a "
"values usable in a for-loop or that can be retrieved one at a time with the :"
"func:`next` function. Each :keyword:`yield` temporarily suspends processing, "
"remembering the location execution state (including local variables and "
"pending try-statements).  When the generator resumes, it picks-up where it "
"left-off (in contrast to functions which start fresh on every invocation)."
msgstr ""

# 4984ef4ec7324316bf080d3cc5ff01e8
#: glossary.rst:279
msgid ""
"An expression that returns an iterator.  It looks like a normal expression "
"followed by a :keyword:`for` expression defining a loop variable, range, and "
"an optional :keyword:`if` expression.  The combined expression generates "
"values for an enclosing function::"
msgstr ""
"Une expression qui donne un itérateur. Cela ressemble à une expression "
"normale, suivie d'une expression :keyword:`for` définissant une variable de "
"boucle, d'un range, et d'une expression, optionnelle, :keyword:`if`. Cette "
"expression combinée génère des valeurs pour la fonction qui l'entoure ::"

# 50fd518f5b964721938dbf76218563fc
#: glossary.rst:288
msgid "See :term:`global interpreter lock`."
msgstr "Voir :term:`verrou global de l'interpréteur `."

# effbfba8c30b4f158c8b335b8d15d170
#: glossary.rst:291
msgid ""
"The mechanism used by the :term:`CPython` interpreter to assure that only "
"one thread executes Python :term:`bytecode` at a time. This simplifies the "
"CPython implementation by making the object model (including critical built-"
"in types such as :class:`dict`) implicitly safe against concurrent access.  "
"Locking the entire interpreter makes it easier for the interpreter to be "
"multi-threaded, at the expense of much of the parallelism afforded by multi-"
"processor machines."
msgstr ""
"Le mécanisme utilisé par l'interpréteur :term:`CPython` pour s'assurer qu'un "
"seul thread n'execute du bytecode à la fois. Cela simplifie l'implémentation "
"de CPython en rendant le modèle objet (incluant des parties critiques comme "
"la classe native :class:`dict`) implicitement protégé des accès concourants. "
"Vérouiller l'interpréteur entier le rend plus facile à rendre multi-thread, "
"en perdant malheureusement la majorité du parallélisme possible sur les "
"machines ayant plusieurs processeurs."

# b2841ab33f2749a6b6e480ed0d8c6ca3
#: glossary.rst:300
msgid ""
"However, some extension modules, either standard or third-party, are "
"designed so as to release the GIL when doing computationally-intensive tasks "
"such as compression or hashing.  Also, the GIL is always released when doing "
"I/O."
msgstr ""
"Cependant, certains modules d'extension, standards ou non, sont construits "
"de manière à libérer le GIL lorsqu'ils effectuent des tâches lourdes tel que "
"la compression ou le hachage. Aussi, le GIL est toujours libéré lors des "
"lectures et écritures."

# fb27eff4f4104492ac3a7d70b9258292
#: glossary.rst:305
msgid ""
"Past efforts to create a \"free-threaded\" interpreter (one which locks "
"shared data at a much finer granularity) have not been successful because "
"performance suffered in the common single-processor case. It is believed "
"that overcoming this performance issue would make the implementation much "
"more complicated and therefore costlier to maintain."
msgstr ""
"Les tentatives précédentes d'implémenter un interpréteur Python avec une "
"granularité de verrouillage plus fine ont toutes échouées, à cause de leur "
"performances sur un seul processeur. Il est admis que corriger c'est "
"problèmes de performance induits mènerai vers une implémentation compliquée "
"et donc plus coûteuse à maintenir."

# dc0cd0de884c47a9870c1be8cd7f009c
#: glossary.rst:312
msgid ""
"An object is *hashable* if it has a hash value which never changes during "
"its lifetime (it needs a :meth:`__hash__` method), and can be compared to "
"other objects (it needs an :meth:`__eq__` method).  Hashable objects which "
"compare equal must have the same hash value."
msgstr ""
"Un objet est *hachable* s'il a une empreinte (*hash*) qui ne change jamais. "
"(etil a besoin d'une méthode :meth:`__hash__`) et peut être comparé à "
"d'autres objets (avec la méthode :meth:`__eq__`). Les objets hachables dont "
"``_eq__`` dit être équivalents, ont aussi la même empreinte."

# 1050076b9ce04f849c1eb1fbc5f5bd07
#: glossary.rst:317
msgid ""
"Hashability makes an object usable as a dictionary key and a set member, "
"because these data structures use the hash value internally."
msgstr ""
"La hashabilité permet à un objet d'être utilisé comme clef de dictionnaire, "
"ou en temps que membre d'un *set*, car ces structures de données utilisent "
"ce *hash*."

# aeaae3457c804848888dd0e9ab39f3b1
#: glossary.rst:320
msgid ""
"All of Python's immutable built-in objects are hashable, while no mutable "
"containers (such as lists or dictionaries) are.  Objects which are instances "
"of user-defined classes are hashable by default; they all compare unequal "
"(except with themselves), and their hash value is their :func:`id`."
msgstr ""

# 14a0891e08a74fc6898cc5eced90003a
#: glossary.rst:327
msgid ""
"An Integrated Development Environment for Python.  IDLE is a basic editor "
"and interpreter environment which ships with the standard distribution of "
"Python."
msgstr ""
"Un environnement de développement intégré pour Python. IDLE est un éditeur "
"et interpréteur basique livré avec la distribution standard de Python."

# fdf0ba521b9a4c77ae4d0c8c4c6b9d52
#: glossary.rst:332
msgid ""
"An object with a fixed value.  Immutable objects include numbers, strings "
"and tuples.  Such an object cannot be altered.  A new object has to be "
"created if a different value has to be stored.  They play an important role "
"in places where a constant hash value is needed, for example as a key in a "
"dictionary."
msgstr ""
"Un objet dont la valeur ne change pas. Les nombres, les chaînes et les "
"tuples sont immuables. Ils ne peuvent être modifiés. Un nouvel objet doit "
"être créé si une valeur différente doit être stockée. Ils jouent un rôle "
"important aux endroits où une valeur de hash constante est requise, "
"typiquement en clef de dictionnaire."

# af1d18ea47fb45599760f4d181e74e2a
#: glossary.rst:339
msgid ""
"An object that both finds and loads a module; both a :term:`finder` and :"
"term:`loader` object."
msgstr ""
"Un objet qui trouve et charge un module, en même temps un :term:`finder` et "
"un :term:`loader`."

# 00535d15ab214f8fb8338429772937a5
#: glossary.rst:343
msgid ""
"Python has an interactive interpreter which means you can enter statements "
"and expressions at the interpreter prompt, immediately execute them and see "
"their results.  Just launch ``python`` with no arguments (possibly by "
"selecting it from your computer's main menu). It is a very powerful way to "
"test out new ideas or inspect modules and packages (remember ``help(x)``)."
msgstr ""
"Python à un interpréteur interactif, ce qui signifie que vous pouvez écrire "
"des expressions et instructions à l'invite de l'interpréteur, qui va les "
"exécuter immédiatement, et vous en présenter le résultat. Démarrez juste "
"``python`` (probablement depuis un menu de votre ordinateur). C'est un moyen "
"puissant pour tester de nouvelles idées ou étudier de nouveaux modules "
"(souvenez vous de ``help(x)``)."

# b663b760c08b41b2bd334082b2b513e5
#: glossary.rst:351
msgid ""
"Python is an interpreted language, as opposed to a compiled one, though the "
"distinction can be blurry because of the presence of the bytecode compiler.  "
"This means that source files can be run directly without explicitly creating "
"an executable which is then run. Interpreted languages typically have a "
"shorter development/debug cycle than compiled ones, though their programs "
"generally also run more slowly.  See also :term:`interactive`."
msgstr ""
"Python est un langage interprété, en opposition aux langages compilés, bien "
"que la frontière soit floue du à la présence d'un compilateur en bytecode. "
"Cela signifie que les fichiers sources peuvent être exécutés directement, "
"sans avoir à compiler un fichier exécutable intermédiaire. Les langages "
"interprétées ont généralement un cycle de développement / débug plus rapide, "
"et ils s'exécutent généralement plus lentement. Voir aussi :term:"
"`interactif`."

# 03c1ad39085245b2b8ec3074aee0cdfd
#: glossary.rst:360
msgid ""
"An object capable of returning its members one at a time. Examples of "
"iterables include all sequence types (such as :class:`list`, :class:`str`, "
"and :class:`tuple`) and some non-sequence types like :class:`dict`, :term:"
"`file objects <file object>`, and objects of any classes you define with an :"
"meth:`__iter__` or :meth:`__getitem__` method.  Iterables can be used in a :"
"keyword:`for` loop and in many other places where a sequence is needed (:"
"func:`zip`, :func:`map`, ...).  When an iterable object is passed as an "
"argument to the built-in function :func:`iter`, it returns an iterator for "
"the object.  This iterator is good for one pass over the set of values.  "
"When using iterables, it is usually not necessary to call :func:`iter` or "
"deal with iterator objects yourself.  The ``for`` statement does that "
"automatically for you, creating a temporary unnamed variable to hold the "
"iterator for the duration of the loop.  See also :term:`iterator`, :term:"
"`sequence`, and :term:`generator`."
msgstr ""

# 09a58d23edd54c9cbde01d21ab272593
#: glossary.rst:376
msgid ""
"An object representing a stream of data.  Repeated calls to the iterator's :"
"meth:`~iterator.__next__` method (or passing it to the built-in function :"
"func:`next`) return successive items in the stream.  When no more data are "
"available a :exc:`StopIteration` exception is raised instead.  At this "
"point, the iterator object is exhausted and any further calls to its :meth:"
"`__next__` method just raise :exc:`StopIteration` again.  Iterators are "
"required to have an :meth:`__iter__` method that returns the iterator object "
"itself so every iterator is also iterable and may be used in most places "
"where other iterables are accepted.  One notable exception is code which "
"attempts multiple iteration passes.  A container object (such as a :class:"
"`list`) produces a fresh new iterator each time you pass it to the :func:"
"`iter` function or use it in a :keyword:`for` loop.  Attempting this with an "
"iterator will just return the same exhausted iterator object used in the "
"previous iteration pass, making it appear like an empty container."
msgstr ""

# b6da80732c2045b184bbce02c54706ab
#: glossary.rst:391
msgid "More information can be found in :ref:`typeiter`."
msgstr "Plus d'informations ici : :ref:`typeiter`."

# 00eee6ee0a574618b323a6c0f3dd14de
#: glossary.rst:394
msgid ""
"A key function or collation function is a callable that returns a value used "
"for sorting or ordering.  For example, :func:`locale.strxfrm` is used to "
"produce a sort key that is aware of locale specific sort conventions."
msgstr ""
"Une fonction clef, est un objet appelable qui renvoie une valeur utilisée "
"pour trier ou organiser. Par exemple la fonction :func:`local.strxfrm` sert "
"à produire une fonction clef de tri prennant en compte les conventions de "
"tri spécifiques aux paramètres régionaux courants."

# 37d2749d3ab34ba2b583267bac44c3ec
#: glossary.rst:399
msgid ""
"A number of tools in Python accept key functions to control how elements are "
"ordered or grouped.  They include :func:`min`, :func:`max`, :func:`sorted`, :"
"meth:`list.sort`, :func:`heapq.nsmallest`, :func:`heapq.nlargest`, and :func:"
"`itertools.groupby`."
msgstr ""
"Plusieurs outils dans Python acceptent des fonctions clef pour maîtriser "
"comment les éléments dont triés ou groupés. Typiquement les fonctions :func:"
"`min`, :func:`max`, :func:`sorted`, :meth:`list.sort`, :func:`heapq."
"nsmallest`, :func:`heapq.nlargest`, et :func:`itertools.groupby`."

# 77ca379fa5474b91bd5304f2ed44ca58
#: glossary.rst:404
msgid ""
"There are several ways to create a key function.  For example. the :meth:"
"`str.lower` method can serve as a key function for case insensitive sorts.  "
"Alternatively, an ad-hoc key function can be built from a :keyword:`lambda` "
"expression such as ``lambda r: (r[0], r[2])``.  Also, the :mod:`operator` "
"module provides three key function constructors: :func:`~operator."
"attrgetter`, :func:`~operator.itemgetter`, and :func:`~operator."
"methodcaller`.  See the :ref:`Sorting HOW TO <sortinghowto>` for examples of "
"how to create and use key functions."
msgstr ""
"La méthode :meth:`str.lower` peut servir en fonction clef pour effectuer des "
"recherches insensibles à la casse. Aussi, il est possible de créer des "
"fonctions clef au besoin avec des expressions lambda, comme ``lambda r: "
"(r[0], r[2])``. Finalement le module :mod:`operator` fournit des "
"constructeurs de fonctions clef : :func:`~operator.attrgetter`, :func:"
"`~operator.itemgetter`, et :func:`~operator.methodcaller`. Voir :ref:"
"`Comment Trier <sortinghowto>` pour avoir des exemple de création et "
"d'utilisation de fonctions clés."

# be5c7d2028ff4e6789166fabcd110c1b
# 1f31eb5ca02d421591a785254ed299d9
#: glossary.rst:414 glossary.rst:584
msgid "See :term:`argument`."
msgstr "Voir :term:`argument`."

# 23e58aa44e884ad6bf19a3eb3ae564f1
#: glossary.rst:417
msgid ""
"An anonymous inline function consisting of a single :term:`expression` which "
"is evaluated when the function is called.  The syntax to create a lambda "
"function is ``lambda [arguments]: expression``"
msgstr ""
"Une fonction anonyme sous forme d'une expression, et ne contenant qu'une "
"expression, exécutée lorsqu'elle est appelée. La syntaxe pour créer des "
"fonctions lambda est: ``lambda [arguments]: expression``"

# c383515df4ec4848a04f0f7ebe2e4346
#: glossary.rst:422
msgid ""
"Look before you leap.  This coding style explicitly tests for pre-conditions "
"before making calls or lookups.  This style contrasts with the :term:`EAFP` "
"approach and is characterized by the presence of many :keyword:`if` "
"statements."
msgstr ""
"Regarde devant avant de tomber, (*Look before you leap*). Ce style de "
"programmation consiste à vérifier des conditions avant d'effectuer des "
"appels ou des accès. Ce style contraste avec le style :term:`EAFP` et se "
"caractérise par la présence de beaucoup d'instructions :keyword : `if`."

# 5a59bf0c0e984d0f89a1bf3636ae0f92
#: glossary.rst:427
msgid ""
"In a multi-threaded environment, the LBYL approach can risk introducing a "
"race condition between \"the looking\" and \"the leaping\".  For example, "
"the code, ``if key in mapping: return mapping[key]`` can fail if another "
"thread removes *key* from *mapping* after the test, but before the lookup. "
"This issue can be solved with locks or by using the EAFP approach."
msgstr ""
"Dans un environnement multi-thread, le style *LBYL* peut engendrer une "
"séquence critique (*race condition*) entre \"regarder\" et \"tomber\". Par "
"exemple, le code ``if key in mapping: return mapping[key]`` peut échouer si "
"un autre thread supprime la clef *key* du *mapping* après le test mais avant "
"l'accès. Ce problème peut être résolu avec des verrous (*locks*) ou avec "
"l'approche EAFP."

# 212d5a1ca3cd490e9edd786738d9965c
#: glossary.rst:434
msgid ""
"A built-in Python :term:`sequence`.  Despite its name it is more akin to an "
"array in other languages than to a linked list since access to elements are "
"O(1)."
msgstr ""
"Un type natif de :term:`sequence` dans Python. En dépit de son nom, une "
"``list`` ressemble plus à un *array* qu'à une liste chaînée puisque les "
"accès se font en O(1)."

# bb7bdad57d0a41c49577bbb5951a93ed
#: glossary.rst:439
msgid ""
"A compact way to process all or part of the elements in a sequence and "
"return a list with the results.  ``result = ['{:#04x}'.format(x) for x in "
"range(256) if x % 2 == 0]`` generates a list of strings containing even hex "
"numbers (0x..) in the range from 0 to 255. The :keyword:`if` clause is "
"optional.  If omitted, all elements in ``range(256)`` are processed."
msgstr ""
"Un moyen compacte de manipuler tous ou partie des éléments d'une séquence "
"renvoyant une liste avec les résultats. ``result = ['{:#04x}'.format(x) for "
"x in range(256) if x % 2 == 0]`` génère une liste de chaînes de caractères "
"contenant les nombres paires sous forme hexadécimale (0x...) de 0 à 255. La "
"clause :keyword : `if` est optionnelle. Si elle est omise, tous les éléments "
"du ``range(256)`` seront utilisés."

# af85382be6444bd8b6a0b0c14cd34219
#: glossary.rst:447
msgid ""
"An object that loads a module. It must define a method named :meth:"
"`load_module`. A loader is typically returned by a :term:`finder`. See :pep:"
"`302` for details and :class:`importlib.abc.Loader` for an :term:`abstract "
"base class`."
msgstr ""
"Un objet qui charge un module. Il doit définir une méthode nommée :meth:"
"`load_module`. Un *loader* est typiquement donné par un :term:`finder`. "
"Voir :pep:`302` pour les détails et :class:`importlib.ABC.Loader` pour sa :"
"term:`classe de base abstraite`."

# d3f8d163546b4aef87e07a1961c15c1e
#: glossary.rst:453
msgid ""
"A container object that supports arbitrary key lookups and implements the "
"methods specified in the :class:`~collections.Mapping` or :class:"
"`~collections.MutableMapping` :ref:`abstract base classes <collections-"
"abstract-base-classes>`.  Examples include :class:`dict`, :class:"
"`collections.defaultdict`, :class:`collections.OrderedDict` and :class:"
"`collections.Counter`."
msgstr ""

# e6b596d0452c4bc49837015cf8d21ad9
#: glossary.rst:461
msgid ""
"The class of a class.  Class definitions create a class name, a class "
"dictionary, and a list of base classes.  The metaclass is responsible for "
"taking those three arguments and creating the class.  Most object oriented "
"programming languages provide a default implementation.  What makes Python "
"special is that it is possible to create custom metaclasses.  Most users "
"never need this tool, but when the need arises, metaclasses can provide "
"powerful, elegant solutions.  They have been used for logging attribute "
"access, adding thread-safety, tracking object creation, implementing "
"singletons, and many other tasks."
msgstr ""
"La classe d'une classe. Les définitions de classe créent un nom pour la "
"classe, un dictionnaire et une liste de classes patentes. La métaclasse a "
"pour rôle de réunir ces trois paramètres pour construire la classe."

# e74d253e52094f0e8c259b548131f9fc
#: glossary.rst:471
msgid "More information can be found in :ref:`metaclasses`."
msgstr "Plus d'informations à ce sujet : :ref:`metaclasses`."

# fc9355391d354473bb61173a1c666f6c
#: glossary.rst:474
msgid ""
"A function which is defined inside a class body.  If called as an attribute "
"of an instance of that class, the method will get the instance object as its "
"first :term:`argument` (which is usually called ``self``). See :term:"
"`function` and :term:`nested scope`."
msgstr ""
"Une fonction définie dans une classe. Lorsqu'elle est appelée comme un "
"attribut d'une instance, la méthode reçoit l'instance en premier :term:"
"`argument` (qui par convention est nommé ``self``). Voir :term:`function` "
"et :term:`nested scope`."

# 8a1ebe93ab0049cd9c41ae0dd50b6df2
#: glossary.rst:480
msgid ""
"Method Resolution Order is the order in which base classes are searched for "
"a member during lookup. See `The Python 2.3 Method Resolution Order <http://"
"www.python.org/download/releases/2.3/mro/>`_."
msgstr ""

# 102a7da4a0db41a994fe6f56bb73aabc
#: glossary.rst:485
msgid "See :term:`method resolution order`."
msgstr "Voir :term:`ordre de  résolution des méthodes `."

# b1886f8391484c57a607799d5d1afbc2
#: glossary.rst:488
msgid ""
"Mutable objects can change their value but keep their :func:`id`.  See also :"
"term:`immutable`."
msgstr ""
"Un objet variable (*mutable*) peut changer de valeur tout en gardant le "
"même :func:`id`. Voir aussi :term:`immuable`."

# 4ee3d3a96f1947a59cbbb1ab7df27f37
#: glossary.rst:492
msgid ""
"Any tuple-like class whose indexable elements are also accessible using "
"named attributes (for example, :func:`time.localtime` returns a tuple-like "
"object where the *year* is accessible either with an index such as ``t[0]`` "
"or with a named attribute like ``t.tm_year``)."
msgstr ""
"Une classe, proche d'un tuple, dont les éléments, classiquement accessible "
"par leur indice, sont aussi accessibles par leur nom (par exemple, :func:"
"`time.localtime` donne un objet ressemblant à un tuple, dont *year* est "
"accessible par son indice : ``t[0]`` ou par son nom : ``t.tm_year``)."

# 3960ffe9684e484583344e4e9744dd68
#: glossary.rst:497
msgid ""
"A named tuple can be a built-in type such as :class:`time.struct_time`, or "
"it can be created with a regular class definition.  A full featured named "
"tuple can also be created with the factory function :func:`collections."
"namedtuple`.  The latter approach automatically provides extra features such "
"as a self-documenting representation like ``Employee(name='jones', "
"title='programmer')``."
msgstr ""
"Un *named tuple* peut être un type natif tel que :class:`time.struct_time` "
"ou il peut être construit comme une simple classe. Un *named tuple* complet "
"peut aussi être créé via la fonction :func:`collections.namedtuple`. Cette "
"dernière approche fournit automatiquement des fonctionnalités "
"supplémentaires, tel qu'une représentation lisible comme "
"``Employee(name='jones', title='programmer')``."

# e3c3f846eb5a42d0a0bee3ca6517c30a
#: glossary.rst:505
msgid ""
"The place where a variable is stored.  Namespaces are implemented as "
"dictionaries.  There are the local, global and built-in namespaces as well "
"as nested namespaces in objects (in methods).  Namespaces support modularity "
"by preventing naming conflicts.  For instance, the functions :func:`builtins."
"open` and :func:`os.open` are distinguished by their namespaces.  Namespaces "
"also aid readability and maintainability by making it clear which module "
"implements a function.  For instance, writing :func:`random.seed` or :func:"
"`itertools.islice` makes it clear that those functions are implemented by "
"the :mod:`random` and :mod:`itertools` modules, respectively."
msgstr ""

# 1628f77a53b3416194cb45147f039150
#: glossary.rst:517
msgid ""
"The ability to refer to a variable in an enclosing definition.  For "
"instance, a function defined inside another function can refer to variables "
"in the outer function.  Note that nested scopes by default work only for "
"reference and not for assignment.  Local variables both read and write in "
"the innermost scope.  Likewise, global variables read and write to the "
"global namespace.  The :keyword:`nonlocal` allows writing to outer scopes."
msgstr ""
"La possibilité de toucher une variable déclarée dans une définition "
"englobante. Typiquement, une fonction définie à l'intérieur d'une autre "
"fonction aura accès aux variables de cette autre fonction. Souvenez-vous "
"cependant que cela ne fonctionne que pour accéder à des variables, pas pour "
"les assigner. Les variables locales sont lues et assignées dans l'espace de "
"nom le plus proche. Tout comme les variables globales qui sont stockés sur "
"l'espace de noms global, le mot clef :keyword:`nonlocal` permet d'écrire "
"dans l'espace de nom dans lequel est déclaré la variable."

# 178a0ca5b2c34d399e170091b215bfea
#: glossary.rst:526
msgid ""
"Old name for the flavor of classes now used for all class objects.  In "
"earlier Python versions, only new-style classes could use Python's newer, "
"versatile features like :attr:`__slots__`, descriptors, properties, :meth:"
"`__getattribute__`, class methods, and static methods."
msgstr ""

# 168e9fdd587c456ebc6de793f8893f8e
#: glossary.rst:532
msgid ""
"Any data with state (attributes or value) and defined behavior (methods).  "
"Also the ultimate base class of any :term:`new-style class`."
msgstr ""
"N'importe quelle donnée comportant des états sous forme d'attributs ou de "
"valeurs, et un comportement (des :term:`méthodes <méthode>`). C'est aussi "
"(``object``) l'ancêtre commun à absolument toutes les :term:`nouvelles "
"classes <nouvelle classe>`."

# 8ae79a750a264a759e607d3449a8358e
#: glossary.rst:537
msgid ""
"A named entity in a :term:`function` (or method) definition that specifies "
"an :term:`argument` (or in some cases, arguments) that the function can "
"accept.  There are five types of parameters:"
msgstr ""

# 325e22a22fb94a189545e1a316076d7f
#: glossary.rst:541
msgid ""
":dfn:`positional-or-keyword`: specifies an argument that can be passed "
"either :term:`positionally <argument>` or as a :term:`keyword argument "
"<argument>`.  This is the default kind of parameter, for example *foo* and "
"*bar* in the following::"
msgstr ""

# 0ebb23d47127466391dd0e0f94a26316
#: glossary.rst:548
msgid ""
":dfn:`positional-only`: specifies an argument that can be supplied only by "
"position.  Python has no syntax for defining positional-only parameters.  "
"However, some built-in functions have positional-only parameters (e.g. :func:"
"`abs`)."
msgstr ""
":dfn:`positional-only`: un argument qui ne peut être donné que par sa "
"position. Python n'a pas de syntaxe pour déclarer de tels paramètre, "
"cependant des fonctions natives, comme :func:`abs` en utilisent."

# f313e01e240c4cdfb291e0eecc1c0200
#: glossary.rst:553
msgid ""
":dfn:`keyword-only`: specifies an argument that can be supplied only by "
"keyword.  Keyword-only parameters can be defined by including a single var-"
"positional parameter or bare ``*`` in the parameter list of the function "
"definition before them, for example *kw_only1* and *kw_only2* in the "
"following::"
msgstr ""
":dfn:`keyword-only`: définit un argument qui ne peut être fournit que par "
"nom. Les paramètres *keyword-only* peuvent être définis en utilisant un"

# 54cfd511cd764aebaed4f6605605af41
#: glossary.rst:561
msgid ""
":dfn:`var-positional`: specifies that an arbitrary sequence of positional "
"arguments can be provided (in addition to any positional arguments already "
"accepted by other parameters).  Such a parameter can be defined by "
"prepending the parameter name with ``*``, for example *args* in the "
"following::"
msgstr ""

# 30e60e5ebb524b53b9f5b83c3e719a8a
#: glossary.rst:569
msgid ""
":dfn:`var-keyword`: specifies that arbitrarily many keyword arguments can be "
"provided (in addition to any keyword arguments already accepted by other "
"parameters).  Such a parameter can be defined by prepending the parameter "
"name with ``**``, for example *kwargs* in the example above."
msgstr ""

# a1e40780ee024eefb9f9de4f034390e7
#: glossary.rst:575
msgid ""
"Parameters can specify both optional and required arguments, as well as "
"default values for some optional arguments."
msgstr ""
"Les paramètres peuvent décrire aussi bien des paramètres optionnels ou "
"obligatoires, aussi que des valeurs par défaut pour les paramètres "
"optionnels."

# ed6d25a6fe234046916f64e85ebcbbe9
#: glossary.rst:578
msgid ""
"See also the :term:`argument` glossary entry, the FAQ question on :ref:`the "
"difference between arguments and parameters <faq-argument-vs-parameter>`, "
"the :class:`inspect.Parameter` class, the :ref:`function` section, and :pep:"
"`362`."
msgstr ""
"Voir aussi :term:`argument` dans le glossaire, la question sur :ref:`la "
"différence entre les arguments et les paramètre <faq-argument-vs-parameter>` "
"dans la FAQ, la classe :class:`inspect.Parameter`, la section :ref:"
"`fonction`, et la :pep:`362`."

# 82a12c64dd2e43fca5e647c7f7b44874
#: glossary.rst:587
msgid ""
"Nickname for the Python 3.x release line (coined long ago when the release "
"of version 3 was something in the distant future.)  This is also abbreviated "
"\"Py3k\"."
msgstr ""
"Surnom de la série des Python 3.x (très vieux surnom donné à l'époque pour "
"Python 3 n'était qu'un futur lointain). Aussi abrégé \"Py3k\"."

# 237aac01670d4832b6f9d2c62df79088
#: glossary.rst:592
msgid ""
"An idea or piece of code which closely follows the most common idioms of the "
"Python language, rather than implementing code using concepts common to "
"other languages.  For example, a common idiom in Python is to loop over all "
"elements of an iterable using a :keyword:`for` statement.  Many other "
"languages don't have this type of construct, so people unfamiliar with "
"Python sometimes use a numerical counter instead::"
msgstr ""
"Une idée, ou un bout de code, qui suit de près la philosophie de Python, "
"parfois en opposition avec les concepts rencontrés dans d'autres langages. "
"Typiquement, la coutume en Python est de parcourir les éléments d'un "
"itérable en utilisant :keyword:`for`. Beaucoup de langages n'ont pas cette "
"possibilité, donc les gens qui ne sont pas habitués à Python pourraient "
"parfois utiliser un compteur à la place ::"

# 913e6e9d4b4a45e4a009754b85205893
#: glossary.rst:602
msgid "As opposed to the cleaner, Pythonic method::"
msgstr ""
"Plutôt qu'utiliser la méthode, plus propre et élégante, donc Pythonique ::"

# c5ad93e8cc6444bd8fcf6872b2ee8277
#: glossary.rst:608
msgid ""
"The number of references to an object.  When the reference count of an "
"object drops to zero, it is deallocated.  Reference counting is generally "
"not visible to Python code, but it is a key element of the :term:`CPython` "
"implementation.  The :mod:`sys` module defines a :func:`~sys.getrefcount` "
"function that programmers can call to return the reference count for a "
"particular object."
msgstr ""

# 22246c7f0b7d4fac9d1bbabbf7ae4d0d
#: glossary.rst:616
msgid ""
"A declaration inside a class that saves memory by pre-declaring space for "
"instance attributes and eliminating instance dictionaries.  Though popular, "
"the technique is somewhat tricky to get right and is best reserved for rare "
"cases where there are large numbers of instances in a memory-critical "
"application."
msgstr ""

# a50a49d7675e483a8e4f59cbb6c03325
#: glossary.rst:623
msgid ""
"An :term:`iterable` which supports efficient element access using integer "
"indices via the :meth:`__getitem__` special method and defines a :meth:"
"`__len__` method that returns the length of the sequence. Some built-in "
"sequence types are :class:`list`, :class:`str`, :class:`tuple`, and :class:"
"`bytes`. Note that :class:`dict` also supports :meth:`__getitem__` and :meth:"
"`__len__`, but is considered a mapping rather than a sequence because the "
"lookups use arbitrary :term:`immutable` keys rather than integers."
msgstr ""

# 5226408ffecd4c9ca14a3461d601810a
#: glossary.rst:633
msgid ""
"An object usually containing a portion of a :term:`sequence`.  A slice is "
"created using the subscript notation, ``[]`` with colons between numbers "
"when several are given, such as in ``variable_name[1:3:5]``.  The bracket "
"(subscript) notation uses :class:`slice` objects internally."
msgstr ""

# 51c764c3f36e45b1b27244ac3dacf588
#: glossary.rst:639
msgid ""
"A method that is called implicitly by Python to execute a certain operation "
"on a type, such as addition.  Such methods have names starting and ending "
"with double underscores.  Special methods are documented in :ref:"
"`specialnames`."
msgstr ""

# 839005a4150e4b63afd23d05a0bfc265
#: glossary.rst:645
msgid ""
"A statement is part of a suite (a \"block\" of code).  A statement is either "
"an :term:`expression` or a one of several constructs with a keyword, such "
"as :keyword:`if`, :keyword:`while` or :keyword:`for`."
msgstr ""

# c1b3e4430e624f588341689b5bd515bf
#: glossary.rst:650
msgid ""
"A string which is bound by three instances of either a quotation mark (\") "
"or an apostrophe (').  While they don't provide any functionality not "
"available with single-quoted strings, they are useful for a number of "
"reasons.  They allow you to include unescaped single and double quotes "
"within a string and they can span multiple lines without the use of the "
"continuation character, making them especially useful when writing "
"docstrings."
msgstr ""

# 6fc0255cee854fc79293bfe3fa151da3
#: glossary.rst:659
msgid ""
"The type of a Python object determines what kind of object it is; every "
"object has a type.  An object's type is accessible as its :attr:`__class__` "
"attribute or can be retrieved with ``type(obj)``."
msgstr ""

# 47a57b318c4a462dbdba375a7fd9ce6e
#: glossary.rst:664
msgid ""
"A manner of interpreting text streams in which all of the following are "
"recognized as ending a line: the Unix end-of-line convention ``'\\n'``, the "
"Windows convention ``'\\r\\n'``, and the old Macintosh convention "
"``'\\r'``.  See :pep:`278` and :pep:`3116`, as well as :func:`str."
"splitlines` for an additional use."
msgstr ""

# 1b940b9f34364c408528d5bc5164fb33
#: glossary.rst:671
msgid ""
"The objects returned from :meth:`dict.keys`, :meth:`dict.values`, and :meth:"
"`dict.items` are called dictionary views.  They are lazy sequences that will "
"see changes in the underlying dictionary.  To force the dictionary view to "
"become a full list use ``list(dictview)``.  See :ref:`dict-views`."
msgstr ""

# ccb2f9c132694f3c8626c49dd3e04149
#: glossary.rst:678
msgid ""
"A computer defined entirely in software.  Python's virtual machine executes "
"the :term:`bytecode` emitted by the bytecode compiler."
msgstr ""

# d381fcf5f251472da7016edec32302f5
#: glossary.rst:682
msgid ""
"Listing of Python design principles and philosophies that are helpful in "
"understanding and using the language.  The listing can be found by typing "
"\"``import this``\" at the interactive prompt."
msgstr ""
