# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2015, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-12-22 00:52+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

# 816b2dd9d8be40ac85f9c4bcc6647c49
#: whatsnew/2.0.rst:3
msgid "What's New in Python 2.0"
msgstr "Nouveautés de Python 2.0"

# 1dcdf27bc78743669400e7d02832cb1d
#: whatsnew/2.0.rst:5
msgid "A.M. Kuchling and Moshe Zadka"
msgstr "A.M. Kuchling et Moshe Zadka"

# 0c2aa464ec2741b28e52d413eb56431f
# e58d1035fcf94fb48cfa394c040f05af
# 5dac6e14a1a4474ebfb28032fb5a393f
#: whatsnew/2.0.rst:13 whatsnew/2.1.rst:13 whatsnew/2.2.rst:13
msgid "Introduction"
msgstr "Introduction"

# f0ef05c1e3394be9bd33078b82b4edba
#: whatsnew/2.0.rst:15
msgid ""
"A new release of Python, version 2.0, was released on October 16, 2000. This "
"article covers the exciting new features in 2.0, highlights some other "
"useful changes, and points out a few incompatible changes that may require "
"rewriting code."
msgstr ""
"Une nouvelle version de Python, la version 2.0, est sortie le 16 octobre "
"2000. Cet article traite des nouvelles fonctionnalités intéressantes de "
"cette version, met en évidence d'autres changements utiles, et souligne "
"quelques incompatibilités qui peuvent nécessiter la réécriture du code."

# 9fa2e53ff3c64917b416f2b9fa422b9e
#: whatsnew/2.0.rst:20
msgid ""
"Python's development never completely stops between releases, and a steady "
"flow of bug fixes and improvements are always being submitted. A host of "
"minor fixes, a few optimizations, additional docstrings, and better error "
"messages went into 2.0; to list them all would be impossible, but they're "
"certainly significant. Consult the publicly-available CVS logs if you want "
"to see the full list.  This progress is due to the five developers working "
"for  PythonLabs are now getting paid to spend their days fixing bugs, and "
"also due to the improved communication resulting  from moving to SourceForge."
msgstr ""
"Le développement de Python n'a jamais complétement été arrêté entre chaque "
"versions, et un flux constant de corrections de bogues et d'améliorations "
"ont toujours été soumis. Une foule de corrections mineures, quelques "
"optimisations, des docstrings supplémentaires, et de meilleurs messages "
"d'erreur sont apparus avec l'arrivée de la version 2.0; tous les énumérer "
"serait impossible, mais ils sont certainement significatif. Consultez les "
"journaux CVS publics disponibles pour obtenir la liste complète. Ce progrès "
"est dû aux cinq développeurs travaillant pour PythonLabs qui sont désormais "
"payés pour passer leurs journées à corriger les bugs, mais aussi en raison "
"de l'amélioration de la communication résultant du passage à SourceForge."

# 38d3cc87f45e437a94f37b50af0e6d8f
#: whatsnew/2.0.rst:33
msgid "What About Python 1.6?"
msgstr "A propos de Python 1.6"

# 2c932df77cd84b438735e087af54bb90
#: whatsnew/2.0.rst:35
msgid ""
"Python 1.6 can be thought of as the Contractual Obligations Python release. "
"After the core development team left CNRI in May 2000, CNRI requested that a "
"1.6 release be created, containing all the work on Python that had been "
"performed at CNRI.  Python 1.6 therefore represents the state of the CVS "
"tree as of May 2000, with the most significant new feature being Unicode "
"support.  Development continued after May, of course, so the 1.6 tree "
"received a few fixes to ensure that it's forward-compatible with Python "
"2.0.  1.6 is therefore part of Python's evolution, and not a side branch."
msgstr ""

# 2381cc4d0eaf4c9eb8483af43de52063
#: whatsnew/2.0.rst:44
msgid ""
"So, should you take much interest in Python 1.6?  Probably not.  The "
"1.6final and 2.0beta1 releases were made on the same day (September 5, "
"2000), the plan being to finalize Python 2.0 within a month or so.  If you "
"have applications to maintain, there seems little point in breaking things "
"by moving to 1.6, fixing them, and then having another round of breakage "
"within a month by moving to 2.0; you're better off just going straight to "
"2.0.  Most of the really interesting features described in this document are "
"only in 2.0, because a lot of work was done between May and September."
msgstr ""

# 744f8f80d0094da989f98f921775f966
#: whatsnew/2.0.rst:57
msgid "New Development Process"
msgstr "Nouveau processus de développement"

# bb36fa46432b4e2dbc32cf1eb957bb66
#: whatsnew/2.0.rst:59
msgid ""
"The most important change in Python 2.0 may not be to the code at all, but "
"to how Python is developed: in May 2000 the Python developers began using "
"the tools made available by SourceForge for storing  source code, tracking "
"bug reports, and managing the queue of patch submissions.  To report bugs or "
"submit patches for Python 2.0, use the bug tracking and patch manager tools "
"available from Python's project page, located at http://sourceforge.net/"
"projects/python/."
msgstr ""

# 181e855ebd3240a49f5e230421895ad8
#: whatsnew/2.0.rst:66
msgid ""
"The most important of the services now hosted at SourceForge is the Python "
"CVS tree, the version-controlled repository containing the source code for "
"Python. Previously, there were roughly 7 or so people who had write access "
"to the CVS tree, and all patches had to be inspected and checked in by one "
"of the people on this short list. Obviously, this wasn't very scalable.  By "
"moving the CVS tree to SourceForge, it became possible to grant write access "
"to more people; as of September 2000 there were 27 people able to check in "
"changes, a fourfold increase.  This makes possible large-scale changes that "
"wouldn't be attempted if they'd have to be filtered through the small group "
"of core developers.  For example, one day Peter Schneider-Kamp took it into "
"his head to drop K&R C compatibility and convert the C source for Python to "
"ANSI C. After getting approval on the python-dev mailing list, he launched "
"into a flurry of checkins that lasted about a week, other developers joined "
"in to help, and the job was done.  If there were only 5 people with write "
"access, probably that task would have been viewed as \"nice, but not worth "
"the time and effort needed\" and it would never have gotten done."
msgstr ""

# c17fc491f2aa431dac280c4c7066a05a
#: whatsnew/2.0.rst:83
msgid ""
"The shift to using SourceForge's services has resulted in a remarkable "
"increase in the speed of development.  Patches now get submitted, commented "
"on, revised by people other than the original submitter, and bounced back "
"and forth between people until the patch is deemed worth checking in.  Bugs "
"are tracked in one central location and can be assigned to a specific person "
"for fixing, and we can count the number of open bugs to measure progress.  "
"This didn't come without a cost: developers now have more e-mail to deal "
"with, more mailing lists to follow, and special tools had to be written for "
"the new environment. For example, SourceForge sends default patch and bug "
"notification e-mail messages that are completely unhelpful, so Ka-Ping Yee "
"wrote an HTML screen-scraper that sends more useful messages."
msgstr ""

# 1202adb2446d4c98b34989f5608ef3ec
#: whatsnew/2.0.rst:95
msgid ""
"The ease of adding code caused a few initial growing pains, such as code was "
"checked in before it was ready or without getting clear agreement from the "
"developer group.  The approval process that has emerged is somewhat similar "
"to that used by the Apache group. Developers can vote +1, +0, -0, or -1 on a "
"patch; +1 and -1 denote acceptance or rejection, while +0 and -0 mean the "
"developer is mostly indifferent to the change, though with a slight positive "
"or negative slant.  The most significant change from the Apache model is "
"that the voting is essentially advisory, letting Guido van Rossum, who has "
"Benevolent Dictator For Life status, know what the general opinion is. He "
"can still ignore the result of a vote, and approve or reject a change even "
"if the community disagrees with him."
msgstr ""

# 482f09271b22420cbae8ecc8b1219d82
#: whatsnew/2.0.rst:106
msgid ""
"Producing an actual patch is the last step in adding a new feature, and is "
"usually easy compared to the earlier task of coming up with a good design. "
"Discussions of new features can often explode into lengthy mailing list "
"threads, making the discussion hard to follow, and no one can read every "
"posting to python-dev.  Therefore, a relatively formal process has been set "
"up to write Python Enhancement Proposals (PEPs), modelled on the Internet "
"RFC process.  PEPs are draft documents that describe a proposed new feature, "
"and are continually revised until the community reaches a consensus, either "
"accepting or rejecting the proposal.  Quoting from the introduction to PEP "
"1, \"PEP Purpose and Guidelines\":"
msgstr ""

# 244aa4d87777429db93681bb34cf08e3
#: whatsnew/2.0.rst:120
msgid ""
"PEP stands for Python Enhancement Proposal.  A PEP is a design document "
"providing information to the Python community, or describing a new feature "
"for Python.  The PEP should provide a concise technical specification of the "
"feature and a rationale for the feature."
msgstr ""

# d21130add18642239ba439edffc79aa5
#: whatsnew/2.0.rst:125
msgid ""
"We intend PEPs to be the primary mechanisms for proposing new features, for "
"collecting community input on an issue, and for documenting the design "
"decisions that have gone into Python.  The PEP author is responsible for "
"building consensus within the community and documenting dissenting opinions."
msgstr ""

# 49ac26acda564ec5afb51d5470deabf8
#: whatsnew/2.0.rst:130
msgid ""
"Read the rest of PEP 1 for the details of the PEP editorial process, style, "
"and format.  PEPs are kept in the Python CVS tree on SourceForge, though "
"they're not part of the Python 2.0 distribution, and are also available in "
"HTML form from http://www.python.org/peps/.  As of September 2000, there are "
"25 PEPS, ranging from PEP 201, \"Lockstep Iteration\", to PEP 225, "
"\"Elementwise/Objectwise Operators\"."
msgstr ""

# 0b4c600f31ff4d25ac1c0e18753335a3
# 84156261df4f49969cf175932c00d41f
#: whatsnew/2.0.rst:141 whatsnew/3.2.rst:2379
msgid "Unicode"
msgstr ""

# b39c1b226bb64cd3bd4a16c175a492b2
#: whatsnew/2.0.rst:143
msgid ""
"The largest new feature in Python 2.0 is a new fundamental data type: "
"Unicode strings.  Unicode uses 16-bit numbers to represent characters "
"instead of the 8-bit number used by ASCII, meaning that 65,536 distinct "
"characters can be supported."
msgstr ""

# bbaf8e8d86d14bbcb1539a4b06af65be
#: whatsnew/2.0.rst:148
msgid ""
"The final interface for Unicode support was arrived at through countless "
"often- stormy discussions on the python-dev mailing list, and mostly "
"implemented by Marc-André Lemburg, based on a Unicode string type "
"implementation by Fredrik Lundh.  A detailed explanation of the interface "
"was written up as :pep:`100`, \"Python Unicode Integration\". This article "
"will simply cover the most significant points about the Unicode interfaces."
msgstr ""

# 41395e1664fe4f829ff95d6da4966740
#: whatsnew/2.0.rst:155
msgid ""
"In Python source code, Unicode strings are written as ``u\"string\"``.  "
"Arbitrary Unicode characters can be written using a new escape sequence, ``"
"\\uHHHH``, where *HHHH* is a 4-digit hexadecimal number from 0000 to FFFF.  "
"The existing ``\\xHHHH`` escape sequence can also be used, and octal escapes "
"can be used for characters up to U+01FF, which is represented by ``\\777``."
msgstr ""

# ae1c4bb9a50742b6a7905a5867c1f8b9
#: whatsnew/2.0.rst:161
msgid ""
"Unicode strings, just like regular strings, are an immutable sequence type. "
"They can be indexed and sliced, but not modified in place. Unicode strings "
"have an ``encode( [encoding] )`` method that returns an 8-bit string in the "
"desired encoding.  Encodings are named by strings, such as ``'ascii'``, "
"``'utf-8'``, ``'iso-8859-1'``, or whatever.  A codec API is defined for "
"implementing and registering new encodings that are then available "
"throughout a Python program. If an encoding isn't specified, the default "
"encoding is usually 7-bit ASCII, though it can be changed for your Python "
"installation by calling the :func:`sys.setdefaultencoding(encoding)` "
"function in a customised version of :file:`site.py`."
msgstr ""

# 4028550cff524bb2a50d3670ed67fab0
#: whatsnew/2.0.rst:172
msgid ""
"Combining 8-bit and Unicode strings always coerces to Unicode, using the "
"default ASCII encoding; the result of ``'a' + u'bc'`` is ``u'abc'``."
msgstr ""

# f759ff6c3407414690db30a7d1158a1c
#: whatsnew/2.0.rst:175
msgid ""
"New built-in functions have been added, and existing built-ins modified to "
"support Unicode:"
msgstr ""

# a435e9051a8540d78f28491dc184483f
#: whatsnew/2.0.rst:178
msgid ""
"``unichr(ch)`` returns a Unicode string 1 character long, containing the "
"character *ch*."
msgstr ""

# de53bbef013547fd9e12f965efe28de5
#: whatsnew/2.0.rst:181
msgid ""
"``ord(u)``, where *u* is a 1-character regular or Unicode string, returns "
"the number of the character as an integer."
msgstr ""

# 547acbb9db8e43dca7a64249be97d387
#: whatsnew/2.0.rst:184
msgid ""
"``unicode(string [, encoding]  [, errors] )`` creates a Unicode string from "
"an 8-bit string.  ``encoding`` is a string naming the encoding to use. The "
"``errors`` parameter specifies the treatment of characters that are invalid "
"for the current encoding; passing ``'strict'`` as the value causes an "
"exception to be raised on any encoding error, while ``'ignore'`` causes "
"errors to be silently ignored and ``'replace'`` uses U+FFFD, the official "
"replacement character, in case of any problems."
msgstr ""

# 8e52dc38148c407582fd395ed671edc5
#: whatsnew/2.0.rst:192
msgid ""
"The ``exec`` statement, and various built-ins such as ``eval()``, "
"``getattr()``, and ``setattr()`` will also accept Unicode strings as well as "
"regular strings.  (It's possible that the process of fixing this missed some "
"built-ins; if you find a built-in function that accepts strings but doesn't "
"accept Unicode strings at all, please report it as a bug.)"
msgstr ""

# c090a3668408405a84f8c8de7681307a
#: whatsnew/2.0.rst:198
msgid ""
"A new module, :mod:`unicodedata`, provides an interface to Unicode character "
"properties.  For example, ``unicodedata.category(u'A')`` returns the 2-"
"character string 'Lu', the 'L' denoting it's a letter, and 'u' meaning that "
"it's uppercase. ``unicodedata.bidirectional(u'\\u0660')`` returns 'AN', "
"meaning that U+0660 is an Arabic number."
msgstr ""

# c97fc60488da4b88b50c2565f27d32e7
#: whatsnew/2.0.rst:204
msgid ""
"The :mod:`codecs` module contains functions to look up existing encodings "
"and register new ones.  Unless you want to implement a new encoding, you'll "
"most often use the :func:`codecs.lookup(encoding)` function, which returns a "
"4-element tuple: ``(encode_func, decode_func, stream_reader, "
"stream_writer)``."
msgstr ""

# 1b139025ce6846e2ace0251a8441a1ee
#: whatsnew/2.0.rst:209
msgid ""
"*encode_func* is a function that takes a Unicode string, and returns a 2-"
"tuple ``(string, length)``.  *string* is an 8-bit string containing a "
"portion (perhaps all) of the Unicode string converted into the given "
"encoding, and *length* tells you how much of the Unicode string was "
"converted."
msgstr ""

# 358795aece0f437c8d4cb2ea5f565891
#: whatsnew/2.0.rst:214
msgid ""
"*decode_func* is the opposite of *encode_func*, taking an 8-bit string and "
"returning a 2-tuple ``(ustring, length)``, consisting of the resulting "
"Unicode string *ustring* and the integer *length* telling how much of the 8-"
"bit string was consumed."
msgstr ""

# 486709bddf7749ef95d2fbfee55c44a5
#: whatsnew/2.0.rst:219
msgid ""
"*stream_reader* is a class that supports decoding input from a stream. "
"*stream_reader(file_obj)* returns an object that supports the :meth:`read`, :"
"meth:`readline`, and :meth:`readlines` methods.  These methods will all "
"translate from the given encoding and return Unicode strings."
msgstr ""

# cb0fadeccf9249aa9327db7c71cef503
#: whatsnew/2.0.rst:224
msgid ""
"*stream_writer*, similarly, is a class that supports encoding output to a "
"stream.  *stream_writer(file_obj)* returns an object that supports the :meth:"
"`write` and :meth:`writelines` methods.  These methods expect Unicode "
"strings, translating them to the given encoding on output."
msgstr ""

# b3607eb256384b238993957fd3bc6deb
#: whatsnew/2.0.rst:229
msgid ""
"For example, the following code writes a Unicode string into a file,  "
"encoding it as UTF-8::"
msgstr ""

# 71009c91f5c14319ad73a63717be1d17
#: whatsnew/2.0.rst:243
msgid "The following code would then read UTF-8 input from the file::"
msgstr ""

# 18c786800ce544fb86843e82480fb99b
#: whatsnew/2.0.rst:249
msgid ""
"Unicode-aware regular expressions are available through the :mod:`re` "
"module, which has a new underlying implementation called SRE written by "
"Fredrik Lundh of Secret Labs AB."
msgstr ""

# db5fb1bbd2074dada058382c8dd090d1
#: whatsnew/2.0.rst:253
msgid ""
"A ``-U`` command line option was added which causes the Python compiler to "
"interpret all string literals as Unicode string literals. This is intended "
"to be used in testing and future-proofing your Python code, since some "
"future version of Python may drop support for 8-bit strings and provide only "
"Unicode strings."
msgstr ""

# 6840c7c0a3da4c50b15ad6be7959527d
#: whatsnew/2.0.rst:262
msgid "List Comprehensions"
msgstr "Compréhensions de listes"

# d140c77dc2224fc2bd7c5a052e6e4c23
#: whatsnew/2.0.rst:264
msgid ""
"Lists are a workhorse data type in Python, and many programs manipulate a "
"list at some point.  Two common operations on lists are to loop over them, "
"and either pick out the elements that meet a certain criterion, or apply "
"some function to each element.  For example, given a list of strings, you "
"might want to pull out all the strings containing a given substring, or "
"strip off trailing whitespace from each line."
msgstr ""

# ca528723e94c4653bf35f7736e672663
#: whatsnew/2.0.rst:271
msgid ""
"The existing :func:`map` and :func:`filter` functions can be used for this "
"purpose, but they require a function as one of their arguments.  This is "
"fine if there's an existing built-in function that can be passed directly, "
"but if there isn't, you have to create a little function to do the required "
"work, and Python's scoping rules make the result ugly if the little function "
"needs additional information.  Take the first example in the previous "
"paragraph, finding all the strings in the list containing a given "
"substring.  You could write the following to do it::"
msgstr ""

# 3a1938f1e30f424fadbfaeead6ae3abb
#: whatsnew/2.0.rst:286
msgid ""
"Because of Python's scoping rules, a default argument is used so that the "
"anonymous function created by the :keyword:`lambda` statement knows what "
"substring is being searched for.  List comprehensions make this cleaner::"
msgstr ""

# a1ee1d4761a142679d632ce7e81ea6ae
#: whatsnew/2.0.rst:292
msgid "List comprehensions have the form::"
msgstr ""

# 68db5700f98443a18bf52d44c8cdf744
#: whatsnew/2.0.rst:299
msgid ""
"The :keyword:`for`...\\ :keyword:`in` clauses contain the sequences to be "
"iterated over.  The sequences do not have to be the same length, because "
"they are *not* iterated over in parallel, but from left to right; this is "
"explained more clearly in the following paragraphs.  The elements of the "
"generated list will be the successive values of *expression*.  The final :"
"keyword:`if` clause is optional; if present, *expression* is only evaluated "
"and added to the result if *condition* is true."
msgstr ""

# c84bca281e5c47d68f0852c43825ce70
#: whatsnew/2.0.rst:307
msgid ""
"To make the semantics very clear, a list comprehension is equivalent to the "
"following Python code::"
msgstr ""

# b883d0d872c847849b717b6898f9894d
#: whatsnew/2.0.rst:319
msgid ""
"This means that when there are multiple :keyword:`for`...\\ :keyword:`in` "
"clauses, the resulting list will be equal to the product of the lengths of "
"all the sequences.  If you have two lists of length 3, the output list is 9 "
"elements long::"
msgstr ""

# bfd8bbcae8b34c1d95ef384d14387c41
#: whatsnew/2.0.rst:330
msgid ""
"To avoid introducing an ambiguity into Python's grammar, if *expression* is "
"creating a tuple, it must be surrounded with parentheses.  The first list "
"comprehension below is a syntax error, while the second one is correct::"
msgstr ""

# 72e45b56b87f45258e750698d67c50e3
#: whatsnew/2.0.rst:339
msgid ""
"The idea of list comprehensions originally comes from the functional "
"programming language Haskell (http://www.haskell.org).  Greg Ewing argued "
"most effectively for adding them to Python and wrote the initial list "
"comprehension patch, which was then discussed for a seemingly endless time "
"on the python-dev mailing list and kept up-to-date by Skip Montanaro."
msgstr ""

# b75c48b99120481088b517941bc92a05
#: whatsnew/2.0.rst:349
msgid "Augmented Assignment"
msgstr ""

# 5e1c4afd219d486c8b8a1efad559af90
#: whatsnew/2.0.rst:351
msgid ""
"Augmented assignment operators, another long-requested feature, have been "
"added to Python 2.0.  Augmented assignment operators include ``+=``, ``-=``, "
"``*=``, and so forth.  For example, the statement ``a += 2`` increments the "
"value of the variable  ``a`` by 2, equivalent to the slightly lengthier ``a "
"= a + 2``."
msgstr ""

# 20bfa9fadb6649c3a245ddba1b3ed1a9
#: whatsnew/2.0.rst:356
msgid ""
"The full list of supported assignment operators is ``+=``, ``-=``, ``*=``, "
"``/=``, ``%=``, ``**=``, ``&=``, ``|=``, ``^=``, ``>>=``, and ``<<=``.  "
"Python classes can override the augmented assignment operators by defining "
"methods named :meth:`__iadd__`, :meth:`__isub__`, etc.  For example, the "
"following :class:`Number` class stores a number and supports using += to "
"create a new instance with an incremented value."
msgstr ""

# 8fb0c2cd484e492387c8723c0c36f50c
#: whatsnew/2.0.rst:377
msgid ""
"The :meth:`__iadd__` special method is called with the value of the "
"increment, and should return a new instance with an appropriately modified "
"value; this return value is bound as the new value of the variable on the "
"left-hand side."
msgstr ""

# 11fd4d3f8ed64d1caf088967feb39217
#: whatsnew/2.0.rst:381
msgid ""
"Augmented assignment operators were first introduced in the C programming "
"language, and most C-derived languages, such as :program:`awk`, C++, Java, "
"Perl, and PHP also support them.  The augmented assignment patch was "
"implemented by Thomas Wouters."
msgstr ""

# 5ded1162c7b3406b9203d462323dec32
#: whatsnew/2.0.rst:390
msgid "String Methods"
msgstr ""

# 22e435561b7141639075d5f4dd692ae7
#: whatsnew/2.0.rst:392
msgid ""
"Until now string-manipulation functionality was in the :mod:`string` module, "
"which was usually a front-end for the :mod:`strop` module written in C.  The "
"addition of Unicode posed a difficulty for the :mod:`strop` module, because "
"the functions would all need to be rewritten in order to accept either 8-bit "
"or Unicode strings.  For functions such as :func:`string.replace`, which "
"takes 3 string arguments, that means eight possible permutations, and "
"correspondingly complicated code."
msgstr ""

# c46ac2a7f149462eb98c6346b8dbb85a
#: whatsnew/2.0.rst:400
msgid ""
"Instead, Python 2.0 pushes the problem onto the string type, making string "
"manipulation functionality available through methods on both 8-bit strings "
"and Unicode strings.   ::"
msgstr ""

# 50b61b2ce51848dbaf44a4c437eccaf5
#: whatsnew/2.0.rst:411
msgid ""
"One thing that hasn't changed, a noteworthy April Fools' joke "
"notwithstanding, is that Python strings are immutable. Thus, the string "
"methods return new strings, and do not modify the string on which they "
"operate."
msgstr ""

# 2b0fac9f441149a1841180c563a2fd8b
#: whatsnew/2.0.rst:415
msgid ""
"The old :mod:`string` module is still around for backwards compatibility, "
"but it mostly acts as a front-end to the new string methods."
msgstr ""

# 00e87de53ab6436c86257c9f26ad431c
#: whatsnew/2.0.rst:418
msgid ""
"Two methods which have no parallel in pre-2.0 versions, although they did "
"exist in JPython for quite some time, are :meth:`startswith` and :meth:"
"`endswith`. ``s.startswith(t)`` is equivalent to ``s[:len(t)] == t``, while "
"``s.endswith(t)`` is equivalent to ``s[-len(t):] == t``."
msgstr ""

# 0c35af5e36d0434eb7e268094bfc33a1
#: whatsnew/2.0.rst:423
msgid ""
"One other method which deserves special mention is :meth:`join`.  The :meth:"
"`join` method of a string receives one parameter, a sequence of strings, and "
"is equivalent to the :func:`string.join` function from the old :mod:`string` "
"module, with the arguments reversed. In other words, ``s.join(seq)`` is "
"equivalent to the old ``string.join(seq, s)``."
msgstr ""

# b4dc5459f8214897921c9fbb88951dde
#: whatsnew/2.0.rst:433
msgid "Garbage Collection of Cycles"
msgstr ""

# dd412769abc84294a0416961867e8c67
#: whatsnew/2.0.rst:435
msgid ""
"The C implementation of Python uses reference counting to implement garbage "
"collection.  Every Python object maintains a count of the number of "
"references pointing to itself, and adjusts the count as references are "
"created or destroyed.  Once the reference count reaches zero, the object is "
"no longer accessible, since you need to have a reference to an object to "
"access it, and if the count is zero, no references exist any longer."
msgstr ""

# 0932ca51468e4b5d9ef1fa971da17ba3
#: whatsnew/2.0.rst:442
msgid ""
"Reference counting has some pleasant properties: it's easy to understand and "
"implement, and the resulting implementation is portable, fairly fast, and "
"reacts well with other libraries that implement their own memory handling "
"schemes.  The major problem with reference counting is that it sometimes "
"doesn't realise that objects are no longer accessible, resulting in a memory "
"leak.  This happens when there are cycles of references."
msgstr ""

# 99b06b0b03a649a0875aee76df6b6786
#: whatsnew/2.0.rst:449
msgid ""
"Consider the simplest possible cycle,  a class instance which has a "
"reference to itself::"
msgstr ""

# 4aba55c7b0c94404913adf7dcba3a9fc
#: whatsnew/2.0.rst:455
msgid ""
"After the above two lines of code have been executed, the reference count of "
"``instance`` is 2; one reference is from the variable named ``'instance'``, "
"and the other is from the ``myself`` attribute of the instance."
msgstr ""

# 68402103310844abadb60f4a40c3c6b8
#: whatsnew/2.0.rst:459
msgid ""
"If the next line of code is ``del instance``, what happens?  The reference "
"count of ``instance`` is decreased by 1, so it has a reference count of 1; "
"the reference in the ``myself`` attribute still exists.  Yet the instance is "
"no longer accessible through Python code, and it could be deleted.  Several "
"objects can participate in a cycle if they have references to each other, "
"causing all of the objects to be leaked."
msgstr ""

# dc8ab4e103ad48efb174f65de4321af5
#: whatsnew/2.0.rst:466
msgid ""
"Python 2.0 fixes this problem by periodically executing a cycle detection "
"algorithm which looks for inaccessible cycles and deletes the objects "
"involved. A new :mod:`gc` module provides functions to perform a garbage "
"collection, obtain debugging statistics, and tuning the collector's "
"parameters."
msgstr ""

# 52f5a496f807417ab5547b57fdac0e98
#: whatsnew/2.0.rst:471
msgid ""
"Running the cycle detection algorithm takes some time, and therefore will "
"result in some additional overhead.  It is hoped that after we've gotten "
"experience with the cycle collection from using 2.0, Python 2.1 will be able "
"to minimize the overhead with careful tuning.  It's not yet obvious how much "
"performance is lost, because benchmarking this is tricky and depends "
"crucially on how often the program creates and destroys objects.  The "
"detection of cycles can be disabled when Python is compiled, if you can't "
"afford even a tiny speed penalty or suspect that the cycle collection is "
"buggy, by specifying the :option:`--without-cycle-gc` switch when running "
"the :program:`configure` script."
msgstr ""

# 38103c8fff7d4535a715ace867b314f1
#: whatsnew/2.0.rst:482
msgid ""
"Several people tackled this problem and contributed to a solution.  An early "
"implementation of the cycle detection approach was written by Toby Kelsey.  "
"The current algorithm was suggested by Eric Tiedemann during a visit to "
"CNRI, and Guido van Rossum and Neil Schemenauer wrote two different "
"implementations, which were later integrated by Neil.  Lots of other people "
"offered suggestions along the way; the March 2000 archives of the python-dev "
"mailing list contain most of the relevant discussion, especially in the "
"threads titled \"Reference cycle collection for Python\" and \"Finalization "
"again\"."
msgstr ""

# 534b616cdf8d476a95ff8bf6ffca7f44
#: whatsnew/2.0.rst:495
msgid "Other Core Changes"
msgstr ""

# 0704931faff4440aaa45af5904e59e41
#: whatsnew/2.0.rst:497
msgid ""
"Various minor changes have been made to Python's syntax and built-in "
"functions. None of the changes are very far-reaching, but they're handy "
"conveniences."
msgstr ""

# c7e47b9bfdb54cd797b3d92cd41001e9
#: whatsnew/2.0.rst:502
msgid "Minor Language Changes"
msgstr ""

# a0c200152754439fade0b41b970aa116
#: whatsnew/2.0.rst:504
msgid ""
"A new syntax makes it more convenient to call a given function with a tuple "
"of arguments and/or a dictionary of keyword arguments. In Python 1.5 and "
"earlier, you'd use the :func:`apply` built-in function: ``apply(f, args, "
"kw)`` calls the function :func:`f` with the argument tuple *args* and the "
"keyword arguments in the dictionary *kw*.  :func:`apply`  is the same in "
"2.0, but thanks to a patch from Greg Ewing, ``f(*args, **kw)`` as a shorter "
"and clearer way to achieve the same effect.  This syntax is symmetrical with "
"the syntax for defining functions::"
msgstr ""

# 27124c535b024f6aaa97fdf6bf738cfd
#: whatsnew/2.0.rst:518
msgid ""
"The ``print`` statement can now have its output directed to a file-like "
"object by following the ``print`` with  ``>> file``, similar to the "
"redirection operator in Unix shells. Previously you'd either have to use "
"the :meth:`write` method of the file-like object, which lacks the "
"convenience and simplicity of ``print``, or you could assign a new value to "
"``sys.stdout`` and then restore the old value.  For sending output to "
"standard error, it's much easier to write this::"
msgstr ""

# 423d9c292de44ea4bac4ec522f5c92a9
#: whatsnew/2.0.rst:528
msgid ""
"Modules can now be renamed on importing them, using the syntax ``import "
"module as name`` or ``from module import name as othername``.  The patch was "
"submitted by Thomas Wouters."
msgstr ""

# eba62c01e2e649cd9e7652beac328433
#: whatsnew/2.0.rst:532
msgid ""
"A new format style is available when using the ``%`` operator; '%r' will "
"insert the :func:`repr` of its argument.  This was also added from symmetry "
"considerations, this time for symmetry with the existing '%s' format style, "
"which inserts the :func:`str` of its argument.  For example, ``'%r %s' % "
"('abc', 'abc')`` returns a string containing ``'abc' abc``."
msgstr ""

# c23270d1023b42938b717b56e38aa1d6
#: whatsnew/2.0.rst:538
msgid ""
"Previously there was no way to implement a class that overrode Python's "
"built-in :keyword:`in` operator and implemented a custom version.  ``obj in "
"seq`` returns true if *obj* is present in the sequence *seq*; Python "
"computes this by simply trying every index of the sequence until either "
"*obj* is found or an :exc:`IndexError` is encountered.  Moshe Zadka "
"contributed a patch which adds a :meth:`__contains__` magic method for "
"providing a custom implementation for :keyword:`in`. Additionally, new built-"
"in objects written in C can define what :keyword:`in` means for them via a "
"new slot in the sequence protocol."
msgstr ""

# cab91a5800a74633a5cc46651550ad54
#: whatsnew/2.0.rst:547
msgid ""
"Earlier versions of Python used a recursive algorithm for deleting objects. "
"Deeply nested data structures could cause the interpreter to fill up the C "
"stack and crash; Christian Tismer rewrote the deletion logic to fix this "
"problem.  On a related note, comparing recursive objects recursed infinitely "
"and crashed; Jeremy Hylton rewrote the code to no longer crash, producing a "
"useful result instead.  For example, after this code::"
msgstr ""

# bbf90c56f2b64cbfbfeb7c31c1bcf01d
#: whatsnew/2.0.rst:559
msgid ""
"The comparison ``a==b`` returns true, because the two recursive data "
"structures are isomorphic. See the thread \"trashcan and PR#7\" in the April "
"2000 archives of the python-dev mailing list for the discussion leading up "
"to this implementation, and some useful relevant links.    Note that "
"comparisons can now also raise exceptions. In earlier versions of Python, a "
"comparison operation such as ``cmp(a,b)`` would always produce an answer, "
"even if a user-defined :meth:`__cmp__` method encountered an error, since "
"the resulting exception would simply be silently swallowed."
msgstr ""

# 248b558d86a84adb8bb5d74a8ea28c10
#: whatsnew/2.0.rst:571
msgid ""
"Work has been done on porting Python to 64-bit Windows on the Itanium "
"processor, mostly by Trent Mick of ActiveState.  (Confusingly, ``sys."
"platform`` is still ``'win32'`` on Win64 because it seems that for ease of "
"porting, MS Visual C++ treats code as 32 bit on Itanium.) PythonWin also "
"supports Windows CE; see the Python CE page at http://pythonce.sourceforge."
"net/ for more information."
msgstr ""

# 43972d37d0694f889d48344e5165bc53
#: whatsnew/2.0.rst:577
msgid ""
"Another new platform is Darwin/MacOS X; initial support for it is in Python "
"2.0. Dynamic loading works, if you specify \"configure --with-dyld --with-"
"suffix=.x\". Consult the README in the Python source distribution for more "
"instructions."
msgstr ""

# 1655d1b9fd894d67a7b11e6538a628fd
#: whatsnew/2.0.rst:581
msgid ""
"An attempt has been made to alleviate one of Python's warts, the often-"
"confusing :exc:`NameError` exception when code refers to a local variable "
"before the variable has been assigned a value.  For example, the following "
"code raises an exception on the ``print`` statement in both 1.5.2 and 2.0; "
"in 1.5.2 a :exc:`NameError` exception is raised, while 2.0 raises a new :exc:"
"`UnboundLocalError` exception. :exc:`UnboundLocalError` is a subclass of :"
"exc:`NameError`, so any existing code that expects :exc:`NameError` to be "
"raised should still work. ::"
msgstr ""

# f74584a296b64f5a972ab28ca85e3713
#: whatsnew/2.0.rst:595
msgid ""
"Two new exceptions, :exc:`TabError` and :exc:`IndentationError`, have been "
"introduced.  They're both subclasses of :exc:`SyntaxError`, and are raised "
"when Python code is found to be improperly indented."
msgstr ""

# 1e10b43eb63244e69ed17c114ee52401
#: whatsnew/2.0.rst:601
msgid "Changes to Built-in Functions"
msgstr ""

# 572e4bcc8e064bc6aa82bbbd5fbaa0b3
#: whatsnew/2.0.rst:603
msgid ""
"A new built-in, :func:`zip(seq1, seq2, ...)`, has been added.  :func:`zip` "
"returns a list of tuples where each tuple contains the i-th element from "
"each of the argument sequences.  The difference between :func:`zip` and "
"``map(None, seq1, seq2)`` is that :func:`map` pads the sequences with "
"``None`` if the sequences aren't all of the same length, while :func:`zip` "
"truncates the returned list to the length of the shortest argument sequence."
msgstr ""

# 1e2086f8932442b08159eb599d173563
#: whatsnew/2.0.rst:610
msgid ""
"The :func:`int` and :func:`long` functions now accept an optional \"base\" "
"parameter when the first argument is a string. ``int('123', 10)`` returns "
"123, while ``int('123', 16)`` returns 291.  ``int(123, 16)`` raises a :exc:"
"`TypeError` exception with the message \"can't convert non-string with "
"explicit base\"."
msgstr ""

# 14b9ef0d408d4914af80189bad1cccbc
#: whatsnew/2.0.rst:616
msgid ""
"A new variable holding more detailed version information has been added to "
"the :mod:`sys` module.  ``sys.version_info`` is a tuple ``(major, minor, "
"micro, level, serial)`` For example, in a hypothetical 2.0.1beta1, ``sys."
"version_info`` would be ``(2, 0, 1, 'beta', 1)``. *level* is a string such "
"as ``\"alpha\"``, ``\"beta\"``, or ``\"final\"`` for a final release."
msgstr ""

# 4558b7466a14447d867ab0a05b6ed4d1
#: whatsnew/2.0.rst:622
msgid ""
"Dictionaries have an odd new method, :meth:`setdefault(key, default)`, which "
"behaves similarly to the existing :meth:`get` method.  However, if the key "
"is missing, :meth:`setdefault` both returns the value of *default* as :meth:"
"`get` would do, and also inserts it into the dictionary as the value for "
"*key*.  Thus, the following lines of code::"
msgstr ""

# 7b293a46229f43659d88df277f46f2c1
#: whatsnew/2.0.rst:633
msgid ""
"can be reduced to a single ``return dict.setdefault(key, [])`` statement."
msgstr ""

# 91fe87926aa74224acc2099c0676f56b
#: whatsnew/2.0.rst:635
msgid ""
"The interpreter sets a maximum recursion depth in order to catch runaway "
"recursion before filling the C stack and causing a core dump or GPF.. "
"Previously this limit was fixed when you compiled Python, but in 2.0 the "
"maximum recursion depth can be read and modified using :func:`sys."
"getrecursionlimit` and :func:`sys.setrecursionlimit`. The default value is "
"1000, and a rough maximum value for a given platform can be found by running "
"a new script, :file:`Misc/find_recursionlimit.py`."
msgstr ""

# 5b99f12cf8234782937482e041ac8e42
#: whatsnew/2.0.rst:647
msgid "Porting to 2.0"
msgstr ""

# cd662f80195245dfbfc6a838aed3e8d2
#: whatsnew/2.0.rst:649
msgid ""
"New Python releases try hard to be compatible with previous releases, and "
"the record has been pretty good.  However, some changes are considered "
"useful enough, usually because they fix initial design decisions that turned "
"out to be actively mistaken, that breaking backward compatibility can't "
"always be avoided. This section lists the changes in Python 2.0 that may "
"cause old Python code to break."
msgstr ""

# 93b17c1ad3f7421085f4ff23ed78e115
#: whatsnew/2.0.rst:656
msgid ""
"The change which will probably break the most code is tightening up the "
"arguments accepted by some methods.  Some methods would take multiple "
"arguments and treat them as a tuple, particularly various list methods such "
"as :meth:`append` and :meth:`insert`. In earlier versions of Python, if "
"``L`` is a list, ``L.append( 1,2 )`` appends the tuple ``(1,2)`` to the "
"list.  In Python 2.0 this causes a :exc:`TypeError` exception to be raised, "
"with the message: 'append requires exactly 1 argument; 2 given'.  The fix is "
"to simply add an extra set of parentheses to pass both values as a tuple:  "
"``L.append( (1,2) )``."
msgstr ""

# 9229e81148984291a7f8ef5961ed09bb
#: whatsnew/2.0.rst:665
msgid ""
"The earlier versions of these methods were more forgiving because they used "
"an old function in Python's C interface to parse their arguments; 2.0 "
"modernizes them to use :func:`PyArg_ParseTuple`, the current argument "
"parsing function, which provides more helpful error messages and treats "
"multi-argument calls as errors.  If you absolutely must use 2.0 but can't "
"fix your code, you can edit :file:`Objects/listobject.c` and define the "
"preprocessor symbol ``NO_STRICT_LIST_APPEND`` to preserve the old behaviour; "
"this isn't recommended."
msgstr ""

# 87e51f0649744346ad387cc492eb354a
#: whatsnew/2.0.rst:673
msgid ""
"Some of the functions in the :mod:`socket` module are still forgiving in "
"this way.  For example, :func:`socket.connect( ('hostname', 25) )` is the "
"correct form, passing a tuple representing an IP address, but :func:`socket."
"connect( 'hostname', 25 )` also works. :func:`socket.connect_ex` and :func:"
"`socket.bind` are similarly easy-going.  2.0alpha1 tightened these functions "
"up, but because the documentation actually used the erroneous multiple "
"argument form, many people wrote code which would break with the stricter "
"checking.  GvR backed out the changes in the face of public reaction, so for "
"the :mod:`socket` module, the documentation was fixed and the multiple "
"argument form is simply marked as deprecated; it *will* be tightened up "
"again in a future Python version."
msgstr ""

# 1ceba144f5604256abf9604f1ad4669e
#: whatsnew/2.0.rst:684
msgid ""
"The ``\\x`` escape in string literals now takes exactly 2 hex digits.  "
"Previously it would consume all the hex digits following the 'x' and take "
"the lowest 8 bits of the result, so ``\\x123456`` was equivalent to ``"
"\\x56``."
msgstr ""

# f95f7cb41cdd42698ba12d53e1c73de5
#: whatsnew/2.0.rst:688
msgid ""
"The :exc:`AttributeError` and :exc:`NameError` exceptions have a more "
"friendly error message, whose text will be something like ``'Spam' instance "
"has no attribute 'eggs'`` or ``name 'eggs' is not defined``.  Previously the "
"error message was just the missing attribute name ``eggs``, and code written "
"to take advantage of this fact will break in 2.0."
msgstr ""

# 25db8877dffd47ab86246c1f9b434853
#: whatsnew/2.0.rst:694
msgid ""
"Some work has been done to make integers and long integers a bit more "
"interchangeable.  In 1.5.2, large-file support was added for Solaris, to "
"allow reading files larger than 2 GiB; this made the :meth:`tell` method of "
"file objects return a long integer instead of a regular integer.  Some code "
"would subtract two file offsets and attempt to use the result to multiply a "
"sequence or slice a string, but this raised a :exc:`TypeError`.  In 2.0, "
"long integers can be used to multiply or slice a sequence, and it'll behave "
"as you'd intuitively expect it to; ``3L * 'abc'`` produces 'abcabcabc', and "
"``(0,1,2,3)[2L:4L]`` produces (2,3). Long integers can also be used in "
"various contexts where previously only integers were accepted, such as in "
"the :meth:`seek` method of file objects, and in the formats supported by the "
"``%`` operator (``%d``, ``%i``, ``%x``, etc.).  For example, ``\"%d\" % "
"2L**64`` will produce the string ``18446744073709551616``."
msgstr ""

# 80bfca612d084a72a70f0dbe5c2e7047
#: whatsnew/2.0.rst:708
msgid ""
"The subtlest long integer change of all is that the :func:`str` of a long "
"integer no longer has a trailing 'L' character, though :func:`repr` still "
"includes it.  The 'L' annoyed many people who wanted to print long integers "
"that looked just like regular integers, since they had to go out of their "
"way to chop off the character.  This is no longer a problem in 2.0, but code "
"which does ``str(longval)[:-1]`` and assumes the 'L' is there, will now lose "
"the final digit."
msgstr ""

# 3e30619a76ec4bb6bb2552fc54d0d6d4
#: whatsnew/2.0.rst:716
msgid ""
"Taking the :func:`repr` of a float now uses a different formatting precision "
"than :func:`str`.  :func:`repr` uses ``%.17g`` format string for C's :func:"
"`sprintf`, while :func:`str` uses ``%.12g`` as before.  The effect is that :"
"func:`repr` may occasionally show more decimal places than  :func:`str`, for "
"certain numbers.  For example, the number 8.1 can't be represented exactly "
"in binary, so ``repr(8.1)`` is ``'8.0999999999999996'``, while str(8.1) is "
"``'8.1'``."
msgstr ""

# 175b2a3e54e54833901c074f97b0aef3
#: whatsnew/2.0.rst:724
msgid ""
"The ``-X`` command-line option, which turned all standard exceptions into "
"strings instead of classes, has been removed; the standard exceptions will "
"now always be classes.  The :mod:`exceptions` module containing the standard "
"exceptions was translated from Python to a built-in C module, written by "
"Barry Warsaw and Fredrik Lundh."
msgstr ""

# d60a5857ab52478383e6ac59c8c578c6
#: whatsnew/2.0.rst:740
msgid "Extending/Embedding Changes"
msgstr ""

# a9e190e1ac2543308d6db36e01cb81fe
#: whatsnew/2.0.rst:742
msgid ""
"Some of the changes are under the covers, and will only be apparent to "
"people writing C extension modules or embedding a Python interpreter in a "
"larger application.  If you aren't dealing with Python's C API, you can "
"safely skip this section."
msgstr ""

# b71ad0703d0147929ce2a985e95f906d
#: whatsnew/2.0.rst:747
msgid ""
"The version number of the Python C API was incremented, so C extensions "
"compiled for 1.5.2 must be recompiled in order to work with 2.0.  On "
"Windows, it's not possible for Python 2.0 to import a third party extension "
"built for Python 1.5.x due to how Windows DLLs work, so Python will raise an "
"exception and the import will fail."
msgstr ""

# 4d739a4420a844d9858ee47326ca4435
#: whatsnew/2.0.rst:753
msgid ""
"Users of Jim Fulton's ExtensionClass module will be pleased to find out that "
"hooks have been added so that ExtensionClasses are now supported by :func:"
"`isinstance` and :func:`issubclass`. This means you no longer have to "
"remember to write code such as ``if type(obj) == myExtensionClass``, but can "
"use the more natural ``if isinstance(obj, myExtensionClass)``."
msgstr ""

# e2c7b74730ea4bbaa3a38d506e845072
#: whatsnew/2.0.rst:759
msgid ""
"The :file:`Python/importdl.c` file, which was a mass of #ifdefs to support "
"dynamic loading on many different platforms, was cleaned up and reorganised "
"by Greg Stein.  :file:`importdl.c` is now quite small, and platform-specific "
"code has been moved into a bunch of :file:`Python/dynload_\\*.c` files.  "
"Another cleanup: there were also a number of :file:`my\\*.h` files in the "
"Include/ directory that held various portability hacks; they've been merged "
"into a single file, :file:`Include/pyport.h`."
msgstr ""

# 04d983609fef423b91d27244466cc528
#: whatsnew/2.0.rst:767
msgid ""
"Vladimir Marangozov's long-awaited malloc restructuring was completed, to "
"make it easy to have the Python interpreter use a custom allocator instead "
"of C's standard :func:`malloc`.  For documentation, read the comments in :"
"file:`Include/pymem.h` and :file:`Include/objimpl.h`.  For the lengthy "
"discussions during which the interface was hammered out, see the Web "
"archives of the 'patches' and 'python-dev' lists at python.org."
msgstr ""

# d58cc00f6af3434dae5117758442ec2a
#: whatsnew/2.0.rst:774
msgid ""
"Recent versions of the GUSI development environment for MacOS support POSIX "
"threads.  Therefore, Python's POSIX threading support now works on the "
"Macintosh.  Threading support using the user-space GNU ``pth`` library was "
"also contributed."
msgstr ""

# a06c23ccc9b6477ca94f23037901a78f
#: whatsnew/2.0.rst:779
msgid ""
"Threading support on Windows was enhanced, too.  Windows supports thread "
"locks that use kernel objects only in case of contention; in the common case "
"when there's no contention, they use simpler functions which are an order of "
"magnitude faster.  A threaded version of Python 1.5.2 on NT is twice as slow "
"as an unthreaded version; with the 2.0 changes, the difference is only 10%.  "
"These improvements were contributed by Yakov Markovitch."
msgstr ""

# 47f1c278e06a493c8113424b15cc9683
#: whatsnew/2.0.rst:786
msgid ""
"Python 2.0's source now uses only ANSI C prototypes, so compiling Python now "
"requires an ANSI C compiler, and can no longer be done using a compiler that "
"only supports K&R C."
msgstr ""

# 0dff3f241ebc4fcc8e0f318fad0ec274
#: whatsnew/2.0.rst:790
msgid ""
"Previously the Python virtual machine used 16-bit numbers in its bytecode, "
"limiting the size of source files.  In particular, this affected the maximum "
"size of literal lists and dictionaries in Python source; occasionally people "
"who are generating Python code would run into this limit.  A patch by "
"Charles G. Waldman raises the limit from ``2^16`` to ``2^{32}``."
msgstr ""

# 22dd7a55d45e47e2a9c8f819688916f6
#: whatsnew/2.0.rst:796
msgid ""
"Three new convenience functions intended for adding constants to a module's "
"dictionary at module initialization time were added: :func:"
"`PyModule_AddObject`, :func:`PyModule_AddIntConstant`, and :func:"
"`PyModule_AddStringConstant`.  Each of these functions takes a module "
"object, a null-terminated C string containing the name to be added, and a "
"third argument for the value to be assigned to the name.  This third "
"argument is, respectively, a Python object, a C long, or a C string."
msgstr ""

# 8aee2bae0e3f4abdb479261af1a3c455
#: whatsnew/2.0.rst:804
msgid ""
"A wrapper API was added for Unix-style signal handlers. :func:`PyOS_getsig` "
"gets a signal handler and :func:`PyOS_setsig` will set a new handler."
msgstr ""

# 77bfc9c7ff1e436fa5a5bcb1a0854cd9
#: whatsnew/2.0.rst:811
msgid "Distutils: Making Modules Easy to Install"
msgstr ""

# 1049c1dc83864c39b5f03e118f4ea8d4
#: whatsnew/2.0.rst:813
msgid ""
"Before Python 2.0, installing modules was a tedious affair -- there was no "
"way to figure out automatically where Python is installed, or what compiler "
"options to use for extension modules.  Software authors had to go through an "
"arduous ritual of editing Makefiles and configuration files, which only "
"really work on Unix and leave Windows and MacOS unsupported.  Python users "
"faced wildly differing installation instructions which varied between "
"different extension packages, which made administering a Python installation "
"something of  a chore."
msgstr ""

# d3ecc4aeef7e4b91bbdde950a2066d3c
#: whatsnew/2.0.rst:821
msgid ""
"The SIG for distribution utilities, shepherded by Greg Ward, has created the "
"Distutils, a system to make package installation much easier.  They form "
"the :mod:`distutils` package, a new part of Python's standard library. In "
"the best case, installing a Python module from source will require the same "
"steps: first you simply mean unpack the tarball or zip archive, and the run "
"\"``python setup.py install``\".  The platform will be automatically "
"detected, the compiler will be recognized, C extension modules will be "
"compiled, and the distribution installed into the proper directory.  "
"Optional command-line arguments provide more control over the installation "
"process, the distutils package offers many places to override defaults -- "
"separating the build from the install, building or installing in non-default "
"directories, and more."
msgstr ""

# 09749a6d80c74532a251172e4748311a
#: whatsnew/2.0.rst:833
msgid ""
"In order to use the Distutils, you need to write a :file:`setup.py` script.  "
"For the simple case, when the software contains only .py files, a minimal :"
"file:`setup.py` can be just a few lines long::"
msgstr ""

# 15c88d8a62954585960534462d0b6c43
#: whatsnew/2.0.rst:841
msgid ""
"The :file:`setup.py` file isn't much more complicated if the software "
"consists of a few packages::"
msgstr ""

# 3ce2e016a3d5444b8fda7ea0644b0ac3
#: whatsnew/2.0.rst:848
msgid ""
"A C extension can be the most complicated case; here's an example taken from "
"the PyXML package::"
msgstr ""

# a86e6e7cdf3f4cadb9112d246bc20f0a
#: whatsnew/2.0.rst:864
msgid ""
"The Distutils can also take care of creating source and binary "
"distributions. The \"sdist\" command, run by \"``python setup.py sdist``', "
"builds a source distribution such as :file:`foo-1.0.tar.gz`. Adding new "
"commands isn't difficult, \"bdist_rpm\" and \"bdist_wininst\" commands have "
"already been contributed to create an RPM distribution and a Windows "
"installer for the software, respectively.  Commands to create other "
"distribution formats such as Debian packages and Solaris :file:`.pkg` files "
"are in various stages of development."
msgstr ""

# 275d72a7a83642acbdb2bdf58eabebc3
#: whatsnew/2.0.rst:873
msgid ""
"All this is documented in a new manual, *Distributing Python Modules*, that "
"joins the basic set of Python documentation."
msgstr ""

# dd0b8edda2104921909b4a5f9c2f8f4e
#: whatsnew/2.0.rst:880
msgid "XML Modules"
msgstr ""

# ff6820c7b22d41c7ae2aad59d2d6280c
#: whatsnew/2.0.rst:882
msgid ""
"Python 1.5.2 included a simple XML parser in the form of the :mod:`xmllib` "
"module, contributed by Sjoerd Mullender.  Since 1.5.2's release, two "
"different interfaces for processing XML have become common: SAX2 (version 2 "
"of the Simple API for XML) provides an event-driven interface with some "
"similarities to :mod:`xmllib`, and the DOM (Document Object Model) provides "
"a tree-based interface, transforming an XML document into a tree of nodes "
"that can be traversed and modified.  Python 2.0 includes a SAX2 interface "
"and a stripped- down DOM interface as part of the :mod:`xml` package. Here "
"we will give a brief overview of these new interfaces; consult the Python "
"documentation or the source code for complete details. The Python XML SIG is "
"also working on improved documentation."
msgstr ""

# 1515e8b7a1654b5aa41f59246972d61f
#: whatsnew/2.0.rst:896
msgid "SAX2 Support"
msgstr ""

# 425e8528ff034eaa8caf51129c83fd32
#: whatsnew/2.0.rst:898
msgid ""
"SAX defines an event-driven interface for parsing XML.  To use SAX, you must "
"write a SAX handler class.  Handler classes inherit from various classes "
"provided by SAX, and override various methods that will then be called by "
"the XML parser.  For example, the :meth:`startElement` and :meth:"
"`endElement` methods are called for every starting and end tag encountered "
"by the parser, the :meth:`characters` method is called for every chunk of "
"character data, and so forth."
msgstr ""

# 2d8101c7b61f476ca84ee4e97cebd62b
#: whatsnew/2.0.rst:906
msgid ""
"The advantage of the event-driven approach is that the whole document "
"doesn't have to be resident in memory at any one time, which matters if you "
"are processing really huge documents.  However, writing the SAX handler "
"class can get very complicated if you're trying to modify the document "
"structure in some elaborate way."
msgstr ""

# cd2bc0816daa4ce793cd1f3fa5f06d7c
#: whatsnew/2.0.rst:912
msgid ""
"For example, this little example program defines a handler that prints a "
"message for every starting and ending tag, and then parses the file :file:"
"`hamlet.xml` using it::"
msgstr ""

# 47f41a0dc8854aa1bc81ea299d6c36b5
#: whatsnew/2.0.rst:935
msgid ""
"For more information, consult the Python documentation, or the XML HOWTO at "
"http://pyxml.sourceforge.net/topics/howto/xml-howto.html."
msgstr ""

# bc960af9255d4460a25896f425c96ed2
#: whatsnew/2.0.rst:940
msgid "DOM Support"
msgstr ""

# 9c54b2d4941f4132a3103739bc4057cf
#: whatsnew/2.0.rst:942
msgid ""
"The Document Object Model is a tree-based representation for an XML "
"document.  A top-level :class:`Document` instance is the root of the tree, "
"and has a single child which is the top-level :class:`Element` instance. "
"This :class:`Element` has children nodes representing character data and any "
"sub-elements, which may have further children of their own, and so forth.  "
"Using the DOM you can traverse the resulting tree any way you like, access "
"element and attribute values, insert and delete nodes, and convert the tree "
"back into XML."
msgstr ""

# 1db2d8b3f60f46de88abcfebace7bce4
#: whatsnew/2.0.rst:950
msgid ""
"The DOM is useful for modifying XML documents, because you can create a DOM "
"tree, modify it by adding new nodes or rearranging subtrees, and then "
"produce a new XML document as output.  You can also construct a DOM tree "
"manually and convert it to XML, which can be a more flexible way of "
"producing XML output than simply writing ``<tag1>``...\\ ``</tag1>`` to a "
"file."
msgstr ""

# 9af525f23e1440f2b4613814661d0a97
#: whatsnew/2.0.rst:956
msgid ""
"The DOM implementation included with Python lives in the :mod:`xml.dom."
"minidom` module.  It's a lightweight implementation of the Level 1 DOM with "
"support for XML namespaces.  The  :func:`parse` and :func:`parseString` "
"convenience functions are provided for generating a DOM tree::"
msgstr ""

# 451af8de5df54c11bc2221f578c87d6b
#: whatsnew/2.0.rst:964
msgid ""
"``doc`` is a :class:`Document` instance.  :class:`Document`, like all the "
"other DOM classes such as :class:`Element` and :class:`Text`, is a subclass "
"of the :class:`Node` base class.  All the nodes in a DOM tree therefore "
"support certain common methods, such as :meth:`toxml` which returns a string "
"containing the XML representation of the node and its children.  Each class "
"also has special methods of its own; for example, :class:`Element` and :"
"class:`Document` instances have a method to find all child elements with a "
"given tag name. Continuing from the previous 2-line example::"
msgstr ""

# eeec6ce89ac54cd8a456edf9b6f6448e
#: whatsnew/2.0.rst:977
msgid "For the *Hamlet* XML file, the above few lines output::"
msgstr ""

# c21d2893431e4006bb49726cfa409cc6
#: whatsnew/2.0.rst:982
msgid ""
"The root element of the document is available as ``doc.documentElement``, "
"and its children can be easily modified by deleting, adding, or removing "
"nodes::"
msgstr ""

# cef357f7e740491ab89c336882b38849
#: whatsnew/2.0.rst:997
msgid ""
"Again, I will refer you to the Python documentation for a complete listing "
"of the different :class:`Node` classes and their various methods."
msgstr ""

# 789fbb912c9a4a719c8cf126254f393b
#: whatsnew/2.0.rst:1002
msgid "Relationship to PyXML"
msgstr ""

# f0960991f5994247baffc6d87a268a6e
#: whatsnew/2.0.rst:1004
msgid ""
"The XML Special Interest Group has been working on XML-related Python code "
"for a while.  Its code distribution, called PyXML, is available from the "
"SIG's Web pages at http://www.python.org/sigs/xml-sig/. The PyXML "
"distribution also used the package name ``xml``.  If you've written programs "
"that used PyXML, you're probably wondering about its compatibility with the "
"2.0 :mod:`xml` package."
msgstr ""

# 1e91f80c4a994d28a65b63ddfa1f336b
#: whatsnew/2.0.rst:1010
msgid ""
"The answer is that Python 2.0's :mod:`xml` package isn't compatible with "
"PyXML, but can be made compatible by installing a recent version PyXML.  "
"Many applications can get by with the XML support that is included with "
"Python 2.0, but more complicated applications will require that the full "
"PyXML package will be installed.  When installed, PyXML versions 0.6.0 or "
"greater will replace the :mod:`xml` package shipped with Python, and will be "
"a strict superset of the standard package, adding a bunch of additional "
"features.  Some of the additional features in PyXML include:"
msgstr ""

# 37cd930a872b4e3184a7b7fa7874fbfb
#: whatsnew/2.0.rst:1019
msgid "4DOM, a full DOM implementation from FourThought, Inc."
msgstr ""

# 33dbaa33f650496893ae26e8bce1f535
#: whatsnew/2.0.rst:1021
msgid "The xmlproc validating parser, written by Lars Marius Garshol."
msgstr ""

# ffd481c7dd8b4d7bade812f290e411f0
#: whatsnew/2.0.rst:1023
msgid "The :mod:`sgmlop` parser accelerator module, written by Fredrik Lundh."
msgstr ""

# b18ed9f8b4ab47f8abd1be77487d83f8
#: whatsnew/2.0.rst:1029
msgid "Module changes"
msgstr ""

# 9a1459bc5fa54ad9b8aae9c4c55ddb84
#: whatsnew/2.0.rst:1031
msgid ""
"Lots of improvements and bugfixes were made to Python's extensive standard "
"library; some of the affected modules include :mod:`readline`, :mod:"
"`ConfigParser`, :mod:`cgi`, :mod:`calendar`, :mod:`posix`, :mod:`readline`, :"
"mod:`xmllib`, :mod:`aifc`, :mod:`chunk, wave`, :mod:`random`, :mod:`shelve`, "
"and :mod:`nntplib`.  Consult the CVS logs for the exact patch-by-patch "
"details."
msgstr ""

# 1545b31d03514efdad6892881c87b14e
#: whatsnew/2.0.rst:1037
msgid ""
"Brian Gallew contributed OpenSSL support for the :mod:`socket` module.  "
"OpenSSL is an implementation of the Secure Socket Layer, which encrypts the "
"data being sent over a socket.  When compiling Python, you can edit :file:"
"`Modules/Setup` to include SSL support, which adds an additional function to "
"the :mod:`socket` module: :func:`socket.ssl(socket, keyfile, certfile)`, "
"which takes a socket object and returns an SSL socket.  The :mod:`httplib` "
"and :mod:`urllib` modules were also changed to support ``https://`` URLs, "
"though no one has implemented FTP or SMTP over SSL."
msgstr ""

# a49509866ce9442cbee95ba49698d97a
#: whatsnew/2.0.rst:1046
msgid ""
"The :mod:`httplib` module has been rewritten by Greg Stein to support "
"HTTP/1.1. Backward compatibility with the 1.5 version of :mod:`httplib` is "
"provided, though using HTTP/1.1 features such as pipelining will require "
"rewriting code to use a different set of interfaces."
msgstr ""

# a13b7b06fce94ff3b2516a2abe2634eb
#: whatsnew/2.0.rst:1051
msgid ""
"The :mod:`Tkinter` module now supports Tcl/Tk version 8.1, 8.2, or 8.3, and "
"support for the older 7.x versions has been dropped.  The Tkinter module now "
"supports displaying Unicode strings in Tk widgets. Also, Fredrik Lundh "
"contributed an optimization which makes operations like ``create_line`` and "
"``create_polygon`` much faster, especially when using lots of coordinates."
msgstr ""

# cc82c13ad1d74b4680b508b9ff211b0e
#: whatsnew/2.0.rst:1057
msgid ""
"The :mod:`curses` module has been greatly extended, starting from Oliver "
"Andrich's enhanced version, to provide many additional functions from "
"ncurses and SYSV curses, such as colour, alternative character set support, "
"pads, and mouse support.  This means the module is no longer compatible with "
"operating systems that only have BSD curses, but there don't seem to be any "
"currently maintained OSes that fall into this category."
msgstr ""

# 74166ced1c2640438a774703b01856c5
#: whatsnew/2.0.rst:1064
msgid ""
"As mentioned in the earlier discussion of 2.0's Unicode support, the "
"underlying implementation of the regular expressions provided by the :mod:"
"`re` module has been changed.  SRE, a new regular expression engine written "
"by Fredrik Lundh and partially funded by Hewlett Packard, supports matching "
"against both 8-bit strings and Unicode strings."
msgstr ""

# c3dc5b31fdc54865a2cb7f7b9004bd5d
#: whatsnew/2.0.rst:1074
msgid "New modules"
msgstr ""

# a9c56525931345389c27bd8cb6a39124
#: whatsnew/2.0.rst:1076
msgid ""
"A number of new modules were added.  We'll simply list them with brief "
"descriptions; consult the 2.0 documentation for the details of a particular "
"module."
msgstr ""

# e149d57de05047fb871a24cb2ed1e519
#: whatsnew/2.0.rst:1080
msgid ""
":mod:`atexit`:  For registering functions to be called before the Python "
"interpreter exits. Code that currently sets ``sys.exitfunc`` directly should "
"be changed to  use the :mod:`atexit` module instead, importing :mod:`atexit` "
"and calling :func:`atexit.register` with  the function to be called on exit. "
"(Contributed by Skip Montanaro.)"
msgstr ""

# 12a2b4c54885458eab63ed10c4aa7d3e
#: whatsnew/2.0.rst:1086
msgid ""
":mod:`codecs`, :mod:`encodings`, :mod:`unicodedata`:  Added as part of the "
"new Unicode support."
msgstr ""

# e8626bcf3f25474380e31001e40a94c8
#: whatsnew/2.0.rst:1089
msgid ""
":mod:`filecmp`: Supersedes the old :mod:`cmp`, :mod:`cmpcache` and :mod:"
"`dircmp` modules, which have now become deprecated. (Contributed by Gordon "
"MacMillan and Moshe Zadka.)"
msgstr ""

# 0642cd46e572474ebc7d45ee66bd82c5
#: whatsnew/2.0.rst:1093
msgid ""
":mod:`gettext`: This module provides internationalization (I18N) and "
"localization (L10N) support for Python programs by providing an interface to "
"the GNU gettext message catalog library. (Integrated by Barry Warsaw, from "
"separate contributions by Martin  von Löwis, Peter Funk, and James "
"Henstridge.)"
msgstr ""

# 65be9c9f519046dcb86691032072f19c
#: whatsnew/2.0.rst:1098
msgid ""
":mod:`linuxaudiodev`: Support for the :file:`/dev/audio` device on Linux, a "
"twin to the existing :mod:`sunaudiodev` module. (Contributed by Peter Bosch, "
"with fixes by Jeremy Hylton.)"
msgstr ""

# 90729a132bba47cf8ed7e8dc7a2b306d
#: whatsnew/2.0.rst:1102
msgid ""
":mod:`mmap`: An interface to memory-mapped files on both Windows and Unix.  "
"A file's contents can be mapped directly into memory, at which point it "
"behaves like a mutable string, so its contents can be read and modified.  "
"They can even be passed to functions that expect ordinary strings, such as "
"the :mod:`re` module. (Contributed by Sam Rushing, with some extensions by A."
"M. Kuchling.)"
msgstr ""

# 899044760eb7458eb622e68bc1976055
#: whatsnew/2.0.rst:1108
msgid ""
":mod:`pyexpat`: An interface to the Expat XML parser. (Contributed by Paul "
"Prescod.)"
msgstr ""

# fe372318897746e9bb42db510cefc6d5
#: whatsnew/2.0.rst:1111
msgid ""
":mod:`robotparser`: Parse a :file:`robots.txt` file, which is used for "
"writing Web spiders that politely avoid certain areas of a Web site.  The "
"parser accepts the contents of a :file:`robots.txt` file, builds a set of "
"rules from it, and can then answer questions about the fetchability of a "
"given URL.  (Contributed by Skip Montanaro.)"
msgstr ""

# 1a0e8bc2bc664afb83e465b61d4e7bba
#: whatsnew/2.0.rst:1117
msgid ""
":mod:`tabnanny`: A module/script to  check Python source code for ambiguous "
"indentation. (Contributed by Tim Peters.)"
msgstr ""

# b8ee8dbaacd54833a0076e5ba3e70362
#: whatsnew/2.0.rst:1120
msgid ""
":mod:`UserString`: A base class useful for deriving objects that behave like "
"strings."
msgstr ""

# 0f401ecfe6a745b381fd2e8ff753875c
#: whatsnew/2.0.rst:1123
msgid ""
":mod:`webbrowser`: A module that provides a platform independent way to "
"launch a web browser on a specific URL. For each platform, various browsers "
"are tried in a specific order. The user can alter which browser is launched "
"by setting the *BROWSER* environment variable.  (Originally inspired by Eric "
"S. Raymond's patch to :mod:`urllib` which added similar functionality, but "
"the final module comes from code originally  implemented by Fred Drake as :"
"file:`Tools/idle/BrowserControl.py`, and adapted for the standard library by "
"Fred.)"
msgstr ""

# 6c2d2faf4c214275b8fa970d54ede7f5
#: whatsnew/2.0.rst:1132
msgid ""
":mod:`_winreg`: An interface to the Windows registry.  :mod:`_winreg` is an "
"adaptation of functions that have been part of PythonWin since 1995, but has "
"now been added to the core  distribution, and enhanced to support Unicode. :"
"mod:`_winreg` was written by Bill Tutt and Mark Hammond."
msgstr ""

# 4d9f0a001bd845a0b7596b40ba3933fc
#: whatsnew/2.0.rst:1137
msgid ""
":mod:`zipfile`: A module for reading and writing ZIP-format archives.  These "
"are archives produced by :program:`PKZIP` on DOS/Windows or :program:`zip` "
"on Unix, not to be confused with :program:`gzip`\\ -format files (which are "
"supported by the :mod:`gzip` module) (Contributed by James C. Ahlstrom.)"
msgstr ""

# 247fac580d2d43699ba6757c6cd7be5d
#: whatsnew/2.0.rst:1142
msgid ""
":mod:`imputil`: A module that provides a simpler way for writing customised "
"import hooks, in comparison to the existing :mod:`ihooks` module.  "
"(Implemented by Greg Stein, with much discussion on python-dev along the "
"way.)"
msgstr ""

# 8b6a75f584c245b09008183bd05eb45e
#: whatsnew/2.0.rst:1150
msgid "IDLE Improvements"
msgstr ""

# 838ce7cb8ca0404bab81e1d12a4ab6f1
#: whatsnew/2.0.rst:1152
msgid ""
"IDLE is the official Python cross-platform IDE, written using Tkinter. "
"Python 2.0 includes IDLE 0.6, which adds a number of new features and "
"improvements.  A partial list:"
msgstr ""

# 911f5b7affcf4b23a1cc468dbcb2eac7
#: whatsnew/2.0.rst:1156
msgid ""
"UI improvements and optimizations, especially in the area of syntax "
"highlighting and auto-indentation."
msgstr ""

# 1fb2be14e42c4ab99a1d204850d97367
#: whatsnew/2.0.rst:1159
msgid ""
"The class browser now shows more information, such as the top level "
"functions in a module."
msgstr ""

# a26b7e8cb22c4aa38c7d3c4f063d6914
#: whatsnew/2.0.rst:1162
msgid ""
"Tab width is now a user settable option. When opening an existing Python "
"file, IDLE automatically detects the indentation conventions, and adapts."
msgstr ""

# 282f63dcc3c4467cbf6f6c63a14d32b9
#: whatsnew/2.0.rst:1165
msgid ""
"There is now support for calling browsers on various platforms, used to open "
"the Python documentation in a browser."
msgstr ""

# d22678f286354006abff6ce931d9a2ab
#: whatsnew/2.0.rst:1168
msgid ""
"IDLE now has a command line, which is largely similar to  the vanilla Python "
"interpreter."
msgstr ""

# 6996c340b912461c925adabf01a7586e
#: whatsnew/2.0.rst:1171
msgid "Call tips were added in many places."
msgstr ""

# bf7ccd9de1434c11a0ac3e5a7ac46ea5
#: whatsnew/2.0.rst:1173
msgid "IDLE can now be installed as a package."
msgstr ""

# 5dfcc670a9fd42f09239e6e8784622ce
#: whatsnew/2.0.rst:1175
msgid "In the editor window, there is now a line/column bar at the bottom."
msgstr ""

# 6b7a41295d53415db6ab90f3f6b5d046
#: whatsnew/2.0.rst:1177
msgid ""
"Three new keystroke commands: Check module (Alt-F5), Import module (F5) and "
"Run script (Ctrl-F5)."
msgstr ""

# 552c61c54c2040fea7bbb3e471ede265
#: whatsnew/2.0.rst:1184
msgid "Deleted and Deprecated Modules"
msgstr ""

# 436375c6c5144f4d88a83ae2b400fc63
#: whatsnew/2.0.rst:1186
msgid ""
"A few modules have been dropped because they're obsolete, or because there "
"are now better ways to do the same thing.  The :mod:`stdwin` module is gone; "
"it was for a platform-independent windowing toolkit that's no longer "
"developed."
msgstr ""

# 89678cf554da429295a49283a6f6f40d
#: whatsnew/2.0.rst:1190
msgid ""
"A number of modules have been moved to the :file:`lib-old` subdirectory: :"
"mod:`cmp`, :mod:`cmpcache`, :mod:`dircmp`, :mod:`dump`,  :mod:`find`, :mod:"
"`grep`, :mod:`packmail`,  :mod:`poly`, :mod:`util`, :mod:`whatsound`, :mod:"
"`zmod`.  If you have code which relies on a module  that's been moved to :"
"file:`lib-old`, you can simply add that directory to ``sys.path``   to get "
"them back, but you're encouraged to update any code that uses these modules."
msgstr ""

# 74a5e85b3ba84b7081f3691f8090ac21
# a8409a0a658541eeb3432ad1fe3537b1
# 6c5bcec7a52945379fb50f568baee14c
# 51ded9933f04410ea97c375227859bb7
# c6544184a24b4ed3b7d8bad9b6e8703f
# 5a664090418d4ec88d43fca0c7225068
# 89341b57521b4df38c06ee3346b3155d
# 7136e97e073544dabb1eb9e2ae675587
#: whatsnew/2.0.rst:1199 whatsnew/2.1.rst:789 whatsnew/2.2.rst:1260
#: whatsnew/2.3.rst:2071 whatsnew/2.4.rst:1557 whatsnew/2.5.rst:2280
#: whatsnew/2.6.rst:3308 whatsnew/2.7.rst:2476
msgid "Acknowledgements"
msgstr ""

# f0c776c07d5e44c0b50b27eabab217a8
#: whatsnew/2.0.rst:1201
msgid ""
"The authors would like to thank the following people for offering "
"suggestions on various drafts of this article: David Bolen, Mark Hammond, "
"Gregg Hauser, Jeremy Hylton, Fredrik Lundh, Detlef Lannert, Aahz Maruch, "
"Skip Montanaro, Vladimir Marangozov, Tobias Polzin, Guido van Rossum, Neil "
"Schemenauer, and Russ Schmidt."
msgstr ""

# 08f0ae893ef14d2a9ac420334c91b667
#: whatsnew/2.1.rst:3
#, fuzzy
msgid "What's New in Python 2.1"
msgstr "Nouveautés de Python 2.0"

# 12cdd3401c1c474bb43dd76667f93300
# 01f2ab21431b43bd878da2efc99e92f2
# c315c8bff8e04da0a2dbcda8024efd75
# c7f93c5cfa144728846cdfbdb7589966
# f96bb260013a4bc693fda871b6a0489f
#: whatsnew/2.1.rst:5 whatsnew/2.2.rst:5 whatsnew/2.3.rst:5 whatsnew/2.4.rst:5
#: whatsnew/2.5.rst:5
msgid "A.M. Kuchling"
msgstr "A.M. Kuchling"

# 7603f9226f794449a6163465c16f1ff8
#: whatsnew/2.1.rst:15
msgid ""
"This article explains the new features in Python 2.1.  While there aren't as "
"many changes in 2.1 as there were in Python 2.0, there are still some "
"pleasant surprises in store.  2.1 is the first release to be steered through "
"the use of Python Enhancement Proposals, or PEPs, so most of the sizable "
"changes have accompanying PEPs that provide more complete documentation and "
"a design rationale for the change.  This article doesn't attempt to document "
"the new features completely, but simply provides an overview of the new "
"features for Python programmers. Refer to the Python 2.1 documentation, or "
"to the specific PEP, for more details about any new feature that "
"particularly interests you."
msgstr ""

# 35ada97b4ded43eea764b7563fbdd760
#: whatsnew/2.1.rst:25
msgid ""
"One recent goal of the Python development team has been to accelerate the "
"pace of new releases, with a new release coming every 6 to 9 months. 2.1 is "
"the first release to come out at this faster pace, with the first alpha "
"appearing in January, 3 months after the final version of 2.0 was released."
msgstr ""

# 29b49c2f5a85450fbbcecbea33b6fbd6
#: whatsnew/2.1.rst:30
msgid "The final release of Python 2.1 was made on April 17, 2001."
msgstr ""

# 0f83044d5f74446c887446dda1b1227c
# cb28f286af4340848ade2cbf720785bf
#: whatsnew/2.1.rst:36 whatsnew/2.2.rst:839
msgid "PEP 227: Nested Scopes"
msgstr ""

# 03eb3713d24240e6bcee7894a3f5524f
#: whatsnew/2.1.rst:38
msgid ""
"The largest change in Python 2.1 is to Python's scoping rules.  In Python "
"2.0, at any given time there are at most three namespaces used to look up "
"variable names: local, module-level, and the built-in namespace.  This often "
"surprised people because it didn't match their intuitive expectations.  For "
"example, a nested recursive function definition doesn't work::"
msgstr ""

# 65e6773c9a8b42b49654132e01320385
# b6b60b8de5fa4e069965a6b9fa756a92
#: whatsnew/2.1.rst:51 whatsnew/2.2.rst:862
msgid ""
"The function :func:`g` will always raise a :exc:`NameError` exception, "
"because the binding of the name ``g`` isn't in either its local namespace or "
"in the module-level namespace.  This isn't much of a problem in practice "
"(how often do you recursively define interior functions like this?), but "
"this also made using the :keyword:`lambda` statement clumsier, and this was "
"a problem in practice. In code which uses :keyword:`lambda` you can often "
"find local variables being copied by passing them as the default values of "
"arguments. ::"
msgstr ""

# b18c9ef7969940458358a4243f21c0de
# 638514e124664f2d8d2d67c9be34c039
#: whatsnew/2.1.rst:65 whatsnew/2.2.rst:876
msgid ""
"The readability of Python code written in a strongly functional style "
"suffers greatly as a result."
msgstr ""

# 50b2054fe6fa4142a50a93b77c8daee2
#: whatsnew/2.1.rst:68
msgid ""
"The most significant change to Python 2.1 is that static scoping has been "
"added to the language to fix this problem.  As a first effect, the "
"``name=name`` default argument is now unnecessary in the above example.  Put "
"simply, when a given variable name is not assigned a value within a function "
"(by an assignment, or the :keyword:`def`, :keyword:`class`, or :keyword:"
"`import` statements), references to the variable will be looked up in the "
"local namespace of the enclosing scope.  A more detailed explanation of the "
"rules, and a dissection of the implementation, can be found in the PEP."
msgstr ""

# c9dd81f832b74b4d971203f772228e73
# fd10019c69f2406eb6461f71c1ee18b0
#: whatsnew/2.1.rst:77 whatsnew/2.2.rst:888
msgid ""
"This change may cause some compatibility problems for code where the same "
"variable name is used both at the module level and as a local variable "
"within a function that contains further function definitions. This seems "
"rather unlikely though, since such code would have been pretty confusing to "
"read in the first place."
msgstr ""

# a4fea7af4ee0407cba7280dee89d6d3b
# 1a6c3d5e2f5d4d45a53b1ee194cec4f5
#: whatsnew/2.1.rst:83 whatsnew/2.2.rst:894
msgid ""
"One side effect of the change is that the ``from module import *`` and "
"``exec`` statements have been made illegal inside a function scope under "
"certain conditions.  The Python reference manual has said all along that "
"``from module import *`` is only legal at the top level of a module, but the "
"CPython interpreter has never enforced this before.  As part of the "
"implementation of nested scopes, the compiler which turns Python source into "
"bytecodes has to generate different code to access variables in a containing "
"scope.  ``from module import *`` and ``exec`` make it impossible for the "
"compiler to figure this out, because they add names to the local namespace "
"that are unknowable at compile time. Therefore, if a function contains "
"function definitions or :keyword:`lambda` expressions with free variables, "
"the compiler will flag this by raising a :exc:`SyntaxError` exception."
msgstr ""

# 7c443d9fa8c34326afed8f8c537e82bd
# 2399d417be48409dafb5eded030f0a66
#: whatsnew/2.1.rst:96 whatsnew/2.2.rst:907
msgid "To make the preceding explanation a bit clearer, here's an example::"
msgstr ""

# 8e6d2f2d78234c049706a7cabc0fbcb6
# 71f5083663cb4f7ab119adc59595d359
#: whatsnew/2.1.rst:105 whatsnew/2.2.rst:916
msgid ""
"Line 4 containing the ``exec`` statement is a syntax error, since ``exec`` "
"would define a new local variable named ``x`` whose value should be accessed "
"by :func:`g`."
msgstr ""

# 7795ec91c64f4eff93e551023c8972ca
# 57419fca91c64d6497139a97794e5067
#: whatsnew/2.1.rst:109 whatsnew/2.2.rst:920
msgid ""
"This shouldn't be much of a limitation, since ``exec`` is rarely used in "
"most Python code (and when it is used, it's often a sign of a poor design "
"anyway)."
msgstr ""

# 09a8761575eb49abb574a64bd30de631
#: whatsnew/2.1.rst:113
msgid ""
"Compatibility concerns have led to nested scopes being introduced gradually; "
"in Python 2.1, they aren't enabled by default, but can be turned on within a "
"module by using a future statement as described in PEP 236.  (See the "
"following section for further discussion of PEP 236.)  In Python 2.2, nested "
"scopes will become the default and there will be no way to turn them off, "
"but users will have had all of 2.1's lifetime to fix any breakage resulting "
"from their introduction."
msgstr ""

# 41a02a4269f34bd192f25f53229f5b51
# b2ab49206f4749759aaab10e050c68d2
#: whatsnew/2.1.rst:123 whatsnew/2.2.rst:927
#, fuzzy
msgid "PEP 227 - Statically Nested Scopes"
msgstr ":pep:`227`: *Statically Nested Scopes*"

# 56b44c5f9a0d49e2b2e1d87e76c8b740
# d628f185c6e64dad83308891e1a727ae
#: whatsnew/2.1.rst:124 whatsnew/2.2.rst:928
msgid "Written and implemented by Jeremy Hylton."
msgstr ""

# a3eb5a617252493c97d6a3a450765cdf
#: whatsnew/2.1.rst:130
msgid "PEP 236: __future__ Directives"
msgstr ""

# 598a3bad6b354a358370174540b9412e
#: whatsnew/2.1.rst:132
msgid ""
"The reaction to nested scopes was widespread concern about the dangers of "
"breaking code with the 2.1 release, and it was strong enough to make the "
"Pythoneers take a more conservative approach.  This approach consists of "
"introducing a convention for enabling optional functionality in release N "
"that will become compulsory in release N+1."
msgstr ""

# 4f03fb0c9d4a4e0fba522fd9bc846976
#: whatsnew/2.1.rst:138
msgid ""
"The syntax uses a ``from...import`` statement using the reserved module "
"name :mod:`__future__`.  Nested scopes can be enabled by the following "
"statement::"
msgstr ""

# 2f9308d62aac48478ed2c7df2bc68ff3
#: whatsnew/2.1.rst:143
msgid ""
"While it looks like a normal :keyword:`import` statement, it's not; there "
"are strict rules on where such a future statement can be put. They can only "
"be at the top of a module, and must precede any Python code or regular :"
"keyword:`import` statements.  This is because such statements can affect how "
"the Python bytecode compiler parses code and generates bytecode, so they "
"must precede any statement that will result in bytecodes being produced."
msgstr ""

#: whatsnew/2.1.rst:153
msgid "PEP 236 - Back to the __future__"
msgstr ""

# 9870957885ab4e079e8029e7f0910c4c
#: whatsnew/2.1.rst:154
msgid "Written by Tim Peters, and primarily implemented by Jeremy Hylton."
msgstr ""

# aa6634278519456c84ad9d7d87eae516
#: whatsnew/2.1.rst:160
msgid "PEP 207: Rich Comparisons"
msgstr ""

# 21e69ce66de04c7e999ffc5988df23f9
#: whatsnew/2.1.rst:162
msgid ""
"In earlier versions, Python's support for implementing comparisons on user- "
"defined classes and extension types was quite simple. Classes could "
"implement a :meth:`__cmp__` method that was given two instances of a class, "
"and could only return 0 if they were equal or +1 or -1 if they weren't; the "
"method couldn't raise an exception or return anything other than a Boolean "
"value.  Users of Numeric Python often found this model too weak and "
"restrictive, because in the number-crunching programs that numeric Python is "
"used for, it would be more useful to be able to perform elementwise "
"comparisons of two matrices, returning a matrix containing the results of a "
"given comparison for each element.  If the two matrices are of different "
"sizes, then the compare has to be able to raise an exception to signal the "
"error."
msgstr ""

# df6a412783c84fd1a660c75a4504ac70
#: whatsnew/2.1.rst:174
msgid ""
"In Python 2.1, rich comparisons were added in order to support this need. "
"Python classes can now individually overload each of the ``<``, ``<=``, "
"``>``, ``>=``, ``==``, and ``!=`` operations.  The new magic method names "
"are:"
msgstr ""

# f4f68b3adcbc4c0fa48aa03a44607091
# 5fa3768f2f1942cfb229df90eb617af1
#: whatsnew/2.1.rst:179 whatsnew/2.5.rst:1807
msgid "Operation"
msgstr ""

# 54fdcb13f97c45239d0ce94c03c78c91
#: whatsnew/2.1.rst:179
msgid "Method name"
msgstr ""

# 9d99c3ad7ace44f288be2159f9305864
#: whatsnew/2.1.rst:181
msgid "``<``"
msgstr ""

# a388f92bd7b3466ab857f175780a2ae6
#: whatsnew/2.1.rst:181
msgid ":meth:`__lt__`"
msgstr ""

# 34fc072c137b4592b670e55f8d04cfb0
#: whatsnew/2.1.rst:183
msgid "``<=``"
msgstr ""

# 90949e7318b94452bea92d79a211de0d
#: whatsnew/2.1.rst:183
msgid ":meth:`__le__`"
msgstr ""

# ecccfbbc369f4fcd8a9e0bfa984d1d97
#: whatsnew/2.1.rst:185
msgid "``>``"
msgstr ""

# 80064b03c87e43a7aa0d3efa661ebdfa
#: whatsnew/2.1.rst:185
msgid ":meth:`__gt__`"
msgstr ""

# a4973f17febb42a6a72525655c036c21
#: whatsnew/2.1.rst:187
msgid "``>=``"
msgstr ""

# 0fdb3283009849a49987ee32a66cef52
#: whatsnew/2.1.rst:187
msgid ":meth:`__ge__`"
msgstr ""

# 45bfb0ce4713401ba1dcf648215821be
#: whatsnew/2.1.rst:189
msgid "``==``"
msgstr ""

# 499144317d044b60af2842cc8bab30fc
#: whatsnew/2.1.rst:189
msgid ":meth:`__eq__`"
msgstr ""

# 911974992e694252b38f3d4635b609bf
#: whatsnew/2.1.rst:191
msgid "``!=``"
msgstr ""

# be94516c5b024dc9ba1a19938fee4d9c
#: whatsnew/2.1.rst:191
msgid ":meth:`__ne__`"
msgstr ""

# 7db959e68cd5424abbe920c4359461ca
#: whatsnew/2.1.rst:194
msgid ""
"(The magic methods are named after the corresponding Fortran operators ``.LT."
"``. ``.LE.``, &c.  Numeric programmers are almost certainly quite familiar "
"with these names and will find them easy to remember.)"
msgstr ""

# 71de8eadc35e4d0cad624ebc3dd89a11
#: whatsnew/2.1.rst:198
msgid ""
"Each of these magic methods is of the form ``method(self, other)``, where "
"``self`` will be the object on the left-hand side of the operator, while "
"``other`` will be the object on the right-hand side.  For example, the "
"expression ``A < B`` will cause ``A.__lt__(B)`` to be called."
msgstr ""

# d20eae34809c4eefa593d8af987c51df
#: whatsnew/2.1.rst:203
msgid ""
"Each of these magic methods can return anything at all: a Boolean, a matrix, "
"a list, or any other Python object.  Alternatively they can raise an "
"exception if the comparison is impossible, inconsistent, or otherwise "
"meaningless."
msgstr ""

# 9e02692821274ccba5b921418c36bb0a
#: whatsnew/2.1.rst:207
msgid ""
"The built-in :func:`cmp(A,B)` function can use the rich comparison "
"machinery, and now accepts an optional argument specifying which comparison "
"operation to use; this is given as one of the strings ``\"<\"``, ``\"<=\"``, "
"``\">\"``, ``\">=\"``, ``\"==\"``, or ``\"!=\"``.  If called without the "
"optional third argument, :func:`cmp` will only return -1, 0, or +1 as in "
"previous versions of Python; otherwise it will call the appropriate method "
"and can return any Python object."
msgstr ""

# 98238d6d5f0a428aa9db277675d5da4b
#: whatsnew/2.1.rst:214
msgid ""
"There are also corresponding changes of interest to C programmers; there's a "
"new slot ``tp_richcmp`` in type objects and an API for performing a given "
"rich comparison.  I won't cover the C API here, but will refer you to PEP "
"207, or to 2.1's C API documentation, for the full list of related functions."
msgstr ""

#: whatsnew/2.1.rst:223
msgid "PEP 207 - Rich Comparisions"
msgstr ""

# 71333eac505a46fc83555f8bfe4eb553
#: whatsnew/2.1.rst:223
msgid ""
"Written by Guido van Rossum, heavily based on earlier work by David Ascher, "
"and implemented by Guido van Rossum."
msgstr ""

# 0bbe8c41a5954f4db62fe9b94dc2f442
#: whatsnew/2.1.rst:230
msgid "PEP 230: Warning Framework"
msgstr ""

# 194675ecfca446af9c0ac845721f935c
#: whatsnew/2.1.rst:232
msgid ""
"Over its 10 years of existence, Python has accumulated a certain number of "
"obsolete modules and features along the way.  It's difficult to know when a "
"feature is safe to remove, since there's no way of knowing how much code "
"uses it --- perhaps no programs depend on the feature, or perhaps many do.  "
"To enable removing old features in a more structured way, a warning "
"framework was added. When the Python developers want to get rid of a "
"feature, it will first trigger a warning in the next version of Python.  The "
"following Python version can then drop the feature, and users will have had "
"a full release cycle to remove uses of the old feature."
msgstr ""

# d1ef15df70894988aad2d7309886b681
#: whatsnew/2.1.rst:242
msgid ""
"Python 2.1 adds the warning framework to be used in this scheme.  It adds a :"
"mod:`warnings` module that provide functions to issue warnings, and to "
"filter out warnings that you don't want to be displayed. Third-party modules "
"can also use this framework to deprecate old features that they no longer "
"wish to support."
msgstr ""

# 959a1d4f8bf844d1bb86e397440dd7fe
#: whatsnew/2.1.rst:248
msgid ""
"For example, in Python 2.1 the :mod:`regex` module is deprecated, so "
"importing it causes a warning to be printed::"
msgstr ""

# 77054d5665254ebebd2b662419c04e0e
#: whatsnew/2.1.rst:256
msgid "Warnings can be issued by calling the :func:`warnings.warn` function::"
msgstr ""

# d77399829c9141d6b945f8c512f9211a
#: whatsnew/2.1.rst:260
msgid ""
"The first parameter is the warning message; an additional optional "
"parameters can be used to specify a particular warning category."
msgstr ""

# 7964cc8b1895456c8e4f24e5e2e386a8
#: whatsnew/2.1.rst:263
msgid ""
"Filters can be added to disable certain warnings; a regular expression "
"pattern can be applied to the message or to the module name in order to "
"suppress a warning.  For example, you may have a program that uses the :mod:"
"`regex` module and not want to spare the time to convert it to use the :mod:"
"`re` module right now.  The warning can be suppressed by calling ::"
msgstr ""

# 75126445af964b05bb850c86a15db582
#: whatsnew/2.1.rst:275
msgid ""
"This adds a filter that will apply only to warnings of the class :class:"
"`DeprecationWarning` triggered in the :mod:`__main__` module, and applies a "
"regular expression to only match the message about the :mod:`regex` module "
"being deprecated, and will cause such warnings to be ignored.  Warnings can "
"also be printed only once, printed every time the offending code is "
"executed, or turned into exceptions that will cause the program to stop "
"(unless the exceptions are caught in the usual way, of course)."
msgstr ""

# b52102be0b9442fe944408cc93d6f1cd
#: whatsnew/2.1.rst:283
msgid ""
"Functions were also added to Python's C API for issuing warnings; refer to "
"PEP 230 or to Python's API documentation for the details."
msgstr ""

#: whatsnew/2.1.rst:293
msgid "PEP 5 - Guidelines for Language Evolution"
msgstr ""

# 385bc621b2164aa6b3b5bedc2d7f3d57
#: whatsnew/2.1.rst:290
msgid ""
"Written by Paul Prescod, to specify procedures to be followed when removing "
"old features from Python.  The policy described in this PEP hasn't been "
"officially adopted, but the eventual policy probably won't be too different "
"from Prescod's proposal."
msgstr ""

# bbe930f349fe49c5913cc69f1b5fc3a6
#: whatsnew/2.1.rst:295
#, fuzzy
msgid "PEP 230 - Warning Framework"
msgstr ":pep:`230` -- Gestion des alertes"

# 5be35e5922f84fd6be7f747104f07eed
#: whatsnew/2.1.rst:296
msgid "Written and implemented by Guido van Rossum."
msgstr ""

# 445ede4a867345c585c08dfbae212a72
#: whatsnew/2.1.rst:302
msgid "PEP 229: New Build System"
msgstr ""

# be990c263c834ecf824509d37eae0fa4
#: whatsnew/2.1.rst:304
msgid ""
"When compiling Python, the user had to go in and edit the :file:`Modules/"
"Setup` file in order to enable various additional modules; the default set "
"is relatively small and limited to modules that compile on most Unix "
"platforms. This means that on Unix platforms with many more features, most "
"notably Linux, Python installations often don't contain all useful modules "
"they could."
msgstr ""

# 6535142819984bb988a9a00eb292ceb4
#: whatsnew/2.1.rst:310
msgid ""
"Python 2.0 added the Distutils, a set of modules for distributing and "
"installing extensions.  In Python 2.1, the Distutils are used to compile "
"much of the standard library of extension modules, autodetecting which ones "
"are supported on the current machine.  It's hoped that this will make Python "
"installations easier and more featureful."
msgstr ""

# 1c0668c871f54b6ab84e11ac9f7fe476
#: whatsnew/2.1.rst:316
msgid ""
"Instead of having to edit the :file:`Modules/Setup` file in order to enable "
"modules, a :file:`setup.py` script in the top directory of the Python source "
"distribution is run at build time, and attempts to discover which modules "
"can be enabled by examining the modules and header files on the system.  If "
"a module is configured in :file:`Modules/Setup`, the :file:`setup.py` script "
"won't attempt to compile that module and will defer to the :file:`Modules/"
"Setup` file's contents.  This provides a way to specific any strange command-"
"line flags or libraries that are required for a specific platform."
msgstr ""

# 1e66a72b57f642babc7173cdf0188621
#: whatsnew/2.1.rst:325
msgid ""
"In another far-reaching change to the build mechanism, Neil Schemenauer "
"restructured things so Python now uses a single makefile that isn't "
"recursive, instead of makefiles in the top directory and in each of the :"
"file:`Python/`, :file:`Parser/`, :file:`Objects/`, and :file:`Modules/` "
"subdirectories.  This makes building Python faster and also makes hacking "
"the Makefiles clearer and simpler."
msgstr ""

#: whatsnew/2.1.rst:335
msgid "PEP 229 - Using Distutils to Build Python"
msgstr ""

# 2dba84303b004336b8faf6ab9dfee559
# 010aad46d7924b77908320242f576b1e
#: whatsnew/2.1.rst:336 whatsnew/2.1.rst:571
msgid "Written and implemented by A.M. Kuchling."
msgstr ""

# 38836f69503c4e448a34e0098126e149
#: whatsnew/2.1.rst:342
msgid "PEP 205: Weak References"
msgstr ""

# d7b035c60c6c4d71aad925ba1fdb01b6
#: whatsnew/2.1.rst:344
msgid ""
"Weak references, available through the :mod:`weakref` module, are a minor "
"but useful new data type in the Python programmer's toolbox."
msgstr ""

# 1a2797e04e8c4873b1ab25a162ad99e8
#: whatsnew/2.1.rst:347
msgid ""
"Storing a reference to an object (say, in a dictionary or a list) has the "
"side effect of keeping that object alive forever.  There are a few specific "
"cases where this behaviour is undesirable, object caches being the most "
"common one, and another being circular references in data structures such as "
"trees."
msgstr ""

# 7a5b10daed9249b397ac7f66d0b3d7a9
#: whatsnew/2.1.rst:352
msgid ""
"For example, consider a memoizing function that caches the results of "
"another function :func:`f(x)` by storing the function's argument and its "
"result in a dictionary::"
msgstr ""

# 176c5357bc864eaca135d9d5f9b2e8ab
#: whatsnew/2.1.rst:368
msgid ""
"This version works for simple things such as integers, but it has a side "
"effect; the ``_cache`` dictionary holds a reference to the return values, so "
"they'll never be deallocated until the Python process exits and cleans up "
"This isn't very noticeable for integers, but if :func:`f` returns an object, "
"or a data structure that takes up a lot of memory, this can be a problem."
msgstr ""

# 2bb932219c824ae4953a293355b5fdbc
#: whatsnew/2.1.rst:374
msgid ""
"Weak references provide a way to implement a cache that won't keep objects "
"alive beyond their time.  If an object is only accessible through weak "
"references, the object will be deallocated and the weak references will now "
"indicate that the object it referred to no longer exists.  A weak reference "
"to an object *obj* is created by calling ``wr = weakref.ref(obj)``.  The "
"object being referred to is returned by calling the weak reference as if it "
"were a function: ``wr()``.  It will return the referenced object, or "
"``None`` if the object no longer exists."
msgstr ""

# 77d73d95d668421b917de65442766855
#: whatsnew/2.1.rst:382
msgid ""
"This makes it possible to write a :func:`memoize` function whose cache "
"doesn't keep objects alive, by storing weak references in the cache. ::"
msgstr ""

# c97a8905fc5349b2847856b6c0b7442d
#: whatsnew/2.1.rst:400
msgid ""
"The :mod:`weakref` module also allows creating proxy objects which behave "
"like weak references --- an object referenced only by proxy objects is "
"deallocated -- but instead of requiring an explicit call to retrieve the "
"object, the proxy transparently forwards all operations to the object as "
"long as the object still exists.  If the object is deallocated, attempting "
"to use a proxy will cause a :exc:`weakref.ReferenceError` exception to be "
"raised. ::"
msgstr ""

#: whatsnew/2.1.rst:416
msgid "PEP 205 - Weak References"
msgstr ""

# 0712c77357a744a4bcef5d308fd27ad6
#: whatsnew/2.1.rst:417
msgid "Written and implemented by Fred L. Drake, Jr."
msgstr ""

# 6e9cfc1a65184e5ea10c1b67f7c6748c
#: whatsnew/2.1.rst:423
msgid "PEP 232: Function Attributes"
msgstr ""

# f4b68ac9a1104bc7b7f96ccb244101be
#: whatsnew/2.1.rst:425
msgid ""
"In Python 2.1, functions can now have arbitrary information attached to "
"them. People were often using docstrings to hold information about functions "
"and methods, because the ``__doc__`` attribute was the only way of attaching "
"any information to a function.  For example, in the Zope Web application "
"server, functions are marked as safe for public access by having a "
"docstring, and in John Aycock's SPARK parsing framework, docstrings hold "
"parts of the BNF grammar to be parsed.  This overloading is unfortunate, "
"since docstrings are really intended to hold a function's documentation; for "
"example, it means you can't properly document functions intended for private "
"use in Zope."
msgstr ""

# e58e29c627784e22bcc4a5625ac2cf7f
#: whatsnew/2.1.rst:435
msgid ""
"Arbitrary attributes can now be set and retrieved on functions using the "
"regular Python syntax::"
msgstr ""

# c13f296afbb34849b710f3fde5725986
#: whatsnew/2.1.rst:444
msgid ""
"The dictionary containing attributes can be accessed as the function's :attr:"
"`__dict__`. Unlike the :attr:`__dict__` attribute of class instances, in "
"functions you can actually assign a new dictionary to :attr:`__dict__`, "
"though the new value is restricted to a regular Python dictionary; you "
"*can't* be tricky and set it to a :class:`UserDict` instance, or any other "
"random object that behaves like a mapping."
msgstr ""

#: whatsnew/2.1.rst:454
msgid "PEP 232 - Function Attributes"
msgstr ""

# dad33ad85d1c4f86b08234da9d666054
#: whatsnew/2.1.rst:455
msgid "Written and implemented by Barry Warsaw."
msgstr ""

# f2e8cc4c50944f559869b4cf402bcce4
#: whatsnew/2.1.rst:461
msgid "PEP 235: Importing Modules on Case-Insensitive Platforms"
msgstr ""

# e260066521a541919264a65a43bc7e32
#: whatsnew/2.1.rst:463
msgid ""
"Some operating systems have filesystems that are case-insensitive, MacOS and "
"Windows being the primary examples; on these systems, it's impossible to "
"distinguish the filenames ``FILE.PY`` and ``file.py``, even though they do "
"store the file's name  in its original case (they're case-preserving, too)."
msgstr ""

# 6b97dcf0ee0b4a0c8d6c1b35f875c271
#: whatsnew/2.1.rst:468
msgid ""
"In Python 2.1, the :keyword:`import` statement will work to simulate case- "
"sensitivity on case-insensitive platforms.  Python will now search for the "
"first case-sensitive match by default, raising an :exc:`ImportError` if no "
"such file is found, so ``import file`` will not import a module named ``FILE."
"PY``.  Case- insensitive matching can be requested by setting the :envvar:"
"`PYTHONCASEOK` environment variable before starting the Python interpreter."
msgstr ""

# 7644c29ccdb447bfa8a6d07c63ce82f8
#: whatsnew/2.1.rst:479
msgid "PEP 217: Interactive Display Hook"
msgstr ""

# 205092b3244f4b02bf0a991cf8fedebe
#: whatsnew/2.1.rst:481
msgid ""
"When using the Python interpreter interactively, the output of commands is "
"displayed using the built-in :func:`repr` function. In Python 2.1, the "
"variable :func:`sys.displayhook` can be set to a callable object which will "
"be called instead of :func:`repr`. For example, you can set it to a special "
"pretty- printing function::"
msgstr ""

#: whatsnew/2.1.rst:502
msgid "PEP 217 - Display Hook for Interactive Use"
msgstr ""

# a580aa290077449a9f88f4b1f361a8b0
#: whatsnew/2.1.rst:503
msgid "Written and implemented by Moshe Zadka."
msgstr ""

# d3380f2752634510b761da458ce3bf06
#: whatsnew/2.1.rst:509
msgid "PEP 208: New Coercion Model"
msgstr ""

# 43c41ebaac7442f28c70ab0ed9cf48e7
#: whatsnew/2.1.rst:511
msgid ""
"How numeric coercion is done at the C level was significantly modified.  "
"This will only affect the authors of C extensions to Python, allowing them "
"more flexibility in writing extension types that support numeric operations."
msgstr ""

# 44781e39a2454220ba4494c7ad2f0d3f
#: whatsnew/2.1.rst:515
msgid ""
"Extension types can now set the type flag ``Py_TPFLAGS_CHECKTYPES`` in their "
"``PyTypeObject`` structure to indicate that they support the new coercion "
"model. In such extension types, the numeric slot functions can no longer "
"assume that they'll be passed two arguments of the same type; instead they "
"may be passed two arguments of differing types, and can then perform their "
"own internal coercion. If the slot function is passed a type it can't "
"handle, it can indicate the failure by returning a reference to the "
"``Py_NotImplemented`` singleton value. The numeric functions of the other "
"type will then be tried, and perhaps they can handle the operation; if the "
"other type also returns ``Py_NotImplemented``, then a :exc:`TypeError` will "
"be raised.  Numeric methods written in Python can also return "
"``Py_NotImplemented``, causing the interpreter to act as if the method did "
"not exist (perhaps raising a :exc:`TypeError`, perhaps trying another "
"object's numeric methods)."
msgstr ""

#: whatsnew/2.1.rst:534
msgid "PEP 208 - Reworking the Coercion Model"
msgstr ""

# a7281ccf0388434e9d7bbcd48f8b4fd7
#: whatsnew/2.1.rst:533
msgid ""
"Written and implemented by Neil Schemenauer, heavily based upon earlier work "
"by Marc-André Lemburg.  Read this to understand the fine points of how "
"numeric operations will now be processed at the C level."
msgstr ""

# 903b19f5d02141eabd9c48a8062cfd1a
#: whatsnew/2.1.rst:541
msgid "PEP 241: Metadata in Python Packages"
msgstr ""

# 63c28cfd33ae425ca661481243b55c5a
#: whatsnew/2.1.rst:543
msgid ""
"A common complaint from Python users is that there's no single catalog of "
"all the Python modules in existence.  T. Middleton's Vaults of Parnassus at "
"http://www.vex.net/parnassus/ are the largest catalog of Python modules, but "
"registering software at the Vaults is optional, and many people don't bother."
msgstr ""

# b81fe18c019141e29aa29c484728f3e6
#: whatsnew/2.1.rst:548
msgid ""
"As a first small step toward fixing the problem, Python software packaged "
"using the Distutils :command:`sdist` command will include a file named :file:"
"`PKG-INFO` containing information about the package such as its name, "
"version, and author (metadata, in cataloguing terminology).  PEP 241 "
"contains the full list of fields that can be present in the :file:`PKG-INFO` "
"file.  As people began to package their software using Python 2.1, more and "
"more packages will include metadata, making it possible to build automated "
"cataloguing systems and experiment with them.  With the result experience, "
"perhaps it'll be possible to design a really good catalog and then build "
"support for it into Python 2.2. For example, the Distutils :command:`sdist` "
"and :command:`bdist_\\*` commands could support a :option:`upload` option "
"that would automatically upload your package to a catalog server."
msgstr ""

# e0a8f37693f04db29297225807664735
#: whatsnew/2.1.rst:561
msgid ""
"You can start creating packages containing :file:`PKG-INFO` even if you're "
"not using Python 2.1, since a new release of the Distutils will be made for "
"users of earlier Python versions.  Version 1.0.2 of the Distutils includes "
"the changes described in PEP 241, as well as various bugfixes and "
"enhancements.  It will be available from  the Distutils SIG at http://www."
"python.org/sigs/distutils-sig/."
msgstr ""

#: whatsnew/2.1.rst:571
msgid "PEP 241 - Metadata for Python Software Packages"
msgstr ""

#: whatsnew/2.1.rst:574
msgid "PEP 243 - Module Repository Upload Mechanism"
msgstr ""

# 4c6a840a5bb147f58ccbeac7c855a2e0
#: whatsnew/2.1.rst:574
msgid ""
"Written by Sean Reifschneider, this draft PEP describes a proposed mechanism "
"for uploading  Python packages to a central server."
msgstr ""

# 395f07c3f1434599926ab30facb7232f
# fe74af1f2fc7437c868aa2b418ebe8b5
# 1442c1b9bd0844b4bb689c03524fd8f7
# f117e783646348f483e632a88b241ac5
#: whatsnew/2.1.rst:581 whatsnew/2.2.rst:934 whatsnew/2.6.rst:1783
#: whatsnew/2.7.rst:969
msgid "New and Improved Modules"
msgstr ""

# 77594aba5e1d470484d590c228f960a0
#: whatsnew/2.1.rst:583
msgid ""
"Ka-Ping Yee contributed two new modules: :mod:`inspect.py`, a module for "
"getting information about live Python code, and :mod:`pydoc.py`, a module "
"for interactively converting docstrings to HTML or text.  As a bonus, :file:"
"`Tools/scripts/pydoc`, which is now automatically installed, uses :mod:"
"`pydoc.py` to display documentation given a Python module, package, or class "
"name.  For example, ``pydoc xml.dom`` displays the following::"
msgstr ""

# 61ae377442854eb8b81a6d4e5bb1efff
#: whatsnew/2.1.rst:605
msgid ""
":file:`pydoc` also includes a Tk-based interactive help browser.   :file:"
"`pydoc` quickly becomes addictive; try it out!"
msgstr ""

# 2869aff7c8ad4c0e9f234193a78d2cd4
#: whatsnew/2.1.rst:608
msgid ""
"Two different modules for unit testing were added to the standard library. "
"The :mod:`doctest` module, contributed by Tim Peters, provides a testing "
"framework based on running embedded examples in docstrings and comparing the "
"results against the expected output.  PyUnit, contributed by Steve Purcell, "
"is a unit testing framework inspired by JUnit, which was in turn an "
"adaptation of Kent Beck's Smalltalk testing framework.  See http://pyunit."
"sourceforge.net/ for more information about PyUnit."
msgstr ""

# cf14392dbb3d4a7e8a3dfc7b246d59d7
#: whatsnew/2.1.rst:616
msgid ""
"The :mod:`difflib` module contains a class, :class:`SequenceMatcher`, which "
"compares two sequences and computes the changes required to transform one "
"sequence into the other.  For example, this module can be used to write a "
"tool similar to the Unix :program:`diff` program, and in fact the sample "
"program :file:`Tools/scripts/ndiff.py` demonstrates how to write such a "
"script."
msgstr ""

# a4a4122b5d5e4db1bc9fe87c64ea09d1
#: whatsnew/2.1.rst:622
msgid ""
":mod:`curses.panel`, a wrapper for the panel library, part of ncurses and of "
"SYSV curses, was contributed by Thomas Gellekum.  The panel library provides "
"windows with the additional feature of depth. Windows can be moved higher or "
"lower in the depth ordering, and the panel library figures out where panels "
"overlap and which sections are visible."
msgstr ""

# 140ee169b3ff4e5ca651f20494dec4a8
#: whatsnew/2.1.rst:628
msgid ""
"The PyXML package has gone through a few releases since Python 2.0, and "
"Python 2.1 includes an updated version of the :mod:`xml` package.  Some of "
"the noteworthy changes include support for Expat 1.2 and later versions, the "
"ability for Expat parsers to handle files in any encoding supported by "
"Python, and various bugfixes for SAX, DOM, and the :mod:`minidom` module."
msgstr ""

# 2bbbd095ba7446fb888c6cc3c1e637aa
#: whatsnew/2.1.rst:634
msgid ""
"Ping also contributed another hook for handling uncaught exceptions. :func:"
"`sys.excepthook` can be set to a callable object.  When an exception isn't "
"caught by any :keyword:`try`...\\ :keyword:`except` blocks, the exception "
"will be passed to :func:`sys.excepthook`, which can then do whatever it "
"likes.  At the Ninth Python Conference, Ping demonstrated an application for "
"this hook: printing an extended traceback that not only lists the stack "
"frames, but also lists the function arguments and the local variables for "
"each frame."
msgstr ""

# ea89bffa227842a3908992f5381ac1e5
#: whatsnew/2.1.rst:642
msgid ""
"Various functions in the :mod:`time` module, such as :func:`asctime` and :"
"func:`localtime`, require a floating point argument containing the time in "
"seconds since the epoch.  The most common use of these functions is to work "
"with the current time, so the floating point argument has been made "
"optional; when a value isn't provided, the current time will be used.  For "
"example, log file entries usually need a string containing the current time; "
"in Python 2.1, ``time.asctime()`` can be used, instead of the lengthier "
"``time.asctime(time.localtime(time.time()))`` that was previously required."
msgstr ""

# 01bdca7ca3ee4c4188143ed524fb0cb1
#: whatsnew/2.1.rst:651
msgid "This change was proposed and implemented by Thomas Wouters."
msgstr ""

# 68f557e59d664f01ace253600d74c2cf
#: whatsnew/2.1.rst:653
msgid ""
"The :mod:`ftplib` module now defaults to retrieving files in passive mode, "
"because passive mode is more likely to work from behind a firewall.  This "
"request came from the Debian bug tracking system, since other Debian "
"packages use :mod:`ftplib` to retrieve files and then don't work from behind "
"a firewall. It's deemed unlikely that this will cause problems for anyone, "
"because Netscape defaults to passive mode and few people complain, but if "
"passive mode is unsuitable for your application or network setup, call :meth:"
"`set_pasv(0)` on FTP objects to disable passive mode."
msgstr ""

# 1087dc79722e4178b35762d7305a5fa0
#: whatsnew/2.1.rst:662
msgid ""
"Support for raw socket access has been added to the :mod:`socket` module, "
"contributed by Grant Edwards."
msgstr ""

# 503e2993b7ec40ebaee26f40996896c6
#: whatsnew/2.1.rst:665
msgid ""
"The :mod:`pstats` module now contains a simple interactive statistics "
"browser for displaying timing profiles for Python programs, invoked when the "
"module is run as a script.  Contributed by  Eric S. Raymond."
msgstr ""

# d15e90cb7b714e6489bdb7b1a6ff4414
#: whatsnew/2.1.rst:669
msgid ""
"A new implementation-dependent function, :func:`sys._getframe([depth])`, has "
"been added to return a given frame object from the current call stack. :func:"
"`sys._getframe` returns the frame at the top of the call stack;  if the "
"optional integer argument *depth* is supplied, the function returns the "
"frame that is *depth* calls below the top of the stack.  For example, ``sys."
"_getframe(1)`` returns the caller's frame object."
msgstr ""

# 8439773f791c44838a2ab187ef2720aa
#: whatsnew/2.1.rst:676
msgid ""
"This function is only present in CPython, not in Jython or the .NET "
"implementation.  Use it for debugging, and resist the temptation to put it "
"into production code."
msgstr ""

# b875d885511f4d349fdffb681fe5b295
# c7f5b6569e434022b7b72f6ee85d45c0
# 0910000dde9049a7843c1535ba70794b
# 8f0918bd40bf4b2a91627a6ff1c597e1
#: whatsnew/2.1.rst:684 whatsnew/2.2.rst:1129 whatsnew/2.3.rst:1960
#: whatsnew/2.7.rst:2313
msgid "Other Changes and Fixes"
msgstr ""

# 15b23031e9664a2294caa1089ae841c7
#: whatsnew/2.1.rst:686
msgid ""
"There were relatively few smaller changes made in Python 2.1 due to the "
"shorter release cycle.  A search through the CVS change logs turns up 117 "
"patches applied, and 136 bugs fixed; both figures are likely to be "
"underestimates.  Some of the more notable changes are:"
msgstr ""

# 366a83bad9ef45c49c98cc94ae3c45cb
#: whatsnew/2.1.rst:691
msgid ""
"A specialized object allocator is now optionally available, that should be "
"faster than the system :func:`malloc` and have less memory overhead.  The "
"allocator uses C's :func:`malloc` function to get large pools of memory, and "
"then fulfills smaller memory requests from these pools.  It can be enabled "
"by providing the :option:`--with-pymalloc` option to the :program:"
"`configure` script; see :file:`Objects/obmalloc.c` for the implementation "
"details."
msgstr ""

# 9a27e9a6880847b2bb40c06e9db8bb1c
#: whatsnew/2.1.rst:698
msgid ""
"Authors of C extension modules should test their code with the object "
"allocator enabled, because some incorrect code may break, causing core dumps "
"at runtime. There are a bunch of memory allocation functions in Python's C "
"API that have previously been just aliases for the C library's :func:"
"`malloc` and :func:`free`, meaning that if you accidentally called "
"mismatched functions, the error wouldn't be noticeable.  When the object "
"allocator is enabled, these functions aren't aliases of :func:`malloc` and :"
"func:`free` any more, and calling the wrong function to free memory will get "
"you a core dump.  For example, if memory was allocated using :func:"
"`PyMem_New`, it has to be freed using :func:`PyMem_Del`, not :func:`free`.  "
"A few modules included with Python fell afoul of this and had to be fixed; "
"doubtless there are more third-party modules that will have the same problem."
msgstr ""

# 8f2d5360a6344b77aaa521358cd651a0
#: whatsnew/2.1.rst:711
msgid "The object allocator was contributed by Vladimir Marangozov."
msgstr ""

# 735b8f86c1064ac59d619360c35aa626
#: whatsnew/2.1.rst:713
msgid ""
"The speed of line-oriented file I/O has been improved because people often "
"complain about its lack of speed, and because it's often been used as a "
"naïve benchmark.  The :meth:`readline` method of file objects has therefore "
"been rewritten to be much faster.  The exact amount of the speedup will vary "
"from platform to platform depending on how slow the C library's :func:`getc` "
"was, but is around 66%, and potentially much faster on some particular "
"operating systems. Tim Peters did much of the benchmarking and coding for "
"this change, motivated by a discussion in comp.lang.python."
msgstr ""

# 3b6f02ba3cc445fd832b2c8b444a27e4
#: whatsnew/2.1.rst:722
msgid ""
"A new module and method for file objects was also added, contributed by Jeff "
"Epler. The new method, :meth:`xreadlines`, is similar to the existing :func:"
"`xrange` built-in.  :func:`xreadlines` returns an opaque sequence object "
"that only supports being iterated over, reading a line on every iteration "
"but not reading the entire file into memory as the existing :meth:"
"`readlines` method does. You'd use it like this::"
msgstr ""

# 6a0e82c19b7d4f539f3a7394b057cebd
#: whatsnew/2.1.rst:733
msgid ""
"For a fuller discussion of the line I/O changes, see the python-dev summary "
"for January 1-15, 2001 at http://www.python.org/dev/summary/2001-01-1/."
msgstr ""

# d3d67b5e71b34af990639f427d667d29
#: whatsnew/2.1.rst:736
msgid ""
"A new method, :meth:`popitem`, was added to dictionaries to enable "
"destructively iterating through the contents of a dictionary; this can be "
"faster for large dictionaries because there's no need to construct a list "
"containing all the keys or values. ``D.popitem()`` removes a random ``(key, "
"value)`` pair from the dictionary ``D`` and returns it as a 2-tuple.  This "
"was implemented mostly by Tim Peters and Guido van Rossum, after a "
"suggestion and preliminary patch by Moshe Zadka."
msgstr ""

# 7b4b1e22146c46c3a25109124fa58cf9
#: whatsnew/2.1.rst:744
msgid ""
"Modules can now control which names are imported when ``from module import "
"*`` is used, by defining an ``__all__`` attribute containing a list of names "
"that will be imported.  One common complaint is that if the module imports "
"other modules such as :mod:`sys` or :mod:`string`, ``from module import *`` "
"will add them to the importing module's namespace.  To fix this, simply list "
"the public names in ``__all__``::"
msgstr ""

# ee2d3d45a98d4cab8dc524cc148a1b4a
#: whatsnew/2.1.rst:754
msgid ""
"A stricter version of this patch was first suggested and implemented by Ben "
"Wolfson, but after some python-dev discussion, a weaker final version was "
"checked in."
msgstr ""

# e3c368fafd0c40f2b2407098bdedd8a1
#: whatsnew/2.1.rst:758
msgid ""
"Applying :func:`repr` to strings previously used octal escapes for non-"
"printable characters; for example, a newline was ``'\\012'``.  This was a "
"vestigial trace of Python's C ancestry, but today octal is of very little "
"practical use.  Ka-Ping Yee suggested using hex escapes instead of octal "
"ones, and using the ``\\n``, ``\\t``, ``\\r`` escapes for the appropriate "
"characters, and implemented this new formatting."
msgstr ""

# c7d090f27139480ca5ea85f1efe5e16e
#: whatsnew/2.1.rst:765
msgid ""
"Syntax errors detected at compile-time can now raise exceptions containing "
"the filename and line number of the error, a pleasant side effect of the "
"compiler reorganization done by Jeremy Hylton."
msgstr ""

# a1c07195d3f346f6a553bb47c9f57088
#: whatsnew/2.1.rst:769
msgid ""
"C extensions which import other modules have been changed to use :func:"
"`PyImport_ImportModule`, which means that they will use any import hooks "
"that have been installed.  This is also encouraged for third-party "
"extensions that need to import some other module from C code."
msgstr ""

# cfa097eaa80d4a8c922234ca71d0d2c3
#: whatsnew/2.1.rst:774
msgid ""
"The size of the Unicode character database was shrunk by another 340K thanks "
"to Fredrik Lundh."
msgstr ""

# 0ffb8011014049e19948049bccda4a89
#: whatsnew/2.1.rst:777
msgid ""
"Some new ports were contributed: MacOS X (by Steven Majewski), Cygwin (by "
"Jason Tishler); RISCOS (by Dietmar Schwertberger); Unixware 7  (by Billy G. "
"Allie)."
msgstr ""

# c2cf9704454e413d8b26679bfc3c2868
#: whatsnew/2.1.rst:781
msgid ""
"And there's the usual list of minor bugfixes, minor memory leaks, docstring "
"edits, and other tweaks, too lengthy to be worth itemizing; see the CVS logs "
"for the full details if you want them."
msgstr ""

# 8d6ebc16b3a749b38c055661e97fc86b
#: whatsnew/2.1.rst:791
msgid ""
"The author would like to thank the following people for offering suggestions "
"on various drafts of this article: Graeme Cross, David Goodger, Jay Graves, "
"Michael Hudson, Marc-André Lemburg, Fredrik Lundh, Neil Schemenauer, Thomas "
"Wouters."
msgstr ""

# 911aed8e5062464ca3f67ce8295e1f1b
#: whatsnew/2.2.rst:3
#, fuzzy
msgid "What's New in Python 2.2"
msgstr "Nouveautés de Python 2.0"

# a8d8f8934a0d4733b5c2ae908278611b
#: whatsnew/2.2.rst:15
msgid ""
"This article explains the new features in Python 2.2.2, released on October "
"14, 2002.  Python 2.2.2 is a bugfix release of Python 2.2, originally "
"released on December 21, 2001."
msgstr ""

# 7ac1f2ef149646e1a796ef0f61ca99e7
#: whatsnew/2.2.rst:19
msgid ""
"Python 2.2 can be thought of as the \"cleanup release\".  There are some "
"features such as generators and iterators that are completely new, but most "
"of the changes, significant and far-reaching though they may be, are aimed "
"at cleaning up irregularities and dark corners of the language design."
msgstr ""

# bda20dc441b240b0ad17f6495228b958
#: whatsnew/2.2.rst:24
msgid ""
"This article doesn't attempt to provide a complete specification of the new "
"features, but instead provides a convenient overview.  For full details, you "
"should refer to the documentation for Python 2.2, such as the `Python "
"Library Reference <http://www.python.org/doc/2.2/lib/lib.html>`_ and the "
"`Python Reference Manual <http://www.python.org/doc/2.2/ref/ref.html>`_.  If "
"you want to understand the complete implementation and design rationale for "
"a change, refer to the PEP for a particular new feature."
msgstr ""

# d9084e953e20470b89283a25475332c7
#: whatsnew/2.2.rst:43
msgid "PEPs 252 and 253: Type and Class Changes"
msgstr ""

# d377f2f5233b43d5944e90694bef58d3
#: whatsnew/2.2.rst:45
msgid ""
"The largest and most far-reaching changes in Python 2.2 are to Python's "
"model of objects and classes.  The changes should be backward compatible, so "
"it's likely that your code will continue to run unchanged, but the changes "
"provide some amazing new capabilities. Before beginning this, the longest "
"and most complicated section of this article, I'll provide an overview of "
"the changes and offer some comments."
msgstr ""

# 08730357d2d042ccb53240b99c5c64af
#: whatsnew/2.2.rst:52
msgid ""
"A long time ago I wrote a Web page listing flaws in Python's design.  One of "
"the most significant flaws was that it's impossible to subclass Python types "
"implemented in C.  In particular, it's not possible to subclass built-in "
"types, so you can't just subclass, say, lists in order to add a single "
"useful method to them. The :mod:`UserList` module provides a class that "
"supports all of the methods of lists and that can be subclassed further, but "
"there's lots of C code that expects a regular Python list and won't accept "
"a :class:`UserList` instance."
msgstr ""

# 27a68993acaf4c75af4a3f132074905d
#: whatsnew/2.2.rst:61
msgid ""
"Python 2.2 fixes this, and in the process adds some exciting new "
"capabilities. A brief summary:"
msgstr ""

# 9f59067ff08f440085d456e3559e32e1
#: whatsnew/2.2.rst:64
msgid ""
"You can subclass built-in types such as lists and even integers, and your "
"subclasses should work in every place that requires the original type."
msgstr ""

# 470dae4ddc4f466f9a4aad44d3a2de95
#: whatsnew/2.2.rst:67
msgid ""
"It's now possible to define static and class methods, in addition to the "
"instance methods available in previous versions of Python."
msgstr ""

# 67c5acb1195849eaa06b7d96821827a7
#: whatsnew/2.2.rst:70
msgid ""
"It's also possible to automatically call methods on accessing or setting an "
"instance attribute by using a new mechanism called :dfn:`properties`.  Many "
"uses of :meth:`__getattr__` can be rewritten to use properties instead, "
"making the resulting code simpler and faster.  As a small side benefit, "
"attributes can now have docstrings, too."
msgstr ""

# fcd89de2e5a1459fa5641cf72d6d748e
#: whatsnew/2.2.rst:76
msgid ""
"The list of legal attributes for an instance can be limited to a particular "
"set using :dfn:`slots`, making it possible to safeguard against typos and "
"perhaps make more optimizations possible in future versions of Python."
msgstr ""

# 0cd15488202a4d3fb7cf4ca1b3b7787c
#: whatsnew/2.2.rst:80
msgid ""
"Some users have voiced concern about all these changes.  Sure, they say, the "
"new features are neat and lend themselves to all sorts of tricks that "
"weren't possible in previous versions of Python, but they also make the "
"language more complicated.  Some people have said that they've always "
"recommended Python for its simplicity, and feel that its simplicity is being "
"lost."
msgstr ""

# ef7778a4804e4e2190c2e4bf616fb7d5
#: whatsnew/2.2.rst:86
msgid ""
"Personally, I think there's no need to worry.  Many of the new features are "
"quite esoteric, and you can write a lot of Python code without ever needed "
"to be aware of them.  Writing a simple class is no more difficult than it "
"ever was, so you don't need to bother learning or teaching them unless "
"they're actually needed.  Some very complicated tasks that were previously "
"only possible from C will now be possible in pure Python, and to my mind "
"that's all for the better."
msgstr ""

# f7924a8d66314c498f68d888624abd1b
#: whatsnew/2.2.rst:93
msgid ""
"I'm not going to attempt to cover every single corner case and small change "
"that were required to make the new features work.  Instead this section will "
"paint only the broad strokes.  See section :ref:`sect-rellinks`, \"Related "
"Links\", for further sources of information about Python 2.2's new object "
"model."
msgstr ""

# 46a1f888321c442d99b08b68dd1d9ad5
#: whatsnew/2.2.rst:100
msgid "Old and New Classes"
msgstr ""

# 4fe1a1a26d204d7aa078b95d4a1aa51f
#: whatsnew/2.2.rst:102
msgid ""
"First, you should know that Python 2.2 really has two kinds of classes: "
"classic or old-style classes, and new-style classes.  The old-style class "
"model is exactly the same as the class model in earlier versions of Python.  "
"All the new features described in this section apply only to new-style "
"classes. This divergence isn't intended to last forever; eventually old-"
"style classes will be dropped, possibly in Python 3.0."
msgstr ""

# d081857d6e9a4143b4a44a52c516015a
#: whatsnew/2.2.rst:109
msgid ""
"So how do you define a new-style class?  You do it by subclassing an "
"existing new-style class.  Most of Python's built-in types, such as "
"integers, lists, dictionaries, and even files, are new-style classes now.  A "
"new-style class named :class:`object`, the base class for all built-in "
"types, has also been added so if no built-in type is suitable, you can just "
"subclass :class:`object`::"
msgstr ""

# d48701894e5b4ff09a0d50b767905467
#: whatsnew/2.2.rst:121
msgid ""
"This means that :keyword:`class` statements that don't have any base classes "
"are always classic classes in Python 2.2.  (Actually you can also change "
"this by setting a module-level variable named :attr:`__metaclass__` --- see :"
"pep:`253` for the details --- but it's easier to just subclass :keyword:"
"`object`.)"
msgstr ""

# 86ea664ae4a441c09d98bfe513852bf5
#: whatsnew/2.2.rst:126
msgid ""
"The type objects for the built-in types are available as built-ins, named "
"using a clever trick.  Python has always had built-in functions named :func:"
"`int`, :func:`float`, and :func:`str`.  In 2.2, they aren't functions any "
"more, but type objects that behave as factories when called. ::"
msgstr ""

# 550ea471ae804f719c2c0a19ef94598a
#: whatsnew/2.2.rst:136
msgid ""
"To make the set of types complete, new type objects such as :func:`dict` "
"and :func:`file` have been added.  Here's a more interesting example, adding "
"a :meth:`lock` method to file objects::"
msgstr ""

# b6c55734db784a4193ef9c83e51e7f2f
#: whatsnew/2.2.rst:146
msgid ""
"The now-obsolete :mod:`posixfile` module contained a class that emulated all "
"of a file object's methods and also added a :meth:`lock` method, but this "
"class couldn't be passed to internal functions that expected a built-in "
"file, something which is possible with our new :class:`LockableFile`."
msgstr ""

# b3141401e06e47e89ffdf73ed88fb3dd
#: whatsnew/2.2.rst:153
msgid "Descriptors"
msgstr ""

# d32dd8328e1244eba584925b1138fb3c
#: whatsnew/2.2.rst:155
msgid ""
"In previous versions of Python, there was no consistent way to discover what "
"attributes and methods were supported by an object. There were some informal "
"conventions, such as defining :attr:`__members__` and :attr:`__methods__` "
"attributes that were lists of names, but often the author of an extension "
"type or a class wouldn't bother to define them.  You could fall back on "
"inspecting the :attr:`__dict__` of an object, but when class inheritance or "
"an arbitrary :meth:`__getattr__` hook were in use this could still be "
"inaccurate."
msgstr ""

# b66397dc2af14a90b55edac15ba5201f
#: whatsnew/2.2.rst:163
msgid ""
"The one big idea underlying the new class model is that an API for "
"describing the attributes of an object using :dfn:`descriptors` has been "
"formalized. Descriptors specify the value of an attribute, stating whether "
"it's a method or a field.  With the descriptor API, static methods and class "
"methods become possible, as well as more exotic constructs."
msgstr ""

# 31d9b2d257ab4d2fa696f6709061f47f
#: whatsnew/2.2.rst:169
msgid ""
"Attribute descriptors are objects that live inside class objects, and have a "
"few attributes of their own:"
msgstr ""

# 198b347f592b4fa19394e6fd50dedfaf
#: whatsnew/2.2.rst:172
msgid ":attr:`__name__` is the attribute's name."
msgstr ""

# 3ea2acb47d6e4f55a1a70c5c5f113f17
#: whatsnew/2.2.rst:174
msgid ":attr:`__doc__` is the attribute's docstring."
msgstr ""

# 92c2d303569f4a91a2eb95b5db2cb020
#: whatsnew/2.2.rst:176
msgid ""
":meth:`__get__(object)` is a method that retrieves the attribute value from "
"*object*."
msgstr ""

# 070aea20a4e249998fce89b889d80cb1
#: whatsnew/2.2.rst:179
msgid ""
":meth:`__set__(object, value)` sets the attribute on *object* to *value*."
msgstr ""

# 23eee6e872704bbdb410a9525ebe1b93
#: whatsnew/2.2.rst:181
msgid ""
":meth:`__delete__(object, value)` deletes the *value*  attribute of *object*."
msgstr ""

# d6bdbee530d14dc9b77c41e10ffbf2dd
#: whatsnew/2.2.rst:183
msgid ""
"For example, when you write ``obj.x``, the steps that Python actually "
"performs are::"
msgstr ""

# 469c0d4d84f54787958475c405451de7
#: whatsnew/2.2.rst:189
msgid ""
"For methods, :meth:`descriptor.__get__` returns a temporary object that's "
"callable, and wraps up the instance and the method to be called on it. This "
"is also why static methods and class methods are now possible; they have "
"descriptors that wrap up just the method, or the method and the class.  As a "
"brief explanation of these new kinds of methods, static methods aren't "
"passed the instance, and therefore resemble regular functions.  Class "
"methods are passed the class of the object, but not the object itself.  "
"Static and class methods are defined like this::"
msgstr ""

# 1046e389b9124126a150cacbfea219d9
#: whatsnew/2.2.rst:207
msgid ""
"The :func:`staticmethod` function takes the function :func:`f`, and returns "
"it wrapped up in a descriptor so it can be stored in the class object.  You "
"might expect there to be special syntax for creating such methods (``def "
"static f``, ``defstatic f()``, or something like that) but no such syntax "
"has been defined yet; that's been left for future versions of Python."
msgstr ""

# fa771a8db4374f3f81d1d9ff96e6b90c
#: whatsnew/2.2.rst:213
msgid ""
"More new features, such as slots and properties, are also implemented as new "
"kinds of descriptors, and it's not difficult to write a descriptor class "
"that does something novel.  For example, it would be possible to write a "
"descriptor class that made it possible to write Eiffel-style preconditions "
"and postconditions for a method.  A class that used this feature might be "
"defined like this::"
msgstr ""

# 2c6a6632ae4940bf92e60577a9a3e8d0
#: whatsnew/2.2.rst:235
msgid ""
"Note that a person using the new :func:`eiffelmethod` doesn't have to "
"understand anything about descriptors.  This is why I think the new features "
"don't increase the basic complexity of the language. There will be a few "
"wizards who need to know about it in order to write :func:`eiffelmethod` or "
"the ZODB or whatever, but most users will just write code on top of the "
"resulting libraries and ignore the implementation details."
msgstr ""

# 0d3d3df3bdcf4e8e9de090da6a65647c
#: whatsnew/2.2.rst:244
msgid "Multiple Inheritance: The Diamond Rule"
msgstr ""

# 6b67a8594853487f857b340c5bddd30f
#: whatsnew/2.2.rst:246
msgid ""
"Multiple inheritance has also been made more useful through changing the "
"rules under which names are resolved.  Consider this set of classes (diagram "
"taken from :pep:`253` by Guido van Rossum)::"
msgstr ""

# 13b9b8fd127a4a42a2b4b7aedcbb1dc9
#: whatsnew/2.2.rst:264
msgid ""
"The lookup rule for classic classes is simple but not very smart; the base "
"classes are searched depth-first, going from left to right.  A reference to :"
"meth:`D.save` will search the classes :class:`D`, :class:`B`, and then :"
"class:`A`, where :meth:`save` would be found and returned.  :meth:`C.save` "
"would never be found at all.  This is bad, because if :class:`C`'s :meth:"
"`save` method is saving some internal state specific to :class:`C`, not "
"calling it will result in that state never getting saved."
msgstr ""

# 4bcfccedeff645d982e670c34ff4bade
#: whatsnew/2.2.rst:272
msgid ""
"New-style classes follow a different algorithm that's a bit more complicated "
"to explain, but does the right thing in this situation. (Note that Python "
"2.3 changes this algorithm to one that produces the same results in most "
"cases, but produces more useful results for really complicated inheritance "
"graphs.)"
msgstr ""

# 0a5f2864ee834e588400a8c6911be333
#: whatsnew/2.2.rst:277
msgid ""
"List all the base classes, following the classic lookup rule and include a "
"class multiple times if it's visited repeatedly.  In the above example, the "
"list of visited classes is [:class:`D`, :class:`B`, :class:`A`, :class:`C`, :"
"class:`A`]."
msgstr ""

# db4a14d345eb428db1218ff51d761eea
#: whatsnew/2.2.rst:282
msgid ""
"Scan the list for duplicated classes.  If any are found, remove all but one "
"occurrence, leaving the *last* one in the list.  In the above example, the "
"list becomes [:class:`D`, :class:`B`, :class:`C`, :class:`A`] after dropping "
"duplicates."
msgstr ""

# 753af34cbb934ca895ea768c6ec3b600
#: whatsnew/2.2.rst:287
msgid ""
"Following this rule, referring to :meth:`D.save` will return :meth:`C.save`, "
"which is the behaviour we're after.  This lookup rule is the same as the one "
"followed by Common Lisp.  A new built-in function, :func:`super`, provides a "
"way to get at a class's superclasses without having to reimplement Python's "
"algorithm. The most commonly used form will be  :func:`super(class, obj)`, "
"which returns  a bound superclass object (not the actual class object).  "
"This form will be used in methods to call a method in the superclass; for "
"example, :class:`D`'s :meth:`save` method would look like this::"
msgstr ""

# 969f9d69502445c3b69931e9fdff0090
#: whatsnew/2.2.rst:303
msgid ""
":func:`super` can also return unbound superclass objects when called as :"
"func:`super(class)` or :func:`super(class1, class2)`, but this probably "
"won't often be useful."
msgstr ""

# 1b0b4a78e15f402eac3e1ac1bb1e560c
#: whatsnew/2.2.rst:309
msgid "Attribute Access"
msgstr ""

# 6701ab5e30fe4c19aa76b128eceae3fa
#: whatsnew/2.2.rst:311
msgid ""
"A fair number of sophisticated Python classes define hooks for attribute "
"access using :meth:`__getattr__`; most commonly this is done for "
"convenience, to make code more readable by automatically mapping an "
"attribute access such as ``obj.parent`` into a method call such as ``obj."
"get_parent``.  Python 2.2 adds some new ways of controlling attribute access."
msgstr ""

# 438ef2c6fff649d3bc2b9bb00eb9d287
#: whatsnew/2.2.rst:317
msgid ""
"First, :meth:`__getattr__(attr_name)` is still supported by new-style "
"classes, and nothing about it has changed.  As before, it will be called "
"when an attempt is made to access ``obj.foo`` and no attribute named ``foo`` "
"is found in the instance's dictionary."
msgstr ""

# c3bc09c02be9476099047010fc4b9d7f
#: whatsnew/2.2.rst:322
msgid ""
"New-style classes also support a new method, :meth:"
"`__getattribute__(attr_name)`.  The difference between the two methods is "
"that :meth:`__getattribute__` is *always* called whenever any attribute is "
"accessed, while the old :meth:`__getattr__` is only called if ``foo`` isn't "
"found in the instance's dictionary."
msgstr ""

# b6ea1005c6fd4c6a99aa75d5cafd5e3b
#: whatsnew/2.2.rst:328
msgid ""
"However, Python 2.2's support for :dfn:`properties` will often be a simpler "
"way to trap attribute references.  Writing a :meth:`__getattr__` method is "
"complicated because to avoid recursion you can't use regular attribute "
"accesses inside them, and instead have to mess around with the contents of :"
"attr:`__dict__`. :meth:`__getattr__` methods also end up being called by "
"Python when it checks for other methods such as :meth:`__repr__` or :meth:"
"`__coerce__`, and so have to be written with this in mind. Finally, calling "
"a function on every attribute access results in a sizable performance loss."
msgstr ""

# abbe674db0344155b8d4acbfe90ba045
#: whatsnew/2.2.rst:337
msgid ""
":class:`property` is a new built-in type that packages up three functions "
"that get, set, or delete an attribute, and a docstring.  For example, if you "
"want to define a :attr:`size` attribute that's computed, but also settable, "
"you could write::"
msgstr ""

# cbf354bb9a5c40dd9301c1e6a49509af
#: whatsnew/2.2.rst:357
msgid ""
"That is certainly clearer and easier to write than a pair of :meth:"
"`__getattr__`/:meth:`__setattr__` methods that check for the :attr:`size` "
"attribute and handle it specially while retrieving all other attributes from "
"the instance's :attr:`__dict__`.  Accesses to :attr:`size` are also the only "
"ones which have to perform the work of calling a function, so references to "
"other attributes run at their usual speed."
msgstr ""

# a61dca556035463586199775b9e074a7
#: whatsnew/2.2.rst:364
msgid ""
"Finally, it's possible to constrain the list of attributes that can be "
"referenced on an object using the new :attr:`__slots__` class attribute. "
"Python objects are usually very dynamic; at any time it's possible to define "
"a new attribute on an instance by just doing ``obj.new_attr=1``.   A new-"
"style class can define a class attribute named :attr:`__slots__` to limit "
"the legal attributes  to a particular set of names.  An example will make "
"this clear::"
msgstr ""

# 87a08821ab9545e0892d5eb9a2acd685
#: whatsnew/2.2.rst:385
msgid ""
"Note how you get an :exc:`AttributeError` on the attempt to assign to an "
"attribute not listed in :attr:`__slots__`."
msgstr ""

# 2f20aa47ca234b1d899720628e4fde28
#: whatsnew/2.2.rst:392
msgid "Related Links"
msgstr ""

# de6b053fc0c4443984f026d4c62eb619
#: whatsnew/2.2.rst:394
msgid ""
"This section has just been a quick overview of the new features, giving "
"enough of an explanation to start you programming, but many details have "
"been simplified or ignored.  Where should you go to get a more complete "
"picture?"
msgstr ""

# efa85c56c01d442e99bc90800ad653b4
#: whatsnew/2.2.rst:398
msgid ""
"http://www.python.org/2.2/descrintro.html is a lengthy tutorial introduction "
"to the descriptor features, written by Guido van Rossum. If my description "
"has whetted your appetite, go read this tutorial next, because it goes into "
"much more detail about the new features while still remaining quite easy to "
"read."
msgstr ""

# 14e41714fa564c04bde1a990759431de
#: whatsnew/2.2.rst:403
msgid ""
"Next, there are two relevant PEPs, :pep:`252` and :pep:`253`.  :pep:`252` is "
"titled \"Making Types Look More Like Classes\", and covers the descriptor "
"API. :pep:`253` is titled \"Subtyping Built-in Types\", and describes the "
"changes to type objects that make it possible to subtype built-in objects.  :"
"pep:`253` is the more complicated PEP of the two, and at a few points the "
"necessary explanations of types and meta-types may cause your head to "
"explode.  Both PEPs were written and implemented by Guido van Rossum, with "
"substantial assistance from the rest of the Zope Corp. team."
msgstr ""

# 0757a46cec5d47d68d54197109c0b630
#: whatsnew/2.2.rst:412
msgid ""
"Finally, there's the ultimate authority: the source code.  Most of the "
"machinery for the type handling is in :file:`Objects/typeobject.c`, but you "
"should only resort to it after all other avenues have been exhausted, "
"including posting a question to python-list or python-dev."
msgstr ""

# 5fde2be7588f4cb2bc2ccae24b6ffc21
#: whatsnew/2.2.rst:421
msgid "PEP 234: Iterators"
msgstr ""

# 911f76a1b31e4a538f801e23ad41ed25
#: whatsnew/2.2.rst:423
msgid ""
"Another significant addition to 2.2 is an iteration interface at both the C "
"and Python levels.  Objects can define how they can be looped over by "
"callers."
msgstr ""

# 3758762817f9402b80bb2c350d9d951d
#: whatsnew/2.2.rst:426
msgid ""
"In Python versions up to 2.1, the usual way to make ``for item in obj`` work "
"is to define a :meth:`__getitem__` method that looks something like this::"
msgstr ""

# eed9c970770e464ca1c480245236aad1
#: whatsnew/2.2.rst:432
msgid ""
":meth:`__getitem__` is more properly used to define an indexing operation on "
"an object so that you can write ``obj[5]`` to retrieve the sixth element.  "
"It's a bit misleading when you're using this only to support :keyword:`for` "
"loops. Consider some file-like object that wants to be looped over; the "
"*index* parameter is essentially meaningless, as the class probably assumes "
"that a series of :meth:`__getitem__` calls will be made with *index* "
"incrementing by one each time.  In other words, the presence of the :meth:"
"`__getitem__` method doesn't mean that using ``file[5]``  to randomly access "
"the sixth element will work, though it really should."
msgstr ""

# 38300e4cff43406dbe684092f91edfd3
#: whatsnew/2.2.rst:442
msgid ""
"In Python 2.2, iteration can be implemented separately, and :meth:"
"`__getitem__` methods can be limited to classes that really do support "
"random access.  The basic idea of iterators is  simple.  A new built-in "
"function, :func:`iter(obj)` or ``iter(C, sentinel)``, is used to get an "
"iterator. :func:`iter(obj)` returns an iterator for the object *obj*, while "
"``iter(C, sentinel)`` returns an iterator that will invoke the callable "
"object *C* until it returns *sentinel* to signal that the iterator is done."
msgstr ""

# a537fcb7bac04e7ba406e0b3a56f91c9
#: whatsnew/2.2.rst:450
msgid ""
"Python classes can define an :meth:`__iter__` method, which should create "
"and return a new iterator for the object; if the object is its own iterator, "
"this method can just return ``self``.  In particular, iterators will usually "
"be their own iterators.  Extension types implemented in C can implement a :"
"attr:`tp_iter` function in order to return an iterator, and extension types "
"that want to behave as iterators can define a :attr:`tp_iternext` function."
msgstr ""

# e752b49ef2c54584818d3d8d3ef13390
#: whatsnew/2.2.rst:457
msgid ""
"So, after all this, what do iterators actually do?  They have one required "
"method, :meth:`next`, which takes no arguments and returns the next value.  "
"When there are no more values to be returned, calling :meth:`next` should "
"raise the :exc:`StopIteration` exception. ::"
msgstr ""

# d11500c17a8c463d8dad2d69f73a7ac7
#: whatsnew/2.2.rst:478
msgid ""
"In 2.2, Python's :keyword:`for` statement no longer expects a sequence; it "
"expects something for which :func:`iter` will return an iterator. For "
"backward compatibility and convenience, an iterator is automatically "
"constructed for sequences that don't implement :meth:`__iter__` or a :attr:"
"`tp_iter` slot, so ``for i in [1,2,3]`` will still work.  Wherever the "
"Python interpreter loops over a sequence, it's been changed to use the "
"iterator protocol.  This means you can do things like this::"
msgstr ""

# 5757ba27b22548de9383e2d10dc1be2b
#: whatsnew/2.2.rst:492
msgid ""
"Iterator support has been added to some of Python's basic types.   Calling :"
"func:`iter` on a dictionary will return an iterator which loops over its "
"keys::"
msgstr ""

# b70170954ea64aab9726f6a4d8721c7d
#: whatsnew/2.2.rst:512
msgid ""
"That's just the default behaviour.  If you want to iterate over keys, "
"values, or key/value pairs, you can explicitly call the :meth:`iterkeys`, :"
"meth:`itervalues`, or :meth:`iteritems` methods to get an appropriate "
"iterator. In a minor related change, the :keyword:`in` operator now works on "
"dictionaries, so ``key in dict`` is now equivalent to ``dict.has_key(key)``."
msgstr ""

# 88c7315557db4060b5e8fc6c0e5682e8
#: whatsnew/2.2.rst:518
msgid ""
"Files also provide an iterator, which calls the :meth:`readline` method "
"until there are no more lines in the file.  This means you can now read each "
"line of a file using code like this::"
msgstr ""

# 54570022c04a4faeb8ed8571224af038
#: whatsnew/2.2.rst:526
msgid ""
"Note that you can only go forward in an iterator; there's no way to get the "
"previous element, reset the iterator, or make a copy of it. An iterator "
"object could provide such additional capabilities, but the iterator protocol "
"only requires a :meth:`next` method."
msgstr ""

#: whatsnew/2.2.rst:535
msgid "PEP 234 - Iterators"
msgstr ""

# 11d4a25732a447b2b815502f56257009
#: whatsnew/2.2.rst:535
msgid ""
"Written by Ka-Ping Yee and GvR; implemented  by the Python Labs crew, mostly "
"by GvR and Tim Peters."
msgstr ""

# 94a16f8cb71948ed96189b7a6bf8b29b
# b773722f4a1d4fe9becd9c5e0c03c8c7
#: whatsnew/2.2.rst:542 whatsnew/2.3.rst:126
msgid "PEP 255: Simple Generators"
msgstr ""

# 6262437e87844fd9b5dfbd8b8a2a93bf
#: whatsnew/2.2.rst:544
msgid ""
"Generators are another new feature, one that interacts with the introduction "
"of iterators."
msgstr ""

# b5eae44cee1a468ca2e63e4faca84ec1
#: whatsnew/2.2.rst:547
msgid ""
"You're doubtless familiar with how function calls work in Python or C.  When "
"you call a function, it gets a private namespace where its local variables "
"are created.  When the function reaches a :keyword:`return` statement, the "
"local variables are destroyed and the resulting value is returned to the "
"caller.  A later call to the same function will get a fresh new set of local "
"variables. But, what if the local variables weren't thrown away on exiting a "
"function? What if you could later resume the function where it left off?  "
"This is what generators provide; they can be thought of as resumable "
"functions."
msgstr ""

# 683c109f66ab44a59c35cea363f97aff
# c679b047943a40b4a5cce1b6f356d44b
#: whatsnew/2.2.rst:556 whatsnew/2.3.rst:145
msgid "Here's the simplest example of a generator function::"
msgstr ""

# 9700c678dd064243a4ddfac38fa7c47c
#: whatsnew/2.2.rst:562
msgid ""
"A new keyword, :keyword:`yield`, was introduced for generators.  Any "
"function containing a :keyword:`yield` statement is a generator function; "
"this is detected by Python's bytecode compiler which compiles the function "
"specially as a result.  Because a new keyword was introduced, generators "
"must be explicitly enabled in a module by including a ``from __future__ "
"import generators`` statement near the top of the module's source code.  In "
"Python 2.3 this statement will become unnecessary."
msgstr ""

# f722dcd93cbd449d8a0cda80ebcb8263
#: whatsnew/2.2.rst:570
msgid ""
"When you call a generator function, it doesn't return a single value; "
"instead it returns a generator object that supports the iterator protocol.  "
"On executing the :keyword:`yield` statement, the generator outputs the value "
"of ``i``, similar to a :keyword:`return` statement.  The big difference "
"between :keyword:`yield` and a :keyword:`return` statement is that on "
"reaching a :keyword:`yield` the generator's state of execution is suspended "
"and local variables are preserved.  On the next call to the generator's "
"``next()`` method, the function will resume executing immediately after the :"
"keyword:`yield` statement.  (For complicated reasons, the :keyword:`yield` "
"statement isn't allowed inside the :keyword:`try` block of a :keyword:"
"`try`...\\ :keyword:`finally` statement; read :pep:`255` for a full "
"explanation of the interaction between :keyword:`yield` and exceptions.)"
msgstr ""

# e002e51100f446afa8c2a8230ff8a1f5
# 52c6aa90e9764eeeb17682abc976816c
#: whatsnew/2.2.rst:583 whatsnew/2.3.rst:169
msgid "Here's a sample usage of the :func:`generate_ints` generator::"
msgstr ""

# 221406603e45464f8cbac8626d3b9987
# 129762b6e0ac4e28ae67dad6c7facbc4
#: whatsnew/2.2.rst:600 whatsnew/2.3.rst:186
msgid ""
"You could equally write ``for i in generate_ints(5)``, or ``a,b,c = "
"generate_ints(3)``."
msgstr ""

# ee76982cb5ce465e9a11923f22743aaa
# 3015ad6cdf1f43c39ce13aa486a1b937
#: whatsnew/2.2.rst:603 whatsnew/2.3.rst:189
msgid ""
"Inside a generator function, the :keyword:`return` statement can only be "
"used without a value, and signals the end of the procession of values; "
"afterwards the generator cannot return any further values. :keyword:`return` "
"with a value, such as ``return 5``, is a syntax error inside a generator "
"function.  The end of the generator's results can also be indicated by "
"raising :exc:`StopIteration` manually, or by just letting the flow of "
"execution fall off the bottom of the function."
msgstr ""

# 9c5fa93e08af47ffbb1f7135054c9d4d
# f807cdcbcca249abafc485ea699b48a9
#: whatsnew/2.2.rst:611 whatsnew/2.3.rst:197
msgid ""
"You could achieve the effect of generators manually by writing your own "
"class and storing all the local variables of the generator as instance "
"variables.  For example, returning a list of integers could be done by "
"setting ``self.count`` to 0, and having the :meth:`next` method increment "
"``self.count`` and return it. However, for a moderately complicated "
"generator, writing a corresponding class would be much messier. :file:`Lib/"
"test/test_generators.py` contains a number of more interesting examples.  "
"The simplest one implements an in-order traversal of a tree using generators "
"recursively. ::"
msgstr ""

# dcb82d92b34444bca4dcad485776ed3c
# 90b666d6038442ba82afb617d3304327
#: whatsnew/2.2.rst:629 whatsnew/2.3.rst:215
msgid ""
"Two other examples in :file:`Lib/test/test_generators.py` produce solutions "
"for the N-Queens problem (placing $N$ queens on an $NxN$ chess board so that "
"no queen threatens another) and the Knight's Tour (a route that takes a "
"knight to every square of an $NxN$ chessboard without visiting any square "
"twice)."
msgstr ""

# fb3842d3dcca4ebb9c5971e09938b4b0
# c0ca448beac641ecb1ba333461f3fb14
#: whatsnew/2.2.rst:634 whatsnew/2.3.rst:220
msgid ""
"The idea of generators comes from other programming languages, especially "
"Icon (http://www.cs.arizona.edu/icon/), where the idea of generators is "
"central.  In Icon, every expression and function call behaves like a "
"generator.  One example from \"An Overview of the Icon Programming Language"
"\" at http://www.cs.arizona.edu/icon/docs/ipd266.htm gives an idea of what "
"this looks like::"
msgstr ""

# 5ff41f683cbc4f79b2a40710388aa7b3
# 8a124a038bed47dbace53f08274ca99a
#: whatsnew/2.2.rst:644 whatsnew/2.3.rst:230
msgid ""
"In Icon the :func:`find` function returns the indexes at which the substring "
"\"or\" is found: 3, 23, 33.  In the :keyword:`if` statement, ``i`` is first "
"assigned a value of 3, but 3 is less than 5, so the comparison fails, and "
"Icon retries it with the second value of 23.  23 is greater than 5, so the "
"comparison now succeeds, and the code prints the value 23 to the screen."
msgstr ""

# 4d1b2f1baaaa4ec5a678801c3007e4e9
#: whatsnew/2.2.rst:650
msgid ""
"Python doesn't go nearly as far as Icon in adopting generators as a central "
"concept.  Generators are considered a new part of the core Python language, "
"but learning or using them isn't compulsory; if they don't solve any "
"problems that you have, feel free to ignore them. One novel feature of "
"Python's interface as compared to Icon's is that a generator's state is "
"represented as a concrete object (the iterator) that can be passed around to "
"other functions or stored in a data structure."
msgstr ""

#: whatsnew/2.2.rst:662 whatsnew/2.3.rst:248
msgid "PEP 255 - Simple Generators"
msgstr ""

# 8f831f140ae84e8599fcab74f3a47ab5
# 512fb6a9b35b4f3a9a4d9f03797b50d6
#: whatsnew/2.2.rst:662 whatsnew/2.3.rst:248
msgid ""
"Written by Neil Schemenauer, Tim Peters, Magnus Lie Hetland.  Implemented "
"mostly by Neil Schemenauer and Tim Peters, with other fixes from the Python "
"Labs crew."
msgstr ""

# 3eb8324d5e33432ba1b20538e700adda
# 6309099bf77746849a5194f8d0042ca1
#: whatsnew/2.2.rst:669 whatsnew/2.4.rst:90
msgid "PEP 237: Unifying Long Integers and Integers"
msgstr ""

# 61ac81b6f186481fb2ac2f4811c9d903
#: whatsnew/2.2.rst:671
msgid ""
"In recent versions, the distinction between regular integers, which are 32-"
"bit values on most machines, and long integers, which can be of arbitrary "
"size, was becoming an annoyance.  For example, on platforms that support "
"files larger than ``2**32`` bytes, the :meth:`tell` method of file objects "
"has to return a long integer. However, there were various bits of Python "
"that expected plain integers and would raise an error if a long integer was "
"provided instead.  For example, in Python 1.5, only regular integers could "
"be used as a slice index, and ``'abc'[1L:]`` would raise a :exc:`TypeError` "
"exception with the message 'slice index must be int'."
msgstr ""

# 3d49d6ded78e4c6a957e5ff05a8f4673
#: whatsnew/2.2.rst:681
msgid ""
"Python 2.2 will shift values from short to long integers as required. The "
"'L' suffix is no longer needed to indicate a long integer literal, as now "
"the compiler will choose the appropriate type.  (Using the 'L' suffix will "
"be discouraged in future 2.x versions of Python, triggering a warning in "
"Python 2.4, and probably dropped in Python 3.0.)  Many operations that used "
"to raise an :exc:`OverflowError` will now return a long integer as their "
"result.  For example::"
msgstr ""

# 84c89c4a85334afb8ead8bde3313d474
#: whatsnew/2.2.rst:694
msgid ""
"In most cases, integers and long integers will now be treated identically.  "
"You can still distinguish them with the :func:`type` built-in function, but "
"that's rarely needed."
msgstr ""

#: whatsnew/2.2.rst:702 whatsnew/2.4.rst:108
msgid "PEP 237 - Unifying Long Integers and Integers"
msgstr ""

# 94be68ddb5a747b9bbc8a02d11c95d70
#: whatsnew/2.2.rst:702
msgid ""
"Written by Moshe Zadka and Guido van Rossum.  Implemented mostly by Guido "
"van Rossum."
msgstr ""

# 808465f394eb4e9882cf84affb2f6d12
#: whatsnew/2.2.rst:709
msgid "PEP 238: Changing the Division Operator"
msgstr ""

# 0d5005fd38d94a1387d827f285f014cd
#: whatsnew/2.2.rst:711
msgid ""
"The most controversial change in Python 2.2 heralds the start of an effort "
"to fix an old design flaw that's been in Python from the beginning. "
"Currently Python's division operator, ``/``, behaves like C's division "
"operator when presented with two integer arguments: it returns an integer "
"result that's truncated down when there would be a fractional part.  For "
"example, ``3/2`` is 1, not 1.5, and ``(-1)/2`` is -1, not -0.5.  This means "
"that the results of division can vary unexpectedly depending on the type of "
"the two operands and because Python is dynamically typed, it can be "
"difficult to determine the possible types of the operands."
msgstr ""

# ff2a9af2778844cfb1e6eac5a942d2e1
#: whatsnew/2.2.rst:721
msgid ""
"(The controversy is over whether this is *really* a design flaw, and whether "
"it's worth breaking existing code to fix this.  It's caused endless "
"discussions on python-dev, and in July 2001 erupted into an storm of acidly "
"sarcastic postings on :newsgroup:`comp.lang.python`. I won't argue for "
"either side here and will stick to describing what's  implemented in 2.2.  "
"Read :pep:`238` for a summary of arguments and counter-arguments.)"
msgstr ""

# 9494c67f312944b485f5eb00590d5697
#: whatsnew/2.2.rst:728
msgid ""
"Because this change might break code, it's being introduced very gradually. "
"Python 2.2 begins the transition, but the switch won't be complete until "
"Python 3.0."
msgstr ""

# 67711fe357b8495faa7e6420a29a8c64
#: whatsnew/2.2.rst:732
msgid ""
"First, I'll borrow some terminology from :pep:`238`.  \"True division\" is "
"the division that most non-programmers are familiar with: 3/2 is 1.5, 1/4 is "
"0.25, and so forth.  \"Floor division\" is what Python's ``/`` operator "
"currently does when given integer operands; the result is the floor of the "
"value returned by true division.  \"Classic division\" is the current mixed "
"behaviour of ``/``; it returns the result of floor division when the "
"operands are integers, and returns the result of true division when one of "
"the operands is a floating-point number."
msgstr ""

# 0a2b21113506425fa089db5eb301ac7f
#: whatsnew/2.2.rst:740
msgid "Here are the changes 2.2 introduces:"
msgstr ""

# f5c7706a872f4225ae948c060de7805f
#: whatsnew/2.2.rst:742
msgid ""
"A new operator, ``//``, is the floor division operator. (Yes, we know it "
"looks like C++'s comment symbol.)  ``//`` *always* performs floor division "
"no matter what the types of its operands are, so ``1 // 2`` is 0 and "
"``1.0 // 2.0`` is also 0.0."
msgstr ""

# d3f138d3cb8d4421b245e4098101f0a6
#: whatsnew/2.2.rst:747
msgid ""
"``//`` is always available in Python 2.2; you don't need to enable it using "
"a ``__future__`` statement."
msgstr ""

# ee23a667f3d343c38cedd7e91d7412f5
#: whatsnew/2.2.rst:750
msgid ""
"By including a ``from __future__ import division`` in a module, the ``/`` "
"operator will be changed to return the result of true division, so ``1/2`` "
"is 0.5.  Without the ``__future__`` statement, ``/`` still means classic "
"division. The default meaning of ``/`` will not change until Python 3.0."
msgstr ""

# a4335756739742ac90ab20a2c1da03e6
#: whatsnew/2.2.rst:755
msgid ""
"Classes can define methods called :meth:`__truediv__` and :meth:"
"`__floordiv__` to overload the two division operators.  At the C level, "
"there are also slots in the :c:type:`PyNumberMethods` structure so extension "
"types can define the two operators."
msgstr ""

# acefd3de10214044ac5d79b62a5044b5
#: whatsnew/2.2.rst:760
msgid ""
"Python 2.2 supports some command-line arguments for testing whether code "
"will works with the changed division semantics.  Running python with :option:"
"`-Q warn` will cause a warning to be issued whenever division is applied to "
"two integers.  You can use this to find code that's affected by the change "
"and fix it.  By default, Python 2.2 will simply perform classic division "
"without a warning; the warning will be turned on by default in Python 2.3."
msgstr ""

#: whatsnew/2.2.rst:770
msgid "PEP 238 - Changing the Division Operator"
msgstr ""

# 095d9eea72974b2e9da113cdd60b3627
#: whatsnew/2.2.rst:771
msgid ""
"Written by Moshe Zadka and  Guido van Rossum.  Implemented by Guido van "
"Rossum.."
msgstr ""

# 15011ff25c82401d8cfaf29ed9e34f40
#: whatsnew/2.2.rst:777
msgid "Unicode Changes"
msgstr ""

# 197e0cd05137405ea11c615502fbb0ac
#: whatsnew/2.2.rst:779
msgid ""
"Python's Unicode support has been enhanced a bit in 2.2.  Unicode strings "
"are usually stored as UCS-2, as 16-bit unsigned integers. Python 2.2 can "
"also be compiled to use UCS-4, 32-bit unsigned integers, as its internal "
"encoding by supplying :option:`--enable-unicode=ucs4` to the configure "
"script.   (It's also possible to specify :option:`--disable-unicode` to "
"completely disable Unicode support.)"
msgstr ""

# 52146bcb559344f092ff6f8d96a9d41c
#: whatsnew/2.2.rst:786
msgid ""
"When built to use UCS-4 (a \"wide Python\"), the interpreter can natively "
"handle Unicode characters from U+000000 to U+110000, so the range of legal "
"values for the :func:`unichr` function is expanded accordingly.  Using an "
"interpreter compiled to use UCS-2 (a \"narrow Python\"), values greater than "
"65535 will still cause :func:`unichr` to raise a :exc:`ValueError` "
"exception. This is all described in :pep:`261`, \"Support for 'wide' Unicode "
"characters\"; consult it for further details."
msgstr ""

# daecf69ef71b4882adbb73521ddfeb53
#: whatsnew/2.2.rst:794
msgid ""
"Another change is simpler to explain. Since their introduction, Unicode "
"strings have supported an :meth:`encode` method to convert the string to a "
"selected encoding such as UTF-8 or Latin-1.  A symmetric :meth:"
"`decode([*encoding*])` method has been added to 8-bit strings (though not to "
"Unicode strings) in 2.2. :meth:`decode` assumes that the string is in the "
"specified encoding and decodes it, returning whatever is returned by the "
"codec."
msgstr ""

# 2ef2704b5fb84d90b8508f7c64db62eb
#: whatsnew/2.2.rst:801
msgid ""
"Using this new feature, codecs have been added for tasks not directly "
"related to Unicode.  For example, codecs have been added for uu-encoding, "
"MIME's base64 encoding, and compression with the :mod:`zlib` module::"
msgstr ""

# 9ff0db71d1624db68709a086adb94d2e
#: whatsnew/2.2.rst:822
msgid ""
"To convert a class instance to Unicode, a :meth:`__unicode__` method can be "
"defined by a class, analogous to :meth:`__str__`."
msgstr ""

# 8ae239bef5f344b0a83921e790a83444
#: whatsnew/2.2.rst:825
msgid ""
":meth:`encode`, :meth:`decode`, and :meth:`__unicode__` were implemented by "
"Marc-André Lemburg.  The changes to support using UCS-4 internally were "
"implemented by Fredrik Lundh and Martin von Löwis."
msgstr ""

#: whatsnew/2.2.rst:832
msgid "PEP 261 - Support for 'wide' Unicode characters"
msgstr ""

# 2c90473d6df04dbdaf490b2021193d5b
#: whatsnew/2.2.rst:833
msgid "Written by Paul Prescod."
msgstr ""

# e50598fe6aad463bb707fbc1fd1bf73d
#: whatsnew/2.2.rst:841
msgid ""
"In Python 2.1, statically nested scopes were added as an optional feature, "
"to be enabled by a ``from __future__ import nested_scopes`` directive.  In "
"2.2 nested scopes no longer need to be specially enabled, and are now always "
"present.  The rest of this section is a copy of the description of nested "
"scopes from my \"What's New in Python 2.1\" document; if you read it when "
"2.1 came out, you can skip the rest of this section."
msgstr ""

# 004b8186a8c54a69b07f6cd2088f6ef0
#: whatsnew/2.2.rst:848
msgid ""
"The largest change introduced in Python 2.1, and made complete in 2.2, is to "
"Python's scoping rules.  In Python 2.0, at any given time there are at most "
"three namespaces used to look up variable names: local, module-level, and "
"the built-in namespace.  This often surprised people because it didn't match "
"their intuitive expectations.  For example, a nested recursive function "
"definition doesn't work::"
msgstr ""

# bc2ec4ed393641ff99ef40d4deb99b65
#: whatsnew/2.2.rst:879
msgid ""
"The most significant change to Python 2.2 is that static scoping has been "
"added to the language to fix this problem.  As a first effect, the "
"``name=name`` default argument is now unnecessary in the above example.  Put "
"simply, when a given variable name is not assigned a value within a function "
"(by an assignment, or the :keyword:`def`, :keyword:`class`, or :keyword:"
"`import` statements), references to the variable will be looked up in the "
"local namespace of the enclosing scope.  A more detailed explanation of the "
"rules, and a dissection of the implementation, can be found in the PEP."
msgstr ""

# e5dd5f2a6ebb4ef986f57fab1cdef0d9
#: whatsnew/2.2.rst:936
msgid ""
"The :mod:`xmlrpclib` module was contributed to the standard library by "
"Fredrik Lundh, providing support for writing XML-RPC clients.  XML-RPC is a "
"simple remote procedure call protocol built on top of HTTP and XML. For "
"example, the following snippet retrieves a list of RSS channels from the "
"O'Reilly Network, and then  lists the recent headlines for one channel::"
msgstr ""

# 78a1324342c74e6caf6cd847020f684d
#: whatsnew/2.2.rst:959
msgid ""
"The :mod:`SimpleXMLRPCServer` module makes it easy to create straightforward "
"XML-RPC servers.  See http://www.xmlrpc.com/ for more information about XML-"
"RPC."
msgstr ""

# e365c01ee4ff4d6abe3f42e173ab61b6
#: whatsnew/2.2.rst:962
msgid ""
"The new :mod:`hmac` module implements the HMAC algorithm described by :rfc:"
"`2104`. (Contributed by Gerhard Häring.)"
msgstr ""

# cab2f067ce4d490f963b21316e6e1170
#: whatsnew/2.2.rst:965
msgid ""
"Several functions that originally returned lengthy tuples now return pseudo- "
"sequences that still behave like tuples but also have mnemonic attributes "
"such as memberst_mtime or :attr:`tm_year`. The enhanced functions include :"
"func:`stat`, :func:`fstat`, :func:`statvfs`, and :func:`fstatvfs` in the :"
"mod:`os` module, and :func:`localtime`, :func:`gmtime`, and :func:`strptime` "
"in the :mod:`time` module."
msgstr ""

# dc84cdd0c1894f288edc2bbd13995036
#: whatsnew/2.2.rst:972
msgid ""
"For example, to obtain a file's size using the old tuples, you'd end up "
"writing something like ``file_size = os.stat(filename)[stat.ST_SIZE]``, but "
"now this can be written more clearly as ``file_size = os.stat(filename)."
"st_size``."
msgstr ""

# d0fe9a411f854e7b86a639308a9d2129
#: whatsnew/2.2.rst:976
msgid "The original patch for this feature was contributed by Nick Mathewson."
msgstr ""

# ac9fda2b4ceb480f8b4f365105d43d77
#: whatsnew/2.2.rst:978
msgid ""
"The Python profiler has been extensively reworked and various errors in its "
"output have been corrected.  (Contributed by Fred L. Drake, Jr. and Tim "
"Peters.)"
msgstr ""

# d44909132500462185484b3b9ec9fbd0
#: whatsnew/2.2.rst:981
msgid ""
"The :mod:`socket` module can be compiled to support IPv6; specify the :"
"option:`--enable-ipv6` option to Python's configure script.  (Contributed by "
"Jun-ichiro \"itojun\" Hagino.)"
msgstr ""

# a14c179ba12a430dbf63b3d309ba8a37
#: whatsnew/2.2.rst:985
msgid ""
"Two new format characters were added to the :mod:`struct` module for 64-bit "
"integers on platforms that support the C :c:type:`long long` type.  ``q`` is "
"for a signed 64-bit integer, and ``Q`` is for an unsigned one.  The value is "
"returned in Python's long integer type.  (Contributed by Tim Peters.)"
msgstr ""

# e3440bfca5f448b4ab7bb6e5ba09f331
#: whatsnew/2.2.rst:990
msgid ""
"In the interpreter's interactive mode, there's a new built-in function :func:"
"`help` that uses the :mod:`pydoc` module introduced in Python 2.1 to provide "
"interactive help. ``help(object)`` displays any available help text about "
"*object*.  :func:`help` with no argument puts you in an online help utility, "
"where you can enter the names of functions, classes, or modules to read "
"their help text. (Contributed by Guido van Rossum, using Ka-Ping Yee's :mod:"
"`pydoc` module.)"
msgstr ""

# 00a53b79968741dbb64fe102f87da685
#: whatsnew/2.2.rst:998
msgid ""
"Various bugfixes and performance improvements have been made to the SRE "
"engine underlying the :mod:`re` module.  For example, the :func:`re.sub` "
"and :func:`re.split` functions have been rewritten in C.  Another "
"contributed patch speeds up certain Unicode character ranges by a factor of "
"two, and a new :meth:`finditer`  method that returns an iterator over all "
"the non-overlapping matches in  a given string.  (SRE is maintained by "
"Fredrik Lundh.  The BIGCHARSET patch was contributed by Martin von Löwis.)"
msgstr ""

# 7ac02ca608344800b0bf80faf39b8411
#: whatsnew/2.2.rst:1006
msgid ""
"The :mod:`smtplib` module now supports :rfc:`2487`, \"Secure SMTP over TLS"
"\", so it's now possible to encrypt the SMTP traffic between a Python "
"program and the mail transport agent being handed a message.  :mod:`smtplib` "
"also supports SMTP authentication.  (Contributed by Gerhard Häring.)"
msgstr ""

# 1270091a6020496bb3212536c1a94047
#: whatsnew/2.2.rst:1011
msgid ""
"The :mod:`imaplib` module, maintained by Piers Lauder, has support for "
"several new extensions: the NAMESPACE extension defined in :rfc:`2342`, "
"SORT, GETACL and SETACL.  (Contributed by Anthony Baxter and Michel "
"Pelletier.)"
msgstr ""

# 9fc0adb515f7491a8a63fe18b0217bd2
#: whatsnew/2.2.rst:1015
msgid ""
"The :mod:`rfc822` module's parsing of email addresses is now compliant with :"
"rfc:`2822`, an update to :rfc:`822`.  (The module's name is *not* going to "
"be changed to ``rfc2822``.)  A new package, :mod:`email`, has also been "
"added for parsing and generating e-mail messages.  (Contributed by Barry "
"Warsaw, and arising out of his work on Mailman.)"
msgstr ""

# d8582a27e57f46f5baac81797b552f8c
#: whatsnew/2.2.rst:1021
msgid ""
"The :mod:`difflib` module now contains a new :class:`Differ` class for "
"producing human-readable lists of changes (a \"delta\") between two "
"sequences of lines of text.  There are also two generator functions, :func:"
"`ndiff` and :func:`restore`, which respectively return a delta from two "
"sequences, or one of the original sequences from a delta. (Grunt work "
"contributed by David Goodger, from ndiff.py code by Tim Peters who then did "
"the generatorization.)"
msgstr ""

# e6c11e5db6e24cc497feca77cc314ae2
#: whatsnew/2.2.rst:1028
msgid ""
"New constants :const:`ascii_letters`, :const:`ascii_lowercase`, and :const:"
"`ascii_uppercase` were added to the :mod:`string` module.  There were "
"several modules in the standard library that used :const:`string.letters` to "
"mean the ranges A-Za-z, but that assumption is incorrect when locales are in "
"use, because :const:`string.letters` varies depending on the set of legal "
"characters defined by the current locale.  The buggy modules have all been "
"fixed to use :const:`ascii_letters` instead. (Reported by an unknown person; "
"fixed by Fred L. Drake, Jr.)"
msgstr ""

# e597a29cab304466888b08e1aaeea892
#: whatsnew/2.2.rst:1037
msgid ""
"The :mod:`mimetypes` module now makes it easier to use alternative MIME-type "
"databases by the addition of a :class:`MimeTypes` class, which takes a list "
"of filenames to be parsed.  (Contributed by Fred L. Drake, Jr.)"
msgstr ""

# 3dda255b8bf14ac7be5c4dc856a4c00a
#: whatsnew/2.2.rst:1041
msgid ""
"A :class:`Timer` class was added to the :mod:`threading` module that allows "
"scheduling an activity to happen at some future time.  (Contributed by "
"Itamar Shtull-Trauring.)"
msgstr ""

# 5cc45746952d48e6b5b06ed02d640d83
#: whatsnew/2.2.rst:1049
msgid "Interpreter Changes and Fixes"
msgstr ""

# f682f7f6d8e8460db0586c13be9222d8
#: whatsnew/2.2.rst:1051
msgid ""
"Some of the changes only affect people who deal with the Python interpreter "
"at the C level because they're writing Python extension modules, embedding "
"the interpreter, or just hacking on the interpreter itself. If you only "
"write Python code, none of the changes described here will affect you very "
"much."
msgstr ""

# 1663372c92654020ab016de88ee1e705
#: whatsnew/2.2.rst:1056
msgid ""
"Profiling and tracing functions can now be implemented in C, which can "
"operate at much higher speeds than Python-based functions and should reduce "
"the overhead of profiling and tracing.  This  will be of interest to authors "
"of development environments for Python.  Two new C functions were added to "
"Python's API, :c:func:`PyEval_SetProfile` and :c:func:`PyEval_SetTrace`. The "
"existing :func:`sys.setprofile` and :func:`sys.settrace` functions still "
"exist, and have simply been changed to use the new C-level interface.  "
"(Contributed by Fred L. Drake, Jr.)"
msgstr ""

# cf72d25a825d484cbe066833cd3bdfce
#: whatsnew/2.2.rst:1065
msgid ""
"Another low-level API, primarily of interest to implementors of Python "
"debuggers and development tools, was added. :c:func:"
"`PyInterpreterState_Head` and :c:func:`PyInterpreterState_Next` let a caller "
"walk through all the existing interpreter objects; :c:func:"
"`PyInterpreterState_ThreadHead` and :c:func:`PyThreadState_Next` allow "
"looping over all the thread states for a given interpreter.  (Contributed by "
"David Beazley.)"
msgstr ""

# 00532a74695146f9b0932c4b05c92b95
#: whatsnew/2.2.rst:1072
msgid ""
"The C-level interface to the garbage collector has been changed to make it "
"easier to write extension types that support garbage collection and to debug "
"misuses of the functions. Various functions have slightly different "
"semantics, so a bunch of functions had to be renamed.  Extensions that use "
"the old API will still compile but will *not* participate in garbage "
"collection, so updating them for 2.2 should be considered fairly high "
"priority."
msgstr ""

# 851a4ea27d594d73a12f8db973d3d7a8
#: whatsnew/2.2.rst:1079
msgid ""
"To upgrade an extension module to the new API, perform the following steps:"
msgstr ""

# f3dbd1e2d8f2434faf25df9f921684c5
#: whatsnew/2.2.rst:1081
msgid "Rename :c:func:`Py_TPFLAGS_GC` to :c:func:`PyTPFLAGS_HAVE_GC`."
msgstr ""

#: whatsnew/2.2.rst:1084
msgid "Use PyObject_GC_New() or PyObject_GC_NewVar() to allocate"
msgstr ""

# 61efc19cbad8432ea6742047351b4559
#: whatsnew/2.2.rst:1084
msgid "objects, and :c:func:`PyObject_GC_Del` to deallocate them."
msgstr ""

#: whatsnew/2.2.rst:1087
msgid "Rename PyObject_GC_Init() to PyObject_GC_Track() and"
msgstr ""

# 61bb567c7fb14437ae68e13b9911583d
#: whatsnew/2.2.rst:1087
msgid ":c:func:`PyObject_GC_Fini` to :c:func:`PyObject_GC_UnTrack`."
msgstr ""

# b489b1413e1f463b931b3dd9baca6bc6
#: whatsnew/2.2.rst:1089
msgid "Remove :c:func:`PyGC_HEAD_SIZE` from object size calculations."
msgstr ""

# e45cb24a760a448ead8b1a57879674fb
#: whatsnew/2.2.rst:1091
msgid ""
"Remove calls to :c:func:`PyObject_AS_GC` and :c:func:`PyObject_FROM_GC`."
msgstr ""

# 55654c3597c04ded8128dde1bc7b38ec
#: whatsnew/2.2.rst:1093
msgid ""
"A new ``et`` format sequence was added to :c:func:`PyArg_ParseTuple`; ``et`` "
"takes both a parameter and an encoding name, and converts the parameter to "
"the given encoding if the parameter turns out to be a Unicode string, or "
"leaves it alone if it's an 8-bit string, assuming it to already be in the "
"desired encoding.  This differs from the ``es`` format character, which "
"assumes that 8-bit strings are in Python's default ASCII encoding and "
"converts them to the specified new encoding. (Contributed by M.-A. Lemburg, "
"and used for the MBCS support on Windows described in the following section.)"
msgstr ""

# ef443ee06c26494ea3f7915a9e8e3659
#: whatsnew/2.2.rst:1102
msgid ""
"A different argument parsing function, :c:func:`PyArg_UnpackTuple`, has been "
"added that's simpler and presumably faster.  Instead of specifying a format "
"string, the caller simply gives the minimum and maximum number of arguments "
"expected, and a set of pointers to :c:type:`PyObject\\*` variables that will "
"be filled in with argument values."
msgstr ""

# 38121ad47e6846788ee45e4995964521
#: whatsnew/2.2.rst:1108
msgid ""
"Two new flags :const:`METH_NOARGS` and :const:`METH_O` are available in "
"method definition tables to simplify implementation of methods with no "
"arguments or a single untyped argument. Calling such methods is more "
"efficient than calling a corresponding method that uses :const:"
"`METH_VARARGS`.  Also, the old :const:`METH_OLDARGS` style of writing C "
"methods is  now officially deprecated."
msgstr ""

# 3102680727764c6b906fc1916ebc7df9
#: whatsnew/2.2.rst:1114
msgid ""
"Two new wrapper functions, :c:func:`PyOS_snprintf` and :c:func:"
"`PyOS_vsnprintf` were added to provide  cross-platform implementations for "
"the relatively new :c:func:`snprintf` and :c:func:`vsnprintf` C lib APIs. In "
"contrast to the standard :c:func:`sprintf` and :c:func:`vsprintf` functions, "
"the Python versions check the bounds of the buffer used to protect against "
"buffer overruns. (Contributed by M.-A. Lemburg.)"
msgstr ""

# 8374277cd5b34c25bd4ad605545ce56a
#: whatsnew/2.2.rst:1121
msgid ""
"The :c:func:`_PyTuple_Resize` function has lost an unused parameter, so now "
"it takes 2 parameters instead of 3.  The third argument was never used, and "
"can simply be discarded when porting code from earlier versions to Python "
"2.2."
msgstr ""

# 2bc414ab4ea5401c903f5bec14f597b3
#: whatsnew/2.2.rst:1131
msgid ""
"As usual there were a bunch of other improvements and bugfixes scattered "
"throughout the source tree.  A search through the CVS change logs finds "
"there were 527 patches applied and 683 bugs fixed between Python 2.1 and "
"2.2; 2.2.1 applied 139 patches and fixed 143 bugs; 2.2.2 applied 106 patches "
"and fixed 82 bugs.  These figures are likely to be underestimates."
msgstr ""

# 754760a3d4604b8cb9d6cb79bf426349
# b86d88be28c8419883fdecedd92e3685
#: whatsnew/2.2.rst:1137 whatsnew/2.3.rst:1967
msgid "Some of the more notable changes are:"
msgstr ""

# 70e1523779164bc3b718960b0c8d51b9
#: whatsnew/2.2.rst:1139
msgid ""
"The code for the MacOS port for Python, maintained by Jack Jansen, is now "
"kept in the main Python CVS tree, and many changes have been made to support "
"MacOS X."
msgstr ""

# 9c9a4696ba4e4f33bff9597c7e3666ba
#: whatsnew/2.2.rst:1142
msgid ""
"The most significant change is the ability to build Python as a framework, "
"enabled by supplying the :option:`--enable-framework` option to the "
"configure script when compiling Python.  According to Jack Jansen, \"This "
"installs a self- contained Python installation plus the OS X framework \"glue"
"\" into :file:`/Library/Frameworks/Python.framework` (or another location of "
"choice). For now there is little immediate added benefit to this (actually, "
"there is the disadvantage that you have to change your PATH to be able to "
"find Python), but it is the basis for creating a full-blown Python "
"application, porting the MacPython IDE, possibly using Python as a standard "
"OSA scripting language and much more.\""
msgstr ""

# 2ad2d6c4f1d64836802290bd06d4bd9b
#: whatsnew/2.2.rst:1153
msgid ""
"Most of the MacPython toolbox modules, which interface to MacOS APIs such as "
"windowing, QuickTime, scripting, etc. have been ported to OS X, but they've "
"been left commented out in :file:`setup.py`.  People who want to experiment "
"with these modules can uncomment them manually."
msgstr ""

# 9c967d3e0c5e4b1393f2e66fd5cd4883
#: whatsnew/2.2.rst:1176
msgid ""
"Keyword arguments passed to built-in functions that don't take them now "
"cause a :exc:`TypeError` exception to be raised, with the message "
"\"*function* takes no keyword arguments\"."
msgstr ""

# 13a2b3dd26e5454c9233314294ba817b
#: whatsnew/2.2.rst:1180
msgid ""
"Weak references, added in Python 2.1 as an extension module, are now part of "
"the core because they're used in the implementation of new-style classes.  "
"The :exc:`ReferenceError` exception has therefore moved from the :mod:"
"`weakref` module to become a built-in exception."
msgstr ""

# a66e132a619c4dc69814848432f2374c
#: whatsnew/2.2.rst:1185
msgid ""
"A new script, :file:`Tools/scripts/cleanfuture.py` by Tim Peters, "
"automatically removes obsolete ``__future__`` statements from Python source "
"code."
msgstr ""

# 1d06406911e84ec6a31e3673d3dc8daf
#: whatsnew/2.2.rst:1189
msgid ""
"An additional *flags* argument has been added to the built-in function :func:"
"`compile`, so the behaviour of ``__future__`` statements can now be "
"correctly observed in simulated shells, such as those presented by IDLE and "
"other development environments.  This is described in :pep:`264`. "
"(Contributed by Michael Hudson.)"
msgstr ""

# e5e5d80caa0f4a6d926b33b02059c88b
#: whatsnew/2.2.rst:1195
msgid ""
"The new license introduced with Python 1.6 wasn't GPL-compatible.  This is "
"fixed by some minor textual changes to the 2.2 license, so it's now legal to "
"embed Python inside a GPLed program again.  Note that Python itself is not "
"GPLed, but instead is under a license that's essentially equivalent to the "
"BSD license, same as it always was.  The license changes were also applied "
"to the Python 2.0.1 and 2.1.1 releases."
msgstr ""

# b3d3e3f1fc344a63a1c783240a30c21e
#: whatsnew/2.2.rst:1202
msgid ""
"When presented with a Unicode filename on Windows, Python will now convert "
"it to an MBCS encoded string, as used by the Microsoft file APIs.  As MBCS "
"is explicitly used by the file APIs, Python's choice of ASCII as the default "
"encoding turns out to be an annoyance.  On Unix, the locale's character set "
"is used if :func:`locale.nl_langinfo(CODESET)` is available.  (Windows "
"support was contributed by Mark Hammond with assistance from Marc-André "
"Lemburg. Unix support was added by Martin von Löwis.)"
msgstr ""

# 2be6249ee56b49d29be7376096ea5f13
#: whatsnew/2.2.rst:1210
msgid ""
"Large file support is now enabled on Windows.  (Contributed by Tim Peters.)"
msgstr ""

# 0d36e65790454c2083966f6c342dc851
#: whatsnew/2.2.rst:1212
msgid ""
"The :file:`Tools/scripts/ftpmirror.py` script now parses a :file:`.netrc` "
"file, if you have one. (Contributed by Mike Romberg.)"
msgstr ""

# 959898666b7d4e28a0c0f516ad853c71
#: whatsnew/2.2.rst:1215
msgid ""
"Some features of the object returned by the :func:`xrange` function are now "
"deprecated, and trigger warnings when they're accessed; they'll disappear in "
"Python 2.3. :class:`xrange` objects tried to pretend they were full sequence "
"types by supporting slicing, sequence multiplication, and the :keyword:`in` "
"operator, but these features were rarely used and therefore buggy.  The :"
"meth:`tolist` method and the :attr:`start`, :attr:`stop`, and :attr:`step` "
"attributes are also being deprecated.  At the C level, the fourth argument "
"to the :c:func:`PyRange_New` function, ``repeat``, has also been deprecated."
msgstr ""

# 2d2baf6cd4a7450691fba077a0792c77
#: whatsnew/2.2.rst:1224
msgid ""
"There were a bunch of patches to the dictionary implementation, mostly to "
"fix potential core dumps if a dictionary contains objects that sneakily "
"changed their hash value, or mutated the dictionary they were contained in. "
"For a while python-dev fell into a gentle rhythm of Michael Hudson finding a "
"case that dumped core, Tim Peters fixing the bug, Michael finding another "
"case, and round and round it went."
msgstr ""

# ac5e2a7fa7cb484e9e52f9247b7fac13
#: whatsnew/2.2.rst:1231
msgid ""
"On Windows, Python can now be compiled with Borland C thanks to a number of "
"patches contributed by Stephen Hansen, though the result isn't fully "
"functional yet.  (But this *is* progress...)"
msgstr ""

# 030e724557344ccdaabf6d04be1ae522
#: whatsnew/2.2.rst:1235
msgid ""
"Another Windows enhancement: Wise Solutions generously offered PythonLabs "
"use of their InstallerMaster 8.1 system.  Earlier PythonLabs Windows "
"installers used Wise 5.0a, which was beginning to show its age.  (Packaged "
"up by Tim Peters.)"
msgstr ""

# d4a2a66190e0413aaf2a96987f34719b
#: whatsnew/2.2.rst:1239
msgid ""
"Files ending in ``.pyw`` can now be imported on Windows. ``.pyw`` is a "
"Windows-only thing, used to indicate that a script needs to be run using "
"PYTHONW.EXE instead of PYTHON.EXE in order to prevent a DOS console from "
"popping up to display the output.  This patch makes it possible to import "
"such scripts, in case they're also usable as modules.  (Implemented by David "
"Bolen.)"
msgstr ""

# 13159da891fb429e8e12fceeb81da62d
#: whatsnew/2.2.rst:1245
msgid ""
"On platforms where Python uses the C :c:func:`dlopen` function  to load "
"extension modules, it's now possible to set the flags used  by :c:func:"
"`dlopen` using the :func:`sys.getdlopenflags` and :func:`sys.setdlopenflags` "
"functions. (Contributed by Bram Stolk.)"
msgstr ""

# f216844ad04349689f11f11e519b4bdf
#: whatsnew/2.2.rst:1250
msgid ""
"The :func:`pow` built-in function no longer supports 3 arguments when "
"floating-point numbers are supplied. ``pow(x, y, z)`` returns ``(x**y) % "
"z``, but this is never useful for floating point numbers, and the final "
"result varies unpredictably depending on the platform.  A call such as "
"``pow(2.0, 8.0, 7.0)`` will now raise a :exc:`TypeError` exception."
msgstr ""

# dfd241d1b83b41aaabbef370d585e5b4
#: whatsnew/2.2.rst:1262
msgid ""
"The author would like to thank the following people for offering "
"suggestions, corrections and assistance with various drafts of this article: "
"Fred Bremmer, Keith Briggs, Andrew Dalke, Fred L. Drake, Jr., Carel "
"Fellinger, David Goodger, Mark Hammond, Stephen Hansen, Michael Hudson, Jack "
"Jansen, Marc-André Lemburg, Martin von Löwis, Fredrik Lundh, Michael McLay, "
"Nick Mathewson, Paul Moore, Gustavo Niemeyer, Don O'Donnell, Joonas "
"Paalasma, Tim Peters, Jens Quade, Tom Reinhardt, Neil Schemenauer, Guido van "
"Rossum, Greg Ward, Edward Welbourne."
msgstr ""

# 412e9acd1b60404d94150884e7bf31c7
#: whatsnew/2.3.rst:3
#, fuzzy
msgid "What's New in Python 2.3"
msgstr "Nouveautés de Python 2.0"

# 6c9ddf0893f64547882281f0965d404e
#: whatsnew/2.3.rst:11
msgid ""
"This article explains the new features in Python 2.3.  Python 2.3 was "
"released on July 29, 2003."
msgstr ""

# c3229173f78d413981a4ef41a7d1fe9a
#: whatsnew/2.3.rst:14
msgid ""
"The main themes for Python 2.3 are polishing some of the features added in "
"2.2, adding various small but useful enhancements to the core language, and "
"expanding the standard library.  The new object model introduced in the "
"previous version has benefited from 18 months of bugfixes and from "
"optimization efforts that have improved the performance of new-style "
"classes.  A few new built-in functions have been added such as :func:`sum` "
"and :func:`enumerate`.  The :keyword:`in` operator can now be used for "
"substring searches (e.g. ``\"ab\" in \"abc\"`` returns :const:`True`)."
msgstr ""

# 1a0d964a848741928529b3d75add349d
#: whatsnew/2.3.rst:23
msgid ""
"Some of the many new library features include Boolean, set, heap, and date/"
"time data types, the ability to import modules from ZIP-format archives, "
"metadata support for the long-awaited Python catalog, an updated version of "
"IDLE, and modules for logging messages, wrapping text, parsing CSV files, "
"processing command-line options, using BerkeleyDB databases...  the list of "
"new and enhanced modules is lengthy."
msgstr ""

# 79b1409b0b4f45a3a50759dda1c98ebc
#: whatsnew/2.3.rst:30
msgid ""
"This article doesn't attempt to provide a complete specification of the new "
"features, but instead provides a convenient overview.  For full details, you "
"should refer to the documentation for Python 2.3, such as the Python Library "
"Reference and the Python Reference Manual.  If you want to understand the "
"complete implementation and design rationale, refer to the PEP for a "
"particular new feature."
msgstr ""

# 6fd134a4b7b043de87bff24e1c1fa668
#: whatsnew/2.3.rst:41
msgid "PEP 218: A Standard Set Datatype"
msgstr ""

# f82b132f437942c8a3baf78bec0d1129
#: whatsnew/2.3.rst:43
msgid ""
"The new :mod:`sets` module contains an implementation of a set datatype.  "
"The :class:`Set` class is for mutable sets, sets that can have members added "
"and removed.  The :class:`ImmutableSet` class is for sets that can't be "
"modified, and instances of :class:`ImmutableSet` can therefore be used as "
"dictionary keys. Sets are built on top of dictionaries, so the elements "
"within a set must be hashable."
msgstr ""

# 8a7c9462c53247e9bd00d121aa3ed09e
#: whatsnew/2.3.rst:50
msgid "Here's a simple example::"
msgstr ""

# 6acf9d8bad3b42228a803c15ed3cd230
#: whatsnew/2.3.rst:66
msgid ""
"The union and intersection of sets can be computed with the :meth:`union` "
"and :meth:`intersection` methods; an alternative notation uses the bitwise "
"operators ``&`` and ``|``. Mutable sets also have in-place versions of these "
"methods, :meth:`union_update` and :meth:`intersection_update`. ::"
msgstr ""

# ead83a9b5af24ed79d08580b74501f14
#: whatsnew/2.3.rst:86
msgid ""
"It's also possible to take the symmetric difference of two sets.  This is "
"the set of all elements in the union that aren't in the intersection.  "
"Another way of putting it is that the symmetric difference contains all "
"elements that are in exactly one set.  Again, there's an alternative "
"notation (``^``), and an in- place version with the ungainly name :meth:"
"`symmetric_difference_update`. ::"
msgstr ""

# b78ed273085a44d7b9b0ab4269542463
#: whatsnew/2.3.rst:100
msgid ""
"There are also :meth:`issubset` and :meth:`issuperset` methods for checking "
"whether one set is a subset or superset of another::"
msgstr ""

#: whatsnew/2.3.rst:117 whatsnew/2.4.rst:83
msgid "PEP 218 - Adding a Built-In Set Object Type"
msgstr ""

# c3411c7419194dff9b9f6f14ada7f36a
#: whatsnew/2.3.rst:117
msgid ""
"PEP written by Greg V. Wilson. Implemented by Greg V. Wilson, Alex Martelli, "
"and GvR."
msgstr ""

# 6353b45313eb46fba0f6fd89ca51e68a
#: whatsnew/2.3.rst:128
msgid ""
"In Python 2.2, generators were added as an optional feature, to be enabled "
"by a ``from __future__ import generators`` directive.  In 2.3 generators no "
"longer need to be specially enabled, and are now always present; this means "
"that :keyword:`yield` is now always a keyword.  The rest of this section is "
"a copy of the description of generators from the \"What's New in Python "
"2.2\" document; if you read it back when Python 2.2 came out, you can skip "
"the rest of this section."
msgstr ""

# a30a1bc5d7ce45a29d63acbd09488d24
#: whatsnew/2.3.rst:136
msgid ""
"You're doubtless familiar with how function calls work in Python or C. When "
"you call a function, it gets a private namespace where its local variables "
"are created.  When the function reaches a :keyword:`return` statement, the "
"local variables are destroyed and the resulting value is returned to the "
"caller.  A later call to the same function will get a fresh new set of local "
"variables. But, what if the local variables weren't thrown away on exiting a "
"function? What if you could later resume the function where it left off?  "
"This is what generators provide; they can be thought of as resumable "
"functions."
msgstr ""

# 8e770bab1da54bb2ac5df6029cd434da
#: whatsnew/2.3.rst:151
msgid ""
"A new keyword, :keyword:`yield`, was introduced for generators.  Any "
"function containing a :keyword:`yield` statement is a generator function; "
"this is detected by Python's bytecode compiler which compiles the function "
"specially as a result."
msgstr ""

# 24ae59be77a24b96ad5bdeacb0d5b6ba
#: whatsnew/2.3.rst:156
msgid ""
"When you call a generator function, it doesn't return a single value; "
"instead it returns a generator object that supports the iterator protocol.  "
"On executing the :keyword:`yield` statement, the generator outputs the value "
"of ``i``, similar to a :keyword:`return` statement.  The big difference "
"between :keyword:`yield` and a :keyword:`return` statement is that on "
"reaching a :keyword:`yield` the generator's state of execution is suspended "
"and local variables are preserved.  On the next call to the generator's ``."
"next()`` method, the function will resume executing immediately after the :"
"keyword:`yield` statement.  (For complicated reasons, the :keyword:`yield` "
"statement isn't allowed inside the :keyword:`try` block of a :keyword:"
"`try`...\\ :keyword:`finally` statement; read :pep:`255` for a full "
"explanation of the interaction between :keyword:`yield` and exceptions.)"
msgstr ""

# 60c5073a77ea444ab77a25ced23b7796
#: whatsnew/2.3.rst:236
msgid ""
"Python doesn't go nearly as far as Icon in adopting generators as a central "
"concept.  Generators are considered part of the core Python language, but "
"learning or using them isn't compulsory; if they don't solve any problems "
"that you have, feel free to ignore them. One novel feature of Python's "
"interface as compared to Icon's is that a generator's state is represented "
"as a concrete object (the iterator) that can be passed around to other "
"functions or stored in a data structure."
msgstr ""

# c01bf57a9ac4453faf7d4a9a866e4e4f
#: whatsnew/2.3.rst:257
msgid "PEP 263: Source Code Encodings"
msgstr ""

# c5a86b000b754a4e9ab21855e0b1d7d3
#: whatsnew/2.3.rst:259
msgid ""
"Python source files can now be declared as being in different character set "
"encodings.  Encodings are declared by including a specially formatted "
"comment in the first or second line of the source file.  For example, a "
"UTF-8 file can be declared with::"
msgstr ""

# 835eafaa70d4480c9a4ed080ffcc4d26
#: whatsnew/2.3.rst:267
msgid ""
"Without such an encoding declaration, the default encoding used is 7-bit "
"ASCII. Executing or importing modules that contain string literals with 8-"
"bit characters and have no encoding declaration will result in a :exc:"
"`DeprecationWarning` being signalled by Python 2.3; in 2.4 this will be a "
"syntax error."
msgstr ""

# 104f29af727a4ea9aa300b404a5f03e6
#: whatsnew/2.3.rst:273
msgid ""
"The encoding declaration only affects Unicode string literals, which will be "
"converted to Unicode using the specified encoding.  Note that Python "
"identifiers are still restricted to ASCII characters, so you can't have "
"variable names that use characters outside of the usual alphanumerics."
msgstr ""

#: whatsnew/2.3.rst:282
msgid "PEP 263 - Defining Python Source Code Encodings"
msgstr ""

# 8b6cc4446be941a08e0319fce548bf4a
#: whatsnew/2.3.rst:282
msgid ""
"Written by Marc-André Lemburg and Martin von Löwis; implemented by Suzuki "
"Hisao and Martin von Löwis."
msgstr ""

# ecd315c1209b4a1f94bc8bed62b1b33b
#: whatsnew/2.3.rst:289
msgid "PEP 273: Importing Modules from ZIP Archives"
msgstr ""

# cc4e605c15bd45cbb15cac8bc315bc91
#: whatsnew/2.3.rst:291
msgid ""
"The new :mod:`zipimport` module adds support for importing modules from a "
"ZIP- format archive.  You don't need to import the module explicitly; it "
"will be automatically imported if a ZIP archive's filename is added to ``sys."
"path``. For example::"
msgstr ""

# 1ccfea9d53bb45fcaebe92219b9bac9e
#: whatsnew/2.3.rst:312
msgid ""
"An entry in ``sys.path`` can now be the filename of a ZIP archive. The ZIP "
"archive can contain any kind of files, but only files named :file:`\\*.py`, :"
"file:`\\*.pyc`, or :file:`\\*.pyo` can be imported.  If an archive only "
"contains :file:`\\*.py` files, Python will not attempt to modify the archive "
"by adding the corresponding :file:`\\*.pyc` file, meaning that if a ZIP "
"archive doesn't contain :file:`\\*.pyc` files, importing may be rather slow."
msgstr ""

# 048b343a19cd4930a9be7f559a5ee473
#: whatsnew/2.3.rst:319
msgid ""
"A path within the archive can also be specified to only import from a "
"subdirectory; for example, the path :file:`/tmp/example.zip/lib/` would only "
"import from the :file:`lib/` subdirectory within the archive."
msgstr ""

#: whatsnew/2.3.rst:329
msgid "PEP 273 - Import Modules from Zip Archives"
msgstr ""

# ed342f9696904aa997dc0a05e494be1f
#: whatsnew/2.3.rst:327
msgid ""
"Written by James C. Ahlstrom,  who also provided an implementation. Python "
"2.3 follows the specification in :pep:`273`,  but uses an implementation "
"written by Just van Rossum  that uses the import hooks described in :pep:"
"`302`. See section :ref:`section-pep302` for a description of the new import "
"hooks."
msgstr ""

# 30a4752eaa814cf28e894637e48bfc15
#: whatsnew/2.3.rst:336
msgid "PEP 277: Unicode file name support for Windows NT"
msgstr ""

# 306f40c27bd8495dbdc12c78bb3d2bcd
#: whatsnew/2.3.rst:338
msgid ""
"On Windows NT, 2000, and XP, the system stores file names as Unicode "
"strings. Traditionally, Python has represented file names as byte strings, "
"which is inadequate because it renders some file names inaccessible."
msgstr ""

# 6716fb5f7ff241ac9b223454008ad235
#: whatsnew/2.3.rst:342
msgid ""
"Python now allows using arbitrary Unicode strings (within the limitations of "
"the file system) for all functions that expect file names, most notably the :"
"func:`open` built-in function. If a Unicode string is passed to :func:`os."
"listdir`, Python now returns a list of Unicode strings.  A new function, :"
"func:`os.getcwdu`, returns the current directory as a Unicode string."
msgstr ""

# b12feeaf332544bbaaa06952782e956c
#: whatsnew/2.3.rst:348
msgid ""
"Byte strings still work as file names, and on Windows Python will "
"transparently convert them to Unicode using the ``mbcs`` encoding."
msgstr ""

# 9d9830528662423f99d6def5b147f040
#: whatsnew/2.3.rst:351
msgid ""
"Other systems also allow Unicode strings as file names but convert them to "
"byte strings before passing them to the system, which can cause a :exc:"
"`UnicodeError` to be raised. Applications can test whether arbitrary Unicode "
"strings are supported as file names by checking :attr:`os.path."
"supports_unicode_filenames`, a Boolean value."
msgstr ""

# 13efb62632424d6990c39f6ad90026ee
#: whatsnew/2.3.rst:357
msgid "Under MacOS, :func:`os.listdir` may now return Unicode filenames."
msgstr ""

#: whatsnew/2.3.rst:363
msgid "PEP 277 - Unicode file name support for Windows NT"
msgstr ""

# 296b6b04fbf14fbe8099c9d7bad3caca
#: whatsnew/2.3.rst:363
msgid ""
"Written by Neil Hodgson; implemented by Neil Hodgson, Martin von Löwis, and "
"Mark Hammond."
msgstr ""

# f7db54a778134b1a849d7c9e9eca5583
#: whatsnew/2.3.rst:373
msgid "PEP 278: Universal Newline Support"
msgstr ""

# 0116ec2f72c74806a5ac24680bab6148
#: whatsnew/2.3.rst:375
msgid ""
"The three major operating systems used today are Microsoft Windows, Apple's "
"Macintosh OS, and the various Unix derivatives.  A minor irritation of "
"cross- platform work  is that these three platforms all use different "
"characters to mark the ends of lines in text files.  Unix uses the linefeed "
"(ASCII character 10), MacOS uses the carriage return (ASCII character 13), "
"and Windows uses a two-character sequence of a carriage return plus a "
"newline."
msgstr ""

# 7ee02ddd0bef4fcbac82f8adba90e53e
#: whatsnew/2.3.rst:382
msgid ""
"Python's file objects can now support end of line conventions other than the "
"one followed by the platform on which Python is running. Opening a file with "
"the mode ``'U'`` or ``'rU'`` will open a file for reading in :term:"
"`universal newlines` mode.  All three line ending conventions will be "
"translated to a ``'\\n'`` in the strings returned by the various file "
"methods such as :meth:`read` and :meth:`readline`."
msgstr ""

# 69282839741c44959b42d6ca8af0390a
#: whatsnew/2.3.rst:389
msgid ""
"Universal newline support is also used when importing modules and when "
"executing a file with the :func:`execfile` function.  This means that Python "
"modules can be shared between all three operating systems without needing to "
"convert the line-endings."
msgstr ""

# 44cf65fe32a24d79a16c1b5a0150cf02
#: whatsnew/2.3.rst:394
msgid ""
"This feature can be disabled when compiling Python by specifying the :option:"
"`--without-universal-newlines` switch when running Python's :program:"
"`configure` script."
msgstr ""

#: whatsnew/2.3.rst:401
msgid "PEP 278 - Universal Newline Support"
msgstr ""

# 8171392d4b4244da8c1c3fc04fe836f5
#: whatsnew/2.3.rst:402
msgid "Written and implemented by Jack Jansen."
msgstr ""

# 7d82cbb047924785848cdaf56f514d21
#: whatsnew/2.3.rst:410
msgid "PEP 279: enumerate()"
msgstr ""

# ffeebc5f3f094e54ac6a6905aeee6b2d
#: whatsnew/2.3.rst:412
msgid ""
"A new built-in function, :func:`enumerate`, will make certain loops a bit "
"clearer.  ``enumerate(thing)``, where *thing* is either an iterator or a "
"sequence, returns a iterator that will return ``(0, thing[0])``, ``(1, "
"thing[1])``, ``(2, thing[2])``, and so forth."
msgstr ""

# 657fae9dae744e408f7daed6fb03c0e5
#: whatsnew/2.3.rst:417
msgid "A common idiom to change every element of a list looks like this::"
msgstr ""

# f5f6d9d0092842e397c2b4b9d247eba8
#: whatsnew/2.3.rst:424
msgid "This can be rewritten using :func:`enumerate` as::"
msgstr ""

#: whatsnew/2.3.rst:433
msgid "PEP 279 - The enumerate() built-in function"
msgstr ""

# 33fc8fbc4bb3467d978627ad8f30b9b3
#: whatsnew/2.3.rst:434
msgid "Written and implemented by Raymond D. Hettinger."
msgstr ""

# ebd70d4bf554441295a6c39db9ab4c76
#: whatsnew/2.3.rst:440
msgid "PEP 282: The logging Package"
msgstr ""

# 6441383078714992931f9ec8e5005145
#: whatsnew/2.3.rst:442
msgid ""
"A standard package for writing logs, :mod:`logging`, has been added to "
"Python 2.3.  It provides a powerful and flexible mechanism for generating "
"logging output which can then be filtered and processed in various ways.  A "
"configuration file written in a standard format can be used to control the "
"logging behavior of a program.  Python includes handlers that will write log "
"records to standard error or to a file or socket, send them to the system "
"log, or even e-mail them to a particular address; of course, it's also "
"possible to write your own handler classes."
msgstr ""

# 141725157f2c4a5b97a6ee2601fee82c
#: whatsnew/2.3.rst:451
msgid ""
"The :class:`Logger` class is the primary class. Most application code will "
"deal with one or more :class:`Logger` objects, each one used by a particular "
"subsystem of the application. Each :class:`Logger` is identified by a name, "
"and names are organized into a hierarchy using ``.``  as the component "
"separator. For example, you might have :class:`Logger` instances named "
"``server``, ``server.auth`` and ``server.network``.  The latter two "
"instances are below ``server`` in the hierarchy.  This means that if you "
"turn up the verbosity for ``server`` or direct ``server`` messages to a "
"different handler, the changes will also apply to records logged to ``server."
"auth`` and ``server.network``. There's also a root :class:`Logger` that's "
"the parent of all other loggers."
msgstr ""

# c2268ad05f664506b8b91163f432c63e
#: whatsnew/2.3.rst:462
msgid ""
"For simple uses, the :mod:`logging` package contains some convenience "
"functions that always use the root log::"
msgstr ""

# ff973f310fa7487591ba9e7aecb53007
# d99f49ecc1354bf9a0084fd6f0b25bb2
# acbae5912efd4489aa2f9398838ad791
#: whatsnew/2.3.rst:473 whatsnew/2.3.rst:498 whatsnew/2.6.rst:642
#, fuzzy
msgid "This produces the following output::"
msgstr "Produisant l'affichage suivant :"

# 09440e4f42a140ad96e5673a1f0fd432
#: whatsnew/2.3.rst:479
msgid ""
"In the default configuration, informational and debugging messages are "
"suppressed and the output is sent to standard error.  You can enable the "
"display of informational and debugging messages by calling the :meth:"
"`setLevel` method on the root logger."
msgstr ""

# fc23c12f9c7846f2a9edd1652ac0cb85
#: whatsnew/2.3.rst:484
msgid ""
"Notice the :func:`warning` call's use of string formatting operators; all of "
"the functions for logging messages take the arguments ``(msg, arg1, "
"arg2, ...)`` and log the string resulting from ``msg % (arg1, arg2, ...)``."
msgstr ""

# 9309f8d3b9c4473fab3146bd33c258dd
#: whatsnew/2.3.rst:488
msgid ""
"There's also an :func:`exception` function that records the most recent "
"traceback.  Any of the other functions will also record the traceback if you "
"specify a true value for the keyword argument *exc_info*. ::"
msgstr ""

# ad9968ddafd147f8ba352de94f3983d7
#: whatsnew/2.3.rst:506
msgid ""
"Slightly more advanced programs will use a logger other than the root "
"logger. The :func:`getLogger(name)` function is used to get a particular "
"log, creating it if it doesn't exist yet. :func:`getLogger(None)` returns "
"the root logger. ::"
msgstr ""

# 64af10c6f960485baedbbdb98637b3c8
#: whatsnew/2.3.rst:517
msgid ""
"Log records are usually propagated up the hierarchy, so a message logged to "
"``server.auth`` is also seen by ``server`` and ``root``, but a :class:"
"`Logger` can prevent this by setting its :attr:`propagate` attribute to :"
"const:`False`."
msgstr ""

# 12306161382846439d052c936a23b5b8
#: whatsnew/2.3.rst:521
msgid ""
"There are more classes provided by the :mod:`logging` package that can be "
"customized.  When a :class:`Logger` instance is told to log a message, it "
"creates a :class:`LogRecord` instance that is sent to any number of "
"different :class:`Handler` instances.  Loggers and handlers can also have an "
"attached list of filters, and each filter can cause the :class:`LogRecord` "
"to be ignored or can modify the record before passing it along.  When "
"they're finally output, :class:`LogRecord` instances are converted to text "
"by a :class:`Formatter` class.  All of these classes can be replaced by your "
"own specially-written classes."
msgstr ""

# fb205582d13b49bd9f44878937699cf0
#: whatsnew/2.3.rst:531
msgid ""
"With all of these features the :mod:`logging` package should provide enough "
"flexibility for even the most complicated applications.  This is only an "
"incomplete overview of its features, so please see the package's reference "
"documentation for all of the details.  Reading :pep:`282` will also be "
"helpful."
msgstr ""

#: whatsnew/2.3.rst:539
msgid "PEP 282 - A Logging System"
msgstr ""

# 6907342e260344c8ac8ffd80ea67cb0c
#: whatsnew/2.3.rst:540
msgid "Written by Vinay Sajip and Trent Mick; implemented by Vinay Sajip."
msgstr ""

# 985fc3f67c344638838fe2934bd945b7
#: whatsnew/2.3.rst:548
msgid "PEP 285: A Boolean Type"
msgstr ""

# a5c4a1ee5a0d45e4a3a57e0f0d01e23b
#: whatsnew/2.3.rst:550
msgid ""
"A Boolean type was added to Python 2.3.  Two new constants were added to "
"the :mod:`__builtin__` module, :const:`True` and :const:`False`.  (:const:"
"`True` and :const:`False` constants were added to the built-ins in Python "
"2.2.1, but the 2.2.1 versions are simply set to integer values of 1 and 0 "
"and aren't a different type.)"
msgstr ""

# fedf9bd8d58b496b9b1fea56afcfb9a0
#: whatsnew/2.3.rst:556
msgid ""
"The type object for this new type is named :class:`bool`; the constructor "
"for it takes any Python value and converts it to :const:`True` or :const:"
"`False`. ::"
msgstr ""

# 09bc668b247a4782bf405af286a4424f
#: whatsnew/2.3.rst:568
msgid ""
"Most of the standard library modules and built-in functions have been "
"changed to return Booleans. ::"
msgstr ""

# ae042636517945f3bee4c4d885d7f2da
#: whatsnew/2.3.rst:579
msgid ""
"Python's Booleans were added with the primary goal of making code clearer.  "
"For example, if you're reading a function and encounter the statement "
"``return 1``, you might wonder whether the ``1`` represents a Boolean truth "
"value, an index, or a coefficient that multiplies some other quantity.  If "
"the statement is ``return True``, however, the meaning of the return value "
"is quite clear."
msgstr ""

# 647c337d62b34ef7acb53657d5eefcff
#: whatsnew/2.3.rst:585
msgid ""
"Python's Booleans were *not* added for the sake of strict type-checking.  A "
"very strict language such as Pascal would also prevent you performing "
"arithmetic with Booleans, and would require that the expression in an :"
"keyword:`if` statement always evaluate to a Boolean result.  Python is not "
"this strict and never will be, as :pep:`285` explicitly says.  This means "
"you can still use any expression in an :keyword:`if` statement, even ones "
"that evaluate to a list or tuple or some random object.  The Boolean type is "
"a subclass of the :class:`int` class so that arithmetic using a Boolean "
"still works. ::"
msgstr ""

# 33cfb7c6d80a473db64a313875419f7f
#: whatsnew/2.3.rst:603
msgid ""
"To sum up :const:`True` and :const:`False` in a sentence: they're "
"alternative ways to spell the integer values 1 and 0, with the single "
"difference that :func:`str` and :func:`repr` return the strings ``'True'`` "
"and ``'False'`` instead of ``'1'`` and ``'0'``."
msgstr ""

#: whatsnew/2.3.rst:611
msgid "PEP 285 - Adding a bool type"
msgstr ""

# 933587d9176f4149a1f70b289282e31c
#: whatsnew/2.3.rst:612
msgid "Written and implemented by GvR."
msgstr ""

# 7c47ca0c3d5d4c9e8dd8a8d1777ffecd
#: whatsnew/2.3.rst:618
msgid "PEP 293: Codec Error Handling Callbacks"
msgstr ""

# 4ca7789674a741c8b3661747dc679e79
#: whatsnew/2.3.rst:620
msgid ""
"When encoding a Unicode string into a byte string, unencodable characters "
"may be encountered.  So far, Python has allowed specifying the error "
"processing as either \"strict\" (raising :exc:`UnicodeError`), \"ignore"
"\" (skipping the character), or \"replace\" (using a question mark in the "
"output string), with \"strict\" being the default behavior. It may be "
"desirable to specify alternative processing of such errors, such as "
"inserting an XML character reference or HTML entity reference into the "
"converted string."
msgstr ""

# fcf1a9951b5d47d6bf8e1f104b0ba31b
#: whatsnew/2.3.rst:628
msgid ""
"Python now has a flexible framework to add different processing strategies.  "
"New error handlers can be added with :func:`codecs.register_error`, and "
"codecs then can access the error handler with :func:`codecs.lookup_error`. "
"An equivalent C API has been added for codecs written in C. The error "
"handler gets the necessary state information such as the string being "
"converted, the position in the string where the error was detected, and the "
"target encoding.  The handler can then either raise an exception or return a "
"replacement string."
msgstr ""

# 21ceb23d3ff84e3b8cc757bea396695b
#: whatsnew/2.3.rst:636
msgid ""
"Two additional error handlers have been implemented using this framework: "
"\"backslashreplace\" uses Python backslash quoting to represent unencodable "
"characters and \"xmlcharrefreplace\" emits XML character references."
msgstr ""

#: whatsnew/2.3.rst:643
msgid "PEP 293 - Codec Error Handling Callbacks"
msgstr ""

# ff8c300c57da47adbe92a3457b2a9bb0
#: whatsnew/2.3.rst:644
msgid "Written and implemented by Walter Dörwald."
msgstr ""

# 8b7c703f793e4cf3bca35dbd92c98006
#: whatsnew/2.3.rst:652
msgid "PEP 301: Package Index and Metadata for Distutils"
msgstr ""

# 3299d4e07cfc48229977c2ebf9137775
#: whatsnew/2.3.rst:654
msgid ""
"Support for the long-requested Python catalog makes its first appearance in "
"2.3."
msgstr ""

# 2e2c4eba085a494ba70022270fbac70b
#: whatsnew/2.3.rst:656
msgid ""
"The heart of the catalog is the new Distutils :command:`register` command. "
"Running ``python setup.py register`` will collect the metadata describing a "
"package, such as its name, version, maintainer, description, &c., and send "
"it to a central catalog server.  The resulting catalog is available from "
"http://www.python.org/pypi."
msgstr ""

# fae14f019aac497c9fbe751bd75b53c9
#: whatsnew/2.3.rst:662
msgid ""
"To make the catalog a bit more useful, a new optional *classifiers* keyword "
"argument has been added to the Distutils :func:`setup` function.  A list of "
"`Trove <http://catb.org/~esr/trove/>`_-style strings can be supplied to help "
"classify the software."
msgstr ""

# 1dc1ee100726485dab5919a176d5edf7
#: whatsnew/2.3.rst:667
msgid ""
"Here's an example :file:`setup.py` with classifiers, written to be "
"compatible with older versions of the Distutils::"
msgstr ""

# 8b0e0403833446ed9698c45f03303cd2
#: whatsnew/2.3.rst:686
msgid ""
"The full list of classifiers can be obtained by running  ``python setup.py "
"register --list-classifiers``."
msgstr ""

#: whatsnew/2.3.rst:692
msgid "PEP 301 - Package Index and Metadata for Distutils"
msgstr ""

# 39b5fbcaecc74e63a16b173d623d1f2d
#: whatsnew/2.3.rst:693
msgid "Written and implemented by Richard Jones."
msgstr ""

# 28be55a2f4ab4b538481d965649ed27f
#: whatsnew/2.3.rst:701
msgid "PEP 302: New Import Hooks"
msgstr ""

# 79535f2eb16645b781c8a02eaab08dfa
#: whatsnew/2.3.rst:703
msgid ""
"While it's been possible to write custom import hooks ever since the :mod:"
"`ihooks` module was introduced in Python 1.3, no one has ever been really "
"happy with it because writing new import hooks is difficult and messy.  "
"There have been various proposed alternatives such as the :mod:`imputil` "
"and :mod:`iu` modules, but none of them has ever gained much acceptance, and "
"none of them were easily usable from C code."
msgstr ""

# dc97f39de4e64185bc9dd0457853a28a
#: whatsnew/2.3.rst:710
msgid ""
":pep:`302` borrows ideas from its predecessors, especially from Gordon "
"McMillan's :mod:`iu` module.  Three new items  are added to the :mod:`sys` "
"module:"
msgstr ""

# 7be8b3f78d194fe9a9e7175ee9aff7c7
#: whatsnew/2.3.rst:714
msgid ""
"``sys.path_hooks`` is a list of callable objects; most  often they'll be "
"classes.  Each callable takes a string containing a path and either returns "
"an importer object that will handle imports from this path or raises an :exc:"
"`ImportError` exception if it can't handle this path."
msgstr ""

# fb003b34ddb24e21b6cc7cd8df5bb2dd
#: whatsnew/2.3.rst:719
msgid ""
"``sys.path_importer_cache`` caches importer objects for each path, so ``sys."
"path_hooks`` will only need to be traversed once for each path."
msgstr ""

# 6e1a2910345c4e51875d4dff150e437d
#: whatsnew/2.3.rst:722
msgid ""
"``sys.meta_path`` is a list of importer objects that will be traversed "
"before ``sys.path`` is checked.  This list is initially empty, but user code "
"can add objects to it.  Additional built-in and frozen modules can be "
"imported by an object added to this list."
msgstr ""

# 1f783cacabd64016a624d97a35615a1e
#: whatsnew/2.3.rst:727
msgid ""
"Importer objects must have a single method, :meth:`find_module(fullname, "
"path=None)`.  *fullname* will be a module or package name, e.g. ``string`` "
"or ``distutils.core``.  :meth:`find_module` must return a loader object that "
"has a single method, :meth:`load_module(fullname)`, that creates and returns "
"the corresponding module object."
msgstr ""

# 056e0ae9808d4790b7fa0b9bccfcc1e8
#: whatsnew/2.3.rst:733
msgid ""
"Pseudo-code for Python's new import logic, therefore, looks something like "
"this (simplified a bit; see :pep:`302` for the full details)::"
msgstr ""

#: whatsnew/2.3.rst:758
msgid "PEP 302 - New Import Hooks"
msgstr ""

# ce45d475d8454ecebad0263a1f0e82b1
#: whatsnew/2.3.rst:759
msgid ""
"Written by Just van Rossum and Paul Moore. Implemented by Just van Rossum."
msgstr ""

# ba9c144fa9a94ef68cf9bba50910fd98
#: whatsnew/2.3.rst:767
msgid "PEP 305: Comma-separated Files"
msgstr ""

# 6ee3832cd1ec4cceae336d0f6a09606c
#: whatsnew/2.3.rst:769
msgid ""
"Comma-separated files are a format frequently used for exporting data from "
"databases and spreadsheets.  Python 2.3 adds a parser for comma-separated "
"files."
msgstr ""

# fd398667eaf34b5bb519137d30793cda
#: whatsnew/2.3.rst:772
msgid "Comma-separated format is deceptively simple at first glance::"
msgstr ""

# 816f90c2f5ab4c42a62f029a02fd02ac
#: whatsnew/2.3.rst:776
msgid ""
"Read a line and call ``line.split(',')``: what could be simpler? But toss in "
"string data that can contain commas, and things get more complicated::"
msgstr ""

# 624a6b28f41b4d37a5ffe02c0e55d84f
#: whatsnew/2.3.rst:781
msgid ""
"A big ugly regular expression can parse this, but using the new  :mod:`csv` "
"package is much simpler::"
msgstr ""

# 72425e33856e4e15a481f238dbfe91b9
#: whatsnew/2.3.rst:791
msgid ""
"The :func:`reader` function takes a number of different options. The field "
"separator isn't limited to the comma and can be changed to any character, "
"and so can the quoting and line-ending characters."
msgstr ""

# 29d2f427e902408688598ff1d7c091e5
#: whatsnew/2.3.rst:795
msgid ""
"Different dialects of comma-separated files can be defined and registered; "
"currently there are two dialects, both used by Microsoft Excel. A separate :"
"class:`csv.writer` class will generate comma-separated files from a "
"succession of tuples or lists, quoting strings that contain the delimiter."
msgstr ""

#: whatsnew/2.3.rst:804
msgid "PEP 305 - CSV File API"
msgstr ""

# 28874f94d9194bd597161ea11b44f737
#: whatsnew/2.3.rst:804
msgid ""
"Written and implemented  by Kevin Altis, Dave Cole, Andrew McNamara, Skip "
"Montanaro, Cliff Wells."
msgstr ""

# 88f293ec8ed546af9c4b3a14be57af48
#: whatsnew/2.3.rst:813
msgid "PEP 307: Pickle Enhancements"
msgstr ""

# 10e02ba24ef748f5bc7e1a882e572401
#: whatsnew/2.3.rst:815
msgid ""
"The :mod:`pickle` and :mod:`cPickle` modules received some attention during "
"the 2.3 development cycle.  In 2.2, new-style classes could be pickled "
"without difficulty, but they weren't pickled very compactly; :pep:`307` "
"quotes a trivial example where a new-style class results in a pickled string "
"three times longer than that for a classic class."
msgstr ""

# da58cb202fe44b229944dae8b1609d13
#: whatsnew/2.3.rst:821
msgid ""
"The solution was to invent a new pickle protocol.  The :func:`pickle.dumps` "
"function has supported a text-or-binary flag  for a long time.  In 2.3, this "
"flag is redefined from a Boolean to an integer: 0 is the old text-mode "
"pickle format, 1 is the old binary format, and now 2 is a new 2.3-specific "
"format.  A new constant, :const:`pickle.HIGHEST_PROTOCOL`, can be used to "
"select the fanciest protocol available."
msgstr ""

# a1478627b0e54064995ebe3a05da7b2c
#: whatsnew/2.3.rst:828
msgid ""
"Unpickling is no longer considered a safe operation.  2.2's :mod:`pickle` "
"provided hooks for trying to prevent unsafe classes from being unpickled "
"(specifically, a :attr:`__safe_for_unpickling__` attribute), but none of "
"this code was ever audited and therefore it's all been ripped out in 2.3.  "
"You should not unpickle untrusted data in any version of Python."
msgstr ""

# 660c1e9c90a142b3bbefcd000961a1dd
#: whatsnew/2.3.rst:834
msgid ""
"To reduce the pickling overhead for new-style classes, a new interface for "
"customizing pickling was added using three special methods: :meth:"
"`__getstate__`, :meth:`__setstate__`, and :meth:`__getnewargs__`.  Consult :"
"pep:`307` for the full semantics  of these methods."
msgstr ""

# e7bd59cb0ad345d085ab55edf56f837d
#: whatsnew/2.3.rst:839
msgid ""
"As a way to compress pickles yet further, it's now possible to use integer "
"codes instead of long strings to identify pickled classes. The Python "
"Software Foundation will maintain a list of standardized codes; there's also "
"a range of codes for private use.  Currently no codes have been specified."
msgstr ""

#: whatsnew/2.3.rst:847
msgid "PEP 307 - Extensions to the pickle protocol"
msgstr ""

# 7e88b842ebbf4811b03fa385c9e14351
#: whatsnew/2.3.rst:848
msgid "Written and implemented  by Guido van Rossum and Tim Peters."
msgstr ""

# af140e2ac7614d1aa0538bbdcf5d08a6
#: whatsnew/2.3.rst:856
msgid "Extended Slices"
msgstr ""

# fc94d8b56ed24cc18e05c9cbf735a13f
#: whatsnew/2.3.rst:858
msgid ""
"Ever since Python 1.4, the slicing syntax has supported an optional third "
"\"step\" or \"stride\" argument.  For example, these are all legal Python "
"syntax: ``L[1:10:2]``, ``L[:-1:1]``, ``L[::-1]``.  This was added to Python "
"at the request of the developers of Numerical Python, which uses the third "
"argument extensively.  However, Python's built-in list, tuple, and string "
"sequence types have never supported this feature, raising a :exc:`TypeError` "
"if you tried it. Michael Hudson contributed a patch to fix this shortcoming."
msgstr ""

# bb9588aa192f46c9aa87a8111fa4ee93
#: whatsnew/2.3.rst:866
msgid ""
"For example, you can now easily extract the elements of a list that have "
"even indexes::"
msgstr ""

# 16da557fba754830a1ecaabef3dcd251
#: whatsnew/2.3.rst:873
msgid ""
"Negative values also work to make a copy of the same list in reverse order::"
msgstr ""

# ed112a1099db42feb226b5b7799d2d52
#: whatsnew/2.3.rst:878
msgid "This also works for tuples, arrays, and strings::"
msgstr ""

# 4151cb15450c458da11b19c202453b75
#: whatsnew/2.3.rst:886
msgid ""
"If you have a mutable sequence such as a list or an array you can assign to "
"or delete an extended slice, but there are some differences between "
"assignment to extended and regular slices.  Assignment to a regular slice "
"can be used to change the length of the sequence::"
msgstr ""

# c75cbc3e554d40269b30f8de6f105390
#: whatsnew/2.3.rst:898
msgid ""
"Extended slices aren't this flexible.  When assigning to an extended slice, "
"the list on the right hand side of the statement must contain the same "
"number of items as the slice it is replacing::"
msgstr ""

# ace3d176cd94447491c3b5332e546719
#: whatsnew/2.3.rst:915
msgid "Deletion is more straightforward::"
msgstr ""

# e567f8787a0c4e77a374b6042b1e163f
#: whatsnew/2.3.rst:926
msgid ""
"One can also now pass slice objects to the :meth:`__getitem__` methods of "
"the built-in sequences::"
msgstr ""

# 5e761d7fb0ee4ad68c66accb56f9cfc9
#: whatsnew/2.3.rst:932
msgid "Or use slice objects directly in subscripts::"
msgstr ""

# 590e0462b20e4db0acc2c750f9b6797d
#: whatsnew/2.3.rst:937
msgid ""
"To simplify implementing sequences that support extended slicing, slice "
"objects now have a method :meth:`indices(length)` which, given the length of "
"a sequence, returns a ``(start, stop, step)`` tuple that can be passed "
"directly to :func:`range`. :meth:`indices` handles omitted and out-of-bounds "
"indices in a manner consistent with regular slices (and this innocuous "
"phrase hides a welter of confusing details!).  The method is intended to be "
"used like this::"
msgstr ""

# d336313613eb4e4ba7c50f6e89fc607e
#: whatsnew/2.3.rst:955
msgid ""
"From this example you can also see that the built-in :class:`slice` object "
"is now the type object for the slice type, and is no longer a function.  "
"This is consistent with Python 2.2, where :class:`int`, :class:`str`, etc., "
"underwent the same change."
msgstr ""

# 234f6b4d335f4657b697c7a39aef900e
# 72a22c25c51a4b3cb0c6166db953387c
# 54d2df79f1bf4e9e8530c3d8ec8e43e1
# 69c2961e87124a92b461a0ebba0bd3da
# c681a0390ff846149abb30770efba51c
# 4f74e7555571469fa62a2651a6aacc8b
# e4968da2b659462796edd0c1cabc45c7
#: whatsnew/2.3.rst:964 whatsnew/2.4.rst:774 whatsnew/2.5.rst:973
#: whatsnew/2.6.rst:1485 whatsnew/2.7.rst:616 whatsnew/3.1.rst:116
#: whatsnew/3.2.rst:430
msgid "Other Language Changes"
msgstr ""

# 01082bc508e04b09b6bd9dd734314815
#: whatsnew/2.3.rst:966
msgid ""
"Here are all of the changes that Python 2.3 makes to the core Python "
"language."
msgstr ""

# 0eb1ae7cb39446e883138f70878187e1
#: whatsnew/2.3.rst:968
msgid ""
"The :keyword:`yield` statement is now always a keyword, as described in "
"section :ref:`section-generators` of this document."
msgstr ""

# 85a921ead71b4b02bfd3054c8a411483
#: whatsnew/2.3.rst:971
msgid ""
"A new built-in function :func:`enumerate` was added, as described in "
"section :ref:`section-enumerate` of this document."
msgstr ""

# 5b5f2c861ec645ba93196deead5e5b29
#: whatsnew/2.3.rst:974
msgid ""
"Two new constants, :const:`True` and :const:`False` were added along with "
"the built-in :class:`bool` type, as described in section :ref:`section-bool` "
"of this document."
msgstr ""

# b7e7c12cd4104f808a250716423e84a2
#: whatsnew/2.3.rst:978
msgid ""
"The :func:`int` type constructor will now return a long integer instead of "
"raising an :exc:`OverflowError` when a string or floating-point number is "
"too large to fit into an integer.  This can lead to the paradoxical result "
"that ``isinstance(int(expression), int)`` is false, but that seems unlikely "
"to cause problems in practice."
msgstr ""

# eec34ffc48cf47b6ac642fc2a1cff7d7
#: whatsnew/2.3.rst:984
msgid ""
"Built-in types now support the extended slicing syntax, as described in "
"section :ref:`section-slices` of this document."
msgstr ""

# 561dad304d4b48cba479c3c85093f7c6
#: whatsnew/2.3.rst:987
msgid ""
"A new built-in function, :func:`sum(iterable, start=0)`,  adds up the "
"numeric items in the iterable object and returns their sum.  :func:`sum` "
"only accepts numbers, meaning that you can't use it to concatenate a bunch "
"of strings. (Contributed by Alex Martelli.)"
msgstr ""

# e80899813d3342818a4da64f44e736a0
#: whatsnew/2.3.rst:992
msgid ""
"``list.insert(pos, value)`` used to  insert *value* at the front of the list "
"when *pos* was negative.  The behaviour has now been changed to be "
"consistent with slice indexing, so when *pos* is -1 the value will be "
"inserted before the last element, and so forth."
msgstr ""

# 9785074dd5c14cf89cc675102e8680dd
#: whatsnew/2.3.rst:997
msgid ""
"``list.index(value)``, which searches for *value*  within the list and "
"returns its index, now takes optional  *start* and *stop* arguments to limit "
"the search to  only part of the list."
msgstr ""

# 21056dc0c95f428a95e143aaec4232b7
#: whatsnew/2.3.rst:1001
msgid ""
"Dictionaries have a new method, :meth:`pop(key[, *default*])`, that returns "
"the value corresponding to *key* and removes that key/value pair from the "
"dictionary.  If the requested key isn't present in the dictionary, *default* "
"is returned if it's specified and :exc:`KeyError` raised if it isn't. ::"
msgstr ""

# 7f3e79c8d3d6474487eb113dc3b23044
#: whatsnew/2.3.rst:1023
msgid ""
"There's also a new class method,  :meth:`dict.fromkeys(iterable, value)`, "
"that creates a dictionary with keys taken from the supplied iterator "
"*iterable* and all values set to *value*, defaulting to ``None``."
msgstr ""

# cbb5b42b8bad4d79923722b30c7e75a2
#: whatsnew/2.3.rst:1027
msgid "(Patches contributed by Raymond Hettinger.)"
msgstr ""

# 50a808f27de348409233af6cd9792a57
#: whatsnew/2.3.rst:1029
msgid ""
"Also, the :func:`dict` constructor now accepts keyword arguments to simplify "
"creating small dictionaries::"
msgstr ""

# a9f62766a9324950bf99b4ea5bd6d06b
#: whatsnew/2.3.rst:1035
msgid "(Contributed by Just van Rossum.)"
msgstr ""

# 3cdc5475aadf4b7b902f4a0a04d52221
#: whatsnew/2.3.rst:1037
msgid ""
"The :keyword:`assert` statement no longer checks the ``__debug__`` flag, so "
"you can no longer disable assertions by assigning to ``__debug__``. Running "
"Python with the :option:`-O` switch will still generate code that doesn't "
"execute any assertions."
msgstr ""

# 1d4da643e73a47c6b1efe683fb2f14e6
#: whatsnew/2.3.rst:1042
msgid ""
"Most type objects are now callable, so you can use them to create new "
"objects such as functions, classes, and modules.  (This means that the :mod:"
"`new` module can be deprecated in a future Python version, because you can "
"now use the type objects available in the :mod:`types` module.) For example, "
"you can create a new module object with the following code:"
msgstr ""

# 7c779c812e4e46299cf6b4ddda28f7df
#: whatsnew/2.3.rst:1057
msgid ""
"A new warning, :exc:`PendingDeprecationWarning` was added to indicate "
"features which are in the process of being deprecated.  The warning will "
"*not* be printed by default.  To check for use of features that will be "
"deprecated in the future, supply :option:`-Walways::"
"PendingDeprecationWarning::` on the command line or use :func:`warnings."
"filterwarnings`."
msgstr ""

# a2628feb671944ccb6ae6e7e753e0add
#: whatsnew/2.3.rst:1063
msgid ""
"The process of deprecating string-based exceptions, as in ``raise \"Error "
"occurred\"``, has begun.  Raising a string will now trigger :exc:"
"`PendingDeprecationWarning`."
msgstr ""

# aefc9efb5b7145cca9eaae85635c40d5
#: whatsnew/2.3.rst:1067
msgid ""
"Using ``None`` as a variable name will now result in a :exc:`SyntaxWarning` "
"warning.  In a future version of Python, ``None`` may finally become a "
"keyword."
msgstr ""

# e928f03c42d648ab9e7d45aea604ed56
#: whatsnew/2.3.rst:1070
msgid ""
"The :meth:`xreadlines` method of file objects, introduced in Python 2.1, is "
"no longer necessary because files now behave as their own iterator. :meth:"
"`xreadlines` was originally introduced as a faster way to loop over all the "
"lines in a file, but now you can simply write ``for line in file_obj``. File "
"objects also have a new read-only :attr:`encoding` attribute that gives the "
"encoding used by the file; Unicode strings written to the file will be "
"automatically  converted to bytes using the given encoding."
msgstr ""

# f0f9cd2e232047bb81ec565fa9d7b2e1
#: whatsnew/2.3.rst:1078
msgid ""
"The method resolution order used by new-style classes has changed, though "
"you'll only notice the difference if you have a really complicated "
"inheritance hierarchy.  Classic classes are unaffected by this change.  "
"Python 2.2 originally used a topological sort of a class's ancestors, but "
"2.3 now uses the C3 algorithm as described in the paper `\"A Monotonic "
"Superclass Linearization for Dylan\" <http://www.webcom.com/haahr/dylan/"
"linearization-oopsla96.html>`_. To understand the motivation for this "
"change,  read Michele Simionato's article `\"Python 2.3 Method Resolution "
"Order\" <http://www.python.org/2.3/mro.html>`_, or read the thread on python-"
"dev starting with the message at http://mail.python.org/pipermail/python-"
"dev/2002-October/029035.html. Samuele Pedroni first pointed out the problem "
"and also implemented the fix by coding the C3 algorithm."
msgstr ""

# e660ed17ad344cb6a008c77650ee870b
#: whatsnew/2.3.rst:1091
msgid ""
"Python runs multithreaded programs by switching between threads after "
"executing N bytecodes.  The default value for N has been increased from 10 "
"to 100 bytecodes, speeding up single-threaded applications by reducing the "
"switching overhead.  Some multithreaded applications may suffer slower "
"response time, but that's easily fixed by setting the limit back to a lower "
"number using :func:`sys.setcheckinterval(N)`. The limit can be retrieved "
"with the new :func:`sys.getcheckinterval` function."
msgstr ""

# 900be67d06ed4c62b588e05e529d4f69
#: whatsnew/2.3.rst:1099
msgid ""
"One minor but far-reaching change is that the names of extension types "
"defined by the modules included with Python now contain the module and a "
"``'.'`` in front of the type name.  For example, in Python 2.2, if you "
"created a socket and printed its :attr:`__class__`, you'd get this output::"
msgstr ""

# d5be80f22ab44580b467128e29ca9bb5
#: whatsnew/2.3.rst:1108
msgid "In 2.3, you get this::"
msgstr ""

# 6accd8c4789c44079ca4e49fe162819e
#: whatsnew/2.3.rst:1113
msgid ""
"One of the noted incompatibilities between old- and new-style classes has "
"been removed: you can now assign to the :attr:`__name__` and :attr:"
"`__bases__` attributes of new-style classes.  There are some restrictions on "
"what can be assigned to :attr:`__bases__` along the lines of those relating "
"to assigning to an instance's :attr:`__class__` attribute."
msgstr ""

# ef3fff5770ef477c86d5547f7c4cf4ef
#: whatsnew/2.3.rst:1123
msgid "String Changes"
msgstr ""

# 0600e0908b2d4508997408d180da60f9
#: whatsnew/2.3.rst:1125
msgid ""
"The :keyword:`in` operator now works differently for strings. Previously, "
"when evaluating ``X in Y`` where *X* and *Y* are strings, *X* could only be "
"a single character. That's now changed; *X* can be a string of any length, "
"and ``X in Y`` will return :const:`True` if *X* is a substring of *Y*.  If "
"*X* is the empty string, the result is always :const:`True`. ::"
msgstr ""

# 62ae6186a86942acbbbebc771dd356f8
#: whatsnew/2.3.rst:1138
msgid ""
"Note that this doesn't tell you where the substring starts; if you need that "
"information, use the :meth:`find` string method."
msgstr ""

# ed0aea4b232b4983878527366b4aae76
#: whatsnew/2.3.rst:1141
msgid ""
"The :meth:`strip`, :meth:`lstrip`, and :meth:`rstrip` string methods now "
"have an optional argument for specifying the characters to strip.  The "
"default is still to remove all whitespace characters::"
msgstr ""

# 98be6ac6c3b94537bd4dff36fb639226
#: whatsnew/2.3.rst:1155
msgid "(Suggested by Simon Brunning and implemented by Walter Dörwald.)"
msgstr ""

# 189d21fa3225421a98b6e5d87e4e397b
#: whatsnew/2.3.rst:1157
msgid ""
"The :meth:`startswith` and :meth:`endswith` string methods now accept "
"negative numbers for the *start* and *end* parameters."
msgstr ""

# 371007e99e3d431f9f1797420b2b7352
#: whatsnew/2.3.rst:1160
msgid ""
"Another new string method is :meth:`zfill`, originally a function in the :"
"mod:`string` module.  :meth:`zfill` pads a numeric string with zeros on the "
"left until it's the specified width. Note that the ``%`` operator is still "
"more flexible and powerful than :meth:`zfill`. ::"
msgstr ""

# 85b8ce11d07f4672ad5281d785b57025
#: whatsnew/2.3.rst:1172
msgid "(Contributed by Walter Dörwald.)"
msgstr ""

# 3e4d6e5cefd944ca947c8362f504985b
#: whatsnew/2.3.rst:1174
msgid ""
"A new type object, :class:`basestring`, has been added. Both 8-bit strings "
"and Unicode strings inherit from this type, so ``isinstance(obj, "
"basestring)`` will return :const:`True` for either kind of string.  It's a "
"completely abstract type, so you can't create :class:`basestring` instances."
msgstr ""

# 7e2b50d162d24bbba7fced7ef709a2ea
#: whatsnew/2.3.rst:1179
msgid ""
"Interned strings are no longer immortal and will now be garbage-collected in "
"the usual way when the only reference to them is from the internal "
"dictionary of interned strings.  (Implemented by Oren Tirosh.)"
msgstr ""

# 0b232ce76dea4db5abe4e7a4e500be9a
# 7b73705a4c864996a18d994151539df4
# 217f2c3881bd4bae8a7f95d98b967aa2
# 2c77f413f64d4fcc9c502eee07f10c5c
# e6b668e21ac34b0bb757447b1b1408e0
# 4e985a8fa92b48858cbf5b678a2e3339
# 795f35bf06474449a8d3d612aa1f6485
#: whatsnew/2.3.rst:1187 whatsnew/2.4.rst:933 whatsnew/2.5.rst:1138
#: whatsnew/2.6.rst:1693 whatsnew/2.7.rst:866 whatsnew/3.1.rst:416
#: whatsnew/3.2.rst:2307
msgid "Optimizations"
msgstr ""

# 93302d5204d943dcb192a0e5a34214a7
#: whatsnew/2.3.rst:1189
msgid ""
"The creation of new-style class instances has been made much faster; they're "
"now faster than classic classes!"
msgstr ""

# 8c5cc098cc7f420a8a773050025a02cb
#: whatsnew/2.3.rst:1192
msgid ""
"The :meth:`sort` method of list objects has been extensively rewritten by "
"Tim Peters, and the implementation is significantly faster."
msgstr ""

# 4e3330caccbe47de93a388f698b55518
#: whatsnew/2.3.rst:1195
msgid ""
"Multiplication of large long integers is now much faster thanks to an "
"implementation of Karatsuba multiplication, an algorithm that scales better "
"than the O(n\\*n) required for the grade-school multiplication algorithm.  "
"(Original patch by Christopher A. Craig, and significantly reworked by Tim "
"Peters.)"
msgstr ""

# 26f10d9696304bb9936687f41d3ed722
#: whatsnew/2.3.rst:1200
msgid ""
"The ``SET_LINENO`` opcode is now gone.  This may provide a small speed "
"increase, depending on your compiler's idiosyncrasies. See section :ref:"
"`23section-other` for a longer explanation. (Removed by Michael Hudson.)"
msgstr ""

# f5b3e06abc414ea8bdc591337da9840b
#: whatsnew/2.3.rst:1204
msgid ""
":func:`xrange` objects now have their own iterator, making ``for i in "
"xrange(n)`` slightly faster than ``for i in range(n)``.  (Patch by Raymond "
"Hettinger.)"
msgstr ""

# 8c2893015e064086800f07e5c1270b9e
#: whatsnew/2.3.rst:1208
msgid ""
"A number of small rearrangements have been made in various hotspots to "
"improve performance, such as inlining a function or removing some code.  "
"(Implemented mostly by GvR, but lots of people have contributed single "
"changes.)"
msgstr ""

# e52ae611920c4576bf56524f62643473
#: whatsnew/2.3.rst:1212
msgid ""
"The net result of the 2.3 optimizations is that Python 2.3 runs the  pystone "
"benchmark around 25% faster than Python 2.2."
msgstr ""

# 012ceef98cec4511be1c7eac930169a6
# 121d6ddb958846928e5b5a5c8956eea2
# 17345d0cf05c4add93188627c3133c24
# 806f09e3495e4726a79f173246f20738
#: whatsnew/2.3.rst:1219 whatsnew/2.4.rst:990 whatsnew/3.1.rst:224
#: whatsnew/3.2.rst:644
msgid "New, Improved, and Deprecated Modules"
msgstr ""

# 8187d9e977f74d39a6c33d3dadfd840e
# 17a35486180e4dacb349e653037b7fd8
#: whatsnew/2.3.rst:1221 whatsnew/2.4.rst:992
msgid ""
"As usual, Python's standard library received a number of enhancements and "
"bug fixes.  Here's a partial list of the most notable changes, sorted "
"alphabetically by module name. Consult the :file:`Misc/NEWS` file in the "
"source tree for a more complete list of changes, or look through the CVS "
"logs for all the details."
msgstr ""

# 382f4a2bf5c44bb183f2cbcbfda52599
#: whatsnew/2.3.rst:1226
msgid ""
"The :mod:`array` module now supports arrays of Unicode characters using the "
"``'u'`` format character.  Arrays also now support using the ``+=`` "
"assignment operator to add another array's contents, and the ``*=`` "
"assignment operator to repeat an array. (Contributed by Jason Orendorff.)"
msgstr ""

# 8bd1e7e092224edbb9f2123c1e4c47a4
#: whatsnew/2.3.rst:1231
msgid ""
"The :mod:`bsddb` module has been replaced by version 4.1.6 of the `PyBSDDB "
"<http://pybsddb.sourceforge.net>`_ package, providing a more complete "
"interface to the transactional features of the BerkeleyDB library."
msgstr ""

# eabc88a9febb4cefbcab09be3973cbe9
#: whatsnew/2.3.rst:1235
msgid ""
"The old version of the module has been renamed to  :mod:`bsddb185` and is no "
"longer built automatically; you'll  have to edit :file:`Modules/Setup` to "
"enable it.  Note that the new :mod:`bsddb` package is intended to be "
"compatible with the  old module, so be sure to file bugs if you discover any "
"incompatibilities. When upgrading to Python 2.3, if the new interpreter is "
"compiled with a new version of  the underlying BerkeleyDB library, you will "
"almost certainly have to convert your database files to the new version.  "
"You can do this fairly easily with the new scripts :file:`db2pickle.py` and :"
"file:`pickle2db.py` which you will find in the distribution's :file:`Tools/"
"scripts` directory.  If you've already been using the PyBSDDB package and "
"importing it as :mod:`bsddb3`, you will have to change your ``import`` "
"statements to import it as :mod:`bsddb`."
msgstr ""

# 285725495eaf412fb97b4d43ff3c2731
#: whatsnew/2.3.rst:1247
msgid ""
"The new :mod:`bz2` module is an interface to the bz2 data compression "
"library. bz2-compressed data is usually smaller than  corresponding :mod:"
"`zlib`\\ -compressed data. (Contributed by Gustavo Niemeyer.)"
msgstr ""

# c16f9c4deb094bba85164bcfcc6b5bcf
#: whatsnew/2.3.rst:1251
msgid ""
"A set of standard date/time types has been added in the new :mod:`datetime` "
"module.  See the following section for more details."
msgstr ""

# 1b6c87f80c21424a8964a4af4a248df9
#: whatsnew/2.3.rst:1254
msgid ""
"The Distutils :class:`Extension` class now supports an extra constructor "
"argument named *depends* for listing additional source files that an "
"extension depends on.  This lets Distutils recompile the module if any of "
"the dependency files are modified.  For example, if :file:`sampmodule.c` "
"includes the header file :file:`sample.h`, you would create the :class:"
"`Extension` object like this::"
msgstr ""

# 931eb5e774f14cc5b52561eddaef886f
#: whatsnew/2.3.rst:1265
msgid ""
"Modifying :file:`sample.h` would then cause the module to be recompiled. "
"(Contributed by Jeremy Hylton.)"
msgstr ""

# b5f7733bfd9b466b894538cf83d9d22b
#: whatsnew/2.3.rst:1268
msgid ""
"Other minor changes to Distutils: it now checks for the :envvar:`CC`, :"
"envvar:`CFLAGS`, :envvar:`CPP`, :envvar:`LDFLAGS`, and :envvar:`CPPFLAGS` "
"environment variables, using them to override the settings in Python's "
"configuration (contributed by Robert Weber)."
msgstr ""

# dde07fea0af1479cbe1f1feec49387ca
#: whatsnew/2.3.rst:1273
msgid ""
"Previously the :mod:`doctest` module would only search the docstrings of "
"public methods and functions for test cases, but it now also examines "
"private ones as well.  The :func:`DocTestSuite(` function creates a :class:"
"`unittest.TestSuite` object from a set of :mod:`doctest` tests."
msgstr ""

# e04a55f1268444fd9131fe2000a38056
#: whatsnew/2.3.rst:1278
msgid ""
"The new :func:`gc.get_referents(object)` function returns a list of all the "
"objects referenced by *object*."
msgstr ""

# 438de27a03c947df9d9b377626cffdeb
#: whatsnew/2.3.rst:1281
msgid ""
"The :mod:`getopt` module gained a new function, :func:`gnu_getopt`, that "
"supports the same arguments as the existing :func:`getopt` function but uses "
"GNU-style scanning mode. The existing :func:`getopt` stops processing "
"options as soon as a non-option argument is encountered, but in GNU-style "
"mode processing continues, meaning that options and arguments can be mixed.  "
"For example::"
msgstr ""

# 924d35adaa554695a78d6b4f43d7b22b
#: whatsnew/2.3.rst:1292
msgid "(Contributed by Peter Åstrand.)"
msgstr ""

# ce96f952d86f413fb71cefba45154090
#: whatsnew/2.3.rst:1294
msgid ""
"The :mod:`grp`, :mod:`pwd`, and :mod:`resource` modules now return enhanced "
"tuples::"
msgstr ""

# ef1e83f791854d53868fe86793393c2e
#: whatsnew/2.3.rst:1302
msgid "The :mod:`gzip` module can now handle files exceeding 2 GiB."
msgstr ""

# 8a5a0992c5b74df186ff3d1aa58ee4af
#: whatsnew/2.3.rst:1304
msgid ""
"The new :mod:`heapq` module contains an implementation of a heap queue "
"algorithm.  A heap is an array-like data structure that keeps items in a "
"partially sorted order such that, for every index *k*, ``heap[k] <= heap[2*k"
"+1]`` and ``heap[k] <= heap[2*k+2]``.  This makes it quick to remove the "
"smallest item, and inserting a new item while maintaining the heap property "
"is O(lg n).  (See http://www.nist.gov/dads/HTML/priorityque.html for more "
"information about the priority queue data structure.)"
msgstr ""

# f38183adb2bb4a54a78bc0c234e73745
#: whatsnew/2.3.rst:1312
msgid ""
"The :mod:`heapq` module provides :func:`heappush` and :func:`heappop` "
"functions for adding and removing items while maintaining the heap property "
"on top of some other mutable Python sequence type.  Here's an example that "
"uses a Python list::"
msgstr ""

# bf2251769774491e9993a6aee0b3e129
#: whatsnew/2.3.rst:1330
msgid "(Contributed by Kevin O'Connor.)"
msgstr ""

# ccab5a64f46446778f62f86cdfb78d70
#: whatsnew/2.3.rst:1332
msgid ""
"The IDLE integrated development environment has been updated using the code "
"from the IDLEfork project (http://idlefork.sf.net).  The most notable "
"feature is that the code being developed is now executed in a subprocess, "
"meaning that there's no longer any need for manual ``reload()`` operations. "
"IDLE's core code has been incorporated into the standard library as the :mod:"
"`idlelib` package."
msgstr ""

# db4b38643ddd41a1a4d6309b36b4e302
#: whatsnew/2.3.rst:1338
msgid ""
"The :mod:`imaplib` module now supports IMAP over SSL. (Contributed by Piers "
"Lauder and Tino Lange.)"
msgstr ""

# d34dc6aa20604400a5a8adfb63561e07
#: whatsnew/2.3.rst:1341
msgid ""
"The :mod:`itertools` contains a number of useful functions for use with "
"iterators, inspired by various functions provided by the ML and Haskell "
"languages.  For example, ``itertools.ifilter(predicate, iterator)`` returns "
"all elements in the iterator for which the function :func:`predicate` "
"returns :const:`True`, and ``itertools.repeat(obj, N)`` returns ``obj`` *N* "
"times. There are a number of other functions in the module; see the "
"package's reference documentation for details. (Contributed by Raymond "
"Hettinger.)"
msgstr ""

# 40df5308afb64ac4a27492535b26e65f
#: whatsnew/2.3.rst:1350
msgid ""
"Two new functions in the :mod:`math` module, :func:`degrees(rads)` and :func:"
"`radians(degs)`, convert between radians and degrees.  Other functions in "
"the :mod:`math` module such as :func:`math.sin` and :func:`math.cos` have "
"always required input values measured in radians.  Also, an optional *base* "
"argument was added to :func:`math.log` to make it easier to compute "
"logarithms for bases other than ``e`` and ``10``.  (Contributed by Raymond "
"Hettinger.)"
msgstr ""

# 8963c31ad4b7437aba6a7237560bed57
#: whatsnew/2.3.rst:1357
msgid ""
"Several new POSIX functions (:func:`getpgid`, :func:`killpg`, :func:"
"`lchown`, :func:`loadavg`, :func:`major`, :func:`makedev`, :func:`minor`, "
"and :func:`mknod`) were added to the :mod:`posix` module that underlies the :"
"mod:`os` module. (Contributed by Gustavo Niemeyer, Geert Jansen, and Denis "
"S. Otkidach.)"
msgstr ""

# 2bedf108bd124bfe8a9189ed2d8d0aca
#: whatsnew/2.3.rst:1363
msgid ""
"In the :mod:`os` module, the :func:`\\*stat` family of functions can now "
"report fractions of a second in a timestamp.  Such time stamps are "
"represented as floats, similar to the value returned by :func:`time.time`."
msgstr ""

# 3760793d3efa47d6bd41f5feaff32d48
#: whatsnew/2.3.rst:1367
msgid ""
"During testing, it was found that some applications will break if time "
"stamps are floats.  For compatibility, when using the tuple interface of "
"the :class:`stat_result` time stamps will be represented as integers. When "
"using named fields (a feature first introduced in Python 2.2), time stamps "
"are still represented as integers, unless :func:`os.stat_float_times` is "
"invoked to enable float return values::"
msgstr ""

# 2e75cf02c6ad484795ea13f73f165ed4
#: whatsnew/2.3.rst:1380
msgid "In Python 2.4, the default will change to always returning floats."
msgstr ""

# a949557fc83745f186c7880e3c581886
#: whatsnew/2.3.rst:1382
msgid ""
"Application developers should enable this feature only if all their "
"libraries work properly when confronted with floating point time stamps, or "
"if they use the tuple API. If used, the feature should be activated on an "
"application level instead of trying to enable it on a per-use basis."
msgstr ""

# ec3cc4c2bf6745d1a0b84bd668facc9c
#: whatsnew/2.3.rst:1387
msgid ""
"The :mod:`optparse` module contains a new parser for command-line arguments "
"that can convert option values to a particular Python type  and will "
"automatically generate a usage message.  See the following section for  more "
"details."
msgstr ""

# 82f99004c1f0497c99abe62e98c761e4
#: whatsnew/2.3.rst:1392
msgid ""
"The old and never-documented :mod:`linuxaudiodev` module has been "
"deprecated, and a new version named :mod:`ossaudiodev` has been added.  The "
"module was renamed because the OSS sound drivers can be used on platforms "
"other than Linux, and the interface has also been tidied and brought up to "
"date in various ways. (Contributed by Greg Ward and Nicholas FitzRoy-Dale.)"
msgstr ""

# d4aaaa24cc244189a7f3797c95b2592c
#: whatsnew/2.3.rst:1398
msgid ""
"The new :mod:`platform` module contains a number of functions that try to "
"determine various properties of the platform you're running on.  There are "
"functions for getting the architecture, CPU type, the Windows OS version, "
"and even the Linux distribution version. (Contributed by Marc-André Lemburg.)"
msgstr ""

# c9d8511594a7474eafe52593de38a1de
#: whatsnew/2.3.rst:1403
msgid ""
"The parser objects provided by the :mod:`pyexpat` module can now optionally "
"buffer character data, resulting in fewer calls to your character data "
"handler and therefore faster performance.  Setting the parser object's :attr:"
"`buffer_text` attribute to :const:`True` will enable buffering."
msgstr ""

# 9a4ce92da94641c2b47a52ae9faf312e
#: whatsnew/2.3.rst:1408
msgid ""
"The :func:`sample(population, k)` function was added to the :mod:`random` "
"module.  *population* is a sequence or :class:`xrange` object containing the "
"elements of a population, and :func:`sample` chooses *k* elements from the "
"population without replacing chosen elements.  *k* can be any value up to "
"``len(population)``. For example::"
msgstr ""

# 26ccd15b3c8d47919944219fdff6f35f
#: whatsnew/2.3.rst:1430
msgid ""
"The :mod:`random` module now uses a new algorithm, the Mersenne Twister, "
"implemented in C.  It's faster and more extensively studied than the "
"previous algorithm."
msgstr ""

# 830435fcc8d04088b6d4fa03af51ffe4
#: whatsnew/2.3.rst:1434
msgid "(All changes contributed by Raymond Hettinger.)"
msgstr ""

# c173ee1b8768461ea594d3b048bcb36a
#: whatsnew/2.3.rst:1436
msgid ""
"The :mod:`readline` module also gained a number of new functions: :func:"
"`get_history_item`, :func:`get_current_history_length`, and :func:"
"`redisplay`."
msgstr ""

# f27deeaa2bc34343ad20d23596fcadb4
#: whatsnew/2.3.rst:1440
msgid ""
"The :mod:`rexec` and :mod:`Bastion` modules have been declared dead, and "
"attempts to import them will fail with a :exc:`RuntimeError`.  New-style "
"classes provide new ways to break out of the restricted execution "
"environment provided by :mod:`rexec`, and no one has interest in fixing them "
"or time to do so.  If you have applications using :mod:`rexec`, rewrite them "
"to use something else."
msgstr ""

# fbaff3522d854f078fb8894a51cf7efd
#: whatsnew/2.3.rst:1446
msgid ""
"(Sticking with Python 2.2 or 2.1 will not make your applications any safer "
"because there are known bugs in the :mod:`rexec` module in those versions.  "
"To repeat: if you're using :mod:`rexec`, stop using it immediately.)"
msgstr ""

# 92d9347c118442a489eff4b8575de354
#: whatsnew/2.3.rst:1450
msgid ""
"The :mod:`rotor` module has been deprecated because the  algorithm it uses "
"for encryption is not believed to be secure.  If you need encryption, use "
"one of the several AES Python modules that are available separately."
msgstr ""

# dde7a79a5afb4315b5ad4d76b52d79d2
#: whatsnew/2.3.rst:1454
msgid ""
"The :mod:`shutil` module gained a :func:`move(src, dest)` function that "
"recursively moves a file or directory to a new location."
msgstr ""

# a9926f3b3f854a79953a5b43cac311ac
#: whatsnew/2.3.rst:1457
msgid ""
"Support for more advanced POSIX signal handling was added to the :mod:"
"`signal` but then removed again as it proved impossible to make it work "
"reliably across platforms."
msgstr ""

# 86ed87164d2a467199a1fd1024cba00d
#: whatsnew/2.3.rst:1461
msgid ""
"The :mod:`socket` module now supports timeouts.  You can call the :meth:"
"`settimeout(t)` method on a socket object to set a timeout of *t* seconds. "
"Subsequent socket operations that take longer than *t* seconds to complete "
"will abort and raise a :exc:`socket.timeout` exception."
msgstr ""

# 080beea3a6a74b77937e4453e94924fa
#: whatsnew/2.3.rst:1466
msgid ""
"The original timeout implementation was by Tim O'Malley.  Michael Gilfix "
"integrated it into the Python :mod:`socket` module and shepherded it through "
"a lengthy review.  After the code was checked in, Guido van Rossum rewrote "
"parts of it.  (This is a good example of a collaborative development process "
"in action.)"
msgstr ""

# 9a3dc128ac3343569222ce3391958a91
#: whatsnew/2.3.rst:1472
msgid ""
"On Windows, the :mod:`socket` module now ships with Secure  Sockets Layer "
"(SSL) support."
msgstr ""

# cc9b9d4ef9c54e918b9f00ae47c98ce5
#: whatsnew/2.3.rst:1475
msgid ""
"The value of the C :const:`PYTHON_API_VERSION` macro is now exposed at the "
"Python level as ``sys.api_version``.  The current exception can be cleared "
"by calling the new :func:`sys.exc_clear` function."
msgstr ""

# 7fb72769093f4d2a821653f1ba192135
#: whatsnew/2.3.rst:1479
msgid ""
"The new :mod:`tarfile` module  allows reading from and writing to :program:"
"`tar`\\ -format archive files. (Contributed by Lars Gustäbel.)"
msgstr ""

# 0ffa6b33072f4a55a0eb46a5738f46a6
#: whatsnew/2.3.rst:1482
msgid ""
"The new :mod:`textwrap` module contains functions for wrapping strings "
"containing paragraphs of text.  The :func:`wrap(text, width)` function takes "
"a string and returns a list containing the text split into lines of no more "
"than the chosen width.  The :func:`fill(text, width)` function returns a "
"single string, reformatted to fit into lines no longer than the chosen "
"width. (As you can guess, :func:`fill` is built on top of :func:`wrap`.  For "
"example::"
msgstr ""

# b266e1872cf04400a75aaed91775f1ed
#: whatsnew/2.3.rst:1504
msgid ""
"The module also contains a :class:`TextWrapper` class that actually "
"implements the text wrapping strategy.   Both the :class:`TextWrapper` class "
"and the :func:`wrap` and :func:`fill` functions support a number of "
"additional keyword arguments for fine-tuning the formatting; consult the "
"module's documentation for details. (Contributed by Greg Ward.)"
msgstr ""

# 61401632e2c64033810e53b8b6224f92
#: whatsnew/2.3.rst:1510
msgid ""
"The :mod:`thread` and :mod:`threading` modules now have companion modules, :"
"mod:`dummy_thread` and :mod:`dummy_threading`, that provide a do-nothing "
"implementation of the :mod:`thread` module's interface for platforms where "
"threads are not supported.  The intention is to simplify thread-aware "
"modules (ones that *don't* rely on threads to run) by putting the following "
"code at the top::"
msgstr ""

# dbf80b2e64d64997909548d21a3a6869
#: whatsnew/2.3.rst:1522
msgid ""
"In this example, :mod:`_threading` is used as the module name to make it "
"clear that the module being used is not necessarily the actual :mod:"
"`threading` module. Code can call functions and use classes in :mod:"
"`_threading` whether or not threads are supported, avoiding an :keyword:`if` "
"statement and making the code slightly clearer.  This module will not "
"magically make multithreaded code run without threads; code that waits for "
"another thread to return or to do something will simply hang forever."
msgstr ""

# 6d14eeae2962453ca4bdf53d797b197e
#: whatsnew/2.3.rst:1530
msgid ""
"The :mod:`time` module's :func:`strptime` function has long been an "
"annoyance because it uses the platform C library's :func:`strptime` "
"implementation, and different platforms sometimes have odd bugs.  Brett "
"Cannon contributed a portable implementation that's written in pure Python "
"and should behave identically on all platforms."
msgstr ""

# 5cba41c25d5b4027ac53d6b221351c78
#: whatsnew/2.3.rst:1536
msgid ""
"The new :mod:`timeit` module helps measure how long snippets of Python code "
"take to execute.  The :file:`timeit.py` file can be run directly from the "
"command line, or the module's :class:`Timer` class can be imported and used "
"directly.  Here's a short example that figures out whether it's faster to "
"convert an 8-bit string to Unicode by appending an empty Unicode string to "
"it or by using the :func:`unicode` function::"
msgstr ""

# b43f95f4cad0406797e54bb2c951db66
#: whatsnew/2.3.rst:1556
msgid ""
"The :mod:`Tix` module has received various bug fixes and updates for the "
"current version of the Tix package."
msgstr ""

# eafdc46c265940f0ac1e104be5e8deeb
#: whatsnew/2.3.rst:1559
msgid ""
"The :mod:`Tkinter` module now works with a thread-enabled  version of Tcl. "
"Tcl's threading model requires that widgets only be accessed from the thread "
"in which they're created; accesses from another thread can cause Tcl to "
"panic.  For certain Tcl interfaces, :mod:`Tkinter` will now automatically "
"avoid this  when a widget is accessed from a different thread by marshalling "
"a command, passing it to the correct thread, and waiting for the results.  "
"Other interfaces can't be handled automatically but :mod:`Tkinter` will now "
"raise an exception on such an access so that you can at least find out about "
"the problem.  See http://mail.python.org/pipermail/python-dev/2002-"
"December/031107.html for a more detailed explanation of this change.  "
"(Implemented by Martin von Löwis.)"
msgstr ""

# 6e7987b0727f44d48544ce7be38e22ac
#: whatsnew/2.3.rst:1570
msgid ""
"Calling Tcl methods through :mod:`_tkinter` no longer  returns only strings. "
"Instead, if Tcl returns other objects those objects are converted to their "
"Python equivalent, if one exists, or wrapped with a :class:`_tkinter."
"Tcl_Obj` object if no Python equivalent exists. This behavior can be "
"controlled through the :meth:`wantobjects` method of :class:`tkapp` objects."
msgstr ""

# a7dddaded5a44c34bc7ae607077df48c
#: whatsnew/2.3.rst:1576
msgid ""
"When using :mod:`_tkinter` through the :mod:`Tkinter` module (as most "
"Tkinter applications will), this feature is always activated. It should not "
"cause compatibility problems, since Tkinter would always convert string "
"results to Python types where possible."
msgstr ""

# 38c6582108954a9c9b522339607cf332
#: whatsnew/2.3.rst:1581
msgid ""
"If any incompatibilities are found, the old behavior can be restored by "
"setting the :attr:`wantobjects` variable in the :mod:`Tkinter` module to "
"false before creating the first :class:`tkapp` object. ::"
msgstr ""

# b5e3903bf76f48e4bb8e8b39da0051f8
#: whatsnew/2.3.rst:1588
msgid "Any breakage caused by this change should be reported as a bug."
msgstr ""

# 79145a4b2b224c7b9a3cdde8c7dc1a96
#: whatsnew/2.3.rst:1590
msgid ""
"The :mod:`UserDict` module has a new :class:`DictMixin` class which defines "
"all dictionary methods for classes that already have a minimum mapping "
"interface.  This greatly simplifies writing classes that need to be "
"substitutable for dictionaries, such as the classes in  the :mod:`shelve` "
"module."
msgstr ""

# 815b8a20941546a59a878b31d53d802f
#: whatsnew/2.3.rst:1596
msgid ""
"Adding the mix-in as a superclass provides the full dictionary interface "
"whenever the class defines :meth:`__getitem__`, :meth:`__setitem__`, :meth:"
"`__delitem__`, and :meth:`keys`. For example::"
msgstr ""

# 59d41fe8085748f8ae241663214fc6e4
# 038c76f04b7e4fc89ab3c71d40d2694b
# 64e6be28f3f146b38b990e6832378500
# 66b8b92ad72b4adf8539a80cdd5d4f53
# 5b74ddb17c854f30957ff033a104479f
# e4b4759bd11e4372a8a74b0af296fc7e
# 408c0dae00a24e219b33c57dab24c9f3
# bace0ba7f55447c4b5a0bf445a319eed
# 559692f86c194ada8bd128b3d3d61e85
# 4c0f3ff9d4954d7ba7bd69616bdef973
# 8e769908fbcf47f78597cd435f4ff46b
# c54ad76f215645f7bb8d877acaaef31d
# a4ee9c197b4948e397f16d5ca259f776
# 68164072938f44409e182a1366e65930
# a71a03ea9c574699b131ff8b7f729faa
# d5ca5da394844a6b96a1b2cfeee8d796
# 932ac919eb024a088de9dd0ec2b83e43
#: whatsnew/2.3.rst:1637 whatsnew/2.4.rst:891 whatsnew/2.4.rst:919
#: whatsnew/2.4.rst:1212 whatsnew/2.5.rst:1372 whatsnew/2.5.rst:1381
#: whatsnew/2.6.rst:1596 whatsnew/2.6.rst:1880 whatsnew/2.6.rst:1901
#: whatsnew/3.1.rst:281 whatsnew/3.2.rst:809 whatsnew/3.2.rst:821
#: whatsnew/3.2.rst:864 whatsnew/3.2.rst:884 whatsnew/3.2.rst:897
#: whatsnew/3.2.rst:1753 whatsnew/3.2.rst:1798
msgid "(Contributed by Raymond Hettinger.)"
msgstr ""

# 4437de630e694c56bfaf5462d8d928b6
#: whatsnew/2.3.rst:1639
msgid ""
"The DOM implementation in :mod:`xml.dom.minidom` can now generate XML output "
"in a particular encoding by providing an optional encoding argument to the :"
"meth:`toxml` and :meth:`toprettyxml` methods of DOM nodes."
msgstr ""

# 4db11caeceb44cc1bc7a3fcac0414a44
#: whatsnew/2.3.rst:1643
msgid ""
"The :mod:`xmlrpclib` module now supports an XML-RPC extension for handling "
"nil data values such as Python's ``None``.  Nil values are always supported "
"on unmarshalling an XML-RPC response.  To generate requests containing "
"``None``, you must supply a true value for the *allow_none* parameter when "
"creating a :class:`Marshaller` instance."
msgstr ""

# 024c3f114f7c4701b83ada53f28f8b8a
#: whatsnew/2.3.rst:1649
msgid ""
"The new :mod:`DocXMLRPCServer` module allows writing self-documenting XML-"
"RPC servers. Run it in demo mode (as a program) to see it in action.   "
"Pointing the Web browser to the RPC server produces pydoc-style "
"documentation; pointing xmlrpclib to the server allows invoking the actual "
"methods. (Contributed by Brian Quinlan.)"
msgstr ""

# 027d2576b4294ddfb711a7b4d341abae
#: whatsnew/2.3.rst:1655
msgid ""
"Support for internationalized domain names (RFCs 3454, 3490, 3491, and 3492) "
"has been added. The \"idna\" encoding can be used to convert between a "
"Unicode domain name and the ASCII-compatible encoding (ACE) of that name. ::"
msgstr ""

# b5a74035880b4e7f930ff89d5f46388c
#: whatsnew/2.3.rst:1662
msgid ""
"The :mod:`socket` module has also been extended to transparently convert "
"Unicode hostnames to the ACE version before passing them to the C library. "
"Modules that deal with hostnames such as :mod:`httplib` and :mod:`ftplib`) "
"also support Unicode host names; :mod:`httplib` also sends HTTP ``Host`` "
"headers using the ACE version of the domain name.  :mod:`urllib` supports "
"Unicode URLs with non-ASCII host names as long as the ``path`` part of the "
"URL is ASCII only."
msgstr ""

# 16fb2db6c1c44fffb6edd7f66b7bfdb2
#: whatsnew/2.3.rst:1670
msgid ""
"To implement this change, the :mod:`stringprep` module, the  "
"``mkstringprep`` tool and the ``punycode`` encoding have been added."
msgstr ""

# 377353a4883e4855970a1404cfb2fefa
#: whatsnew/2.3.rst:1677
msgid "Date/Time Type"
msgstr ""

# dc75d05800204b76af5a86f74ac750c5
#: whatsnew/2.3.rst:1679
msgid ""
"Date and time types suitable for expressing timestamps were added as the :"
"mod:`datetime` module.  The types don't support different calendars or many "
"fancy features, and just stick to the basics of representing time."
msgstr ""

# ee1fe9534703415abb5bc0d3fd4c921d
#: whatsnew/2.3.rst:1683
msgid ""
"The three primary types are: :class:`date`, representing a day, month, and "
"year; :class:`time`, consisting of hour, minute, and second; and :class:"
"`datetime`, which contains all the attributes of both :class:`date` and :"
"class:`time`. There's also a :class:`timedelta` class representing "
"differences between two points in time, and time zone logic is implemented "
"by classes inheriting from the abstract :class:`tzinfo` class."
msgstr ""

# 1c5456e726d540118307401e90a671ac
#: whatsnew/2.3.rst:1690
msgid ""
"You can create instances of :class:`date` and :class:`time` by either "
"supplying keyword arguments to the appropriate constructor, e.g. ``datetime."
"date(year=1972, month=10, day=15)``, or by using one of a number of class "
"methods.  For example, the :meth:`date.today` class method returns the "
"current local date."
msgstr ""

# d9daba7f81ef4c2183129b48dacb13c3
#: whatsnew/2.3.rst:1696
msgid ""
"Once created, instances of the date/time classes are all immutable. There "
"are a number of methods for producing formatted strings from objects::"
msgstr ""

# cbfa383a4f1545dd9b2edce4e89bf09c
#: whatsnew/2.3.rst:1708
msgid ""
"The :meth:`replace` method allows modifying one or more fields  of a :class:"
"`date` or :class:`datetime` instance, returning a new instance::"
msgstr ""

# d8f754713efe4c5c96a19e36cdd93b38
#: whatsnew/2.3.rst:1718
msgid ""
"Instances can be compared, hashed, and converted to strings (the result is "
"the same as that of :meth:`isoformat`).  :class:`date` and :class:`datetime` "
"instances can be subtracted from each other, and added to :class:`timedelta` "
"instances.  The largest missing feature is that there's no standard library "
"support for parsing strings and getting back a :class:`date` or :class:"
"`datetime`."
msgstr ""

# aacf4efd57eb476488b133e9380a8128
#: whatsnew/2.3.rst:1725
msgid ""
"For more information, refer to the module's reference documentation. "
"(Contributed by Tim Peters.)"
msgstr ""

# 06167d29dda047af89322c059ff276ce
#: whatsnew/2.3.rst:1732
msgid "The optparse Module"
msgstr ""

# e6b29115e0ae43b9b5c4f27d8f6bd02f
#: whatsnew/2.3.rst:1734
msgid ""
"The :mod:`getopt` module provides simple parsing of command-line arguments.  "
"The new :mod:`optparse` module (originally named Optik) provides more "
"elaborate command-line parsing that follows the Unix conventions, "
"automatically creates the output for :option:`--help`, and can perform "
"different actions for different options."
msgstr ""

# 6ed7426f1d194c4f88f082fcce52ebba
#: whatsnew/2.3.rst:1740
msgid ""
"You start by creating an instance of :class:`OptionParser` and telling it "
"what your program's options are. ::"
msgstr ""

# c74927c1341b4a2faae03d7cda91c027
#: whatsnew/2.3.rst:1754
msgid ""
"Parsing a command line is then done by calling the :meth:`parse_args` "
"method. ::"
msgstr ""

# a854bb8556974e5d82324cef542a5f74
#: whatsnew/2.3.rst:1760
msgid ""
"This returns an object containing all of the option values, and a list of "
"strings containing the remaining arguments."
msgstr ""

# 03406cccdef24fceab00b5438778453d
#: whatsnew/2.3.rst:1763
msgid ""
"Invoking the script with the various arguments now works as you'd expect it "
"to. Note that the length argument is automatically converted to an "
"integer. ::"
msgstr ""

# 5faa7729ad57411a8544fa2a55e19dc8
#: whatsnew/2.3.rst:1774
msgid "The help message is automatically generated for you::"
msgstr ""

# 07b09e4fc2a54283bfef057a89e18682
#: whatsnew/2.3.rst:1787
msgid "See the module's documentation for more details."
msgstr ""

# 6c9f0134afb74533b2a0ae74f9ab2040
#: whatsnew/2.3.rst:1790
msgid ""
"Optik was written by Greg Ward, with suggestions from the readers of the "
"Getopt SIG."
msgstr ""

# 538ecc7269414ed4b4355e5caa0167d3
#: whatsnew/2.3.rst:1799
msgid "Pymalloc: A Specialized Object Allocator"
msgstr ""

# 3ee63ae0b8bc49aa85db64f89c9bfc91
#: whatsnew/2.3.rst:1801
msgid ""
"Pymalloc, a specialized object allocator written by Vladimir Marangozov, was "
"a feature added to Python 2.1.  Pymalloc is intended to be faster than the "
"system :c:func:`malloc` and to have less memory overhead for allocation "
"patterns typical of Python programs. The allocator uses C's :c:func:`malloc` "
"function to get large pools of memory and then fulfills smaller memory "
"requests from these pools."
msgstr ""

# dc4d2fd06812462f9bcc1995d57e1a21
#: whatsnew/2.3.rst:1807
msgid ""
"In 2.1 and 2.2, pymalloc was an experimental feature and wasn't enabled by "
"default; you had to explicitly enable it when compiling Python by providing "
"the :option:`--with-pymalloc` option to the :program:`configure` script.  In "
"2.3, pymalloc has had further enhancements and is now enabled by default; "
"you'll have to supply :option:`--without-pymalloc` to disable it."
msgstr ""

# 80a25893a67a499ea93a0139ad2374be
#: whatsnew/2.3.rst:1813
msgid ""
"This change is transparent to code written in Python; however, pymalloc may "
"expose bugs in C extensions.  Authors of C extension modules should test "
"their code with pymalloc enabled, because some incorrect code may cause core "
"dumps at runtime."
msgstr ""

# 7f4166df0207403da3e7b562b42fab58
#: whatsnew/2.3.rst:1818
msgid ""
"There's one particularly common error that causes problems.  There are a "
"number of memory allocation functions in Python's C API that have previously "
"just been aliases for the C library's :c:func:`malloc` and :c:func:`free`, "
"meaning that if you accidentally called mismatched functions the error "
"wouldn't be noticeable. When the object allocator is enabled, these "
"functions aren't aliases of :c:func:`malloc` and :c:func:`free` any more, "
"and calling the wrong function to free memory may get you a core dump.  For "
"example, if memory was allocated using :c:func:`PyObject_Malloc`, it has to "
"be freed using :c:func:`PyObject_Free`, not :c:func:`free`.  A few modules "
"included with Python fell afoul of this and had to be fixed; doubtless there "
"are more third-party modules that will have the same problem."
msgstr ""

# 66c94057eed94c1e95f3b79720f76a7a
#: whatsnew/2.3.rst:1830
msgid ""
"As part of this change, the confusing multiple interfaces for allocating "
"memory have been consolidated down into two API families. Memory allocated "
"with one family must not be manipulated with functions from the other "
"family.  There is one family for allocating chunks of memory and another "
"family of functions specifically for allocating Python objects."
msgstr ""

# bb873f3922634ee58135b32479ad961a
#: whatsnew/2.3.rst:1836
msgid ""
"To allocate and free an undistinguished chunk of memory use the \"raw memory"
"\" family: :c:func:`PyMem_Malloc`, :c:func:`PyMem_Realloc`, and :c:func:"
"`PyMem_Free`."
msgstr ""

# 9e46b4fc29cf481287bcde22ddd64384
#: whatsnew/2.3.rst:1839
msgid ""
"The \"object memory\" family is the interface to the pymalloc facility "
"described above and is biased towards a large number of \"small\" "
"allocations: :c:func:`PyObject_Malloc`, :c:func:`PyObject_Realloc`, and :c:"
"func:`PyObject_Free`."
msgstr ""

# 26b11ee057b540788965b7ce3215b1a2
#: whatsnew/2.3.rst:1843
msgid ""
"To allocate and free Python objects, use the \"object\" family :c:func:"
"`PyObject_New`, :c:func:`PyObject_NewVar`, and :c:func:`PyObject_Del`."
msgstr ""

# b955bd38e3764475816c6f22af0330fb
#: whatsnew/2.3.rst:1846
msgid ""
"Thanks to lots of work by Tim Peters, pymalloc in 2.3 also provides "
"debugging features to catch memory overwrites and doubled frees in both "
"extension modules and in the interpreter itself.  To enable this support, "
"compile a debugging version of the Python interpreter by running :program:"
"`configure` with :option:`--with-pydebug`."
msgstr ""

# 66db381273914fe5a8d722b2cbfbb764
#: whatsnew/2.3.rst:1852
msgid ""
"To aid extension writers, a header file :file:`Misc/pymemcompat.h` is "
"distributed with the source to Python 2.3 that allows Python extensions to "
"use the 2.3 interfaces to memory allocation while compiling against any "
"version of Python since 1.5.2.  You would copy the file from Python's source "
"distribution and bundle it with the source of your extension."
msgstr ""

# ba9ade8483d24457b9149574464b91c7
#: whatsnew/2.3.rst:1863
msgid "http://svn.python.org/view/python/trunk/Objects/obmalloc.c"
msgstr ""

# d672b68017a74388a857ec643c7e499e
#: whatsnew/2.3.rst:1862
msgid ""
"For the full details of the pymalloc implementation, see the comments at the "
"top of the file :file:`Objects/obmalloc.c` in the Python source code. The "
"above link points to the file within the python.org SVN browser."
msgstr ""

# 77813b0c44e34d879b9d79e9da06bd5c
# 8ff8aa4ffcd443219597cbafbc679082
# 62db149c771046728e2d072a5625a472
# 0103216b64ab4cee8ebbd7f38c9bdde2
# 50d69a33bee04af4802d81371ad4a9d9
# bfdec24b75ff4ef7b4ad9eb6d405974c
# c359df3c118545c89bc300b4f6c6df9b
# 7824734672df490b8145c2719bf2338b
#: whatsnew/2.3.rst:1870 whatsnew/2.4.rst:1446 whatsnew/2.5.rst:2079
#: whatsnew/2.6.rst:2979 whatsnew/2.7.rst:2036 whatsnew/3.0.rst:850
#: whatsnew/3.1.rst:473 whatsnew/3.2.rst:2485
msgid "Build and C API Changes"
msgstr ""

# 905399394d6341d1b3e3d2c18f13aa97
# 55082a02c599467f8e039e693beee57b
# dc454462413246139635f771cfb3be11
# 51c7cfadd6014eb8b947b7536f1b3e4b
# 293746806bb24e7093537e5f84a7bb97
# 26dd521dd28047cebf973a5328baff90
#: whatsnew/2.3.rst:1872 whatsnew/2.5.rst:2081 whatsnew/2.6.rst:2981
#: whatsnew/2.7.rst:2038 whatsnew/3.1.rst:475 whatsnew/3.2.rst:2487
msgid "Changes to Python's build process and to the C API include:"
msgstr ""

# 210144edb5e540cea9b88bf511758e60
#: whatsnew/2.3.rst:1874
msgid ""
"The cycle detection implementation used by the garbage collection has proven "
"to be stable, so it's now been made mandatory.  You can no longer compile "
"Python without it, and the :option:`--with-cycle-gc` switch to :program:"
"`configure` has been removed."
msgstr ""

# 87d364805fc4400ba87b28f3a28c6e5c
#: whatsnew/2.3.rst:1879
msgid ""
"Python can now optionally be built as a shared library (:file:`libpython2.3."
"so`) by supplying :option:`--enable-shared` when running Python's :program:"
"`configure` script.  (Contributed by Ondrej Palkovsky.)"
msgstr ""

# 2c12fcdd5f3c4532904d93993621975b
#: whatsnew/2.3.rst:1883
msgid ""
"The :c:macro:`DL_EXPORT` and :c:macro:`DL_IMPORT` macros are now deprecated. "
"Initialization functions for Python extension modules should now be declared "
"using the new macro :c:macro:`PyMODINIT_FUNC`, while the Python core will "
"generally use the :c:macro:`PyAPI_FUNC` and :c:macro:`PyAPI_DATA` macros."
msgstr ""

# 6d8662266d9c42839bde68869c325cbf
#: whatsnew/2.3.rst:1888
msgid ""
"The interpreter can be compiled without any docstrings for the built-in "
"functions and modules by supplying :option:`--without-doc-strings` to the :"
"program:`configure` script. This makes the Python executable about 10% "
"smaller, but will also mean that you can't get help for Python's built-ins.  "
"(Contributed by Gustavo Niemeyer.)"
msgstr ""

# 3282a4b48d8c48f3960eed85ced18e24
#: whatsnew/2.3.rst:1894
msgid ""
"The :c:func:`PyArg_NoArgs` macro is now deprecated, and code that uses it "
"should be changed.  For Python 2.2 and later, the method definition table "
"can specify the :const:`METH_NOARGS` flag, signalling that there are no "
"arguments, and the argument checking can then be removed.  If compatibility "
"with pre-2.2 versions of Python is important, the code could use "
"``PyArg_ParseTuple(args, \"\")`` instead, but this will be slower than "
"using :const:`METH_NOARGS`."
msgstr ""

# 41d927ea6ce644329cfcdc65902458c0
#: whatsnew/2.3.rst:1901
msgid ""
":c:func:`PyArg_ParseTuple` accepts new format characters for various sizes "
"of unsigned integers: ``B`` for :c:type:`unsigned char`, ``H`` for :c:type:"
"`unsigned short int`,  ``I`` for :c:type:`unsigned int`,  and ``K`` for :c:"
"type:`unsigned long long`."
msgstr ""

# d9e89ce431df4a0c83ba5a230664e157
#: whatsnew/2.3.rst:1906
msgid ""
"A new function, :c:func:`PyObject_DelItemString(mapping, char \\*key)` was "
"added as shorthand for ``PyObject_DelItem(mapping, PyString_New(key))``."
msgstr ""

# 030fdb59ed4a4eebb7a106a302ddefeb
#: whatsnew/2.3.rst:1909
msgid ""
"File objects now manage their internal string buffer differently, increasing "
"it exponentially when needed.  This results in the benchmark tests in :file:"
"`Lib/test/test_bufio.py` speeding up considerably (from 57 seconds to 1.7 "
"seconds, according to one measurement)."
msgstr ""

# b2cd38c8354c4048a56fd104acd9d7f5
#: whatsnew/2.3.rst:1914
msgid ""
"It's now possible to define class and static methods for a C extension type "
"by setting either the :const:`METH_CLASS` or :const:`METH_STATIC` flags in a "
"method's :c:type:`PyMethodDef` structure."
msgstr ""

# 3416d43e049147b69b9d1a74df986e4b
#: whatsnew/2.3.rst:1918
msgid ""
"Python now includes a copy of the Expat XML parser's source code, removing "
"any dependence on a system version or local installation of Expat."
msgstr ""

# a19775ad808b48a583f5ba70e9938fbc
#: whatsnew/2.3.rst:1921
msgid ""
"If you dynamically allocate type objects in your extension, you should be "
"aware of a change in the rules relating to the :attr:`__module__` and :attr:"
"`__name__` attributes.  In summary, you will want to ensure the type's "
"dictionary contains a ``'__module__'`` key; making the module name the part "
"of the type name leading up to the final period will no longer have the "
"desired effect.  For more detail, read the API reference documentation or "
"the  source."
msgstr ""

# 591875632506485d8516ea639186e0a3
# 949c7542f83c4ee59cd4fbbb00e42fe0
# 8c80647d4f4a4d16b12d802ce0f7bf76
#: whatsnew/2.3.rst:1932 whatsnew/2.4.rst:1499 whatsnew/2.5.rst:2207
msgid "Port-Specific Changes"
msgstr ""

# 81a061d0befa40b48cf72d5bd924c5ac
#: whatsnew/2.3.rst:1934
msgid ""
"Support for a port to IBM's OS/2 using the EMX runtime environment was "
"merged into the main Python source tree.  EMX is a POSIX emulation layer "
"over the OS/2 system APIs.  The Python port for EMX tries to support all the "
"POSIX-like capability exposed by the EMX runtime, and mostly succeeds; :func:"
"`fork` and :func:`fcntl` are restricted by the limitations of the underlying "
"emulation layer.  The standard OS/2 port, which uses IBM's Visual Age "
"compiler, also gained support for case-sensitive import semantics as part of "
"the integration of the EMX port into CVS.  (Contributed by Andrew MacIntyre.)"
msgstr ""

# cda5bf1c0ee9413ca762f44d68c0cd53
#: whatsnew/2.3.rst:1943
msgid ""
"On MacOS, most toolbox modules have been weaklinked to improve backward "
"compatibility.  This means that modules will no longer fail to load if a "
"single routine is missing on the current OS version. Instead calling the "
"missing routine will raise an exception. (Contributed by Jack Jansen.)"
msgstr ""

# b1bab0ed815341638f0692631fd67ff8
#: whatsnew/2.3.rst:1948
msgid ""
"The RPM spec files, found in the :file:`Misc/RPM/` directory in the Python "
"source distribution, were updated for 2.3.  (Contributed by Sean "
"Reifschneider.)"
msgstr ""

# e621c6ecd07e46b992555d2edbf3853f
#: whatsnew/2.3.rst:1951
msgid ""
"Other new platforms now supported by Python include AtheOS (http://www."
"atheos.cx/), GNU/Hurd, and OpenVMS."
msgstr ""

# 1b5bb41bdb674643aaf69cef69a3f9d7
#: whatsnew/2.3.rst:1962
msgid ""
"As usual, there were a bunch of other improvements and bugfixes scattered "
"throughout the source tree.  A search through the CVS change logs finds "
"there were 523 patches applied and 514 bugs fixed between Python 2.2 and "
"2.3.  Both figures are likely to be underestimates."
msgstr ""

# 892c0c88d7654ffba57d11642c954482
#: whatsnew/2.3.rst:1969
msgid ""
"If the :envvar:`PYTHONINSPECT` environment variable is set, the Python "
"interpreter will enter the interactive prompt after running a Python "
"program, as if Python had been invoked with the :option:`-i` option. The "
"environment variable can be set before running the Python interpreter, or it "
"can be set by the Python program as part of its execution."
msgstr ""

# 52de0abd68004faea30f7d137d0fcdc0
#: whatsnew/2.3.rst:1975
msgid ""
"The :file:`regrtest.py` script now provides a way to allow \"all resources "
"except *foo*.\"  A resource name passed to the :option:`-u` option can now "
"be prefixed with a hyphen (``'-'``) to mean \"remove this resource.\"  For "
"example, the option '``-uall,-bsddb``' could be used to enable the use of "
"all resources except ``bsddb``."
msgstr ""

# e2bf9982ddbe4ab89e7a442332d10d61
#: whatsnew/2.3.rst:1981
msgid ""
"The tools used to build the documentation now work under Cygwin as well as "
"Unix."
msgstr ""

# fee61ca4dcc248279913b6e0105d92de
#: whatsnew/2.3.rst:1984
msgid ""
"The ``SET_LINENO`` opcode has been removed.  Back in the mists of time, this "
"opcode was needed to produce line numbers in tracebacks and support trace "
"functions (for, e.g., :mod:`pdb`). Since Python 1.5, the line numbers in "
"tracebacks have been computed using a different mechanism that works with "
"\"python -O\".  For Python 2.3 Michael Hudson implemented a similar scheme "
"to determine when to call the trace function, removing the need for "
"``SET_LINENO`` entirely."
msgstr ""

# eaef1360c1264c92a54e6a608ba51eba
#: whatsnew/2.3.rst:1992
msgid ""
"It would be difficult to detect any resulting difference from Python code, "
"apart from a slight speed up when Python is run without :option:`-O`."
msgstr ""

# 33fdfc668eba4ccd8c06a034f5eb7553
#: whatsnew/2.3.rst:1995
msgid ""
"C extensions that access the :attr:`f_lineno` field of frame objects should "
"instead call ``PyCode_Addr2Line(f->f_code, f->f_lasti)``. This will have the "
"added effect of making the code work as desired under \"python -O\" in "
"earlier versions of Python."
msgstr ""

# 78f0e26abd1547f1b7f66481587134c7
#: whatsnew/2.3.rst:2000
msgid ""
"A nifty new feature is that trace functions can now assign to the :attr:"
"`f_lineno` attribute of frame objects, changing the line that will be "
"executed next.  A ``jump`` command has been added to the :mod:`pdb` debugger "
"taking advantage of this new feature. (Implemented by Richie Hindle.)"
msgstr ""

# 14049f23541047d49450f98a15ea796b
#: whatsnew/2.3.rst:2009
#, fuzzy
msgid "Porting to Python 2.3"
msgstr "Portage vers Python 3.2"

# dd5cacaeb62b411089b998e31ec70fa4
# 3e8e04d9d35a40a3bd90f832fe026edc
# 410d6bce412b45da8649df787274e754
#: whatsnew/2.3.rst:2011 whatsnew/2.4.rst:1510 whatsnew/2.5.rst:2229
msgid ""
"This section lists previously described changes that may require changes to "
"your code:"
msgstr ""

# efa40316ed504ec4b231db6484716ec5
#: whatsnew/2.3.rst:2014
msgid ""
":keyword:`yield` is now always a keyword; if it's used as a variable name in "
"your code, a different name must be chosen."
msgstr ""

# 5b68d4c54d2c49428f2e37a4461845a2
#: whatsnew/2.3.rst:2017
msgid ""
"For strings *X* and *Y*, ``X in Y`` now works if *X* is more than one "
"character long."
msgstr ""

# 61c2ed2212904b29b5abbcce06ee361a
#: whatsnew/2.3.rst:2020
msgid ""
"The :func:`int` type constructor will now return a long integer instead of "
"raising an :exc:`OverflowError` when a string or floating-point number is "
"too large to fit into an integer."
msgstr ""

# d4a8ebb643fe49658eca44b2ab7dbaea
#: whatsnew/2.3.rst:2024
msgid ""
"If you have Unicode strings that contain 8-bit characters, you must declare "
"the file's encoding (UTF-8, Latin-1, or whatever) by adding a comment to the "
"top of the file.  See section :ref:`section-encodings` for more information."
msgstr ""

# c941e912c0ec4fa9a000fba7f2a87d19
#: whatsnew/2.3.rst:2028
msgid ""
"Calling Tcl methods through :mod:`_tkinter` no longer  returns only strings. "
"Instead, if Tcl returns other objects those objects are converted to their "
"Python equivalent, if one exists, or wrapped with a :class:`_tkinter."
"Tcl_Obj` object if no Python equivalent exists."
msgstr ""

# c4689518fa5a4bbfa703d3d912f997b1
#: whatsnew/2.3.rst:2033
msgid ""
"Large octal and hex literals such as ``0xffffffff`` now trigger a :exc:"
"`FutureWarning`. Currently they're stored as 32-bit numbers and result in a "
"negative value, but in Python 2.4 they'll become positive long integers."
msgstr ""

# 770fbd1daad9466ab53eddcb5fb47150
#: whatsnew/2.3.rst:2037
msgid ""
"There are a few ways to fix this warning.  If you really need a positive "
"number, just add an ``L`` to the end of the literal.  If you're trying to "
"get a 32-bit integer with low bits set and have previously used an "
"expression such as ``~(1 << 31)``, it's probably clearest to start with all "
"bits set and clear the desired upper bits. For example, to clear just the "
"top bit (bit 31), you could write ``0xffffffffL &~(1L<<31)``."
msgstr ""

# 9eb09c84528b44619dc5f04547c6473c
#: whatsnew/2.3.rst:2044
msgid "You can no longer disable assertions by assigning to ``__debug__``."
msgstr ""

# eb0ee0c7336c49e78d9aee5732aff7f2
#: whatsnew/2.3.rst:2046
msgid ""
"The Distutils :func:`setup` function has gained various new keyword "
"arguments such as *depends*.  Old versions of the Distutils will abort if "
"passed unknown keywords.  A solution is to check for the presence of the "
"new :func:`get_distutil_options` function in your :file:`setup.py` and only "
"uses the new keywords with a version of the Distutils that supports them::"
msgstr ""

# f672f0e2722b436c814790bcdb83e629
#: whatsnew/2.3.rst:2059
msgid ""
"Using ``None`` as a variable name will now result in a :exc:`SyntaxWarning` "
"warning."
msgstr ""

# 3b6e392557cd4f7baaa24483a0bd3944
#: whatsnew/2.3.rst:2062
msgid ""
"Names of extension types defined by the modules included with Python now "
"contain the module and a ``'.'`` in front of the type name."
msgstr ""

# cab5c7052e6941678cb2b150a03bb66a
#: whatsnew/2.3.rst:2073
msgid ""
"The author would like to thank the following people for offering "
"suggestions, corrections and assistance with various drafts of this article: "
"Jeff Bauer, Simon Brunning, Brett Cannon, Michael Chermside, Andrew Dalke, "
"Scott David Daniels, Fred L. Drake, Jr., David Fraser,  Kelly Gerber, "
"Raymond Hettinger, Michael Hudson, Chris Lambert, Detlef Lannert, Martin von "
"Löwis, Andrew MacIntyre, Lalo Martins, Chad Netzer, Gustavo Niemeyer, Neal "
"Norwitz, Hans Nowak, Chris Reedy, Francesco Ricciardi, Vinay Sajip, Neil "
"Schemenauer, Roman Suzi, Jason Tishler, Just van Rossum."
msgstr ""

# 0e69821ae2fa4edf8a892a2655eed90f
#: whatsnew/2.4.rst:3
#, fuzzy
msgid "What's New in Python 2.4"
msgstr "Nouveautés de Python 2.0"

# ef6e35bede0342c8922eda5c1792b7ee
#: whatsnew/2.4.rst:14
msgid ""
"This article explains the new features in Python 2.4.1, released on March "
"30, 2005."
msgstr ""

# 25e865f201234f4aa0142f6ec3d9bbc3
#: whatsnew/2.4.rst:17
msgid ""
"Python 2.4 is a medium-sized release.  It doesn't introduce as many changes "
"as the radical Python 2.2, but introduces more features than the "
"conservative 2.3 release.  The most significant new language features are "
"function decorators and generator expressions; most other changes are to the "
"standard library."
msgstr ""

# 9946a58c067a446dbba5c8c0dd07c8a7
#: whatsnew/2.4.rst:22
msgid ""
"According to the CVS change logs, there were 481 patches applied and 502 "
"bugs fixed between Python 2.3 and 2.4.  Both figures are likely to be "
"underestimates."
msgstr ""

# 28362849762a43b59254065a6559c8e3
#: whatsnew/2.4.rst:25
msgid ""
"This article doesn't attempt to provide a complete specification of every "
"single new feature, but instead provides a brief introduction to each "
"feature.  For full details, you should refer to the documentation for Python "
"2.4, such as the Python Library Reference and the Python Reference Manual.  "
"Often you will be referred to the PEP for a particular new feature for "
"explanations of the implementation and design rationale."
msgstr ""

# 38fad7fb78b644b9bd1f14642a560401
#: whatsnew/2.4.rst:36
msgid "PEP 218: Built-In Set Objects"
msgstr ""

# 1119df2ad7644388b64cc50eaf8a0177
#: whatsnew/2.4.rst:38
msgid ""
"Python 2.3 introduced the :mod:`sets` module.  C implementations of set data "
"types have now been added to the Python core as two new built-in types, :"
"func:`set(iterable)` and :func:`frozenset(iterable)`.  They provide high "
"speed operations for membership testing, for eliminating duplicates from "
"sequences, and for mathematical operations like unions, intersections, "
"differences, and symmetric differences. ::"
msgstr ""

# f636a1c4d2fe405fb879808f66a5c57c
#: whatsnew/2.4.rst:71
msgid ""
"The :func:`frozenset` type is an immutable version of :func:`set`. Since it "
"is immutable and hashable, it may be used as a dictionary key or as a member "
"of another set."
msgstr ""

# 42843b951e7f442b9cfb3bb965208c67
#: whatsnew/2.4.rst:75
msgid ""
"The :mod:`sets` module remains in the standard library, and may be useful if "
"you wish to subclass the :class:`Set` or :class:`ImmutableSet` classes.  "
"There are currently no plans to deprecate the module."
msgstr ""

# 797c2fe6f0d84637b072e723517d751d
#: whatsnew/2.4.rst:83
msgid ""
"Originally proposed by Greg Wilson and ultimately implemented by Raymond "
"Hettinger."
msgstr ""

# 79d920a5f34b41c7846244450442053e
#: whatsnew/2.4.rst:92
msgid ""
"The lengthy transition process for this PEP, begun in Python 2.2, takes "
"another step forward in Python 2.4.  In 2.3, certain integer operations that "
"would behave differently after int/long unification triggered :exc:"
"`FutureWarning` warnings and returned values limited to 32 or 64 bits "
"(depending on your platform).  In 2.4, these expressions no longer produce a "
"warning and instead produce a different result that's usually a long integer."
msgstr ""

# fbf979522084441bb97e236460c492a3
#: whatsnew/2.4.rst:99
msgid ""
"The problematic expressions are primarily left shifts and lengthy "
"hexadecimal and octal constants.  For example, ``2 << 32`` results in a "
"warning in 2.3, evaluating to 0 on 32-bit platforms.  In Python 2.4, this "
"expression now returns the correct answer, 8589934592."
msgstr ""

# 918d4fb224e24c099ce7fb2b1a4fbf40
#: whatsnew/2.4.rst:108
msgid ""
"Original PEP written by Moshe Zadka and GvR.  The changes for 2.4 were "
"implemented by  Kalle Svensson."
msgstr ""

# 80dd1e6529cc4c4fae096b64c631314e
#: whatsnew/2.4.rst:115
msgid "PEP 289: Generator Expressions"
msgstr ""

# e68aaeb6ea9a4a9ab623f991d07e0b7d
#: whatsnew/2.4.rst:117
msgid ""
"The iterator feature introduced in Python 2.2 and the :mod:`itertools` "
"module make it easier to write programs that loop through large data sets "
"without having the entire data set in memory at one time.  List "
"comprehensions don't fit into this picture very well because they produce a "
"Python list object containing all of the items.  This unavoidably pulls all "
"of the objects into memory, which can be a problem if your data set is very "
"large.  When trying to write a functionally-styled program, it would be "
"natural to write something like::"
msgstr ""

# a96115a6b25d4f92b7e422797728a465
#: whatsnew/2.4.rst:129
msgid "instead of  ::"
msgstr ""

# c41ee36489a94803a528a8a70670e426
#: whatsnew/2.4.rst:136
msgid ""
"The first form is more concise and perhaps more readable, but if you're "
"dealing with a large number of link objects you'd have to write the second "
"form to avoid having all link objects in memory at the same time."
msgstr ""

# 2f85220d01a94849b6bbc4992e6e37b0
#: whatsnew/2.4.rst:140
msgid ""
"Generator expressions work similarly to list comprehensions but don't "
"materialize the entire list; instead they create a generator that will "
"return elements one by one.  The above example could be written as::"
msgstr ""

# 52b8904691db41ffa3bff73ab8f70aa5
#: whatsnew/2.4.rst:148
msgid ""
"Generator expressions always have to be written inside parentheses, as in "
"the above example.  The parentheses signalling a function call also count, "
"so if you want to create an iterator that will be immediately passed to a "
"function you could write::"
msgstr ""

# 24adcf0b3326497da185ada696df2032
#: whatsnew/2.4.rst:155
msgid ""
"Generator expressions differ from list comprehensions in various small ways. "
"Most notably, the loop variable (*obj* in the above example) is not "
"accessible outside of the generator expression.  List comprehensions leave "
"the variable assigned to its last value; future versions of Python will "
"change this, making list comprehensions match generator expressions in this "
"respect."
msgstr ""

#: whatsnew/2.4.rst:165
msgid "PEP 289 - Generator Expressions"
msgstr ""

# b4f3c7d4d531453eb72f47d857f13912
#: whatsnew/2.4.rst:165
msgid ""
"Proposed by Raymond Hettinger and implemented by Jiwon Seo with early "
"efforts steered by Hye-Shik Chang."
msgstr ""

# 3a1794d7b13b4bddba0e1ff0b4a0be28
#: whatsnew/2.4.rst:172
msgid "PEP 292: Simpler String Substitutions"
msgstr ""

# bf97b7865bf54beb93289fff667b41ec
#: whatsnew/2.4.rst:174
msgid ""
"Some new classes in the standard library provide an alternative mechanism "
"for substituting variables into strings; this style of substitution may be "
"better for applications where untrained users need to edit templates."
msgstr ""

# feba349a39304b2da0aaeb1eff91906c
#: whatsnew/2.4.rst:178
msgid "The usual way of substituting variables by name is the ``%`` operator::"
msgstr ""

# 6409f93ae46e4f3390a953c34138c0ee
#: whatsnew/2.4.rst:183
msgid ""
"When writing the template string, it can be easy to forget the ``i`` or "
"``s`` after the closing parenthesis.  This isn't a big problem if the "
"template is in a Python module, because you run the code, get an "
"\"Unsupported format character\" :exc:`ValueError`, and fix the problem.  "
"However, consider an application such as Mailman where template strings or "
"translations are being edited by users who aren't aware of the Python "
"language.  The format string's syntax is complicated to explain to such "
"users, and if they make a mistake, it's difficult to provide helpful "
"feedback to them."
msgstr ""

# 4c38772058334d399cca5e0c3bf975b9
#: whatsnew/2.4.rst:192
msgid ""
"PEP 292 adds a :class:`Template` class to the :mod:`string` module that uses "
"``$`` to indicate a substitution::"
msgstr ""

# 51414a45f6e8451c86136440a0845e23
#: whatsnew/2.4.rst:200
msgid ""
"If a key is missing from the dictionary, the :meth:`substitute` method will "
"raise a :exc:`KeyError`.  There's also a :meth:`safe_substitute` method that "
"ignores missing keys::"
msgstr ""

#: whatsnew/2.4.rst:211
msgid "PEP 292 - Simpler String Substitutions"
msgstr ""

# 1f9e2fc03a354b7eaf387bc60f94d9a2
#: whatsnew/2.4.rst:212
msgid "Written and implemented  by Barry Warsaw."
msgstr ""

# 79d607f21685464c9a671eff082a342c
#: whatsnew/2.4.rst:218
msgid "PEP 318: Decorators for Functions and Methods"
msgstr ""

# 88abe354939c40a08013d4be8430360d
#: whatsnew/2.4.rst:220
msgid ""
"Python 2.2 extended Python's object model by adding static methods and class "
"methods, but it didn't extend Python's syntax to provide any new way of "
"defining static or class methods.  Instead, you had to write a :keyword:"
"`def` statement in the usual way, and pass the resulting method to a :func:"
"`staticmethod` or :func:`classmethod` function that would wrap up the "
"function as a method of the new type. Your code would look like this::"
msgstr ""

# 2a0b6b5354b14be0aa9e2d919fb0ab20
#: whatsnew/2.4.rst:233
msgid ""
"If the method was very long, it would be easy to miss or forget the :func:"
"`classmethod` invocation after the function body."
msgstr ""

# f563a2632e9740dfb4f31d47934e8c26
#: whatsnew/2.4.rst:236
msgid ""
"The intention was always to add some syntax to make such definitions more "
"readable, but at the time of 2.2's release a good syntax was not obvious.  "
"Today a good syntax *still* isn't obvious but users are asking for easier "
"access to the feature; a new syntactic feature has been added to meet this "
"need."
msgstr ""

# 558882cd52564f639cb11050110c374f
#: whatsnew/2.4.rst:241
msgid ""
"The new feature is called \"function decorators\".  The name comes from the "
"idea that :func:`classmethod`, :func:`staticmethod`, and friends are storing "
"additional information on a function object; they're *decorating* functions "
"with more details."
msgstr ""

# 230453f321a54d4aa4275686527855aa
#: whatsnew/2.4.rst:246
msgid ""
"The notation borrows from Java and uses the ``'@'`` character as an "
"indicator. Using the new syntax, the example above would be written::"
msgstr ""

# 35b82aebfbad46229de9e6f0707bb9eb
#: whatsnew/2.4.rst:256
msgid ""
"The ``@classmethod`` is shorthand for the ``meth=classmethod(meth)`` "
"assignment. More generally, if you have the following::"
msgstr ""

# dd6d210b2cbe47a3a070bc2674c3974a
#: whatsnew/2.4.rst:265
msgid "It's equivalent to the following pre-decorator code::"
msgstr ""

# cc989b11f2cb470b90954262c6e8f25a
#: whatsnew/2.4.rst:270
msgid ""
"Decorators must come on the line before a function definition, one decorator "
"per line, and can't be on the same line as the def statement, meaning that "
"``@A def f(): ...`` is illegal.  You can only decorate function definitions, "
"either at the module level or inside a class; you can't decorate class "
"definitions."
msgstr ""

# 1efc7bb745da42f4bea8656905f72b7c
#: whatsnew/2.4.rst:275
msgid ""
"A decorator is just a function that takes the function to be decorated as an "
"argument and returns either the same function or some new object.  The "
"return value of the decorator need not be callable (though it typically is), "
"unless further decorators will be applied to the result.  It's easy to write "
"your own decorators.  The following simple example just sets an attribute on "
"the function object::"
msgstr ""

# 0ec3be082b0141be95bea26dfda90a33
#: whatsnew/2.4.rst:295
msgid ""
"As a slightly more realistic example, the following decorator checks that "
"the supplied argument is an integer::"
msgstr ""

# 9f0b9b1452f74851b36f24d93f703953
#: whatsnew/2.4.rst:313
msgid ""
"An example in :pep:`318` contains a fancier version of this idea that lets "
"you both specify the required type and check the returned type."
msgstr ""

# 69024e2371b543a8a7a4a67db7fbb3c8
#: whatsnew/2.4.rst:316
msgid ""
"Decorator functions can take arguments.  If arguments are supplied, your "
"decorator function is called with only those arguments and must return a new "
"decorator function; this function must take a single function and return a "
"function, as previously described.  In other words, ``@A @B @C(args)`` "
"becomes::"
msgstr ""

# 8692f04c57cc4734974ba5a91a88b113
#: whatsnew/2.4.rst:325
msgid ""
"Getting this right can be slightly brain-bending, but it's not too difficult."
msgstr ""

# ba78bd06a15c4a678a2421453bf77588
#: whatsnew/2.4.rst:327
msgid ""
"A small related change makes the :attr:`func_name` attribute of functions "
"writable.  This attribute is used to display function names in tracebacks, "
"so decorators should change the name of any new function that's constructed "
"and returned."
msgstr ""

#: whatsnew/2.4.rst:338
msgid "PEP 318 - Decorators for Functions, Methods and Classes"
msgstr ""

# fff236102b2041edb78fbfb466ede618
#: whatsnew/2.4.rst:336
msgid ""
"Written  by Kevin D. Smith, Jim Jewett, and Skip Montanaro.  Several people "
"wrote patches implementing function decorators, but the one that was "
"actually checked in was patch #979728, written by Mark Russell."
msgstr ""

# 1238cf29717148f28a02f662acdadf50
#: whatsnew/2.4.rst:340
msgid "http://www.python.org/moin/PythonDecoratorLibrary"
msgstr ""

# 83b393915aae416397be282907f153ef
#: whatsnew/2.4.rst:341
msgid "This Wiki page contains several examples of decorators."
msgstr ""

# 3d05af4197f8458bacaf8d3df2a50a1e
#: whatsnew/2.4.rst:347
msgid "PEP 322: Reverse Iteration"
msgstr ""

# 759df0e958414a1887b8a21afa13613e
#: whatsnew/2.4.rst:349
msgid ""
"A new built-in function, :func:`reversed(seq)`, takes a sequence and returns "
"an iterator that loops over the elements of the sequence  in reverse "
"order.   ::"
msgstr ""

# 64001693646144478fe5f9f639991c3f
#: whatsnew/2.4.rst:359
msgid ""
"Compared to extended slicing, such as ``range(1,4)[::-1]``, :func:`reversed` "
"is easier to read, runs faster, and uses substantially less memory."
msgstr ""

# a4e81a29f85c470b84d1ff6b6dde8d7a
#: whatsnew/2.4.rst:362
msgid ""
"Note that :func:`reversed` only accepts sequences, not arbitrary iterators.  "
"If you want to reverse an iterator, first convert it to  a list with :func:"
"`list`. ::"
msgstr ""

#: whatsnew/2.4.rst:376
msgid "PEP 322 - Reverse Iteration"
msgstr ""

# 44e0ea70a5e74f0a8c01dcecce9864a3
#: whatsnew/2.4.rst:377
msgid "Written and implemented by Raymond Hettinger."
msgstr ""

# 4e78fd6b89b54726874c52e0f44dda51
#: whatsnew/2.4.rst:383
msgid "PEP 324: New subprocess Module"
msgstr ""

# 19dd8e96186a41b38e4e266f26b3f405
#: whatsnew/2.4.rst:385
msgid ""
"The standard library provides a number of ways to execute a subprocess, "
"offering different features and different levels of complexity. :func:`os."
"system(command)` is easy to use, but slow (it runs a shell process which "
"executes the command) and dangerous (you have to be careful about escaping "
"the shell's metacharacters).  The :mod:`popen2` module offers classes that "
"can capture standard output and standard error from the subprocess, but the "
"naming is confusing.  The :mod:`subprocess` module cleans  this up, "
"providing a unified interface that offers all the features you might need."
msgstr ""

# dd43f8b820a14bfcacb8529010c2df12
#: whatsnew/2.4.rst:394
msgid ""
"Instead of :mod:`popen2`'s collection of classes, :mod:`subprocess` contains "
"a single class called :class:`Popen`  whose constructor supports a number of "
"different keyword arguments. ::"
msgstr ""

# 6b6d025380ae4d9782734258d65157d6
#: whatsnew/2.4.rst:404
msgid ""
"*args* is commonly a sequence of strings that will be the arguments to the "
"program executed as the subprocess.  (If the *shell* argument is true, "
"*args* can be a string which will then be passed on to the shell for "
"interpretation, just as :func:`os.system` does.)"
msgstr ""

# 4bf59a94baae4b629d34fc25d9d1517a
#: whatsnew/2.4.rst:409
msgid ""
"*stdin*, *stdout*, and *stderr* specify what the subprocess's input, output, "
"and error streams will be.  You can provide a file object or a file "
"descriptor, or you can use the constant ``subprocess.PIPE`` to create a pipe "
"between the subprocess and the parent."
msgstr ""

# 8dd0c5348ab141c5bd885d24925ad5f4
#: whatsnew/2.4.rst:417
msgid "The constructor has a number of handy options:"
msgstr ""

# c2dabf81306f48febb19f92896b85931
#: whatsnew/2.4.rst:419
msgid ""
"*close_fds* requests that all file descriptors be closed before running the "
"subprocess."
msgstr ""

# 8d35658065bd486aaed8d9c4f03085ac
#: whatsnew/2.4.rst:422
msgid ""
"*cwd* specifies the working directory in which the subprocess will be "
"executed (defaulting to whatever the parent's working directory is)."
msgstr ""

# ac47ce2eef9540ce9f6584f98b4e8304
#: whatsnew/2.4.rst:425
msgid "*env* is a dictionary specifying environment variables."
msgstr ""

# 716234111a32408086de5b78fedef1a1
#: whatsnew/2.4.rst:427
msgid ""
"*preexec_fn* is a function that gets called before the child is started."
msgstr ""

# 9aaceb8bfe3542069cda32785eab3b92
#: whatsnew/2.4.rst:429
msgid ""
"*universal_newlines* opens the child's input and output using Python's :term:"
"`universal newlines` feature."
msgstr ""

# f6996778929a46bb975d8550ce45b807
#: whatsnew/2.4.rst:432
msgid ""
"Once you've created the :class:`Popen` instance,  you can call its :meth:"
"`wait` method to pause until the subprocess has exited, :meth:`poll` to "
"check if it's exited without pausing,  or :meth:`communicate(data)` to send "
"the string *data* to the subprocess's standard input.   :meth:"
"`communicate(data)`  then reads any data that the subprocess has sent to its "
"standard output  or standard error, returning a tuple ``(stdout_data, "
"stderr_data)``."
msgstr ""

# 5eedf36e741b4699b69a0ed6351f9708
#: whatsnew/2.4.rst:439
msgid ""
":func:`call` is a shortcut that passes its arguments along to the :class:"
"`Popen` constructor, waits for the command to complete, and returns the "
"status code of the subprocess.  It can serve as a safer analog to :func:`os."
"system`::"
msgstr ""

# 21f6f3ab2c58469a8f900054f3aff12d
#: whatsnew/2.4.rst:451
msgid ""
"The command is invoked without use of the shell.  If you really do want to  "
"use the shell, you can add ``shell=True`` as a keyword argument and provide "
"a string instead of a sequence::"
msgstr ""

# 15b4dfcce7574cda99695fffbb185bfe
#: whatsnew/2.4.rst:457
msgid ""
"The PEP takes various examples of shell and Python code and shows how they'd "
"be translated into Python code that uses :mod:`subprocess`.  Reading this "
"section of the PEP is highly recommended."
msgstr ""

#: whatsnew/2.4.rst:465
msgid "PEP 324 - subprocess - New process module"
msgstr ""

# c287745c339440c89c9d799349b906aa
#: whatsnew/2.4.rst:465
msgid ""
"Written and implemented by Peter Åstrand, with assistance from Fredrik Lundh "
"and others."
msgstr ""

# b1074b0b80514ce6b779e941222ecf90
#: whatsnew/2.4.rst:472
msgid "PEP 327: Decimal Data Type"
msgstr ""

# 9f664f88ff704f5b840a6f208fd61c3b
#: whatsnew/2.4.rst:474
msgid ""
"Python has always supported floating-point (FP) numbers, based on the "
"underlying C :c:type:`double` type, as a data type.  However, while most "
"programming languages provide a floating-point type, many people (even "
"programmers) are unaware that floating-point numbers don't represent certain "
"decimal fractions accurately.  The new :class:`Decimal` type can represent "
"these fractions accurately, up to a user-specified precision limit."
msgstr ""

# 90b5681dff4f43c88ce1606cf9cc11fc
#: whatsnew/2.4.rst:483
msgid "Why is Decimal needed?"
msgstr ""

# 21eb4eb4ea5c45378e37687972a08629
#: whatsnew/2.4.rst:485
msgid ""
"The limitations arise from the representation used for floating-point "
"numbers. FP numbers are made up of three components:"
msgstr ""

# 2b81abcff76e43919241f975ea89ed44
#: whatsnew/2.4.rst:488
msgid "The sign, which is positive or negative."
msgstr ""

# 29a76069186b45a693e92d4d58469145
#: whatsnew/2.4.rst:490
msgid ""
"The mantissa, which is a single-digit binary number   followed by a "
"fractional part.  For example, ``1.01`` in base-2 notation is ``1 + 0/2 + "
"1/4``, or 1.25 in decimal notation."
msgstr ""

# 77e18a2a45f44b9a9344d36db9752c30
#: whatsnew/2.4.rst:494
msgid ""
"The exponent, which tells where the decimal point is located in the number "
"represented."
msgstr ""

# f85d347d04c8466c91b9619fa3ef095f
#: whatsnew/2.4.rst:497
msgid ""
"For example, the number 1.25 has positive sign, a mantissa value of 1.01 (in "
"binary), and an exponent of 0 (the decimal point doesn't need to be "
"shifted). The number 5 has the same sign and mantissa, but the exponent is 2 "
"because the mantissa is multiplied by 4 (2 to the power of the exponent 2); "
"1.25 \\* 4 equals 5."
msgstr ""

# 3493a88cd2784b3db688885dad5c3801
#: whatsnew/2.4.rst:503
msgid ""
"Modern systems usually provide floating-point support that conforms to a "
"standard called IEEE 754.  C's :c:type:`double` type is usually implemented "
"as a 64-bit IEEE 754 number, which uses 52 bits of space for the mantissa.  "
"This means that numbers can only be specified to 52 bits of precision.  If "
"you're trying to represent numbers whose expansion repeats endlessly, the "
"expansion is cut off after 52 bits. Unfortunately, most software needs to "
"produce output in base 10, and common fractions in base 10 are often "
"repeating decimals in binary. For example, 1.1 decimal is binary "
"``1.0001100110011 ...``; .1 = 1/16 + 1/32 + 1/256 plus an infinite number of "
"additional terms.  IEEE 754 has to chop off that infinitely repeated decimal "
"after 52 digits, so the representation is slightly inaccurate."
msgstr ""

# c49883db148d42dd806376945d323488
#: whatsnew/2.4.rst:515
msgid "Sometimes you can see this inaccuracy when the number is printed::"
msgstr ""

# 701ccfffc5cb4ecaaa30c8fa18f52376
#: whatsnew/2.4.rst:520
msgid ""
"The inaccuracy isn't always visible when you print the number because the FP-"
"to- decimal-string conversion is provided by the C library, and most C "
"libraries try to produce sensible output.  Even if it's not displayed, "
"however, the inaccuracy is still there and subsequent operations can magnify "
"the error."
msgstr ""

# 9901ceb5682847b7a74bd6a0bac9523a
#: whatsnew/2.4.rst:525
msgid ""
"For many applications this doesn't matter.  If I'm plotting points and "
"displaying them on my monitor, the difference between 1.1 and "
"1.1000000000000001 is too small to be visible.  Reports often limit output "
"to a certain number of decimal places, and if you round the number to two or "
"three or even eight decimal places, the error is never apparent.  However, "
"for applications where it does matter,  it's a lot of work to implement your "
"own custom arithmetic routines."
msgstr ""

# f715bfc3b60c4678838ef0d6fd39d7ea
#: whatsnew/2.4.rst:533
msgid "Hence, the :class:`Decimal` type was created."
msgstr ""

# 90266eff70f74d48a90624ac397c1461
#: whatsnew/2.4.rst:537
msgid "The :class:`Decimal` type"
msgstr ""

# 36035c61f0a247c98378ebb6a4b74faf
#: whatsnew/2.4.rst:539
msgid ""
"A new module, :mod:`decimal`, was added to Python's standard library.  It "
"contains two classes, :class:`Decimal` and :class:`Context`.  :class:"
"`Decimal` instances represent numbers, and :class:`Context` instances are "
"used to wrap up various settings such as the precision and default rounding "
"mode."
msgstr ""

# bede4dc0474846c1b5fc029afb355026
#: whatsnew/2.4.rst:544
msgid ""
":class:`Decimal` instances are immutable, like regular Python integers and "
"FP numbers; once it's been created, you can't change the value an instance "
"represents.  :class:`Decimal` instances can be created from integers or "
"strings::"
msgstr ""

# 6ae56a6be70c4cf58e0535ba2963145d
#: whatsnew/2.4.rst:555
msgid ""
"You can also provide tuples containing the sign, the mantissa represented  "
"as a tuple of decimal digits, and the exponent::"
msgstr ""

# 1b4d1742e6c148509a01ed1ba0ded4aa
#: whatsnew/2.4.rst:561
msgid ""
"Cautionary note: the sign bit is a Boolean value, so 0 is positive and 1 is "
"negative."
msgstr ""

# b4f6b37dc5294893a9b9082068fc120d
#: whatsnew/2.4.rst:564
msgid ""
"Converting from floating-point numbers poses a bit of a problem: should the "
"FP number representing 1.1 turn into the decimal number for exactly 1.1, or "
"for 1.1 plus whatever inaccuracies are introduced? The decision was to dodge "
"the issue and leave such a conversion out of the API.  Instead, you should "
"convert the floating-point number into a string using the desired precision "
"and pass the string to the :class:`Decimal` constructor::"
msgstr ""

# 15cb6116fe0348288af0ac38370f07bc
#: whatsnew/2.4.rst:577
msgid ""
"Once you have :class:`Decimal` instances, you can perform the usual "
"mathematical operations on them.  One limitation: exponentiation requires an "
"integer exponent::"
msgstr ""

# 8cf055dc7ff44275a593ebf446083e3f
#: whatsnew/2.4.rst:598
msgid ""
"You can combine :class:`Decimal` instances with integers, but not with "
"floating- point numbers::"
msgstr ""

# 7e941288020242edb52a8abd0cffd33b
#: whatsnew/2.4.rst:609
msgid ""
":class:`Decimal` numbers can be used with the :mod:`math` and :mod:`cmath` "
"modules, but note that they'll be immediately converted to  floating-point "
"numbers before the operation is performed, resulting in a possible loss of "
"precision and accuracy.  You'll also get back a regular floating-point "
"number and not a :class:`Decimal`.   ::"
msgstr ""

# 4170170d87ae43689eb16fa5559b1421
#: whatsnew/2.4.rst:622
msgid ""
":class:`Decimal` instances have a :meth:`sqrt` method that returns a :class:"
"`Decimal`, but if you need other things such as trigonometric functions "
"you'll have to implement them. ::"
msgstr ""

# 6f9381ecdf3446bd8993c1084d0d3347
#: whatsnew/2.4.rst:631
msgid "The :class:`Context` type"
msgstr ""

# 3dde83afef5f41c5a2a59d04df226f4e
#: whatsnew/2.4.rst:633
msgid ""
"Instances of the :class:`Context` class encapsulate several settings for "
"decimal operations:"
msgstr ""

# 05773a85f5f2442aa0c6eca10880eaff
#: whatsnew/2.4.rst:636
msgid ":attr:`prec` is the precision, the number of decimal places."
msgstr ""

# d343280de2594998a0588633a17cdbad
#: whatsnew/2.4.rst:638
msgid ""
":attr:`rounding` specifies the rounding mode.  The :mod:`decimal` module has "
"constants for the various possibilities: :const:`ROUND_DOWN`, :const:"
"`ROUND_CEILING`,  :const:`ROUND_HALF_EVEN`, and various others."
msgstr ""

# 376ec6372f9d49fa8628e3c34967820a
#: whatsnew/2.4.rst:642
msgid ""
":attr:`traps` is a dictionary specifying what happens on encountering "
"certain error conditions: either  an exception is raised or  a value is "
"returned.  Some examples of error conditions are division by zero, loss of "
"precision, and overflow."
msgstr ""

# 60417ff21a1844ce8ca5f7d7dcfef460
#: whatsnew/2.4.rst:647
msgid ""
"There's a thread-local default context available by calling :func:"
"`getcontext`; you can change the properties of this context to alter the "
"default precision, rounding, or trap handling.  The following example shows "
"the effect of changing the precision of the default context::"
msgstr ""

# 64d839d46c0f4fcca27175a11343f782
#: whatsnew/2.4.rst:660
msgid ""
"The default action for error conditions is selectable; the module can either "
"return a special value such as infinity or not-a-number, or exceptions can "
"be raised::"
msgstr ""

# 9f8a95e2e24242298a266376a934e834
#: whatsnew/2.4.rst:673
msgid ""
"The :class:`Context` instance also has various methods for formatting  "
"numbers such as :meth:`to_eng_string` and :meth:`to_sci_string`."
msgstr ""

# f5b43563c1324855a74ea4f1db8b309a
#: whatsnew/2.4.rst:676
msgid ""
"For more information, see the documentation for the :mod:`decimal` module, "
"which includes a quick-start tutorial and a reference."
msgstr ""

#: whatsnew/2.4.rst:684
msgid "PEP 327 - Decimal Data Type"
msgstr ""

# e7318bb3a7994dcf9cce3acf56360bb7
#: whatsnew/2.4.rst:683
msgid ""
"Written by Facundo Batista and implemented by Facundo Batista, Eric Price, "
"Raymond Hettinger, Aahz, and Tim Peters."
msgstr ""

# d0462baf6dd44287a38919e24766ddb7
#: whatsnew/2.4.rst:688
msgid "http://www.lahey.com/float.htm"
msgstr ""

# cb86660271be4e1ead81028f924b3ce7
#: whatsnew/2.4.rst:687
msgid ""
"The article uses Fortran code to illustrate many of the problems that "
"floating- point inaccuracy can cause."
msgstr ""

# b8cffe880f374c05b9066e30d2430ee8
#: whatsnew/2.4.rst:692
msgid "http://www2.hursley.ibm.com/decimal/"
msgstr ""

# 237b0d4d1527414c85be8634a304b196
#: whatsnew/2.4.rst:691
msgid ""
"A description of a decimal-based representation.  This representation is "
"being proposed as a standard, and underlies the new Python decimal type.  "
"Much of this material was written by Mike Cowlishaw, designer of the Rexx "
"language."
msgstr ""

# 68dad71bb6e246fd8a3be6dafa1cdb0c
#: whatsnew/2.4.rst:699
msgid "PEP 328: Multi-line Imports"
msgstr ""

# e348805ab93740c8a583df01a53aa2f4
#: whatsnew/2.4.rst:701
msgid ""
"One language change is a small syntactic tweak aimed at making it easier to "
"import many names from a module.  In a ``from module import names`` "
"statement, *names* is a sequence of names separated by commas.  If the "
"sequence is  very long, you can either write multiple imports from the same "
"module, or you can use backslashes to escape the line endings like this::"
msgstr ""

# 2a2cfc81acd446a88e2c198a62ca42af
#: whatsnew/2.4.rst:712
msgid ""
"The syntactic change in Python 2.4 simply allows putting the names within "
"parentheses.  Python ignores newlines within a parenthesized expression, so "
"the backslashes are no longer needed::"
msgstr ""

# d83d0ba7cedf4e9c9f18e848617efc2c
#: whatsnew/2.4.rst:721
msgid ""
"The PEP also proposes that all :keyword:`import` statements be absolute "
"imports, with a leading ``.`` character to indicate a relative import.  This "
"part of the PEP was not implemented for Python 2.4, but was completed for "
"Python 2.5."
msgstr ""

#: whatsnew/2.4.rst:728 whatsnew/2.5.rst:331
msgid "PEP 328 - Imports: Multi-Line and Absolute/Relative"
msgstr ""

# 5ee909541e454ee69e54717f53412104
#: whatsnew/2.4.rst:729
msgid "Written by Aahz.  Multi-line imports were implemented by Dima Dorfman."
msgstr ""

# 651550a532fd4fd3bf297d771812c502
#: whatsnew/2.4.rst:735
msgid "PEP 331: Locale-Independent Float/String Conversions"
msgstr ""

# 22af5eb0f11240a097244b37598ef708
#: whatsnew/2.4.rst:737
msgid ""
"The :mod:`locale` modules lets Python software select various conversions "
"and display conventions that are localized to a particular country or "
"language. However, the module was careful to not change the numeric locale "
"because various functions in Python's implementation required that the "
"numeric locale remain set to the ``'C'`` locale.  Often this was because the "
"code was using the C library's :c:func:`atof` function."
msgstr ""

# e1065bfdb5104de881830ed6652d0e02
#: whatsnew/2.4.rst:744
msgid ""
"Not setting the numeric locale caused trouble for extensions that used "
"third- party C libraries, however, because they wouldn't have the correct "
"locale set. The motivating example was GTK+, whose user interface widgets "
"weren't displaying numbers in the current locale."
msgstr ""

# 37844047b5ea48feb6527090e80533b2
#: whatsnew/2.4.rst:749
msgid ""
"The solution described in the PEP is to add three new functions to the "
"Python API that perform ASCII-only conversions, ignoring the locale setting:"
msgstr ""

# c751cf017aff41c3bd972bb587358462
#: whatsnew/2.4.rst:752
msgid ""
":c:func:`PyOS_ascii_strtod(str, ptr)`  and :c:func:`PyOS_ascii_atof(str, "
"ptr)` both convert a string to a C :c:type:`double`."
msgstr ""

# fde87529c40e45479ea56d871bb11384
#: whatsnew/2.4.rst:755
msgid ""
":c:func:`PyOS_ascii_formatd(buffer, buf_len, format, d)` converts a :c:type:"
"`double` to an ASCII string."
msgstr ""

# 9cff06eb895148b4baf83bba5fa7098a
#: whatsnew/2.4.rst:758
msgid ""
"The code for these functions came from the GLib library (http://library."
"gnome.org/devel/glib/stable/), whose developers kindly relicensed the "
"relevant functions and donated them to the Python Software Foundation.  The :"
"mod:`locale` module  can now change the numeric locale, letting extensions "
"such as GTK+  produce the correct results."
msgstr ""

#: whatsnew/2.4.rst:767
msgid "PEP 331 - Locale-Independent Float/String Conversions"
msgstr ""

# cac99995dc414721ac0f9839cf690cc2
#: whatsnew/2.4.rst:768
msgid "Written by Christian R. Reis, and implemented by Gustavo Carneiro."
msgstr ""

# 98da2aa024444dfdb35e351ec9ecfa02
#: whatsnew/2.4.rst:776
msgid ""
"Here are all of the changes that Python 2.4 makes to the core Python "
"language."
msgstr ""

# a56a43902e5c4c9e80c197d76668592d
#: whatsnew/2.4.rst:778
msgid "Decorators for functions and methods were added (:pep:`318`)."
msgstr ""

# 26bb4ef01bae4921a9f9724ecfbc4ea8
#: whatsnew/2.4.rst:780
msgid ""
"Built-in :func:`set` and :func:`frozenset` types were  added (:pep:`218`). "
"Other new built-ins include the :func:`reversed(seq)` function (:pep:`322`)."
msgstr ""

# 9eb02937895841829014ffcd76e75ebf
#: whatsnew/2.4.rst:783
msgid "Generator expressions were added (:pep:`289`)."
msgstr ""

# 81fc2a65f69f40c1bc52d9e4b47fb53d
#: whatsnew/2.4.rst:785
msgid ""
"Certain numeric expressions no longer return values restricted to 32 or 64 "
"bits (:pep:`237`)."
msgstr ""

# f00fc48a53ea423680f459617c1cb05a
#: whatsnew/2.4.rst:788
msgid ""
"You can now put parentheses around the list of names in a ``from module "
"import names`` statement (:pep:`328`)."
msgstr ""

# 17f4ef8934ea4554869fc9660bd4acb2
#: whatsnew/2.4.rst:791
msgid ""
"The :meth:`dict.update` method now accepts the same argument forms as the :"
"class:`dict` constructor.  This includes any mapping, any iterable of key/"
"value pairs, and keyword arguments. (Contributed by Raymond Hettinger.)"
msgstr ""

# 8d571fffbb5f4b72bd9cda953bcc395f
#: whatsnew/2.4.rst:795
msgid ""
"The string methods :meth:`ljust`, :meth:`rjust`, and :meth:`center` now take "
"an optional argument for specifying a fill character other than a space. "
"(Contributed by Raymond Hettinger.)"
msgstr ""

# 7362c486c80d47b8832e5ac444e8ffd1
#: whatsnew/2.4.rst:799
msgid ""
"Strings also gained an :meth:`rsplit` method that works like the :meth:"
"`split` method but splits from the end of the string.   (Contributed by Sean "
"Reifschneider.) ::"
msgstr ""

# 686713fcb14c4ba2b2f6f96c3924a4b9
#: whatsnew/2.4.rst:808
msgid ""
"Three keyword parameters, *cmp*, *key*, and *reverse*, were added to the :"
"meth:`sort` method of lists. These parameters make some common usages of :"
"meth:`sort` simpler. All of these parameters are optional."
msgstr ""

# f0b1e1bd17c8486982d998419c9aee7c
#: whatsnew/2.4.rst:812
msgid ""
"For the *cmp* parameter, the value should be a comparison function that "
"takes two parameters and returns -1, 0, or +1 depending on how the "
"parameters compare. This function will then be used to sort the list.  "
"Previously this was the only parameter that could be provided to :meth:"
"`sort`."
msgstr ""

# d22ed7cffe4a4fe1b64991cc61cc1985
#: whatsnew/2.4.rst:817
msgid ""
"*key* should be a single-parameter function that takes a list element and "
"returns a comparison key for the element.  The list is then sorted using the "
"comparison keys.  The following example sorts a list case-insensitively::"
msgstr ""

# 8c1f19b9c48e41d9a9127daa957901de
#: whatsnew/2.4.rst:834
msgid ""
"The last example, which uses the *cmp* parameter, is the old way to perform "
"a case-insensitive sort.  It works but is slower than using a *key* "
"parameter. Using *key* calls :meth:`lower` method once for each element in "
"the list while using *cmp* will call it twice for each comparison, so using "
"*key* saves on invocations of the :meth:`lower` method."
msgstr ""

# 35adc93c1fac416ab2f6bfd8407ea737
#: whatsnew/2.4.rst:840
msgid ""
"For simple key functions and comparison functions, it is often possible to "
"avoid a :keyword:`lambda` expression by using an unbound method instead.  "
"For example, the above case-insensitive sort is best written as::"
msgstr ""

# 2132e45ce8734e91b05dbca24b1391af
#: whatsnew/2.4.rst:848
msgid ""
"Finally, the *reverse* parameter takes a Boolean value.  If the value is "
"true, the list will be sorted into reverse order. Instead of ``L.sort() ; L."
"reverse()``, you can now write ``L.sort(reverse=True)``."
msgstr ""

# 6a8a79b1aa834a71af349497389fe041
#: whatsnew/2.4.rst:852
msgid ""
"The results of sorting are now guaranteed to be stable.  This means that two "
"entries with equal keys will be returned in the same order as they were "
"input. For example, you can sort a list of people by name, and then sort the "
"list by age, resulting in a list sorted by age where people with the same "
"age are in name-sorted order."
msgstr ""

# e26f9082e91c42af97c22e6af3205453
#: whatsnew/2.4.rst:858
msgid "(All changes to :meth:`sort` contributed by Raymond Hettinger.)"
msgstr ""

# f187bc2efb4749a786b2684cae8392f1
#: whatsnew/2.4.rst:860
msgid ""
"There is a new built-in function :func:`sorted(iterable)` that works like "
"the in-place :meth:`list.sort` method but can be used in expressions.  The "
"differences are:"
msgstr ""

# 62a7a979642947f0be5123c8249864f9
#: whatsnew/2.4.rst:864
msgid "the input may be any iterable;"
msgstr ""

# bd839e103914475fab646ab2aa32439c
#: whatsnew/2.4.rst:866
msgid "a newly formed copy is sorted, leaving the original intact; and"
msgstr ""

# 089b56a9d2804f4cb84310227ab70205
#: whatsnew/2.4.rst:868
msgid "the expression returns the new sorted copy"
msgstr ""

# f87ef2527c1c4d688e6021f6eb2c1cf2
# a500af1fe1184934a728bac86b41fd93
#: whatsnew/2.4.rst:893 whatsnew/2.4.rst:1517
msgid ""
"Integer operations will no longer trigger an :exc:`OverflowWarning`. The :"
"exc:`OverflowWarning` warning will disappear in Python 2.5."
msgstr ""

# 8a04fea365b441c3a7dd3676fab00d89
#: whatsnew/2.4.rst:896
msgid ""
"The interpreter gained a new switch, :option:`-m`, that takes a name, "
"searches for the corresponding  module on ``sys.path``, and runs the module "
"as a script. For example,  you can now run the Python profiler with ``python "
"-m profile``. (Contributed by Nick Coghlan.)"
msgstr ""

# 40032adc7ce44a89a6084db2e3b92b3f
#: whatsnew/2.4.rst:901
msgid ""
"The :func:`eval(expr, globals, locals)` and :func:`execfile(filename, "
"globals, locals)` functions and the ``exec`` statement now accept any "
"mapping type for the *locals* parameter.  Previously this had to be a "
"regular Python dictionary.  (Contributed by Raymond Hettinger.)"
msgstr ""

# 49ec44b3c4f44822861f7ae99f9f169e
#: whatsnew/2.4.rst:906
msgid ""
"The :func:`zip` built-in function and :func:`itertools.izip` now return an "
"empty list if called with no arguments. Previously they raised a :exc:"
"`TypeError` exception.  This makes them more suitable for use with variable "
"length argument lists::"
msgstr ""

# 4cb7e12e87314529a7b3849aad983b3d
#: whatsnew/2.4.rst:921
msgid ""
"Encountering a failure while importing a module no longer leaves a "
"partially- initialized module object in ``sys.modules``.  The incomplete "
"module object left behind would fool further imports of the same module into "
"succeeding, leading to confusing errors.   (Fixed by Tim Peters.)"
msgstr ""

# 266d5fc955d44db387f9080733532879
#: whatsnew/2.4.rst:926
msgid ""
":const:`None` is now a constant; code that binds a new value to  the name "
"``None`` is now a syntax error. (Contributed by Raymond Hettinger.)"
msgstr ""

# a6fc4c515f04440d80d315ee3e8f8105
#: whatsnew/2.4.rst:935
msgid ""
"The inner loops for list and tuple slicing were optimized and now run about "
"one-third faster.  The inner loops for dictionaries were also optimized, "
"resulting in performance boosts for :meth:`keys`, :meth:`values`, :meth:"
"`items`, :meth:`iterkeys`, :meth:`itervalues`, and :meth:`iteritems`. "
"(Contributed by Raymond Hettinger.)"
msgstr ""

# 897d9d0eabf4420380c3db510ac9489d
#: whatsnew/2.4.rst:941
msgid ""
"The machinery for growing and shrinking lists was optimized for speed and "
"for space efficiency.  Appending and popping from lists now runs faster due "
"to more efficient code paths and less frequent use of the underlying system :"
"c:func:`realloc`.  List comprehensions also benefit.   :meth:`list.extend` "
"was also optimized and no longer converts its argument into a temporary list "
"before extending the base list.  (Contributed by Raymond Hettinger.)"
msgstr ""

# f0d6a7109b6d4aae904e60aa9efee888
#: whatsnew/2.4.rst:948
msgid ""
":func:`list`, :func:`tuple`, :func:`map`, :func:`filter`, and :func:`zip` "
"now run several times faster with non-sequence arguments that supply a :meth:"
"`__len__` method.  (Contributed by Raymond Hettinger.)"
msgstr ""

# 605656a8b8d647a5b633610e21cd7f43
#: whatsnew/2.4.rst:952
msgid ""
"The methods :meth:`list.__getitem__`, :meth:`dict.__getitem__`, and :meth:"
"`dict.__contains__` are now implemented as :class:`method_descriptor` "
"objects rather than :class:`wrapper_descriptor` objects.  This form of  "
"access doubles their performance and makes them more suitable for use as "
"arguments to functionals: ``map(mydict.__getitem__, keylist)``. (Contributed "
"by Raymond Hettinger.)"
msgstr ""

# 03bb8dd9765e425482ed0f4f82760e6b
#: whatsnew/2.4.rst:959
msgid ""
"Added a new opcode, ``LIST_APPEND``, that simplifies the generated bytecode "
"for list comprehensions and speeds them up by about a third.  (Contributed "
"by Raymond Hettinger.)"
msgstr ""

# 5cd42a1ec66940cb8337817b8f36fb82
#: whatsnew/2.4.rst:963
msgid ""
"The peephole bytecode optimizer has been improved to  produce shorter, "
"faster bytecode; remarkably, the resulting bytecode is  more readable.  "
"(Enhanced by Raymond Hettinger.)"
msgstr ""

# 1babc71cb67d4ff48db3bbe3ea376bc2
#: whatsnew/2.4.rst:967
msgid ""
"String concatenations in statements of the form ``s = s + \"abc\"`` and ``s "
"+= \"abc\"`` are now performed more efficiently in certain circumstances.  "
"This optimization won't be present in other Python implementations such as "
"Jython, so you shouldn't rely on it; using the :meth:`join` method of "
"strings is still recommended when you want to efficiently glue a large "
"number of strings together. (Contributed by Armin Rigo.)"
msgstr ""

# 49e37c39b2dd4890a6a67772e0d290d1
#: whatsnew/2.4.rst:974
msgid ""
"The net result of the 2.4 optimizations is that Python 2.4 runs the pystone "
"benchmark around 5% faster than Python 2.3 and 35% faster than Python 2.2. "
"(pystone is not a particularly good benchmark, but it's the most commonly "
"used measurement of Python's performance.  Your own applications may show "
"greater or smaller benefits from Python 2.4.)"
msgstr ""

# e5b5beb60dd94576889934cb0803dc0a
#: whatsnew/2.4.rst:997
msgid ""
"The :mod:`asyncore` module's :func:`loop` function now has a *count* "
"parameter that lets you perform a limited number of passes through the "
"polling loop.  The default is still to loop forever."
msgstr ""

# a839ae2ab43c4478a0898392281e998b
#: whatsnew/2.4.rst:1001
msgid ""
"The :mod:`base64` module now has more complete RFC 3548 support for Base64, "
"Base32, and Base16 encoding and decoding, including optional case folding "
"and optional alternative alphabets. (Contributed by Barry Warsaw.)"
msgstr ""

# 293f646e0f794b27990526eaedbd0104
#: whatsnew/2.4.rst:1005
msgid ""
"The :mod:`bisect` module now has an underlying C implementation for improved "
"performance. (Contributed by Dmitry Vasiliev.)"
msgstr ""

# 88fd162914ef4dbc9b2903e8306ac414
#: whatsnew/2.4.rst:1008
msgid ""
"The CJKCodecs collections of East Asian codecs, maintained by Hye-Shik "
"Chang, was integrated into 2.4.   The new encodings are:"
msgstr ""

# 09fd66f9055e4ba7ae6e7705674b8f3d
#: whatsnew/2.4.rst:1011
msgid "Chinese (PRC): gb2312, gbk, gb18030, big5hkscs, hz"
msgstr ""

# 97fa48884aef4070a5f4fe75f1fd9edc
#: whatsnew/2.4.rst:1013
msgid "Chinese (ROC): big5, cp950"
msgstr ""

# bb14189f3a884c3fa0f5f9ab5e76e8b6
#: whatsnew/2.4.rst:1017
msgid "Japanese: cp932, euc-jis-2004, euc-jp, euc-jisx0213, iso-2022-jp,"
msgstr ""

# dbfaba9246574b4bb39d5926871a1ab0
#: whatsnew/2.4.rst:1016
msgid ""
"iso-2022-jp-1, iso-2022-jp-2, iso-2022-jp-3, iso-2022-jp-ext, iso-2022-"
"jp-2004, shift-jis, shift-jisx0213, shift-jis-2004"
msgstr ""

# 27c2eb773d0d4c08b2308270f558e2fa
#: whatsnew/2.4.rst:1019
msgid "Korean: cp949, euc-kr, johab, iso-2022-kr"
msgstr ""

# 735e98b468824887943f72eaf2677488
#: whatsnew/2.4.rst:1021
msgid ""
"Some other new encodings were added: HP Roman8,  ISO_8859-11, ISO_8859-16, "
"PCTP-154, and TIS-620."
msgstr ""

# b8100e8b45254aa8a253738f60f9ffd5
#: whatsnew/2.4.rst:1024
msgid ""
"The UTF-8 and UTF-16 codecs now cope better with receiving partial input. "
"Previously the :class:`StreamReader` class would try to read more data, "
"making it impossible to resume decoding from the stream.  The :meth:`read` "
"method will now return as much data as it can and future calls will resume "
"decoding where previous ones left off.  (Implemented by Walter Dörwald.)"
msgstr ""

# c2f85b01085443de92c0737d7d190af1
#: whatsnew/2.4.rst:1030
msgid ""
"There is a new :mod:`collections` module for  various specialized collection "
"datatypes.   Currently it contains just one type, :class:`deque`,  a double- "
"ended queue that supports efficiently adding and removing elements from "
"either end::"
msgstr ""

# a420866f285e475b960a6ffeb46d452d
#: whatsnew/2.4.rst:1050
msgid ""
"Several modules, such as the :mod:`Queue` and :mod:`threading` modules, now "
"take advantage of :class:`collections.deque` for improved performance.  "
"(Contributed by Raymond Hettinger.)"
msgstr ""

# decd05c9672f40af9fca792dac88cb6b
#: whatsnew/2.4.rst:1054
msgid ""
"The :mod:`ConfigParser` classes have been enhanced slightly. The :meth:"
"`read` method now returns a list of the files that were successfully parsed, "
"and the :meth:`set` method raises :exc:`TypeError` if passed a *value* "
"argument that isn't a string.   (Contributed by John Belmonte and David "
"Goodger.)"
msgstr ""

# 44890d4a113744f2a37f472141be1616
#: whatsnew/2.4.rst:1059
msgid ""
"The :mod:`curses` module now supports the ncurses extension :func:"
"`use_default_colors`.  On platforms where the terminal supports "
"transparency, this makes it possible to use a transparent background. "
"(Contributed by Jörg Lehmann.)"
msgstr ""

# 590c4d37d1b7475e9068dc69d05cbaa9
#: whatsnew/2.4.rst:1064
msgid ""
"The :mod:`difflib` module now includes an :class:`HtmlDiff` class that "
"creates an HTML table showing a side by side comparison of two versions of a "
"text. (Contributed by Dan Gass.)"
msgstr ""

# 28b4288a4cd44cf19befd797ecdb1552
#: whatsnew/2.4.rst:1068
msgid ""
"The :mod:`email` package was updated to version 3.0,  which dropped various "
"deprecated APIs and removes support for Python versions earlier than 2.3.  "
"The 3.0 version of the package uses a new incremental parser for MIME "
"messages, available in the :mod:`email.FeedParser` module.  The new parser "
"doesn't require reading the entire message into memory, and doesn't raise "
"exceptions if a message is malformed; instead it records any problems in "
"the  :attr:`defect` attribute of the message.  (Developed by Anthony Baxter, "
"Barry Warsaw, Thomas Wouters, and others.)"
msgstr ""

# 36d99237fe8e43f4abb29f1ffa9dc60f
#: whatsnew/2.4.rst:1077
msgid ""
"The :mod:`heapq` module has been converted to C.  The resulting tenfold "
"improvement in speed makes the module suitable for handling high volumes of "
"data.  In addition, the module has two new functions :func:`nlargest` and :"
"func:`nsmallest` that use heaps to find the N largest or smallest values in "
"a dataset without the expense of a full sort.  (Contributed by Raymond "
"Hettinger.)"
msgstr ""

# 02b7baacc63246c189a97c50ce080a7e
#: whatsnew/2.4.rst:1083
msgid ""
"The :mod:`httplib` module now contains constants for HTTP status codes "
"defined in various HTTP-related RFC documents.  Constants have names such "
"as :const:`OK`, :const:`CREATED`, :const:`CONTINUE`, and :const:"
"`MOVED_PERMANENTLY`; use pydoc to get a full list.  (Contributed by Andrew "
"Eland.)"
msgstr ""

# 0a3de8e92b46462fb091ccc690bf2803
#: whatsnew/2.4.rst:1089
msgid ""
"The :mod:`imaplib` module now supports IMAP's THREAD command (contributed by "
"Yves Dionne) and new :meth:`deleteacl` and :meth:`myrights` methods "
"(contributed by Arnaud Mazin)."
msgstr ""

# e4231c21106e4ecc9d50ce32ac3acee8
#: whatsnew/2.4.rst:1093
msgid ""
"The :mod:`itertools` module gained a :func:`groupby(iterable[, *func*])` "
"function. *iterable* is something that can be iterated over to return a "
"stream of elements, and the optional *func* parameter is a function that "
"takes an element and returns a key value; if omitted, the key is simply the "
"element itself.  :func:`groupby` then groups the elements into subsequences "
"which have matching values of the key, and returns a series of 2-tuples "
"containing the key value and an iterator over the subsequence."
msgstr ""

# 3cea32c866834b63a75845f8333e8593
#: whatsnew/2.4.rst:1101
msgid ""
"Here's an example to make this clearer.  The *key* function simply returns "
"whether a number is even or odd, so the result of :func:`groupby` is to "
"return consecutive runs of odd or even numbers. ::"
msgstr ""

# e8575c1ef0fc47048d53172dfdbcec18
#: whatsnew/2.4.rst:1117
msgid ""
":func:`groupby` is typically used with sorted input.  The logic for :func:"
"`groupby` is similar to the Unix ``uniq`` filter which makes it handy for "
"eliminating, counting, or identifying duplicate elements::"
msgstr ""

# a537730c00a5480ba2797039316ce7f0
#: whatsnew/2.4.rst:1140
msgid "(Contributed by Hye-Shik Chang.)"
msgstr ""

# ddfea9d63a694eec8d3e7734c27526be
#: whatsnew/2.4.rst:1142
msgid ""
":mod:`itertools` also gained a function named :func:`tee(iterator, N)` that "
"returns *N* independent iterators that replicate *iterator*.  If *N* is "
"omitted, the default is 2. ::"
msgstr ""

# e9ad3b544ac949c2b81bf94aaf017336
#: whatsnew/2.4.rst:1155
msgid ""
"Note that :func:`tee` has to keep copies of the values returned  by the "
"iterator; in the worst case, it may need to keep all of them.   This should "
"therefore be used carefully if the leading iterator can run far ahead of the "
"trailing iterator in a long stream of inputs. If the separation is large, "
"then you might as well use  :func:`list` instead.  When the iterators track "
"closely with one another, :func:`tee` is ideal.  Possible applications "
"include bookmarking, windowing, or lookahead iterators. (Contributed by "
"Raymond Hettinger.)"
msgstr ""

# 400044d72a0d43b39e1d9b8bddd67c00
#: whatsnew/2.4.rst:1164
msgid ""
"A number of functions were added to the :mod:`locale`  module, such as :func:"
"`bind_textdomain_codeset` to specify a particular encoding and a family of :"
"func:`l\\*gettext` functions that return messages in the chosen encoding. "
"(Contributed by Gustavo Niemeyer.)"
msgstr ""

# b95b18f45edf49c691ba66b0c3ffc22d
#: whatsnew/2.4.rst:1169
msgid ""
"Some keyword arguments were added to the :mod:`logging` package's :func:"
"`basicConfig` function to simplify log configuration.  The default behavior "
"is to log messages to standard error, but various keyword arguments can be "
"specified to log to a particular file, change the logging format, or set the "
"logging level. For example::"
msgstr ""

# c172987b86c54d95a3d17a7aef4ec8bc
#: whatsnew/2.4.rst:1180
msgid ""
"Other additions to the :mod:`logging` package include a :meth:`log(level, "
"msg)` convenience method, as well as a :class:`TimedRotatingFileHandler` "
"class that rotates its log files at a timed interval.  The module already "
"had :class:`RotatingFileHandler`, which rotated logs once the file exceeded "
"a certain size.  Both classes derive from a new :class:`BaseRotatingHandler` "
"class that can be used to implement other rotating handlers."
msgstr ""

# 7c2785fedfc0422296195ea9a195bdf0
#: whatsnew/2.4.rst:1187
msgid "(Changes implemented by Vinay Sajip.)"
msgstr ""

# 5f17e2bb8ecc408cabb97e2794373816
#: whatsnew/2.4.rst:1189
msgid ""
"The :mod:`marshal` module now shares interned strings on unpacking a  data "
"structure.  This may shrink the size of certain pickle strings, but the "
"primary effect is to make :file:`.pyc` files significantly smaller. "
"(Contributed by Martin von Löwis.)"
msgstr ""

# 6d65d096f1db46ce906898b971db083d
#: whatsnew/2.4.rst:1194
msgid ""
"The :mod:`nntplib` module's :class:`NNTP` class gained :meth:`description` "
"and :meth:`descriptions` methods to retrieve  newsgroup descriptions for a "
"single group or for a range of groups. (Contributed by Jürgen A. Erhard.)"
msgstr ""

# 4fe80a39845049dfa7a10b938d3e2a83
#: whatsnew/2.4.rst:1198
msgid ""
"Two new functions were added to the :mod:`operator` module, :func:"
"`attrgetter(attr)` and :func:`itemgetter(index)`. Both functions return "
"callables that take a single argument and return the corresponding attribute "
"or item; these callables make excellent data extractors when used with :func:"
"`map` or :func:`sorted`.  For example::"
msgstr ""

# 0a690ef6bf9c4777a487c9a627c34f10
#: whatsnew/2.4.rst:1214
msgid ""
"The :mod:`optparse` module was updated in various ways.  The module now "
"passes its messages through :func:`gettext.gettext`, making it possible to "
"internationalize Optik's help and error messages.  Help messages for options "
"can now include the string ``'%default'``, which will be replaced by the "
"option's default value.  (Contributed by Greg Ward.)"
msgstr ""

# 339bf9e44b46425d82bb6c7d2f242199
#: whatsnew/2.4.rst:1220
msgid ""
"The long-term plan is to deprecate the :mod:`rfc822` module in some future "
"Python release in favor of the :mod:`email` package. To this end, the :func:"
"`email.Utils.formatdate` function has been changed to make it usable as a "
"replacement for :func:`rfc822.formatdate`.  You may want to write new e-mail "
"processing code with this in mind.  (Change implemented by Anthony Baxter.)"
msgstr ""

# 80a386ca94724c46b03e747ccb34f10d
#: whatsnew/2.4.rst:1226
msgid ""
"A new :func:`urandom(n)` function was added to the :mod:`os` module, "
"returning a string containing *n* bytes of random data.  This function "
"provides access to platform-specific sources of randomness such as :file:`/"
"dev/urandom` on Linux or the Windows CryptoAPI.  (Contributed by Trevor "
"Perrin.)"
msgstr ""

# eb895cad9a524824a86b0da3347226ce
#: whatsnew/2.4.rst:1231
msgid ""
"Another new function: :func:`os.path.lexists(path)`  returns true if the "
"file specified by *path* exists, whether or not it's a symbolic link.  This "
"differs from the existing :func:`os.path.exists(path)` function, which "
"returns false if *path* is a symlink that points to a destination that "
"doesn't exist. (Contributed by Beni Cherniavsky.)"
msgstr ""

# 770308fafcb9428bad42143dac025c4d
#: whatsnew/2.4.rst:1237
msgid ""
"A new :func:`getsid` function was added to the :mod:`posix` module that "
"underlies the :mod:`os` module. (Contributed by J. Raynor.)"
msgstr ""

# fb267297e0d7431abc74fbcf55810c39
#: whatsnew/2.4.rst:1240
msgid ""
"The :mod:`poplib` module now supports POP over SSL.  (Contributed by Hector "
"Urtubia.)"
msgstr ""

# a1c3bdbcd3ff4fd0b6530a3acb7a1a00
#: whatsnew/2.4.rst:1243
msgid ""
"The :mod:`profile` module can now profile C extension functions. "
"(Contributed by Nick Bastin.)"
msgstr ""

# 95831ab19ede443eb20f458faa7900c7
#: whatsnew/2.4.rst:1246
msgid ""
"The :mod:`random` module has a new method called :meth:`getrandbits(N)` that "
"returns a long integer *N* bits in length.  The existing :meth:`randrange` "
"method now uses :meth:`getrandbits` where appropriate, making generation of "
"arbitrarily large random numbers more efficient.  (Contributed by Raymond "
"Hettinger.)"
msgstr ""

# 191451ec7a464294946c12a7e6229aa2
#: whatsnew/2.4.rst:1252
msgid ""
"The regular expression language accepted by the :mod:`re` module was "
"extended with simple conditional expressions, written as ``(?(group)A|B)``.  "
"*group* is either a numeric group ID or a group name defined with ``(?"
"P<group>...)`` earlier in the expression.  If the specified group matched, "
"the regular expression pattern *A* will be tested against the string; if the "
"group didn't match, the pattern *B* will be used instead. (Contributed by "
"Gustavo Niemeyer.)"
msgstr ""

# 97f2a33e9c39459189f8fbd8722aa046
#: whatsnew/2.4.rst:1259
msgid ""
"The :mod:`re` module is also no longer recursive, thanks to a massive amount "
"of work by Gustavo Niemeyer.  In a recursive regular expression engine, "
"certain patterns result in a large amount of C stack space being consumed, "
"and it was possible to overflow the stack. For example, if you matched a "
"30000-byte string of ``a`` characters against the expression ``(a|b)+``, one "
"stack frame was consumed per character.  Python 2.3 tried to check for stack "
"overflow and raise a :exc:`RuntimeError` exception, but certain patterns "
"could sidestep the checking and if you were unlucky Python could segfault. "
"Python 2.4's regular expression engine can match this pattern without "
"problems."
msgstr ""

# 30eb7a0c16db4b27a041ce3655c62ab8
#: whatsnew/2.4.rst:1269
msgid ""
"The :mod:`signal` module now performs tighter error-checking on the "
"parameters to the :func:`signal.signal` function.  For example, you can't "
"set a handler on the :const:`SIGKILL` signal; previous versions of Python "
"would quietly accept this, but 2.4 will raise a :exc:`RuntimeError` "
"exception."
msgstr ""

# c2c1a3d3a5c7462b9f36d839bafbf6de
#: whatsnew/2.4.rst:1274
msgid ""
"Two new functions were added to the :mod:`socket` module. :func:`socketpair` "
"returns a pair of connected sockets and :func:`getservbyport(port)` looks up "
"the service name for a given port number. (Contributed by Dave Cole and "
"Barry Warsaw.)"
msgstr ""

# 2367666e3bca464984ac942a824ccbed
#: whatsnew/2.4.rst:1279
msgid ""
"The :func:`sys.exitfunc` function has been deprecated.  Code should be using "
"the existing :mod:`atexit` module, which correctly handles calling multiple "
"exit functions.  Eventually :func:`sys.exitfunc` will become a purely "
"internal interface, accessed only by :mod:`atexit`."
msgstr ""

# 7d70a0e1be9a4fa5920ecf8fddb77f1a
#: whatsnew/2.4.rst:1284
msgid ""
"The :mod:`tarfile` module now generates GNU-format tar files by default. "
"(Contributed by Lars Gustäbel.)"
msgstr ""

# 190ed79664f04f49927490b5eb089f77
#: whatsnew/2.4.rst:1287
msgid ""
"The :mod:`threading` module now has an elegantly simple way to support "
"thread-local data.  The module contains a :class:`local` class whose "
"attribute values are local to different threads. ::"
msgstr ""

# ba90b6d81ee5482da88b990020e2de5a
#: whatsnew/2.4.rst:1297
msgid ""
"Other threads can assign and retrieve their own values for the :attr:"
"`number` and :attr:`url` attributes.  You can subclass :class:`local` to "
"initialize attributes or to add methods. (Contributed by Jim Fulton.)"
msgstr ""

# 7116e52739804bbd86ca8eeffaa933f7
#: whatsnew/2.4.rst:1301
msgid ""
"The :mod:`timeit` module now automatically disables periodic garbage "
"collection during the timing loop.  This change makes consecutive timings "
"more comparable.  (Contributed by Raymond Hettinger.)"
msgstr ""

# 541cac9673844f8280908ac3d90de5fc
#: whatsnew/2.4.rst:1305
msgid ""
"The :mod:`weakref` module now supports a wider variety of objects including "
"Python functions, class instances, sets, frozensets, deques, arrays, files, "
"sockets, and regular expression pattern objects. (Contributed by Raymond "
"Hettinger.)"
msgstr ""

# cf55836765f34af381e5ca2f1e57c26b
#: whatsnew/2.4.rst:1310
msgid ""
"The :mod:`xmlrpclib` module now supports a multi-call extension for "
"transmitting multiple XML-RPC calls in a single HTTP operation. (Contributed "
"by Brian Quinlan.)"
msgstr ""

# d7b80b6d4263484fa6bfd7666e3223c2
#: whatsnew/2.4.rst:1314
msgid ""
"The :mod:`mpz`, :mod:`rotor`, and :mod:`xreadlines` modules have  been "
"removed."
msgstr ""

# 3213db55ae5544718290deaae6843302
#: whatsnew/2.4.rst:1323
msgid "cookielib"
msgstr ""

# 1524fc0fdb544057b06a6f4b8d75c4b9
#: whatsnew/2.4.rst:1325
msgid ""
"The :mod:`cookielib` library supports client-side handling for HTTP cookies, "
"mirroring the :mod:`Cookie` module's server-side cookie support. Cookies are "
"stored in cookie jars; the library transparently stores cookies offered by "
"the web server in the cookie jar, and fetches the cookie from the jar when "
"connecting to the server. As in web browsers, policy objects control whether "
"cookies are accepted or not."
msgstr ""

# a7601defd9244ed9a16cc84cef8d0fdc
#: whatsnew/2.4.rst:1332
msgid ""
"In order to store cookies across sessions, two implementations of cookie "
"jars are provided: one that stores cookies in the Netscape format so "
"applications can use the Mozilla or Lynx cookie files, and one that stores "
"cookies in the same format as the Perl libwww library."
msgstr ""

# 070c5bc4afce4e168d4ad3d5c550ef3a
#: whatsnew/2.4.rst:1337
msgid ""
":mod:`urllib2` has been changed to interact with :mod:`cookielib`: :class:"
"`HTTPCookieProcessor` manages a cookie jar that is used when accessing URLs."
msgstr ""

# 72463f64c6aa44f2a2d1fda9daf916bb
#: whatsnew/2.4.rst:1341
msgid "This module was contributed by John J. Lee."
msgstr ""

# 5ef67a9c81924b6cbe4eb08f348703b0
#: whatsnew/2.4.rst:1347
msgid "doctest"
msgstr ""

# 9f55b832223647a98c7a8223f1468315
#: whatsnew/2.4.rst:1349
msgid ""
"The :mod:`doctest` module underwent considerable refactoring thanks to "
"Edward Loper and Tim Peters.  Testing can still be as simple as running :"
"func:`doctest.testmod`, but the refactorings allow customizing the module's "
"operation in various ways"
msgstr ""

# 65feef8c86a2433493b603eba682dff5
#: whatsnew/2.4.rst:1354
msgid ""
"The new :class:`DocTestFinder` class extracts the tests from a given  "
"object's docstrings::"
msgstr ""

# 871eb081e83343d8860cfb50e72fd2a9
#: whatsnew/2.4.rst:1370
msgid ""
"The new :class:`DocTestRunner` class then runs individual tests and can "
"produce a summary of the results::"
msgstr ""

# 1ba884a3ab90423eaa7f4810e220d796
#: whatsnew/2.4.rst:1379
msgid "The above example produces the following output::"
msgstr ""

# 077a21d238d24006b55871e9f488eb0e
#: whatsnew/2.4.rst:1387
msgid ""
":class:`DocTestRunner` uses an instance of the :class:`OutputChecker` class "
"to compare the expected output with the actual output.  This class takes a "
"number of different flags that customize its behaviour; ambitious users can "
"also write a completely new subclass of :class:`OutputChecker`."
msgstr ""

# 03e9ccfeb8674ce28d80df06fc7880e0
#: whatsnew/2.4.rst:1392
msgid ""
"The default output checker provides a number of handy features. For example, "
"with the :const:`doctest.ELLIPSIS` option flag, an ellipsis (``...``) in the "
"expected output matches any substring,  making it easier to accommodate "
"outputs that vary in minor ways::"
msgstr ""

# 2b3d596c739942fd833dec3907f15397
#: whatsnew/2.4.rst:1403
msgid "Another special string, ``<BLANKLINE>``, matches a blank line::"
msgstr ""

# a680d9004f8d486ba339315c1daf4c4c
#: whatsnew/2.4.rst:1411
msgid ""
"Another new capability is producing a diff-style display of the output by "
"specifying the :const:`doctest.REPORT_UDIFF` (unified diffs), :const:"
"`doctest.REPORT_CDIFF` (context diffs), or :const:`doctest.REPORT_NDIFF` "
"(delta-style) option flags.  For example::"
msgstr ""

# de357d01c90b4024953210db775a6c81
#: whatsnew/2.4.rst:1427
msgid ""
"Running the above function's tests with :const:`doctest.REPORT_UDIFF` "
"specified, you get the following output::"
msgstr ""

# 96057641cf3f4bb5b8beaa4e08bca2a6
#: whatsnew/2.4.rst:1448
msgid "Some of the changes to Python's build process and to the C API are:"
msgstr ""

# b5294e3925ae43f9b5e71651e6b33c19
#: whatsnew/2.4.rst:1450
msgid ""
"Three new convenience macros were added for common return values from "
"extension functions: :c:macro:`Py_RETURN_NONE`, :c:macro:`Py_RETURN_TRUE`, "
"and :c:macro:`Py_RETURN_FALSE`. (Contributed by Brett Cannon.)"
msgstr ""

# 76e8e213c1f841a1bd708f3f881d2516
#: whatsnew/2.4.rst:1454
msgid ""
"Another new macro, :c:macro:`Py_CLEAR(obj)`,  decreases the reference count "
"of *obj* and sets *obj* to the null pointer.  (Contributed by Jim Fulton.)"
msgstr ""

# c947680ee603463fa1f81c170c84b048
#: whatsnew/2.4.rst:1457
msgid ""
"A new function, :c:func:`PyTuple_Pack(N, obj1, obj2, ..., objN)`, constructs "
"tuples from a variable length argument list of Python objects.  (Contributed "
"by Raymond Hettinger.)"
msgstr ""

# 4c21a1701fbf4f19a4f0d5916c7bacc0
#: whatsnew/2.4.rst:1461
msgid ""
"A new function, :c:func:`PyDict_Contains(d, k)`, implements fast dictionary "
"lookups without masking exceptions raised during the look-up process. "
"(Contributed by Raymond Hettinger.)"
msgstr ""

# 844d73ed315c4b6080bd2bd649db5c6c
#: whatsnew/2.4.rst:1465
msgid ""
"The :c:macro:`Py_IS_NAN(X)` macro returns 1 if  its float or double argument "
"*X* is a NaN.   (Contributed by Tim Peters.)"
msgstr ""

# 67b21b865d364661983a3cddb557d4b0
#: whatsnew/2.4.rst:1468
msgid ""
"C code can avoid unnecessary locking by using the new :c:func:"
"`PyEval_ThreadsInitialized` function to tell  if any thread operations have "
"been performed.  If this function  returns false, no lock operations are "
"needed. (Contributed by Nick Coghlan.)"
msgstr ""

# 4c6344b63244452c920222edebbfe7c2
#: whatsnew/2.4.rst:1473
msgid ""
"A new function, :c:func:`PyArg_VaParseTupleAndKeywords`, is the same as :c:"
"func:`PyArg_ParseTupleAndKeywords` but takes a  :c:type:`va_list` instead of "
"a number of arguments. (Contributed by Greg Chapman.)"
msgstr ""

# 881a82e269894815a97faa80d5854b2a
#: whatsnew/2.4.rst:1477
msgid ""
"A new method flag, :const:`METH_COEXISTS`, allows a function defined in "
"slots to co-exist with a :c:type:`PyCFunction` having the same name.  This "
"can halve the access time for a method such as :meth:`set.__contains__`.  "
"(Contributed by Raymond Hettinger.)"
msgstr ""

# a5da2b7becbb4d09a14be87ba1806c35
#: whatsnew/2.4.rst:1482
msgid ""
"Python can now be built with additional profiling for the interpreter "
"itself, intended as an aid to people developing the Python core.  Providing :"
"option:`----enable-profiling` to the :program:`configure` script will let "
"you profile the interpreter with :program:`gprof`, and providing the :option:"
"`----with-tsc` switch enables profiling using the Pentium's Time-Stamp- "
"Counter register.  Note that the :option:`----with-tsc` switch is slightly "
"misnamed, because the profiling feature also works on the PowerPC platform, "
"though that processor architecture doesn't call that register \"the TSC "
"register\".  (Contributed by Jeremy Hylton.)"
msgstr ""

# 571ea1178eb74e36828e162430c9b18e
#: whatsnew/2.4.rst:1492
msgid ""
"The :c:type:`tracebackobject` type has been renamed to :c:type:"
"`PyTracebackObject`."
msgstr ""

# 05b7071c4a1244a782bf787ea4e102e8
#: whatsnew/2.4.rst:1501
msgid ""
"The Windows port now builds under MSVC++ 7.1 as well as version 6. "
"(Contributed by Martin von Löwis.)"
msgstr ""

# f188c004c3534c94a4fec00f56938d66
#: whatsnew/2.4.rst:1508
#, fuzzy
msgid "Porting to Python 2.4"
msgstr "Portage vers Python 3.2"

# 8da1162d3a9642a3b2d8bf2da90046a0
#: whatsnew/2.4.rst:1513
msgid ""
"Left shifts and hexadecimal/octal constants that are too  large no longer "
"trigger a :exc:`FutureWarning` and return  a value limited to 32 or 64 bits; "
"instead they return a long integer."
msgstr ""

# b5821823740940968209f3245c5d0377
#: whatsnew/2.4.rst:1520
msgid ""
"The :func:`zip` built-in function and :func:`itertools.izip` now return  an "
"empty list instead of raising a :exc:`TypeError` exception if called with no "
"arguments."
msgstr ""

# f400cb42844e49d0885053f8efbfcfea
#: whatsnew/2.4.rst:1524
msgid ""
"You can no longer compare the :class:`date` and :class:`datetime` instances "
"provided by the :mod:`datetime` module.  Two  instances of different classes "
"will now always be unequal, and  relative comparisons (``<``, ``>``) will "
"raise a :exc:`TypeError`."
msgstr ""

# 4101e7c924a14b1985dbb798619606a5
#: whatsnew/2.4.rst:1529
msgid ""
":func:`dircache.listdir` now passes exceptions to the caller instead of "
"returning empty lists."
msgstr ""

# 8970d57a56ce476a80076f9b413d34fa
#: whatsnew/2.4.rst:1532
msgid ""
":func:`LexicalHandler.startDTD` used to receive the public and system IDs in "
"the wrong order.  This has been corrected; applications relying on the wrong "
"order need to be fixed."
msgstr ""

# 6e0cd8d3fb3d4458836794408a70a4ee
#: whatsnew/2.4.rst:1536
msgid ""
":func:`fcntl.ioctl` now warns if the *mutate*  argument is omitted and "
"relevant."
msgstr ""

# 2a8350a164ee417baa87927068e5d534
#: whatsnew/2.4.rst:1539
msgid ""
"The :mod:`tarfile` module now generates GNU-format tar files by default."
msgstr ""

# 32acd2267ba74af69c751dc89d74837c
#: whatsnew/2.4.rst:1541
msgid ""
"Encountering a failure while importing a module no longer leaves a "
"partially- initialized module object in ``sys.modules``."
msgstr ""

# 12393797c189429b88eec5f3b20aa195
#: whatsnew/2.4.rst:1544
msgid ""
":const:`None` is now a constant; code that binds a new value to  the name "
"``None`` is now a syntax error."
msgstr ""

# 90e755b77cb74b9eb9bec7a5a57ed64d
#: whatsnew/2.4.rst:1547
msgid ""
"The :func:`signals.signal` function now raises a :exc:`RuntimeError` "
"exception for certain illegal values; previously these errors would pass "
"silently.  For example, you can no longer set a handler on the :const:"
"`SIGKILL` signal."
msgstr ""

# 7426af4c81624b7d96e402bd339536b5
#: whatsnew/2.4.rst:1559
msgid ""
"The author would like to thank the following people for offering "
"suggestions, corrections and assistance with various drafts of this article: "
"Koray Can, Hye-Shik Chang, Michael Dyck, Raymond Hettinger, Brian Hurt, "
"Hamish Lawson, Fredrik Lundh, Sean Reifschneider, Sadruddin Rejeb."
msgstr ""

# ae61bd2fbc434ee1acf825092d39e79d
#: whatsnew/2.5.rst:3
#, fuzzy
msgid "What's New in Python 2.5"
msgstr "Nouveautés de Python 2.0"

# b4c7aac15a774bb3a6123ffa0f1c8f6f
#: whatsnew/2.5.rst:12
msgid ""
"This article explains the new features in Python 2.5.  The final release of "
"Python 2.5 is scheduled for August 2006; :pep:`356` describes the planned "
"release schedule."
msgstr ""

# f3b301d6ea5546bdafdb6631d63b888e
#: whatsnew/2.5.rst:16
msgid ""
"The changes in Python 2.5 are an interesting mix of language and library "
"improvements. The library enhancements will be more important to Python's "
"user community, I think, because several widely-useful packages were added.  "
"New modules include ElementTree for XML processing (:mod:`xml.etree`), the "
"SQLite database module (:mod:`sqlite`), and the :mod:`ctypes` module for "
"calling C functions."
msgstr ""

# 2f7dfdc88e314fe98e0b421e2450059f
#: whatsnew/2.5.rst:23
msgid ""
"The language changes are of middling significance.  Some pleasant new "
"features were added, but most of them aren't features that you'll use every "
"day. Conditional expressions were finally added to the language using a "
"novel syntax; see section :ref:`pep-308`.  The new ':keyword:`with`' "
"statement will make writing cleanup code easier (section :ref:`pep-343`).  "
"Values can now be passed into generators (section :ref:`pep-342`).  Imports "
"are now visible as either absolute or relative (section :ref:`pep-328`).  "
"Some corner cases of exception handling are handled better (section :ref:"
"`pep-341`).  All these improvements are worthwhile, but they're improvements "
"to one specific language feature or another; none of them are broad "
"modifications to Python's semantics."
msgstr ""

# 9423a867b744414b97af3f2db83c5aa9
#: whatsnew/2.5.rst:34
msgid ""
"As well as the language and library additions, other improvements and "
"bugfixes were made throughout the source tree.  A search through the SVN "
"change logs finds there were 353 patches applied and 458 bugs fixed between "
"Python 2.4 and 2.5.  (Both figures are likely to be underestimates.)"
msgstr ""

# eaa60c4ddf8f4dd792198989e4245f1e
#: whatsnew/2.5.rst:39
msgid ""
"This article doesn't try to be a complete specification of the new features; "
"instead changes are briefly introduced using helpful examples.  For full "
"details, you should always refer to the documentation for Python 2.5 at "
"http://docs.python.org. If you want to understand the complete "
"implementation and design rationale, refer to the PEP for a particular new "
"feature."
msgstr ""

# 9fc996f9a3ef420093b1231b3776f777
#: whatsnew/2.5.rst:45
msgid ""
"Comments, suggestions, and error reports for this document are welcome; "
"please e-mail them to the author or open a bug in the Python bug tracker."
msgstr ""

# 49137ec8250746b6a83bef009faa7298
#: whatsnew/2.5.rst:54
msgid "PEP 308: Conditional Expressions"
msgstr ""

# a37f6644972444d5b1e02cd4082cb684
#: whatsnew/2.5.rst:56
msgid ""
"For a long time, people have been requesting a way to write conditional "
"expressions, which are expressions that return value A or value B depending "
"on whether a Boolean value is true or false.  A conditional expression lets "
"you write a single assignment statement that has the same effect as the "
"following::"
msgstr ""

# df09e439c289453fafa07346d7a1e9a6
#: whatsnew/2.5.rst:66
msgid ""
"There have been endless tedious discussions of syntax on both python-dev and "
"comp.lang.python.  A vote was even held that found the majority of voters "
"wanted conditional expressions in some form, but there was no syntax that "
"was preferred by a clear majority. Candidates included C's ``cond ? true_v : "
"false_v``, ``if cond then true_v else false_v``, and 16 other variations."
msgstr ""

# c1a26bf00e6d4f039595b549abd7f325
#: whatsnew/2.5.rst:72
msgid "Guido van Rossum eventually chose a surprising syntax::"
msgstr ""

# 451ac396fe0642d5a6136c4e68363ebe
#: whatsnew/2.5.rst:76
msgid ""
"Evaluation is still lazy as in existing Boolean expressions, so the order of "
"evaluation jumps around a bit.  The *condition* expression in the middle is "
"evaluated first, and the *true_value* expression is evaluated only if the "
"condition was true.  Similarly, the *false_value* expression is only "
"evaluated when the condition is false."
msgstr ""

# 46dbf95cbba946ce84148d8944c5b24b
#: whatsnew/2.5.rst:82
msgid ""
"This syntax may seem strange and backwards; why does the condition go in the "
"*middle* of the expression, and not in the front as in C's ``c ? x : y``?  "
"The decision was checked by applying the new syntax to the modules in the "
"standard library and seeing how the resulting code read.  In many cases "
"where a conditional expression is used, one value seems to be the 'common "
"case' and one value is an 'exceptional case', used only on rarer occasions "
"when the condition isn't met.  The conditional syntax makes this pattern a "
"bit more obvious::"
msgstr ""

# c815ac0aa76b4694b740db374e9a6270
#: whatsnew/2.5.rst:92
msgid ""
"I read the above statement as meaning \"here *contents* is  usually assigned "
"a value of ``doc+'\\n'``; sometimes  *doc* is empty, in which special case "
"an empty string is returned.\"   I doubt I will use conditional expressions "
"very often where there  isn't a clear common and uncommon case."
msgstr ""

# 0a9123dcb8394c0697969f77eb5e1099
#: whatsnew/2.5.rst:97
msgid ""
"There was some discussion of whether the language should require surrounding "
"conditional expressions with parentheses.  The decision was made to *not* "
"require parentheses in the Python language's grammar, but as a matter of "
"style I think you should always use them. Consider these two statements::"
msgstr ""

# 7dd3a211f97c4109a578494ead6cce1f
#: whatsnew/2.5.rst:108
msgid ""
"In the first version, I think a reader's eye might group the statement into "
"'level = 1', 'if logging', 'else 0', and think that the condition decides "
"whether the assignment to *level* is performed.  The second version reads "
"better, in my opinion, because it makes it clear that the assignment is "
"always performed and the choice is being made between two values."
msgstr ""

# 096cd813b5984cfdb9ae9ac2d42e8d70
#: whatsnew/2.5.rst:114
msgid ""
"Another reason for including the brackets: a few odd combinations of list "
"comprehensions and lambdas could look like incorrect conditional "
"expressions. See :pep:`308` for some examples.  If you put parentheses "
"around your conditional expressions, you won't run into this case."
msgstr ""

#: whatsnew/2.5.rst:123
msgid "PEP 308 - Conditional Expressions"
msgstr ""

# 3dbad3c6101c4bb4b9712e0a728da4dc
#: whatsnew/2.5.rst:123
msgid ""
"PEP written by Guido van Rossum and Raymond D. Hettinger; implemented by "
"Thomas Wouters."
msgstr ""

# 8aa04ea5d12a4d2ea4daf68a03a10f20
#: whatsnew/2.5.rst:132
msgid "PEP 309: Partial Function Application"
msgstr ""

# e95323a97357465eb179a9c83f19339c
#: whatsnew/2.5.rst:134
msgid ""
"The :mod:`functools` module is intended to contain tools for functional-"
"style programming."
msgstr ""

# 952a5a133f0e41218e759c403a578223
#: whatsnew/2.5.rst:137
msgid ""
"One useful tool in this module is the :func:`partial` function. For programs "
"written in a functional style, you'll sometimes want to construct variants "
"of existing functions that have some of the parameters filled in.  Consider "
"a Python function ``f(a, b, c)``; you could create a new function ``g(b, "
"c)`` that was equivalent to ``f(1, b, c)``.  This is called \"partial "
"function application\"."
msgstr ""

# 7c04980825c94c508e93da7989802b0f
#: whatsnew/2.5.rst:144
msgid ""
":func:`partial` takes the arguments ``(function, arg1, arg2, ... "
"kwarg1=value1, kwarg2=value2)``.  The resulting object is callable, so you "
"can just call it to invoke *function* with the filled-in arguments."
msgstr ""

# f778ee796c434825a7c4a0d884b2a919
#: whatsnew/2.5.rst:148
msgid "Here's a small but realistic example::"
msgstr ""

# 5edf6f887d9d4c27968bea2f3240f37b
#: whatsnew/2.5.rst:160
msgid ""
"Here's another example, from a program that uses PyGTK.  Here a context- "
"sensitive pop-up menu is being constructed dynamically.  The callback "
"provided for the menu option is a partially applied version of the :meth:"
"`open_item` method, where the first argument has been provided. ::"
msgstr ""

# fa76461d441942eca8e0b3d15ef8b64a
#: whatsnew/2.5.rst:173
msgid ""
"Another function in the :mod:`functools` module is the :func:"
"`update_wrapper(wrapper, wrapped)` function that helps you write well- "
"behaved decorators.  :func:`update_wrapper` copies the name, module, and "
"docstring attribute to a wrapper function so that tracebacks inside the "
"wrapped function are easier to understand.  For example, you might write::"
msgstr ""

# 3c589b1c2f4e4f8c84f1a73ae156971d
#: whatsnew/2.5.rst:186
msgid ""
":func:`wraps` is a decorator that can be used inside your own decorators to "
"copy the wrapped function's information.  An alternate  version of the "
"previous example would be::"
msgstr ""

#: whatsnew/2.5.rst:201
msgid "PEP 309 - Partial Function Application"
msgstr ""

# 3dc5f944204c4706b8a26501c803afa0
#: whatsnew/2.5.rst:201
msgid ""
"PEP proposed and written by Peter Harris; implemented by Hye-Shik Chang and "
"Nick Coghlan, with adaptations by Raymond Hettinger."
msgstr ""

# 89116037ad054efbb67b9b3e6f181db8
#: whatsnew/2.5.rst:210
msgid "PEP 314: Metadata for Python Software Packages v1.1"
msgstr ""

# 6ce98c14a23545be9bd0c2ca266bbaa1
#: whatsnew/2.5.rst:212
msgid ""
"Some simple dependency support was added to Distutils.  The :func:`setup` "
"function now has ``requires``, ``provides``, and ``obsoletes`` keyword "
"parameters.  When you build a source distribution using the ``sdist`` "
"command, the dependency information will be recorded in the :file:`PKG-INFO` "
"file."
msgstr ""

# 81962b2acf554903bad35a3f982b9aaf
#: whatsnew/2.5.rst:217
msgid ""
"Another new keyword parameter is ``download_url``, which should be set to a "
"URL for the package's source code.  This means it's now possible to look up "
"an entry in the package index, determine the dependencies for a package, and "
"download the required packages. ::"
msgstr ""

# 693b2d38552b4532bf49c416984cc2a0
#: whatsnew/2.5.rst:231
msgid ""
"Another new enhancement to the Python package index at http://cheeseshop."
"python.org is storing source and binary archives for a package.  The new :"
"command:`upload` Distutils command will upload a package to the repository."
msgstr ""

# e3aa071250244084a86cb9aef5f262a8
#: whatsnew/2.5.rst:236
msgid ""
"Before a package can be uploaded, you must be able to build a distribution "
"using the :command:`sdist` Distutils command.  Once that works, you can run "
"``python setup.py upload`` to add your package to the PyPI archive.  "
"Optionally you can GPG-sign the package by supplying the :option:`--sign` "
"and :option:`--identity` options."
msgstr ""

# 9d3286a50f37471fad442e39424e4584
#: whatsnew/2.5.rst:242
msgid ""
"Package uploading was implemented by Martin von Löwis and Richard Jones."
msgstr ""

#: whatsnew/2.5.rst:248
msgid "PEP 314 - Metadata for Python Software Packages v1.1"
msgstr ""

# b0052bbde7594e8fbad3b798c762e720
#: whatsnew/2.5.rst:248
msgid ""
"PEP proposed and written by A.M. Kuchling, Richard Jones, and Fred Drake; "
"implemented by Richard Jones and Fred Drake."
msgstr ""

# a0045a5fb075412c8cbd4db9ca26084c
#: whatsnew/2.5.rst:257
msgid "PEP 328: Absolute and Relative Imports"
msgstr ""

# abf82e3ce20a45dab318f4abcd0d96f4
#: whatsnew/2.5.rst:259
msgid ""
"The simpler part of PEP 328 was implemented in Python 2.4: parentheses could "
"now be used to enclose the names imported from a module using the ``from ... "
"import ...`` statement, making it easier to import many different names."
msgstr ""

# 903739c51aa8421b8ee0ee6aed2d44e1
#: whatsnew/2.5.rst:263
msgid ""
"The more complicated part has been implemented in Python 2.5: importing a "
"module can be specified to use absolute or package-relative imports.  The "
"plan is to move toward making absolute imports the default in future "
"versions of Python."
msgstr ""

# 9ee41b2fadf7425dbaf13df5ba11fc34
#: whatsnew/2.5.rst:267
msgid "Let's say you have a package directory like this::"
msgstr ""

# 0ca30ff1f1db4af59a0ee4b78129a618
#: whatsnew/2.5.rst:274
msgid ""
"This defines a package named :mod:`pkg` containing the :mod:`pkg.main` and :"
"mod:`pkg.string` submodules."
msgstr ""

# 73380bf8cadb4e8e96b510df8463d23c
#: whatsnew/2.5.rst:277
msgid ""
"Consider the code in the :file:`main.py` module.  What happens if it "
"executes the statement ``import string``?  In Python 2.4 and earlier, it "
"will first look in the package's directory to perform a relative import, "
"finds :file:`pkg/string.py`, imports the contents of that file as the :mod:"
"`pkg.string` module, and that module is bound to the name ``string`` in the :"
"mod:`pkg.main` module's namespace."
msgstr ""

# 1c4dda21a61f40ada342e9e7185185b8
#: whatsnew/2.5.rst:284
msgid ""
"That's fine if :mod:`pkg.string` was what you wanted.  But what if you "
"wanted Python's standard :mod:`string` module?  There's no clean way to "
"ignore :mod:`pkg.string` and look for the standard module; generally you had "
"to look at the contents of ``sys.modules``, which is slightly unclean.    "
"Holger Krekel's :mod:`py.std` package provides a tidier way to perform "
"imports from the standard library, ``import py ; py.std.string.join()``, but "
"that package isn't available on all Python installations."
msgstr ""

# 3572c632a1e94948b02ab348ebc905de
#: whatsnew/2.5.rst:292
msgid ""
"Reading code which relies on relative imports is also less clear, because a "
"reader may be confused about which module, :mod:`string` or :mod:`pkg."
"string`, is intended to be used.  Python users soon learned not to duplicate "
"the names of standard library modules in the names of their packages' "
"submodules, but you can't protect against having your submodule's name being "
"used for a new module added in a future version of Python."
msgstr ""

# fa5b26a3557e4f14ac6722791980e697
#: whatsnew/2.5.rst:299
msgid ""
"In Python 2.5, you can switch :keyword:`import`'s behaviour to  absolute "
"imports using a ``from __future__ import absolute_import`` directive.  This "
"absolute- import behaviour will become the default in a future version "
"(probably Python 2.7).  Once absolute imports  are the default, ``import "
"string`` will always find the standard library's version. It's suggested "
"that users should begin using absolute imports as much as possible, so it's "
"preferable to begin writing ``from pkg import string`` in your code."
msgstr ""

# 84c7b84773aa44109624a9c707a89975
#: whatsnew/2.5.rst:307
msgid ""
"Relative imports are still possible by adding a leading period  to the "
"module name when using the ``from ... import`` form::"
msgstr ""

# 02e5ef809b4646e69d1f615e4e57b995
#: whatsnew/2.5.rst:315
msgid ""
"This imports the :mod:`string` module relative to the current package, so "
"in :mod:`pkg.main` this will import *name1* and *name2* from :mod:`pkg."
"string`. Additional leading periods perform the relative import starting "
"from the parent of the current package.  For example, code in the :mod:`A.B."
"C` module can do::"
msgstr ""

# bc8b6a6dedac49368f4f0d4637454c3e
#: whatsnew/2.5.rst:324
msgid ""
"Leading periods cannot be used with the ``import modname``  form of the "
"import statement, only the ``from ... import`` form."
msgstr ""

# b4d798f7e6034e048004cd7bc760260a
#: whatsnew/2.5.rst:331
msgid "PEP written by Aahz; implemented by Thomas Wouters."
msgstr ""

# 73398c5e6d6e470187ff96ea3fcfc131
#: whatsnew/2.5.rst:333
msgid "http://codespeak.net/py/current/doc/index.html"
msgstr ""

# acbcf3551bcf42e2a7ed33effe22bada
#: whatsnew/2.5.rst:334
msgid ""
"The py library by Holger Krekel, which contains the :mod:`py.std` package."
msgstr ""

# 5e3c35ce411c4893823d4fd50cd66b2d
#: whatsnew/2.5.rst:342
msgid "PEP 338: Executing Modules as Scripts"
msgstr ""

# d2d9bef48dcc4e29be0782a9fe79dde2
#: whatsnew/2.5.rst:344
msgid ""
"The :option:`-m` switch added in Python 2.4 to execute a module as a script "
"gained a few more abilities.  Instead of being implemented in C code inside "
"the Python interpreter, the switch now uses an implementation in a new "
"module, :mod:`runpy`."
msgstr ""

# d3c35c9272cd45d2a460287d06c0fbf5
#: whatsnew/2.5.rst:349
msgid ""
"The :mod:`runpy` module implements a more sophisticated import mechanism so "
"that it's now possible to run modules in a package such as :mod:`pychecker."
"checker`. The module also supports alternative import mechanisms such as "
"the :mod:`zipimport` module.  This means you can add a .zip archive's path "
"to ``sys.path`` and then use the :option:`-m` switch to execute code from "
"the archive."
msgstr ""

# f59106ecb45d4832a1e7c6dce5c8bf81
#: whatsnew/2.5.rst:359
#, fuzzy
msgid "PEP 338 - Executing modules as scripts"
msgstr ":pep:`338` --  Exécuter des modules en tant que scripts"

# 0b273524c59545b799cec3dd4c1b51d8
#: whatsnew/2.5.rst:360
msgid "PEP written and  implemented by Nick Coghlan."
msgstr ""

# b3ca9166804a4d6297ad0243f06c7ef0
#: whatsnew/2.5.rst:368
msgid "PEP 341: Unified try/except/finally"
msgstr ""

# 9216678aaa784f3d9106c8f5a6d83909
#: whatsnew/2.5.rst:370
msgid ""
"Until Python 2.5, the :keyword:`try` statement came in two flavours. You "
"could use a :keyword:`finally` block to ensure that code is always executed, "
"or one or more :keyword:`except` blocks to catch  specific exceptions.  You "
"couldn't combine both :keyword:`except` blocks and a :keyword:`finally` "
"block, because generating the right bytecode for the combined version was "
"complicated and it wasn't clear what the semantics of the combined statement "
"should be."
msgstr ""

# e16f618a7abf4fdd8217eeb7c560fdae
#: whatsnew/2.5.rst:377
msgid ""
"Guido van Rossum spent some time working with Java, which does support the "
"equivalent of combining :keyword:`except` blocks and a :keyword:`finally` "
"block, and this clarified what the statement should mean.  In Python 2.5, "
"you can now write::"
msgstr ""

# 6da209db39e84eb49bacddb4ad7f95eb
#: whatsnew/2.5.rst:393
msgid ""
"The code in *block-1* is executed.  If the code raises an exception, the "
"various :keyword:`except` blocks are tested: if the exception is of class :"
"class:`Exception1`, *handler-1* is executed; otherwise if it's of class :"
"class:`Exception2`, *handler-2* is executed, and so forth.  If no exception "
"is raised, the *else-block* is executed."
msgstr ""

# 23bf26dc34c648d38d42a2fb8615571f
#: whatsnew/2.5.rst:399
msgid ""
"No matter what happened previously, the *final-block* is executed once the "
"code block is complete and any raised exceptions handled. Even if there's an "
"error in an exception handler or the *else-block* and a new exception is "
"raised, the code in the *final-block* is still run."
msgstr ""

#: whatsnew/2.5.rst:407
msgid "PEP 341 - Unifying try-except and try-finally"
msgstr ""

# 17e60063d7cc4799a5305c479e5b9bf6
#: whatsnew/2.5.rst:408
msgid "PEP written by Georg Brandl;  implementation by Thomas Lee."
msgstr ""

# 2fc4ae34ff9843dd938512dc43d61722
#: whatsnew/2.5.rst:416
msgid "PEP 342: New Generator Features"
msgstr ""

# 939ee518b60b4862b7757e2d9296792b
#: whatsnew/2.5.rst:418
msgid ""
"Python 2.5 adds a simple way to pass values *into* a generator. As "
"introduced in Python 2.3, generators only produce output; once a generator's "
"code was invoked to create an iterator, there was no way to pass any new "
"information into the function when its execution is resumed.  Sometimes the "
"ability to pass in some information would be useful.  Hackish solutions to "
"this include making the generator's code look at a global variable and then "
"changing the global variable's value, or passing in some mutable object that "
"callers then modify."
msgstr ""

# 6430a5abbeea48128907e2fe0a586384
#: whatsnew/2.5.rst:426
msgid "To refresh your memory of basic generators, here's a simple example::"
msgstr ""

# a804d9ec7c2c40f7a5cffc8df25f9981
#: whatsnew/2.5.rst:434
msgid ""
"When you call ``counter(10)``, the result is an iterator that returns the "
"values from 0 up to 9.  On encountering the :keyword:`yield` statement, the "
"iterator returns the provided value and suspends the function's execution, "
"preserving the local variables. Execution resumes on the following call to "
"the iterator's :meth:`next` method, picking up after the :keyword:`yield` "
"statement."
msgstr ""

# 777ebbcbc750410998c65f4e41460af3
#: whatsnew/2.5.rst:440
msgid ""
"In Python 2.3, :keyword:`yield` was a statement; it didn't return any "
"value.  In 2.5, :keyword:`yield` is now an expression, returning a value "
"that can be assigned to a variable or otherwise operated on::"
msgstr ""

# 112fa61c872b43eba30c8ee3da02b21c
#: whatsnew/2.5.rst:446
msgid ""
"I recommend that you always put parentheses around a :keyword:`yield` "
"expression when you're doing something with the returned value, as in the "
"above example. The parentheses aren't always necessary, but it's easier to "
"always add them instead of having to remember when they're needed."
msgstr ""

# 8535940c66c2467993ee3077211af6de
#: whatsnew/2.5.rst:451
msgid ""
"(:pep:`342` explains the exact rules, which are that a :keyword:`yield`\\ -"
"expression must always be parenthesized except when it occurs at the top-"
"level expression on the right-hand side of an assignment.  This means you "
"can write ``val = yield i`` but have to use parentheses when there's an "
"operation, as in ``val = (yield i) + 12``.)"
msgstr ""

# 16019487a60148cb99856a8953ea5e3b
#: whatsnew/2.5.rst:457
msgid ""
"Values are sent into a generator by calling its :meth:`send(value)` method.  "
"The generator's code is then resumed and the :keyword:`yield` expression "
"returns the specified *value*.  If the regular :meth:`next` method is "
"called, the :keyword:`yield` returns :const:`None`."
msgstr ""

# 42cc2bdb8926429daf67890f51cd9e6c
#: whatsnew/2.5.rst:462
msgid ""
"Here's the previous example, modified to allow changing the value of the "
"internal counter. ::"
msgstr ""

# 9f19ca20407044d0aacb72be85672da7
#: whatsnew/2.5.rst:475
msgid "And here's an example of changing the counter::"
msgstr ""

# 147acf444d5b4bd38f4df4ce5f35779c
#: whatsnew/2.5.rst:492
msgid ""
":keyword:`yield` will usually return :const:`None`, so you should always "
"check for this case.  Don't just use its value in expressions unless you're "
"sure that the :meth:`send` method will be the only method used to resume "
"your generator function."
msgstr ""

# dae61fdee4fe42b888fc323702049113
#: whatsnew/2.5.rst:497
msgid ""
"In addition to :meth:`send`, there are two other new methods on generators:"
msgstr ""

# acb0d63fccc64e8585e7dd2cf178f03b
#: whatsnew/2.5.rst:499
msgid ""
":meth:`throw(type, value=None, traceback=None)` is used to raise an "
"exception inside the generator; the exception is raised by the :keyword:"
"`yield` expression where the generator's execution is paused."
msgstr ""

# e2b96c566a8842c28a2cb9424436a99e
#: whatsnew/2.5.rst:503
msgid ""
":meth:`close` raises a new :exc:`GeneratorExit` exception inside the "
"generator to terminate the iteration.  On receiving this exception, the "
"generator's code must either raise :exc:`GeneratorExit` or :exc:"
"`StopIteration`.  Catching the :exc:`GeneratorExit` exception and returning "
"a value is illegal and will trigger a :exc:`RuntimeError`; if the function "
"raises some other exception, that exception is propagated to the caller.  :"
"meth:`close` will also be called by Python's garbage collector when the "
"generator is garbage-collected."
msgstr ""

# b71d4ecbbb074aacbf89031600f4970e
#: whatsnew/2.5.rst:511
msgid ""
"If you need to run cleanup code when a :exc:`GeneratorExit` occurs, I "
"suggest using a ``try: ... finally:`` suite instead of  catching :exc:"
"`GeneratorExit`."
msgstr ""

# 4aeba05750944a5089351430a5416851
#: whatsnew/2.5.rst:514
msgid ""
"The cumulative effect of these changes is to turn generators from one-way "
"producers of information into both producers and consumers."
msgstr ""

# 63a3ef69e1b24d8a99adc7dee094dcb3
#: whatsnew/2.5.rst:517
msgid ""
"Generators also become *coroutines*, a more generalized form of subroutines. "
"Subroutines are entered at one point and exited at another point (the top of "
"the function, and a :keyword:`return` statement), but coroutines can be "
"entered, exited, and resumed at many different points (the :keyword:`yield` "
"statements). We'll have to figure out patterns for using coroutines "
"effectively in Python."
msgstr ""

# 8622956920e44e979898ee3264dcd96b
#: whatsnew/2.5.rst:523
msgid ""
"The addition of the :meth:`close` method has one side effect that isn't "
"obvious. :meth:`close` is called when a generator is garbage-collected, so "
"this means the generator's code gets one last chance to run before the "
"generator is destroyed. This last chance means that ``try...finally`` "
"statements in generators can now be guaranteed to work; the :keyword:"
"`finally` clause will now always get a chance to run.  The syntactic "
"restriction that you couldn't mix :keyword:`yield` statements with a ``try..."
"finally`` suite has therefore been removed.  This seems like a minor bit of "
"language trivia, but using generators and ``try...finally`` is actually "
"necessary in order to implement the :keyword:`with` statement described by "
"PEP 343.  I'll look at this new statement in the following  section."
msgstr ""

# a9273aaf44424dc5a143fed38df08771
#: whatsnew/2.5.rst:535
msgid ""
"Another even more esoteric effect of this change: previously, the :attr:"
"`gi_frame` attribute of a generator was always a frame object. It's now "
"possible for :attr:`gi_frame` to be ``None`` once the generator has been "
"exhausted."
msgstr ""

#: whatsnew/2.5.rst:548
msgid "PEP 342 - Coroutines via Enhanced Generators"
msgstr ""

# b801b318cefc4970b668da30448ac833
#: whatsnew/2.5.rst:544
msgid ""
"PEP written by  Guido van Rossum and Phillip J. Eby; implemented by Phillip "
"J. Eby.  Includes examples of  some fancier uses of generators as coroutines."
msgstr ""

# 85e3556e3e144198bdea5163a21cab2c
#: whatsnew/2.5.rst:547
msgid ""
"Earlier versions of these features were proposed in  :pep:`288` by Raymond "
"Hettinger and :pep:`325` by Samuele Pedroni."
msgstr ""

# 534868ab85f34abbb2efcf426dc0c134
#: whatsnew/2.5.rst:551
msgid "http://en.wikipedia.org/wiki/Coroutine"
msgstr ""

# 6b06138c3216437cbdce384382937fbb
#: whatsnew/2.5.rst:551
msgid "The Wikipedia entry for  coroutines."
msgstr ""

# 5c7d5681f10b4854aa7669bb9acaa65c
#: whatsnew/2.5.rst:553
msgid "http://www.sidhe.org/~dan/blog/archives/000178.html"
msgstr ""

# cd08c8fdf052410f8e2f9ffcf1150f59
#: whatsnew/2.5.rst:554
msgid ""
"An explanation of coroutines from a Perl point of view, written by Dan "
"Sugalski."
msgstr ""

# 7a6e4711e1bd41eb8f79fb9099b89555
# dac5273dfcaf452cb8dba1a0cfd888ee
#: whatsnew/2.5.rst:562 whatsnew/2.6.rst:248
msgid "PEP 343: The 'with' statement"
msgstr ""

# 2dd256fd837f47188c5afdac68c4ba1e
# e56f1117cad8425c8e50bf9cc6156092
#: whatsnew/2.5.rst:564 whatsnew/2.6.rst:259
msgid ""
"The ':keyword:`with`' statement clarifies code that previously would use "
"``try...finally`` blocks to ensure that clean-up code is executed.  In this "
"section, I'll discuss the statement as it will commonly be used.  In the "
"next section, I'll examine the implementation details and show how to write "
"objects for use with this statement."
msgstr ""

# 7ff461b7f3d9431db5c6dbedcc8298ef
#: whatsnew/2.5.rst:570
msgid ""
"The ':keyword:`with`' statement is a new control-flow structure whose basic "
"structure is::"
msgstr ""

# 0aa917bbdfc04f74b1805cd3264be314
#: whatsnew/2.5.rst:576
msgid ""
"The expression is evaluated, and it should result in an object that supports "
"the context management protocol (that is, has :meth:`__enter__` and :meth:"
"`__exit__` methods."
msgstr ""

# 503aa6362dc24922979d1c4c2acc9522
# 532c4e53d7ed462ebdb6c82da3396394
#: whatsnew/2.5.rst:580 whatsnew/2.6.rst:275
msgid ""
"The object's :meth:`__enter__` is called before *with-block* is executed and "
"therefore can run set-up code. It also may return a value that is bound to "
"the name *variable*, if given.  (Note carefully that *variable* is *not* "
"assigned the result of *expression*.)"
msgstr ""

# 388a42efcb594b33a0a0b48ebade504e
# afa0b30a31d54403bae10d4c41594276
#: whatsnew/2.5.rst:585 whatsnew/2.6.rst:280
msgid ""
"After execution of the *with-block* is finished, the object's :meth:"
"`__exit__` method is called, even if the block raised an exception, and can "
"therefore run clean-up code."
msgstr ""

# b26a58ff59e747a09550fc1357acdc6d
#: whatsnew/2.5.rst:589
msgid ""
"To enable the statement in Python 2.5, you need to add the following "
"directive to your module::"
msgstr ""

# b1c26dfc590040e4952e9df8e7b5ef8f
#: whatsnew/2.5.rst:594
msgid "The statement will always be enabled in Python 2.6."
msgstr ""

# eace4dbfd6454442b2e72155b3c98b5c
# 14d2885fd4d04c50a9699d527b4882fa
#: whatsnew/2.5.rst:596 whatsnew/2.6.rst:284
msgid ""
"Some standard Python objects now support the context management protocol and "
"can be used with the ':keyword:`with`' statement. File objects are one "
"example::"
msgstr ""

# cf0133c34c3945a5ae448d05ca81eb50
# 537517ed8a1e49299b3614023b3445ef
#: whatsnew/2.5.rst:604 whatsnew/2.6.rst:292
msgid ""
"After this statement has executed, the file object in *f* will have been "
"automatically closed, even if the :keyword:`for` loop raised an exception "
"part- way through the block."
msgstr ""

# ee35fb15d68946c0b313cabf74641edd
# 38c33c26a3244e7d9d551189f122c7a6
#: whatsnew/2.5.rst:610 whatsnew/2.6.rst:298
msgid ""
"In this case, *f* is the same object created by :func:`open`, because :meth:"
"`file.__enter__` returns *self*."
msgstr ""

# cde7d193fd634563b8a5788ea94cb2aa
# 6252ac60ea0c4d139f1b2f337353447a
#: whatsnew/2.5.rst:613 whatsnew/2.6.rst:301
msgid ""
"The :mod:`threading` module's locks and condition variables  also support "
"the ':keyword:`with`' statement::"
msgstr ""

# 53cfd1cba85a467e87bbf0cf6c3f3c8c
# b5033fd53086466ab95de13bdc211b61
#: whatsnew/2.5.rst:621 whatsnew/2.6.rst:309
msgid ""
"The lock is acquired before the block is executed and always released once  "
"the block is complete."
msgstr ""

# db5e481561a249e8bb12e2f0ec5c4ead
#: whatsnew/2.5.rst:624
msgid ""
"The new :func:`localcontext` function in the :mod:`decimal` module makes it "
"easy to save and restore the current decimal context, which encapsulates the "
"desired precision and rounding characteristics for computations::"
msgstr ""

# 1fed178f6185488bb2f532a9cdf01a13
# e5253334b7fb4b55a97cec613bd9cbcc
#: whatsnew/2.5.rst:643 whatsnew/2.6.rst:331
msgid "Writing Context Managers"
msgstr ""

# 719954c2434549989621a5f72b9d8a03
# f6f63284b16c4311849f74c2d954176a
#: whatsnew/2.5.rst:645 whatsnew/2.6.rst:333
msgid ""
"Under the hood, the ':keyword:`with`' statement is fairly complicated. Most "
"people will only use ':keyword:`with`' in company with existing objects and "
"don't need to know these details, so you can skip the rest of this section "
"if you like.  Authors of new objects will need to understand the details of "
"the underlying implementation and should keep reading."
msgstr ""

# 0a45694cae6045069b2932ddd891605a
# d5502dc8874d43489505566768a91e9a
#: whatsnew/2.5.rst:651 whatsnew/2.6.rst:339
msgid "A high-level explanation of the context management protocol is:"
msgstr ""

# a686e978b9414c6e955f8773e2185333
# 19383cc3dad840849f80bfbc5de0bd66
#: whatsnew/2.5.rst:653 whatsnew/2.6.rst:341
msgid ""
"The expression is evaluated and should result in an object called a "
"\"context manager\".  The context manager must have :meth:`__enter__` and :"
"meth:`__exit__` methods."
msgstr ""

# e9f193316d6c419a9c2c1a7c9bee042e
#: whatsnew/2.5.rst:657
msgid ""
"The context manager's :meth:`__enter__` method is called.  The value "
"returned is assigned to *VAR*.  If no ``'as VAR'`` clause is present, the "
"value is simply discarded."
msgstr ""

# f5b2660265d64241bd7b01c90434f058
# 38b98652760e4db49cd361c09b6801f1
#: whatsnew/2.5.rst:661 whatsnew/2.6.rst:349
msgid "The code in *BLOCK* is executed."
msgstr ""

# 762dbf2d5d864807898635f9636c4331
#: whatsnew/2.5.rst:663
msgid ""
"If *BLOCK* raises an exception, the :meth:`__exit__(type, value, traceback)` "
"is called with the exception details, the same values returned by :func:`sys."
"exc_info`.  The method's return value controls whether the exception is re-"
"raised: any false value re-raises the exception, and ``True`` will result in "
"suppressing it.  You'll only rarely want to suppress the exception, because "
"if you do the author of the code containing the ':keyword:`with`' statement "
"will never realize anything went wrong."
msgstr ""

# 44ba356ed920479995b159e3cabf53b3
# b4e24689310848828d64eeabebea0fa6
#: whatsnew/2.5.rst:671 whatsnew/2.6.rst:360
msgid ""
"If *BLOCK* didn't raise an exception,  the :meth:`__exit__` method is still "
"called, but *type*, *value*, and *traceback* are all ``None``."
msgstr ""

# c2f5f473767742d583a68528bc116fd0
# bf9e1567f4124fdcb45152d636f00df0
#: whatsnew/2.5.rst:674 whatsnew/2.6.rst:363
msgid ""
"Let's think through an example.  I won't present detailed code but will only "
"sketch the methods necessary for a database that supports transactions."
msgstr ""

# 6d9d0c3370394f5ca8f98d942f58ca3c
# 03ff27ad6ab44e4cbea4372ccc4da7e4
#: whatsnew/2.5.rst:677 whatsnew/2.6.rst:366
msgid ""
"(For people unfamiliar with database terminology: a set of changes to the "
"database are grouped into a transaction.  Transactions can be either "
"committed, meaning that all the changes are written into the database, or "
"rolled back, meaning that the changes are all discarded and the database is "
"unchanged.  See any database textbook for more information.)"
msgstr ""

# 04d22932e837436984771a6206865e3a
# 1c7cb1a92fd043138b55cea414dc1dc6
#: whatsnew/2.5.rst:683 whatsnew/2.6.rst:372
msgid ""
"Let's assume there's an object representing a database connection. Our goal "
"will be to let the user write code like this::"
msgstr ""

# 4ccb13c746f348b2aed0dac28f520817
# 8154d88171874f78aa6317975ee09057
#: whatsnew/2.5.rst:692 whatsnew/2.6.rst:381
msgid ""
"The transaction should be committed if the code in the block runs flawlessly "
"or rolled back if there's an exception. Here's the basic interface for :"
"class:`DatabaseConnection` that I'll assume::"
msgstr ""

# 07e5b2ae92b546e3bf34de3784cd6bde
# 1d1725fa993d4ee8bff858d67718fe49
#: whatsnew/2.5.rst:705 whatsnew/2.6.rst:394
msgid ""
"The :meth:`__enter__` method is pretty easy, having only to start a new "
"transaction.  For this application the resulting cursor object would be a "
"useful result, so the method will return it.  The user can then add ``as "
"cursor`` to their ':keyword:`with`' statement to bind the cursor to a "
"variable name. ::"
msgstr ""

# ad04ead8ed6a47fe9a588c7dc9074c5a
# f142d7cad6664d788a3ded93103781d9
#: whatsnew/2.5.rst:717 whatsnew/2.6.rst:406
msgid ""
"The :meth:`__exit__` method is the most complicated because it's where most "
"of the work has to be done.  The method has to check if an exception "
"occurred.  If there was no exception, the transaction is committed.  The "
"transaction is rolled back if there was an exception."
msgstr ""

# 608f532f78d14347bbf63f6b677ac5ed
# 8be97bab17414d4c8d9708a83defc54c
#: whatsnew/2.5.rst:722 whatsnew/2.6.rst:411
msgid ""
"In the code below, execution will just fall off the end of the function, "
"returning the default value of ``None``.  ``None`` is false, so the "
"exception will be re-raised automatically.  If you wished, you could be more "
"explicit and add a :keyword:`return` statement at the marked location. ::"
msgstr ""

# 1c381ae44ba24cf6bf6664adabf5864f
# 67d19965335d4b56a3c185d225ce6344
#: whatsnew/2.5.rst:742 whatsnew/2.6.rst:431
msgid "The contextlib module"
msgstr ""

# 58ca222a1be1481da107d08a6c40e034
#: whatsnew/2.5.rst:744
msgid ""
"The new :mod:`contextlib` module provides some functions and a decorator "
"that are useful for writing objects for use with the ':keyword:`with`' "
"statement."
msgstr ""

# 6627188046d04443b1c55124f4a50fe0
# 3b4f80ee4b154d85aad4f3f4fd28b53f
#: whatsnew/2.5.rst:747 whatsnew/2.6.rst:436
msgid ""
"The decorator is called :func:`contextmanager`, and lets you write a single "
"generator function instead of defining a new class.  The generator should "
"yield exactly one value.  The code up to the :keyword:`yield` will be "
"executed as the :meth:`__enter__` method, and the value yielded will be the "
"method's return value that will get bound to the variable in the ':keyword:"
"`with`' statement's :keyword:`as` clause, if any.  The code after the :"
"keyword:`yield` will be executed in the :meth:`__exit__` method.  Any "
"exception raised in the block will be raised by the :keyword:`yield` "
"statement."
msgstr ""

# 7fd245a672694018bbc571f9f5bf1c9f
#: whatsnew/2.5.rst:756
msgid ""
"Our database example from the previous section could be written  using this "
"decorator as::"
msgstr ""

# 0f95c725fbb04f99b46af6d51916c170
#: whatsnew/2.5.rst:776
msgid ""
"The :mod:`contextlib` module also has a :func:`nested(mgr1, mgr2, ...)` "
"function that combines a number of context managers so you don't need to "
"write nested ':keyword:`with`' statements.  In this example, the single ':"
"keyword:`with`' statement both starts a database transaction and acquires a "
"thread lock::"
msgstr ""

# aa1928e53c4d44fc9d399249a9b20dd0
#: whatsnew/2.5.rst:785
msgid ""
"Finally, the :func:`closing(object)` function returns *object* so that it "
"can be bound to a variable, and calls ``object.close`` at the end of the "
"block. ::"
msgstr ""

#: whatsnew/2.5.rst:802 whatsnew/2.6.rst:492
msgid "PEP 343 - The \"with\" statement"
msgstr ""

# e9ebcecb7a6f4790b894a49f7a77bc9d
# 4761c223a7dd477a99735fd654b6616a
#: whatsnew/2.5.rst:799 whatsnew/2.6.rst:489
msgid ""
"PEP written by Guido van Rossum and Nick Coghlan; implemented by Mike Bland, "
"Guido van Rossum, and Neal Norwitz.  The PEP shows the code generated for a "
"':keyword:`with`' statement, which can be helpful in learning how the "
"statement works."
msgstr ""

# f49ccc1442f146c0a82748ece2594cb8
# 0a543e231ecb49c18bd9e07ac0c775fe
#: whatsnew/2.5.rst:804 whatsnew/2.6.rst:494
msgid "The documentation  for the :mod:`contextlib` module."
msgstr ""

# f85489dcdaa845fbbc21a6d0b7d571ce
#: whatsnew/2.5.rst:812
msgid "PEP 352: Exceptions as New-Style Classes"
msgstr ""

# 3805e52ef5d743b5bf9ce2ac98fc4b5e
#: whatsnew/2.5.rst:814
msgid ""
"Exception classes can now be new-style classes, not just classic classes, "
"and the built-in :exc:`Exception` class and all the standard built-in "
"exceptions (:exc:`NameError`, :exc:`ValueError`, etc.) are now new-style "
"classes."
msgstr ""

# b4b902a794bb4f1dbb06f5739414318c
#: whatsnew/2.5.rst:818
msgid ""
"The inheritance hierarchy for exceptions has been rearranged a bit. In 2.5, "
"the inheritance relationships are::"
msgstr ""

# ff9556425c6d4e2ba5d4533a9d4f5ff5
#: whatsnew/2.5.rst:827
msgid ""
"This rearrangement was done because people often want to catch all "
"exceptions that indicate program errors.  :exc:`KeyboardInterrupt` and :exc:"
"`SystemExit` aren't errors, though, and usually represent an explicit action "
"such as the user hitting Control-C or code calling :func:`sys.exit`.  A bare "
"``except:`` will catch all exceptions, so you commonly need to list :exc:"
"`KeyboardInterrupt` and :exc:`SystemExit` in order to re-raise them.  The "
"usual pattern is::"
msgstr ""

# 2274901e48bb4355b84ddeb8b49e3e18
#: whatsnew/2.5.rst:842
msgid ""
"In Python 2.5, you can now write ``except Exception`` to achieve the same "
"result, catching all the exceptions that usually indicate errors  but "
"leaving :exc:`KeyboardInterrupt` and :exc:`SystemExit` alone.  As in "
"previous versions, a bare ``except:`` still catches all exceptions."
msgstr ""

# 73ed3d6b0cc64586a9466f73cee95dba
#: whatsnew/2.5.rst:847
msgid ""
"The goal for Python 3.0 is to require any class raised as an exception to "
"derive from :exc:`BaseException` or some descendant of :exc:`BaseException`, "
"and future releases in the Python 2.x series may begin to enforce this "
"constraint. Therefore, I suggest you begin making all your exception classes "
"derive from :exc:`Exception` now.  It's been suggested that the bare "
"``except:`` form should be removed in Python 3.0, but Guido van Rossum "
"hasn't decided whether to do this or not."
msgstr ""

# b7b03cad30eb4a27af9bc4618c649ab6
#: whatsnew/2.5.rst:855
msgid ""
"Raising of strings as exceptions, as in the statement ``raise \"Error "
"occurred\"``, is deprecated in Python 2.5 and will trigger a warning.  The "
"aim is to be able to remove the string-exception feature in a few releases."
msgstr ""

#: whatsnew/2.5.rst:862
msgid "PEP 352 - Required Superclass for Exceptions"
msgstr ""

# dd298b48eaed4eeea502fc3ca7519d0e
#: whatsnew/2.5.rst:863
msgid ""
"PEP written by  Brett Cannon and Guido van Rossum; implemented by Brett "
"Cannon."
msgstr ""

# 63d44ab67e3f4009b2fcf007cac2ee28
#: whatsnew/2.5.rst:871
msgid "PEP 353: Using ssize_t as the index type"
msgstr ""

# d266be575a554d9e854a7fe7e3dedaf4
#: whatsnew/2.5.rst:873
msgid ""
"A wide-ranging change to Python's C API, using a new  :c:type:`Py_ssize_t` "
"type definition instead of :c:type:`int`,  will permit the interpreter to "
"handle more data on 64-bit platforms. This change doesn't affect Python's "
"capacity on 32-bit platforms."
msgstr ""

# cc9412ca76684ee4ad4d66cda82f4d64
#: whatsnew/2.5.rst:878
msgid ""
"Various pieces of the Python interpreter used C's :c:type:`int` type to "
"store sizes or counts; for example, the number of items in a list or tuple "
"were stored in an :c:type:`int`.  The C compilers for most 64-bit platforms "
"still define :c:type:`int` as a 32-bit type, so that meant that lists could "
"only hold up to ``2**31 - 1`` = 2147483647 items. (There are actually a few "
"different programming models that 64-bit C compilers can use -- see http://"
"www.unix.org/version2/whatsnew/lp64_wp.html for a discussion -- but the most "
"commonly available model leaves :c:type:`int` as 32 bits.)"
msgstr ""

# 13705a2252ee47e8a14c0de025e088d1
#: whatsnew/2.5.rst:887
msgid ""
"A limit of 2147483647 items doesn't really matter on a 32-bit platform "
"because you'll run out of memory before hitting the length limit. Each list "
"item requires space for a pointer, which is 4 bytes, plus space for a :c:"
"type:`PyObject` representing the item.  2147483647\\*4 is already more bytes "
"than a 32-bit address space can contain."
msgstr ""

# bff69386ab2a41d6a58b99040a9a57e5
#: whatsnew/2.5.rst:893
msgid ""
"It's possible to address that much memory on a 64-bit platform, however.  "
"The pointers for a list that size would only require 16 GiB of space, so "
"it's not unreasonable that Python programmers might construct lists that "
"large. Therefore, the Python interpreter had to be changed to use some type "
"other than :c:type:`int`, and this will be a 64-bit type on 64-bit "
"platforms.  The change will cause incompatibilities on 64-bit machines, so "
"it was deemed worth making the transition now, while the number of 64-bit "
"users is still relatively small. (In 5 or 10 years, we may *all* be on 64-"
"bit machines, and the transition would be more painful then.)"
msgstr ""

# fd84a6b0a0b644bc98766da5e2cb06dc
#: whatsnew/2.5.rst:903
msgid ""
"This change most strongly affects authors of C extension modules.   Python "
"strings and container types such as lists and tuples  now use :c:type:"
"`Py_ssize_t` to store their size.   Functions such as :c:func:`PyList_Size`  "
"now return :c:type:`Py_ssize_t`.  Code in extension modules may therefore "
"need to have some variables changed to :c:type:`Py_ssize_t`."
msgstr ""

# f9369ee6530c4a5392ab71796c94e130
#: whatsnew/2.5.rst:909
msgid ""
"The :c:func:`PyArg_ParseTuple` and :c:func:`Py_BuildValue` functions have a "
"new conversion code, ``n``, for :c:type:`Py_ssize_t`.   :c:func:"
"`PyArg_ParseTuple`'s ``s#`` and ``t#`` still output :c:type:`int` by "
"default, but you can define the macro  :c:macro:`PY_SSIZE_T_CLEAN` before "
"including :file:`Python.h`  to make them return :c:type:`Py_ssize_t`."
msgstr ""

# a79ef3933b394a8db1bcdb4772b5bf51
#: whatsnew/2.5.rst:915
msgid ""
":pep:`353` has a section on conversion guidelines that  extension authors "
"should read to learn about supporting 64-bit platforms."
msgstr ""

#: whatsnew/2.5.rst:921
msgid "PEP 353 - Using ssize_t as the index type"
msgstr ""

# 039b4d26d6d24887806bf18e313023bb
#: whatsnew/2.5.rst:922
msgid "PEP written and implemented by Martin von Löwis."
msgstr ""

# 8fcc1271e22c4ca9959a1990f23ca0b8
#: whatsnew/2.5.rst:930
msgid "PEP 357: The '__index__' method"
msgstr ""

# 2bb5b4720ce146b08b579535a0b35a64
#: whatsnew/2.5.rst:932
msgid ""
"The NumPy developers had a problem that could only be solved by adding a new "
"special method, :meth:`__index__`.  When using slice notation, as in "
"``[start:stop:step]``, the values of the *start*, *stop*, and *step* indexes "
"must all be either integers or long integers.  NumPy defines a variety of "
"specialized integer types corresponding to unsigned and signed integers of "
"8, 16, 32, and 64 bits, but there was no way to signal that these types "
"could be used as slice indexes."
msgstr ""

# 894e97e4ad7a49faa38e2bf720535037
#: whatsnew/2.5.rst:940
msgid ""
"Slicing can't just use the existing :meth:`__int__` method because that "
"method is also used to implement coercion to integers.  If slicing used :"
"meth:`__int__`, floating-point numbers would also become legal slice indexes "
"and that's clearly an undesirable behaviour."
msgstr ""

# 2cb1c59bedca411784ddaaeca2470d0d
#: whatsnew/2.5.rst:945
msgid ""
"Instead, a new special method called :meth:`__index__` was added.  It takes "
"no arguments and returns an integer giving the slice index to use.  For "
"example::"
msgstr ""

# 68cdbd05e699434eb28b2dd316a596f1
#: whatsnew/2.5.rst:952
msgid ""
"The return value must be either a Python integer or long integer. The "
"interpreter will check that the type returned is correct, and raises a :exc:"
"`TypeError` if this requirement isn't met."
msgstr ""

# f3acf874da2a476cb85953f54360358b
#: whatsnew/2.5.rst:956
msgid ""
"A corresponding :attr:`nb_index` slot was added to the C-level :c:type:"
"`PyNumberMethods` structure to let C extensions implement this protocol. :c:"
"func:`PyNumber_Index(obj)` can be used in extension code to call the :meth:"
"`__index__` function and retrieve its result."
msgstr ""

#: whatsnew/2.5.rst:964
msgid "PEP 357 - Allowing Any Object to be Used for Slicing"
msgstr ""

# 058db440264544a0b5dac2fae2906193
#: whatsnew/2.5.rst:965
msgid "PEP written  and implemented by Travis Oliphant."
msgstr ""

# e999ad91253343ca814a6bcb8082a42c
#: whatsnew/2.5.rst:975
msgid ""
"Here are all of the changes that Python 2.5 makes to the core Python "
"language."
msgstr ""

# fac6563d9d9341febe1cf95fa431d233
#: whatsnew/2.5.rst:977
msgid ""
"The :class:`dict` type has a new hook for letting subclasses provide a "
"default value when a key isn't contained in the dictionary. When a key isn't "
"found, the dictionary's :meth:`__missing__(key)` method will be called.  "
"This hook is used to implement the new :class:`defaultdict` class in the :"
"mod:`collections` module.  The following example defines a dictionary  that "
"returns zero for any missing key::"
msgstr ""

# 8fb2308280b0456abfbec2a5777c12d8
#: whatsnew/2.5.rst:992
msgid ""
"Both 8-bit and Unicode strings have new :meth:`partition(sep)`  and :meth:"
"`rpartition(sep)` methods that simplify a common use case."
msgstr ""

# 4d55646625fb4575bc0e0968856f0291
#: whatsnew/2.5.rst:995
msgid ""
"The :meth:`find(S)` method is often used to get an index which is then used "
"to slice the string and obtain the pieces that are before and after the "
"separator. :meth:`partition(sep)` condenses this pattern into a single "
"method call that returns a 3-tuple containing the substring before the "
"separator, the separator itself, and the substring after the separator.  If "
"the separator isn't found, the first element of the tuple is the entire "
"string and the other two elements are empty.  :meth:`rpartition(sep)` also "
"returns a 3-tuple but starts searching from the end of the string; the ``r`` "
"stands for 'reverse'."
msgstr ""

# f7bf486ae38f4e26b7ac34cad6b77e63
#: whatsnew/2.5.rst:1004
msgid "Some examples::"
msgstr "Quelques exemples ::"

# b414b72b7c444d588fe373e677e4f9c4
#: whatsnew/2.5.rst:1017
msgid ""
"(Implemented by Fredrik Lundh following a suggestion by Raymond Hettinger.)"
msgstr ""

# c81edd96145d411a8b9fc347dc4504e8
#: whatsnew/2.5.rst:1019
msgid ""
"The :meth:`startswith` and :meth:`endswith` methods of string types now "
"accept tuples of strings to check for. ::"
msgstr ""

# fc009b947ef0410fba374f8d789cd8ce
#: whatsnew/2.5.rst:1025
msgid "(Implemented by Georg Brandl following a suggestion by Tom Lynn.)"
msgstr ""

# 78eb03b9e89e4138a13701fa66b66ff7
#: whatsnew/2.5.rst:1029
msgid ""
"The :func:`min` and :func:`max` built-in functions gained a ``key`` keyword "
"parameter analogous to the ``key`` argument for :meth:`sort`.  This "
"parameter supplies a function that takes a single argument and is called for "
"every value in the list; :func:`min`/:func:`max` will return the element "
"with the smallest/largest return value from this function. For example, to "
"find the longest string in a list, you can do::"
msgstr ""

# 56e032399afa425bb3f3c2e191d601c0
#: whatsnew/2.5.rst:1042
msgid "(Contributed by Steven Bethard and Raymond Hettinger.)"
msgstr ""

# ad07cf426a1c417bad5843337ed1c0bc
#: whatsnew/2.5.rst:1044
msgid ""
"Two new built-in functions, :func:`any` and :func:`all`, evaluate whether an "
"iterator contains any true or false values.  :func:`any` returns :const:"
"`True` if any value returned by the iterator is true; otherwise it will "
"return :const:`False`.  :func:`all` returns :const:`True` only if all of the "
"values returned by the iterator evaluate as true. (Suggested by Guido van "
"Rossum, and implemented by Raymond Hettinger.)"
msgstr ""

# 3607d8ab0532456697b8cc8e49b9892a
#: whatsnew/2.5.rst:1051
msgid ""
"The result of a class's :meth:`__hash__` method can now be either a long "
"integer or a regular integer.  If a long integer is returned, the hash of "
"that value is taken.  In earlier versions the hash value was required to be "
"a regular integer, but in 2.5 the :func:`id` built-in was changed to always "
"return non-negative numbers, and users often seem to use ``id(self)`` in :"
"meth:`__hash__` methods (though this is discouraged)."
msgstr ""

# 630f3397f47646089ec9d68264846b7b
#: whatsnew/2.5.rst:1060
msgid ""
"ASCII is now the default encoding for modules.  It's now  a syntax error if "
"a module contains string literals with 8-bit characters but doesn't have an "
"encoding declaration.  In Python 2.4 this triggered a warning, not a syntax "
"error.  See :pep:`263`  for how to declare a module's encoding; for example, "
"you might add  a line like this near the top of the source file::"
msgstr ""

# 83225747a81242c298eb582d24493b2c
#: whatsnew/2.5.rst:1068
msgid ""
"A new warning, :class:`UnicodeWarning`, is triggered when  you attempt to "
"compare a Unicode string and an 8-bit string  that can't be converted to "
"Unicode using the default ASCII encoding.   The result of the comparison is "
"false::"
msgstr ""

# 0cc113c9f3cd459ca46e46fefaa96500
#: whatsnew/2.5.rst:1080
msgid ""
"Previously this would raise a :class:`UnicodeDecodeError` exception, but in "
"2.5 this could result in puzzling problems when accessing a dictionary.  If "
"you looked up ``unichr(128)`` and ``chr(128)`` was being used as a key, "
"you'd get a :class:`UnicodeDecodeError` exception.  Other changes in 2.5 "
"resulted in this exception being raised instead of suppressed by the code "
"in :file:`dictobject.c` that implements dictionaries."
msgstr ""

# 07facd9794e14e9e9782736ecd85b8dd
#: whatsnew/2.5.rst:1087
msgid ""
"Raising an exception for such a comparison is strictly correct, but the "
"change might have broken code, so instead  :class:`UnicodeWarning` was "
"introduced."
msgstr ""

# fd1ed2ac05ea41eca394914aedf77a9c
#: whatsnew/2.5.rst:1090
msgid "(Implemented by Marc-André Lemburg.)"
msgstr ""

# 8e109a5f9a2a4405b905033690915767
#: whatsnew/2.5.rst:1092
msgid ""
"One error that Python programmers sometimes make is forgetting to include "
"an :file:`__init__.py` module in a package directory. Debugging this mistake "
"can be confusing, and usually requires running Python with the :option:`-v` "
"switch to log all the paths searched. In Python 2.5, a new :exc:"
"`ImportWarning` warning is triggered when an import would have picked up a "
"directory as a package but no :file:`__init__.py` was found.  This warning "
"is silently ignored by default; provide the :option:`-Wd` option when "
"running the Python executable to display the warning message. (Implemented "
"by Thomas Wouters.)"
msgstr ""

# f7be9b9e6a4a4c17be23145bdecccab2
#: whatsnew/2.5.rst:1101
msgid ""
"The list of base classes in a class definition can now be empty.   As an "
"example, this is now legal::"
msgstr ""

# 80c2f238e9c5443ba29e1790cefea2d3
#: whatsnew/2.5.rst:1107
msgid "(Implemented by Brett Cannon.)"
msgstr ""

# 9a6c001554dd47c991e2de5d07bb9035
#: whatsnew/2.5.rst:1115
msgid "Interactive Interpreter Changes"
msgstr ""

# 170e8329837c4b1e8eda83323cb7a507
#: whatsnew/2.5.rst:1117
msgid ""
"In the interactive interpreter, ``quit`` and ``exit``  have long been "
"strings so that new users get a somewhat helpful message when they try to "
"quit::"
msgstr ""

# 6d039d6526d8451580b42228a7298c11
#: whatsnew/2.5.rst:1123
msgid ""
"In Python 2.5, ``quit`` and ``exit`` are now objects that still produce "
"string representations of themselves, but are also callable. Newbies who try "
"``quit()`` or ``exit()`` will now exit the interpreter as they expect.  "
"(Implemented by Georg Brandl.)"
msgstr ""

# 728518e4e867432592bca9de23f9879a
#: whatsnew/2.5.rst:1128
msgid ""
"The Python executable now accepts the standard long options  :option:`--"
"help` and :option:`--version`; on Windows,  it also accepts the :option:`/?` "
"option for displaying a help message. (Implemented by Georg Brandl.)"
msgstr ""

# 9a43527f5c974f3388545422ddae5fa5
#: whatsnew/2.5.rst:1140
msgid ""
"Several of the optimizations were developed at the NeedForSpeed sprint, an "
"event held in Reykjavik, Iceland, from May 21--28 2006. The sprint focused "
"on speed enhancements to the CPython implementation and was funded by EWT "
"LLC with local support from CCP Games.  Those optimizations added at this "
"sprint are specially marked in the following list."
msgstr ""

# 1a0bfbe2d36448e9b924b0dd60fb7cce
#: whatsnew/2.5.rst:1146
msgid ""
"When they were introduced  in Python 2.4, the built-in :class:`set` and :"
"class:`frozenset` types were built on top of Python's dictionary type.   In "
"2.5 the internal data structure has been customized for implementing sets, "
"and as a result sets will use a third less memory and are somewhat faster. "
"(Implemented by Raymond Hettinger.)"
msgstr ""

# 67041a5b54654a3987f45397e6721a2e
#: whatsnew/2.5.rst:1152
msgid ""
"The speed of some Unicode operations, such as finding substrings, string "
"splitting, and character map encoding and decoding, has been improved. "
"(Substring search and splitting improvements were added by Fredrik Lundh and "
"Andrew Dalke at the NeedForSpeed sprint. Character maps were improved by "
"Walter Dörwald and Martin von Löwis.)"
msgstr ""

# a6cd78de327643ff9178207fc6150ea6
#: whatsnew/2.5.rst:1160
msgid ""
"The :func:`long(str, base)` function is now faster on long digit strings "
"because fewer intermediate results are calculated.  The peak is for strings "
"of around 800--1000 digits where  the function is 6 times faster. "
"(Contributed by Alan McIntyre and committed at the NeedForSpeed sprint.)"
msgstr ""

# 0cf01be38502483b93c93450416bc33a
#: whatsnew/2.5.rst:1167
msgid ""
"It's now illegal to mix iterating over a file  with ``for line in file`` and "
"calling  the file object's :meth:`read`/:meth:`readline`/:meth:`readlines` "
"methods.  Iteration uses an internal buffer and the  :meth:`read\\*` methods "
"don't use that buffer.   Instead they would return the data following the "
"buffer, causing the data to appear out of order.  Mixing iteration and these "
"methods will now trigger a :exc:`ValueError` from the :meth:`read\\*` "
"method. (Implemented by Thomas Wouters.)"
msgstr ""

# 50ec27a482bd403889246ea7a24f3f31
#: whatsnew/2.5.rst:1177
msgid ""
"The :mod:`struct` module now compiles structure format  strings into an "
"internal representation and caches this representation, yielding a 20% "
"speedup. (Contributed by Bob Ippolito at the NeedForSpeed sprint.)"
msgstr ""

# 1afc28eda66641efaaeb5f41111c2259
#: whatsnew/2.5.rst:1181
msgid ""
"The :mod:`re` module got a 1 or 2% speedup by switching to  Python's "
"allocator functions instead of the system's  :c:func:`malloc` and :c:func:"
"`free`. (Contributed by Jack Diederich at the NeedForSpeed sprint.)"
msgstr ""

# f71098f47a704181ade7bc9ab636cf72
#: whatsnew/2.5.rst:1185
msgid ""
"The code generator's peephole optimizer now performs simple constant folding "
"in expressions.  If you write something like ``a = 2+3``, the code generator "
"will do the arithmetic and produce code corresponding to ``a = 5``.  "
"(Proposed and implemented  by Raymond Hettinger.)"
msgstr ""

# c5601200d978487da552baad743b54f1
#: whatsnew/2.5.rst:1190
msgid ""
"Function calls are now faster because code objects now keep  the most "
"recently finished frame (a \"zombie frame\") in an internal field of the "
"code object, reusing it the next time the code object is invoked.  (Original "
"patch by Michael Hudson, modified by Armin Rigo and Richard Jones; committed "
"at the NeedForSpeed sprint.)  Frame objects are also slightly smaller, which "
"may improve cache locality and reduce memory usage a bit.  (Contributed by "
"Neal Norwitz.)"
msgstr ""

# 45c0951216a8446896bde9fa69e8c117
#: whatsnew/2.5.rst:1200
msgid ""
"Python's built-in exceptions are now new-style classes, a change that speeds "
"up instantiation considerably.  Exception handling in Python 2.5 is "
"therefore about 30% faster than in 2.4. (Contributed by Richard Jones, Georg "
"Brandl and Sean Reifschneider at the NeedForSpeed sprint.)"
msgstr ""

# 410a3123344d4daeb0ae5e47ff7ca0f6
#: whatsnew/2.5.rst:1205
msgid ""
"Importing now caches the paths tried, recording whether  they exist or not "
"so that the interpreter makes fewer  :c:func:`open` and :c:func:`stat` calls "
"on startup. (Contributed by Martin von Löwis and Georg Brandl.)"
msgstr ""

# d20b760038bc492084f9345d7921a1a6
#: whatsnew/2.5.rst:1217
msgid "New, Improved, and Removed Modules"
msgstr ""

# 77cbe7c3add44b9a8680d1b17c8d9367
#: whatsnew/2.5.rst:1219
msgid ""
"The standard library received many enhancements and bug fixes in Python 2.5. "
"Here's a partial list of the most notable changes, sorted alphabetically by "
"module name. Consult the :file:`Misc/NEWS` file in the source tree for a "
"more complete list of changes, or look through the SVN logs for all the "
"details."
msgstr ""

# ec54b1f5ff10417389838cdc747f1615
#: whatsnew/2.5.rst:1224
msgid ""
"The :mod:`audioop` module now supports the a-LAW encoding, and the code for "
"u-LAW encoding has been improved.  (Contributed by Lars Immisch.)"
msgstr ""

# cb4d6d2b16ec47608a738ca9514b576b
#: whatsnew/2.5.rst:1227
msgid ""
"The :mod:`codecs` module gained support for incremental codecs.  The :func:"
"`codec.lookup` function now returns a :class:`CodecInfo` instance instead of "
"a tuple. :class:`CodecInfo` instances behave like a 4-tuple to preserve "
"backward compatibility but also have the attributes :attr:`encode`, :attr:"
"`decode`, :attr:`incrementalencoder`, :attr:`incrementaldecoder`, :attr:"
"`streamwriter`, and :attr:`streamreader`.  Incremental codecs  can receive "
"input and produce output in multiple chunks; the output is the same as if "
"the entire input was fed to the non-incremental codec. See the :mod:`codecs` "
"module documentation for details. (Designed and implemented by Walter "
"Dörwald.)"
msgstr ""

# b90aa16159ea444da004f21709bb6166
#: whatsnew/2.5.rst:1239
msgid ""
"The :mod:`collections` module gained a new type, :class:`defaultdict`, that "
"subclasses the standard :class:`dict` type.  The new type mostly behaves "
"like a dictionary but constructs a default value when a key isn't present, "
"automatically adding it to the dictionary for the requested key value."
msgstr ""

# 3af1159ebdba47ca8d72dfe056cae88c
#: whatsnew/2.5.rst:1244
msgid ""
"The first argument to :class:`defaultdict`'s constructor is a factory "
"function that gets called whenever a key is requested but not found. This "
"factory function receives no arguments, so you can use built-in type "
"constructors such as :func:`list` or :func:`int`.  For example,  you can "
"make an index of words based on their initial letter like this::"
msgstr ""

# 5a60377673d3452e92cfce69cb85c24d
#: whatsnew/2.5.rst:1260
msgid "Printing ``index`` results in the following output::"
msgstr ""

# 3f26973c60c4442d96014530d028b775
#: whatsnew/2.5.rst:1268
msgid "(Contributed by Guido van Rossum.)"
msgstr ""

# 052b3751f85e4251b5f53f6c27408c88
#: whatsnew/2.5.rst:1270
msgid ""
"The :class:`deque` double-ended queue type supplied by the :mod:"
"`collections` module now has a :meth:`remove(value)` method that removes the "
"first occurrence of *value* in the queue, raising :exc:`ValueError` if the "
"value isn't found. (Contributed by Raymond Hettinger.)"
msgstr ""

# 7279a64afc5c43718774943ed850d5f6
#: whatsnew/2.5.rst:1275
msgid ""
"New module: The :mod:`contextlib` module contains helper functions for use "
"with the new ':keyword:`with`' statement.  See section :ref:`contextlibmod` "
"for more about this module."
msgstr ""

# 6c3561effeef4aa8b61016dfa7e1971c
#: whatsnew/2.5.rst:1279
msgid ""
"New module: The :mod:`cProfile` module is a C implementation of  the "
"existing :mod:`profile` module that has much lower overhead. The module's "
"interface is the same as :mod:`profile`: you run ``cProfile.run('main()')`` "
"to profile a function, can save profile data to a file, etc.  It's not yet "
"known if the Hotshot profiler, which is also written in C but doesn't match "
"the :mod:`profile` module's interface, will continue to be maintained in "
"future versions of Python.  (Contributed by Armin Rigo.)"
msgstr ""

# deaf2da323a74b38bf1040226d4305e9
#: whatsnew/2.5.rst:1287
msgid ""
"Also, the :mod:`pstats` module for analyzing the data measured by the "
"profiler now supports directing the output to any file object by supplying a "
"*stream* argument to the :class:`Stats` constructor. (Contributed by Skip "
"Montanaro.)"
msgstr ""

# 15e9ab2e794945f3a41dee3176c082ac
#: whatsnew/2.5.rst:1291
msgid ""
"The :mod:`csv` module, which parses files in comma-separated value format, "
"received several enhancements and a number of bugfixes.  You can now set the "
"maximum size in bytes of a field by calling the :meth:`csv."
"field_size_limit(new_limit)` function; omitting the *new_limit* argument "
"will return the currently-set limit.  The :class:`reader` class now has a :"
"attr:`line_num` attribute that counts the number of physical lines read from "
"the source; records can span multiple physical lines, so :attr:`line_num` is "
"not the same as the number of records read."
msgstr ""

# 7217995e4ddd42e2987d77b3365f369f
#: whatsnew/2.5.rst:1300
msgid ""
"The CSV parser is now stricter about multi-line quoted fields. Previously, "
"if a line ended within a quoted field without a terminating newline "
"character, a newline would be inserted into the returned field. This "
"behavior caused problems when reading files that contained carriage return "
"characters within fields, so the code was changed to return the field "
"without inserting newlines. As a consequence, if newlines embedded within "
"fields are important, the input should be split into lines in a manner that "
"preserves the newline characters."
msgstr ""

# a6479837a41f4e59bda2d3b897cffc2f
#: whatsnew/2.5.rst:1308
msgid "(Contributed by Skip Montanaro and Andrew McNamara.)"
msgstr ""

# 87fa23dccf154317952e36c0d78c64d3
#: whatsnew/2.5.rst:1310
msgid ""
"The :class:`datetime` class in the :mod:`datetime`  module now has a :meth:"
"`strptime(string, format)`  method for parsing date strings, contributed by "
"Josh Spoerri. It uses the same format characters as :func:`time.strptime` "
"and :func:`time.strftime`::"
msgstr ""

# a10a73e87868428286134accc00b9bac
#: whatsnew/2.5.rst:1320
msgid ""
"The :meth:`SequenceMatcher.get_matching_blocks` method in the :mod:`difflib` "
"module now guarantees to return a minimal list of blocks describing matching "
"subsequences.  Previously, the algorithm would occasionally break a block of "
"matching elements into two list entries. (Enhancement by Tim Peters.)"
msgstr ""

# 5ed05628b2884ed7b8f1af995b85c060
#: whatsnew/2.5.rst:1325
msgid ""
"The :mod:`doctest` module gained a ``SKIP`` option that keeps an example "
"from being executed at all.  This is intended for code snippets that are "
"usage examples intended for the reader and aren't actually test cases."
msgstr ""

# f1f6f70f58f04bcaa7aad9ceb8ada5a2
#: whatsnew/2.5.rst:1329
msgid ""
"An *encoding* parameter was added to the :func:`testfile` function and the :"
"class:`DocFileSuite` class to specify the file's encoding.  This makes it "
"easier to use non-ASCII characters in  tests contained within a docstring. "
"(Contributed by Bjorn Tillenius.)"
msgstr ""

# d9902456c02a4ac195dee705e6287afc
#: whatsnew/2.5.rst:1336
msgid ""
"The :mod:`email` package has been updated to version 4.0. (Contributed by "
"Barry Warsaw.)"
msgstr ""

# 47f5c33b1d5a47e2b3e94a8f90217f84
#: whatsnew/2.5.rst:1344
msgid ""
"The :mod:`fileinput` module was made more flexible. Unicode filenames are "
"now supported, and a *mode* parameter that defaults to ``\"r\"`` was added "
"to the :func:`input` function to allow opening files in binary or :term:"
"`universal newlines` mode.  Another new parameter, *openhook*, lets you use "
"a function other than :func:`open`  to open the input files.  Once you're "
"iterating over the set of files, the :class:`FileInput` object's new :meth:"
"`fileno` returns the file descriptor for the currently opened file. "
"(Contributed by Georg Brandl.)"
msgstr ""

# 84abb14f1c0640ee808bd7fc991192f1
#: whatsnew/2.5.rst:1353
msgid ""
"In the :mod:`gc` module, the new :func:`get_count` function returns a 3-"
"tuple containing the current collection counts for the three GC "
"generations.  This is accounting information for the garbage collector; when "
"these counts reach a specified threshold, a garbage collection sweep will be "
"made.  The existing :func:`gc.collect` function now takes an optional "
"*generation* argument of 0, 1, or 2 to specify which generation to collect. "
"(Contributed by Barry Warsaw.)"
msgstr ""

# 6de9ac88d5384320aa308bb3fcbf4f21
#: whatsnew/2.5.rst:1360
msgid ""
"The :func:`nsmallest` and  :func:`nlargest` functions in the :mod:`heapq` "
"module  now support a ``key`` keyword parameter similar to the one provided "
"by the :func:`min`/:func:`max` functions and the :meth:`sort` methods.  For "
"example::"
msgstr ""

# 501ce5a4da254c7d98dbed284a4ba4ec
#: whatsnew/2.5.rst:1374
msgid ""
"The :func:`itertools.islice` function now accepts ``None`` for the start and "
"step arguments.  This makes it more compatible with the attributes of slice "
"objects, so that you can now write the following::"
msgstr ""

# 9b3cc93cae234569a67fb9131b8f4e5b
#: whatsnew/2.5.rst:1383
msgid ""
"The :func:`format` function in the :mod:`locale` module has been modified "
"and two new functions were added, :func:`format_string` and :func:`currency`."
msgstr ""

# c00d4bc8f4b2445b9b0a273caf7c1714
#: whatsnew/2.5.rst:1386
msgid ""
"The :func:`format` function's *val* parameter could previously be a string "
"as long as no more than one %char specifier appeared; now the parameter must "
"be exactly one %char specifier with no surrounding text.  An optional "
"*monetary* parameter was also added which, if ``True``, will use the "
"locale's rules for formatting currency in placing a separator between groups "
"of three digits."
msgstr ""

# 3bcd5ab182b348feb12ab443a68eae33
#: whatsnew/2.5.rst:1392
msgid ""
"To format strings with multiple %char specifiers, use the new :func:"
"`format_string` function that works like :func:`format` but also supports "
"mixing %char specifiers with arbitrary text."
msgstr ""

# 1129f17d39b74968a18baf5f9edb3a8d
#: whatsnew/2.5.rst:1396
msgid ""
"A new :func:`currency` function was also added that formats a number "
"according to the current locale's settings."
msgstr ""

# 144a2c4deaf744588360cb7076113974
#: whatsnew/2.5.rst:1399
msgid "(Contributed by Georg Brandl.)"
msgstr ""

# 2a0bd74aa9fa40b28ed41c4444656c85
#: whatsnew/2.5.rst:1403
msgid ""
"The :mod:`mailbox` module underwent a massive rewrite to add the capability "
"to modify mailboxes in addition to reading them.  A new set of classes that "
"include :class:`mbox`, :class:`MH`, and :class:`Maildir` are used to read "
"mailboxes, and have an :meth:`add(message)` method to add messages, :meth:"
"`remove(key)` to remove messages, and :meth:`lock`/:meth:`unlock` to lock/"
"unlock the mailbox. The following example converts a maildir-format mailbox "
"into an mbox-format one::"
msgstr ""

# 6307baf20ecd46a0ad0cffd97dd023d4
#: whatsnew/2.5.rst:1421
msgid ""
"(Contributed by Gregory K. Johnson.  Funding was provided by Google's 2005 "
"Summer of Code.)"
msgstr ""

# c4b1f85a4a6349bf906033252368717f
#: whatsnew/2.5.rst:1424
msgid ""
"New module: the :mod:`msilib` module allows creating Microsoft Installer :"
"file:`.msi` files and CAB files.  Some support for reading the :file:`.msi` "
"database is also included. (Contributed by Martin von Löwis.)"
msgstr ""

# 09a0ac4f017d467a89b5055c797aee59
#: whatsnew/2.5.rst:1428
msgid ""
"The :mod:`nis` module now supports accessing domains other than the system "
"default domain by supplying a *domain* argument to the :func:`nis.match` "
"and :func:`nis.maps` functions. (Contributed by Ben Bell.)"
msgstr ""

# cdd3390fdc6f440ea2b0a2963ec221b2
#: whatsnew/2.5.rst:1432
msgid ""
"The :mod:`operator` module's :func:`itemgetter`  and :func:`attrgetter` "
"functions now support multiple fields.   A call such as ``operator."
"attrgetter('a', 'b')`` will return a function  that retrieves the :attr:`a` "
"and :attr:`b` attributes.  Combining  this new feature with the :meth:`sort` "
"method's ``key`` parameter  lets you easily sort lists using multiple "
"fields. (Contributed by Raymond Hettinger.)"
msgstr ""

# 3733e16678c143e2be148a724ea49ef4
#: whatsnew/2.5.rst:1439
msgid ""
"The :mod:`optparse` module was updated to version 1.5.1 of the Optik "
"library. The :class:`OptionParser` class gained an :attr:`epilog` attribute, "
"a string that will be printed after the help message, and a :meth:`destroy` "
"method to break reference cycles created by the object. (Contributed by Greg "
"Ward.)"
msgstr ""

# 1b485d018914428c829e5c8398398b43
#: whatsnew/2.5.rst:1444
msgid ""
"The :mod:`os` module underwent several changes.  The :attr:"
"`stat_float_times` variable now defaults to true, meaning that :func:`os."
"stat` will now return time values as floats.  (This doesn't necessarily mean "
"that :func:`os.stat` will return times that are precise to fractions of a "
"second; not all systems support such precision.)"
msgstr ""

# 8f4cd5816edd43359b12ea2710c01e25
#: whatsnew/2.5.rst:1450
msgid ""
"Constants named :attr:`os.SEEK_SET`, :attr:`os.SEEK_CUR`, and :attr:`os."
"SEEK_END` have been added; these are the parameters to the :func:`os.lseek` "
"function.  Two new constants for locking are :attr:`os.O_SHLOCK` and :attr:"
"`os.O_EXLOCK`."
msgstr ""

# 29aeb595e9d3459b8429207aed8068e0
#: whatsnew/2.5.rst:1455
msgid ""
"Two new functions, :func:`wait3` and :func:`wait4`, were added.  They're "
"similar the :func:`waitpid` function which waits for a child process to exit "
"and returns a tuple of the process ID and its exit status, but :func:`wait3` "
"and :func:`wait4` return additional information.  :func:`wait3` doesn't take "
"a process ID as input, so it waits for any child process to exit and returns "
"a 3-tuple of *process-id*, *exit-status*, *resource-usage* as returned from "
"the :func:`resource.getrusage` function. :func:`wait4(pid)` does take a "
"process ID. (Contributed by Chad J. Schroeder.)"
msgstr ""

# da55b186169b439bbf31aa675b5a398f
#: whatsnew/2.5.rst:1464
msgid ""
"On FreeBSD, the :func:`os.stat` function now returns  times with nanosecond "
"resolution, and the returned object now has :attr:`st_gen` and :attr:"
"`st_birthtime`. The :attr:`st_flags` attribute is also available, if the "
"platform supports it. (Contributed by Antti Louko and  Diego Pettenò.)"
msgstr ""

# 90a037d5f0dd4798a8ac5fe6be9b5ed2
#: whatsnew/2.5.rst:1471
msgid ""
"The Python debugger provided by the :mod:`pdb` module can now store lists of "
"commands to execute when a breakpoint is reached and execution stops.  Once "
"breakpoint #1 has been created, enter ``commands 1`` and enter a series of "
"commands to be executed, finishing the list with ``end``.  The command list "
"can include commands that resume execution, such as ``continue`` or "
"``next``. (Contributed by Grégoire Dooms.)"
msgstr ""

# 2cc406e991c042709717977150f8cdc7
#: whatsnew/2.5.rst:1480
msgid ""
"The :mod:`pickle` and :mod:`cPickle` modules no longer accept a return value "
"of ``None`` from the :meth:`__reduce__` method; the method must return a "
"tuple of arguments instead.  The ability to return ``None`` was deprecated "
"in Python 2.4, so this completes the removal of the feature."
msgstr ""

# 0bac3fc567b04ca3aa5b115df1eb7ea0
#: whatsnew/2.5.rst:1485
msgid ""
"The :mod:`pkgutil` module, containing various utility functions for finding "
"packages, was enhanced to support PEP 302's import hooks and now also works "
"for packages stored in ZIP-format archives. (Contributed by Phillip J. Eby.)"
msgstr ""

# 32eb57d4c2284220b8d811e85d4f41d7
#: whatsnew/2.5.rst:1489
msgid ""
"The pybench benchmark suite by Marc-André Lemburg is now included in the :"
"file:`Tools/pybench` directory.  The pybench suite is an improvement on the "
"commonly used :file:`pystone.py` program because pybench provides a more "
"detailed measurement of the interpreter's speed.  It times particular "
"operations such as function calls, tuple slicing, method lookups, and "
"numeric operations, instead of performing many different operations and "
"reducing the result to a single number as :file:`pystone.py` does."
msgstr ""

# 729d72d7e9c542939febbed16fc9fa8e
#: whatsnew/2.5.rst:1497
msgid ""
"The :mod:`pyexpat` module now uses version 2.0 of the Expat parser. "
"(Contributed by Trent Mick.)"
msgstr ""

# ec8858cf16ba4c70954f70c430b1799e
#: whatsnew/2.5.rst:1500
msgid ""
"The :class:`Queue` class provided by the :mod:`Queue` module gained two new "
"methods.  :meth:`join` blocks until all items in the queue have been "
"retrieved and all processing work on the items  have been completed.  Worker "
"threads call the other new method,  :meth:`task_done`, to signal that "
"processing for an item has been completed.  (Contributed by Raymond "
"Hettinger.)"
msgstr ""

# 4d0dc94d2adc48f197fe4afcb2443486
#: whatsnew/2.5.rst:1506
msgid ""
"The old :mod:`regex` and :mod:`regsub` modules, which have been  deprecated "
"ever since Python 2.0, have finally been deleted.   Other deleted modules: :"
"mod:`statcache`, :mod:`tzparse`, :mod:`whrandom`."
msgstr ""

# 57a4b4597f5d484a83d6ec1759ebffc9
#: whatsnew/2.5.rst:1510
msgid ""
"Also deleted: the :file:`lib-old` directory, which includes ancient modules "
"such as :mod:`dircmp` and :mod:`ni`, was removed.  :file:`lib-old` wasn't on "
"the default ``sys.path``, so unless your programs explicitly added the "
"directory to ``sys.path``, this removal shouldn't affect your code."
msgstr ""

# 63c11d877ba54f5598767a6d82d07b6a
#: whatsnew/2.5.rst:1515
msgid ""
"The :mod:`rlcompleter` module is no longer  dependent on importing the :mod:"
"`readline` module and therefore now works on non-Unix platforms. (Patch from "
"Robert Kiendl.)"
msgstr ""

# 6856a14db40f43c487d458cb045159db
#: whatsnew/2.5.rst:1521
msgid ""
"The :mod:`SimpleXMLRPCServer` and :mod:`DocXMLRPCServer`  classes now have "
"a :attr:`rpc_paths` attribute that constrains XML-RPC operations to a "
"limited set of URL paths; the default is to allow only ``'/'`` and ``'/"
"RPC2'``.  Setting :attr:`rpc_paths` to ``None`` or an empty tuple disables  "
"this path checking."
msgstr ""

# a9c749d8531b494b84cfa0b13ba878a0
#: whatsnew/2.5.rst:1528
msgid ""
"The :mod:`socket` module now supports :const:`AF_NETLINK` sockets on Linux, "
"thanks to a patch from Philippe Biondi.   Netlink sockets are a Linux-"
"specific mechanism for communications between a user-space process and "
"kernel code; an introductory  article about them is at http://www."
"linuxjournal.com/article/7356. In Python code, netlink addresses are "
"represented as a tuple of 2 integers, ``(pid, group_mask)``."
msgstr ""

# 5ea7bf6cb7d34bef9a706d2a56494112
#: whatsnew/2.5.rst:1535
msgid ""
"Two new methods on socket objects, :meth:`recv_into(buffer)` and :meth:"
"`recvfrom_into(buffer)`, store the received data in an object  that supports "
"the buffer protocol instead of returning the data as a string.  This means "
"you can put the data directly into an array or a memory-mapped file."
msgstr ""

# 4cb2b7ad89044d37a722e8dd1c3ef4f7
#: whatsnew/2.5.rst:1540
msgid ""
"Socket objects also gained :meth:`getfamily`, :meth:`gettype`, and :meth:"
"`getproto` accessor methods to retrieve the family, type, and protocol "
"values for the socket."
msgstr ""

# 8b4d0a8ef68d430e8cf45686d5ac2497
#: whatsnew/2.5.rst:1544
msgid ""
"New module: the :mod:`spwd` module provides functions for accessing the "
"shadow password database on systems that support  shadow passwords."
msgstr ""

# b2e1ff9a61334403b6a537a47b734714
#: whatsnew/2.5.rst:1547
msgid ""
"The :mod:`struct` is now faster because it  compiles format strings into :"
"class:`Struct` objects with :meth:`pack` and :meth:`unpack` methods.  This "
"is similar to how the :mod:`re` module lets you create compiled regular "
"expression objects.  You can still use the module-level  :func:`pack` and :"
"func:`unpack` functions; they'll create  :class:`Struct` objects and cache "
"them.  Or you can use  :class:`Struct` instances directly::"
msgstr ""

# 70433d8cf40549058985a259f8f6717c
#: whatsnew/2.5.rst:1559
msgid ""
"You can also pack and unpack data to and from buffer objects directly using "
"the :meth:`pack_into(buffer, offset, v1, v2, ...)` and :meth:"
"`unpack_from(buffer, offset)` methods.  This lets you store data directly "
"into an array or a memory- mapped file."
msgstr ""

# 573e1315e6034951829835e9959e12c7
#: whatsnew/2.5.rst:1564
msgid ""
"(:class:`Struct` objects were implemented by Bob Ippolito at the "
"NeedForSpeed sprint.  Support for buffer objects was added by Martin Blais, "
"also at the NeedForSpeed sprint.)"
msgstr ""

# 7426bfcaaafe4914b6373a2bad4a1415
#: whatsnew/2.5.rst:1568
msgid ""
"The Python developers switched from CVS to Subversion during the 2.5 "
"development process.  Information about the exact build version is available "
"as the ``sys.subversion`` variable, a 3-tuple of ``(interpreter-name, branch-"
"name, revision-range)``.  For example, at the time of writing my copy of 2.5 "
"was reporting ``('CPython', 'trunk', '45313:45315')``."
msgstr ""

# 6e571b91e4b04fc3b433884a4b98efaa
#: whatsnew/2.5.rst:1574
msgid ""
"This information is also available to C extensions via the :c:func:"
"`Py_GetBuildInfo` function that returns a  string of build information like "
"this: ``\"trunk:45355:45356M, Apr 13 2006, 07:42:19\"``.   (Contributed by "
"Barry Warsaw.)"
msgstr ""

# 49948d2aa0cd45cf99bebd66aa2b1e7c
#: whatsnew/2.5.rst:1579
msgid ""
"Another new function, :func:`sys._current_frames`, returns the current stack "
"frames for all running threads as a dictionary mapping thread identifiers to "
"the topmost stack frame currently active in that thread at the time the "
"function is called.  (Contributed by Tim Peters.)"
msgstr ""

# 5ee1b9e175c34415a62c3806e73fb3b7
#: whatsnew/2.5.rst:1584
msgid ""
"The :class:`TarFile` class in the :mod:`tarfile` module now has an :meth:"
"`extractall` method that extracts all members from the archive into the "
"current working directory.  It's also possible to set a different directory "
"as the extraction target, and to unpack only a subset of the archive's "
"members."
msgstr ""

# 234b3e042f03408183b2674ee6c1717f
#: whatsnew/2.5.rst:1589
msgid ""
"The compression used for a tarfile opened in stream mode can now be "
"autodetected using the mode ``'r|*'``. (Contributed by Lars Gustäbel.)"
msgstr ""

# 55abd6a10851455cb704d65ae5e796c0
#: whatsnew/2.5.rst:1594
msgid ""
"The :mod:`threading` module now lets you set the stack size used when new "
"threads are created. The :func:`stack_size([*size*])` function returns the "
"currently configured stack size, and supplying the optional *size* parameter "
"sets a new value.  Not all platforms support changing the stack size, but "
"Windows, POSIX threading, and OS/2 all do. (Contributed by Andrew MacIntyre.)"
msgstr ""

# c28a4d46c88a4252a956b3514ab4d4a3
#: whatsnew/2.5.rst:1602
msgid ""
"The :mod:`unicodedata` module has been updated to use version 4.1.0 of the "
"Unicode character database.  Version 3.2.0 is required  by some "
"specifications, so it's still available as  :attr:`unicodedata.ucd_3_2_0`."
msgstr ""

# 468b9848b94b4e8db4fdb0064e1e287f
#: whatsnew/2.5.rst:1606
msgid ""
"New module: the  :mod:`uuid` module generates  universally unique "
"identifiers (UUIDs) according to :rfc:`4122`.  The RFC defines several "
"different UUID versions that are generated from a starting string, from "
"system properties, or purely randomly.  This module contains a :class:`UUID` "
"class and  functions named :func:`uuid1`, :func:`uuid3`, :func:`uuid4`,  "
"and  :func:`uuid5` to generate different versions of UUID.  (Version 2 "
"UUIDs  are not specified in :rfc:`4122` and are not supported by this "
"module.) ::"
msgstr ""

# 307b44d4b0574d68aa0c4b4dfe9f0bdf
#: whatsnew/2.5.rst:1631
msgid "(Contributed by Ka-Ping Yee.)"
msgstr ""

# 78263d572496452bad248d7447026d83
#: whatsnew/2.5.rst:1633
msgid ""
"The :mod:`weakref` module's :class:`WeakKeyDictionary` and :class:"
"`WeakValueDictionary` types gained new methods for iterating over the weak "
"references contained in the dictionary.  :meth:`iterkeyrefs` and :meth:"
"`keyrefs` methods were added to :class:`WeakKeyDictionary`, and :meth:"
"`itervaluerefs` and :meth:`valuerefs` were added to :class:"
"`WeakValueDictionary`.  (Contributed by Fred L. Drake, Jr.)"
msgstr ""

# 6436102a6e6044e495acc78982a4cea9
#: whatsnew/2.5.rst:1640
msgid ""
"The :mod:`webbrowser` module received a number of enhancements. It's now "
"usable as a script with ``python -m webbrowser``, taking a URL as the "
"argument; there are a number of switches  to control the behaviour (:option:"
"`-n` for a new browser window,  :option:`-t` for a new tab).  New module-"
"level functions, :func:`open_new` and :func:`open_new_tab`, were added  to "
"support this.  The module's :func:`open` function supports an additional "
"feature, an *autoraise* parameter that signals whether to raise the open "
"window when possible. A number of additional browsers were added to the "
"supported list such as Firefox, Opera, Konqueror, and elinks.  (Contributed "
"by Oleg Broytmann and Georg Brandl.)"
msgstr ""

# af4f82f2a671442aba02be5c2d7e43d5
#: whatsnew/2.5.rst:1652
msgid ""
"The :mod:`xmlrpclib` module now supports returning  :class:`datetime` "
"objects for the XML-RPC date type.  Supply  ``use_datetime=True`` to the :"
"func:`loads` function or the :class:`Unmarshaller` class to enable this "
"feature. (Contributed by Skip Montanaro.)"
msgstr ""

# 74f8c2816b164d688076dd70ed4cb1b1
#: whatsnew/2.5.rst:1659
msgid ""
"The :mod:`zipfile` module now supports the ZIP64 version of the  format, "
"meaning that a .zip archive can now be larger than 4 GiB and can contain "
"individual files larger than 4 GiB.  (Contributed by Ronald Oussoren.)"
msgstr ""

# 09913ec984714cad90068b8fe756bbe0
#: whatsnew/2.5.rst:1665
msgid ""
"The :mod:`zlib` module's :class:`Compress` and :class:`Decompress` objects "
"now support a :meth:`copy` method that makes a copy of the  object's "
"internal state and returns a new  :class:`Compress` or :class:`Decompress` "
"object. (Contributed by Chris AtLee.)"
msgstr ""

# ed3baaad0ba94901a9ee428b58e2ac5e
#: whatsnew/2.5.rst:1678
msgid "The ctypes package"
msgstr ""

# 07b55bf0fe974eba9036cf1d3dee18de
#: whatsnew/2.5.rst:1680
msgid ""
"The :mod:`ctypes` package, written by Thomas Heller, has been added  to the "
"standard library.  :mod:`ctypes` lets you call arbitrary functions  in "
"shared libraries or DLLs.  Long-time users may remember the :mod:`dl` "
"module, which provides functions for loading shared libraries and calling "
"functions in them. The :mod:`ctypes` package is much fancier."
msgstr ""

# 34a22a06b091431a93dfb3b7604e1f52
#: whatsnew/2.5.rst:1686
msgid ""
"To load a shared library or DLL, you must create an instance of the :class:"
"`CDLL` class and provide the name or path of the shared library or DLL. Once "
"that's done, you can call arbitrary functions by accessing them as "
"attributes of the :class:`CDLL` object.   ::"
msgstr ""

# 9dbfa274d9cb4dd8bfa935fd8367d119
#: whatsnew/2.5.rst:1696
msgid ""
"Type constructors for the various C types are provided: :func:`c_int`, :func:"
"`c_float`, :func:`c_double`, :func:`c_char_p` (equivalent to :c:type:`char "
"\\*`), and so forth.  Unlike Python's types, the C versions are all mutable; "
"you can assign to their :attr:`value` attribute to change the wrapped "
"value.  Python integers and strings will be automatically converted to the "
"corresponding C types, but for other types you  must call the correct type "
"constructor.  (And I mean *must*;  getting it wrong will often result in the "
"interpreter crashing with a segmentation fault.)"
msgstr ""

# 7fe18706e64b45818c218401b568eeda
#: whatsnew/2.5.rst:1705
msgid ""
"You shouldn't use :func:`c_char_p` with a Python string when the C function "
"will be modifying the memory area, because Python strings are  supposed to "
"be immutable; breaking this rule will cause puzzling bugs.  When you need a "
"modifiable memory area, use :func:`create_string_buffer`::"
msgstr ""

# 31320262044d409b85e736027bde4523
#: whatsnew/2.5.rst:1714
msgid ""
"C functions are assumed to return integers, but you can set the :attr:"
"`restype` attribute of the function object to  change this::"
msgstr ""

# 47581317d7c847c7a4f351b5d3154e55
#: whatsnew/2.5.rst:1723
msgid ""
":mod:`ctypes` also provides a wrapper for Python's C API  as the ``ctypes."
"pythonapi`` object.  This object does *not*  release the global interpreter "
"lock before calling a function, because the lock must be held when calling "
"into the interpreter's code.   There's a :class:`py_object()` type "
"constructor that will create a  :c:type:`PyObject \\*` pointer.  A simple "
"usage::"
msgstr ""

# 645dc829d9c7444381f87d298fc7f503
#: whatsnew/2.5.rst:1736
msgid ""
"Don't forget to use :class:`py_object()`; if it's omitted you end  up with a "
"segmentation fault."
msgstr ""

# 27fbe19a8ae343899f0864c3ad1b181a
#: whatsnew/2.5.rst:1739
msgid ""
":mod:`ctypes` has been around for a while, but people still write  and "
"distribution hand-coded extension modules because you can't rely on :mod:"
"`ctypes` being present. Perhaps developers will begin to write  Python "
"wrappers atop a library accessed through :mod:`ctypes` instead of extension "
"modules, now that :mod:`ctypes` is included with core Python."
msgstr ""

# d236a305934847849397fda790184e35
#: whatsnew/2.5.rst:1749
msgid "http://starship.python.net/crew/theller/ctypes/"
msgstr ""

# c02604361ae54daab2e71c1baf315035
#: whatsnew/2.5.rst:1749
msgid "The ctypes web page, with a tutorial, reference, and FAQ."
msgstr ""

# 20e368a9728c4765a1090aa82532c711
#: whatsnew/2.5.rst:1751
msgid "The documentation  for the :mod:`ctypes` module."
msgstr ""

# 7b67b3b068454d33bb0b3578051dbc48
#: whatsnew/2.5.rst:1759
msgid "The ElementTree package"
msgstr ""

# ca1bf53f737542e7bd23a16845ac438c
#: whatsnew/2.5.rst:1761
msgid ""
"A subset of Fredrik Lundh's ElementTree library for processing XML has been "
"added to the standard library as :mod:`xml.etree`.  The available modules "
"are :mod:`ElementTree`, :mod:`ElementPath`, and :mod:`ElementInclude` from "
"ElementTree 1.2.6.    The :mod:`cElementTree` accelerator module is also "
"included."
msgstr ""

# 710d80a667a0489c90ac7fcc5dd2259a
#: whatsnew/2.5.rst:1767
msgid ""
"The rest of this section will provide a brief overview of using ElementTree. "
"Full documentation for ElementTree is available at http://effbot.org/zone/"
"element-index.htm."
msgstr ""

# 6d1ea3a4d64344a98bcb54f427f17417
#: whatsnew/2.5.rst:1771
msgid ""
"ElementTree represents an XML document as a tree of element nodes. The text "
"content of the document is stored as the :attr:`text` and :attr:`tail` "
"attributes of  (This is one of the major differences between ElementTree and "
"the Document Object Model; in the DOM there are many different types of "
"node, including :class:`TextNode`.)"
msgstr ""

# 50d50f89ae7440968e6345cd8281f89a
#: whatsnew/2.5.rst:1777
msgid ""
"The most commonly used parsing function is :func:`parse`, that takes either "
"a string (assumed to contain a filename) or a file-like object and returns "
"an :class:`ElementTree` instance::"
msgstr ""

# 233177a567a7498bbf46a4b064c5167f
#: whatsnew/2.5.rst:1789
msgid ""
"Once you have an :class:`ElementTree` instance, you can call its :meth:"
"`getroot` method to get the root :class:`Element` node."
msgstr ""

# 9ecaf4bdd18c4d619ea707a190e65e4f
#: whatsnew/2.5.rst:1792
msgid ""
"There's also an :func:`XML` function that takes a string literal and returns "
"an :class:`Element` node (not an :class:`ElementTree`).   This function "
"provides a tidy way to incorporate XML fragments, approaching the "
"convenience of an XML literal::"
msgstr ""

# b15a8b5d9b9a46478be7c693a33bfcd1
#: whatsnew/2.5.rst:1802
msgid ""
"Each XML element supports some dictionary-like and some list-like access "
"methods.  Dictionary-like operations are used to access attribute values, "
"and list-like operations are used to access child nodes."
msgstr ""

# 05f7672028724bd98adca78ca5c12084
#: whatsnew/2.5.rst:1807
msgid "Result"
msgstr ""

# 7f02db182f8a428d9cdae2bbae79b55b
#: whatsnew/2.5.rst:1809
msgid "``elem[n]``"
msgstr ""

# c58ccb12937645aabb05f57214254df7
#: whatsnew/2.5.rst:1809
msgid "Returns n'th child element."
msgstr ""

# 330920d2c78e4eb8bd1e9a71fd8c60a0
#: whatsnew/2.5.rst:1811
msgid "``elem[m:n]``"
msgstr ""

# fdadf62863a84563b6abbcbe9789413c
#: whatsnew/2.5.rst:1811
msgid "Returns list of m'th through n'th child elements."
msgstr ""

# aa4602ff4ff64558bda7d2aa7bfbf11c
#: whatsnew/2.5.rst:1814
msgid "``len(elem)``"
msgstr ""

# e1b04052313f4e46bc0d00241ffa5983
#: whatsnew/2.5.rst:1814
msgid "Returns number of child elements."
msgstr ""

# 93836a75dbb54af1ae0cb7d242ca6fbe
#: whatsnew/2.5.rst:1816
msgid "``list(elem)``"
msgstr ""

# f579a32ab60340728e346fa3b5d0cbd3
#: whatsnew/2.5.rst:1816
msgid "Returns list of child elements."
msgstr ""

# 8224f9f6b20b4325b554c86d2eb91264
#: whatsnew/2.5.rst:1818
msgid "``elem.append(elem2)``"
msgstr ""

# ae244216c03d4bb9b0dc141482cca468
#: whatsnew/2.5.rst:1818
msgid "Adds *elem2* as a child."
msgstr ""

# e5bca63566e14af28ed0b1ffdaa4318f
#: whatsnew/2.5.rst:1820
msgid "``elem.insert(index, elem2)``"
msgstr ""

# f5db884b905f445bab62bcdb34670421
#: whatsnew/2.5.rst:1820
msgid "Inserts *elem2* at the specified location."
msgstr ""

# fc61d74cba7e4ccf9a7d32ecc5abd511
#: whatsnew/2.5.rst:1822
msgid "``del elem[n]``"
msgstr ""

# 03d92975584648fcb24b5a53babc6fe0
#: whatsnew/2.5.rst:1822
msgid "Deletes n'th child element."
msgstr ""

# 4c39e6ab18924c4fbe0adc9f9ff910a2
#: whatsnew/2.5.rst:1824
msgid "``elem.keys()``"
msgstr ""

# f2c25170f4da4f6cbf00d74785f37c0b
#: whatsnew/2.5.rst:1824
msgid "Returns list of attribute names."
msgstr ""

# 7b72fdcb8d3b41d0917fed3c16404704
#: whatsnew/2.5.rst:1826
msgid "``elem.get(name)``"
msgstr ""

# 96248870bfd24f4bb2e7026d80b0e811
#: whatsnew/2.5.rst:1826
msgid "Returns value of attribute *name*."
msgstr ""

# 9dafb532225e49a8b5c688d0256753b6
#: whatsnew/2.5.rst:1828
msgid "``elem.set(name, value)``"
msgstr ""

# 9c32b1ab67f74cdc93647d379415b8e3
#: whatsnew/2.5.rst:1828
msgid "Sets new value for attribute *name*."
msgstr ""

# 41281513449b4a66a4b8145b5ef51894
#: whatsnew/2.5.rst:1830
msgid "``elem.attrib``"
msgstr ""

# a489a95dd08349be924c9057094c2572
#: whatsnew/2.5.rst:1830
msgid "Retrieves the dictionary containing attributes."
msgstr ""

# 3d6f785c6e1743888b5c47b5bac65866
#: whatsnew/2.5.rst:1833
msgid "``del elem.attrib[name]``"
msgstr ""

# 6974b02bf9fe48be99d63535e9089eae
#: whatsnew/2.5.rst:1833
msgid "Deletes attribute *name*."
msgstr ""

# 9e71e1e8e46c49519e794e7b4ca1adb1
#: whatsnew/2.5.rst:1836
msgid ""
"Comments and processing instructions are also represented as :class:"
"`Element` nodes.  To check if a node is a comment or processing "
"instructions::"
msgstr ""

# 81a832f9043b40358e3761425aaeac99
#: whatsnew/2.5.rst:1844
msgid ""
"To generate XML output, you should call the :meth:`ElementTree.write` "
"method. Like :func:`parse`, it can take either a string or a file-like "
"object::"
msgstr ""

# 4734f3adfca34f1392820946aa018ba5
#: whatsnew/2.5.rst:1854
msgid ""
"(Caution: the default encoding used for output is ASCII.  For general XML "
"work, where an element's name may contain arbitrary Unicode characters, "
"ASCII isn't a very useful encoding because it will raise an exception if an "
"element's name contains any characters with values greater than 127.  "
"Therefore, it's best to specify a different encoding such as UTF-8 that can "
"handle any Unicode character.)"
msgstr ""

# d886c19190474bd78033e557001d6da0
#: whatsnew/2.5.rst:1861
msgid ""
"This section is only a partial description of the ElementTree interfaces. "
"Please read the package's official documentation for more details."
msgstr ""

# d87401ed7f674b7ea59d7c53dadc5084
#: whatsnew/2.5.rst:1867
msgid "http://effbot.org/zone/element-index.htm"
msgstr ""

# 14bedddfceac4863a5449aba6b487123
#: whatsnew/2.5.rst:1868
msgid "Official documentation for ElementTree."
msgstr ""

# 2844100e7e924ebd94c5b5a30f13cac6
#: whatsnew/2.5.rst:1876
msgid "The hashlib package"
msgstr ""

# e625952c4ff3474b896d32204ea83f82
#: whatsnew/2.5.rst:1878
msgid ""
"A new :mod:`hashlib` module, written by Gregory P. Smith,  has been added to "
"replace the :mod:`md5` and :mod:`sha` modules.  :mod:`hashlib` adds support "
"for additional secure hashes (SHA-224, SHA-256, SHA-384, and SHA-512). When "
"available, the module uses OpenSSL for fast platform optimized "
"implementations of algorithms."
msgstr ""

# 699777e927a2486ca5579a607f11893e
#: whatsnew/2.5.rst:1884
msgid ""
"The old :mod:`md5` and :mod:`sha` modules still exist as wrappers around "
"hashlib to preserve backwards compatibility.  The new module's interface is "
"very close to that of the old modules, but not identical. The most "
"significant difference is that the constructor functions for creating new "
"hashing objects are named differently. ::"
msgstr ""

# b0e33a0123e1498787062b28b32ad540
#: whatsnew/2.5.rst:1913
msgid ""
"Once a hash object has been created, its methods are the same as before: :"
"meth:`update(string)` hashes the specified string into the  current digest "
"state, :meth:`digest` and :meth:`hexdigest` return the digest value as a "
"binary string or a string of hex digits, and :meth:`copy` returns a new "
"hashing object with the same digest state."
msgstr ""

# 610139c291c74b99a104cc34b39d65e2
#: whatsnew/2.5.rst:1922
msgid "The documentation  for the :mod:`hashlib` module."
msgstr ""

# cacd57ca77b449ed999c137b0845e8ac
#: whatsnew/2.5.rst:1930
msgid "The sqlite3 package"
msgstr ""

# b03a630221cc44e8ab4f9c77ceabf6a2
#: whatsnew/2.5.rst:1932
msgid ""
"The pysqlite module (http://www.pysqlite.org), a wrapper for the SQLite "
"embedded database, has been added to the standard library under the package "
"name :mod:`sqlite3`."
msgstr ""

# 23d0ad45c6f840e1a3943bb66aa8eb78
#: whatsnew/2.5.rst:1936
msgid ""
"SQLite is a C library that provides a lightweight disk-based database that "
"doesn't require a separate server process and allows accessing the database "
"using a nonstandard variant of the SQL query language. Some applications can "
"use SQLite for internal data storage.  It's also possible to prototype an "
"application using SQLite and then port the code to a larger database such as "
"PostgreSQL or Oracle."
msgstr ""

# 5d7c9bbf07ca4bcb997d2d67d4dbc22d
#: whatsnew/2.5.rst:1943
msgid ""
"pysqlite was written by Gerhard Häring and provides a SQL interface "
"compliant with the DB-API 2.0 specification described by :pep:`249`."
msgstr ""

# 20c0dd1915854540a5038f424392aa39
#: whatsnew/2.5.rst:1946
msgid ""
"If you're compiling the Python source yourself, note that the source tree "
"doesn't include the SQLite code, only the wrapper module. You'll need to "
"have the SQLite libraries and headers installed before compiling Python, and "
"the build process will compile the module when the necessary headers are "
"available."
msgstr ""

# 8cc89b88c4f747efae57605f6916ba10
#: whatsnew/2.5.rst:1951
msgid ""
"To use the module, you must first create a :class:`Connection` object that "
"represents the database.  Here the data will be stored in the :file:`/tmp/"
"example` file::"
msgstr ""

# 2d12e36fdf594deea25dd3e147a310cb
#: whatsnew/2.5.rst:1957
msgid ""
"You can also supply the special name ``:memory:`` to create a database in "
"RAM."
msgstr ""

# d2925ca04c5c49c1af05909f5bd72d4b
#: whatsnew/2.5.rst:1959
msgid ""
"Once you have a :class:`Connection`, you can create a :class:`Cursor`  "
"object and call its :meth:`execute` method to perform SQL commands::"
msgstr ""

# a434d96065e04937a68dc03444521e51
#: whatsnew/2.5.rst:1973
msgid ""
"Usually your SQL operations will need to use values from Python variables.  "
"You shouldn't assemble your query using Python's string operations because "
"doing so is insecure; it makes your program vulnerable to an SQL injection "
"attack."
msgstr ""

# 2d7e8125a8524560820feb72f554a09d
#: whatsnew/2.5.rst:1977
msgid ""
"Instead, use the DB-API's parameter substitution.  Put ``?`` as a "
"placeholder wherever you want to use a value, and then provide a tuple of "
"values as the second argument to the cursor's :meth:`execute` method.  "
"(Other database modules may use a different placeholder, such as ``%s`` or "
"``:1``.) For example::"
msgstr ""

# 075af1e41b70412889c351f3d5a2bf48
#: whatsnew/2.5.rst:1997
msgid ""
"To retrieve data after executing a SELECT statement, you can either  treat "
"the cursor as an iterator, call the cursor's :meth:`fetchone` method to "
"retrieve a single matching row,  or call :meth:`fetchall` to get a list of "
"the matching rows."
msgstr ""

# 2720be928988419e856c2ba2cb049b24
#: whatsnew/2.5.rst:2002
msgid "This example uses the iterator form::"
msgstr ""

# 97a4fb16db914466b05602030b0ad97f
#: whatsnew/2.5.rst:2015
msgid ""
"For more information about the SQL dialect supported by SQLite, see http://"
"www.sqlite.org."
msgstr ""

# 4970e9e7d2964642bec614ad2528046f
#: whatsnew/2.5.rst:2022
msgid "http://www.pysqlite.org"
msgstr ""

# b4a559b7575b49bd9c2ba21d33c3ec52
#: whatsnew/2.5.rst:2022
msgid "The pysqlite web page."
msgstr ""

# 2e4d865e244f4e10bc304d1715f3af4d
#: whatsnew/2.5.rst:2026
msgid "http://www.sqlite.org"
msgstr ""

# 2624f4fcb1c74386999e1c1c9d89f09f
#: whatsnew/2.5.rst:2025
msgid ""
"The SQLite web page; the documentation describes the syntax and the "
"available data types for the supported SQL dialect."
msgstr ""

# 58347dbcbeab48c19aef7d032a516606
#: whatsnew/2.5.rst:2028
msgid "The documentation  for the :mod:`sqlite3` module."
msgstr ""

#: whatsnew/2.5.rst:2030
msgid "PEP 249 - Database API Specification 2.0"
msgstr ""

# fafc3f90d16644908e8444b1814c16ea
#: whatsnew/2.5.rst:2031
msgid "PEP written by Marc-André Lemburg."
msgstr ""

# 47ad4780441c4dd490dc7f4165ed1266
#: whatsnew/2.5.rst:2039
msgid "The wsgiref package"
msgstr ""

# e4d7389f8abc4584babbf0f6ca4d44e5
#: whatsnew/2.5.rst:2041
msgid ""
"The Web Server Gateway Interface (WSGI) v1.0 defines a standard interface "
"between web servers and Python web applications and is described in :pep:"
"`333`. The :mod:`wsgiref` package is a reference implementation of the WSGI "
"specification."
msgstr ""

# d5456ecdee5e4cf2b3bf9bc1e8b9630e
#: whatsnew/2.5.rst:2048
msgid ""
"The package includes a basic HTTP server that will run a WSGI application; "
"this server is useful for debugging but isn't intended for  production use.  "
"Setting up a server takes only a few lines of code::"
msgstr ""

# 41f7283107894d72b41d028cc70df528
#: whatsnew/2.5.rst:2068
msgid "http://www.wsgi.org"
msgstr ""

# 3a9548be9b28483885fae1d0ce9c8f7a
#: whatsnew/2.5.rst:2068
msgid "A central web site for WSGI-related resources."
msgstr ""

#: whatsnew/2.5.rst:2070
msgid "PEP 333 - Python Web Server Gateway Interface v1.0"
msgstr ""

# 84fe8ffc12a44ea99c55b9e24b0f2cf2
#: whatsnew/2.5.rst:2071
msgid "PEP written by Phillip J. Eby."
msgstr ""

# 643de76ce240475d9fbfd2062d85e464
#: whatsnew/2.5.rst:2083
msgid ""
"The Python source tree was converted from CVS to Subversion,  in a complex "
"migration procedure that was supervised and flawlessly carried out by Martin "
"von Löwis.  The procedure was developed as :pep:`347`."
msgstr ""

# ecb6222c40744155a5f11459d83df4da
#: whatsnew/2.5.rst:2087
msgid ""
"Coverity, a company that markets a source code analysis tool called Prevent, "
"provided the results of their examination of the Python source code.  The "
"analysis found about 60 bugs that  were quickly fixed.  Many of the bugs "
"were refcounting problems, often occurring in error-handling code.  See "
"http://scan.coverity.com for the statistics."
msgstr ""

# 4dffde657ad84b119ded03e218ea993f
#: whatsnew/2.5.rst:2093
msgid ""
"The largest change to the C API came from :pep:`353`, which modifies the "
"interpreter to use a :c:type:`Py_ssize_t` type definition instead of :c:type:"
"`int`.  See the earlier section :ref:`pep-353` for a discussion of this "
"change."
msgstr ""

# 2354fecc738244f2a2d45a3e681c3622
#: whatsnew/2.5.rst:2098
msgid ""
"The design of the bytecode compiler has changed a great deal,  no longer "
"generating bytecode by traversing the parse tree.  Instead the parse tree is "
"converted to an abstract syntax tree (or AST), and it is  the abstract "
"syntax tree that's traversed to produce the bytecode."
msgstr ""

# 6999181b08c1407e82e5700c51b85694
#: whatsnew/2.5.rst:2103
msgid ""
"It's possible for Python code to obtain AST objects by using the :func:"
"`compile` built-in and specifying ``_ast.PyCF_ONLY_AST`` as the value of "
"the  *flags* parameter::"
msgstr ""

# ee438dd2a9e24f77bb9d17a7666f90b4
#: whatsnew/2.5.rst:2116
msgid ""
"No official documentation has been written for the AST code yet, but :pep:"
"`339` discusses the design.  To start learning about the code, read the "
"definition of the various AST nodes in :file:`Parser/Python.asdl`.  A Python "
"script reads this file and generates a set of C structure definitions in :"
"file:`Include/Python-ast.h`.  The :c:func:`PyParser_ASTFromString` and :c:"
"func:`PyParser_ASTFromFile`, defined in :file:`Include/pythonrun.h`, take "
"Python source as input and return the root of an AST representing the "
"contents. This AST can then be turned into a code object by :c:func:"
"`PyAST_Compile`.  For more information, read the source code, and then ask "
"questions on python-dev."
msgstr ""

# 53da7c04b93a48db907472040560a754
#: whatsnew/2.5.rst:2126
msgid ""
"The AST code was developed under Jeremy Hylton's management, and implemented "
"by (in alphabetical order) Brett Cannon, Nick Coghlan, Grant Edwards, John "
"Ehresman, Kurt Kaiser, Neal Norwitz, Tim Peters, Armin Rigo, and Neil "
"Schemenauer, plus the participants in a number of AST sprints at conferences "
"such as PyCon."
msgstr ""

# 897913513e4f455781bafe8f576e6a19
#: whatsnew/2.5.rst:2135
msgid ""
"Evan Jones's patch to obmalloc, first described in a talk at PyCon DC 2005, "
"was applied.  Python 2.4 allocated small objects in 256K-sized arenas, but "
"never freed arenas.  With this patch, Python will free arenas when they're "
"empty.  The net effect is that on some platforms, when you allocate many "
"objects, Python's memory usage may actually drop when you delete them and "
"the memory may be returned to the operating system.  (Implemented by Evan "
"Jones, and reworked by Tim Peters.)"
msgstr ""

# 646e838be50b48ac80b2859ddf8789c3
#: whatsnew/2.5.rst:2143
msgid ""
"Note that this change means extension modules must be more careful when "
"allocating memory.  Python's API has many different functions for allocating "
"memory that are grouped into families.  For example, :c:func:"
"`PyMem_Malloc`, :c:func:`PyMem_Realloc`, and :c:func:`PyMem_Free` are one "
"family that allocates raw memory, while :c:func:`PyObject_Malloc`, :c:func:"
"`PyObject_Realloc`, and :c:func:`PyObject_Free` are another family that's "
"supposed to be used for creating Python objects."
msgstr ""

# 4dfb9013718e47e2b06c3cac968adf3d
#: whatsnew/2.5.rst:2151
msgid ""
"Previously these different families all reduced to the platform's :c:func:"
"`malloc` and :c:func:`free` functions.  This meant  it didn't matter if you "
"got things wrong and allocated memory with the :c:func:`PyMem` function but "
"freed it with the :c:func:`PyObject` function.  With 2.5's changes to "
"obmalloc, these families now do different things and mismatches will "
"probably result in a segfault.  You should carefully test your C extension "
"modules with Python 2.5."
msgstr ""

# ecce108da3af4f35bac4cb54d9d76ccd
#: whatsnew/2.5.rst:2158
msgid ""
"The built-in set types now have an official C API.  Call :c:func:`PySet_New` "
"and :c:func:`PyFrozenSet_New` to create a new set, :c:func:`PySet_Add` and :"
"c:func:`PySet_Discard` to add and remove elements, and :c:func:"
"`PySet_Contains` and :c:func:`PySet_Size` to examine the set's state. "
"(Contributed by Raymond Hettinger.)"
msgstr ""

# 83eebd72362d4dd3b9dd3f3a851f53a8
#: whatsnew/2.5.rst:2164
msgid ""
"C code can now obtain information about the exact revision of the Python "
"interpreter by calling the  :c:func:`Py_GetBuildInfo` function that returns "
"a string of build information like this: ``\"trunk:45355:45356M, Apr 13 "
"2006, 07:42:19\"``.   (Contributed by Barry Warsaw.)"
msgstr ""

# b1aadabdceb14dcd80bbfd955f295f33
#: whatsnew/2.5.rst:2169
msgid ""
"Two new macros can be used to indicate C functions that are local to the "
"current file so that a faster calling convention can be used. :c:func:"
"`Py_LOCAL(type)` declares the function as returning a value of the specified "
"*type* and uses a fast-calling qualifier. :c:func:`Py_LOCAL_INLINE(type)` "
"does the same thing and also requests the function be inlined.  If :c:func:"
"`PY_LOCAL_AGGRESSIVE` is defined before :file:`python.h` is included, a set "
"of more aggressive optimizations are enabled for the module; you should "
"benchmark the results to find out if these optimizations actually make the "
"code faster.  (Contributed by Fredrik Lundh at the NeedForSpeed sprint.)"
msgstr ""

# 27c6f90fd6cd4c64b841e981bf2b8d1e
#: whatsnew/2.5.rst:2180
msgid ""
":c:func:`PyErr_NewException(name, base, dict)` can now accept a tuple of "
"base classes as its *base* argument.  (Contributed by Georg Brandl.)"
msgstr ""

# f3af02e9f8fb465f908a519ff1e1ccbd
#: whatsnew/2.5.rst:2183
msgid ""
"The :c:func:`PyErr_Warn` function for issuing warnings is now deprecated in "
"favour of :c:func:`PyErr_WarnEx(category, message, stacklevel)` which lets "
"you specify the number of stack frames separating this function and the "
"caller.  A *stacklevel* of 1 is the function calling :c:func:`PyErr_WarnEx`, "
"2 is the function above that, and so forth.  (Added by Neal Norwitz.)"
msgstr ""

# 2d5db3e01bcf47a1b0677b79261928c2
#: whatsnew/2.5.rst:2189
msgid ""
"The CPython interpreter is still written in C, but  the code can now be "
"compiled with a C++ compiler without errors.   (Implemented by Anthony "
"Baxter, Martin von Löwis, Skip Montanaro.)"
msgstr ""

# 88e3abfaeefe4a2cb94529aeb4033745
#: whatsnew/2.5.rst:2193
msgid ""
"The :c:func:`PyRange_New` function was removed.  It was never documented, "
"never used in the core code, and had dangerously lax error checking.  In the "
"unlikely case that your extensions were using it, you can replace it by "
"something like the following::"
msgstr ""

# b93776d2457b48de9bd9653c0f911e91
#: whatsnew/2.5.rst:2209
msgid ""
"MacOS X (10.3 and higher): dynamic loading of modules now uses the :c:func:"
"`dlopen` function instead of MacOS-specific functions."
msgstr ""

# 8c17ed0c902d4f8c8e7979c480e967a7
#: whatsnew/2.5.rst:2212
msgid ""
"MacOS X: an :option:`--enable-universalsdk` switch was added to the :program:"
"`configure` script that compiles the interpreter as a universal binary able "
"to run on both PowerPC and Intel processors. (Contributed by Ronald "
"Oussoren; :issue:`2573`.)"
msgstr ""

# d6ceefa2ad11471eb6311b4a941d4fd0
#: whatsnew/2.5.rst:2217
msgid ""
"Windows: :file:`.dll` is no longer supported as a filename extension for "
"extension modules.  :file:`.pyd` is now the only filename extension that "
"will be searched for."
msgstr ""

# e9910bab7a5e4ef08c12224a1ed4fa9a
#: whatsnew/2.5.rst:2227
#, fuzzy
msgid "Porting to Python 2.5"
msgstr "Portage vers Python 3.2"

# 95951faa9cb14a7d94e5d3243522d4a3
#: whatsnew/2.5.rst:2232
msgid ""
"ASCII is now the default encoding for modules.  It's now  a syntax error if "
"a module contains string literals with 8-bit characters but doesn't have an "
"encoding declaration.  In Python 2.4 this triggered a warning, not a syntax "
"error."
msgstr ""

# 13294c5705d24e398c994a3fb1ea4219
#: whatsnew/2.5.rst:2237
msgid ""
"Previously, the :attr:`gi_frame` attribute of a generator was always a frame "
"object.  Because of the :pep:`342` changes described in section :ref:"
"`pep-342`, it's now possible for :attr:`gi_frame` to be ``None``."
msgstr ""

# 16352f65087543f4a24e0459bba5728f
#: whatsnew/2.5.rst:2241
msgid ""
"A new warning, :class:`UnicodeWarning`, is triggered when  you attempt to "
"compare a Unicode string and an 8-bit string that can't be converted to "
"Unicode using the default ASCII encoding.  Previously such comparisons would "
"raise a :class:`UnicodeDecodeError` exception."
msgstr ""

# 22093f738a8b46f9b1936acf4a2e5430
#: whatsnew/2.5.rst:2246
msgid ""
"Library: the :mod:`csv` module is now stricter about multi-line quoted "
"fields. If your files contain newlines embedded within fields, the input "
"should be split into lines in a manner which preserves the newline "
"characters."
msgstr ""

# 078d70a47d7f460db4d87a3f1193f217
#: whatsnew/2.5.rst:2250
msgid ""
"Library: the :mod:`locale` module's  :func:`format` function's would "
"previously  accept any string as long as no more than one %char specifier "
"appeared.  In Python 2.5, the argument must be exactly one %char specifier "
"with no surrounding text."
msgstr ""

# 40e7bfce38bf4c3f94ad1a46769a3861
#: whatsnew/2.5.rst:2255
msgid ""
"Library: The :mod:`pickle` and :mod:`cPickle` modules no longer accept a "
"return value of ``None`` from the :meth:`__reduce__` method; the method must "
"return a tuple of arguments instead.  The modules also no longer accept the "
"deprecated *bin* keyword parameter."
msgstr ""

# ada4d02c77054028a035302cd4c99552
#: whatsnew/2.5.rst:2260
msgid ""
"Library: The :mod:`SimpleXMLRPCServer` and :mod:`DocXMLRPCServer`  classes "
"now have a :attr:`rpc_paths` attribute that constrains XML-RPC operations to "
"a limited set of URL paths; the default is to allow only ``'/'`` and ``'/"
"RPC2'``. Setting  :attr:`rpc_paths` to ``None`` or an empty tuple disables  "
"this path checking."
msgstr ""

# 918d44c846be4dacb2b5d400f5ecb40b
#: whatsnew/2.5.rst:2266
msgid ""
"C API: Many functions now use :c:type:`Py_ssize_t`  instead of :c:type:`int` "
"to allow processing more data on 64-bit machines.  Extension code may need "
"to make the same change to avoid warnings and to support 64-bit machines.  "
"See the earlier section :ref:`pep-353` for a discussion of this change."
msgstr ""

# 3ac607124a6843fb8ec651e9d23460c2
#: whatsnew/2.5.rst:2271
msgid ""
"C API:  The obmalloc changes mean that  you must be careful to not mix usage "
"of the :c:func:`PyMem_\\*` and :c:func:`PyObject_\\*` families of functions. "
"Memory allocated with  one family's :c:func:`\\*_Malloc` must be  freed with "
"the corresponding family's :c:func:`\\*_Free` function."
msgstr ""

# 687756617d434ee29b28ea2b665e0a17
#: whatsnew/2.5.rst:2282
msgid ""
"The author would like to thank the following people for offering "
"suggestions, corrections and assistance with various drafts of this article: "
"Georg Brandl, Nick Coghlan, Phillip J. Eby, Lars Gustäbel, Raymond "
"Hettinger, Ralf W. Grosse- Kunstleve, Kent Johnson, Iain Lowe, Martin von "
"Löwis, Fredrik Lundh, Andrew McNamara, Skip Montanaro, Gustavo Niemeyer, "
"Paul Prescod, James Pryor, Mike Rovner, Scott Weikart, Barry Warsaw, Thomas "
"Wouters."
msgstr ""

# 28acd1940e694121bf2301b516b07721
#: whatsnew/2.6.rst:5
#, fuzzy
msgid "What's New in Python 2.6"
msgstr "Nouveautés de Python 2.0"

# c29a3272d505440ca6c813cf461d3ee3
# f9a310b4fcf14787b893c07c385b0cc2
#: whatsnew/2.6.rst:9 whatsnew/2.7.rst:5
msgid "A.M. Kuchling (amk at amk.ca)"
msgstr ""

# 9d8536b78d8c4d5386d06ebfceead82f
#: whatsnew/2.6.rst:52
msgid ""
"This article explains the new features in Python 2.6, released on October 1 "
"2008.  The release schedule is described in :pep:`361`."
msgstr ""

# fc6cbf052212475f9bd895ecbe9b9958
#: whatsnew/2.6.rst:55
msgid ""
"The major theme of Python 2.6 is preparing the migration path to Python 3.0, "
"a major redesign of the language.  Whenever possible, Python 2.6 "
"incorporates new features and syntax from 3.0 while remaining compatible "
"with existing code by not removing older features or syntax.  When it's not "
"possible to do that, Python 2.6 tries to do what it can, adding "
"compatibility functions in a :mod:`future_builtins` module and a :option:"
"`-3` switch to warn about usages that will become unsupported in 3.0."
msgstr ""

# ab0455404c984bbf99c8876c5febea42
#: whatsnew/2.6.rst:64
msgid ""
"Some significant new packages have been added to the standard library, such "
"as the :mod:`multiprocessing` and :mod:`json` modules, but there aren't many "
"new features that aren't related to Python 3.0 in some way."
msgstr ""

# 8e831754d9214d7a9f4b59942523e0e2
#: whatsnew/2.6.rst:69
msgid ""
"Python 2.6 also sees a number of improvements and bugfixes throughout the "
"source.  A search through the change logs finds there were 259 patches "
"applied and 612 bugs fixed between Python 2.5 and 2.6.  Both figures are "
"likely to be underestimates."
msgstr ""

# 5904e3adee3b4d08a5e3285b76e16d6c
#: whatsnew/2.6.rst:74
msgid ""
"This article doesn't attempt to provide a complete specification of the new "
"features, but instead provides a convenient overview.  For full details, you "
"should refer to the documentation for Python 2.6. If you want to understand "
"the rationale for the design and implementation, refer to the PEP for a "
"particular new feature. Whenever possible, \"What's New in Python\" links to "
"the bug/patch item for each change."
msgstr ""

# 4b0f5b848cd5406ca0c779881b25ef69
#: whatsnew/2.6.rst:90
msgid "Python 3.0"
msgstr "Python 3.0"

# 4fcf051943574910b7bc689b7a1964d3
#: whatsnew/2.6.rst:92
msgid ""
"The development cycle for Python versions 2.6 and 3.0 was synchronized, with "
"the alpha and beta releases for both versions being made on the same days.  "
"The development of 3.0 has influenced many features in 2.6."
msgstr ""

# 350f4a76f54c46d99834384ac47bfc88
#: whatsnew/2.6.rst:97
msgid ""
"Python 3.0 is a far-ranging redesign of Python that breaks compatibility "
"with the 2.x series.  This means that existing Python code will need some "
"conversion in order to run on Python 3.0.  However, not all the changes in "
"3.0 necessarily break compatibility.  In cases where new features won't "
"cause existing code to break, they've been backported to 2.6 and are "
"described in this document in the appropriate place.  Some of the 3.0-"
"derived features are:"
msgstr ""

# ac1c865cec564360998ab704409aded0
#: whatsnew/2.6.rst:106
msgid ""
"A :meth:`__complex__` method for converting objects to a complex number."
msgstr ""

# 7cfabd219d8b4250850c9fb93779f40f
#: whatsnew/2.6.rst:107
msgid "Alternate syntax for catching exceptions: ``except TypeError as exc``."
msgstr ""

# 389c7ca6d40343198612b41c51e6c696
#: whatsnew/2.6.rst:108
msgid ""
"The addition of :func:`functools.reduce` as a synonym for the built-in :func:"
"`reduce` function."
msgstr ""

# 8c8ee38e3ff54e57bd62ff9586e0d512
#: whatsnew/2.6.rst:111
msgid ""
"Python 3.0 adds several new built-in functions and changes the semantics of "
"some existing builtins.  Functions that are new in 3.0 such as :func:`bin` "
"have simply been added to Python 2.6, but existing builtins haven't been "
"changed; instead, the :mod:`future_builtins` module has versions with the "
"new 3.0 semantics.  Code written to be compatible with 3.0 can do ``from "
"future_builtins import hex, map`` as necessary."
msgstr ""

# 9ef1021ed1824670bf89c705ff224e9c
#: whatsnew/2.6.rst:119
msgid ""
"A new command-line switch, :option:`-3`, enables warnings about features "
"that will be removed in Python 3.0.  You can run code with this switch to "
"see how much work will be necessary to port code to 3.0.  The value of this "
"switch is available to Python code as the boolean variable :data:`sys."
"py3kwarning`, and to C extension code as :c:data:`Py_Py3kWarningFlag`."
msgstr ""

# 7198e059f9c64474979441087d373094
#: whatsnew/2.6.rst:128
msgid ""
"The 3xxx series of PEPs, which contains proposals for Python 3.0. :pep:"
"`3000` describes the development process for Python 3.0. Start with :pep:"
"`3100` that describes the general goals for Python 3.0, and then explore the "
"higher-numbered PEPS that propose specific features."
msgstr ""

# 341bb6fe85874298b78b96fe2b5c874c
#: whatsnew/2.6.rst:136
msgid "Changes to the Development Process"
msgstr ""

# 47c7c534e5594ceb9f51dcdcde891517
#: whatsnew/2.6.rst:138
msgid ""
"While 2.6 was being developed, the Python development process underwent two "
"significant changes: we switched from SourceForge's issue tracker to a "
"customized Roundup installation, and the documentation was converted from "
"LaTeX to reStructuredText."
msgstr ""

# f78aec6872ee4f52abb1a3c798b66a5f
#: whatsnew/2.6.rst:145
msgid "New Issue Tracker: Roundup"
msgstr ""

# 8fd9f772790a4bd1ab4b49068d2f9a71
#: whatsnew/2.6.rst:147
msgid ""
"For a long time, the Python developers had been growing increasingly annoyed "
"by SourceForge's bug tracker.  SourceForge's hosted solution doesn't permit "
"much customization; for example, it wasn't possible to customize the life "
"cycle of issues."
msgstr ""

# b1b394bc4a8d49fba29ba31d0af57e5b
#: whatsnew/2.6.rst:152
msgid ""
"The infrastructure committee of the Python Software Foundation therefore "
"posted a call for issue trackers, asking volunteers to set up different "
"products and import some of the bugs and patches from SourceForge.  Four "
"different trackers were examined: `Jira <http://www.atlassian.com/software/"
"jira/>`__, `Launchpad <http://www.launchpad.net>`__, `Roundup <http://"
"roundup.sourceforge.net/>`__, and `Trac <http://trac.edgewall.org/>`__. The "
"committee eventually settled on Jira and Roundup as the two candidates.  "
"Jira is a commercial product that offers no-cost hosted instances to free-"
"software projects; Roundup is an open-source project that requires "
"volunteers to administer it and a server to host it."
msgstr ""

# cd3d70b967c44c0caed6483a41f849e5
#: whatsnew/2.6.rst:166
msgid ""
"After posting a call for volunteers, a new Roundup installation was set up "
"at http://bugs.python.org.  One installation of Roundup can host multiple "
"trackers, and this server now also hosts issue trackers for Jython and for "
"the Python web site.  It will surely find other uses in the future.  Where "
"possible, this edition of \"What's New in Python\" links to the bug/patch "
"item for each change."
msgstr ""

# b98a4bf292e74e8799ce10fefeda0fe6
#: whatsnew/2.6.rst:174
msgid ""
"Hosting of the Python bug tracker is kindly provided by `Upfront Systems "
"<http://www.upfrontsystems.co.za/>`__ of Stellenbosch, South Africa.  Martin "
"von Löwis put a lot of effort into importing existing bugs and patches from "
"SourceForge; his scripts for this import operation are at http://svn.python."
"org/view/tracker/importer/ and may be useful to other projects wishing to "
"move from SourceForge to Roundup."
msgstr ""

# ad9f9d9310754eafafaf9f6ea7166244
#: whatsnew/2.6.rst:185
msgid "http://bugs.python.org"
msgstr ""

# 30fa58fe3aa548ce924739794741ed45
#: whatsnew/2.6.rst:185
msgid "The Python bug tracker."
msgstr ""

# dba5cd1076544533bf3b2680077a6256
#: whatsnew/2.6.rst:188
msgid "http://bugs.jython.org:"
msgstr ""

# 5deb09f0966e40ac92e796e6dc2c7bfb
#: whatsnew/2.6.rst:188
msgid "The Jython bug tracker."
msgstr ""

# b0b3a3a3e73e472a9df80b0b573f0044
#: whatsnew/2.6.rst:191
msgid "http://roundup.sourceforge.net/"
msgstr ""

# 4c6b06246b5742478f69feddea71a28c
#: whatsnew/2.6.rst:191
msgid "Roundup downloads and documentation."
msgstr ""

# 5c156b008a5e4489bf96c563e25816f0
#: whatsnew/2.6.rst:193
msgid "http://svn.python.org/view/tracker/importer/"
msgstr ""

# 5b26a65896a54aac9eb6347e7c733130
#: whatsnew/2.6.rst:194
msgid "Martin von Löwis's conversion scripts."
msgstr ""

# 625a6645170a449495b12812489d55f4
#: whatsnew/2.6.rst:197
msgid "New Documentation Format: reStructuredText Using Sphinx"
msgstr ""

# eb9992e010664c2eaa5182a32101accf
#: whatsnew/2.6.rst:199
msgid ""
"The Python documentation was written using LaTeX since the project started "
"around 1989.  In the 1980s and early 1990s, most documentation was printed "
"out for later study, not viewed online. LaTeX was widely used because it "
"provided attractive printed output while remaining straightforward to write "
"once the basic rules of the markup were learned."
msgstr ""

# 3c3f58d433314ad58841012d29ce569a
#: whatsnew/2.6.rst:206
msgid ""
"Today LaTeX is still used for writing publications destined for printing, "
"but the landscape for programming tools has shifted.  We no longer print out "
"reams of documentation; instead, we browse through it online and HTML has "
"become the most important format to support. Unfortunately, converting LaTeX "
"to HTML is fairly complicated and Fred L. Drake Jr., the long-time Python "
"documentation editor, spent a lot of time maintaining the conversion "
"process.  Occasionally people would suggest converting the documentation "
"into SGML and later XML, but performing a good conversion is a major task "
"and no one ever committed the time required to finish the job."
msgstr ""

# a7b251b308b248488ac4bf0a4fa743a4
#: whatsnew/2.6.rst:217
msgid ""
"During the 2.6 development cycle, Georg Brandl put a lot of effort into "
"building a new toolchain for processing the documentation.  The resulting "
"package is called Sphinx, and is available from http://sphinx.pocoo.org/."
msgstr ""

# b637827f04de452daf2ba9c9743f89f0
#: whatsnew/2.6.rst:222
msgid ""
"Sphinx concentrates on HTML output, producing attractively styled and modern "
"HTML; printed output is still supported through conversion to LaTeX.  The "
"input format is reStructuredText, a markup syntax supporting custom "
"extensions and directives that is commonly used in the Python community."
msgstr ""

# a71faf321a0145d0a5435518f2b3a801
#: whatsnew/2.6.rst:228
msgid ""
"Sphinx is a standalone package that can be used for writing, and almost two "
"dozen other projects (`listed on the Sphinx web site <http://sphinx.pocoo."
"org/examples.html>`__) have adopted Sphinx as their documentation tool."
msgstr ""

# 14049f23541047d49450f98a15ea796b
#: whatsnew/2.6.rst:236
#, fuzzy
msgid "Documenting Python"
msgstr "Portage vers Python 3.2"

# 842b7f3175f7459aabfbbd5e12c79c87
#: whatsnew/2.6.rst:236
msgid "Describes how to write for Python's documentation."
msgstr ""

#: whatsnew/2.6.rst:239
msgid "Sphinx"
msgstr ""

# 8f8d92a845354156b3c69726469ccb03
#: whatsnew/2.6.rst:239
msgid "Documentation and code for the Sphinx toolchain."
msgstr ""

#: whatsnew/2.6.rst:241
msgid "Docutils"
msgstr ""

# bd359494d6bc42eb9456af7c8531e944
#: whatsnew/2.6.rst:242
msgid "The underlying reStructuredText parser and toolset."
msgstr ""

# 3abeb6675ed245de8a80998632c7e851
#: whatsnew/2.6.rst:250
msgid ""
"The previous version, Python 2.5, added the ':keyword:`with`' statement as "
"an optional feature, to be enabled by a ``from __future__ import "
"with_statement`` directive.  In 2.6 the statement no longer needs to be "
"specially enabled; this means that :keyword:`with` is now always a keyword.  "
"The rest of this section is a copy of the corresponding section from the "
"\"What's New in Python 2.5\" document; if you're familiar with the ':keyword:"
"`with`' statement from Python 2.5, you can skip this section."
msgstr ""

# de141025b99a4fbb878d842055a7352c
#: whatsnew/2.6.rst:265
msgid ""
"The ':keyword:`with`' statement is a control-flow structure whose basic "
"structure is::"
msgstr ""

# 8e8ddb7e1e06454298d2f22d9db3b89c
#: whatsnew/2.6.rst:271
msgid ""
"The expression is evaluated, and it should result in an object that supports "
"the context management protocol (that is, has :meth:`__enter__` and :meth:"
"`__exit__` methods)."
msgstr ""

# 26897e9a7a1743dd95d3a7f5c4a74aa1
#: whatsnew/2.6.rst:312
msgid ""
"The :func:`localcontext` function in the :mod:`decimal` module makes it easy "
"to save and restore the current decimal context, which encapsulates the "
"desired precision and rounding characteristics for computations::"
msgstr ""

# ae546d9d2f944247b5529281d6daddd5
#: whatsnew/2.6.rst:345
msgid ""
"The context manager's :meth:`__enter__` method is called.  The value "
"returned is assigned to *VAR*.  If no ``as VAR`` clause is present, the "
"value is simply discarded."
msgstr ""

# 4e8c8df74eff48fc96b16b8aa347f309
#: whatsnew/2.6.rst:351
msgid ""
"If *BLOCK* raises an exception, the context manager's :meth:`__exit__` "
"method is called with three arguments, the exception details (``type, value, "
"traceback``, the same values returned by :func:`sys.exc_info`, which can "
"also be ``None`` if no exception occurred).  The method's return value "
"controls whether an exception is re-raised: any false value re-raises the "
"exception, and ``True`` will result in suppressing it.  You'll only rarely "
"want to suppress the exception, because if you do the author of the code "
"containing the ':keyword:`with`' statement will never realize anything went "
"wrong."
msgstr ""

# d173401fecd345a782430efc5540f6a4
#: whatsnew/2.6.rst:433
msgid ""
"The :mod:`contextlib` module provides some functions and a decorator that "
"are useful when writing objects for use with the ':keyword:`with`' statement."
msgstr ""

# d1634a8af45c44b68f853017e8c0ad1f
#: whatsnew/2.6.rst:445
msgid ""
"Using this decorator, our database example from the previous section could "
"be written as::"
msgstr ""

# e0dada5ffdd2444d8cdf8a1edce08c64
#: whatsnew/2.6.rst:465
msgid ""
"The :mod:`contextlib` module also has a ``nested(mgr1, mgr2, ...)`` function "
"that combines a number of context managers so you don't need to write nested "
"':keyword:`with`' statements.  In this example, the single ':keyword:`with`' "
"statement both starts a database transaction and acquires a thread lock::"
msgstr ""

# 2f5975a46acb4a96b1de95b386e40c26
#: whatsnew/2.6.rst:474
msgid ""
"Finally, the :func:`closing` function returns its argument so that it can be "
"bound to a variable, and calls the argument's ``.close()`` method at the end "
"of the block. ::"
msgstr ""

# 20cdd4f676a444ce8c38223e8f24565a
#: whatsnew/2.6.rst:501
msgid "PEP 366: Explicit Relative Imports From a Main Module"
msgstr ""

# 79148424e9e44e45a98d8df9fc69acc4
#: whatsnew/2.6.rst:503
msgid ""
"Python's :option:`-m` switch allows running a module as a script. When you "
"ran a module that was located inside a package, relative imports didn't work "
"correctly."
msgstr ""

# 2feaab3883c5459fb3a7fb7e9e1704cc
#: whatsnew/2.6.rst:507
msgid ""
"The fix for Python 2.6 adds a :attr:`__package__` attribute to modules.  "
"When this attribute is present, relative imports will be relative to the "
"value of this attribute instead of the :attr:`__name__` attribute."
msgstr ""

# 11e79e2789a548908247201ff704d925
#: whatsnew/2.6.rst:512
msgid ""
"PEP 302-style importers can then set :attr:`__package__` as necessary. The :"
"mod:`runpy` module that implements the :option:`-m` switch now does this, so "
"relative imports will now work correctly in scripts running from inside a "
"package."
msgstr ""

# 98145736f31741e7b418849e8dd5623d
#: whatsnew/2.6.rst:522
msgid "PEP 370: Per-user ``site-packages`` Directory"
msgstr ""

# e2787c9840944d529ac4e526fd4fb2ea
#: whatsnew/2.6.rst:524
msgid ""
"When you run Python, the module search path ``sys.path`` usually includes a "
"directory whose path ends in ``\"site-packages\"``.  This directory is "
"intended to hold locally-installed packages available to all users using a "
"machine or a particular site installation."
msgstr ""

# 486973fc186f4e3ab30781e0aef9b642
#: whatsnew/2.6.rst:529
msgid ""
"Python 2.6 introduces a convention for user-specific site directories. The "
"directory varies depending on the platform:"
msgstr ""

# 27613afc289746789395c6a59c8f3ad7
#: whatsnew/2.6.rst:532
msgid "Unix and Mac OS X: :file:`~/.local/`"
msgstr ""

# b1f4ca9da942434db476d4e42dc7de1e
#: whatsnew/2.6.rst:533
msgid "Windows: :file:`%APPDATA%/Python`"
msgstr ""

# 65df908289f04f0c8bb554be2eac1a57
#: whatsnew/2.6.rst:535
msgid ""
"Within this directory, there will be version-specific subdirectories, such "
"as :file:`lib/python2.6/site-packages` on Unix/Mac OS and :file:`Python26/"
"site-packages` on Windows."
msgstr ""

# 7382fb9052cb42048191b244cded188f
#: whatsnew/2.6.rst:539
msgid ""
"If you don't like the default directory, it can be overridden by an "
"environment variable.  :envvar:`PYTHONUSERBASE` sets the root directory used "
"for all Python versions supporting this feature.  On Windows, the directory "
"for application-specific data can be changed by setting the :envvar:"
"`APPDATA` environment variable.  You can also modify the :file:`site.py` "
"file for your Python installation."
msgstr ""

# 8ee102475c614f8c8d8dc4f6723a2e2d
#: whatsnew/2.6.rst:546
msgid ""
"The feature can be disabled entirely by running Python with the :option:`-s` "
"option or setting the :envvar:`PYTHONNOUSERSITE` environment variable."
msgstr ""

# 8f1dc9bc11b04970bf110cdcfe0a8ea6
#: whatsnew/2.6.rst:552
#, fuzzy
msgid "PEP 370 - Per-user site-packages Directory"
msgstr ":pep:`370` --  Répertoire site-packages par utilisateur "

# 8fc844356c454a02ad06ac87d68c7cd9
#: whatsnew/2.6.rst:553
msgid "PEP written and implemented by Christian Heimes."
msgstr ""

# 514421266981422ea0b400d0708e700e
#: whatsnew/2.6.rst:561
msgid "PEP 371: The ``multiprocessing`` Package"
msgstr ""

# 81c4647421df43cdbd2767c16e918abd
#: whatsnew/2.6.rst:563
msgid ""
"The new :mod:`multiprocessing` package lets Python programs create new "
"processes that will perform a computation and return a result to the "
"parent.  The parent and child processes can communicate using queues and "
"pipes, synchronize their operations using locks and semaphores, and can "
"share simple arrays of data."
msgstr ""

# 25095c829ee844e4afef5a0c71d1451c
#: whatsnew/2.6.rst:569
msgid ""
"The :mod:`multiprocessing` module started out as an exact emulation of the :"
"mod:`threading` module using processes instead of threads.  That goal was "
"discarded along the path to Python 2.6, but the general approach of the "
"module is still similar.  The fundamental class is the :class:`Process`, "
"which is passed a callable object and a collection of arguments.  The :meth:"
"`start` method sets the callable running in a subprocess, after which you "
"can call the :meth:`is_alive` method to check whether the subprocess is "
"still running and the :meth:`join` method to wait for the process to exit."
msgstr ""

# 11d5894fcb954821901a13bb90fccd33
#: whatsnew/2.6.rst:579
msgid ""
"Here's a simple example where the subprocess will calculate a factorial.  "
"The function doing the calculation is written strangely so that it takes "
"significantly longer when the input argument is a multiple of 4."
msgstr ""

# 989b42590a704c13a32dfe6a51770c90
#: whatsnew/2.6.rst:616
msgid ""
"A :class:`Queue` is used to communicate the result of the factorial. The :"
"class:`Queue` object is stored in a global variable. The child process will "
"use the value of the variable when the child was created; because it's a :"
"class:`Queue`, parent and child can use the object to communicate.  (If the "
"parent were to change the value of the global variable, the child's value "
"would be unaffected, and vice versa.)"
msgstr ""

# 345c2707ee68426e8b582dae79a2e285
#: whatsnew/2.6.rst:624
msgid ""
"Two other classes, :class:`Pool` and :class:`Manager`, provide higher-level "
"interfaces.  :class:`Pool` will create a fixed number of worker processes, "
"and requests can then be distributed to the workers by calling :meth:`apply` "
"or :meth:`apply_async` to add a single request, and :meth:`map` or :meth:"
"`map_async` to add a number of requests.  The following code uses a :class:"
"`Pool` to spread requests across 5 worker processes and retrieve a list of "
"results::"
msgstr ""

# b5622d21974e4e13993e1d2b16382375
#: whatsnew/2.6.rst:651
msgid ""
"The other high-level interface, the :class:`Manager` class, creates a "
"separate server process that can hold master copies of Python data "
"structures.  Other processes can then access and modify these data "
"structures using proxy objects.  The following example creates a shared "
"dictionary by calling the :meth:`dict` method; the worker processes then "
"insert values into the dictionary.  (Locking is not done for you "
"automatically, which doesn't matter in this example. :class:`Manager`'s "
"methods also include :meth:`Lock`, :meth:`RLock`, and :meth:`Semaphore` to "
"create shared locks.)"
msgstr ""

# bd863da2b2ad4214847d57d2953fb5c9
#: whatsnew/2.6.rst:695
msgid "This will produce the output::"
msgstr ""

# 41b691d9864141e0a010165676217e79
#: whatsnew/2.6.rst:706
msgid "The documentation for the :mod:`multiprocessing` module."
msgstr ""

#: whatsnew/2.6.rst:709
msgid "PEP 371 - Addition of the multiprocessing package"
msgstr ""

# 343c5245b2e9425d8e51b358a0ce6eef
#: whatsnew/2.6.rst:709
msgid ""
"PEP written by Jesse Noller and Richard Oudkerk; implemented by Richard "
"Oudkerk and Jesse Noller."
msgstr ""

# d81e0754aea14d2a98819e6510489dbc
#: whatsnew/2.6.rst:718
msgid "PEP 3101: Advanced String Formatting"
msgstr ""

# d6fb2e6ac6f847d7b38b10c8713ceb78
#: whatsnew/2.6.rst:720
msgid ""
"In Python 3.0, the `%` operator is supplemented by a more powerful string "
"formatting method, :meth:`format`.  Support for the :meth:`str.format` "
"method has been backported to Python 2.6."
msgstr ""

# 5f84b152f238488ebb6a486a0303354d
#: whatsnew/2.6.rst:724
msgid ""
"In 2.6, both 8-bit and Unicode strings have a `.format()` method that treats "
"the string as a template and takes the arguments to be formatted. The "
"formatting template uses curly brackets (`{`, `}`) as special characters::"
msgstr ""

# 8074d1b62445447188ae3e3bbe31fbdf
#: whatsnew/2.6.rst:737
msgid "Curly brackets can be escaped by doubling them::"
msgstr ""

# 07e12588101e49439021a9e6ecef8d1c
#: whatsnew/2.6.rst:742
msgid ""
"Field names can be integers indicating positional arguments, such as ``{0}"
"``, ``{1}``, etc. or names of keyword arguments.  You can also supply "
"compound field names that read attributes or access dictionary keys::"
msgstr ""

# 723479623ff14093bf4e46d4c93f13b6
#: whatsnew/2.6.rst:756
msgid ""
"Note that when using dictionary-style notation such as ``[.mp4]``, you don't "
"need to put any quotation marks around the string; it will look up the value "
"using ``.mp4`` as the key.  Strings beginning with a number will be "
"converted to an integer.  You can't write more complicated expressions "
"inside a format string."
msgstr ""

# abedb521943a47d58039a318313481cc
#: whatsnew/2.6.rst:762
msgid ""
"So far we've shown how to specify which field to substitute into the "
"resulting string.  The precise formatting used is also controllable by "
"adding a colon followed by a format specifier.  For example::"
msgstr ""

# 905f062f1864412b8d229109438f8ab1
#: whatsnew/2.6.rst:776
msgid "Format specifiers can reference other fields through nesting::"
msgstr ""

# 07e003b76f8a4b84ad532ce5f94b000a
#: whatsnew/2.6.rst:786
msgid "The alignment of a field within the desired width can be specified:"
msgstr ""

# 9b5692890dc54262882d43b0a423cd9e
#: whatsnew/2.6.rst:789
msgid "Character"
msgstr ""

# 20957d06e8e74334b640e9c014ea7308
#: whatsnew/2.6.rst:789
msgid "Effect"
msgstr ""

# 73bf4f1dd48e493facf8a076b5bd7f77
#: whatsnew/2.6.rst:791
msgid "< (default)"
msgstr ""

# 7fb247a9117b4a1ab319b44b4d8f1337
#: whatsnew/2.6.rst:791
msgid "Left-align"
msgstr ""

# 28a06381b3f0487f93509c474997a9d4
#: whatsnew/2.6.rst:792
msgid ">"
msgstr ""

# 2bf3085578b848f3bd8f6a01c4b466ed
#: whatsnew/2.6.rst:792
msgid "Right-align"
msgstr ""

# e3b9c75ac2f64d2481fd430aad836bc0
#: whatsnew/2.6.rst:793
msgid "^"
msgstr ""

# 6ea8b753087c461e89336e8a9df48a6b
#: whatsnew/2.6.rst:793
msgid "Center"
msgstr ""

# 9cc2d69d07bb405a9408114f68ec2a0c
#: whatsnew/2.6.rst:794
msgid "="
msgstr ""

# 93c04c01db81443fa7edea19815b6232
#: whatsnew/2.6.rst:794
msgid "(For numeric types only) Pad after the sign."
msgstr ""

# 177d3d6f323c4cf781e55b571b816eae
#: whatsnew/2.6.rst:797
msgid ""
"Format specifiers can also include a presentation type, which controls how "
"the value is formatted.  For example, floating-point numbers can be "
"formatted as a general number or in exponential notation::"
msgstr ""

# 830f84eb30cd488085f65867843e6287
#: whatsnew/2.6.rst:806
msgid ""
"A variety of presentation types are available.  Consult the 2.6 "
"documentation for a :ref:`complete list <formatstrings>`; here's a sample:"
msgstr ""

# c6e28b8554a94348bdcd098fe3bd3d02
#: whatsnew/2.6.rst:810
msgid "``b``"
msgstr ""

# 96b48b3dd60b46f1a72cba884323faed
#: whatsnew/2.6.rst:810
msgid "Binary. Outputs the number in base 2."
msgstr ""

# f4122fe2e3f74284a6879669406def6b
#: whatsnew/2.6.rst:811
msgid "``c``"
msgstr ""

# b320ed0135e943e7900f6d43589a05c4
#: whatsnew/2.6.rst:811
msgid ""
"Character. Converts the integer to the corresponding Unicode character "
"before printing."
msgstr ""

# 2de58e697ab14bc4a000ee53dffe31cf
#: whatsnew/2.6.rst:813
msgid "``d``"
msgstr ""

# ae3d749762ba4b349c35ccc58e6c9b9c
#: whatsnew/2.6.rst:813
msgid "Decimal Integer. Outputs the number in base 10."
msgstr ""

# 021886a241dc4472b20c30cc2713403e
#: whatsnew/2.6.rst:814
msgid "``o``"
msgstr ""

# 04c9165a7f8c4579ab3d33d3ae295ab9
#: whatsnew/2.6.rst:814
msgid "Octal format. Outputs the number in base 8."
msgstr ""

# 31296402c19a443d83cc1f12667855b7
#: whatsnew/2.6.rst:815
msgid "``x``"
msgstr ""

# 337d89e0c02f468781de65e2fd6a764b
#: whatsnew/2.6.rst:815
msgid ""
"Hex format. Outputs the number in base 16, using lower-case letters for the "
"digits above 9."
msgstr ""

# 7528614d33e140468f097fd3330f19a5
#: whatsnew/2.6.rst:817
msgid "``e``"
msgstr ""

# e760939b9a79494da31e95b9dbeb396a
#: whatsnew/2.6.rst:817
msgid ""
"Exponent notation. Prints the number in scientific notation using the letter "
"'e' to indicate the exponent."
msgstr ""

# 23499d70b76a4b4fb210e5f85d2d74f6
#: whatsnew/2.6.rst:819
msgid "``g``"
msgstr ""

# 29bb40ec5d1f474ca41e138a5197c2bb
#: whatsnew/2.6.rst:819
msgid ""
"General format. This prints the number as a fixed-point number, unless the "
"number is too large, in which case it switches to 'e' exponent notation."
msgstr ""

# 9964f706e8324689a82e68b99f4fc774
#: whatsnew/2.6.rst:822
msgid "``n``"
msgstr ""

# 2556c3aa138c4a759914e54f21c22ca5
#: whatsnew/2.6.rst:822
msgid ""
"Number. This is the same as 'g' (for floats) or 'd' (for integers), except "
"that it uses the current locale setting to insert the appropriate number "
"separator characters."
msgstr ""

# 56b970ae808c424480db95aa725327f3
#: whatsnew/2.6.rst:825
msgid "``%``"
msgstr ""

# 0d95ed70decc42889b207acc3652f39a
#: whatsnew/2.6.rst:825
msgid ""
"Percentage. Multiplies the number by 100 and displays in fixed ('f') format, "
"followed by a percent sign."
msgstr ""

# e54ea4d653eb4dc8a7f6cbfcdc393944
#: whatsnew/2.6.rst:829
msgid ""
"Classes and types can define a :meth:`__format__` method to control how "
"they're formatted.  It receives a single argument, the format specifier::"
msgstr ""

# e55fb69b0a244580a0258bada83a3b73
#: whatsnew/2.6.rst:838
msgid ""
"There's also a :func:`format` builtin that will format a single value.  It "
"calls the type's :meth:`__format__` method with the provided specifier::"
msgstr ""

#: whatsnew/2.6.rst:849
msgid "formatstrings"
msgstr ""

# 572b38b5e9ed4220bdeaed4656abb015
#: whatsnew/2.6.rst:849
msgid "The reference documentation for format fields."
msgstr ""

#: whatsnew/2.6.rst:851
msgid "PEP 3101 - Advanced String Formatting"
msgstr ""

# 93cc64172d3047a991f13cac472e013b
#: whatsnew/2.6.rst:852
msgid "PEP written by Talin. Implemented by Eric Smith."
msgstr ""

# 67fdd5919238442aa626b29319b10b09
#: whatsnew/2.6.rst:859
msgid "PEP 3105: ``print`` As a Function"
msgstr ""

# 2382601ed3dc4c15880a60d5d24810f3
#: whatsnew/2.6.rst:861
msgid ""
"The ``print`` statement becomes the :func:`print` function in Python 3.0. "
"Making :func:`print` a function makes it possible to replace the function by "
"doing ``def print(...)`` or importing a new function from somewhere else."
msgstr ""

# 3255260b140a479085652fbc899a2f55
#: whatsnew/2.6.rst:865
msgid ""
"Python 2.6 has a ``__future__`` import that removes ``print`` as language "
"syntax, letting you use the functional form instead.  For example::"
msgstr ""

# 51f298a746614cb3bcd5bfec2e1a315f
#: whatsnew/2.6.rst:871
msgid "The signature of the new function is::"
msgstr ""

# 2498c739560540e3b0543033e404b5f7
#: whatsnew/2.6.rst:876
msgid "The parameters are:"
msgstr ""

# 582c3fc216d347ad8c0afa7eec159035
#: whatsnew/2.6.rst:878
msgid "*args*: positional arguments whose values will be printed out."
msgstr ""

# a22571cb6fd04d129889cb4ca9ae5102
#: whatsnew/2.6.rst:879
msgid "*sep*: the separator, which will be printed between arguments."
msgstr ""

# ab7d76ff79274f5ba9fec907ae27fce8
#: whatsnew/2.6.rst:880
msgid ""
"*end*: the ending text, which will be printed after all of the arguments "
"have been output."
msgstr ""

# 63143db65b214e1d92780d760ae422db
#: whatsnew/2.6.rst:882
msgid "*file*: the file object to which the output will be sent."
msgstr ""

# 73af2ae8185d4077886f17691e5c4cb8
#: whatsnew/2.6.rst:886
#, fuzzy
msgid "PEP 3105 - Make print a function"
msgstr ":pep:`3105`: *Make print a function*"

# 0d04e32ef22e453d96a93b5a43969dec
#: whatsnew/2.6.rst:887
msgid "PEP written by Georg Brandl."
msgstr ""

# 60e215d235e4417da486dac53517b83d
#: whatsnew/2.6.rst:894
msgid "PEP 3110: Exception-Handling Changes"
msgstr ""

# 4fbb55f73c814cb0832045da98415d21
#: whatsnew/2.6.rst:896
msgid ""
"One error that Python programmers occasionally make is writing the following "
"code::"
msgstr ""

# 4191252ef9a845438dfbe3f7fe05d895
#: whatsnew/2.6.rst:904
msgid ""
"The author is probably trying to catch both :exc:`TypeError` and :exc:"
"`ValueError` exceptions, but this code actually does something different: it "
"will catch :exc:`TypeError` and bind the resulting exception object to the "
"local name ``\"ValueError\"``.  The :exc:`ValueError` exception will not be "
"caught at all.  The correct code specifies a tuple of exceptions::"
msgstr ""

# 9b6aae21f7f64998b894067271f127cc
#: whatsnew/2.6.rst:916
msgid ""
"This error happens because the use of the comma here is ambiguous: does it "
"indicate two different nodes in the parse tree, or a single node that's a "
"tuple?"
msgstr ""

# 8b8d46aab1334a3ea3f5d237b1edaf51
#: whatsnew/2.6.rst:920
msgid ""
"Python 3.0 makes this unambiguous by replacing the comma with the word \"as"
"\".  To catch an exception and store the exception object in the variable "
"``exc``, you must write::"
msgstr ""

# 1918fbd9b70b47f18d78a27cb63d369b
#: whatsnew/2.6.rst:929
msgid ""
"Python 3.0 will only support the use of \"as\", and therefore interprets the "
"first example as catching two different exceptions.  Python 2.6 supports "
"both the comma and \"as\", so existing code will continue to work.  We "
"therefore suggest using \"as\" when writing new Python code that will only "
"be executed with 2.6."
msgstr ""

#: whatsnew/2.6.rst:937
msgid "PEP 3110 - Catching Exceptions in Python 3000"
msgstr ""

# 412ba1ea1caf40d586de4c7f9a1f2a40
#: whatsnew/2.6.rst:938
msgid "PEP written and implemented by Collin Winter."
msgstr ""

# a61d772f7b78401a8892f14c1453baf3
#: whatsnew/2.6.rst:945
msgid "PEP 3112: Byte Literals"
msgstr ""

# ecbbd297f2e0409f9792f3652d1b200b
#: whatsnew/2.6.rst:947
msgid ""
"Python 3.0 adopts Unicode as the language's fundamental string type and "
"denotes 8-bit literals differently, either as ``b'string'`` or using a :"
"class:`bytes` constructor.  For future compatibility, Python 2.6 adds :class:"
"`bytes` as a synonym for the :class:`str` type, and it also supports the "
"``b''`` notation."
msgstr ""

# b03dcb4846c545a597a6901845c72d3e
#: whatsnew/2.6.rst:954
msgid ""
"The 2.6 :class:`str` differs from 3.0's :class:`bytes` type in various ways; "
"most notably, the constructor is completely different.  In 3.0, ``bytes([65, "
"66, 67])`` is 3 elements long, containing the bytes representing ``ABC``; in "
"2.6, ``bytes([65, 66, 67])`` returns the 12-byte string representing the :"
"func:`str` of the list."
msgstr ""

# 16494c8cbe1547af97193381c1391f36
#: whatsnew/2.6.rst:960
msgid ""
"The primary use of :class:`bytes` in 2.6 will be to write tests of object "
"type such as ``isinstance(x, bytes)``.  This will help the 2to3 converter, "
"which can't tell whether 2.x code intends strings to contain either "
"characters or 8-bit bytes; you can now use either :class:`bytes` or :class:"
"`str` to represent your intention exactly, and the resulting code will also "
"be correct in Python 3.0."
msgstr ""

# 55e77ca0d6a04e11ba200be188411772
#: whatsnew/2.6.rst:967
msgid ""
"There's also a ``__future__`` import that causes all string literals to "
"become Unicode strings.  This means that ``\\u`` escape sequences can be "
"used to include Unicode characters::"
msgstr ""

# 52ff99905a3243bfac13cde85746eef5
#: whatsnew/2.6.rst:979
msgid ""
"At the C level, Python 3.0 will rename the existing 8-bit string type, "
"called :c:type:`PyStringObject` in Python 2.x, to :c:type:`PyBytesObject`.  "
"Python 2.6 uses ``#define`` to support using the names :c:func:"
"`PyBytesObject`, :c:func:`PyBytes_Check`, :c:func:"
"`PyBytes_FromStringAndSize`, and all the other functions and macros used "
"with strings."
msgstr ""

# cd264d86197d4f0faa1b56c3963b1ca9
#: whatsnew/2.6.rst:986
msgid ""
"Instances of the :class:`bytes` type are immutable just as strings are.  A "
"new :class:`bytearray` type stores a mutable sequence of bytes::"
msgstr ""

# 83f2da64feb6425bbe0b5e78fbee4865
#: whatsnew/2.6.rst:1001
msgid ""
"Byte arrays support most of the methods of string types, such as :meth:"
"`startswith`/:meth:`endswith`, :meth:`find`/:meth:`rfind`, and some of the "
"methods of lists, such as :meth:`append`, :meth:`pop`,  and :meth:`reverse`."
msgstr ""

# 699896dc9202433d9fd64c28770ffd51
#: whatsnew/2.6.rst:1014
msgid ""
"There's also a corresponding C API, with :c:func:`PyByteArray_FromObject`, :"
"c:func:`PyByteArray_FromStringAndSize`, and various other functions."
msgstr ""

#: whatsnew/2.6.rst:1021
msgid "PEP 3112 - Bytes literals in Python 3000"
msgstr ""

# 0aced19687aa4c2f9ee159fd1e0a035f
#: whatsnew/2.6.rst:1022
msgid "PEP written by Jason Orendorff; backported to 2.6 by Christian Heimes."
msgstr ""

# 19bc35eea7904cfd837230bb0b4b071d
#: whatsnew/2.6.rst:1029
msgid "PEP 3116: New I/O Library"
msgstr ""

# 5272f82be6574900b05e9ce036250b89
#: whatsnew/2.6.rst:1031
msgid ""
"Python's built-in file objects support a number of methods, but file-like "
"objects don't necessarily support all of them.  Objects that imitate files "
"usually support :meth:`read` and :meth:`write`, but they may not support :"
"meth:`readline`, for example.  Python 3.0 introduces a layered I/O library "
"in the :mod:`io` module that separates buffering and text-handling features "
"from the fundamental read and write operations."
msgstr ""

# a7868e918d2540afb4c05ab074a2de7a
#: whatsnew/2.6.rst:1039
msgid ""
"There are three levels of abstract base classes provided by the :mod:`io` "
"module:"
msgstr ""

# 90bd155771c34f78a0727ca64c9f94ef
#: whatsnew/2.6.rst:1042
msgid ""
":class:`RawIOBase` defines raw I/O operations: :meth:`read`, :meth:"
"`readinto`, :meth:`write`, :meth:`seek`, :meth:`tell`, :meth:`truncate`, "
"and :meth:`close`. Most of the methods of this class will often map to a "
"single system call. There are also :meth:`readable`, :meth:`writable`, and :"
"meth:`seekable` methods for determining what operations a given object will "
"allow."
msgstr ""

# 3fea349a8a064b83944b888d6593938e
#: whatsnew/2.6.rst:1050
msgid ""
"Python 3.0 has concrete implementations of this class for files and sockets, "
"but Python 2.6 hasn't restructured its file and socket objects in this way."
msgstr ""

# f5ce6cd9583641d9bdf9e72e3683631b
#: whatsnew/2.6.rst:1056
msgid ""
":class:`BufferedIOBase` is an abstract base class that buffers data in "
"memory to reduce the number of system calls used, making I/O processing more "
"efficient. It supports all of the methods of :class:`RawIOBase`, and adds a :"
"attr:`raw` attribute holding the underlying raw object."
msgstr ""

# 8b1b234e1bec4624b18426529b0a84ad
#: whatsnew/2.6.rst:1062
msgid ""
"There are five concrete classes implementing this ABC. :class:"
"`BufferedWriter` and :class:`BufferedReader` are for objects that support "
"write-only or read-only usage that have a :meth:`seek` method for random "
"access.  :class:`BufferedRandom` objects support read and write access upon "
"the same underlying stream, and :class:`BufferedRWPair` is for objects such "
"as TTYs that have both read and write operations acting upon unconnected "
"streams of data. The :class:`BytesIO` class supports reading, writing, and "
"seeking over an in-memory buffer."
msgstr ""

# 056b7a5d399e4088ae60086650fdbe3e
#: whatsnew/2.6.rst:1075
msgid ""
":class:`TextIOBase`: Provides functions for reading and writing strings "
"(remember, strings will be Unicode in Python 3.0), and supporting :term:"
"`universal newlines`.  :class:`TextIOBase` defines the :meth:`readline` "
"method and supports iteration upon objects."
msgstr ""

# 88e5e719e18846aea22553d43e31e8bc
#: whatsnew/2.6.rst:1081
msgid ""
"There are two concrete implementations.  :class:`TextIOWrapper` wraps a "
"buffered I/O object, supporting all of the methods for text I/O and adding "
"a :attr:`buffer` attribute for access to the underlying object.  :class:"
"`StringIO` simply buffers everything in memory without ever writing anything "
"to disk."
msgstr ""

# 953dd75ac27a4c21b0ef97e9099e0d5b
#: whatsnew/2.6.rst:1087
msgid ""
"(In Python 2.6, :class:`io.StringIO` is implemented in pure Python, so it's "
"pretty slow.   You should therefore stick with the existing :mod:`StringIO` "
"module or :mod:`cStringIO` for now.  At some point Python 3.0's :mod:`io` "
"module will be rewritten into C for speed, and perhaps the C implementation "
"will be  backported to the 2.x releases.)"
msgstr ""

# a4c3b8a7dc8f44f9a938173743a2cfeb
#: whatsnew/2.6.rst:1093
msgid ""
"In Python 2.6, the underlying implementations haven't been restructured to "
"build on top of the :mod:`io` module's classes.  The module is being "
"provided to make it easier to write code that's forward-compatible with 3.0, "
"and to save developers the effort of writing their own implementations of "
"buffering and text I/O."
msgstr ""

#: whatsnew/2.6.rst:1103
msgid "PEP 3116 - New I/O"
msgstr ""

# ef75ae531f0341999cf90fdf4afaebbb
#: whatsnew/2.6.rst:1102
msgid ""
"PEP written by Daniel Stutzbach, Mike Verdone, and Guido van Rossum. Code by "
"Guido van Rossum, Georg Brandl, Walter Doerwald, Jeremy Hylton, Martin von "
"Löwis, Tony Lownds, and others."
msgstr ""

# c5e5151bb81d402a87151de0784bf4c5
#: whatsnew/2.6.rst:1111
msgid "PEP 3118: Revised Buffer Protocol"
msgstr ""

# f630a18547e6441984c4e1603c48a29e
#: whatsnew/2.6.rst:1113
msgid ""
"The buffer protocol is a C-level API that lets Python types exchange "
"pointers into their internal representations.  A memory-mapped file can be "
"viewed as a buffer of characters, for example, and this lets another module "
"such as :mod:`re` treat memory-mapped files as a string of characters to be "
"searched."
msgstr ""

# 989c0f80fb044286bd9727ca6427c3a3
#: whatsnew/2.6.rst:1119
msgid ""
"The primary users of the buffer protocol are numeric-processing packages "
"such as NumPy, which expose the internal representation of arrays so that "
"callers can write data directly into an array instead of going through a "
"slower API.  This PEP updates the buffer protocol in light of experience "
"from NumPy development, adding a number of new features such as indicating "
"the shape of an array or locking a memory region."
msgstr ""

# af5351e9d8bf48a78fc6acf0449a8bda
#: whatsnew/2.6.rst:1126
msgid ""
"The most important new C API function is ``PyObject_GetBuffer(PyObject *obj, "
"Py_buffer *view, int flags)``, which takes an object and a set of flags, and "
"fills in the ``Py_buffer`` structure with information about the object's "
"memory representation.  Objects can use this operation to lock memory in "
"place while an external caller could be modifying the contents, so there's a "
"corresponding ``PyBuffer_Release(Py_buffer *view)`` to indicate that the "
"external caller is done."
msgstr ""

# 7334373bf9cb4a4f8f91c281fb4d0077
#: whatsnew/2.6.rst:1138
msgid ""
"The *flags* argument to :c:func:`PyObject_GetBuffer` specifies constraints "
"upon the memory returned.  Some examples are:"
msgstr ""

# 96d4a6488b9c40f991fd731674be64db
#: whatsnew/2.6.rst:1141
msgid ":const:`PyBUF_WRITABLE` indicates that the memory must be writable."
msgstr ""

# 8631413d5ab94a2aaa63ef77cdfcdde4
#: whatsnew/2.6.rst:1143
msgid ""
":const:`PyBUF_LOCK` requests a read-only or exclusive lock on the memory."
msgstr ""

# 0fadc552f44341729e8541a42c623e43
#: whatsnew/2.6.rst:1145
msgid ""
":const:`PyBUF_C_CONTIGUOUS` and :const:`PyBUF_F_CONTIGUOUS` requests a C-"
"contiguous (last dimension varies the fastest) or Fortran-contiguous (first "
"dimension varies the fastest) array layout."
msgstr ""

# da0143eabc104cce9133081f1d43ec45
#: whatsnew/2.6.rst:1149
msgid ""
"Two new argument codes for :c:func:`PyArg_ParseTuple`, ``s*`` and ``z*``, "
"return locked buffer objects for a parameter."
msgstr ""

#: whatsnew/2.6.rst:1155
msgid "PEP 3118 - Revising the buffer protocol"
msgstr ""

# 5c60d4fc5f484ea0afb48f4bd3c8ddaf
#: whatsnew/2.6.rst:1155
msgid ""
"PEP written by Travis Oliphant and Carl Banks; implemented by Travis "
"Oliphant."
msgstr ""

# 6c6884fb4b214d39a4c8739c4bf0bbd9
#: whatsnew/2.6.rst:1164
msgid "PEP 3119: Abstract Base Classes"
msgstr ""

# d237c438fc7f4af58395d438fb9b8436
#: whatsnew/2.6.rst:1166
msgid ""
"Some object-oriented languages such as Java support interfaces, declaring "
"that a class has a given set of methods or supports a given access "
"protocol.  Abstract Base Classes (or ABCs) are an equivalent feature for "
"Python. The ABC support consists of an :mod:`abc` module containing a "
"metaclass called :class:`ABCMeta`, special handling of this metaclass by "
"the :func:`isinstance` and :func:`issubclass` builtins, and a collection of "
"basic ABCs that the Python developers think will be widely useful.  Future "
"versions of Python will probably add more ABCs."
msgstr ""

# 4a6467041bb74523b668f72ac026b005
#: whatsnew/2.6.rst:1176
msgid ""
"Let's say you have a particular class and wish to know whether it supports "
"dictionary-style access.  The phrase \"dictionary-style\" is vague, however. "
"It probably means that accessing items with ``obj[1]`` works. Does it imply "
"that setting items with ``obj[2] = value`` works? Or that the object will "
"have :meth:`keys`, :meth:`values`, and :meth:`items` methods?  What about "
"the iterative variants  such as :meth:`iterkeys`?  :meth:`copy` and :meth:"
"`update`?  Iterating over the object with :func:`iter`?"
msgstr ""

# e69028597004437793ae0d337b4275c3
#: whatsnew/2.6.rst:1184
msgid ""
"The Python 2.6 :mod:`collections` module includes a number of different ABCs "
"that represent these distinctions.  :class:`Iterable` indicates that a class "
"defines :meth:`__iter__`, and :class:`Container` means the class defines a :"
"meth:`__contains__` method and therefore supports ``x in y`` expressions.  "
"The basic dictionary interface of getting items, setting items, and :meth:"
"`keys`, :meth:`values`, and :meth:`items`, is defined by the :class:"
"`MutableMapping` ABC."
msgstr ""

# a0f8f44230004652885be274250f12c5
#: whatsnew/2.6.rst:1193
msgid ""
"You can derive your own classes from a particular ABC to indicate they "
"support that ABC's interface::"
msgstr ""

# 3f3c40a995b044fbb76188938020b763
#: whatsnew/2.6.rst:1202
msgid ""
"Alternatively, you could write the class without deriving from the desired "
"ABC and instead register the class by calling the ABC's :meth:`register` "
"method::"
msgstr ""

# fe7f5fb2f412477e97fc11489d264bf0
#: whatsnew/2.6.rst:1213
msgid ""
"For classes that you write, deriving from the ABC is probably clearer. The :"
"meth:`register`  method is useful when you've written a new ABC that can "
"describe an existing type or class, or if you want to declare that some "
"third-party class implements an ABC. For example, if you defined a :class:"
"`PrintableType` ABC, it's legal to do::"
msgstr ""

# 1f4948eee00643a2aec2c46a0320cec7
#: whatsnew/2.6.rst:1225
msgid ""
"Classes should obey the semantics specified by an ABC, but Python can't "
"check this; it's up to the class author to understand the ABC's requirements "
"and to implement the code accordingly."
msgstr ""

# 416149ccf4f34bf7860de81af1263dd8
#: whatsnew/2.6.rst:1229
msgid ""
"To check whether an object supports a particular interface, you can now "
"write::"
msgstr ""

# 9a240994792e4852bfafc547d149db83
#: whatsnew/2.6.rst:1236
msgid ""
"Don't feel that you must now begin writing lots of checks as in the above "
"example.  Python has a strong tradition of duck-typing, where explicit type-"
"checking is never done and code simply calls methods on an object, trusting "
"that those methods will be there and raising an exception if they aren't.  "
"Be judicious in checking for ABCs and only do it where it's absolutely "
"necessary."
msgstr ""

# 419fa0446f60452fa6a26fb6389070ea
#: whatsnew/2.6.rst:1243
msgid ""
"You can write your own ABCs by using ``abc.ABCMeta`` as the metaclass in a "
"class definition::"
msgstr ""

# 547a983c33584463a8ef9988629731af
#: whatsnew/2.6.rst:1264
msgid ""
"In the :class:`Drawable` ABC above, the :meth:`draw_doubled` method renders "
"the object at twice its size and can be implemented in terms of other "
"methods described in :class:`Drawable`.  Classes implementing this ABC "
"therefore don't need to provide their own implementation of :meth:"
"`draw_doubled`, though they can do so.  An implementation of :meth:`draw` is "
"necessary, though; the ABC can't provide a useful generic implementation."
msgstr ""

# f32dbfca2087484eaccdc797549feecf
#: whatsnew/2.6.rst:1272
msgid ""
"You can apply the ``@abstractmethod`` decorator to methods such as :meth:"
"`draw` that must be implemented; Python will then raise an exception for "
"classes that don't define the method. Note that the exception is only raised "
"when you actually try to create an instance of a subclass lacking the "
"method::"
msgstr ""

# 23aed6ac795c4409999042eb76f33b4b
#: whatsnew/2.6.rst:1287
msgid ""
"Abstract data attributes can be declared using the ``@abstractproperty`` "
"decorator::"
msgstr ""

# 6309bf51a7cf41939eb8b7ec1950ef97
#: whatsnew/2.6.rst:1297
msgid "Subclasses must then define a :meth:`readonly` property."
msgstr ""

#: whatsnew/2.6.rst:1303
msgid "PEP 3119 - Introducing Abstract Base Classes"
msgstr ""

# 80bfda703f3145cf83f46585121ef840
#: whatsnew/2.6.rst:1302
msgid ""
"PEP written by Guido van Rossum and Talin. Implemented by Guido van Rossum. "
"Backported to 2.6 by Benjamin Aranguren, with Alex Martelli."
msgstr ""

# 45e9a63f634b4b15868a2128222719dd
#: whatsnew/2.6.rst:1311
msgid "PEP 3127: Integer Literal Support and Syntax"
msgstr ""

# da86468be6a74c65923f4832490bee52
#: whatsnew/2.6.rst:1313
msgid ""
"Python 3.0 changes the syntax for octal (base-8) integer literals, prefixing "
"them with \"0o\" or \"0O\" instead of a leading zero, and adds support for "
"binary (base-2) integer literals, signalled by a \"0b\" or \"0B\" prefix."
msgstr ""

# ed16b7c5cd244107a70e1b727e75c0e3
#: whatsnew/2.6.rst:1318
msgid ""
"Python 2.6 doesn't drop support for a leading 0 signalling an octal number, "
"but it does add support for \"0o\" and \"0b\"::"
msgstr ""

# aacbec9b51c84cdebeca2ed69197bf14
#: whatsnew/2.6.rst:1326
msgid ""
"The :func:`oct` builtin still returns numbers prefixed with a leading zero, "
"and a new :func:`bin` builtin returns the binary representation for a "
"number::"
msgstr ""

# 797d70314feb4131b69bf56b3a442555
#: whatsnew/2.6.rst:1337
msgid ""
"The :func:`int` and :func:`long` builtins will now accept the \"0o\" and \"0b"
"\" prefixes when base-8 or base-2 are requested, or when the *base* argument "
"is zero (signalling that the base used should be determined from the "
"string)::"
msgstr ""

#: whatsnew/2.6.rst:1355
msgid "PEP 3127 - Integer Literal Support and Syntax"
msgstr ""

# 87129135539a40dc974f919604507d6e
#: whatsnew/2.6.rst:1355
msgid "PEP written by Patrick Maupin; backported to 2.6 by Eric Smith."
msgstr ""

# 6ca0c3e56a434821bac1d72d828b5928
#: whatsnew/2.6.rst:1363
msgid "PEP 3129: Class Decorators"
msgstr ""

# bfde0d7e60c74c22a1d35cab83e6dfae
#: whatsnew/2.6.rst:1365
msgid ""
"Decorators have been extended from functions to classes.  It's now legal to "
"write::"
msgstr ""

# bb695597630244c2a08f86803b291d39
#: whatsnew/2.6.rst:1373
msgid "This is equivalent to::"
msgstr ""

#: whatsnew/2.6.rst:1382
msgid "PEP 3129 - Class Decorators"
msgstr ""

# e9c589cbcdc744df8e7ac349471056e4
#: whatsnew/2.6.rst:1383
msgid "PEP written by Collin Winter."
msgstr ""

# f125358544f048e19bb6cf528e4c1781
#: whatsnew/2.6.rst:1390
msgid "PEP 3141: A Type Hierarchy for Numbers"
msgstr ""

# 9a629ea5972941dbab7cfcedb95992ae
#: whatsnew/2.6.rst:1392
msgid ""
"Python 3.0 adds several abstract base classes for numeric types inspired by "
"Scheme's numeric tower.  These classes were backported to 2.6 as the :mod:"
"`numbers` module."
msgstr ""

# bf51e1acb0484c5b8a9b1f8d8f0b0807
#: whatsnew/2.6.rst:1396
msgid ""
"The most general ABC is :class:`Number`.  It defines no operations at all, "
"and only exists to allow checking if an object is a number by doing "
"``isinstance(obj, Number)``."
msgstr ""

# 94086a37b74741dcbe4803fc143c71fd
#: whatsnew/2.6.rst:1400
msgid ""
":class:`Complex` is a subclass of :class:`Number`.  Complex numbers can "
"undergo the basic operations of addition, subtraction, multiplication, "
"division, and exponentiation, and you can retrieve the real and imaginary "
"parts and obtain a number's conjugate.  Python's built-in complex type is an "
"implementation of :class:`Complex`."
msgstr ""

# 454346500b4a4a8789c02d00ff98cd47
#: whatsnew/2.6.rst:1406
msgid ""
":class:`Real` further derives from :class:`Complex`, and adds operations "
"that only work on real numbers: :func:`floor`, :func:`trunc`, rounding, "
"taking the remainder mod N, floor division, and comparisons."
msgstr ""

# 53900aec140d4b9999d439005df1427a
#: whatsnew/2.6.rst:1411
msgid ""
":class:`Rational` numbers derive from :class:`Real`, have :attr:`numerator` "
"and :attr:`denominator` properties, and can be converted to floats.  Python "
"2.6 adds a simple rational-number class, :class:`Fraction`, in the :mod:"
"`fractions` module.  (It's called :class:`Fraction` instead of :class:"
"`Rational` to avoid a name clash with :class:`numbers.Rational`.)"
msgstr ""

# 9509a50eb5044461a52b9d813e1f434a
#: whatsnew/2.6.rst:1418
msgid ""
":class:`Integral` numbers derive from :class:`Rational`, and can be shifted "
"left and right with ``<<`` and ``>>``, combined using bitwise operations "
"such as ``&`` and ``|``, and can be used as array indexes and slice "
"boundaries."
msgstr ""

# 5d3e5ad66e0748a4a8923daa8e26ba11
#: whatsnew/2.6.rst:1423
msgid ""
"In Python 3.0, the PEP slightly redefines the existing builtins :func:"
"`round`, :func:`math.floor`, :func:`math.ceil`, and adds a new one, :func:"
"`math.trunc`, that's been backported to Python 2.6. :func:`math.trunc` "
"rounds toward zero, returning the closest :class:`Integral` that's between "
"the function's argument and zero."
msgstr ""

#: whatsnew/2.6.rst:1432
msgid "PEP 3141 - A Type Hierarchy for Numbers"
msgstr ""

# 5aa3d463f5384345822cf0ff3e59a738
#: whatsnew/2.6.rst:1432
msgid "PEP written by Jeffrey Yasskin."
msgstr ""

# 347bb03e518646aa920b2e1835f5e6e6
#: whatsnew/2.6.rst:1434
msgid ""
"`Scheme's numerical tower <http://www.gnu.org/software/guile/manual/"
"html_node/Numerical-Tower.html#Numerical-Tower>`__, from the Guile manual."
msgstr ""

# 9d64db56e4514ddb852a5824aaba9c3c
#: whatsnew/2.6.rst:1436
msgid ""
"`Scheme's number datatypes <http://schemers.org/Documents/Standards/R5RS/"
"HTML/r5rs-Z-H-9.html#%_sec_6.2>`__ from the R5RS Scheme specification."
msgstr ""

# 529ce132ab0d44e6baf227dd3d8bb945
#: whatsnew/2.6.rst:1440
msgid "The :mod:`fractions` Module"
msgstr ""

# a8cbbca11c0445cd8a010a9e7726ab4e
#: whatsnew/2.6.rst:1442
msgid ""
"To fill out the hierarchy of numeric types, the :mod:`fractions` module "
"provides a rational-number class.  Rational numbers store their values as a "
"numerator and denominator forming a fraction, and can exactly represent "
"numbers such as ``2/3`` that floating-point numbers can only approximate."
msgstr ""

# d1bec8b405db433cbbf7f35764598470
#: whatsnew/2.6.rst:1448
msgid ""
"The :class:`Fraction` constructor takes two :class:`Integral` values that "
"will be the numerator and denominator of the resulting fraction. ::"
msgstr ""

# 2b1f28f938304061a08b5d6ab39353ba
#: whatsnew/2.6.rst:1461
msgid ""
"For converting floating-point numbers to rationals, the float type now has "
"an :meth:`as_integer_ratio()` method that returns the numerator and "
"denominator for a fraction that evaluates to the same floating-point value::"
msgstr ""

# 9d10629d77964248b538b31956281274
#: whatsnew/2.6.rst:1473
msgid ""
"Note that values that can only be approximated by floating-point numbers, "
"such as 1./3, are not simplified to the number being approximated; the "
"fraction attempts to match the floating-point value **exactly**."
msgstr ""

# 03e84dd3b81040e08b6934b141bf4cc3
#: whatsnew/2.6.rst:1478
msgid ""
"The :mod:`fractions` module is based upon an implementation by Sjoerd "
"Mullender that was in Python's :file:`Demo/classes/` directory for a long "
"time.  This implementation was significantly updated by Jeffrey Yasskin."
msgstr ""

# e5741614edd549cf9ac7cdcdd0e57aa7
# 9b7a62bef3224910a8ac5efc21f3d831
# 7b5b5e42afba47858ff972433b187594
# 015361164d214d0dabe4e70675a99de0
#: whatsnew/2.6.rst:1487 whatsnew/2.7.rst:618 whatsnew/3.1.rst:118
#: whatsnew/3.2.rst:432
msgid "Some smaller changes made to the core Python language are:"
msgstr ""

# 4ad3fda7112443b6b4afec36a42bbc9b
#: whatsnew/2.6.rst:1489
msgid ""
"Directories and zip archives containing a :file:`__main__.py` file can now "
"be executed directly by passing their name to the interpreter. The directory "
"or zip archive is automatically inserted as the first entry in sys.path.  "
"(Suggestion and initial patch by Andy Chu, subsequently revised by Phillip "
"J. Eby and Nick Coghlan; :issue:`1739468`.)"
msgstr ""

# bc6f4c3e357c4040ac7b346869a72a31
#: whatsnew/2.6.rst:1496
msgid ""
"The :func:`hasattr` function was catching and ignoring all errors, under the "
"assumption that they meant a :meth:`__getattr__` method was failing somehow "
"and the return value of :func:`hasattr` would therefore be ``False``.  This "
"logic shouldn't be applied to :exc:`KeyboardInterrupt` and :exc:"
"`SystemExit`, however; Python 2.6 will no longer discard such exceptions "
"when :func:`hasattr` encounters them.  (Fixed by Benjamin Peterson; :issue:"
"`2196`.)"
msgstr ""

# 6cc14528ebcf43e9b82a8fe94da3e4c6
#: whatsnew/2.6.rst:1504
msgid ""
"When calling a function using the ``**`` syntax to provide keyword "
"arguments, you are no longer required to use a Python dictionary; any "
"mapping will now work::"
msgstr ""

# 0b8a3c4f9df741afb7f383f8a8105437
#: whatsnew/2.6.rst:1517
#, fuzzy
msgid "(Contributed by Alexander Belopolsky; :issue:`1686487`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 92a074225e844aa1a7eb1f6c8d34f920
#: whatsnew/2.6.rst:1519
msgid ""
"It's also become legal to provide keyword arguments after a ``*args`` "
"argument to a function call. ::"
msgstr ""

# 0621923b9a6147c99205589f442f9e01
#: whatsnew/2.6.rst:1528
msgid ""
"Previously this would have been a syntax error. (Contributed by Amaury "
"Forgeot d'Arc; :issue:`3473`.)"
msgstr ""

# 83b4c806eea5402d8a931be3c1d0b648
#: whatsnew/2.6.rst:1531
msgid ""
"A new builtin, ``next(iterator, [default])`` returns the next item from the "
"specified iterator.  If the *default* argument is supplied, it will be "
"returned if *iterator* has been exhausted; otherwise, the :exc:"
"`StopIteration` exception will be raised.  (Backported in :issue:`2719`.)"
msgstr ""

# 2a4db327ea8d499a913a23bba68526f9
#: whatsnew/2.6.rst:1537
msgid ""
"Tuples now have :meth:`index` and :meth:`count` methods matching the list "
"type's :meth:`index` and :meth:`count` methods::"
msgstr ""

# 8e5bd9b0f5cc437c97b4cc1ce1cd438b
#: whatsnew/2.6.rst:1546
msgid "(Contributed by Raymond Hettinger)"
msgstr ""

# 9dcd8d08e64d4f2490b2fe5936da83a4
#: whatsnew/2.6.rst:1548
msgid ""
"The built-in types now have improved support for extended slicing syntax, "
"accepting various combinations of ``(start, stop, step)``. Previously, the "
"support was partial and certain corner cases wouldn't work. (Implemented by "
"Thomas Wouters.)"
msgstr ""

# 1c3525d5c6fc452f9e92c5a487a569bd
#: whatsnew/2.6.rst:1555
msgid ""
"Properties now have three attributes, :attr:`getter`, :attr:`setter` and :"
"attr:`deleter`, that are decorators providing useful shortcuts for adding a "
"getter, setter or deleter function to an existing property. You would use "
"them like this::"
msgstr ""

# 6943089d801543abbc5f5b6ddd7d404c
#: whatsnew/2.6.rst:1582
msgid ""
"Several methods of the built-in set types now accept multiple iterables: :"
"meth:`intersection`, :meth:`intersection_update`, :meth:`union`, :meth:"
"`update`, :meth:`difference` and :meth:`difference_update`."
msgstr ""

# f80f68bea7604793b6464bcce96cfc19
#: whatsnew/2.6.rst:1598
msgid ""
"Many floating-point features were added.  The :func:`float` function will "
"now turn the string ``nan`` into an IEEE 754 Not A Number value, and ``"
"+inf`` and ``-inf`` into positive or negative infinity.  This works on any "
"platform with IEEE 754 semantics.  (Contributed by Christian Heimes; :issue:"
"`1635`.)"
msgstr ""

# 7892347e1d804b07a324abea006949a8
#: whatsnew/2.6.rst:1604
msgid ""
"Other functions in the :mod:`math` module, :func:`isinf` and :func:`isnan`, "
"return true if their floating-point argument is infinite or Not A Number.  (:"
"issue:`1640`)"
msgstr ""

# 35eb63d4101f4927a4f7851c9d30cc94
#: whatsnew/2.6.rst:1608
msgid ""
"Conversion functions were added to convert floating-point numbers into "
"hexadecimal strings (:issue:`3008`).  These functions convert floats to and "
"from a string representation without introducing rounding errors from the "
"conversion between decimal and binary.  Floats have a :meth:`hex` method "
"that returns a string representation, and the ``float.fromhex()`` method "
"converts a string back into a number::"
msgstr ""

# 357c0e3e7fdc47298ddc1f7b6417b602
#: whatsnew/2.6.rst:1625
msgid ""
"A numerical nicety: when creating a complex number from two floats on "
"systems that support signed zeros (-0 and +0), the :func:`complex` "
"constructor will now preserve the sign of the zero.  (Fixed by Mark T. "
"Dickinson; :issue:`1507`.)"
msgstr ""

# 913c44b3bc52497589dbb5c50197d7cb
#: whatsnew/2.6.rst:1630
msgid ""
"Classes that inherit a :meth:`__hash__` method from a parent class can set "
"``__hash__ = None`` to indicate that the class isn't hashable.  This will "
"make ``hash(obj)`` raise a :exc:`TypeError` and the class will not be "
"indicated as implementing the :class:`Hashable` ABC."
msgstr ""

# 2460df537cb14aedae44548496b4e46b
#: whatsnew/2.6.rst:1636
msgid ""
"You should do this when you've defined a :meth:`__cmp__` or :meth:`__eq__` "
"method that compares objects by their value rather than by identity.  All "
"objects have a default hash method that uses ``id(obj)`` as the hash value.  "
"There's no tidy way to remove the :meth:`__hash__` method inherited from a "
"parent class, so assigning ``None`` was implemented as an override.  At the "
"C level, extensions can set ``tp_hash`` to :c:func:"
"`PyObject_HashNotImplemented`. (Fixed by Nick Coghlan and Amaury Forgeot "
"d'Arc; :issue:`2235`.)"
msgstr ""

# d85c47da328146f3a45b85d7213a7652
#: whatsnew/2.6.rst:1646
msgid ""
"The :exc:`GeneratorExit` exception now subclasses :exc:`BaseException` "
"instead of :exc:`Exception`.  This means that an exception handler that does "
"``except Exception:`` will not inadvertently catch :exc:`GeneratorExit`. "
"(Contributed by Chad Austin; :issue:`1537`.)"
msgstr ""

# 32cf40987dbf4698b92655438e7020d1
#: whatsnew/2.6.rst:1652
msgid ""
"Generator objects now have a :attr:`gi_code` attribute that refers to the "
"original code object backing the generator. (Contributed by Collin Winter; :"
"issue:`1473257`.)"
msgstr ""

# 202e6ef46c8546db9a0f3a878438915e
#: whatsnew/2.6.rst:1656
msgid ""
"The :func:`compile` built-in function now accepts keyword arguments as well "
"as positional parameters.  (Contributed by Thomas Wouters; :issue:`1444529`.)"
msgstr ""

# 30d4fb1ee4d14b0fac868c7ed5bd3e38
#: whatsnew/2.6.rst:1660
msgid ""
"The :func:`complex` constructor now accepts strings containing parenthesized "
"complex numbers, meaning that ``complex(repr(cplx))`` will now round-trip "
"values.  For example, ``complex('(3+4j)')`` now returns the value (3+4j).  (:"
"issue:`1491866`)"
msgstr ""

# d8da0d93a5044f88b87746c4a7cb9292
#: whatsnew/2.6.rst:1665
msgid ""
"The string :meth:`translate` method now accepts ``None`` as the translation "
"table parameter, which is treated as the identity transformation.   This "
"makes it easier to carry out operations that only delete characters.  "
"(Contributed by Bengt Richter and implemented by Raymond Hettinger; :issue:"
"`1193128`.)"
msgstr ""

# 0cd93622c3b84448ad4f0b8fe4e75336
#: whatsnew/2.6.rst:1671
msgid ""
"The built-in :func:`dir` function now checks for a :meth:`__dir__` method on "
"the objects it receives.  This method must return a list of strings "
"containing the names of valid attributes for the object, and lets the object "
"control the value that :func:`dir` produces. Objects that have :meth:"
"`__getattr__` or :meth:`__getattribute__` methods can use this to advertise "
"pseudo-attributes they will honor. (:issue:`1591665`)"
msgstr ""

# 447e729c29044f4d9f2b21d2b9b48876
#: whatsnew/2.6.rst:1679
msgid ""
"Instance method objects have new attributes for the object and function "
"comprising the method; the new synonym for :attr:`im_self` is :attr:"
"`__self__`, and :attr:`im_func` is also available as :attr:`__func__`. The "
"old names are still supported in Python 2.6, but are gone in 3.0."
msgstr ""

# 7725820795a342ab8ffb88e43e26bc3b
#: whatsnew/2.6.rst:1684
msgid ""
"An obscure change: when you use the :func:`locals` function inside a :"
"keyword:`class` statement, the resulting dictionary no longer returns free "
"variables.  (Free variables, in this case, are variables referenced in the :"
"keyword:`class` statement  that aren't attributes of the class.)"
msgstr ""

# cc861d47e53c44feb804de4dfea8b4cb
#: whatsnew/2.6.rst:1695
msgid ""
"The :mod:`warnings` module has been rewritten in C.  This makes it possible "
"to invoke warnings from the parser, and may also make the interpreter's "
"startup faster. (Contributed by Neal Norwitz and Brett Cannon; :issue:"
"`1631171`.)"
msgstr ""

# 37abdc78c07c4cc8b45ddc78e758ba4f
#: whatsnew/2.6.rst:1700
msgid ""
"Type objects now have a cache of methods that can reduce the work required "
"to find the correct method implementation for a particular class; once "
"cached, the interpreter doesn't need to traverse base classes to figure out "
"the right method to call. The cache is cleared if a base class or the class "
"itself is modified, so the cache should remain correct even in the face of "
"Python's dynamic nature. (Original optimization implemented by Armin Rigo, "
"updated for Python 2.6 by Kevin Jacobs; :issue:`1700288`.)"
msgstr ""

# 6ea08ffc9b584c99973092397503f2b9
#: whatsnew/2.6.rst:1710
msgid ""
"By default, this change is only applied to types that are included with the "
"Python core.  Extension modules may not necessarily be compatible with this "
"cache, so they must explicitly add :c:macro:`Py_TPFLAGS_HAVE_VERSION_TAG` to "
"the module's ``tp_flags`` field to enable the method cache. (To be "
"compatible with the method cache, the extension module's code must not "
"directly access and modify the ``tp_dict`` member of any of the types it "
"implements.  Most modules don't do this, but it's impossible for the Python "
"interpreter to determine that. See :issue:`1878` for some discussion.)"
msgstr ""

# 63cacb6e6af944e999254cdacb5af72c
#: whatsnew/2.6.rst:1721
msgid ""
"Function calls that use keyword arguments are significantly faster by doing "
"a quick pointer comparison, usually saving the time of a full string "
"comparison.  (Contributed by Raymond Hettinger, after an initial "
"implementation by Antoine Pitrou; :issue:`1819`.)"
msgstr ""

# 195848563cf34f36b03ca774beeb1c02
#: whatsnew/2.6.rst:1726
msgid ""
"All of the functions in the :mod:`struct` module have been rewritten in C, "
"thanks to work at the Need For Speed sprint. (Contributed by Raymond "
"Hettinger.)"
msgstr ""

# bd5755a999ae4c4382375c4f0c1901e9
#: whatsnew/2.6.rst:1730
msgid ""
"Some of the standard built-in types now set a bit in their type objects.  "
"This speeds up checking whether an object is a subclass of one of these "
"types.  (Contributed by Neal Norwitz.)"
msgstr ""

# c55aa8179cf24e5aa27337d56d8e8815
#: whatsnew/2.6.rst:1734
msgid ""
"Unicode strings now use faster code for detecting whitespace and line "
"breaks; this speeds up the :meth:`split` method by about 25% and :meth:"
"`splitlines` by 35%. (Contributed by Antoine Pitrou.)  Memory usage is "
"reduced by using pymalloc for the Unicode string's data."
msgstr ""

# 37681254f91840d0ba39f361e100ff27
#: whatsnew/2.6.rst:1740
msgid ""
"The ``with`` statement now stores the :meth:`__exit__` method on the stack, "
"producing a small speedup.  (Implemented by Jeffrey Yasskin.)"
msgstr ""

# b99bdccc83f548dca344b35228b288e5
#: whatsnew/2.6.rst:1743
msgid ""
"To reduce memory usage, the garbage collector will now clear internal free "
"lists when garbage-collecting the highest generation of objects. This may "
"return memory to the operating system sooner."
msgstr ""

# 7ae795a8213a4175bfb5f60b8c7fab00
# da5f76d407da45cfa61e3a502fa67a82
#: whatsnew/2.6.rst:1752 whatsnew/2.7.rst:845
msgid "Interpreter Changes"
msgstr ""

# 2174b7ffcccf4716ac4fad9dcc4d04e1
#: whatsnew/2.6.rst:1754
msgid ""
"Two command-line options have been reserved for use by other Python "
"implementations.  The :option:`-J` switch has been reserved for use by "
"Jython for Jython-specific options, such as switches that are passed to the "
"underlying JVM.  :option:`-X` has been reserved for options specific to a "
"particular implementation of Python such as CPython, Jython, or IronPython.  "
"If either option is used with Python 2.6, the interpreter will report that "
"the option isn't currently used."
msgstr ""

# 979b481ee2ec4c7d8a3c353b6bd77d74
#: whatsnew/2.6.rst:1762
msgid ""
"Python can now be prevented from writing :file:`.pyc` or :file:`.pyo` files "
"by supplying the :option:`-B` switch to the Python interpreter, or by "
"setting the :envvar:`PYTHONDONTWRITEBYTECODE` environment variable before "
"running the interpreter.  This setting is available to Python programs as "
"the ``sys.dont_write_bytecode`` variable, and Python code can change the "
"value to modify the interpreter's behaviour.  (Contributed by Neal Norwitz "
"and Georg Brandl.)"
msgstr ""

# 90174093714c4c2ea5180d7707d3546e
#: whatsnew/2.6.rst:1770
msgid ""
"The encoding used for standard input, output, and standard error can be "
"specified by setting the :envvar:`PYTHONIOENCODING` environment variable "
"before running the interpreter.  The value should be a string in the form "
"``<encoding>`` or ``<encoding>:<errorhandler>``. The *encoding* part "
"specifies the encoding's name, e.g. ``utf-8`` or ``latin-1``; the optional "
"*errorhandler* part specifies what to do with characters that can't be "
"handled by the encoding, and  should be one of \"error\", \"ignore\", or "
"\"replace\".   (Contributed by Martin von Löwis.)"
msgstr ""

# 70a8ab9e87034cd8ba71bf39e7b5a0c8
# 27651c3accab4ca897562650af63b569
#: whatsnew/2.6.rst:1785 whatsnew/2.7.rst:971
msgid ""
"As in every release, Python's standard library received a number of "
"enhancements and bug fixes.  Here's a partial list of the most notable "
"changes, sorted alphabetically by module name. Consult the :file:`Misc/NEWS` "
"file in the source tree for a more complete list of changes, or look through "
"the Subversion logs for all the details."
msgstr ""

# 83241e6e522547cc8b579c5d20880998
#: whatsnew/2.6.rst:1791
msgid ""
"The :mod:`asyncore` and :mod:`asynchat` modules are being actively "
"maintained again, and a number of patches and bugfixes were applied.  "
"(Maintained by Josiah Carlson; see :issue:`1736190` for one patch.)"
msgstr ""

# dac15139a2724d22aedb29be8df8c086
#: whatsnew/2.6.rst:1796
msgid ""
"The :mod:`bsddb` module also has a new maintainer, Jesús Cea Avión, and the "
"package is now available as a standalone package.  The web page for the "
"package is `www.jcea.es/programacion/pybsddb.htm <http://www.jcea.es/"
"programacion/pybsddb.htm>`__. The plan is to remove the package from the "
"standard library in Python 3.0, because its pace of releases is much more "
"frequent than Python's."
msgstr ""

# 4ce531af74564c06a3f64cbb0ad8464c
#: whatsnew/2.6.rst:1804
msgid ""
"The :mod:`bsddb.dbshelve` module now uses the highest pickling protocol "
"available, instead of restricting itself to protocol 1. (Contributed by W. "
"Barnes.)"
msgstr ""

# 7702fb3abb12449eb6456995b1eba3f6
#: whatsnew/2.6.rst:1808
msgid ""
"The :mod:`cgi` module will now read variables from the query string of an "
"HTTP POST request.  This makes it possible to use form actions with URLs "
"that include query strings such as \"/cgi-bin/add.py?category=1\".  "
"(Contributed by Alexandre Fiori and Nubis; :issue:`1817`.)"
msgstr ""

# dde97781c2c04c6cacf7bd67f235fce3
#: whatsnew/2.6.rst:1814
msgid ""
"The :func:`parse_qs` and :func:`parse_qsl` functions have been relocated "
"from the :mod:`cgi` module to the :mod:`urlparse` module. The versions still "
"available in the :mod:`cgi` module will trigger :exc:"
"`PendingDeprecationWarning` messages in 2.6 (:issue:`600362`)."
msgstr ""

# d9317811f1cf447c88564f7c779b883f
#: whatsnew/2.6.rst:1820
msgid ""
"The :mod:`cmath` module underwent extensive revision, contributed by Mark "
"Dickinson and Christian Heimes. Five new functions were added:"
msgstr ""

# 3811af6e64e74feeab1779c143f0ce6f
#: whatsnew/2.6.rst:1824
msgid ""
":func:`polar` converts a complex number to polar form, returning the modulus "
"and argument of the complex number."
msgstr ""

# b67679a8b532451096a3de1ce992f85d
#: whatsnew/2.6.rst:1827
msgid ""
":func:`rect` does the opposite, turning a modulus, argument pair back into "
"the corresponding complex number."
msgstr ""

# 0587faf948834ad0bade87b5ea30d545
#: whatsnew/2.6.rst:1830
msgid ""
":func:`phase` returns the argument (also called the angle) of a complex "
"number."
msgstr ""

# 1ca2352899ba48068d4a6cf62be1df24
#: whatsnew/2.6.rst:1833
msgid ""
":func:`isnan` returns True if either the real or imaginary part of its "
"argument is a NaN."
msgstr ""

# ec0c941a8a0a4188a4abf700efbb1b6f
#: whatsnew/2.6.rst:1836
msgid ""
":func:`isinf` returns True if either the real or imaginary part of its "
"argument is infinite."
msgstr ""

# a21176d4af454e579e7afd186f1d633e
#: whatsnew/2.6.rst:1839
msgid ""
"The revisions also improved the numerical soundness of the :mod:`cmath` "
"module.  For all functions, the real and imaginary parts of the results are "
"accurate to within a few units of least precision (ulps) whenever possible.  "
"See :issue:`1381` for the details.  The branch cuts for :func:`asinh`, :func:"
"`atanh`: and :func:`atan` have also been corrected."
msgstr ""

# 03fea2c3d3a245508221ee28d0897140
#: whatsnew/2.6.rst:1846
msgid ""
"The tests for the module have been greatly expanded; nearly 2000 new test "
"cases exercise the algebraic functions."
msgstr ""

# bd24ec2f5cd64b2aada0256b473b0e55
#: whatsnew/2.6.rst:1849
msgid ""
"On IEEE 754 platforms, the :mod:`cmath` module now handles IEEE 754 special "
"values and floating-point exceptions in a manner consistent with Annex 'G' "
"of the C99 standard."
msgstr ""

# 78a0c680cfaf4719ba490f166b1eb6e4
#: whatsnew/2.6.rst:1853
msgid ""
"A new data type in the :mod:`collections` module: :class:"
"`namedtuple(typename, fieldnames)` is a factory function that creates "
"subclasses of the standard tuple whose fields are accessible by name as well "
"as index.  For example::"
msgstr ""

# 40cc9ae8c3ae4336b6f81bf5dae3bd20
#: whatsnew/2.6.rst:1875
msgid ""
"Several places in the standard library that returned tuples have been "
"modified to return :class:`namedtuple` instances.  For example, the :meth:"
"`Decimal.as_tuple` method now returns a named tuple with :attr:`sign`, :attr:"
"`digits`, and :attr:`exponent` fields."
msgstr ""

# ddf85d824b1f42799fb0d73ec3d9dddb
#: whatsnew/2.6.rst:1882
msgid ""
"Another change to the :mod:`collections` module is that the :class:`deque` "
"type now supports an optional *maxlen* parameter; if supplied, the deque's "
"size will be restricted to no more than *maxlen* items.  Adding more items "
"to a full deque causes old items to be discarded."
msgstr ""

# dc96fbc6354f463d83294c3f7e6202f9
#: whatsnew/2.6.rst:1903
msgid ""
"The :mod:`Cookie` module's :class:`Morsel` objects now support an :attr:"
"`httponly` attribute.  In some browsers. cookies with this attribute set "
"cannot be accessed or manipulated by JavaScript code. (Contributed by Arvin "
"Schnell; :issue:`1638033`.)"
msgstr ""

# 4b3f75f713f54a459ab1107b583fbe38
#: whatsnew/2.6.rst:1908
msgid ""
"A new window method in the :mod:`curses` module, :meth:`chgat`, changes the "
"display attributes for a certain number of characters on a single line.  "
"(Contributed by Fabian Kreutz.)"
msgstr ""

# f9d0fa2bf1844e419285e9f68f7428f9
#: whatsnew/2.6.rst:1918
msgid ""
"The :class:`Textbox` class in the :mod:`curses.textpad` module now supports "
"editing in insert mode as well as overwrite mode. Insert mode is enabled by "
"supplying a true value for the *insert_mode* parameter when creating the :"
"class:`Textbox` instance."
msgstr ""

# 368f6000da114c69816e18eaeb3d4402
#: whatsnew/2.6.rst:1923
msgid ""
"The :mod:`datetime` module's :meth:`strftime` methods now support a ``%f`` "
"format code that expands to the number of microseconds in the object, zero-"
"padded on the left to six places.  (Contributed by Skip Montanaro; :issue:"
"`1158`.)"
msgstr ""

# 5a524e6309bd46a087f1497cd0dc9db9
#: whatsnew/2.6.rst:1928
msgid ""
"The :mod:`decimal` module was updated to version 1.66 of `the General "
"Decimal Specification <http://www2.hursley.ibm.com/decimal/decarith."
"html>`__.  New features include some methods for some basic mathematical "
"functions such as :meth:`exp` and :meth:`log10`::"
msgstr ""

# 30fda982985d40ddafc8758d0bbd9d81
#: whatsnew/2.6.rst:1940
msgid ""
"The :meth:`as_tuple` method of :class:`Decimal` objects now returns a named "
"tuple with :attr:`sign`, :attr:`digits`, and :attr:`exponent` fields."
msgstr ""

# db654b93ada74f5caba835fcd4f63dd8
#: whatsnew/2.6.rst:1943
msgid ""
"(Implemented by Facundo Batista and Mark Dickinson.  Named tuple support "
"added by Raymond Hettinger.)"
msgstr ""

# a3eb54087dfa4bb982f2f27fed1ed413
#: whatsnew/2.6.rst:1946
msgid ""
"The :mod:`difflib` module's :class:`SequenceMatcher` class now returns named "
"tuples representing matches, with :attr:`a`, :attr:`b`, and :attr:`size` "
"attributes. (Contributed by Raymond Hettinger.)"
msgstr ""

# 939965e58e7e4c8db02ddea00f76e7c2
#: whatsnew/2.6.rst:1951
msgid ""
"An optional ``timeout`` parameter, specifying a timeout measured in seconds, "
"was added to the :class:`ftplib.FTP` class constructor as well as the :meth:"
"`connect` method.  (Added by Facundo Batista.) Also, the :class:`FTP` "
"class's :meth:`storbinary` and :meth:`storlines` now take an optional "
"*callback* parameter that will be called with each block of data after the "
"data has been sent. (Contributed by Phil Schwartz; :issue:`1221598`.)"
msgstr ""

# f25ee7b3128b42aba5bd64fa769c3c72
#: whatsnew/2.6.rst:1959
msgid ""
"The :func:`reduce` built-in function is also available in the :mod:"
"`functools` module.  In Python 3.0, the builtin has been dropped and :func:"
"`reduce` is only available from :mod:`functools`; currently there are no "
"plans to drop the builtin in the 2.x series. (Patched by Christian Heimes; :"
"issue:`1739906`.)"
msgstr ""

# 04576457e1b84459a3113ca7a019bda6
#: whatsnew/2.6.rst:1965
msgid ""
"When possible, the :mod:`getpass` module will now use :file:`/dev/tty` to "
"print a prompt message and read the password, falling back to standard error "
"and standard input.  If the password may be echoed to the terminal, a "
"warning is printed before the prompt is displayed.  (Contributed by Gregory "
"P. Smith.)"
msgstr ""

# 8b99c4085b2447b0b4f91aadfb6a9387
#: whatsnew/2.6.rst:1971
msgid ""
"The :func:`glob.glob` function can now return Unicode filenames if a Unicode "
"path was used and Unicode filenames are matched within the directory.  (:"
"issue:`1001604`)"
msgstr ""

# 4332a02f521c406f8d639661640f2977
#: whatsnew/2.6.rst:1975
msgid ""
"A new function in the :mod:`heapq` module, ``merge(iter1, iter2, ...)``, "
"takes any number of iterables returning data in sorted order, and returns a "
"new generator that returns the contents of all the iterators, also in sorted "
"order.  For example::"
msgstr ""

# deed0b0b88ff467182a67d3d8646bb3f
#: whatsnew/2.6.rst:1983
msgid ""
"Another new function, ``heappushpop(heap, item)``, pushes *item* onto "
"*heap*, then pops off and returns the smallest item. This is more efficient "
"than making a call to :func:`heappush` and then :func:`heappop`."
msgstr ""

# cc07a9f87ba24efc84d0b3826c59bb3a
#: whatsnew/2.6.rst:1988
msgid ""
":mod:`heapq` is now implemented to only use less-than comparison, instead of "
"the less-than-or-equal comparison it previously used. This makes :mod:"
"`heapq`'s usage of a type match the :meth:`list.sort` method. (Contributed "
"by Raymond Hettinger.)"
msgstr ""

# de79968df70147d08a121df9db148553
#: whatsnew/2.6.rst:1994
msgid ""
"An optional ``timeout`` parameter, specifying a timeout measured in seconds, "
"was added to the :class:`httplib.HTTPConnection` and :class:"
"`HTTPSConnection` class constructors.  (Added by Facundo Batista.)"
msgstr ""

# 16d0a0d6aca34fa1a1e6fd0d359e793b
#: whatsnew/2.6.rst:1999
msgid ""
"Most of the :mod:`inspect` module's functions, such as :func:`getmoduleinfo` "
"and :func:`getargs`, now return named tuples. In addition to behaving like "
"tuples, the elements of the  return value can also be accessed as "
"attributes. (Contributed by Raymond Hettinger.)"
msgstr ""

# 764cbd7b796944e384430d68e2b00e8b
#: whatsnew/2.6.rst:2005
msgid ""
"Some new functions in the module include :func:`isgenerator`, :func:"
"`isgeneratorfunction`, and :func:`isabstract`."
msgstr ""

# c9eab1ce24ab45a7b24716b4ec9c1a93
#: whatsnew/2.6.rst:2009
msgid "The :mod:`itertools` module gained several new functions."
msgstr ""

# cff931f73b30413ab27c782c9f0e396b
#: whatsnew/2.6.rst:2011
msgid ""
"``izip_longest(iter1, iter2, ...[, fillvalue])`` makes tuples from each of "
"the elements; if some of the iterables are shorter than others, the missing "
"values are set to *fillvalue*.  For example::"
msgstr ""

# b4b76207b77f44f4ba7a931320d95c09
#: whatsnew/2.6.rst:2018
msgid ""
"``product(iter1, iter2, ..., [repeat=N])`` returns the Cartesian product of "
"the supplied iterables, a set of tuples containing every possible "
"combination of the elements returned from each iterable. ::"
msgstr ""

# bb158336c8e944c1b4010fbb9f52c253
#: whatsnew/2.6.rst:2027
msgid ""
"The optional *repeat* keyword argument is used for taking the product of an "
"iterable or a set of iterables with themselves, repeated *N* times.  With a "
"single iterable argument, *N*-tuples are returned::"
msgstr ""

# 9761e6656b3b4749b863234c3071b91b
#: whatsnew/2.6.rst:2036
msgid "With two iterables, *2N*-tuples are returned. ::"
msgstr ""

# fcb9dc852caf4101ac81d1f5dfed9235
#: whatsnew/2.6.rst:2044
msgid ""
"``combinations(iterable, r)`` returns sub-sequences of length *r* from the "
"elements of *iterable*. ::"
msgstr ""

# 6bd3d90a7f2e4a5b86358271d752bd6a
#: whatsnew/2.6.rst:2055
msgid ""
"``permutations(iter[, r])`` returns all the permutations of length *r* of "
"the iterable's elements.  If *r* is not specified, it will default to the "
"number of elements produced by the iterable. ::"
msgstr ""

# 44cf22a944204fd8b36a2106a66d5a69
#: whatsnew/2.6.rst:2065
msgid ""
"``itertools.chain(*iterables)`` is an existing function in :mod:`itertools` "
"that gained a new constructor in Python 2.6. ``itertools.chain."
"from_iterable(iterable)`` takes a single iterable that should return other "
"iterables.  :func:`chain` will then return all the elements of the first "
"iterable, then all the elements of the second, and so on. ::"
msgstr ""

# fc69e28c227c4c5d9432e6e48d77b9e8
#: whatsnew/2.6.rst:2075
msgid "(All contributed by Raymond Hettinger.)"
msgstr ""

# c4c9d140af5e438f8f71e57f8819d129
#: whatsnew/2.6.rst:2077
msgid ""
"The :mod:`logging` module's :class:`FileHandler` class and its subclasses :"
"class:`WatchedFileHandler`, :class:`RotatingFileHandler`, and :class:"
"`TimedRotatingFileHandler` now have an optional *delay* parameter to their "
"constructors.  If *delay* is true, opening of the log file is deferred until "
"the first :meth:`emit` call is made.  (Contributed by Vinay Sajip.)"
msgstr ""

# 8907e38c76a746898c99a54a128a8baf
#: whatsnew/2.6.rst:2084
msgid ""
":class:`TimedRotatingFileHandler` also has a *utc* constructor parameter.  "
"If the argument is true, UTC time will be used in determining when midnight "
"occurs and in generating filenames; otherwise local time will be used."
msgstr ""

# 3ee6bf4006c64dbdbd1ff9d9fa118bc1
#: whatsnew/2.6.rst:2089
msgid "Several new functions were added to the :mod:`math` module:"
msgstr ""

# 54c12abba50145d2b3a15cbeab604491
#: whatsnew/2.6.rst:2091
msgid ""
":func:`~math.isinf` and :func:`~math.isnan` determine whether a given float "
"is a (positive or negative) infinity or a NaN (Not a Number), respectively."
msgstr ""

# f4306b46c6cd481380c5ffa1453a1f9c
#: whatsnew/2.6.rst:2094
msgid ""
":func:`~math.copysign` copies the sign bit of an IEEE 754 number, returning "
"the absolute value of *x* combined with the sign bit of *y*.  For example, "
"``math.copysign(1, -0.0)`` returns -1.0. (Contributed by Christian Heimes.)"
msgstr ""

# 95281bc0125248cabc99130c6f462f07
#: whatsnew/2.6.rst:2099
msgid ""
":func:`~math.factorial` computes the factorial of a number. (Contributed by "
"Raymond Hettinger; :issue:`2138`.)"
msgstr ""

# 0188f8c03591488bb06c450fc13f98bc
#: whatsnew/2.6.rst:2102
msgid ""
":func:`~math.fsum` adds up the stream of numbers from an iterable, and is "
"careful to avoid loss of precision through using partial sums. (Contributed "
"by Jean Brouwers, Raymond Hettinger, and Mark Dickinson; :issue:`2819`.)"
msgstr ""

# a3fa94b4b67144cda46c03c31012f36d
#: whatsnew/2.6.rst:2107
msgid ""
":func:`~math.acosh`, :func:`~math.asinh` and :func:`~math.atanh` compute the "
"inverse hyperbolic functions."
msgstr ""

# caf982c9122b4bc484b3924253b64461
#: whatsnew/2.6.rst:2110
msgid ":func:`~math.log1p` returns the natural logarithm of *1+x* (base *e*)."
msgstr ""

# 593fcb04049848b5bf036384ad10cdaf
#: whatsnew/2.6.rst:2113
msgid ""
":func:`trunc` rounds a number toward zero, returning the closest :class:"
"`Integral` that's between the function's argument and zero. Added as part of "
"the backport of `PEP 3141's type hierarchy for numbers <#pep-3141>`__."
msgstr ""

# 1c90615fea834c2b9dd611fef5a6170e
#: whatsnew/2.6.rst:2118
msgid ""
"The :mod:`math` module has been improved to give more consistent behaviour "
"across platforms, especially with respect to handling of floating-point "
"exceptions and IEEE 754 special values."
msgstr ""

# aaeabb7336f94ae2b69aeffac550f4d0
#: whatsnew/2.6.rst:2122
msgid ""
"Whenever possible, the module follows the recommendations of the C99 "
"standard about 754's special values.  For example, ``sqrt(-1.)`` should now "
"give a :exc:`ValueError` across almost all platforms, while "
"``sqrt(float('NaN'))`` should return a NaN on all IEEE 754 platforms.  Where "
"Annex 'F' of the C99 standard recommends signaling 'divide-by-zero' or "
"'invalid', Python will raise :exc:`ValueError`. Where Annex 'F' of the C99 "
"standard recommends signaling 'overflow', Python will raise :exc:"
"`OverflowError`.  (See :issue:`711019` and :issue:`1640`.)"
msgstr ""

# 3ee7b7ab779144599ab156da0a16cf2d
#: whatsnew/2.6.rst:2132
msgid "(Contributed by Christian Heimes and Mark Dickinson.)"
msgstr ""

# f0cbf88f5045462291735ed314d3ad4f
#: whatsnew/2.6.rst:2134
msgid ""
":class:`mmap` objects now have a :meth:`rfind` method that searches for a "
"substring beginning at the end of the string and searching backwards.  The :"
"meth:`find` method also gained an *end* parameter giving an index at which "
"to stop searching. (Contributed by John Lenton.)"
msgstr ""

# 6e40971a4e094dfdb3f011b67ac5f57d
#: whatsnew/2.6.rst:2140
msgid ""
"The :mod:`operator` module gained a :func:`methodcaller` function that takes "
"a name and an optional set of arguments, returning a callable that will call "
"the named function on any arguments passed to it.  For example::"
msgstr ""

# 18a5099df97d4b10900933c7ff7d917f
#: whatsnew/2.6.rst:2150
msgid "(Contributed by Georg Brandl, after a suggestion by Gregory Petrosyan.)"
msgstr ""

# ad8084b809604055b3908588222b84e6
#: whatsnew/2.6.rst:2152
msgid ""
"The :func:`attrgetter` function now accepts dotted names and performs the "
"corresponding attribute lookups::"
msgstr ""

# 9317fe1a616041d38524c4a0850d69fc
#: whatsnew/2.6.rst:2162
msgid "(Contributed by Georg Brandl, after a suggestion by Barry Warsaw.)"
msgstr ""

# a725aa1f23824936825fccb290963f51
#: whatsnew/2.6.rst:2164
msgid ""
"The :mod:`os` module now wraps several new system calls. ``fchmod(fd, "
"mode)`` and ``fchown(fd, uid, gid)`` change the mode and ownership of an "
"opened file, and ``lchmod(path, mode)`` changes the mode of a symlink.  "
"(Contributed by Georg Brandl and Christian Heimes.)"
msgstr ""

# 472b571948584192b30975af868d4814
#: whatsnew/2.6.rst:2170
msgid ""
":func:`chflags` and :func:`lchflags` are wrappers for the corresponding "
"system calls (where they're available), changing the flags set on a file.  "
"Constants for the flag values are defined in the :mod:`stat` module; some "
"possible values include :const:`UF_IMMUTABLE` to signal the file may not be "
"changed and :const:`UF_APPEND` to indicate that data can only be appended to "
"the file.  (Contributed by M. Levinson.)"
msgstr ""

# 1048641664b34736af4d07841c03213d
#: whatsnew/2.6.rst:2178
msgid ""
"``os.closerange(low, high)`` efficiently closes all file descriptors from "
"*low* to *high*, ignoring any errors and not including *high* itself. This "
"function is now used by the :mod:`subprocess` module to make starting "
"processes faster.  (Contributed by Georg Brandl; :issue:`1663329`.)"
msgstr ""

# 128ea12512ed4df799e357d698205814
#: whatsnew/2.6.rst:2183
msgid ""
"The ``os.environ`` object's :meth:`clear` method will now unset the "
"environment variables using :func:`os.unsetenv` in addition to clearing the "
"object's keys.  (Contributed by Martin Horcicka; :issue:`1181`.)"
msgstr ""

# 23aab8c096ad43ab993244cb8f2662b0
#: whatsnew/2.6.rst:2187
msgid ""
"The :func:`os.walk` function now has a ``followlinks`` parameter. If set to "
"True, it will follow symlinks pointing to directories and visit the "
"directory's contents.  For backward compatibility, the parameter's default "
"value is false.  Note that the function can fall into an infinite recursion "
"if there's a symlink that points to a parent directory.  (:issue:`1273829`)"
msgstr ""

# 04b618b26f7f41f8b437f850e14de409
#: whatsnew/2.6.rst:2194
msgid ""
"In the :mod:`os.path` module, the :func:`splitext` function has been changed "
"to not split on leading period characters. This produces better results when "
"operating on Unix's dot-files. For example, ``os.path.splitext('.ipython')`` "
"now returns ``('.ipython', '')`` instead of ``('', '.ipython')``. (:issue:"
"`1115886`)"
msgstr ""

# cc45a18e22a24e2e8724368772ff9923
#: whatsnew/2.6.rst:2201
msgid ""
"A new function, ``os.path.relpath(path, start='.')``, returns a relative "
"path from the ``start`` path, if it's supplied, or from the current working "
"directory to the destination ``path``.  (Contributed by Richard Barran; :"
"issue:`1339796`.)"
msgstr ""

# 5046f275aa7c414b822fd1f8813937b4
#: whatsnew/2.6.rst:2206
msgid ""
"On Windows, :func:`os.path.expandvars` will now expand environment variables "
"given in the form \"%var%\", and \"~user\" will be expanded into the user's "
"home directory path.  (Contributed by Josiah Carlson; :issue:`957650`.)"
msgstr ""

# 018607fa3ac942bdbda7687b9db85ec7
#: whatsnew/2.6.rst:2211
msgid ""
"The Python debugger provided by the :mod:`pdb` module gained a new command: "
"\"run\" restarts the Python program being debugged and can optionally take "
"new command-line arguments for the program. (Contributed by Rocky "
"Bernstein; :issue:`1393667`.)"
msgstr ""

# 0b4a43c939274be7829b81f3a813e421
#: whatsnew/2.6.rst:2216
msgid ""
"The :func:`pdb.post_mortem` function, used to begin debugging a traceback, "
"will now use the traceback returned by :func:`sys.exc_info` if no traceback "
"is supplied.   (Contributed by Facundo Batista; :issue:`1106316`.)"
msgstr ""

# 734d10b769924a7f87fe05b10528391f
#: whatsnew/2.6.rst:2221
msgid ""
"The :mod:`pickletools` module now has an :func:`optimize` function that "
"takes a string containing a pickle and removes some unused opcodes, "
"returning a shorter pickle that contains the same data structure. "
"(Contributed by Raymond Hettinger.)"
msgstr ""

# 88f754357ffe4ccfb0c21ec1eb4ab34c
#: whatsnew/2.6.rst:2226
msgid ""
"A :func:`get_data` function was added to the :mod:`pkgutil` module that "
"returns the contents of resource files included with an installed Python "
"package.  For example::"
msgstr ""

# e2e62792a4324ebe8be9fc4b8a840938
#: whatsnew/2.6.rst:2241
msgid "(Contributed by Paul Moore; :issue:`2439`.)"
msgstr ""

# 0acb6947dcf042f096ad2fe2f1f63714
#: whatsnew/2.6.rst:2243
msgid ""
"The :mod:`pyexpat` module's :class:`Parser` objects now allow setting their :"
"attr:`buffer_size` attribute to change the size of the buffer used to hold "
"character data. (Contributed by Achim Gaedke; :issue:`1137`.)"
msgstr ""

# ccc908a630ce4f0e8fd88fd722cf020d
#: whatsnew/2.6.rst:2248
msgid ""
"The :mod:`Queue` module now provides queue variants that retrieve entries in "
"different orders.  The :class:`PriorityQueue` class stores queued items in a "
"heap and retrieves them in priority order, and :class:`LifoQueue` retrieves "
"the most recently added entries first, meaning that it behaves like a stack. "
"(Contributed by Raymond Hettinger.)"
msgstr ""

# d5c5356ece5640a987aeb13a6f973192
#: whatsnew/2.6.rst:2255
msgid ""
"The :mod:`random` module's :class:`Random` objects can now be pickled on a "
"32-bit system and unpickled on a 64-bit system, and vice versa.  "
"Unfortunately, this change also means that Python 2.6's :class:`Random` "
"objects can't be unpickled correctly on earlier versions of Python. "
"(Contributed by Shawn Ligocki; :issue:`1727780`.)"
msgstr ""

# 765a44da02b640e2b6ea905ee2c3aa47
#: whatsnew/2.6.rst:2262
msgid ""
"The new ``triangular(low, high, mode)`` function returns random numbers "
"following a triangular distribution.   The returned values are between *low* "
"and *high*, not including *high* itself, and with *mode* as the most "
"frequently occurring value in the distribution.  (Contributed by Wladmir van "
"der Laan and Raymond Hettinger; :issue:`1681432`.)"
msgstr ""

# bc429f6233424749b540815d14072a1e
#: whatsnew/2.6.rst:2269
msgid ""
"Long regular expression searches carried out by the  :mod:`re` module will "
"check for signals being delivered, so time-consuming searches can now be "
"interrupted. (Contributed by Josh Hoyt and Ralf Schmitt; :issue:`846388`.)"
msgstr ""

# 1a6d50be5ef14734a922a1e59aa5a3a0
#: whatsnew/2.6.rst:2274
msgid ""
"The regular expression module is implemented by compiling bytecodes for a "
"tiny regex-specific virtual machine.  Untrusted code could create malicious "
"strings of bytecode directly and cause crashes, so Python 2.6 includes a "
"verifier for the regex bytecode. (Contributed by Guido van Rossum from work "
"for Google App Engine; :issue:`3487`.)"
msgstr ""

# aa48d15cd15c4125b13e8fdcc802bae4
#: whatsnew/2.6.rst:2281
msgid ""
"The :mod:`rlcompleter` module's :meth:`Completer.complete()` method will now "
"ignore exceptions triggered while evaluating a name. (Fixed by Lorenz "
"Quack; :issue:`2250`.)"
msgstr ""

# cb761262180144e59275a79abefc079a
#: whatsnew/2.6.rst:2285
msgid ""
"The :mod:`sched` module's :class:`scheduler` instances now have a read-only :"
"attr:`queue` attribute that returns the contents of the scheduler's queue, "
"represented as a list of named tuples with the fields ``(time, priority, "
"action, argument)``. (Contributed by Raymond Hettinger; :issue:`1861`.)"
msgstr ""

# 96f486da91e64f3bb226e141e82255e4
#: whatsnew/2.6.rst:2291
msgid ""
"The :mod:`select` module now has wrapper functions for the Linux :c:func:"
"`epoll` and BSD :c:func:`kqueue` system calls. :meth:`modify` method was "
"added to the existing :class:`poll` objects; ``pollobj.modify(fd, "
"eventmask)`` takes a file descriptor or file object and an event mask, "
"modifying the recorded event mask for that file. (Contributed by Christian "
"Heimes; :issue:`1657`.)"
msgstr ""

# a512a3e7415e474ba2fc55a90592b5c0
#: whatsnew/2.6.rst:2299
msgid ""
"The :func:`shutil.copytree` function now has an optional *ignore* argument "
"that takes a callable object.  This callable will receive each directory "
"path and a list of the directory's contents, and returns a list of names "
"that will be ignored, not copied."
msgstr ""

# fdf6296d464042578e376728b8ad7257
#: whatsnew/2.6.rst:2304
msgid ""
"The :mod:`shutil` module also provides an :func:`ignore_patterns` function "
"for use with this new parameter.  :func:`ignore_patterns` takes an arbitrary "
"number of glob-style patterns and returns a callable that will ignore any "
"files and directories that match any of these patterns.  The following "
"example copies a directory tree, but skips both :file:`.svn` directories and "
"Emacs backup files, which have names ending with '~'::"
msgstr ""

# e4980135f1504525bcd3d3b84c1c64d2
#: whatsnew/2.6.rst:2315
#, fuzzy
msgid "(Contributed by Tarek Ziadé; :issue:`2663`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 4524f223be2c4b3795713dd19795e7aa
#: whatsnew/2.6.rst:2317
msgid ""
"Integrating signal handling with GUI handling event loops like those used by "
"Tkinter or GTk+ has long been a problem; most software ends up polling, "
"waking up every fraction of a second to check if any GUI events have "
"occurred. The :mod:`signal` module can now make this more efficient. Calling "
"``signal.set_wakeup_fd(fd)`` sets a file descriptor to be used; when a "
"signal is received, a byte is written to that file descriptor.  There's also "
"a C-level function, :c:func:`PySignal_SetWakeupFd`, for setting the "
"descriptor."
msgstr ""

# d96f5885dfc241c6841bd47ad31a3bf8
#: whatsnew/2.6.rst:2327
msgid ""
"Event loops will use this by opening a pipe to create two descriptors, one "
"for reading and one for writing.  The writable descriptor will be passed to :"
"func:`set_wakeup_fd`, and the readable descriptor will be added to the list "
"of descriptors monitored by the event loop via :c:func:`select` or :c:func:"
"`poll`. On receiving a signal, a byte will be written and the main event "
"loop will be woken up, avoiding the need to poll."
msgstr ""

# a956606c95fc430b9ccc63afa46894b2
#: whatsnew/2.6.rst:2335
msgid "(Contributed by Adam Olsen; :issue:`1583`.)"
msgstr ""

# 49e08348af204e5890a57f73b777557d
#: whatsnew/2.6.rst:2337
msgid ""
"The :func:`siginterrupt` function is now available from Python code, and "
"allows changing whether signals can interrupt system calls or not. "
"(Contributed by Ralf Schmitt.)"
msgstr ""

# 4276a3db03b349dd92080e6913f2ee4e
#: whatsnew/2.6.rst:2341
msgid ""
"The :func:`setitimer` and :func:`getitimer` functions have also been added "
"(where they're available).  :func:`setitimer` allows setting interval timers "
"that will cause a signal to be delivered to the process after a specified "
"time, measured in wall-clock time, consumed process time, or combined process"
"+system time.  (Contributed by Guilherme Polo; :issue:`2240`.)"
msgstr ""

# ae2c0e8f2e8d4a23ad0f87c292d1fe9d
#: whatsnew/2.6.rst:2348
msgid ""
"The :mod:`smtplib` module now supports SMTP over SSL thanks to the addition "
"of the :class:`SMTP_SSL` class. This class supports an interface identical "
"to the existing :class:`SMTP` class. (Contributed by Monty Taylor.)  Both "
"class constructors also have an optional ``timeout`` parameter that "
"specifies a timeout for the initial connection attempt, measured in "
"seconds.  (Contributed by Facundo Batista.)"
msgstr ""

# dd068e5db1644079ad31790a640aa41f
#: whatsnew/2.6.rst:2356
msgid ""
"An implementation of the LMTP protocol (:rfc:`2033`) was also added to the "
"module.  LMTP is used in place of SMTP when transferring e-mail between "
"agents that don't manage a mail queue.  (LMTP implemented by Leif Hedstrom; :"
"issue:`957003`.)"
msgstr ""

# 9faa8936e46048a19f4662f0742e4f26
#: whatsnew/2.6.rst:2361
msgid ""
":meth:`SMTP.starttls` now complies with :rfc:`3207` and forgets any "
"knowledge obtained from the server not obtained from the TLS negotiation "
"itself.  (Patch contributed by Bill Fenner; :issue:`829951`.)"
msgstr ""

# 841c535b04104f50894ae603fd85e595
#: whatsnew/2.6.rst:2366
msgid ""
"The :mod:`socket` module now supports TIPC (http://tipc.sf.net), a high-"
"performance non-IP-based protocol designed for use in clustered "
"environments.  TIPC addresses are 4- or 5-tuples. (Contributed by Alberto "
"Bertogli; :issue:`1646`.)"
msgstr ""

# 838b8a8f7c8d4d9890371afc0c15c6b0
#: whatsnew/2.6.rst:2371
msgid ""
"A new function, :func:`create_connection`, takes an address and connects to "
"it using an optional timeout value, returning the connected socket object.  "
"This function also looks up the address's type and connects to it using IPv4 "
"or IPv6 as appropriate.  Changing your code to use :func:`create_connection` "
"instead of ``socket(socket.AF_INET, ...)`` may be all that's required to "
"make your code work with IPv6."
msgstr ""

# 0a48e7d036eb44cb88faf896bf6460b2
#: whatsnew/2.6.rst:2379
msgid ""
"The base classes in the :mod:`SocketServer` module now support calling a :"
"meth:`handle_timeout` method after a span of inactivity specified by the "
"server's :attr:`timeout` attribute.  (Contributed by Michael Pomraning.)  "
"The :meth:`serve_forever` method now takes an optional poll interval "
"measured in seconds, controlling how often the server will check for a "
"shutdown request. (Contributed by Pedro Werneck and Jeffrey Yasskin; :issue:"
"`742598`, :issue:`1193577`.)"
msgstr ""

# 26abd756561d4726bea9bafc6a266e95
#: whatsnew/2.6.rst:2388
msgid ""
"The :mod:`sqlite3` module, maintained by Gerhard Häring, has been updated "
"from version 2.3.2 in Python 2.5 to version 2.4.1."
msgstr ""

# eb1253dbb02644a6b2b4372b83053536
#: whatsnew/2.6.rst:2392
msgid ""
"The :mod:`struct` module now supports the C99 :c:type:`_Bool` type, using "
"the format character ``'?'``. (Contributed by David Remahl.)"
msgstr ""

# a0d06b20c8244dfd8fd9a07201888a41
#: whatsnew/2.6.rst:2396
msgid ""
"The :class:`Popen` objects provided by the :mod:`subprocess` module now "
"have :meth:`terminate`, :meth:`kill`, and :meth:`send_signal` methods. On "
"Windows, :meth:`send_signal` only supports the :const:`SIGTERM` signal, and "
"all these methods are aliases for the Win32 API function :c:func:"
"`TerminateProcess`. (Contributed by Christian Heimes.)"
msgstr ""

# e37837053d334d1a92eac55e02dcef85
#: whatsnew/2.6.rst:2403
msgid ""
"A new variable in the :mod:`sys` module, :attr:`float_info`, is an object "
"containing information derived from the :file:`float.h` file about the "
"platform's floating-point support.  Attributes of this object include :attr:"
"`mant_dig` (number of digits in the mantissa), :attr:`epsilon` (smallest "
"difference between 1.0 and the next largest value representable), and "
"several others.  (Contributed by Christian Heimes; :issue:`1534`.)"
msgstr ""

# c8eddf39476f4059ace5442214177d50
#: whatsnew/2.6.rst:2411
msgid ""
"Another new variable, :attr:`dont_write_bytecode`, controls whether Python "
"writes any :file:`.pyc` or :file:`.pyo` files on importing a module. If this "
"variable is true, the compiled files are not written.  The variable is "
"initially set on start-up by supplying the :option:`-B` switch to the Python "
"interpreter, or by setting the :envvar:`PYTHONDONTWRITEBYTECODE` environment "
"variable before running the interpreter.  Python code can subsequently "
"change the value of this variable to control whether bytecode files are "
"written or not. (Contributed by Neal Norwitz and Georg Brandl.)"
msgstr ""

# 6694cb966f584f4e818bb99d98a999aa
#: whatsnew/2.6.rst:2422
msgid ""
"Information about the command-line arguments supplied to the Python "
"interpreter is available by reading attributes of a named tuple available as "
"``sys.flags``.  For example, the :attr:`verbose` attribute is true if Python "
"was executed in verbose mode, :attr:`debug` is true in debugging mode, etc. "
"These attributes are all read-only. (Contributed by Christian Heimes.)"
msgstr ""

# ba5b086b6d134f02abb5be357169123c
#: whatsnew/2.6.rst:2430
msgid ""
"A new function, :func:`getsizeof`, takes a Python object and returns the "
"amount of memory used by the object, measured in bytes.  Built-in objects "
"return correct results; third-party extensions may not, but can define a :"
"meth:`__sizeof__` method to return the object's size. (Contributed by Robert "
"Schuppenies; :issue:`2898`.)"
msgstr ""

# 7e2b9b80ac1d4ea790880a8573aa1f04
#: whatsnew/2.6.rst:2437
msgid ""
"It's now possible to determine the current profiler and tracer functions by "
"calling :func:`sys.getprofile` and :func:`sys.gettrace`. (Contributed by "
"Georg Brandl; :issue:`1648`.)"
msgstr ""

# 7b0bc1c67ad942b3965738a8965b219e
#: whatsnew/2.6.rst:2441
msgid ""
"The :mod:`tarfile` module now supports POSIX.1-2001 (pax) tarfiles in "
"addition to the POSIX.1-1988 (ustar) and GNU tar formats that were already "
"supported.  The default format is GNU tar; specify the ``format`` parameter "
"to open a file using a different format::"
msgstr ""

# c46013de1f8a49fea18d3987967eb29e
#: whatsnew/2.6.rst:2449
msgid ""
"The new ``encoding`` and ``errors`` parameters specify an encoding and an "
"error handling scheme for character conversions.  ``'strict'``, "
"``'ignore'``, and ``'replace'`` are the three standard ways Python can "
"handle errors,; ``'utf-8'`` is a special value that replaces bad characters "
"with their UTF-8 representation.  (Character conversions occur because the "
"PAX format supports Unicode filenames, defaulting to UTF-8 encoding.)"
msgstr ""

# 3631fc4db08542f895aab077332e5dca
#: whatsnew/2.6.rst:2457
msgid ""
"The :meth:`TarFile.add` method now accepts an ``exclude`` argument that's a "
"function that can be used to exclude certain filenames from an archive. The "
"function must take a filename and return true if the file should be excluded "
"or false if it should be archived. The function is applied to both the name "
"initially passed to :meth:`add` and to the names of files in recursively-"
"added directories."
msgstr ""

# 9b2669e8705b46b5906ef9713edba146
#: whatsnew/2.6.rst:2465
msgid "(All changes contributed by Lars Gustäbel)."
msgstr ""

# 1ce78fda0b79476bb7fb8db615011a64
#: whatsnew/2.6.rst:2467
msgid ""
"An optional ``timeout`` parameter was added to the :class:`telnetlib.Telnet` "
"class constructor, specifying a timeout measured in seconds.  (Added by "
"Facundo Batista.)"
msgstr ""

# fefa2213a6224a38a1c54233cea578ec
#: whatsnew/2.6.rst:2471
msgid ""
"The :class:`tempfile.NamedTemporaryFile` class usually deletes the temporary "
"file it created when the file is closed.  This behaviour can now be changed "
"by passing ``delete=False`` to the constructor.  (Contributed by Damien "
"Miller; :issue:`1537850`.)"
msgstr ""

# ed9ce4bf82fe43d181e06633ff720c36
#: whatsnew/2.6.rst:2476
msgid ""
"A new class, :class:`SpooledTemporaryFile`, behaves like a temporary file "
"but stores its data in memory until a maximum size is exceeded.  On reaching "
"that limit, the contents will be written to an on-disk temporary file.  "
"(Contributed by Dustin J. Mitchell.)"
msgstr ""

# 4494391af78c496dbc74baeeb0fdf2d1
#: whatsnew/2.6.rst:2481
msgid ""
"The :class:`NamedTemporaryFile` and :class:`SpooledTemporaryFile` classes "
"both work as context managers, so you can write ``with tempfile."
"NamedTemporaryFile() as tmp: ...``. (Contributed by Alexander Belopolsky; :"
"issue:`2021`.)"
msgstr ""

# 6fcee861802c4a63985a4f86980f55e6
#: whatsnew/2.6.rst:2486
msgid ""
"The :mod:`test.test_support` module gained a number of context managers "
"useful for writing tests. :func:`EnvironmentVarGuard` is a context manager "
"that temporarily changes environment variables and automatically restores "
"them to their old values."
msgstr ""

# 9f178f451d044f1ca736e6a782eee5c0
#: whatsnew/2.6.rst:2492
msgid ""
"Another context manager, :class:`TransientResource`, can surround calls to "
"resources that may or may not be available; it will catch and ignore a "
"specified list of exceptions.  For example, a network test may ignore "
"certain failures when connecting to an external web site::"
msgstr ""

# 13e1167e36aa4e05b2730506c66ad32d
#: whatsnew/2.6.rst:2503
msgid ""
"Finally, :func:`check_warnings` resets the :mod:`warning` module's warning "
"filters and returns an object that will record all warning messages "
"triggered (:issue:`3781`)::"
msgstr ""

# a6c22c04ae22492ab33f52e62ad79e04
# 0868f6c7a340430cadefb415c36e5ed8
#: whatsnew/2.6.rst:2513 whatsnew/3.1.rst:413
msgid "(Contributed by Brett Cannon.)"
msgstr ""

# e59bd027ab314db88f361160c90661df
#: whatsnew/2.6.rst:2515
msgid ""
"The :mod:`textwrap` module can now preserve existing whitespace at the "
"beginnings and ends of the newly-created lines by specifying "
"``drop_whitespace=False`` as an argument::"
msgstr ""

# f05552e79fee4a75b660e6292d12e597
#: whatsnew/2.6.rst:2534
msgid "(Contributed by Dwayne Bailey; :issue:`1581073`.)"
msgstr ""

# 0d59a4047e914205b99f8f2d15d1802b
#: whatsnew/2.6.rst:2536
msgid ""
"The :mod:`threading` module API is being changed to use properties such as :"
"attr:`daemon` instead of :meth:`setDaemon` and :meth:`isDaemon` methods, and "
"some methods have been renamed to use underscores instead of camel-case; for "
"example, the :meth:`activeCount` method is renamed to :meth:`active_count`.  "
"Both the 2.6 and 3.0 versions of the module support the same properties and "
"renamed methods, but don't remove the old methods.  No date has been set for "
"the deprecation of the old APIs in Python 3.x; the old APIs won't be removed "
"in any 2.x version. (Carried out by several people, most notably Benjamin "
"Peterson.)"
msgstr ""

# 7d06593bbd8c4496bf41977283872255
#: whatsnew/2.6.rst:2547
msgid ""
"The :mod:`threading` module's :class:`Thread` objects gained an :attr:"
"`ident` property that returns the thread's identifier, a nonzero integer.  "
"(Contributed by Gregory P. Smith; :issue:`2871`.)"
msgstr ""

# 54a3e50673104656aea6f68d14d0ebbc
#: whatsnew/2.6.rst:2552
msgid ""
"The :mod:`timeit` module now accepts callables as well as strings for the "
"statement being timed and for the setup code. Two convenience functions were "
"added for creating :class:`Timer` instances: ``repeat(stmt, setup, time, "
"repeat, number)`` and ``timeit(stmt, setup, time, number)`` create an "
"instance and call the corresponding method. (Contributed by Erik Demaine; :"
"issue:`1533909`.)"
msgstr ""

# a6fe40c81a8b401599fa566b97a9d313
#: whatsnew/2.6.rst:2561
msgid ""
"The :mod:`Tkinter` module now accepts lists and tuples for options, "
"separating the elements by spaces before passing the resulting value to Tcl/"
"Tk. (Contributed by Guilherme Polo; :issue:`2906`.)"
msgstr ""

# d0d738fea98a471a9236ce561870e85c
#: whatsnew/2.6.rst:2566
msgid ""
"The :mod:`turtle` module for turtle graphics was greatly enhanced by Gregor "
"Lingl.  New features in the module include:"
msgstr ""

# 0103000b937f4be9a7d4f72eedb3b45f
#: whatsnew/2.6.rst:2569
msgid "Better animation of turtle movement and rotation."
msgstr ""

# ec9827dfb8894b33aa287e5d0c241857
#: whatsnew/2.6.rst:2570
msgid ""
"Control over turtle movement using the new :meth:`delay`, :meth:`tracer`, "
"and :meth:`speed` methods."
msgstr ""

# 476361121ffc464c81bde9345e51d705
#: whatsnew/2.6.rst:2572
msgid ""
"The ability to set new shapes for the turtle, and to define a new coordinate "
"system."
msgstr ""

# ce28edebe1b141c29f608d6e51ea529b
#: whatsnew/2.6.rst:2574
msgid "Turtles now have an :meth:`undo()` method that can roll back actions."
msgstr ""

# fa0d417705ce49ae889b5e4fa55d1fd7
#: whatsnew/2.6.rst:2575
msgid ""
"Simple support for reacting to input events such as mouse and keyboard "
"activity, making it possible to write simple games."
msgstr ""

# 6453f7e7ec974e6da73c4f790f836775
#: whatsnew/2.6.rst:2577
msgid ""
"A :file:`turtle.cfg` file can be used to customize the starting appearance "
"of the turtle's screen."
msgstr ""

# 878b4378597f439d887d14735ba05864
#: whatsnew/2.6.rst:2579
msgid ""
"The module's docstrings can be replaced by new docstrings that have been "
"translated into another language."
msgstr ""

# 899212f94d444c14888afc3233b73fb9
#: whatsnew/2.6.rst:2582
msgid "(:issue:`1513695`)"
msgstr ""

# 487eb6027599459baf5cc5c2040dbead
#: whatsnew/2.6.rst:2584
msgid ""
"An optional ``timeout`` parameter was added to the :func:`urllib.urlopen` "
"function and the :class:`urllib.ftpwrapper` class constructor, as well as "
"the :func:`urllib2.urlopen` function.  The parameter specifies a timeout "
"measured in seconds.   For example::"
msgstr ""

# 3a47ea9642074a31b7bfeadacda0954f
#: whatsnew/2.6.rst:2597
msgid "(Added by Facundo Batista.)"
msgstr ""

# 07ec39f7ca28438fa60b5b5706bf5956
#: whatsnew/2.6.rst:2599
msgid ""
"The Unicode database provided by the :mod:`unicodedata` module has been "
"updated to version 5.1.0.  (Updated by Martin von Löwis; :issue:`3811`.)"
msgstr ""

# 9b9248e4812445609a920ae209113b84
#: whatsnew/2.6.rst:2603
msgid ""
"The :mod:`warnings` module's :func:`formatwarning` and :func:`showwarning` "
"gained an optional *line* argument that can be used to supply the line of "
"source code.  (Added as part of :issue:`1631171`, which re-implemented part "
"of the :mod:`warnings` module in C code.)"
msgstr ""

# e38815c1845943c29906ecfec6f7fc6e
#: whatsnew/2.6.rst:2608
msgid ""
"A new function, :func:`catch_warnings`, is a context manager intended for "
"testing purposes that lets you temporarily modify the warning filters and "
"then restore their original values (:issue:`3781`)."
msgstr ""

# c59ed57f332f4e379f22076b9e452938
#: whatsnew/2.6.rst:2612
msgid ""
"The XML-RPC :class:`SimpleXMLRPCServer` and :class:`DocXMLRPCServer` classes "
"can now be prevented from immediately opening and binding to their socket by "
"passing True as the ``bind_and_activate`` constructor parameter.  This can "
"be used to modify the instance's :attr:`allow_reuse_address` attribute "
"before calling the :meth:`server_bind` and :meth:`server_activate` methods "
"to open the socket and begin listening for connections. (Contributed by "
"Peter Parente; :issue:`1599845`.)"
msgstr ""

# 1fdbbb6cd99f4d4c93e0ebd18591495c
#: whatsnew/2.6.rst:2621
msgid ""
":class:`SimpleXMLRPCServer` also has a :attr:`_send_traceback_header` "
"attribute; if true, the exception and formatted traceback are returned as "
"HTTP headers \"X-Exception\" and \"X-Traceback\".  This feature is for "
"debugging purposes only and should not be used on production servers because "
"the tracebacks might reveal passwords or other sensitive information.  "
"(Contributed by Alan McIntyre as part of his project for Google's Summer of "
"Code 2007.)"
msgstr ""

# 30ad7c32d8af4e29bc1596c05bc058d8
#: whatsnew/2.6.rst:2629
msgid ""
"The :mod:`xmlrpclib` module no longer automatically converts :class:"
"`datetime.date` and :class:`datetime.time` to the :class:`xmlrpclib."
"DateTime` type; the conversion semantics were not necessarily correct for "
"all applications.  Code using :mod:`xmlrpclib` should convert :class:`date` "
"and :class:`time` instances. (:issue:`1330538`)  The code can also handle "
"dates before 1900 (contributed by Ralf Schmitt; :issue:`2014`) and 64-bit "
"integers represented by using ``<i8>`` in XML-RPC responses (contributed by "
"Riku Lindblad; :issue:`2985`)."
msgstr ""

# 84bdcfb46a1f4cc7a0ae1940b9817e2a
#: whatsnew/2.6.rst:2639
msgid ""
"The :mod:`zipfile` module's :class:`ZipFile` class now has :meth:`extract` "
"and :meth:`extractall` methods that will unpack a single file or all the "
"files in the archive to the current directory, or to a specified directory::"
msgstr ""

# 85db65cae9fe469da3550f9ee713ea3e
#: whatsnew/2.6.rst:2653
msgid "(Contributed by Alan McIntyre; :issue:`467924`.)"
msgstr ""

# 966f6a93da1542a187a9cfd0a5584340
#: whatsnew/2.6.rst:2655
msgid ""
"The :meth:`open`, :meth:`read` and :meth:`extract` methods can now take "
"either a filename or a :class:`ZipInfo` object.  This is useful when an "
"archive accidentally contains a duplicated filename. (Contributed by Graham "
"Horler; :issue:`1775025`.)"
msgstr ""

# 3643c8dac7da4117a45df1f222cce21b
#: whatsnew/2.6.rst:2660
msgid ""
"Finally, :mod:`zipfile` now supports using Unicode filenames for archived "
"files.  (Contributed by Alexey Borzenkov; :issue:`1734346`.)"
msgstr ""

# 8d89c6e973a04ec4a83a2e908f1a8392
#: whatsnew/2.6.rst:2667
msgid "The :mod:`ast` module"
msgstr ""

# 2b97c53b2bc645fcb5ba4067bf371ee7
#: whatsnew/2.6.rst:2669
msgid ""
"The :mod:`ast` module provides an Abstract Syntax Tree representation of "
"Python code, and Armin Ronacher contributed a set of helper functions that "
"perform a variety of common tasks.  These will be useful for HTML templating "
"packages, code analyzers, and similar tools that process Python code."
msgstr ""

# 8cc6f5a894a54e989ac593b96d870895
#: whatsnew/2.6.rst:2676
msgid ""
"The :func:`parse` function takes an expression and returns an AST. The :func:"
"`dump` function outputs a representation of a tree, suitable for debugging::"
msgstr ""

# 3d27964387db488dad1b107011ad19da
#: whatsnew/2.6.rst:2690
msgid "This outputs a deeply nested tree::"
msgstr ""

# 82150ef2619b445cb29929d1b696ea13
#: whatsnew/2.6.rst:2723
msgid ""
"The :func:`literal_eval` method takes a string or an AST representing a "
"literal expression, parses and evaluates it, and returns the resulting "
"value.  A literal expression is a Python expression containing only strings, "
"numbers, dictionaries, etc. but no statements or function calls.  If you "
"need to evaluate an expression but cannot accept the security risk of using "
"an :func:`eval` call, :func:`literal_eval` will handle it safely::"
msgstr ""

# b057d17f923f4faea0edb82a83246356
#: whatsnew/2.6.rst:2739
msgid ""
"The module also includes :class:`NodeVisitor` and :class:`NodeTransformer` "
"classes for traversing and modifying an AST, and functions for common "
"transformations such as changing line numbers."
msgstr ""

# 16bcbc312f66406f84663dfb9e946751
#: whatsnew/2.6.rst:2747
msgid "The :mod:`future_builtins` module"
msgstr ""

# 012cb44efe2a4fb5a61dd14b5bfd91a0
#: whatsnew/2.6.rst:2749
msgid ""
"Python 3.0 makes many changes to the repertoire of built-in functions, and "
"most of the changes can't be introduced in the Python 2.x series because "
"they would break compatibility. The :mod:`future_builtins` module provides "
"versions of these built-in functions that can be imported when writing 3.0-"
"compatible code."
msgstr ""

# 91bfe3511bde4f318441b70e163ea156
#: whatsnew/2.6.rst:2756
msgid "The functions in this module currently include:"
msgstr ""

# 744a66f6376e4770aa50d96290f9f74d
#: whatsnew/2.6.rst:2758
msgid ""
"``ascii(obj)``: equivalent to :func:`repr`.  In Python 3.0, :func:`repr` "
"will return a Unicode string, while :func:`ascii` will return a pure ASCII "
"bytestring."
msgstr ""

# 60e8f40fd2fb46a78d187876dc218db4
#: whatsnew/2.6.rst:2762
msgid ""
"``filter(predicate, iterable)``, ``map(func, iterable1, ...)``: the 3.0 "
"versions return iterators, unlike the 2.x builtins which return lists."
msgstr ""

# f0af1293b4834536adf3e31216a8d280
#: whatsnew/2.6.rst:2766
msgid ""
"``hex(value)``, ``oct(value)``: instead of calling the :meth:`__hex__` or :"
"meth:`__oct__` methods, these versions will call the :meth:`__index__` "
"method and convert the result to hexadecimal or octal.  :func:`oct` will use "
"the new ``0o`` notation for its result."
msgstr ""

# 601390c060b2472db64f64967be199c1
#: whatsnew/2.6.rst:2775
msgid "The :mod:`json` module: JavaScript Object Notation"
msgstr ""

# 9a630fb440954a529e850a418242023e
#: whatsnew/2.6.rst:2777
msgid ""
"The new :mod:`json` module supports the encoding and decoding of Python "
"types in JSON (Javascript Object Notation). JSON is a lightweight "
"interchange format often used in web applications. For more information "
"about JSON, see http://www.json.org."
msgstr ""

# 88e614a6250a4a6aacc1c4a5288253bc
#: whatsnew/2.6.rst:2782
msgid ""
":mod:`json` comes with support for decoding and encoding most built-in "
"Python types. The following example encodes and decodes a dictionary::"
msgstr ""

# a6d6822ea85842898855046b8468c0ed
#: whatsnew/2.6.rst:2793
msgid ""
"It's also possible to write your own decoders and encoders to support more "
"types. Pretty-printing of the JSON strings is also supported."
msgstr ""

# 9369dc5435314f2980dab1fa33b0d56a
#: whatsnew/2.6.rst:2796
msgid ":mod:`json` (originally called simplejson) was written by Bob Ippolito."
msgstr ""

# a425f421f25d41029c981ec18165eee2
#: whatsnew/2.6.rst:2803
msgid "The :mod:`plistlib` module: A Property-List Parser"
msgstr ""

# 8ab450059a774697b6417619d607fae9
#: whatsnew/2.6.rst:2805
msgid ""
"The ``.plist`` format is commonly used on Mac OS X to store basic data types "
"(numbers, strings, lists, and dictionaries) by serializing them into an XML-"
"based format. It resembles the XML-RPC serialization of data types."
msgstr ""

# 36039bc9a685451e8080df2ad5abb15d
#: whatsnew/2.6.rst:2810
msgid ""
"Despite being primarily used on Mac OS X, the format has nothing Mac-"
"specific about it and the Python implementation works on any platform that "
"Python supports, so the :mod:`plistlib` module has been promoted to the "
"standard library."
msgstr ""

# 375e6addba5c4772a150f0a2ea111f69
#: whatsnew/2.6.rst:2815
msgid "Using the module is simple::"
msgstr ""

# 252498b7c7f94d1fa3fe96f644c701fc
#: whatsnew/2.6.rst:2842
msgid "ctypes Enhancements"
msgstr ""

# 9fe97364f4854fb1a798b3cee46fd50f
#: whatsnew/2.6.rst:2844
msgid ""
"Thomas Heller continued to maintain and enhance the :mod:`ctypes` module."
msgstr ""

# cc475032f09f4aa89272f40675d6d8fc
#: whatsnew/2.6.rst:2847
msgid ""
":mod:`ctypes` now supports a :class:`c_bool` datatype that represents the "
"C99 ``bool`` type.  (Contributed by David Remahl; :issue:`1649190`.)"
msgstr ""

# a432ebeb5a174bdf93cd2690f33988cb
#: whatsnew/2.6.rst:2851
msgid ""
"The :mod:`ctypes` string, buffer and array types have improved support for "
"extended slicing syntax, where various combinations of ``(start, stop, "
"step)`` are supplied. (Implemented by Thomas Wouters.)"
msgstr ""

# d7fad7575a344b1cbcbac3a08681cb37
#: whatsnew/2.6.rst:2858
msgid ""
"All :mod:`ctypes` data types now support :meth:`from_buffer` and :meth:"
"`from_buffer_copy` methods that create a ctypes instance based on a provided "
"buffer object.  :meth:`from_buffer_copy` copies the contents of the object, "
"while :meth:`from_buffer` will share the same memory area."
msgstr ""

# 006ada4e46e24be2a5c3d4c13f95cd77
#: whatsnew/2.6.rst:2865
msgid ""
"A new calling convention tells :mod:`ctypes` to clear the ``errno`` or Win32 "
"LastError variables at the outset of each wrapped call. (Implemented by "
"Thomas Heller; :issue:`1798`.)"
msgstr ""

# 6798a578e44d4445ba5ce51cace3778d
#: whatsnew/2.6.rst:2869
msgid ""
"You can now retrieve the Unix ``errno`` variable after a function call.  "
"When creating a wrapped function, you can supply ``use_errno=True`` as a "
"keyword parameter to the :func:`DLL` function and then call the module-level "
"methods :meth:`set_errno` and :meth:`get_errno` to set and retrieve the "
"error value."
msgstr ""

# 868b3b33f7b34e0896ccad542640e975
#: whatsnew/2.6.rst:2875
msgid ""
"The Win32 LastError variable is similarly supported by the :func:`DLL`, :"
"func:`OleDLL`, and :func:`WinDLL` functions. You supply "
"``use_last_error=True`` as a keyword parameter and then call the module-"
"level methods :meth:`set_last_error` and :meth:`get_last_error`."
msgstr ""

# 6779197384714e01b0243bb5a6fcaef7
#: whatsnew/2.6.rst:2881
msgid ""
"The :func:`byref` function, used to retrieve a pointer to a ctypes instance, "
"now has an optional *offset* parameter that is a byte count that will be "
"added to the returned pointer."
msgstr ""

# fb07045f622a40c2a8433af0f0af2027
#: whatsnew/2.6.rst:2888
msgid "Improved SSL Support"
msgstr ""

# d6ceeb17b8cf4ebab754922664728741
#: whatsnew/2.6.rst:2890
msgid ""
"Bill Janssen made extensive improvements to Python 2.6's support for the "
"Secure Sockets Layer by adding a new module, :mod:`ssl`, that's built atop "
"the `OpenSSL <http://www.openssl.org/>`__ library. This new module provides "
"more control over the protocol negotiated, the X.509 certificates used, and "
"has better support for writing SSL servers (as opposed to clients) in "
"Python.  The existing SSL support in the :mod:`socket` module hasn't been "
"removed and continues to work, though it will be removed in Python 3.0."
msgstr ""

# 4fd0005241f04d2a84581c7a515dcd5b
#: whatsnew/2.6.rst:2899
msgid ""
"To use the new module, you must first create a TCP connection in the usual "
"way and then pass it to the :func:`ssl.wrap_socket` function. It's possible "
"to specify whether a certificate is required, and to obtain certificate info "
"by calling the :meth:`getpeercert` method."
msgstr ""

# 140b5f48580d42e08f65f3f6b8cb5c4c
#: whatsnew/2.6.rst:2906
msgid "The documentation for the :mod:`ssl` module."
msgstr ""

# b383d6f6249641a1a1015578fc289642
#: whatsnew/2.6.rst:2911
msgid "Deprecations and Removals"
msgstr ""

# 43463ea4a935467faad2432c6c7f65c8
# 4f197053b9bc47e8befc1dbbb12418fa
#: whatsnew/2.6.rst:2913 whatsnew/2.6.rst:3241
msgid ""
"String exceptions have been removed.  Attempting to use them raises a :exc:"
"`TypeError`."
msgstr ""

# adef9d5e44e741c59c2866b9efef42d7
#: whatsnew/2.6.rst:2916
msgid ""
"Changes to the :class:`Exception` interface as dictated by :pep:`352` "
"continue to be made.  For 2.6, the :attr:`message` attribute is being "
"deprecated in favor of the :attr:`args` attribute."
msgstr ""

# fa1704069a714ba3ac6a26853032c6a1
#: whatsnew/2.6.rst:2921
msgid ""
"(3.0-warning mode) Python 3.0 will feature a reorganized standard library "
"that will drop many outdated modules and rename others. Python 2.6 running "
"in 3.0-warning mode will warn about these modules when they are imported."
msgstr ""

# 524dbf356b824538962bb806866fdee7
#: whatsnew/2.6.rst:2926
msgid ""
"The list of deprecated modules is: :mod:`audiodev`, :mod:`bgenlocations`, :"
"mod:`buildtools`, :mod:`bundlebuilder`, :mod:`Canvas`, :mod:`compiler`, :mod:"
"`dircache`, :mod:`dl`, :mod:`fpformat`, :mod:`gensuitemodule`, :mod:"
"`ihooks`, :mod:`imageop`, :mod:`imgfile`, :mod:`linuxaudiodev`, :mod:"
"`mhlib`, :mod:`mimetools`, :mod:`multifile`, :mod:`new`, :mod:`pure`, :mod:"
"`statvfs`, :mod:`sunaudiodev`, :mod:`test.testall`, and :mod:`toaiff`."
msgstr ""

# 000cd4758eb142148f9d4172fe27114c
#: whatsnew/2.6.rst:2951
msgid "The :mod:`gopherlib` module has been removed."
msgstr ""

# 3015fe1171944d22a2b2876df557bfcd
#: whatsnew/2.6.rst:2953
msgid ""
"The :mod:`MimeWriter` module and :mod:`mimify` module have been deprecated; "
"use the :mod:`email` package instead."
msgstr ""

# 5b00cb1506e4490c8b750e123185c930
#: whatsnew/2.6.rst:2957
msgid ""
"The :mod:`md5` module has been deprecated; use the :mod:`hashlib` module "
"instead."
msgstr ""

# 41ec0ea6420c4bfba157e461c4e8a7ea
#: whatsnew/2.6.rst:2960
msgid ""
"The :mod:`posixfile` module has been deprecated; :func:`fcntl.lockf` "
"provides better locking."
msgstr ""

# ca8a7dc45f064e328f2488e921e2f5b8
#: whatsnew/2.6.rst:2963
msgid ""
"The :mod:`popen2` module has been deprecated; use the :mod:`subprocess` "
"module."
msgstr ""

# 27bef00227af47a0af95e5a3eb0e9373
#: whatsnew/2.6.rst:2966
msgid "The :mod:`rgbimg` module has been removed."
msgstr ""

# 1f34d166f0894e698e682b3fb2dea870
#: whatsnew/2.6.rst:2968
msgid ""
"The :mod:`sets` module has been deprecated; it's better to use the built-in :"
"class:`set` and :class:`frozenset` types."
msgstr ""

# 4c3d5f103e784175985ee2f4924df202
#: whatsnew/2.6.rst:2971
msgid ""
"The :mod:`sha` module has been deprecated; use the :mod:`hashlib` module "
"instead."
msgstr ""

# 5054ad5813d5406090948fae5e47040e
#: whatsnew/2.6.rst:2983
msgid ""
"Python now must be compiled with C89 compilers (after 19 years!).  This "
"means that the Python source tree has dropped its own implementations of :c:"
"func:`memmove` and :c:func:`strerror`, which are in the C89 standard library."
msgstr ""

# 24558ad5091a4fc3bbb364d2f9e8643c
#: whatsnew/2.6.rst:2988
msgid ""
"Python 2.6 can be built with Microsoft Visual Studio 2008 (version 9.0), and "
"this is the new default compiler.  See the :file:`PCbuild` directory for the "
"build files.  (Implemented by Christian Heimes.)"
msgstr ""

# e50419c22e154789a56572bf40678482
#: whatsnew/2.6.rst:2993
msgid ""
"On Mac OS X, Python 2.6 can be compiled as a 4-way universal build. The :"
"program:`configure` script can take a :option:`--with-universal-archs=[32-"
"bit|64-bit|all]` switch, controlling whether the binaries are built for 32-"
"bit architectures (x86, PowerPC), 64-bit (x86-64 and PPC-64), or both. "
"(Contributed by Ronald Oussoren.)"
msgstr ""

# 503eda47d0d942038c6196ea4cf3a161
#: whatsnew/2.6.rst:3000
msgid ""
"The BerkeleyDB module now has a C API object, available as ``bsddb.db."
"api``.   This object can be used by other C extensions that wish to use the :"
"mod:`bsddb` module for their own purposes. (Contributed by Duncan Grisby.)"
msgstr ""

# e1e18777730f41f8bef2606058750e13
#: whatsnew/2.6.rst:3005
msgid ""
"The new buffer interface, previously described in `the PEP 3118 section "
"<#pep-3118-revised-buffer-protocol>`__, adds :c:func:`PyObject_GetBuffer` "
"and :c:func:`PyBuffer_Release`, as well as a few other functions."
msgstr ""

# d152930a7ede4c238b9866dbc2d40086
#: whatsnew/2.6.rst:3010
msgid ""
"Python's use of the C stdio library is now thread-safe, or at least as "
"thread-safe as the underlying library is.  A long-standing potential bug "
"occurred if one thread closed a file object while another thread was reading "
"from or writing to the object.  In 2.6 file objects have a reference count, "
"manipulated by the :c:func:`PyFile_IncUseCount` and :c:func:"
"`PyFile_DecUseCount` functions.  File objects can't be closed unless the "
"reference count is zero.  :c:func:`PyFile_IncUseCount` should be called "
"while the GIL is still held, before carrying out an I/O operation using the "
"``FILE *`` pointer, and :c:func:`PyFile_DecUseCount` should be called "
"immediately after the GIL is re-acquired. (Contributed by Antoine Pitrou and "
"Gregory P. Smith.)"
msgstr ""

# 87e1ecb9c02b480aa090c572a87d069e
#: whatsnew/2.6.rst:3023
msgid ""
"Importing modules simultaneously in two different threads no longer "
"deadlocks; it will now raise an :exc:`ImportError`.  A new API function, :c:"
"func:`PyImport_ImportModuleNoBlock`, will look for a module in ``sys."
"modules`` first, then try to import it after acquiring an import lock.  If "
"the import lock is held by another thread, an :exc:`ImportError` is raised. "
"(Contributed by Christian Heimes.)"
msgstr ""

# 7ca8378590e7490580f8acbc6569d657
#: whatsnew/2.6.rst:3031
msgid ""
"Several functions return information about the platform's floating-point "
"support.  :c:func:`PyFloat_GetMax` returns the maximum representable "
"floating point value, and :c:func:`PyFloat_GetMin` returns the minimum "
"positive value.  :c:func:`PyFloat_GetInfo` returns an object containing more "
"information from the :file:`float.h` file, such as ``\"mant_dig\"`` (number "
"of digits in the mantissa), ``\"epsilon\"`` (smallest difference between 1.0 "
"and the next largest value representable), and several others. (Contributed "
"by Christian Heimes; :issue:`1534`.)"
msgstr ""

# 819a80e2fe1a465bad60dc0ddf938f60
#: whatsnew/2.6.rst:3042
msgid ""
"C functions and methods that use :c:func:`PyComplex_AsCComplex` will now "
"accept arguments that have a :meth:`__complex__` method.  In particular, the "
"functions in the :mod:`cmath` module will now accept objects with this "
"method. This is a backport of a Python 3.0 change. (Contributed by Mark "
"Dickinson; :issue:`1675423`.)"
msgstr ""

# 46b454fe1e2348d8a9485ddece8afda0
#: whatsnew/2.6.rst:3049
msgid ""
"Python's C API now includes two functions for case-insensitive string "
"comparisons, ``PyOS_stricmp(char*, char*)`` and ``PyOS_strnicmp(char*, "
"char*, Py_ssize_t)``. (Contributed by Christian Heimes; :issue:`1635`.)"
msgstr ""

# 24ec88006cbc4bb997668e066f84de35
#: whatsnew/2.6.rst:3054
msgid ""
"Many C extensions define their own little macro for adding integers and "
"strings to the module's dictionary in the ``init*`` function.  Python 2.6 "
"finally defines standard macros for adding values to a module, :c:macro:"
"`PyModule_AddStringMacro` and :c:macro:`PyModule_AddIntMacro()`.  "
"(Contributed by Christian Heimes.)"
msgstr ""

# 043ea2d0f27c430ab6fd8dd6956d25a1
#: whatsnew/2.6.rst:3061
msgid ""
"Some macros were renamed in both 3.0 and 2.6 to make it clearer that they "
"are macros, not functions.  :c:macro:`Py_Size()` became :c:macro:"
"`Py_SIZE()`, :c:macro:`Py_Type()` became :c:macro:`Py_TYPE()`, and :c:macro:"
"`Py_Refcnt()` became :c:macro:`Py_REFCNT()`. The mixed-case macros are still "
"available in Python 2.6 for backward compatibility. (:issue:`1629`)"
msgstr ""

# 2736f7514673494791758f4b320b54dd
#: whatsnew/2.6.rst:3070
msgid ""
"Distutils now places C extensions it builds in a different directory when "
"running on a debug version of Python. (Contributed by Collin Winter; :issue:"
"`1530959`.)"
msgstr ""

# 7d5595831ad44df19a63aaf6c795eb96
#: whatsnew/2.6.rst:3074
msgid ""
"Several basic data types, such as integers and strings, maintain internal "
"free lists of objects that can be re-used.  The data structures for these "
"free lists now follow a naming convention: the variable is always named "
"``free_list``, the counter is always named ``numfree``, and a macro "
"``Py<typename>_MAXFREELIST`` is always defined."
msgstr ""

# 80c4616fccf04af381e5ece0682dc327
#: whatsnew/2.6.rst:3081
msgid ""
"A new Makefile target, \"make patchcheck\", prepares the Python source tree "
"for making a patch: it fixes trailing whitespace in all modified ``.py`` "
"files, checks whether the documentation has been changed, and reports "
"whether the :file:`Misc/ACKS` and :file:`Misc/NEWS` files have been updated. "
"(Contributed by Brett Cannon.)"
msgstr ""

# 33166a7ffa8f4a7598afa2faddb5cca7
#: whatsnew/2.6.rst:3088
msgid ""
"Another new target, \"make profile-opt\", compiles a Python binary using "
"GCC's profile-guided optimization.  It compiles Python with profiling "
"enabled, runs the test suite to obtain a set of profiling results, and then "
"compiles using these results for optimization. (Contributed by Gregory P. "
"Smith.)"
msgstr ""

# 5a7a942a3a704084bfb7458a13ab85f5
# ce724f8091fd4d91ae2923f76f56e2ef
#: whatsnew/2.6.rst:3097 whatsnew/2.7.rst:2259
msgid "Port-Specific Changes: Windows"
msgstr ""

# 122f1d69c8104368a3552e19f4ed06d0
#: whatsnew/2.6.rst:3099
msgid ""
"The support for Windows 95, 98, ME and NT4 has been dropped. Python 2.6 "
"requires at least Windows 2000 SP4."
msgstr ""

# f109c7b82a504c3184875e63104a067b
#: whatsnew/2.6.rst:3102
msgid ""
"The new default compiler on Windows is Visual Studio 2008 (version 9.0). The "
"build directories for Visual Studio 2003 (version 7.1) and 2005 (version "
"8.0) were moved into the PC/ directory. The new :file:`PCbuild` directory "
"supports cross compilation for X64, debug builds and Profile Guided "
"Optimization (PGO). PGO builds are roughly 10% faster than normal builds.  "
"(Contributed by Christian Heimes with help from Amaury Forgeot d'Arc and "
"Martin von Löwis.)"
msgstr ""

# d1640f50e3ba4a789e10e1654cb3acbd
#: whatsnew/2.6.rst:3110
msgid ""
"The :mod:`msvcrt` module now supports both the normal and wide char variants "
"of the console I/O API.  The :func:`getwch` function reads a keypress and "
"returns a Unicode value, as does the :func:`getwche` function.  The :func:"
"`putwch` function takes a Unicode character and writes it to the console. "
"(Contributed by Christian Heimes.)"
msgstr ""

# b139c76620924b14a1335768c650a1bb
#: whatsnew/2.6.rst:3117
msgid ""
":func:`os.path.expandvars` will now expand environment variables in the form "
"\"%var%\", and \"~user\" will be expanded into the user's home directory "
"path.  (Contributed by Josiah Carlson; :issue:`957650`.)"
msgstr ""

# 2553f7635ce4452bb88d8e7258fa675e
#: whatsnew/2.6.rst:3121
msgid ""
"The :mod:`socket` module's socket objects now have an :meth:`ioctl` method "
"that provides a limited interface to the :c:func:`WSAIoctl` system interface."
msgstr ""

# ee41687ce1544951b806b622616e8b07
#: whatsnew/2.6.rst:3125
msgid ""
"The :mod:`_winreg` module now has a function, :func:"
"`ExpandEnvironmentStrings`, that expands environment variable references "
"such as ``%NAME%`` in an input string.  The handle objects provided by this "
"module now support the context protocol, so they can be used in :keyword:"
"`with` statements. (Contributed by Christian Heimes.)"
msgstr ""

# 7039921fec204149a5ba58cf57ae8129
#: whatsnew/2.6.rst:3132
msgid ""
":mod:`_winreg` also has better support for x64 systems, exposing the :func:"
"`DisableReflectionKey`, :func:`EnableReflectionKey`, and :func:"
"`QueryReflectionKey` functions, which enable and disable registry reflection "
"for 32-bit processes running on 64-bit systems. (:issue:`1753245`)"
msgstr ""

# a8cc916bcfbc488195be26bb5c36d315
#: whatsnew/2.6.rst:3138
msgid ""
"The :mod:`msilib` module's :class:`Record` object gained :meth:`GetInteger` "
"and :meth:`GetString` methods that return field values as an integer or a "
"string. (Contributed by Floris Bruynooghe; :issue:`2125`.)"
msgstr ""

# 02ba7cd921bb4456a9c5de740e0c72ae
# 05f07afb64174168a7ca5d41bc7d0e7f
#: whatsnew/2.6.rst:3146 whatsnew/2.7.rst:2297
msgid "Port-Specific Changes: Mac OS X"
msgstr ""

# 62f0d57f538646479e934e128a96f336
#: whatsnew/2.6.rst:3148
msgid ""
"When compiling a framework build of Python, you can now specify the "
"framework name to be used by providing the :option:`--with-framework-name=` "
"option to the :program:`configure` script."
msgstr ""

# 8a6d8651da0140ac8a15ce8c52810f75
#: whatsnew/2.6.rst:3153
msgid ""
"The :mod:`macfs` module has been removed.  This in turn required the :func:"
"`macostools.touched` function to be removed because it depended on the :mod:"
"`macfs` module.  (:issue:`1490190`)"
msgstr ""

# b1ec77bc5ffe482f93371c27b70f62fd
#: whatsnew/2.6.rst:3157
msgid ""
"Many other Mac OS modules have been deprecated and will removed in Python "
"3.0: :mod:`_builtinSuites`, :mod:`aepack`, :mod:`aetools`, :mod:`aetypes`, :"
"mod:`applesingle`, :mod:`appletrawmain`, :mod:`appletrunner`, :mod:"
"`argvemulator`, :mod:`Audio_mac`, :mod:`autoGIL`, :mod:`Carbon`, :mod:"
"`cfmfile`, :mod:`CodeWarrior`, :mod:`ColorPicker`, :mod:`EasyDialogs`, :mod:"
"`Explorer`, :mod:`Finder`, :mod:`FrameWork`, :mod:`findertools`, :mod:`ic`, :"
"mod:`icglue`, :mod:`icopen`, :mod:`macerrors`, :mod:`MacOS`, :mod:`macfs`, :"
"mod:`macostools`, :mod:`macresource`, :mod:`MiniAEFrame`, :mod:`Nav`, :mod:"
"`Netscape`, :mod:`OSATerminology`, :mod:`pimp`, :mod:`PixMapWrapper`, :mod:"
"`StdSuites`, :mod:`SystemEvents`, :mod:`Terminal`, and :mod:"
"`terminalcommand`."
msgstr ""

# 0dbcbb36b5754699927decc18756cb6a
#: whatsnew/2.6.rst:3200
msgid "Port-Specific Changes: IRIX"
msgstr ""

# 565e5159b9c641ecaaf496bc4926cc60
#: whatsnew/2.6.rst:3202
msgid ""
"A number of old IRIX-specific modules were deprecated and will be removed in "
"Python 3.0: :mod:`al` and :mod:`AL`, :mod:`cd`, :mod:`cddb`, :mod:"
"`cdplayer`, :mod:`CL` and :mod:`cl`, :mod:`DEVICE`, :mod:`ERRNO`, :mod:"
"`FILE`, :mod:`FL` and :mod:`fl`, :mod:`flp`, :mod:`fm`, :mod:`GET`, :mod:"
"`GLWS`, :mod:`GL` and :mod:`gl`, :mod:`IN`, :mod:`IOCTL`, :mod:`jpeg`, :mod:"
"`panelparser`, :mod:`readcd`, :mod:`SV` and :mod:`sv`, :mod:`torgb`, :mod:"
"`videoreader`, and :mod:`WAIT`."
msgstr ""

# 7fe42011c112418ab258e9fa5f2eafa4
#: whatsnew/2.6.rst:3232
#, fuzzy
msgid "Porting to Python 2.6"
msgstr "Portage vers Python 3.2"

# 2479a693e56a42339367a7bceda53ebe
# 9a942cf59c9f4b4fa237fc5695530286
# fed6ba3766ad4db9a9adaf03875b6606
# b85ad56a190146a7b3e24a9171429ea3
#: whatsnew/2.6.rst:3234 whatsnew/2.7.rst:2359 whatsnew/3.1.rst:523
#: whatsnew/3.2.rst:2568
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code:"
msgstr ""

# 00d48d585540427895671b54e41b3228
#: whatsnew/2.6.rst:3237
msgid ""
"Classes that aren't supposed to be hashable should set ``__hash__ = None`` "
"in their definitions to indicate the fact."
msgstr ""

# 4123ab1c464d4d53a60486aeb791e2a3
#: whatsnew/2.6.rst:3244
msgid ""
"The :meth:`__init__` method of :class:`collections.deque` now clears any "
"existing contents of the deque before adding elements from the iterable.  "
"This change makes the behavior match ``list.__init__()``."
msgstr ""

# 8628269fd7ba4d71b60ce50df0c360bc
#: whatsnew/2.6.rst:3249
msgid ""
":meth:`object.__init__` previously accepted arbitrary arguments and keyword "
"arguments, ignoring them.  In Python 2.6, this is no longer allowed and will "
"result in a :exc:`TypeError`.  This will affect :meth:`__init__` methods "
"that end up calling the corresponding method on :class:`object` (perhaps "
"through using :func:`super`). See :issue:`1683368` for discussion."
msgstr ""

# 5c1949e0f8b144d2acddd7b53ff3d08d
#: whatsnew/2.6.rst:3256
msgid ""
"The :class:`Decimal` constructor now accepts leading and trailing whitespace "
"when passed a string.  Previously it would raise an :exc:`InvalidOperation` "
"exception.  On the other hand, the :meth:`create_decimal` method of :class:"
"`Context` objects now explicitly disallows extra whitespace, raising a :exc:"
"`ConversionSyntax` exception."
msgstr ""

# f1b26c4f95d440d387b3661e2e39257c
#: whatsnew/2.6.rst:3263
msgid ""
"Due to an implementation accident, if you passed a file path to the built-"
"in  :func:`__import__` function, it would actually import the specified "
"file.  This was never intended to work, however, and the implementation now "
"explicitly checks for this case and raises an :exc:`ImportError`."
msgstr ""

# b8bb80c5b0ea45e2aad8ff535e4432ce
#: whatsnew/2.6.rst:3269
msgid ""
"C API: the :c:func:`PyImport_Import` and :c:func:`PyImport_ImportModule` "
"functions now default to absolute imports, not relative imports. This will "
"affect C extensions that import other modules."
msgstr ""

# ac5fa8133def40c985c737de92f6cdfb
#: whatsnew/2.6.rst:3273
msgid ""
"C API: extension data types that shouldn't be hashable should define their "
"``tp_hash`` slot to :c:func:`PyObject_HashNotImplemented`."
msgstr ""

# 81f63c3982534fe9839a2d72a2c5be46
#: whatsnew/2.6.rst:3277
msgid ""
"The :mod:`socket` module exception :exc:`socket.error` now inherits from :"
"exc:`IOError`.  Previously it wasn't a subclass of :exc:`StandardError` but "
"now it is, through :exc:`IOError`. (Implemented by Gregory P. Smith; :issue:"
"`1706815`.)"
msgstr ""

# da44c2e7833145309b0dc49e49f6fe1a
#: whatsnew/2.6.rst:3282
msgid ""
"The :mod:`xmlrpclib` module no longer automatically converts :class:"
"`datetime.date` and :class:`datetime.time` to the :class:`xmlrpclib."
"DateTime` type; the conversion semantics were not necessarily correct for "
"all applications.  Code using :mod:`xmlrpclib` should convert :class:`date` "
"and :class:`time` instances. (:issue:`1330538`)"
msgstr ""

# 3d6e452d11204372b42abaee2f54ed07
#: whatsnew/2.6.rst:3289
msgid ""
"(3.0-warning mode) The :class:`Exception` class now warns when accessed "
"using slicing or index access; having :class:`Exception` behave like a tuple "
"is being phased out."
msgstr ""

# 6d69e250c27b4ab0b13998c998ed92f6
#: whatsnew/2.6.rst:3293
msgid ""
"(3.0-warning mode) inequality comparisons between two dictionaries or two "
"objects that don't implement comparison methods are reported as warnings.  "
"``dict1 == dict2`` still works, but ``dict1 < dict2`` is being phased out."
msgstr ""

# 8803494c32844905bf162e66cab04e48
#: whatsnew/2.6.rst:3298
msgid ""
"Comparisons between cells, which are an implementation detail of Python's "
"scoping rules, also cause warnings because such comparisons are forbidden "
"entirely in 3.0."
msgstr ""

# 7767b8a789f946b5ad1da9b84a9c2743
#: whatsnew/2.6.rst:3310
msgid ""
"The author would like to thank the following people for offering "
"suggestions, corrections and assistance with various drafts of this article: "
"Georg Brandl, Steve Brown, Nick Coghlan, Ralph Corderoy, Jim Jewett, Kent "
"Johnson, Chris Lambacher,  Martin Michlmayr, Antoine Pitrou, Brian Warner."
msgstr ""

# 8f36cf23ade14658ba84f83a9e90a44e
#: whatsnew/2.7.rst:3
#, fuzzy
msgid "What's New in Python 2.7"
msgstr "Nouveautés de Python 2.0"

# 4a7bc782c983400c8e02bdae8d4d178e
#: whatsnew/2.7.rst:53
msgid ""
"This article explains the new features in Python 2.7.  The final release of "
"2.7 is currently scheduled for July 2010; the detailed schedule is described "
"in :pep:`373`."
msgstr ""

# 8d4209a13a2b44f2a2d6452dd86f0446
#: whatsnew/2.7.rst:57
msgid ""
"Numeric handling has been improved in many ways, for both floating-point "
"numbers and for the :class:`Decimal` class.  There are some useful additions "
"to the standard library, such as a greatly enhanced :mod:`unittest` module, "
"the :mod:`argparse` module for parsing command-line options, convenient "
"ordered-dictionary and :class:`Counter` classes in the :mod:`collections` "
"module, and many other improvements."
msgstr ""

# 87c503c21e0c4752b1ba15f22db1a09c
#: whatsnew/2.7.rst:65
msgid ""
"Python 2.7 is planned to be the last of the 2.x releases, so we worked on "
"making it a good release for the long term.  To help with porting to Python "
"3, several new features from the Python 3.x series have been included in 2.7."
msgstr ""

# 06d1176938a847d2ad1ec192ac0b078d
#: whatsnew/2.7.rst:70
msgid ""
"This article doesn't attempt to provide a complete specification of the new "
"features, but instead provides a convenient overview.  For full details, you "
"should refer to the documentation for Python 2.7 at http://docs.python.org. "
"If you want to understand the rationale for the design and implementation, "
"refer to the PEP for a particular new feature or the issue on http://bugs."
"python.org in which a change was discussed.  Whenever possible, \"What's New "
"in Python\" links to the bug/patch item for each change."
msgstr ""

# 7018863123664cef926f6286f0f026ba
#: whatsnew/2.7.rst:82
msgid "The Future for Python 2.x"
msgstr ""

# 8ae8b28b9656450a833674d1e64acab2
#: whatsnew/2.7.rst:84
msgid ""
"Python 2.7 is intended to be the last major release in the 2.x series. The "
"Python maintainers are planning to focus their future efforts on the Python "
"3.x series."
msgstr ""

# 504655c21c1f49c58be0cb67bb2f10a6
#: whatsnew/2.7.rst:88
msgid ""
"This means that 2.7 will remain in place for a long time, running production "
"systems that have not been ported to Python 3.x. Two consequences of the "
"long-term significance of 2.7 are:"
msgstr ""

# 5327fa06a4ef4447a744bab545d22dde
#: whatsnew/2.7.rst:92
msgid ""
"It's very likely the 2.7 release will have a longer period of maintenance "
"compared to earlier 2.x versions.  Python 2.7 will continue to be maintained "
"while the transition to 3.x continues, and the developers are planning to "
"support Python 2.7 with bug-fix releases beyond the typical two years."
msgstr ""

# 5097160b92eb422bb6a00f606a0eeaf1
#: whatsnew/2.7.rst:98
msgid ""
"A policy decision was made to silence warnings only of interest to "
"developers.  :exc:`DeprecationWarning` and its descendants are now ignored "
"unless otherwise requested, preventing users from seeing warnings triggered "
"by an application.  This change was also made in the branch that will become "
"Python 3.2. (Discussed on stdlib-sig and carried out in :issue:`7319`.)"
msgstr ""

# 23485829d7d64bacb9ca682fa84944fa
#: whatsnew/2.7.rst:105
msgid ""
"In previous releases, :exc:`DeprecationWarning` messages were enabled by "
"default, providing Python developers with a clear indication of where their "
"code may break in a future major version of Python."
msgstr ""

# 23f55b5aefa7463f86b1804c2fe1b396
#: whatsnew/2.7.rst:110
msgid ""
"However, there are increasingly many users of Python-based applications who "
"are not directly involved in the development of those applications.  :exc:"
"`DeprecationWarning` messages are irrelevant to such users, making them "
"worry about an application that's actually working correctly and burdening "
"application developers with responding to these concerns."
msgstr ""

# 219108e7d27f47c8b3430719c0778f92
#: whatsnew/2.7.rst:117
msgid ""
"You can re-enable display of :exc:`DeprecationWarning` messages by running "
"Python with the :option:`-Wdefault` (short form: :option:`-Wd`) switch, or "
"by setting the :envvar:`PYTHONWARNINGS` environment variable to ``\"default"
"\"`` (or ``\"d\"``) before running Python.  Python code can also re-enable "
"them by calling ``warnings.simplefilter('default')``."
msgstr ""

# 9dd9994b04184cb6a58a8e644992fe22
#: whatsnew/2.7.rst:126
msgid "Python 3.1 Features"
msgstr ""

# 3f84c8c8a7244fa08d0f28a54208e9ef
#: whatsnew/2.7.rst:128
msgid ""
"Much as Python 2.6 incorporated features from Python 3.0, version 2.7 "
"incorporates some of the new features in Python 3.1.  The 2.x series "
"continues to provide tools for migrating to the 3.x series."
msgstr ""

# b43e5a085871437f9524d4430d88b135
#: whatsnew/2.7.rst:133
msgid "A partial list of 3.1 features that were backported to 2.7:"
msgstr ""

# f517a243a89d4e0e9214239cd71e9054
#: whatsnew/2.7.rst:135
msgid "The syntax for set literals (``{1,2,3}`` is a mutable set)."
msgstr ""

# 172851df2ba44bc9bbce33d4d347ef1a
#: whatsnew/2.7.rst:136
msgid "Dictionary and set comprehensions (``{ i: i*2 for i in range(3)}``)."
msgstr ""

# 3bc8f82618954fe8bf7ff42c942ba404
#: whatsnew/2.7.rst:137
msgid "Multiple context managers in a single :keyword:`with` statement."
msgstr ""

# 928f0cb66f564486badfe56d50385e56
#: whatsnew/2.7.rst:138
msgid "A new version of the :mod:`io` library, rewritten in C for performance."
msgstr ""

# 3c235574c63e44728e105ccdd8ce9133
#: whatsnew/2.7.rst:139
msgid "The ordered-dictionary type described in :ref:`pep-0372`."
msgstr ""

# 5a8a3e4fe8dd41dfb82884821d8eed74
#: whatsnew/2.7.rst:140
msgid "The new ``\",\"`` format specifier described in :ref:`pep-0378`."
msgstr ""

# 35a4a250df8a4a289a6ebe45738cbcbe
#: whatsnew/2.7.rst:141
msgid "The :class:`memoryview` object."
msgstr ""

# 7edd1d2b5b6242fca5fd885c30da4c65
#: whatsnew/2.7.rst:142
msgid ""
"A small subset of the :mod:`importlib` module, `described below <#importlib-"
"section>`__."
msgstr ""

# 1c1748e7a5694381b690ec0175c0f08b
#: whatsnew/2.7.rst:144
msgid ""
"The :func:`repr` of a float ``x`` is shorter in many cases: it's now based "
"on the shortest decimal string that's guaranteed to round back to ``x``.  As "
"in previous versions of Python, it's guaranteed that ``float(repr(x))`` "
"recovers ``x``."
msgstr ""

# 72c4d6d3e1354d8c8735b210f96a1556
#: whatsnew/2.7.rst:148
msgid ""
"Float-to-string and string-to-float conversions are correctly rounded. The :"
"func:`round` function is also now correctly rounded."
msgstr ""

# 994e8758cf89456fa9d90783604360c3
#: whatsnew/2.7.rst:150
msgid ""
"The :c:type:`PyCapsule` type, used to provide a C API for extension modules."
msgstr ""

# 3886838c2274448a9c9cd56abdf6d233
#: whatsnew/2.7.rst:151
msgid "The :c:func:`PyLong_AsLongAndOverflow` C API function."
msgstr ""

# 04505a23b2bf4924aa6bb62b97036c36
#: whatsnew/2.7.rst:153
msgid "Other new Python3-mode warnings include:"
msgstr ""

# 54ec361b936f42d9b582c9c817745173
#: whatsnew/2.7.rst:155
msgid ""
":func:`operator.isCallable` and :func:`operator.sequenceIncludes`, which are "
"not supported in 3.x, now trigger warnings."
msgstr ""

# 4c3a5085dfab4966b486431e232ff424
#: whatsnew/2.7.rst:157
msgid ""
"The :option:`-3` switch now automatically enables the :option:`-Qwarn` "
"switch that causes warnings about using classic division with integers and "
"long integers."
msgstr ""

# 818918e350b24bc09b3ebcc249f8c037
#: whatsnew/2.7.rst:170
msgid "PEP 372: Adding an Ordered Dictionary to collections"
msgstr ""

# 931806affceb453d9552d930e045881b
#: whatsnew/2.7.rst:172
msgid ""
"Regular Python dictionaries iterate over key/value pairs in arbitrary order. "
"Over the years, a number of authors have written alternative implementations "
"that remember the order that the keys were originally inserted.  Based on "
"the experiences from those implementations, 2.7 introduces a new :class:"
"`~collections.OrderedDict` class in the :mod:`collections` module."
msgstr ""

# 22e83a80f8864b24a8a742a29b58a4fd
#: whatsnew/2.7.rst:178
msgid ""
"The :class:`~collections.OrderedDict` API provides the same interface as "
"regular dictionaries but iterates over keys and values in a guaranteed order "
"depending on when a key was first inserted::"
msgstr ""

# a08037ec1e6f454fba0f6ea18b87d1b4
#: whatsnew/2.7.rst:189
msgid ""
"If a new entry overwrites an existing entry, the original insertion position "
"is left unchanged::"
msgstr ""

# 077a17999f6740c8a374fbeea87643a4
#: whatsnew/2.7.rst:196
msgid "Deleting an entry and reinserting it will move it to the end::"
msgstr ""

# c8654daf4bb4464fb33690bad3566cd0
#: whatsnew/2.7.rst:203
msgid ""
"The :meth:`~collections.OrderedDict.popitem` method has an optional *last* "
"argument that defaults to True.  If *last* is True, the most recently added "
"key is returned and removed; if it's False, the oldest key is selected::"
msgstr ""

# c1f4815297aa4eb69b7cecea32d747e9
#: whatsnew/2.7.rst:218
msgid ""
"Comparing two ordered dictionaries checks both the keys and values, and "
"requires that the insertion order was the same::"
msgstr ""

# 1b535580925342e182b437d61fc4c681
#: whatsnew/2.7.rst:234
msgid ""
"Comparing an :class:`~collections.OrderedDict` with a regular dictionary "
"ignores the insertion order and just compares the keys and values."
msgstr ""

# 89c8a2651e0b45bc89c37dab2d57077e
#: whatsnew/2.7.rst:237
msgid ""
"How does the :class:`~collections.OrderedDict` work?  It maintains a doubly-"
"linked list of keys, appending new keys to the list as they're inserted. A "
"secondary dictionary maps keys to their corresponding list node, so deletion "
"doesn't have to traverse the entire linked list and therefore remains O(1)."
msgstr ""

# 6df0706d288d4555b6b40a9131ff6ba5
#: whatsnew/2.7.rst:243
msgid ""
"The standard library now supports use of ordered dictionaries in several "
"modules."
msgstr ""

# 8fca66c2064a41c291298c9c1ca44d1b
#: whatsnew/2.7.rst:246
msgid ""
"The :mod:`ConfigParser` module uses them by default, meaning that "
"configuration files can now be read, modified, and then written back in "
"their original order."
msgstr ""

# d00214ebc2ba42d29b79585f1b631cb4
#: whatsnew/2.7.rst:250
msgid ""
"The :meth:`~collections.somenamedtuple._asdict()` method for :func:"
"`collections.namedtuple` now returns an ordered dictionary with the values "
"appearing in the same order as the underlying tuple indices."
msgstr ""

# 99393f997d8844d5a4bb05d443dabe08
#: whatsnew/2.7.rst:254
msgid ""
"The :mod:`json` module's :class:`~json.JSONDecoder` class constructor was "
"extended with an *object_pairs_hook* parameter to allow :class:`OrderedDict` "
"instances to be built by the decoder. Support was also added for third-party "
"tools like `PyYAML <http://pyyaml.org/>`_."
msgstr ""

#: whatsnew/2.7.rst:263
msgid "PEP 372 - Adding an ordered dictionary to collections"
msgstr ""

# 6573a0967cff4df6a4511d2dc21f9b20
#: whatsnew/2.7.rst:263
msgid ""
"PEP written by Armin Ronacher and Raymond Hettinger; implemented by Raymond "
"Hettinger."
msgstr ""

# a53abede3b1645dca93cc7c94fb87397
# 060c4f10176e4feb8d0fbb7f3c236cc0
#: whatsnew/2.7.rst:269 whatsnew/3.1.rst:84
msgid "PEP 378: Format Specifier for Thousands Separator"
msgstr ""

# 34297d0b68844e29b9c2a88291345c85
#: whatsnew/2.7.rst:271
msgid ""
"To make program output more readable, it can be useful to add separators to "
"large numbers, rendering them as 18,446,744,073,709,551,616 instead of "
"18446744073709551616."
msgstr ""

# 37e1e1c85d5348309c32bea9dc104441
#: whatsnew/2.7.rst:275
msgid ""
"The fully general solution for doing this is the :mod:`locale` module, which "
"can use different separators (\",\" in North America, \".\" in Europe) and "
"different grouping sizes, but :mod:`locale` is complicated to use and "
"unsuitable for multi-threaded applications where different threads are "
"producing output for different locales."
msgstr ""

# 04b5f9ebeeb34da1bd33cad8664ff9df
#: whatsnew/2.7.rst:281
msgid ""
"Therefore, a simple comma-grouping mechanism has been added to the mini-"
"language used by the :meth:`str.format` method.  When formatting a floating-"
"point number, simply include a comma between the width and the precision::"
msgstr ""

# 4ccb423335904f39869a38d81adc2d9a
#: whatsnew/2.7.rst:289
msgid "When formatting an integer, include the comma after the width:"
msgstr ""

# 635d958cfdee4b9cae80805a443a532e
#: whatsnew/2.7.rst:294
msgid ""
"This mechanism is not adaptable at all; commas are always used as the "
"separator and the grouping is always into three-digit groups.  The comma-"
"formatting mechanism isn't as general as the :mod:`locale` module, but it's "
"easier to use."
msgstr ""

#: whatsnew/2.7.rst:301 whatsnew/3.1.rst:111
msgid "PEP 378 - Format Specifier for Thousands Separator"
msgstr ""

# 6f681720a225434daeafc05678a34b44
#: whatsnew/2.7.rst:302
msgid "PEP written by Raymond Hettinger; implemented by Eric Smith."
msgstr ""

# da948f42152d4afcad808d99f77994e5
#: whatsnew/2.7.rst:305
msgid "PEP 389: The argparse Module for Parsing Command Lines"
msgstr ""

# 097b76c2685e4250a25202683bb4d6d4
#: whatsnew/2.7.rst:307
msgid ""
"The :mod:`argparse` module for parsing command-line arguments was added as a "
"more powerful replacement for the :mod:`optparse` module."
msgstr ""

# 22cacc9db4d54146a8995eb2982d5d1a
#: whatsnew/2.7.rst:311
msgid ""
"This means Python now supports three different modules for parsing command-"
"line arguments: :mod:`getopt`, :mod:`optparse`, and :mod:`argparse`.  The :"
"mod:`getopt` module closely resembles the C library's :c:func:`getopt` "
"function, so it remains useful if you're writing a Python prototype that "
"will eventually be rewritten in C. :mod:`optparse` becomes redundant, but "
"there are no plans to remove it because there are many scripts still using "
"it, and there's no automated way to update these scripts.  (Making the :mod:"
"`argparse` API consistent with :mod:`optparse`'s interface was discussed but "
"rejected as too messy and difficult.)"
msgstr ""

# e39cf767285241ddb7caca80276992c1
#: whatsnew/2.7.rst:322
msgid ""
"In short, if you're writing a new script and don't need to worry about "
"compatibility with earlier versions of Python, use :mod:`argparse` instead "
"of :mod:`optparse`."
msgstr ""

# 6b96fe7a844144cf85933e9d8b863add
#: whatsnew/2.7.rst:326
msgid "Here's an example::"
msgstr ""

# e582fd2f571e436f8cbdfd867c1db5b4
#: whatsnew/2.7.rst:349
msgid ""
"Unless you override it, :option:`-h` and :option:`--help` switches are "
"automatically added, and produce neatly formatted output::"
msgstr ""

# 309f9a17809442aeb6e829d402656882
#: whatsnew/2.7.rst:366
msgid ""
"As with :mod:`optparse`, the command-line switches and arguments are "
"returned as an object with attributes named by the *dest* parameters::"
msgstr ""

# 1ad0c6d4fc6a4212a92f79476a6b215e
#: whatsnew/2.7.rst:381
msgid ""
":mod:`argparse` has much fancier validation than :mod:`optparse`; you can "
"specify an exact number of arguments as an integer, 0 or more arguments by "
"passing ``'*'``, 1 or more by passing ``'+'``, or an optional argument with "
"``'?'``.  A top-level parser can contain sub-parsers to define subcommands "
"that have different sets of switches, as in ``svn commit``, ``svn "
"checkout``, etc.  You can specify an argument's type as :class:`~argparse."
"FileType`, which will automatically open files for you and understands that "
"``'-'`` means standard input or output."
msgstr ""

# a4f0e2ab15434f6f992b7889cd138e49
#: whatsnew/2.7.rst:393
msgid ""
"`argparse module documentation <http://docs.python.org/dev/library/argparse."
"html>`__"
msgstr ""

#: whatsnew/2.7.rst:397
msgid "Upgrading optparse code to use argparse"
msgstr ""

# d9b92e5d962144799ca627aee4298d2b
#: whatsnew/2.7.rst:396
msgid ""
"Part of the Python documentation, describing how to convert code that uses :"
"mod:`optparse`."
msgstr ""

#: whatsnew/2.7.rst:399
msgid "PEP 389 - argparse - New Command Line Parsing Module"
msgstr ""

# e531dab10b1c4ca1b9d4bf76caee474a
#: whatsnew/2.7.rst:400
msgid "PEP written and implemented by Steven Bethard."
msgstr ""

# 89827ab5c47048249df449e11823954b
#: whatsnew/2.7.rst:403
msgid "PEP 391: Dictionary-Based Configuration For Logging"
msgstr ""

# edadf66e50f847af8b42bae6f2a30da0
#: whatsnew/2.7.rst:407
msgid ""
"The :mod:`logging` module is very flexible; applications can define a tree "
"of logging subsystems, and each logger in this tree can filter out certain "
"messages, format them differently, and direct messages to a varying number "
"of handlers."
msgstr ""

# 37adc1744a9046099689f60ecbabd44a
#: whatsnew/2.7.rst:412
msgid ""
"All this flexibility can require a lot of configuration.  You can write "
"Python statements to create objects and set their properties, but a complex "
"set-up requires verbose but boring code. :mod:`logging` also supports a :"
"func:`~logging.config.fileConfig` function that parses a file, but the file "
"format doesn't support configuring filters, and it's messier to generate "
"programmatically."
msgstr ""

# 76ffa4893d6448f5b732762b00044696
#: whatsnew/2.7.rst:419
msgid ""
"Python 2.7 adds a :func:`~logging.config.dictConfig` function that uses a "
"dictionary to configure logging.  There are many ways to produce a "
"dictionary from different sources: construct one with code; parse a file "
"containing JSON; or use a YAML parsing library if one is installed."
msgstr ""

# 211b75e2e61b4e5a9848e9f8d784d454
#: whatsnew/2.7.rst:425
msgid ""
"The following example configures two loggers, the root logger and a logger "
"named \"network\".   Messages sent to the root logger will be sent to the "
"system log using the syslog protocol, and messages to the \"network\" logger "
"will be written to a :file:`network.log` file that will be rotated once the "
"log reaches 1Mb."
msgstr ""

# 6943a804370047828fbfef4ff9dbe009
#: whatsnew/2.7.rst:475
msgid ""
"Three smaller enhancements to the :mod:`logging` module, all implemented by "
"Vinay Sajip, are:"
msgstr ""

# ef24b334d0ea4a6080ea2e98b32782dd
#: whatsnew/2.7.rst:480
msgid ""
"The :class:`~logging.handlers.SysLogHandler` class now supports syslogging "
"over TCP.  The constructor has a *socktype* parameter giving the type of "
"socket to use, either :const:`socket.SOCK_DGRAM` for UDP or :const:`socket."
"SOCK_STREAM` for TCP.  The default protocol remains UDP."
msgstr ""

# 912121da22ad4fdfb2de7ff05f4d3517
#: whatsnew/2.7.rst:486
msgid ""
":class:`Logger` instances gained a :meth:`getChild` method that retrieves a "
"descendant logger using a relative path.  For example, once you retrieve a "
"logger by doing ``log = getLogger('app')``, calling ``log.getChild('network."
"listen')`` is equivalent to ``getLogger('app.network.listen')``."
msgstr ""

# a9901c57714e496ba867e6f22683b33a
#: whatsnew/2.7.rst:492
msgid ""
"The :class:`LoggerAdapter` class gained a :meth:`isEnabledFor` method that "
"takes a *level* and returns whether the underlying logger would process a "
"message of that level of importance."
msgstr ""

#: whatsnew/2.7.rst:498
msgid "PEP 391 - Dictionary-Based Configuration For Logging"
msgstr ""

# 0fc46be345a14bc3b1a91b7592ba6f2e
#: whatsnew/2.7.rst:499
msgid "PEP written and implemented by Vinay Sajip."
msgstr ""

# 05ba43cac4784f5d9db89cd1ed227914
#: whatsnew/2.7.rst:502
msgid "PEP 3106: Dictionary Views"
msgstr ""

# 4ee35b38c20c4cb5bf70bd7120368828
#: whatsnew/2.7.rst:504
msgid ""
"The dictionary methods :meth:`keys`, :meth:`values`, and :meth:`items` are "
"different in Python 3.x.  They return an object called a :dfn:`view` instead "
"of a fully materialized list."
msgstr ""

# 89f22849bfdb4c098660b437dc2a56a3
#: whatsnew/2.7.rst:508
msgid ""
"It's not possible to change the return values of :meth:`keys`, :meth:"
"`values`, and :meth:`items` in Python 2.7 because too much code would "
"break.  Instead the 3.x versions were added under the new names :meth:"
"`viewkeys`, :meth:`viewvalues`, and :meth:`viewitems`."
msgstr ""

# 640d43ca678c4830be7bae40d57ad97c
#: whatsnew/2.7.rst:521
msgid ""
"Views can be iterated over, but the key and item views also behave like "
"sets.  The ``&`` operator performs intersection, and ``|`` performs a union::"
msgstr ""

# 5fd8925601dc4b588c1add85a1ec4a3f
#: whatsnew/2.7.rst:532
msgid ""
"The view keeps track of the dictionary and its contents change as the "
"dictionary is modified::"
msgstr ""

# d45642e432004150a4f7fbcb0e99cf4a
#: whatsnew/2.7.rst:542
msgid ""
"However, note that you can't add or remove keys while you're iterating over "
"the view::"
msgstr ""

# 4323ec6cd7f44b96a1889d62eeb46c13
#: whatsnew/2.7.rst:552
msgid ""
"You can use the view methods in Python 2.x code, and the 2to3 converter will "
"change them to the standard :meth:`keys`, :meth:`values`, and :meth:`items` "
"methods."
msgstr ""

#: whatsnew/2.7.rst:559
msgid "PEP 3106 - Revamping dict.keys(), .values() and .items()"
msgstr ""

# 7e5c0239e5fd4d53a3a26697db3fa039
#: whatsnew/2.7.rst:559
msgid ""
"PEP written by Guido van Rossum. Backported to 2.7 by Alexandre Vassalotti; :"
"issue:`1967`."
msgstr ""

# a0d788d44bad4589a3432fa8bbb42a9f
#: whatsnew/2.7.rst:564
msgid "PEP 3137: The memoryview Object"
msgstr ""

# bcba1abe2a2747b2a0cf24e3cf901903
#: whatsnew/2.7.rst:566
msgid ""
"The :class:`memoryview` object provides a view of another object's memory "
"content that matches the :class:`bytes` type's interface."
msgstr ""

# cff232af5e3d4950b3eed5c1eefd2e03
#: whatsnew/2.7.rst:581
msgid ""
"The content of the view can be converted to a string of bytes or a list of "
"integers:"
msgstr ""

# 971aeb85e2754f86962c20c996f59c90
#: whatsnew/2.7.rst:590
msgid ""
":class:`memoryview` objects allow modifying the underlying object if it's a "
"mutable object."
msgstr ""

#: whatsnew/2.7.rst:610
msgid "PEP 3137 - Immutable Bytes and Mutable Buffer"
msgstr ""

# 4d0043f28347403fa9d6d648b4ffea80
#: whatsnew/2.7.rst:609
msgid ""
"PEP written by Guido van Rossum. Implemented by Travis Oliphant, Antoine "
"Pitrou and others. Backported to 2.7 by Antoine Pitrou; :issue:`2396`."
msgstr ""

# da05d447de4b478fbb3d7b225373027b
#: whatsnew/2.7.rst:620
msgid ""
"The syntax for set literals has been backported from Python 3.x. Curly "
"brackets are used to surround the contents of the resulting mutable set; set "
"literals are distinguished from dictionaries by not containing colons and "
"values. ``{}`` continues to represent an empty dictionary; use ``set()`` for "
"an empty set."
msgstr ""

# 0fcb35e9ab66459cb7ad1a2ac0f07612
#: whatsnew/2.7.rst:634
msgid "Backported by Alexandre Vassalotti; :issue:`2335`."
msgstr ""

# ef46e684c50f40e5859b4bf7e909455b
#: whatsnew/2.7.rst:636
msgid ""
"Dictionary and set comprehensions are another feature backported from 3.x, "
"generalizing list/generator comprehensions to use the literal syntax for "
"sets and dictionaries."
msgstr ""

# 57aa12a8c8b44749b4da0fb6bd4894fb
#: whatsnew/2.7.rst:645
msgid "Backported by Alexandre Vassalotti; :issue:`2333`."
msgstr ""

# 62ed8d3224794223838b7a4aeefcf333
#: whatsnew/2.7.rst:647
msgid ""
"The :keyword:`with` statement can now use multiple context managers in one "
"statement.  Context managers are processed from left to right and each one "
"is treated as beginning a new :keyword:`with` statement. This means that::"
msgstr ""

# 5a0e49e9a33e4045934e24757c9fe25a
#: whatsnew/2.7.rst:655
msgid "is equivalent to::"
msgstr ""

# 6b59755dccb244d1af0f624092ada707
#: whatsnew/2.7.rst:661
msgid ""
"The :func:`contextlib.nested` function provides a very similar function, so "
"it's no longer necessary and has been deprecated."
msgstr ""

# 29771038c2c7444db653097afe2874f1
#: whatsnew/2.7.rst:664
msgid ""
"(Proposed in http://codereview.appspot.com/53094; implemented by Georg "
"Brandl.)"
msgstr ""

# c5376712d918453bb310814c73e43b47
#: whatsnew/2.7.rst:667
msgid ""
"Conversions between floating-point numbers and strings are now correctly "
"rounded on most platforms.  These conversions occur in many different "
"places: :func:`str` on floats and complex numbers; the :class:`float` and :"
"class:`complex` constructors; numeric formatting; serializing and "
"deserializing floats and complex numbers using the :mod:`marshal`, :mod:"
"`pickle` and :mod:`json` modules; parsing of float and imaginary literals in "
"Python code; and :class:`~decimal.Decimal`-to-float conversion."
msgstr ""

# c93f897ceb234d948f452d2eca0bf2a8
#: whatsnew/2.7.rst:679
msgid ""
"Related to this, the :func:`repr` of a floating-point number *x* now returns "
"a result based on the shortest decimal string that's guaranteed to round "
"back to *x* under correct rounding (with round-half-to-even rounding mode).  "
"Previously it gave a string based on rounding x to 17 decimal digits."
msgstr ""

# f3c9452586974fdba7247fb90acf1aac
#: whatsnew/2.7.rst:687
msgid ""
"The rounding library responsible for this improvement works on Windows and "
"on Unix platforms using the gcc, icc, or suncc compilers.  There may be a "
"small number of platforms where correct operation of this code cannot be "
"guaranteed, so the code is not used on such systems.  You can find out which "
"code is being used by checking :data:`sys.float_repr_style`,  which will be "
"``short`` if the new code is in use and ``legacy`` if it isn't."
msgstr ""

# 5b26171cfbbf4b1d917227da617e941d
#: whatsnew/2.7.rst:695
msgid ""
"Implemented by Eric Smith and Mark Dickinson, using David Gay's :file:`dtoa."
"c` library; :issue:`7117`."
msgstr ""

# bc2a705a0e8741789e1f1c30f5c0fd84
#: whatsnew/2.7.rst:698
msgid ""
"Conversions from long integers and regular integers to floating point now "
"round differently, returning the floating-point number closest to the "
"number.  This doesn't matter for small integers that can be converted "
"exactly, but for large numbers that will unavoidably lose precision, Python "
"2.7 now approximates more closely.  For example, Python 2.6 computed the "
"following::"
msgstr ""

# e49e8723d895464da4afdd8cd80d1358
#: whatsnew/2.7.rst:711
msgid ""
"Python 2.7's floating-point result is larger, but much closer to the true "
"value::"
msgstr ""

# d47e044845e04013977b3b88fd467ba0
#: whatsnew/2.7.rst:720
msgid "(Implemented by Mark Dickinson; :issue:`3166`.)"
msgstr ""

# bc000e7d23794b60a6d5af70a5224e0d
#: whatsnew/2.7.rst:722
msgid ""
"Integer division is also more accurate in its rounding behaviours.  (Also "
"implemented by Mark Dickinson; :issue:`1811`.)"
msgstr ""

# 2b417b68420346e1a1c1750bbd7bf151
#: whatsnew/2.7.rst:725
msgid ""
"Implicit coercion for complex numbers has been removed; the interpreter will "
"no longer ever attempt to call a :meth:`__coerce__` method on complex "
"objects.  (Removed by Meador Inge and Mark Dickinson; :issue:`5211`.)"
msgstr ""

# a8614d2ce98443b692c36abf7092ab75
#: whatsnew/2.7.rst:729
msgid ""
"The :meth:`str.format` method now supports automatic numbering of the "
"replacement fields.  This makes using :meth:`str.format` more closely "
"resemble using ``%s`` formatting::"
msgstr ""

# ddd304efc1ce44359b4c67e60adbf4e6
#: whatsnew/2.7.rst:738
msgid ""
"The auto-numbering takes the fields from left to right, so the first ``{...}"
"`` specifier will use the first argument to :meth:`str.format`, the next "
"specifier will use the next argument, and so on.  You can't mix auto-"
"numbering and explicit numbering -- either number all of your specifier "
"fields or none of them -- but you can mix auto-numbering and named fields, "
"as in the second example above.  (Contributed by Eric Smith; :issue:`5237`.)"
msgstr ""

# a2fb6d956b5a4bf3b17e083184332ad4
#: whatsnew/2.7.rst:745
msgid ""
"Complex numbers now correctly support usage with :func:`format`, and default "
"to being right-aligned. Specifying a precision or comma-separation applies "
"to both the real and imaginary parts of the number, but a specified field "
"width and alignment is applied to the whole of the resulting ``1.5+3j`` "
"output.  (Contributed by Eric Smith; :issue:`1588` and :issue:`7988`.)"
msgstr ""

# 858c6d2d214244f48a409af16a75cdde
#: whatsnew/2.7.rst:752
msgid ""
"The 'F' format code now always formats its output using uppercase "
"characters, so it will now produce 'INF' and 'NAN'. (Contributed by Eric "
"Smith; :issue:`3382`.)"
msgstr ""

# 03e242a140c04b27ac79ee1684532f81
#: whatsnew/2.7.rst:756
msgid ""
"A low-level change: the :meth:`object.__format__` method now triggers a :exc:"
"`PendingDeprecationWarning` if it's passed a format string, because the :"
"meth:`__format__` method for :class:`object` converts the object to a string "
"representation and formats that.  Previously the method silently applied the "
"format string to the string representation, but that could hide mistakes in "
"Python code.  If you're supplying formatting information such as an "
"alignment or precision, presumably you're expecting the formatting to be "
"applied in some object-specific way.  (Fixed by Eric Smith; :issue:`7994`.)"
msgstr ""

# 1971b69bbf1c453a98a8a762be9541a6
#: whatsnew/2.7.rst:766
msgid ""
"The :func:`int` and :func:`long` types gained a ``bit_length`` method that "
"returns the number of bits necessary to represent its argument in binary::"
msgstr ""

# 214ab7889d42404d983f828e7a9c3b6f
#: whatsnew/2.7.rst:781
msgid "(Contributed by Fredrik Johansson and Victor Stinner; :issue:`3439`.)"
msgstr ""

# a42d2396e3a74ef9b144319f900e2f17
#: whatsnew/2.7.rst:783
msgid ""
"The :keyword:`import` statement will no longer try an absolute import if a "
"relative import (e.g. ``from .os import sep``) fails.  This fixes a bug, but "
"could possibly break certain :keyword:`import` statements that were only "
"working by accident.  (Fixed by Meador Inge; :issue:`7902`.)"
msgstr ""

# ce9665f14e8448868609d46d9fb1f825
#: whatsnew/2.7.rst:789
msgid ""
"It's now possible for a subclass of the built-in :class:`unicode` type to "
"override the :meth:`__unicode__` method.  (Implemented by Victor Stinner; :"
"issue:`1583863`.)"
msgstr ""

# 35d5d4b4e5db4abd97b845b5ff1a73d4
#: whatsnew/2.7.rst:793
msgid ""
"The :class:`bytearray` type's :meth:`~bytearray.translate` method now "
"accepts ``None`` as its first argument.  (Fixed by Georg Brandl; :issue:"
"`4759`.)"
msgstr ""

# 1625c6bca14c4db7a18f94c7b4d69b9c
#: whatsnew/2.7.rst:799
msgid ""
"When using ``@classmethod`` and ``@staticmethod`` to wrap methods as class "
"or static methods, the wrapper object now exposes the wrapped function as "
"their :attr:`__func__` attribute. (Contributed by Amaury Forgeot d'Arc, "
"after a suggestion by George Sakkis; :issue:`5982`.)"
msgstr ""

# f9d29a77eff24f7bb496f0b1f2b6edb1
# 842135c04db848f2a0db11987c97be90
#: whatsnew/2.7.rst:805 whatsnew/2.7.rst:2384
msgid ""
"When a restricted set of attributes were set using ``__slots__``, deleting "
"an unset attribute would not raise :exc:`AttributeError` as you would "
"expect.  Fixed by Benjamin Peterson; :issue:`7604`.)"
msgstr ""

# 287257c9c7f140d2b26d1b3f58993d3e
#: whatsnew/2.7.rst:809
msgid ""
"Two new encodings are now supported: \"cp720\", used primarily for Arabic "
"text; and \"cp858\", a variant of CP 850 that adds the euro symbol.  (CP720 "
"contributed by Alexander Belchenko and Amaury Forgeot d'Arc in :issue:"
"`1616979`; CP858 contributed by Tim Hatch in :issue:`8016`.)"
msgstr ""

# 548deb5a412b4213a040ef623caeee8b
#: whatsnew/2.7.rst:815
msgid ""
"The :class:`file` object will now set the :attr:`filename` attribute on the :"
"exc:`IOError` exception when trying to open a directory on POSIX platforms "
"(noted by Jan Kaliszewski; :issue:`4764`), and now explicitly checks for and "
"forbids writing to read-only file objects instead of trusting the C library "
"to catch and report the error (fixed by Stefan Krah; :issue:`5677`)."
msgstr ""

# 73d7379d148d4790bdba788a211342ac
#: whatsnew/2.7.rst:822
msgid ""
"The Python tokenizer now translates line endings itself, so the :func:"
"`compile` built-in function now accepts code using any line-ending "
"convention.  Additionally, it no longer requires that the code end in a "
"newline."
msgstr ""

# 57ca347aff93499e81a733b229af7484
#: whatsnew/2.7.rst:827
msgid ""
"Extra parentheses in function definitions are illegal in Python 3.x, meaning "
"that you get a syntax error from ``def f((x)): pass``.  In Python3-warning "
"mode, Python 2.7 will now warn about this odd usage. (Noted by James "
"Lingard; :issue:`7362`.)"
msgstr ""

# 7ddd0197aafd43ec945d7be9fd656133
#: whatsnew/2.7.rst:832
msgid ""
"It's now possible to create weak references to old-style class objects.  New-"
"style classes were always weak-referenceable.  (Fixed by Antoine Pitrou; :"
"issue:`8268`.)"
msgstr ""

# 7d974c10903748e4b6ae6cac92d87689
#: whatsnew/2.7.rst:836
msgid ""
"When a module object is garbage-collected, the module's dictionary is now "
"only cleared if no one else is holding a reference to the dictionary (:issue:"
"`7140`)."
msgstr ""

# 9b94d282ebff4af1ab488bb4361921a8
#: whatsnew/2.7.rst:847
msgid ""
"A new environment variable, :envvar:`PYTHONWARNINGS`, allows controlling "
"warnings.  It should be set to a string containing warning settings, "
"equivalent to those used with the :option:`-W` switch, separated by commas. "
"(Contributed by Brian Curtin; :issue:`7301`.)"
msgstr ""

# 6e01ea1d38d6442296410109de9edeec
#: whatsnew/2.7.rst:853
msgid ""
"For example, the following setting will print warnings every time they "
"occur, but turn warnings from the :mod:`Cookie` module into an error.  (The "
"exact syntax for setting an environment variable varies across operating "
"systems and shells.)"
msgstr ""

# 910411da625344e2ac35efbb688f67db
#: whatsnew/2.7.rst:868
msgid "Several performance enhancements have been added:"
msgstr ""

# 5363280cb0f64a34bccb8d4eafa0f883
#: whatsnew/2.7.rst:876
msgid ""
"A new opcode was added to perform the initial setup for :keyword:`with` "
"statements, looking up the :meth:`__enter__` and :meth:`__exit__` methods.  "
"(Contributed by Benjamin Peterson.)"
msgstr ""

# 0cac21ac6e3a4fdd9bf8e5d885f35c52
#: whatsnew/2.7.rst:880
msgid ""
"The garbage collector now performs better for one common usage pattern: when "
"many objects are being allocated without deallocating any of them.  This "
"would previously take quadratic time for garbage collection, but now the "
"number of full garbage collections is reduced as the number of objects on "
"the heap grows. The new logic only performs a full garbage collection pass "
"when the middle generation has been collected 10 times and when the number "
"of survivor objects from the middle generation exceeds 10% of the number of "
"objects in the oldest generation.  (Suggested by Martin von Löwis and "
"implemented by Antoine Pitrou; :issue:`4074`.)"
msgstr ""

# 0b44c699452d4e8689d40d8d9e0c615a
#: whatsnew/2.7.rst:891
msgid ""
"The garbage collector tries to avoid tracking simple containers which can't "
"be part of a cycle. In Python 2.7, this is now true for tuples and dicts "
"containing atomic types (such as ints, strings, etc.). Transitively, a dict "
"containing tuples of atomic types won't be tracked either. This helps reduce "
"the cost of each garbage collection by decreasing the number of objects to "
"be considered and traversed by the collector. (Contributed by Antoine "
"Pitrou; :issue:`4688`.)"
msgstr ""

# 954a532964b9452eadfc9a06cbb60142
#: whatsnew/2.7.rst:900
msgid ""
"Long integers are now stored internally either in base 2**15 or in base "
"2**30, the base being determined at build time.  Previously, they were "
"always stored in base 2**15.  Using base 2**30 gives significant performance "
"improvements on 64-bit machines, but benchmark results on 32-bit machines "
"have been mixed.  Therefore, the default is to use base 2**30 on 64-bit "
"machines and base 2**15 on 32-bit machines; on Unix, there's a new configure "
"option :option:`--enable-big-digits` that can be used to override this "
"default."
msgstr ""

# 4acf81af381340a480f7c332f88f07e3
#: whatsnew/2.7.rst:909
msgid ""
"Apart from the performance improvements this change should be invisible to "
"end users, with one exception: for testing and debugging purposes there's a "
"new structseq :data:`sys.long_info` that provides information about the "
"internal format, giving the number of bits per digit and the size in bytes "
"of the C type used to store each digit::"
msgstr ""

# 18fe2b7cfdee4f29911895e42175da46
# 7f0d15f8437b43709eb4341ff01ab9e4
#: whatsnew/2.7.rst:920 whatsnew/3.1.rst:496
#, fuzzy
msgid "(Contributed by Mark Dickinson; :issue:`4258`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 89104bf92c604616b392332e7608339a
#: whatsnew/2.7.rst:922
msgid ""
"Another set of changes made long objects a few bytes smaller: 2 bytes "
"smaller on 32-bit systems and 6 bytes on 64-bit. (Contributed by Mark "
"Dickinson; :issue:`5260`.)"
msgstr ""

# 1f85d26a877b40ab9dd9804d787efd67
#: whatsnew/2.7.rst:926
msgid ""
"The division algorithm for long integers has been made faster by tightening "
"the inner loop, doing shifts instead of multiplications, and fixing an "
"unnecessary extra iteration. Various benchmarks show speedups of between 50% "
"and 150% for long integer divisions and modulo operations. (Contributed by "
"Mark Dickinson; :issue:`5512`.) Bitwise operations are also significantly "
"faster (initial patch by Gregory Smith; :issue:`1087418`)."
msgstr ""

# ee7b1c191dea4c36a75590ce1b948cea
#: whatsnew/2.7.rst:935
msgid ""
"The implementation of ``%`` checks for the left-side operand being a Python "
"string and special-cases it; this results in a 1-3% performance increase for "
"applications that frequently use ``%`` with strings, such as templating "
"libraries. (Implemented by Collin Winter; :issue:`5176`.)"
msgstr ""

# 82b67a06e6be4907a6a5125354336a91
#: whatsnew/2.7.rst:941
msgid ""
"List comprehensions with an ``if`` condition are compiled into faster "
"bytecode.  (Patch by Antoine Pitrou, back-ported to 2.7 by Jeffrey Yasskin; :"
"issue:`4715`.)"
msgstr ""

# 1b7605bf45c842f9a79e654218040d22
#: whatsnew/2.7.rst:945
msgid ""
"Converting an integer or long integer to a decimal string was made faster by "
"special-casing base 10 instead of using a generalized conversion function "
"that supports arbitrary bases. (Patch by Gawain Bolton; :issue:`6713`.)"
msgstr ""

# f248742ac67c4b1daeda17526aab5abb
#: whatsnew/2.7.rst:950
msgid ""
"The :meth:`split`, :meth:`replace`, :meth:`rindex`, :meth:`rpartition`, and :"
"meth:`rsplit` methods of string-like types (strings, Unicode strings, and :"
"class:`bytearray` objects) now use a fast reverse-search algorithm instead "
"of a character-by-character scan.  This is sometimes faster by a factor of "
"10.  (Added by Florent Xicluna; :issue:`7462` and :issue:`7622`.)"
msgstr ""

# 761d6c3da17c401c86fb798b667cfcd0
#: whatsnew/2.7.rst:957
msgid ""
"The :mod:`pickle` and :mod:`cPickle` modules now automatically intern the "
"strings used for attribute names, reducing memory usage of the objects "
"resulting from unpickling.  (Contributed by Jake McGuire; :issue:`5084`.)"
msgstr ""

# 17a7ae412473402682cfe96406790a9f
#: whatsnew/2.7.rst:962
msgid ""
"The :mod:`cPickle` module now special-cases dictionaries, nearly halving the "
"time required to pickle them. (Contributed by Collin Winter; :issue:`5670`.)"
msgstr ""

# 3833e93e39f343ed8229259acca1e894
#: whatsnew/2.7.rst:977
msgid ""
"The :mod:`bdb` module's base debugging class :class:`~bdb.Bdb` gained a "
"feature for skipping modules.  The constructor now takes an iterable "
"containing glob-style patterns such as ``django.*``; the debugger will not "
"step into stack frames from a module that matches one of these patterns. "
"(Contributed by Maru Newby after a suggestion by Senthil Kumaran; :issue:"
"`5142`.)"
msgstr ""

# 12a39d10f8f94461bac8034eaeb1e5e4
#: whatsnew/2.7.rst:985
msgid ""
"The :mod:`binascii` module now supports the buffer API, so it can be used "
"with :class:`memoryview` instances and other similar buffer objects. "
"(Backported from 3.x by Florent Xicluna; :issue:`7703`.)"
msgstr ""

# bc9598a41ce940c5b01ecc056790ad03
#: whatsnew/2.7.rst:989
msgid ""
"Updated module: the :mod:`bsddb` module has been updated from 4.7.2devel9 to "
"version 4.8.4 of `the pybsddb package <http://www.jcea.es/programacion/"
"pybsddb.htm>`__. The new version features better Python 3.x compatibility, "
"various bug fixes, and adds several new BerkeleyDB flags and methods. "
"(Updated by Jesús Cea Avión; :issue:`8156`.  The pybsddb changelog can be "
"read at http://hg.jcea.es/pybsddb/file/tip/ChangeLog.)"
msgstr ""

# 4a62b03eff6a4857a742b4aa425b53ee
#: whatsnew/2.7.rst:997
msgid ""
"The :mod:`bz2` module's :class:`~bz2.BZ2File` now supports the context "
"management protocol, so you can write ``with bz2.BZ2File(...) as f:``. "
"(Contributed by Hagen Fürstenau; :issue:`3860`.)"
msgstr ""

# 06c74538084443a1a06ea2891385d055
#: whatsnew/2.7.rst:1001
msgid ""
"New class: the :class:`~collections.Counter` class in the :mod:`collections` "
"module is useful for tallying data.  :class:`~collections.Counter` instances "
"behave mostly like dictionaries but return zero for missing keys instead of "
"raising a :exc:`KeyError`:"
msgstr ""

# c035a8eaef464395a98bbd6ce0aedbeb
#: whatsnew/2.7.rst:1023
msgid ""
"There are three additional :class:`~collections.Counter` methods. :meth:"
"`~collections.Counter.most_common` returns the N most common elements and "
"their counts.  :meth:`~collections.Counter.elements` returns an iterator "
"over the contained elements, repeating each element as many times as its "
"count. :meth:`~collections.Counter.subtract` takes an iterable and subtracts "
"one for each element instead of adding; if the argument is a dictionary or "
"another :class:`Counter`, the counts are subtracted. ::"
msgstr ""

# ebdd13cd94d1465cbb39192da805a84c
#: whatsnew/2.7.rst:1046
msgid "Contributed by Raymond Hettinger; :issue:`1696199`."
msgstr ""

# d58fafc1be404815a1772a3bbba24ff9
#: whatsnew/2.7.rst:1050
msgid ""
"New class: :class:`~collections.OrderedDict` is described in the earlier "
"section :ref:`pep-0372`."
msgstr ""

# b51e8d0982f74cbf93bba24e74215631
#: whatsnew/2.7.rst:1053
msgid ""
"New method: The :class:`~collections.deque` data type now has a :meth:"
"`~collections.deque.count` method that returns the number of contained "
"elements equal to the supplied argument *x*, and a :meth:`~collections.deque."
"reverse` method that reverses the elements of the deque in-place.  :class:"
"`deque` also exposes its maximum length as the read-only :attr:`~collections."
"deque.maxlen` attribute. (Both features added by Raymond Hettinger.)"
msgstr ""

# 298498e4b39c4b188f889f6f2b63c50e
#: whatsnew/2.7.rst:1061
msgid ""
"The :class:`~collections.namedtuple` class now has an optional *rename* "
"parameter. If *rename* is true, field names that are invalid because they've "
"been repeated or aren't legal Python identifiers will be renamed to legal "
"names that are derived from the field's position within the list of fields:"
msgstr ""

# 3952384ba6324c5f922609c4ea399905
#: whatsnew/2.7.rst:1072
msgid "(Added by Raymond Hettinger; :issue:`1818`.)"
msgstr ""

# 43c56693d9d54f9fa7767027a3bac3ee
#: whatsnew/2.7.rst:1074
msgid ""
"Finally, the :class:`~collections.Mapping` abstract base class now returns :"
"const:`NotImplemented` if a mapping is compared to another type that isn't "
"a :class:`Mapping`. (Fixed by Daniel Stutzbach; :issue:`8729`.)"
msgstr ""

# 87e64fc9191846ba8047c1707d59e07f
#: whatsnew/2.7.rst:1079
msgid ""
"Constructors for the parsing classes in the :mod:`ConfigParser` module now "
"take a *allow_no_value* parameter, defaulting to false; if true, options "
"without values will be allowed.  For example::"
msgstr ""

# 0cbb84619b8f47158f8a2adc59d80747
#: whatsnew/2.7.rst:1101
msgid "(Contributed by Mats Kindahl; :issue:`7005`.)"
msgstr ""

# 557a88371aea42f4b84b1a8f0897112f
#: whatsnew/2.7.rst:1103
msgid ""
"Deprecated function: :func:`contextlib.nested`, which allows handling more "
"than one context manager with a single :keyword:`with` statement, has been "
"deprecated, because the :keyword:`with` statement now supports multiple "
"context managers."
msgstr ""

# f607f0ab899b4def9ee76ccfbae89c29
#: whatsnew/2.7.rst:1108
msgid ""
"The :mod:`cookielib` module now ignores cookies that have an invalid version "
"field, one that doesn't contain an integer value.  (Fixed by John J. Lee; :"
"issue:`3924`.)"
msgstr ""

# 7e06d9026fd0490a964497fe3796378a
#: whatsnew/2.7.rst:1112
msgid ""
"The :mod:`copy` module's :func:`~copy.deepcopy` function will now correctly "
"copy bound instance methods.  (Implemented by Robert Collins; :issue:`1515`.)"
msgstr ""

# 4ef48e65ba854fe796f5db924e43c752
#: whatsnew/2.7.rst:1116
msgid ""
"The :mod:`ctypes` module now always converts ``None`` to a C NULL pointer "
"for arguments declared as pointers.  (Changed by Thomas Heller; :issue:"
"`4606`.)  The underlying `libffi library <http://sourceware.org/libffi/>`__ "
"has been updated to version 3.0.9, containing various fixes for different "
"platforms.  (Updated by Matthias Klose; :issue:`8142`.)"
msgstr ""

# 0cb9faf95d1b46cfb07cbb617da84603
#: whatsnew/2.7.rst:1123
msgid ""
"New method: the :mod:`datetime` module's :class:`~datetime.timedelta` class "
"gained a :meth:`~datetime.timedelta.total_seconds` method that returns the "
"number of seconds in the duration.  (Contributed by Brian Quinlan; :issue:"
"`5788`.)"
msgstr ""

# d0ae8c8c62fe495cafdbef8a57d04d1f
#: whatsnew/2.7.rst:1127
msgid ""
"New method: the :class:`~decimal.Decimal` class gained a :meth:`~decimal."
"Decimal.from_float` class method that performs an exact conversion of a "
"floating-point number to a :class:`~decimal.Decimal`. This exact conversion "
"strives for the closest decimal approximation to the floating-point "
"representation's value; the resulting decimal value will therefore still "
"include the inaccuracy, if any. For example, ``Decimal.from_float(0.1)`` "
"returns "
"``Decimal('0.1000000000000000055511151231257827021181583404541015625')``. "
"(Implemented by Raymond Hettinger; :issue:`4796`.)"
msgstr ""

# 7a19a835d2ab475d973182a461373f69
#: whatsnew/2.7.rst:1138
msgid ""
"Comparing instances of :class:`Decimal` with floating-point numbers now "
"produces sensible results based on the numeric values of the operands.  "
"Previously such comparisons would fall back to Python's default rules for "
"comparing objects, which produced arbitrary results based on their type.  "
"Note that you still cannot combine :class:`Decimal` and floating-point in "
"other operations such as addition, since you should be explicitly choosing "
"how to convert between float and :class:`Decimal`. (Fixed by Mark "
"Dickinson; :issue:`2531`.)"
msgstr ""

# 56ab0e093c9a4197906f9377e3bec93d
#: whatsnew/2.7.rst:1148
msgid ""
"The constructor for :class:`~decimal.Decimal` now accepts floating-point "
"numbers (added by Raymond Hettinger; :issue:`8257`) and non-European Unicode "
"characters such as Arabic-Indic digits (contributed by Mark Dickinson; :"
"issue:`6595`)."
msgstr ""

# 593211edc12144f3bf5385debdd7c05b
#: whatsnew/2.7.rst:1153
msgid ""
"Most of the methods of the :class:`~decimal.Context` class now accept "
"integers as well as :class:`~decimal.Decimal` instances; the only exceptions "
"are the :meth:`~decimal.Context.canonical` and :meth:`~decimal.Context."
"is_canonical` methods.  (Patch by Juan José Conti; :issue:`7633`.)"
msgstr ""

# f13ec8c6c8fb485eb307152f9f51a641
#: whatsnew/2.7.rst:1158
msgid ""
"When using :class:`~decimal.Decimal` instances with a string's :meth:`~str."
"format` method, the default alignment was previously left-alignment.  This "
"has been changed to right-alignment, which is more sensible for numeric "
"types.  (Changed by Mark Dickinson; :issue:`6857`.)"
msgstr ""

# c71fe4872c934f87ba4bb121579ba9a6
# 0419a4d67d6d4e3fa6860e582d578912
#: whatsnew/2.7.rst:1163 whatsnew/2.7.rst:2402
msgid ""
"Comparisons involving a signaling NaN value (or ``sNAN``) now signal :const:"
"`InvalidOperation` instead of silently returning a true or false value "
"depending on the comparison operator.  Quiet NaN values (or ``NaN``) are now "
"hashable.  (Fixed by Mark Dickinson; :issue:`7279`.)"
msgstr ""

# daa92efe3fa5460ab414a113f73e6619
#: whatsnew/2.7.rst:1169
msgid ""
"The :mod:`difflib` module now produces output that is more compatible with "
"modern :command:`diff`/:command:`patch` tools through one small change, "
"using a tab character instead of spaces as a separator in the header giving "
"the filename.  (Fixed by Anatoly Techtonik; :issue:`7585`.)"
msgstr ""

# ba93a54a8650473492de96b363cd0b4c
#: whatsnew/2.7.rst:1175
msgid ""
"The Distutils ``sdist`` command now always regenerates the :file:`MANIFEST` "
"file, since even if the :file:`MANIFEST.in` or :file:`setup.py` files "
"haven't been modified, the user might have created some new files that "
"should be included. (Fixed by Tarek Ziadé; :issue:`8688`.)"
msgstr ""

# 9158d8a106b04c02b606ba1a20bf6fc1
#: whatsnew/2.7.rst:1181
msgid ""
"The :mod:`doctest` module's :const:`IGNORE_EXCEPTION_DETAIL` flag will now "
"ignore the name of the module containing the exception being tested.  (Patch "
"by Lennart Regebro; :issue:`7490`.)"
msgstr ""

# 9362791a184e4f2799c76d5701ffa872
#: whatsnew/2.7.rst:1185
msgid ""
"The :mod:`email` module's :class:`~email.message.Message` class will now "
"accept a Unicode-valued payload, automatically converting the payload to the "
"encoding specified by :attr:`output_charset`. (Added by R. David Murray; :"
"issue:`1368247`.)"
msgstr ""

# c235233ceb8e46bf89c88eca52630d76
#: whatsnew/2.7.rst:1190
msgid ""
"The :class:`~fractions.Fraction` class now accepts a single float or :class:"
"`~decimal.Decimal` instance, or two rational numbers, as arguments to its "
"constructor.  (Implemented by Mark Dickinson; rationals added in :issue:"
"`5812`, and float/decimal in :issue:`8294`.)"
msgstr ""

# 68afb399dd1b4dac87a7fe250f885ff3
#: whatsnew/2.7.rst:1196
msgid ""
"Ordering comparisons (``<``, ``<=``, ``>``, ``>=``) between fractions and "
"complex numbers now raise a :exc:`TypeError`. This fixes an oversight, "
"making the :class:`Fraction` match the other numeric types."
msgstr ""

# a98c0744ccb74b93882db262271b86a0
#: whatsnew/2.7.rst:1203
msgid ""
"New class: :class:`~ftplib.FTP_TLS` in the :mod:`ftplib` module provides "
"secure FTP connections using TLS encapsulation of authentication as well as "
"subsequent control and data transfers. (Contributed by Giampaolo Rodola; :"
"issue:`2054`.)"
msgstr ""

# 559048849c5b4be3a10597aa85a9cb43
#: whatsnew/2.7.rst:1209
msgid ""
"The :meth:`~ftplib.FTP.storbinary` method for binary uploads can now restart "
"uploads thanks to an added *rest* parameter (patch by Pablo Mouzo; :issue:"
"`6845`.)"
msgstr ""

# 0d687f265ac749069793d62767c517ff
#: whatsnew/2.7.rst:1213
msgid ""
"New class decorator: :func:`total_ordering` in the :mod:`functools` module "
"takes a class that defines an :meth:`__eq__` method and one of :meth:"
"`__lt__`, :meth:`__le__`, :meth:`__gt__`, or :meth:`__ge__`, and generates "
"the missing comparison methods.  Since the :meth:`__cmp__` method is being "
"deprecated in Python 3.x, this decorator makes it easier to define ordered "
"classes. (Added by Raymond Hettinger; :issue:`5479`.)"
msgstr ""

# 02da66bbdf2d47719d39735b195dda8e
#: whatsnew/2.7.rst:1221
msgid ""
"New function: :func:`cmp_to_key` will take an old-style comparison function "
"that expects two arguments and return a new callable that can be used as the "
"*key* parameter to functions such as :func:`sorted`, :func:`min` and :func:"
"`max`, etc.  The primary intended use is to help with making code compatible "
"with Python 3.x. (Added by Raymond Hettinger.)"
msgstr ""

# 3102c4d9d93d420ab33e1139507bf899
#: whatsnew/2.7.rst:1228
msgid ""
"New function: the :mod:`gc` module's :func:`~gc.is_tracked` returns true if "
"a given instance is tracked by the garbage collector, false otherwise. "
"(Contributed by Antoine Pitrou; :issue:`4688`.)"
msgstr ""

# 3889844c8c7b4384875f6f10acb2c5a8
#: whatsnew/2.7.rst:1232
msgid ""
"The :mod:`gzip` module's :class:`~gzip.GzipFile` now supports the context "
"management protocol, so you can write ``with gzip.GzipFile(...) as f:`` "
"(contributed by Hagen Fürstenau; :issue:`3860`), and it now implements the :"
"class:`io.BufferedIOBase` ABC, so you can wrap it with :class:`io."
"BufferedReader` for faster processing (contributed by Nir Aides; :issue:"
"`7471`). It's also now possible to override the modification time recorded "
"in a gzipped file by providing an optional timestamp to the constructor.  "
"(Contributed by Jacques Frechet; :issue:`4272`.)"
msgstr ""

# 3060d0fa35024b9f92991f7ee98db41b
#: whatsnew/2.7.rst:1242
msgid ""
"Files in gzip format can be padded with trailing zero bytes; the :mod:`gzip` "
"module will now consume these trailing bytes.  (Fixed by Tadek Pietraszek "
"and Brian Curtin; :issue:`2846`.)"
msgstr ""

# 4de000781e8745dc8a9204a122e3df1b
#: whatsnew/2.7.rst:1246
msgid ""
"New attribute: the :mod:`hashlib` module now has an :attr:`~hashlib.hashlib."
"algorithms` attribute containing a tuple naming the supported algorithms. In "
"Python 2.7, ``hashlib.algorithms`` contains ``('md5', 'sha1', 'sha224', "
"'sha256', 'sha384', 'sha512')``. (Contributed by Carl Chenet; :issue:`7418`.)"
msgstr ""

# bad105199abd4e1492ea9b8a8fbcb337
#: whatsnew/2.7.rst:1252
msgid ""
"The default :class:`~httplib.HTTPResponse` class used by the :mod:`httplib` "
"module now supports buffering, resulting in much faster reading of HTTP "
"responses. (Contributed by Kristján Valur Jónsson; :issue:`4879`.)"
msgstr ""

# 323c569f18eb4a359c2c0647bef9efde
#: whatsnew/2.7.rst:1256
msgid ""
"The :class:`~httplib.HTTPConnection` and :class:`~httplib.HTTPSConnection` "
"classes now support a *source_address* parameter, a ``(host, port)`` 2-tuple "
"giving the source address that will be used for the connection. (Contributed "
"by Eldon Ziegler; :issue:`3972`.)"
msgstr ""

# 8b27285cc07248b8b459b633a1326ff5
#: whatsnew/2.7.rst:1261
msgid ""
"The :mod:`ihooks` module now supports relative imports.  Note that :mod:"
"`ihooks` is an older module for customizing imports, superseded by the :mod:"
"`imputil` module added in Python 2.0. (Relative import support added by Neil "
"Schemenauer.)"
msgstr ""

# a7a45925723b4fe290ce5267eb5bd57f
#: whatsnew/2.7.rst:1268
msgid ""
"The :mod:`imaplib` module now supports IPv6 addresses. (Contributed by Derek "
"Morr; :issue:`1655`.)"
msgstr ""

# 663305394f494706991d94ef0a1c2c01
#: whatsnew/2.7.rst:1271
msgid ""
"New function: the :mod:`inspect` module's :func:`~inspect.getcallargs` takes "
"a callable and its positional and keyword arguments, and figures out which "
"of the callable's parameters will receive each argument, returning a "
"dictionary mapping argument names to their values.  For example::"
msgstr ""

# 5e0ebf4f46f64cefb0f7fe775923a4c8
#: whatsnew/2.7.rst:1288
msgid "Contributed by George Sakkis; :issue:`3135`."
msgstr ""

# 5dd6f821b8ff429fb61a048e3ec22735
#: whatsnew/2.7.rst:1290
msgid ""
"Updated module: The :mod:`io` library has been upgraded to the version "
"shipped with Python 3.1.  For 3.1, the I/O library was entirely rewritten in "
"C and is 2 to 20 times faster depending on the task being performed.  The "
"original Python version was renamed to the :mod:`_pyio` module."
msgstr ""

# 0f7515da46f24608b898e028f73b9703
#: whatsnew/2.7.rst:1295
msgid ""
"One minor resulting change: the :class:`io.TextIOBase` class now has an :"
"attr:`errors` attribute giving the error setting used for encoding and "
"decoding errors (one of ``'strict'``, ``'replace'``, ``'ignore'``)."
msgstr ""

# 7e7b4cf586734860bf10e8ff96d73493
#: whatsnew/2.7.rst:1300
msgid ""
"The :class:`io.FileIO` class now raises an :exc:`OSError` when passed an "
"invalid file descriptor.  (Implemented by Benjamin Peterson; :issue:"
"`4991`.)  The :meth:`~io.IOBase.truncate` method now preserves the file "
"position; previously it would change the file position to the end of the new "
"file.  (Fixed by Pascal Chambon; :issue:`6939`.)"
msgstr ""

# c074d7cf28aa4a608c284115c8450601
#: whatsnew/2.7.rst:1306
msgid ""
"New function: ``itertools.compress(data, selectors)`` takes two iterators.  "
"Elements of *data* are returned if the corresponding value in *selectors* is "
"true::"
msgstr ""

# 079ad41cf91041c7add450a79a1d2aa7
#: whatsnew/2.7.rst:1315
msgid ""
"New function: ``itertools.combinations_with_replacement(iter, r)`` returns "
"all the possible *r*-length combinations of elements from the iterable "
"*iter*.  Unlike :func:`~itertools.combinations`, individual elements can be "
"repeated in the generated combinations::"
msgstr ""

# cde5aa23306745e3b3913a847723e214
#: whatsnew/2.7.rst:1324
msgid ""
"Note that elements are treated as unique depending on their position in the "
"input, not their actual values."
msgstr ""

# b8377d73cbbb403093fe6c1ca64ba661
#: whatsnew/2.7.rst:1327
msgid ""
"The :func:`itertools.count` function now has a *step* argument that allows "
"incrementing by values other than 1.  :func:`~itertools.count` also now "
"allows keyword arguments, and using non-integer values such as floats or :"
"class:`~decimal.Decimal` instances.  (Implemented by Raymond Hettinger; :"
"issue:`5032`.)"
msgstr ""

# f724bf80b1cd44acbf04f39c11d26162
#: whatsnew/2.7.rst:1333
msgid ""
":func:`itertools.combinations` and :func:`itertools.product` previously "
"raised :exc:`ValueError` for values of *r* larger than the input iterable.  "
"This was deemed a specification error, so they now return an empty "
"iterator.  (Fixed by Raymond Hettinger; :issue:`4816`.)"
msgstr ""

# e8231103a4d34f0aafa8706b0ef0bf7c
#: whatsnew/2.7.rst:1338
msgid ""
"Updated module: The :mod:`json` module was upgraded to version 2.0.9 of the "
"simplejson package, which includes a C extension that makes encoding and "
"decoding faster. (Contributed by Bob Ippolito; :issue:`4136`.)"
msgstr ""

# 256af9fae0c84f7089895abeddb1e9ac
#: whatsnew/2.7.rst:1343
msgid ""
"To support the new :class:`collections.OrderedDict` type, :func:`json.load` "
"now has an optional *object_pairs_hook* parameter that will be called with "
"any object literal that decodes to a list of pairs. (Contributed by Raymond "
"Hettinger; :issue:`5381`.)"
msgstr ""

# 3949d274f37c4699a03cb4d537c2993f
#: whatsnew/2.7.rst:1348
msgid ""
"The :mod:`mailbox` module's :class:`Maildir` class now records the timestamp "
"on the directories it reads, and only re-reads them if the modification time "
"has subsequently changed.  This improves performance by avoiding unneeded "
"directory scans.  (Fixed by A.M. Kuchling and Antoine Pitrou; :issue:"
"`1607951`, :issue:`6896`.)"
msgstr ""

# 111c9a6a93c34f6ab6122d2b1578b153
#: whatsnew/2.7.rst:1354
msgid ""
"New functions: the :mod:`math` module gained :func:`~math.erf` and :func:"
"`~math.erfc` for the error function and the complementary error function, :"
"func:`~math.expm1` which computes ``e**x - 1`` with more precision than "
"using :func:`~math.exp` and subtracting 1, :func:`~math.gamma` for the Gamma "
"function, and :func:`~math.lgamma` for the natural log of the Gamma "
"function. (Contributed by Mark Dickinson and nirinA raseliarison; :issue:"
"`3366`.)"
msgstr ""

# 18ed7899468043438f291784f26ae144
#: whatsnew/2.7.rst:1362
msgid ""
"The :mod:`multiprocessing` module's :class:`Manager*` classes can now be "
"passed a callable that will be called whenever a subprocess is started, "
"along with a set of arguments that will be passed to the callable. "
"(Contributed by lekma; :issue:`5585`.)"
msgstr ""

# 7d4e49fab0f64f878d486351a9529533
#: whatsnew/2.7.rst:1368
msgid ""
"The :class:`~multiprocessing.Pool` class, which controls a pool of worker "
"processes, now has an optional *maxtasksperchild* parameter.  Worker "
"processes will perform the specified number of tasks and then exit, causing "
"the :class:`~multiprocessing.Pool` to start a new worker.  This is useful if "
"tasks may leak memory or other resources, or if some tasks will cause the "
"worker to become very large. (Contributed by Charles Cazabon; :issue:`6963`.)"
msgstr ""

# 604531a906cd4fc2b236f15f19aba9be
#: whatsnew/2.7.rst:1376
msgid ""
"The :mod:`nntplib` module now supports IPv6 addresses. (Contributed by Derek "
"Morr; :issue:`1664`.)"
msgstr ""

# 4e98535b23a9461db87b838765eca65b
#: whatsnew/2.7.rst:1379
msgid ""
"New functions: the :mod:`os` module wraps the following POSIX system calls: :"
"func:`~os.getresgid` and :func:`~os.getresuid`, which return the real, "
"effective, and saved GIDs and UIDs; :func:`~os.setresgid` and :func:`~os."
"setresuid`, which set real, effective, and saved GIDs and UIDs to new "
"values; :func:`~os.initgroups`, which initialize the group access list for "
"the current process.  (GID/UID functions contributed by Travis H.; :issue:"
"`6508`.  Support for initgroups added by Jean-Paul Calderone; :issue:`7333`.)"
msgstr ""

# 837887281ef14873888ea689d3190058
#: whatsnew/2.7.rst:1389
msgid ""
"The :func:`os.fork` function now re-initializes the import lock in the child "
"process; this fixes problems on Solaris when :func:`~os.fork` is called from "
"a thread.  (Fixed by Zsolt Cserna; :issue:`7242`.)"
msgstr ""

# fec4684f69654f898de8ed2a3cc736ad
#: whatsnew/2.7.rst:1393
msgid ""
"In the :mod:`os.path` module, the :func:`~os.path.normpath` and :func:`~os."
"path.abspath` functions now preserve Unicode; if their input path is a "
"Unicode string, the return value is also a Unicode string. (:meth:`~os.path."
"normpath` fixed by Matt Giuca in :issue:`5827`; :meth:`~os.path.abspath` "
"fixed by Ezio Melotti in :issue:`3426`.)"
msgstr ""

# 88ac9f80a5a44bce9e2cf22fe11af60b
#: whatsnew/2.7.rst:1399
msgid ""
"The :mod:`pydoc` module now has help for the various symbols that Python "
"uses.  You can now do ``help('<<')`` or ``help('@')``, for example. "
"(Contributed by David Laban; :issue:`4739`.)"
msgstr ""

# 82db734d32e64fa3b10d9512c47c7731
#: whatsnew/2.7.rst:1403
msgid ""
"The :mod:`re` module's :func:`~re.split`, :func:`~re.sub`, and :func:`~re."
"subn` now accept an optional *flags* argument, for consistency with the "
"other functions in the module.  (Added by Gregory P. Smith.)"
msgstr ""

# 448e97f75b3b4137998ff57b865b7d0e
#: whatsnew/2.7.rst:1407
msgid ""
"New function: :func:`~runpy.run_path` in the :mod:`runpy` module will "
"execute the code at a provided *path* argument.  *path* can be the path of a "
"Python source file (:file:`example.py`), a compiled bytecode file (:file:"
"`example.pyc`), a directory (:file:`./package/`), or a zip archive (:file:"
"`example.zip`).  If a directory or zip path is provided, it will be added to "
"the front of ``sys.path`` and the module :mod:`__main__` will be imported.  "
"It's expected that the directory or zip contains a :file:`__main__.py`; if "
"it doesn't, some other :file:`__main__.py` might be imported from a location "
"later in ``sys.path``.  This makes more of the machinery of :mod:`runpy` "
"available to scripts that want to mimic the way Python's command line "
"processes an explicit path name. (Added by Nick Coghlan; :issue:`6816`.)"
msgstr ""

# 69dca3078a4f450ebb3fd42e663c2ea5
#: whatsnew/2.7.rst:1421
msgid ""
"New function: in the :mod:`shutil` module, :func:`~shutil.make_archive` "
"takes a filename, archive type (zip or tar-format), and a directory path, "
"and creates an archive containing the directory's contents. (Added by Tarek "
"Ziadé.)"
msgstr ""

# b6c6e152714543fba537068dc0586295
#: whatsnew/2.7.rst:1426
msgid ""
":mod:`shutil`'s :func:`~shutil.copyfile` and :func:`~shutil.copytree` "
"functions now raise a :exc:`~shutil.SpecialFileError` exception when asked "
"to copy a named pipe.  Previously the code would treat named pipes like a "
"regular file by opening them for reading, and this would block "
"indefinitely.  (Fixed by Antoine Pitrou; :issue:`3002`.)"
msgstr ""

# 536ff80b69cf42bb9df00dbeadb3809c
#: whatsnew/2.7.rst:1432
msgid ""
"The :mod:`signal` module no longer re-installs the signal handler unless "
"this is truly necessary, which fixes a bug that could make it impossible to "
"catch the EINTR signal robustly.  (Fixed by Charles-François Natali; :issue:"
"`8354`.)"
msgstr ""

# f66eb14c523e4a08bab85d488d2a1bf6
#: whatsnew/2.7.rst:1437
msgid ""
"New functions: in the :mod:`site` module, three new functions return various "
"site- and user-specific paths. :func:`~site.getsitepackages` returns a list "
"containing all global site-packages directories, :func:`~site."
"getusersitepackages` returns the path of the user's site-packages directory, "
"and :func:`~site.getuserbase` returns the value of the :envvar:`USER_BASE` "
"environment variable, giving the path to a directory that can be used to "
"store data. (Contributed by Tarek Ziadé; :issue:`6693`.)"
msgstr ""

# 1e06a61f32ca4797b70e0c2f6e29dbb8
#: whatsnew/2.7.rst:1448
msgid ""
"The :mod:`site` module now reports exceptions occurring when the :mod:"
"`sitecustomize` module is imported, and will no longer catch and swallow "
"the :exc:`KeyboardInterrupt` exception.  (Fixed by Victor Stinner; :issue:"
"`3137`.)"
msgstr ""

# cbcc5c42aa7a47249c2d9e429190b4d6
#: whatsnew/2.7.rst:1453
msgid ""
"The :func:`~socket.create_connection` function gained a *source_address* "
"parameter, a ``(host, port)`` 2-tuple giving the source address that will be "
"used for the connection. (Contributed by Eldon Ziegler; :issue:`3972`.)"
msgstr ""

# 07cd83d8b4af430f8d15ae43b07b7892
#: whatsnew/2.7.rst:1458
msgid ""
"The :meth:`~socket.socket.recv_into` and :meth:`~socket.socket."
"recvfrom_into` methods will now write into objects that support the buffer "
"API, most usefully the :class:`bytearray` and :class:`memoryview` objects.  "
"(Implemented by Antoine Pitrou; :issue:`8104`.)"
msgstr ""

# 405fd6521aa94689a6bb26565c04e988
#: whatsnew/2.7.rst:1463
msgid ""
"The :mod:`SocketServer` module's :class:`~SocketServer.TCPServer` class now "
"supports socket timeouts and disabling the Nagle algorithm. The :attr:"
"`~SocketServer.TCPServer.disable_nagle_algorithm` class attribute defaults "
"to False; if overridden to be True, new request connections will have the "
"TCP_NODELAY option set to prevent buffering many small sends into a single "
"TCP packet. The :attr:`~SocketServer.TCPServer.timeout` class attribute can "
"hold a timeout in seconds that will be applied to the request socket; if no "
"request is received within that time, :meth:`handle_timeout` will be called "
"and :meth:`handle_request` will return. (Contributed by Kristján Valur "
"Jónsson; :issue:`6192` and :issue:`6267`.)"
msgstr ""

# bca4780d0e164a7a970fa24d8a1713f4
#: whatsnew/2.7.rst:1475
msgid ""
"Updated module: the :mod:`sqlite3` module has been updated to version 2.6.0 "
"of the `pysqlite package <http://code.google.com/p/pysqlite/>`__. Version "
"2.6.0 includes a number of bugfixes, and adds the ability to load SQLite "
"extensions from shared libraries. Call the ``enable_load_extension(True)`` "
"method to enable extensions, and then call :meth:`~sqlite3.Connection."
"load_extension` to load a particular shared library. (Updated by Gerhard "
"Häring.)"
msgstr ""

# 9c3a4e00076547e593def79c5295a82e
#: whatsnew/2.7.rst:1482
msgid ""
"The :mod:`ssl` module's :class:`ssl.SSLSocket` objects now support the "
"buffer API, which fixed a test suite failure (fix by Antoine Pitrou; :issue:"
"`7133`) and automatically set OpenSSL's :c:macro:`SSL_MODE_AUTO_RETRY`, "
"which will prevent an error code being returned from :meth:`recv` operations "
"that trigger an SSL renegotiation (fix by Antoine Pitrou; :issue:`8222`)."
msgstr ""

# 480b32152327429e8322dbc794acf36d
#: whatsnew/2.7.rst:1489
msgid ""
"The :func:`ssl.wrap_socket` constructor function now takes a *ciphers* "
"argument that's a string listing the encryption algorithms to be allowed; "
"the format of the string is described `in the OpenSSL documentation <http://"
"www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT>`__. (Added by "
"Antoine Pitrou; :issue:`8322`.)"
msgstr ""

# 85f22eeb20234ca38bcfd2e66047d77d
#: whatsnew/2.7.rst:1496
msgid ""
"Another change makes the extension load all of OpenSSL's ciphers and digest "
"algorithms so that they're all available.  Some SSL certificates couldn't be "
"verified, reporting an \"unknown algorithm\" error.  (Reported by Beda "
"Kosata, and fixed by Antoine Pitrou; :issue:`8484`.)"
msgstr ""

# c8fbae1d583c420295c2f617decb4273
#: whatsnew/2.7.rst:1502
msgid ""
"The version of OpenSSL being used is now available as the module attributes :"
"data:`ssl.OPENSSL_VERSION` (a string), :data:`ssl.OPENSSL_VERSION_INFO` (a 5-"
"tuple), and :data:`ssl.OPENSSL_VERSION_NUMBER` (an integer).  (Added by "
"Antoine Pitrou; :issue:`8321`.)"
msgstr ""

# 99cdf487f5a94d9eaf8bcbe25fe4e6a6
#: whatsnew/2.7.rst:1508
msgid ""
"The :mod:`struct` module will no longer silently ignore overflow errors when "
"a value is too large for a particular integer format code (one of "
"``bBhHiIlLqQ``); it now always raises a :exc:`struct.error` exception.  "
"(Changed by Mark Dickinson; :issue:`1523`.)  The :func:`~struct.pack` "
"function will also attempt to use :meth:`__index__` to convert and pack non-"
"integers before trying the :meth:`__int__` method or reporting an error. "
"(Changed by Mark Dickinson; :issue:`8300`.)"
msgstr ""

# d116000901f3461ea5157182f184e783
#: whatsnew/2.7.rst:1517
msgid ""
"New function: the :mod:`subprocess` module's :func:`~subprocess."
"check_output` runs a command with a specified set of arguments and returns "
"the command's output as a string when the command runs without error, or "
"raises a :exc:`~subprocess.CalledProcessError` exception otherwise."
msgstr ""

# 2630affb3a334a1d942067c034e67f4a
#: whatsnew/2.7.rst:1532
msgid "(Contributed by Gregory P. Smith.)"
msgstr ""

# 154f660eb5774b42b10cda9ad64ab757
#: whatsnew/2.7.rst:1534
msgid ""
"The :mod:`subprocess` module will now retry its internal system calls on "
"receiving an :const:`EINTR` signal.  (Reported by several people; final "
"patch by Gregory P. Smith in :issue:`1068268`.)"
msgstr ""

# de1414582f8143ed9bb60c9e1e7e04c2
#: whatsnew/2.7.rst:1538
msgid ""
"New function: :func:`~symtable.is_declared_global` in the :mod:`symtable` "
"module returns true for variables that are explicitly declared to be global, "
"false for ones that are implicitly global. (Contributed by Jeremy Hylton.)"
msgstr ""

# 67a2896d9b684ae194e38c3d14219865
# 2d1c7e5bfa8b48ca9859806cf0863f42
#: whatsnew/2.7.rst:1543 whatsnew/2.7.rst:2418
msgid ""
"The :mod:`syslog` module will now use the value of ``sys.argv[0]`` as the "
"identifier instead of the previous default value of ``'python'``. (Changed "
"by Sean Reifschneider; :issue:`8451`.)"
msgstr ""

# 9db61de5c3654790ac36eac5194094ff
#: whatsnew/2.7.rst:1547
msgid ""
"The ``sys.version_info`` value is now a named tuple, with attributes named :"
"attr:`major`, :attr:`minor`, :attr:`micro`, :attr:`releaselevel`, and :attr:"
"`serial`.  (Contributed by Ross Light; :issue:`4285`.)"
msgstr ""

# 7ac5540cddab4d70ac383524d56ab02a
#: whatsnew/2.7.rst:1552
msgid ""
":func:`sys.getwindowsversion` also returns a named tuple, with attributes "
"named :attr:`major`, :attr:`minor`, :attr:`build`, :attr:`platform`, :attr:"
"`service_pack`, :attr:`service_pack_major`, :attr:`service_pack_minor`, :"
"attr:`suite_mask`, and :attr:`product_type`.  (Contributed by Brian Curtin; :"
"issue:`7766`.)"
msgstr ""

# f6361c21a58849f181fd4ae7471f7667
# 5df69ab953534e41907a7d978c7337af
#: whatsnew/2.7.rst:1558 whatsnew/2.7.rst:2422
msgid ""
"The :mod:`tarfile` module's default error handling has changed, to no longer "
"suppress fatal errors.  The default error level was previously 0, which "
"meant that errors would only result in a message being written to the debug "
"log, but because the debug log is not activated by default, these errors go "
"unnoticed.  The default error level is now 1, which raises an exception if "
"there's an error. (Changed by Lars Gustäbel; :issue:`7357`.)"
msgstr ""

# 8ce463dcd26e44e99e5586464404751e
#: whatsnew/2.7.rst:1566
msgid ""
":mod:`tarfile` now supports filtering the :class:`~tarfile.TarInfo` objects "
"being added to a tar file.  When you call :meth:`~tarfile.TarFile.add`, you "
"may supply an optional *filter* argument that's a callable.  The *filter* "
"callable will be passed the :class:`~tarfile.TarInfo` for every file being "
"added, and can modify and return it. If the callable returns ``None``, the "
"file will be excluded from the resulting archive.  This is more powerful "
"than the existing *exclude* argument, which has therefore been deprecated. "
"(Added by Lars Gustäbel; :issue:`6856`.) The :class:`~tarfile.TarFile` class "
"also now supports the context manager protocol. (Added by Lars Gustäbel; :"
"issue:`7232`.)"
msgstr ""

# 8f8ae3e8d9764034b30d9dac8fd14e94
#: whatsnew/2.7.rst:1578
msgid ""
"The :meth:`~threading.Event.wait` method of the :class:`threading.Event` "
"class now returns the internal flag on exit.  This means the method will "
"usually return true because :meth:`~threading.Event.wait` is supposed to "
"block until the internal flag becomes true.  The return value will only be "
"false if a timeout was provided and the operation timed out. (Contributed by "
"Tim Lesher; :issue:`1674032`.)"
msgstr ""

# 41034e03a0894ecf9378a2c74824f982
#: whatsnew/2.7.rst:1585
msgid ""
"The Unicode database provided by the :mod:`unicodedata` module is now used "
"internally to determine which characters are numeric, whitespace, or "
"represent line breaks.  The database also includes information from the :"
"file:`Unihan.txt` data file (patch by Anders Chrigström and Amaury Forgeot "
"d'Arc; :issue:`1571184`) and has been updated to version 5.2.0 (updated by "
"Florent Xicluna; :issue:`8024`)."
msgstr ""

# c210f95450b54e17985be99532af82e3
# 33eb86576201496ea80bc3886af72cfc
#: whatsnew/2.7.rst:1593 whatsnew/2.7.rst:2430
msgid ""
"The :mod:`urlparse` module's :func:`~urlparse.urlsplit` now handles unknown "
"URL schemes in a fashion compliant with :rfc:`3986`: if the URL is of the "
"form ``\"<something>://...\"``, the text before the ``://`` is treated as "
"the scheme, even if it's a made-up scheme that the module doesn't know "
"about.  This change may break code that worked around the old behaviour.  "
"For example, Python 2.6.4 or 2.5 will return the following:"
msgstr ""

# 0d7549a3011d4313ad92bd6225ca8ec9
# be77f156517342fa9d0383cd88979b36
#: whatsnew/2.7.rst:1605 whatsnew/2.7.rst:2442
msgid "Python 2.7 (and Python 2.6.5) will return:"
msgstr ""

# e48aa55ca48f44bba0cfad3a95014344
# 6b9ba8368fbc45caba6609bd833c5b10
#: whatsnew/2.7.rst:1611 whatsnew/2.7.rst:2448
msgid ""
"(Python 2.7 actually produces slightly different output, since it returns a "
"named tuple instead of a standard tuple.)"
msgstr ""

# ce07bc673a9d4958b2d5a42f4aa9d8d9
#: whatsnew/2.7.rst:1614
msgid ""
"The :mod:`urlparse` module also supports IPv6 literal addresses as defined "
"by :rfc:`2732` (contributed by Senthil Kumaran; :issue:`2987`). ::"
msgstr ""

# 4a827ce0d01c4ed3995bd7d32da6c68c
#: whatsnew/2.7.rst:1621
msgid ""
"New class: the :class:`~weakref.WeakSet` class in the :mod:`weakref` module "
"is a set that only holds weak references to its elements; elements will be "
"removed once there are no references pointing to them. (Originally "
"implemented in Python 3.x by Raymond Hettinger, and backported to 2.7 by "
"Michael Foord.)"
msgstr ""

# 115d7216a24d4d598e011f127a1fc976
#: whatsnew/2.7.rst:1627
msgid ""
"The ElementTree library, :mod:`xml.etree`, no longer escapes ampersands and "
"angle brackets when outputting an XML processing instruction (which looks "
"like ``<?xml-stylesheet href=\"#style1\"?>``) or comment (which looks like "
"``<!-- comment -->``). (Patch by Neil Muller; :issue:`2746`.)"
msgstr ""

# f4f6772d080743c38f4f87219834745a
#: whatsnew/2.7.rst:1633
msgid ""
"The XML-RPC client and server, provided by the :mod:`xmlrpclib` and :mod:"
"`SimpleXMLRPCServer` modules, have improved performance by supporting "
"HTTP/1.1 keep-alive and by optionally using gzip encoding to compress the "
"XML being exchanged.  The gzip compression is controlled by the :attr:"
"`encode_threshold` attribute of :class:`SimpleXMLRPCRequestHandler`, which "
"contains a size in bytes; responses larger than this will be compressed. "
"(Contributed by Kristján Valur Jónsson; :issue:`6267`.)"
msgstr ""

# 8f72f0b3526d417785e3eea243a436f5
#: whatsnew/2.7.rst:1642
msgid ""
"The :mod:`zipfile` module's :class:`~zipfile.ZipFile` now supports the "
"context management protocol, so you can write ``with zipfile.ZipFile(...) as "
"f:``. (Contributed by Brian Curtin; :issue:`5511`.)"
msgstr ""

# c0fb1e665488451cbfe617b913977319
#: whatsnew/2.7.rst:1646
msgid ""
":mod:`zipfile` now also supports archiving empty directories and extracts "
"them correctly.  (Fixed by Kuba Wieczorek; :issue:`4710`.) Reading files out "
"of an archive is faster, and interleaving :meth:`~zipfile.ZipFile.read` and :"
"meth:`~zipfile.ZipFile.readline` now works correctly. (Contributed by Nir "
"Aides; :issue:`7610`.)"
msgstr ""

# b77fbf8ad0ea441e9e528cc812888cf7
#: whatsnew/2.7.rst:1652
msgid ""
"The :func:`~zipfile.is_zipfile` function now accepts a file object, in "
"addition to the path names accepted in earlier versions.  (Contributed by "
"Gabriel Genellina; :issue:`4756`.)"
msgstr ""

# 2c25b8365e754eb898ab507fafa4152d
#: whatsnew/2.7.rst:1656
msgid ""
"The :meth:`~zipfile.ZipFile.writestr` method now has an optional "
"*compress_type* parameter that lets you override the default compression "
"method specified in the :class:`~zipfile.ZipFile` constructor.  (Contributed "
"by Ronald Oussoren; :issue:`6003`.)"
msgstr ""

# 2b7479175bcf4b18bf16972c7e0ddb81
#: whatsnew/2.7.rst:1669
msgid "New module: importlib"
msgstr ""

# 3a3714da7efb41cba5bd4fc02d684515
#: whatsnew/2.7.rst:1671
msgid ""
"Python 3.1 includes the :mod:`importlib` package, a re-implementation of the "
"logic underlying Python's :keyword:`import` statement. :mod:`importlib` is "
"useful for implementors of Python interpreters and to users who wish to "
"write new importers that can participate in the import process.  Python 2.7 "
"doesn't contain the complete :mod:`importlib` package, but instead has a "
"tiny subset that contains a single function, :func:`~importlib."
"import_module`."
msgstr ""

# c0b99bb361ac43d782d1a34a304b2c4a
#: whatsnew/2.7.rst:1679
msgid ""
"``import_module(name, package=None)`` imports a module.  *name* is a string "
"containing the module or package's name.  It's possible to do relative "
"imports by providing a string that begins with a ``.`` character, such as "
"``..utils.errors``.  For relative imports, the *package* argument must be "
"provided and is the name of the package that will be used as the anchor for "
"the relative import.  :func:`~importlib.import_module` both inserts the "
"imported module into ``sys.modules`` and returns the module object."
msgstr ""

# ade5652493d84a1a85b9851b8dee4f89
#: whatsnew/2.7.rst:1688
msgid "Here are some examples::"
msgstr ""

# bfd20f43b5b84d03a16c364008bf13cc
#: whatsnew/2.7.rst:1699
msgid ""
":mod:`importlib` was implemented by Brett Cannon and introduced in Python "
"3.1."
msgstr ""

# 0de9fa43d7b548b3beda318fbf064172
#: whatsnew/2.7.rst:1704
msgid "New module: sysconfig"
msgstr ""

# 8f89c3bd842c41b1b03806389a42668c
#: whatsnew/2.7.rst:1706
msgid ""
"The :mod:`sysconfig` module has been pulled out of the Distutils package, "
"becoming a new top-level module in its own right. :mod:`sysconfig` provides "
"functions for getting information about Python's build process: compiler "
"switches, installation paths, the platform name, and whether Python is "
"running from its source directory."
msgstr ""

# 8aea95bf1deb401fa2724fbaaa84efc5
#: whatsnew/2.7.rst:1713
msgid "Some of the functions in the module are:"
msgstr ""

# b1f6205011e14529b98397d3134024c0
#: whatsnew/2.7.rst:1715
msgid ""
":func:`~sysconfig.get_config_var` returns variables from Python's Makefile "
"and the :file:`pyconfig.h` file."
msgstr ""

# 250a0bc414ed4021ba81590597885af0
#: whatsnew/2.7.rst:1717
msgid ""
":func:`~sysconfig.get_config_vars` returns a dictionary containing all of "
"the configuration variables."
msgstr ""

# 3f8e3cd7309c4f56898046b01826c86f
#: whatsnew/2.7.rst:1719
msgid ""
":func:`~sysconfig.getpath` returns the configured path for a particular type "
"of module: the standard library, site-specific modules, platform-specific "
"modules, etc."
msgstr ""

# aad2e382b38040d4af410f9f9a2802d6
#: whatsnew/2.7.rst:1722
msgid ""
":func:`~sysconfig.is_python_build` returns true if you're running a binary "
"from a Python source tree, and false otherwise."
msgstr ""

# 845ad00b9f694b88afbf91026b7a7473
#: whatsnew/2.7.rst:1725
msgid ""
"Consult the :mod:`sysconfig` documentation for more details and for a "
"complete list of functions."
msgstr ""

# 38623ff82b1b43758d7d440ab223c972
#: whatsnew/2.7.rst:1728
msgid ""
"The Distutils package and :mod:`sysconfig` are now maintained by Tarek "
"Ziadé, who has also started a Distutils2 package (source repository at "
"http://hg.python.org/distutils2/) for developing a next-generation version "
"of Distutils."
msgstr ""

# bd8bba6b0a0e4b808a56861c92a03ab2
#: whatsnew/2.7.rst:1735
msgid "ttk: Themed Widgets for Tk"
msgstr ""

# e912b5ef899e475d8ec49ee5d14bbeb6
#: whatsnew/2.7.rst:1737
msgid ""
"Tcl/Tk 8.5 includes a set of themed widgets that re-implement basic Tk "
"widgets but have a more customizable appearance and can therefore more "
"closely resemble the native platform's widgets.  This widget set was "
"originally called Tile, but was renamed to Ttk (for \"themed Tk\") on being "
"added to Tcl/Tck release 8.5."
msgstr ""

# 588bfcfc07c0498eb3c928216a8dec25
#: whatsnew/2.7.rst:1743
msgid ""
"To learn more, read the :mod:`ttk` module documentation.  You may also wish "
"to read the Tcl/Tk manual page describing the Ttk theme engine, available at "
"http://www.tcl.tk/man/tcl8.5/TkCmd/ttk_intro.htm. Some screenshots of the "
"Python/Ttk code in use are at http://code.google.com/p/python-ttk/wiki/"
"Screenshots."
msgstr ""

# c5d0cd3796544d5bb3cc40f80c5832c4
#: whatsnew/2.7.rst:1750
msgid ""
"The :mod:`ttk` module was written by Guilherme Polo and added in :issue:"
"`2983`.  An alternate version called ``Tile.py``, written by Martin Franklin "
"and maintained by Kevin Walzer, was proposed for inclusion in :issue:`2618`, "
"but the authors argued that Guilherme Polo's work was more comprehensive."
msgstr ""

# 793612fa172943e19e19e2fdbdde199e
#: whatsnew/2.7.rst:1760
msgid "Updated module: unittest"
msgstr ""

# 2a68c31d5b1d4297a4791abc2ea79ede
#: whatsnew/2.7.rst:1762
msgid ""
"The :mod:`unittest` module was greatly enhanced; many new features were "
"added.  Most of these features were implemented by Michael Foord, unless "
"otherwise noted.  The enhanced version of the module is downloadable "
"separately for use with Python versions 2.4 to 2.6, packaged as the :mod:"
"`unittest2` package, from http://pypi.python.org/pypi/unittest2."
msgstr ""

# 49000741eece4b6c9623f1d30a124f77
#: whatsnew/2.7.rst:1769
msgid ""
"When used from the command line, the module can automatically discover "
"tests.  It's not as fancy as `py.test <http://pytest.org>`__ or `nose "
"<http://code.google.com/p/python-nose/>`__, but provides a simple way to run "
"tests kept within a set of package directories.  For example, the following "
"command will search the :file:`test/` subdirectory for any importable test "
"files named ``test*.py``::"
msgstr ""

# 085fd66f375e4c95b36b9485bd697e9a
#: whatsnew/2.7.rst:1778
msgid ""
"Consult the :mod:`unittest` module documentation for more details. "
"(Developed in :issue:`6001`.)"
msgstr ""

# 5e0c7bae1bc64cb492bd3b496a43b462
#: whatsnew/2.7.rst:1781
msgid "The :func:`main` function supports some other new options:"
msgstr ""

# 86fc3ee055bf436bb1f8b426829b2473
#: whatsnew/2.7.rst:1783
msgid ""
":option:`-b` or :option:`--buffer` will buffer the standard output and "
"standard error streams during each test.  If the test passes, any resulting "
"output will be discarded; on failure, the buffered output will be displayed."
msgstr ""

# 111d935c1b1b4a95968ae5df5d9dc268
#: whatsnew/2.7.rst:1788
msgid ""
":option:`-c` or :option:`--catch` will cause the control-C interrupt to be "
"handled more gracefully.  Instead of interrupting the test process "
"immediately, the currently running test will be completed and then the "
"partial results up to the interruption will be reported. If you're "
"impatient, a second press of control-C will cause an immediate interruption."
msgstr ""

# 007fac7db7bb4297942780e32105c0ae
#: whatsnew/2.7.rst:1795
msgid ""
"This control-C handler tries to avoid causing problems when the code being "
"tested or the tests being run have defined a signal handler of their own, by "
"noticing that a signal handler was already set and calling it.  If this "
"doesn't work for you, there's a :func:`removeHandler` decorator that can be "
"used to mark tests that should have the control-C handling disabled."
msgstr ""

# 79d760698d054248bc7dab3d8edc448a
#: whatsnew/2.7.rst:1802
msgid ""
":option:`-f` or :option:`--failfast` makes test execution stop immediately "
"when a test fails instead of continuing to execute further tests.  "
"(Suggested by Cliff Dyer and implemented by Michael Foord; :issue:`8074`.)"
msgstr ""

# 91cc0e31ad5443a7b9a2690388d0f9c5
#: whatsnew/2.7.rst:1807
msgid ""
"The progress messages now show 'x' for expected failures and 'u' for "
"unexpected successes when run in verbose mode. (Contributed by Benjamin "
"Peterson.)"
msgstr ""

# a055151d1c5945978101bedc7bc28206
#: whatsnew/2.7.rst:1811
msgid ""
"Test cases can raise the :exc:`~unittest.SkipTest` exception to skip a test "
"(:issue:`1034053`)."
msgstr ""

# add815568c5140a8ae79122b2a2e5e8f
#: whatsnew/2.7.rst:1814
msgid ""
"The error messages for :meth:`~unittest.TestCase.assertEqual`, :meth:"
"`~unittest.TestCase.assertTrue`, and :meth:`~unittest.TestCase.assertFalse` "
"failures now provide more information.  If you set the :attr:`~unittest."
"TestCase.longMessage` attribute of your :class:`~unittest.TestCase` classes "
"to True, both the standard error message and any additional message you "
"provide will be printed for failures.  (Added by Michael Foord; :issue:"
"`5663`.)"
msgstr ""

# e2aa11eec2504782a47f28c0b5d1988f
#: whatsnew/2.7.rst:1821
msgid ""
"The :meth:`~unittest.TestCase.assertRaises` method now returns a context "
"handler when called without providing a callable object to run.  For "
"example, you can write this::"
msgstr ""

# c747e7afba8843c1a63920519d4c92c9
#: whatsnew/2.7.rst:1828
msgid "(Implemented by Antoine Pitrou; :issue:`4444`.)"
msgstr ""

# 53a5ec9d4a55460a9584504ba551070a
#: whatsnew/2.7.rst:1832
msgid ""
"Module- and class-level setup and teardown fixtures are now supported. "
"Modules can contain :func:`~unittest.setUpModule` and :func:`~unittest."
"tearDownModule` functions.  Classes can have :meth:`~unittest.TestCase."
"setUpClass` and :meth:`~unittest.TestCase.tearDownClass` methods that must "
"be defined as class methods (using ``@classmethod`` or equivalent).  These "
"functions and methods are invoked when the test runner switches to a test "
"case in a different module or class."
msgstr ""

# cdc0fa21bf0b4b10854e23f242fee265
#: whatsnew/2.7.rst:1840
msgid ""
"The methods :meth:`~unittest.TestCase.addCleanup` and :meth:`~unittest."
"TestCase.doCleanups` were added. :meth:`~unittest.TestCase.addCleanup` lets "
"you add cleanup functions that will be called unconditionally (after :meth:"
"`~unittest.TestCase.setUp` if :meth:`~unittest.TestCase.setUp` fails, "
"otherwise after :meth:`~unittest.TestCase.tearDown`). This allows for much "
"simpler resource allocation and deallocation during tests (:issue:`5679`)."
msgstr ""

# 210637ff8a004611b92b5971f8b87766
#: whatsnew/2.7.rst:1848
msgid ""
"A number of new methods were added that provide more specialized tests.  "
"Many of these methods were written by Google engineers for use in their test "
"suites; Gregory P. Smith, Michael Foord, and GvR worked on merging them into "
"Python's version of :mod:`unittest`."
msgstr ""

# 77f615c1e56d45b1888f3531e95082f5
#: whatsnew/2.7.rst:1853
msgid ""
":meth:`~unittest.TestCase.assertIsNone` and :meth:`~unittest.TestCase."
"assertIsNotNone` take one expression and verify that the result is or is not "
"``None``."
msgstr ""

# 8bee43fd85a4428a8ef7f1fb406fdf1c
#: whatsnew/2.7.rst:1856
msgid ""
":meth:`~unittest.TestCase.assertIs` and :meth:`~unittest.TestCase."
"assertIsNot` take two values and check whether the two values evaluate to "
"the same object or not. (Added by Michael Foord; :issue:`2578`.)"
msgstr ""

# 39f537fa1f3e4813991458ee5bcad968
#: whatsnew/2.7.rst:1860
msgid ""
":meth:`~unittest.TestCase.assertIsInstance` and :meth:`~unittest.TestCase."
"assertNotIsInstance` check whether the resulting object is an instance of a "
"particular class, or of one of a tuple of classes.  (Added by Georg Brandl; :"
"issue:`7031`.)"
msgstr ""

# e4b451a21f604136a9d1497d3bbc576e
#: whatsnew/2.7.rst:1865
msgid ""
":meth:`~unittest.TestCase.assertGreater`, :meth:`~unittest.TestCase."
"assertGreaterEqual`, :meth:`~unittest.TestCase.assertLess`, and :meth:"
"`~unittest.TestCase.assertLessEqual` compare two quantities."
msgstr ""

# b8bc3810aa6444cb9802ae3aa24e4d92
#: whatsnew/2.7.rst:1869
msgid ""
":meth:`~unittest.TestCase.assertMultiLineEqual` compares two strings, and if "
"they're not equal, displays a helpful comparison that highlights the "
"differences in the two strings.  This comparison is now used by default when "
"Unicode strings are compared with :meth:`~unittest.TestCase.assertEqual`."
msgstr ""

# d03e5616d6934f779d921b2618a2e054
#: whatsnew/2.7.rst:1874
msgid ""
":meth:`~unittest.TestCase.assertRegexpMatches` and :meth:`~unittest.TestCase."
"assertNotRegexpMatches` checks whether the first argument is a string "
"matching or not matching the regular expression provided as the second "
"argument (:issue:`8038`)."
msgstr ""

# f65428b1d49a445da49c423e36447e8e
#: whatsnew/2.7.rst:1879
msgid ""
":meth:`~unittest.TestCase.assertRaisesRegexp` checks whether a particular "
"exception is raised, and then also checks that the string representation of "
"the exception matches the provided regular expression."
msgstr ""

# dfc57ddd8c15467e8968fa75bd7de7b3
#: whatsnew/2.7.rst:1883
msgid ""
":meth:`~unittest.TestCase.assertIn` and :meth:`~unittest.TestCase."
"assertNotIn` tests whether *first* is or is not in  *second*."
msgstr ""

# c587ae43f0f642f4add1987bb30e1e33
#: whatsnew/2.7.rst:1886
msgid ""
":meth:`~unittest.TestCase.assertItemsEqual` tests whether two provided "
"sequences contain the same elements."
msgstr ""

# d6f2cdb62c03456aa3e5d7cf85fbef24
#: whatsnew/2.7.rst:1889
msgid ""
":meth:`~unittest.TestCase.assertSetEqual` compares whether two sets are "
"equal, and only reports the differences between the sets in case of error."
msgstr ""

# c71897052cc64470a49736498b926279
#: whatsnew/2.7.rst:1892
msgid ""
"Similarly, :meth:`~unittest.TestCase.assertListEqual` and :meth:`~unittest."
"TestCase.assertTupleEqual` compare the specified types and explain any "
"differences without necessarily printing their full values; these methods "
"are now used by default when comparing lists and tuples using :meth:"
"`~unittest.TestCase.assertEqual`. More generally, :meth:`~unittest.TestCase."
"assertSequenceEqual` compares two sequences and can optionally check whether "
"both sequences are of a particular type."
msgstr ""

# 31eba7bef58e46a3b2521c4ee475d830
#: whatsnew/2.7.rst:1900
msgid ""
":meth:`~unittest.TestCase.assertDictEqual` compares two dictionaries and "
"reports the differences; it's now used by default when you compare two "
"dictionaries using :meth:`~unittest.TestCase.assertEqual`.  :meth:`~unittest."
"TestCase.assertDictContainsSubset` checks whether all of the key/value pairs "
"in *first* are found in *second*."
msgstr ""

# 876d6be319a84d55baf65ce2c0114a0e
#: whatsnew/2.7.rst:1905
msgid ""
":meth:`~unittest.TestCase.assertAlmostEqual` and :meth:`~unittest.TestCase."
"assertNotAlmostEqual` test whether *first* and *second* are approximately "
"equal.  This method can either round their difference to an optionally-"
"specified number of *places* (the default is 7) and compare it to zero, or "
"require the difference to be smaller than a supplied *delta* value."
msgstr ""

# 26cae5dbfbc3490a9587833fdf688fbc
#: whatsnew/2.7.rst:1911
msgid ""
":meth:`~unittest.TestLoader.loadTestsFromName` properly honors the :attr:"
"`~unittest.TestLoader.suiteClass` attribute of the :class:`~unittest."
"TestLoader`. (Fixed by Mark Roddy; :issue:`6866`.)"
msgstr ""

# 172c21629e434aaaa5a4273151b64b91
#: whatsnew/2.7.rst:1915
msgid ""
"A new hook lets you extend the :meth:`~unittest.TestCase.assertEqual` method "
"to handle new data types.  The :meth:`~unittest.TestCase."
"addTypeEqualityFunc` method takes a type object and a function. The function "
"will be used when both of the objects being compared are of the specified "
"type.  This function should compare the two objects and raise an exception "
"if they don't match; it's a good idea for the function to provide additional "
"information about why the two objects aren't matching, much as the new "
"sequence comparison methods do."
msgstr ""

# 2a8388a1d79443aab590daecfeef6155
#: whatsnew/2.7.rst:1924
msgid ""
":func:`unittest.main` now takes an optional ``exit`` argument.  If False, :"
"func:`~unittest.main` doesn't call :func:`sys.exit`, allowing :func:`main` "
"to be used from the interactive interpreter. (Contributed by J. Pablo "
"Fernández; :issue:`3379`.)"
msgstr ""

# ff9d0450d6b34e918631d5b8cd268564
#: whatsnew/2.7.rst:1929
msgid ""
":class:`~unittest.TestResult` has new :meth:`~unittest.TestResult."
"startTestRun` and :meth:`~unittest.TestResult.stopTestRun` methods that are "
"called immediately before and after a test run.  (Contributed by Robert "
"Collins; :issue:`5728`.)"
msgstr ""

# f6f9bac45def47cd9ad993c133cc0637
#: whatsnew/2.7.rst:1933
msgid ""
"With all these changes, the :file:`unittest.py` was becoming awkwardly "
"large, so the module was turned into a package and the code split into "
"several files (by Benjamin Peterson).  This doesn't affect how the module is "
"imported or used."
msgstr ""

# e764d6b2eb1440b2a7c1c045023416e4
#: whatsnew/2.7.rst:1941
msgid "http://www.voidspace.org.uk/python/articles/unittest2.shtml"
msgstr ""

# 6b1f8661f59342dc94845de166c7f0dd
#: whatsnew/2.7.rst:1941
msgid ""
"Describes the new features, how to use them, and the rationale for various "
"design decisions.  (By Michael Foord.)"
msgstr ""

# c4150a8b09644adcacbd79ecee26520b
#: whatsnew/2.7.rst:1947
msgid "Updated module: ElementTree 1.3"
msgstr ""

# 545702d9b3f4430a9a589b4bdb264a56
#: whatsnew/2.7.rst:1949
msgid ""
"The version of the ElementTree library included with Python was updated to "
"version 1.3.  Some of the new features are:"
msgstr ""

# e01b7e571db049c0825a3f0729eb80d3
#: whatsnew/2.7.rst:1952
msgid ""
"The various parsing functions now take a *parser* keyword argument giving "
"an :class:`~xml.etree.ElementTree.XMLParser` instance that will be used.  "
"This makes it possible to override the file's internal encoding::"
msgstr ""

# d9c12745669e48f381abef6959a15961
#: whatsnew/2.7.rst:1959
msgid ""
"Errors in parsing XML now raise a :exc:`ParseError` exception, whose "
"instances have a :attr:`position` attribute containing a (*line*, *column*) "
"tuple giving the location of the problem."
msgstr ""

# a42c0e46bb0b4cd9919609db888dd399
#: whatsnew/2.7.rst:1963
msgid ""
"ElementTree's code for converting trees to a string has been significantly "
"reworked, making it roughly twice as fast in many cases.  The :meth:"
"`ElementTree.write() <xml.etree.ElementTree.ElementTree.write>` and :meth:"
"`Element.write` methods now have a *method* parameter that can be \"xml"
"\" (the default), \"html\", or \"text\".  HTML mode will output empty "
"elements as ``<empty></empty>`` instead of ``<empty/>``, and text mode will "
"skip over elements and only output the text chunks.  If you set the :attr:"
"`tag` attribute of an element to ``None`` but leave its children in place, "
"the element will be omitted when the tree is written out, so you don't need "
"to do more extensive rearrangement to remove a single element."
msgstr ""

# 1b12a659bea047f6ad9013eed0f3152b
#: whatsnew/2.7.rst:1975
msgid ""
"Namespace handling has also been improved.  All ``xmlns:<whatever>`` "
"declarations are now output on the root element, not scattered throughout "
"the resulting XML.  You can set the default namespace for a tree by setting "
"the :attr:`default_namespace` attribute and can register new prefixes with :"
"meth:`~xml.etree.ElementTree.register_namespace`.  In XML mode, you can use "
"the true/false *xml_declaration* parameter to suppress the XML declaration."
msgstr ""

# 355f4e71abed4a51ab84711d9acadabc
#: whatsnew/2.7.rst:1983
msgid ""
"New :class:`~xml.etree.ElementTree.Element` method: :meth:`~xml.etree."
"ElementTree.Element.extend` appends the items from a sequence to the "
"element's children.  Elements themselves behave like sequences, so it's easy "
"to move children from one element to another::"
msgstr ""

# 0e476c86365d40f9af4d8fee27eec64f
#: whatsnew/2.7.rst:2000
msgid ""
"New :class:`Element` method: :meth:`~xml.etree.ElementTree.Element.iter` "
"yields the children of the element as a generator.  It's also possible to "
"write ``for child in elem:`` to loop over an element's children.  The "
"existing method :meth:`getiterator` is now deprecated, as is :meth:"
"`getchildren` which constructs and returns a list of children."
msgstr ""

# fd176572d658483697096e29486a090a
#: whatsnew/2.7.rst:2007
msgid ""
"New :class:`Element` method: :meth:`~xml.etree.ElementTree.Element.itertext` "
"yields all chunks of text that are descendants of the element.  For example::"
msgstr ""

# e1f2cd35e6334a03818f8780f53c6091
#: whatsnew/2.7.rst:2018
msgid ""
"Deprecated: using an element as a Boolean (i.e., ``if elem:``) would return "
"true if the element had any children, or false if there were no children.  "
"This behaviour is confusing -- ``None`` is false, but so is a childless "
"element? -- so it will now trigger a :exc:`FutureWarning`.  In your code, "
"you should be explicit: write ``len(elem) != 0`` if you're interested in the "
"number of children, or ``elem is not None``."
msgstr ""

# 064884d93186421e96a517411cc8a6d1
#: whatsnew/2.7.rst:2026
msgid ""
"Fredrik Lundh develops ElementTree and produced the 1.3 version; you can "
"read his article describing 1.3 at http://effbot.org/zone/elementtree-13-"
"intro.htm. Florent Xicluna updated the version included with Python, after "
"discussions on python-dev and in :issue:`6472`.)"
msgstr ""

# 78f19ead496a4109bf269cbf217aad22
#: whatsnew/2.7.rst:2040
msgid ""
"The latest release of the GNU Debugger, GDB 7, can be `scripted using Python "
"<http://sourceware.org/gdb/current/onlinedocs/gdb/Python.html>`__. When you "
"begin debugging an executable program P, GDB will look for a file named ``P-"
"gdb.py`` and automatically read it.  Dave Malcolm contributed a :file:"
"`python-gdb.py` that adds a number of commands useful when debugging Python "
"itself.  For example, ``py-up`` and ``py-down`` go up or down one Python "
"stack frame, which usually corresponds to several C stack frames.  ``py-"
"print`` prints the value of a Python variable, and ``py-bt`` prints the "
"Python stack trace.  (Added as a result of :issue:`8032`.)"
msgstr ""

# e3d7507addcc474badc27b4b335dfeac
#: whatsnew/2.7.rst:2052
msgid ""
"If you use the :file:`.gdbinit` file provided with Python, the \"pyo\" macro "
"in the 2.7 version now works correctly when the thread being debugged "
"doesn't hold the GIL; the macro now acquires it before printing. "
"(Contributed by Victor Stinner; :issue:`3632`.)"
msgstr ""

# f7ecab5060084c6499cb19dd94b9eac1
#: whatsnew/2.7.rst:2057
msgid ""
":c:func:`Py_AddPendingCall` is now thread-safe, letting any worker thread "
"submit notifications to the main Python thread.  This is particularly useful "
"for asynchronous IO operations. (Contributed by Kristján Valur Jónsson; :"
"issue:`4293`.)"
msgstr ""

# 329cea97c4d7482dbc5378c0ef7fe3ae
#: whatsnew/2.7.rst:2062
msgid ""
"New function: :c:func:`PyCode_NewEmpty` creates an empty code object; only "
"the filename, function name, and first line number are required. This is "
"useful for extension modules that are attempting to construct a more useful "
"traceback stack.  Previously such extensions needed to call :c:func:"
"`PyCode_New`, which had many more arguments.  (Added by Jeffrey Yasskin.)"
msgstr ""

# c6eab8386275482c8933c6fa1f8b6d32
#: whatsnew/2.7.rst:2069
msgid ""
"New function: :c:func:`PyErr_NewExceptionWithDoc` creates a new exception "
"class, just as the existing :c:func:`PyErr_NewException` does, but takes an "
"extra ``char *`` argument containing the docstring for the new exception "
"class.  (Added by 'lekma' on the Python bug tracker; :issue:`7033`.)"
msgstr ""

# 2b93a549780e4ffb8a8dd170cc17b865
#: whatsnew/2.7.rst:2075
msgid ""
"New function: :c:func:`PyFrame_GetLineNumber` takes a frame object and "
"returns the line number that the frame is currently executing. Previously "
"code would need to get the index of the bytecode instruction currently "
"executing, and then look up the line number corresponding to that address.  "
"(Added by Jeffrey Yasskin.)"
msgstr ""

# ba8454b6ad1b4b6980ec0d1bd2f84723
#: whatsnew/2.7.rst:2081
msgid ""
"New functions: :c:func:`PyLong_AsLongAndOverflow` and :c:func:"
"`PyLong_AsLongLongAndOverflow`  approximates a Python long integer as a C :c:"
"type:`long` or :c:type:`long long`. If the number is too large to fit into "
"the output type, an *overflow* flag is set and returned to the caller. "
"(Contributed by Case Van Horsen; :issue:`7528` and :issue:`7767`.)"
msgstr ""

# 2b00c7df2ac245d8a97bb26a67b92d3b
#: whatsnew/2.7.rst:2088
msgid ""
"New function: stemming from the rewrite of string-to-float conversion, a "
"new :c:func:`PyOS_string_to_double` function was added.  The old :c:func:"
"`PyOS_ascii_strtod` and :c:func:`PyOS_ascii_atof` functions are now "
"deprecated."
msgstr ""

# 648b45430e154348bc9e340533d0f845
#: whatsnew/2.7.rst:2093
msgid ""
"New function: :c:func:`PySys_SetArgvEx` sets the value of ``sys.argv`` and "
"can optionally update ``sys.path`` to include the directory containing the "
"script named by ``sys.argv[0]`` depending on the value of an *updatepath* "
"parameter."
msgstr ""

# ea3fc2f3d89e42b69e8e0f8b62facc37
#: whatsnew/2.7.rst:2098
msgid ""
"This function was added to close a security hole for applications that embed "
"Python.  The old function, :c:func:`PySys_SetArgv`, would always update "
"``sys.path``, and sometimes it would add the current directory.  This meant "
"that, if you ran an application embedding Python in a directory controlled "
"by someone else, attackers could put a Trojan-horse module in the directory "
"(say, a file named :file:`os.py`) that your application would then import "
"and run."
msgstr ""

# 1572c363ee714996ba1ead8d3759daca
#: whatsnew/2.7.rst:2106
msgid ""
"If you maintain a C/C++ application that embeds Python, check whether you're "
"calling :c:func:`PySys_SetArgv` and carefully consider whether the "
"application should be using :c:func:`PySys_SetArgvEx` with *updatepath* set "
"to false."
msgstr ""

# 7c20843005e74f688c32bd50e2688453
#: whatsnew/2.7.rst:2111
msgid ""
"Security issue reported as `CVE-2008-5983 <http://cve.mitre.org/cgi-bin/"
"cvename.cgi?name=CVE-2008-5983>`_; discussed in :issue:`5753`, and fixed by "
"Antoine Pitrou."
msgstr ""

# 41c28f5b33664778a34a9fa959e924dd
#: whatsnew/2.7.rst:2115
msgid ""
"New macros: the Python header files now define the following macros: :c:"
"macro:`Py_ISALNUM`, :c:macro:`Py_ISALPHA`, :c:macro:`Py_ISDIGIT`, :c:macro:"
"`Py_ISLOWER`, :c:macro:`Py_ISSPACE`, :c:macro:`Py_ISUPPER`, :c:macro:"
"`Py_ISXDIGIT`, and :c:macro:`Py_TOLOWER`, :c:macro:`Py_TOUPPER`. All of "
"these functions are analogous to the C standard macros for classifying "
"characters, but ignore the current locale setting, because in several places "
"Python needs to analyze characters in a locale-independent way.  (Added by "
"Eric Smith; :issue:`5793`.)"
msgstr ""

# 40950d9ca8424d0bb18c33894694c9d9
#: whatsnew/2.7.rst:2133
msgid ""
"Removed function: :c:macro:`PyEval_CallObject` is now only available as a "
"macro.  A function version was being kept around to preserve ABI linking "
"compatibility, but that was in 1997; it can certainly be deleted by now.  "
"(Removed by Antoine Pitrou; :issue:`8276`.)"
msgstr ""

# 56427a9a78c14174873a9385f93616a2
#: whatsnew/2.7.rst:2138
msgid ""
"New format codes: the :c:func:`PyFormat_FromString`, :c:func:"
"`PyFormat_FromStringV`, and :c:func:`PyErr_Format` functions now accept ``"
"%lld`` and ``%llu`` format codes for displaying C's :c:type:`long long` "
"types. (Contributed by Mark Dickinson; :issue:`7228`.)"
msgstr ""

# 669cbd5b4d3d47a0bebc3fbdc0d3dd1c
#: whatsnew/2.7.rst:2144
msgid ""
"The complicated interaction between threads and process forking has been "
"changed.  Previously, the child process created by :func:`os.fork` might "
"fail because the child is created with only a single thread running, the "
"thread performing the :func:`os.fork`. If other threads were holding a lock, "
"such as Python's import lock, when the fork was performed, the lock would "
"still be marked as \"held\" in the new process.  But in the child process "
"nothing would ever release the lock, since the other threads weren't "
"replicated, and the child process would no longer be able to perform imports."
msgstr ""

# ebafd1e3f35c4a4c92a48fb5d375c749
#: whatsnew/2.7.rst:2154
msgid ""
"Python 2.7 acquires the import lock before performing an :func:`os.fork`, "
"and will also clean up any locks created using the :mod:`threading` module.  "
"C extension modules that have internal locks, or that call :c:func:`fork()` "
"themselves, will not benefit from this clean-up."
msgstr ""

# 1a9df43540cb4a6889f9e319b28c5a88
#: whatsnew/2.7.rst:2160
msgid "(Fixed by Thomas Wouters; :issue:`1590864`.)"
msgstr ""

# 60e2dffad2ae431590aaa781337601fb
#: whatsnew/2.7.rst:2162
msgid ""
"The :c:func:`Py_Finalize` function now calls the internal :func:`threading."
"_shutdown` function; this prevents some exceptions from being raised when an "
"interpreter shuts down. (Patch by Adam Olsen; :issue:`1722344`.)"
msgstr ""

# d638594ee321441db368d7aae844e01e
#: whatsnew/2.7.rst:2167
msgid ""
"When using the :c:type:`PyMemberDef` structure to define attributes of a "
"type, Python will no longer let you try to delete or set a :const:"
"`T_STRING_INPLACE` attribute."
msgstr ""

# 040b55c7fc1441729688e8294d5a37af
#: whatsnew/2.7.rst:2173
msgid ""
"Global symbols defined by the :mod:`ctypes` module are now prefixed with "
"``Py``, or with ``_ctypes``.  (Implemented by Thomas Heller; :issue:`3102`.)"
msgstr ""

# e4e5d6c914604bc19865b6ddebf74f48
#: whatsnew/2.7.rst:2177
msgid ""
"New configure option: the :option:`--with-system-expat` switch allows "
"building the :mod:`pyexpat` module to use the system Expat library. "
"(Contributed by Arfrever Frehtes Taifersar Arahesis; :issue:`7609`.)"
msgstr ""

# b82f429fcabf4926a588a12b318e4978
#: whatsnew/2.7.rst:2181
msgid ""
"New configure option: the :option:`--with-valgrind` option will now disable "
"the pymalloc allocator, which is difficult for the Valgrind memory-error "
"detector to analyze correctly. Valgrind will therefore be better at "
"detecting memory leaks and overruns. (Contributed by James Henstridge; :"
"issue:`2422`.)"
msgstr ""

# 1ec6dcbae0c043d98d9def8474869b0e
#: whatsnew/2.7.rst:2188
msgid ""
"New configure option: you can now supply an empty string to :option:`--with-"
"dbmliborder=` in order to disable all of the various DBM modules.  (Added by "
"Arfrever Frehtes Taifersar Arahesis; :issue:`6491`.)"
msgstr ""

# 0cb41cd0b3f84526b579343fd6830142
#: whatsnew/2.7.rst:2193
msgid ""
"The :program:`configure` script now checks for floating-point rounding bugs "
"on certain 32-bit Intel chips and defines a :c:macro:`X87_DOUBLE_ROUNDING` "
"preprocessor definition.  No code currently uses this definition, but it's "
"available if anyone wishes to use it. (Added by Mark Dickinson; :issue:"
"`2937`.)"
msgstr ""

# 7945ed85478347e48bee794adcfbb157
#: whatsnew/2.7.rst:2199
msgid ""
":program:`configure` also now sets a :envvar:`LDCXXSHARED` Makefile variable "
"for supporting C++ linking.  (Contributed by Arfrever Frehtes Taifersar "
"Arahesis; :issue:`1222585`.)"
msgstr ""

# 55669083da3f4778bbb6c43105d8c31c
#: whatsnew/2.7.rst:2203
msgid ""
"The build process now creates the necessary files for pkg-config support.  "
"(Contributed by Clinton Roy; :issue:`3585`.)"
msgstr ""

# 115dc7a087af40d1af43eef38546af00
#: whatsnew/2.7.rst:2206
msgid ""
"The build process now supports Subversion 1.7.  (Contributed by Arfrever "
"Frehtes Taifersar Arahesis; :issue:`6094`.)"
msgstr ""

# cf3e75348f8e4c7999d1cc7088c9191f
#: whatsnew/2.7.rst:2213
msgid "Capsules"
msgstr "Capsules"

# 6f24690277994c3faaaac3aea9bf696a
#: whatsnew/2.7.rst:2215
msgid ""
"Python 3.1 adds a new C datatype, :c:type:`PyCapsule`, for providing a C API "
"to an extension module.  A capsule is essentially the holder of a C ``void "
"*`` pointer, and is made available as a module attribute; for example, the :"
"mod:`socket` module's API is exposed as ``socket.CAPI``, and :mod:"
"`unicodedata` exposes ``ucnhash_CAPI``.  Other extensions can import the "
"module, access its dictionary to get the capsule object, and then get the "
"``void *`` pointer, which will usually point to an array of pointers to the "
"module's various API functions."
msgstr ""

# 6e04cf0cb19d4650bd0c45f07c5dbb33
#: whatsnew/2.7.rst:2224
msgid ""
"There is an existing data type already used for this, :c:type:`PyCObject`, "
"but it doesn't provide type safety.  Evil code written in pure Python could "
"cause a segmentation fault by taking a :c:type:`PyCObject` from module A and "
"somehow substituting it for the :c:type:`PyCObject` in module B.   Capsules "
"know their own name, and getting the pointer requires providing the name::"
msgstr ""

# efd7aa00a45449b1a727bdfbf9a4764a
#: whatsnew/2.7.rst:2240
msgid ""
"You are assured that ``vtable`` points to whatever you're expecting. If a "
"different capsule was passed in, :c:func:`PyCapsule_IsValid` would detect "
"the mismatched name and return false.  Refer to :ref:`using-capsules` for "
"more information on using these objects."
msgstr ""

# 0d6573c9050a496188fbf11260d72fc4
#: whatsnew/2.7.rst:2245
msgid ""
"Python 2.7 now uses capsules internally to provide various extension-module "
"APIs, but the :c:func:`PyCObject_AsVoidPtr` was modified to handle capsules, "
"preserving compile-time compatibility with the :c:type:`CObject` interface.  "
"Use of :c:func:`PyCObject_AsVoidPtr` will signal a :exc:"
"`PendingDeprecationWarning`, which is silent by default."
msgstr ""

# 98f2fe81784548e5ac40ea14e0b1f232
#: whatsnew/2.7.rst:2252
msgid ""
"Implemented in Python 3.1 and backported to 2.7 by Larry Hastings; discussed "
"in :issue:`5630`."
msgstr ""

# 2fd876ecc6f545199a1aa2dabb60c199
#: whatsnew/2.7.rst:2261
msgid ""
"The :mod:`msvcrt` module now contains some constants from the :file:"
"`crtassem.h` header file: :data:`CRT_ASSEMBLY_VERSION`, :data:"
"`VC_ASSEMBLY_PUBLICKEYTOKEN`, and :data:`LIBRARIES_ASSEMBLY_NAME_PREFIX`. "
"(Contributed by David Cournapeau; :issue:`4365`.)"
msgstr ""

# 66bd28e758244a928a842bf455315330
#: whatsnew/2.7.rst:2268
msgid ""
"The :mod:`_winreg` module for accessing the registry now implements the :"
"func:`CreateKeyEx` and :func:`DeleteKeyEx` functions, extended versions of "
"previously-supported functions that take several extra arguments.  The :func:"
"`DisableReflectionKey`, :func:`EnableReflectionKey`, and :func:"
"`QueryReflectionKey` were also tested and documented. (Implemented by Brian "
"Curtin: :issue:`7347`.)"
msgstr ""

# 3b60f6079f2147dd8a38b4a7a9c2d8d5
#: whatsnew/2.7.rst:2276
msgid ""
"The new :c:func:`_beginthreadex` API is used to start threads, and the "
"native thread-local storage functions are now used. (Contributed by Kristján "
"Valur Jónsson; :issue:`3582`.)"
msgstr ""

# 4078d89d5adf4cbfaa3e1d8f8c08c680
#: whatsnew/2.7.rst:2280
msgid ""
"The :func:`os.kill` function now works on Windows.  The signal value can be "
"the constants :const:`CTRL_C_EVENT`, :const:`CTRL_BREAK_EVENT`, or any "
"integer.  The first two constants will send Control-C and Control-Break "
"keystroke events to subprocesses; any other value will use the :c:func:"
"`TerminateProcess` API.  (Contributed by Miki Tebeka; :issue:`1220212`.)"
msgstr ""

# 949d25f4a96c471185d36a7ac9e2bf06
#: whatsnew/2.7.rst:2287
msgid ""
"The :func:`os.listdir` function now correctly fails for an empty path.  "
"(Fixed by Hirokazu Yamamoto; :issue:`5913`.)"
msgstr ""

# 066fd7f85dfb43718d1943e854147702
#: whatsnew/2.7.rst:2290
msgid ""
"The :mod:`mimelib` module will now read the MIME database from the Windows "
"registry when initializing. (Patch by Gabriel Genellina; :issue:`4969`.)"
msgstr ""

# c93e3630d1ad474086fef7be2133e1f0
#: whatsnew/2.7.rst:2299
msgid ""
"The path ``/Library/Python/2.7/site-packages`` is now appended to ``sys."
"path``, in order to share added packages between the system installation and "
"a user-installed copy of the same version. (Changed by Ronald Oussoren; :"
"issue:`4865`.)"
msgstr ""

# 600046ac2e77449d9624838c0d27e3d7
#: whatsnew/2.7.rst:2305
msgid "Port-Specific Changes: FreeBSD"
msgstr ""

# 70eede880c65474aad68b0366c091005
#: whatsnew/2.7.rst:2307
msgid ""
"FreeBSD 7.1's :const:`SO_SETFIB` constant, used with :func:`~socket."
"getsockopt`/:func:`~socket.setsockopt` to select an alternate routing table, "
"is now available in the :mod:`socket` module.  (Added by Kyle VanderBeek; :"
"issue:`8235`.)"
msgstr ""

# 246dfb9131d34cd2b19c843ff72af89f
#: whatsnew/2.7.rst:2315
msgid ""
"Two benchmark scripts, :file:`iobench` and :file:`ccbench`, were added to "
"the :file:`Tools` directory.  :file:`iobench` measures the speed of the "
"built-in file I/O objects returned by :func:`open` while performing various "
"operations, and :file:`ccbench` is a concurrency benchmark that tries to "
"measure computing throughput, thread switching latency, and IO processing "
"bandwidth when performing several tasks using a varying number of threads."
msgstr ""

# 767cc87073884932bdf83af49771305b
#: whatsnew/2.7.rst:2323
msgid ""
"The :file:`Tools/i18n/msgfmt.py` script now understands plural forms in :"
"file:`.po` files.  (Fixed by Martin von Löwis; :issue:`5464`.)"
msgstr ""

# c294988f42cf4594a4662999c0b50793
#: whatsnew/2.7.rst:2327
msgid ""
"When importing a module from a :file:`.pyc` or :file:`.pyo` file with an "
"existing :file:`.py` counterpart, the :attr:`co_filename` attributes of the "
"resulting code objects are overwritten when the original filename is "
"obsolete.  This can happen if the file has been renamed, moved, or is "
"accessed through different paths.  (Patch by Žiga Seilnacht and Jean-Paul "
"Calderone; :issue:`1180193`.)"
msgstr ""

# a21ec34993c14b30afead04fff6e22d3
#: whatsnew/2.7.rst:2334
msgid ""
"The :file:`regrtest.py` script now takes a :option:`--randseed=` switch that "
"takes an integer that will be used as the random seed for the :option:`-r` "
"option that executes tests in random order. The :option:`-r` option also "
"reports the seed that was used (Added by Collin Winter.)"
msgstr ""

# 68b60302f77c418b8603e08237ca172a
#: whatsnew/2.7.rst:2340
msgid ""
"Another :file:`regrtest.py` switch is :option:`-j`, which takes an integer "
"specifying how many tests run in parallel. This allows reducing the total "
"runtime on multi-core machines. This option is compatible with several other "
"options, including the :option:`-R` switch which is known to produce long "
"runtimes. (Added by Antoine Pitrou, :issue:`6152`.)  This can also be used "
"with a new :option:`-F` switch that runs selected tests in a loop until they "
"fail.  (Added by Antoine Pitrou; :issue:`7312`.)"
msgstr ""

# 82e91d70d2a342c88dbba1bd888bd029
#: whatsnew/2.7.rst:2349
msgid ""
"When executed as a script, the :file:`py_compile.py` module now accepts "
"``'-'`` as an argument, which will read standard input for the list of "
"filenames to be compiled.  (Contributed by Piotr Ożarowski; :issue:`8233`.)"
msgstr ""

# 1d3187be8d414f92a31e014cdd178437
#: whatsnew/2.7.rst:2357
#, fuzzy
msgid "Porting to Python 2.7"
msgstr "Portage vers Python 3.2"

# e9564720b7dd409ab1b00f38cc17cb3c
#: whatsnew/2.7.rst:2362
msgid ""
"The :func:`range` function processes its arguments more consistently; it "
"will now call :meth:`__int__` on non-float, non-integer arguments that are "
"supplied to it.  (Fixed by Alexander Belopolsky; :issue:`1533`.)"
msgstr ""

# ec5acf96e4284a9780b2c0e9f3e7e136
#: whatsnew/2.7.rst:2367
msgid ""
"The string :meth:`format` method changed the default precision used for "
"floating-point and complex numbers from 6 decimal places to 12, which "
"matches the precision used by :func:`str`. (Changed by Eric Smith; :issue:"
"`5920`.)"
msgstr ""

# d362098e9cf54612a17d98b9fe96d132
#: whatsnew/2.7.rst:2372
msgid ""
"Because of an optimization for the :keyword:`with` statement, the special "
"methods :meth:`__enter__` and :meth:`__exit__` must belong to the object's "
"type, and cannot be directly attached to the object's instance.  This "
"affects new-style classes (derived from :class:`object`) and C extension "
"types.  (:issue:`6101`.)"
msgstr ""

# ee5d3c11ae0b44c1bd4eccd19daf982b
#: whatsnew/2.7.rst:2378
msgid ""
"Due to a bug in Python 2.6, the *exc_value* parameter to :meth:`__exit__` "
"methods was often the string representation of the exception, not an "
"instance.  This was fixed in 2.7, so *exc_value* will be an instance as "
"expected.  (Fixed by Florent Xicluna; :issue:`7853`.)"
msgstr ""

# cd7b2031b33243768d13266c4202232e
#: whatsnew/2.7.rst:2388
msgid "In the standard library:"
msgstr ""

# 493cdff72c644386881b4ecb7cf99841
#: whatsnew/2.7.rst:2390
msgid ""
"Operations with :class:`datetime` instances that resulted in a year falling "
"outside the supported range didn't always raise :exc:`OverflowError`.  Such "
"errors are now checked more carefully and will now raise the exception. "
"(Reported by Mark Leander, patch by Anand B. Pillai and Alexander "
"Belopolsky; :issue:`7150`.)"
msgstr ""

# 4de3436f5fbe4926a574af5449582ffc
#: whatsnew/2.7.rst:2396
msgid ""
"When using :class:`Decimal` instances with a string's :meth:`format` method, "
"the default alignment was previously left-alignment.  This has been changed "
"to right-alignment, which might change the output of your programs. (Changed "
"by Mark Dickinson; :issue:`6857`.)"
msgstr ""

# 6db93b50bac94e99ac8bae2e7a34d035
#: whatsnew/2.7.rst:2408
msgid ""
"The ElementTree library, :mod:`xml.etree`, no longer escapes ampersands and "
"angle brackets when outputting an XML processing instruction (which looks "
"like `<?xml-stylesheet href=\"#style1\"?>`) or comment (which looks like "
"`<!-- comment -->`). (Patch by Neil Muller; :issue:`2746`.)"
msgstr ""

# 139165aea3294119af5feb47963769df
#: whatsnew/2.7.rst:2414
msgid ""
"The :meth:`readline` method of :class:`StringIO` objects now does nothing "
"when a negative length is requested, as other file-like objects do.  (:issue:"
"`7348`)."
msgstr ""

# 4d5d8fdfdfad4ff890e18c71d9dc171d
#: whatsnew/2.7.rst:2451
msgid "For C extensions:"
msgstr ""

# 1070195851bc422382d855d38ee901ca
#: whatsnew/2.7.rst:2453
msgid ""
"C extensions that use integer format codes with the ``PyArg_Parse*`` family "
"of functions will now raise a :exc:`TypeError` exception instead of "
"triggering a :exc:`DeprecationWarning` (:issue:`5080`)."
msgstr ""

# 75d396dc3d3c41b1aae6e88da57fdef4
#: whatsnew/2.7.rst:2457
msgid ""
"Use the new :c:func:`PyOS_string_to_double` function instead of the old :c:"
"func:`PyOS_ascii_strtod` and :c:func:`PyOS_ascii_atof` functions, which are "
"now deprecated."
msgstr ""

# b69f4704a2544516970e85f106d543ec
#: whatsnew/2.7.rst:2461
msgid "For applications that embed Python:"
msgstr ""

# ac555b7ed9ba4929bb9e861108925619
#: whatsnew/2.7.rst:2463
msgid ""
"The :c:func:`PySys_SetArgvEx` function was added, letting applications close "
"a security hole when the existing :c:func:`PySys_SetArgv` function was "
"used.  Check whether you're calling :c:func:`PySys_SetArgv` and carefully "
"consider whether the application should be using :c:func:`PySys_SetArgvEx` "
"with *updatepath* set to false."
msgstr ""

# 36cc37abc3b04bed97400b8c2024453a
#: whatsnew/2.7.rst:2478
msgid ""
"The author would like to thank the following people for offering "
"suggestions, corrections and assistance with various drafts of this article: "
"Nick Coghlan, Philip Jenvey, Ryan Lovett, R. David Murray, Hugh Secker-"
"Walker."
msgstr ""

# 200bec89ed894077a686632eff54daf2
#: whatsnew/3.0.rst:3
msgid "What's New In Python 3.0"
msgstr "Nouveautés de Python 2.0"

# bc3822aba3794bd89786e48c5dd1373c
#: whatsnew/3.0.rst:7
msgid "Guido van Rossum"
msgstr "Guido van Rossum"

# 674781d1250e41f6934a36c4f3a20408
#: whatsnew/3.0.rst:54
msgid ""
"This article explains the new features in Python 3.0, compared to 2.6. "
"Python 3.0, also known as \"Python 3000\" or \"Py3K\", is the first ever "
"*intentionally backwards incompatible* Python release.  There are more "
"changes than in a typical release, and more that are important for all "
"Python users.  Nevertheless, after digesting the changes, you'll find that "
"Python really hasn't changed all that much -- by and large, we're mostly "
"fixing well-known annoyances and warts, and removing a lot of old cruft."
msgstr ""

# 74ebe0987feb49ccb81721b3a64c1fd3
#: whatsnew/3.0.rst:63
msgid ""
"This article doesn't attempt to provide a complete specification of all new "
"features, but instead tries to give a convenient overview. For full details, "
"you should refer to the documentation for Python 3.0, and/or the many PEPs "
"referenced in the text. If you want to understand the complete "
"implementation and design rationale for a particular feature, PEPs usually "
"have more details than the regular documentation; but note that PEPs usually "
"are not kept up-to-date once a feature has been fully implemented."
msgstr ""

# 6f4608c607d24d2c9bcadb049c747e67
#: whatsnew/3.0.rst:72
msgid ""
"Due to time constraints this document is not as complete as it should have "
"been.  As always for a new release, the ``Misc/NEWS`` file in the source "
"distribution contains a wealth of detailed information about every small "
"thing that was changed."
msgstr ""

# 27a59668f7f34c9d99353d92cf602c9c
#: whatsnew/3.0.rst:89
msgid "Common Stumbling Blocks"
msgstr ""

# 818da4d0dfbe424a97b4b50d5452fca7
#: whatsnew/3.0.rst:91
msgid ""
"This section lists those few changes that are most likely to trip you up if "
"you're used to Python 2.5."
msgstr ""

# 8ed6be192e394b47b7e6db0ae5b16c59
#: whatsnew/3.0.rst:95
msgid "Print Is A Function"
msgstr ""

# 4a4780f542364ec394d48800467c1b67
#: whatsnew/3.0.rst:97
msgid ""
"The ``print`` statement has been replaced with a :func:`print` function, "
"with keyword arguments to replace most of the special syntax of the old "
"``print`` statement (:pep:`3105`).  Examples::"
msgstr ""

# 35ac2b3165694248bc7de3086d4ae5cf
#: whatsnew/3.0.rst:116
msgid "You can also customize the separator between items, e.g.::"
msgstr ""

# 307c01b0a6ca43d08f678fec8949e756
#: whatsnew/3.0.rst:120
msgid "which produces::"
msgstr ""

# 93c43e66d762440b95f34c5d4549b322
#: whatsnew/3.0.rst:124
msgid "Note:"
msgstr ""

# fd8ec89f882d48c8ad57ec2f4b15c4ff
#: whatsnew/3.0.rst:126
msgid ""
"The :func:`print` function doesn't support the \"softspace\" feature of the "
"old ``print`` statement.  For example, in Python 2.x, ``print \"A\\n\", \"B"
"\"`` would write ``\"A\\nB\\n\"``; but in Python 3.0, ``print(\"A\\n\", \"B"
"\")`` writes ``\"A\\n B\\n\"``."
msgstr ""

# dd124ec4c288406080370e961080bde9
#: whatsnew/3.0.rst:131
msgid ""
"Initially, you'll be finding yourself typing the old ``print x`` a lot in "
"interactive mode.  Time to retrain your fingers to type ``print(x)`` instead!"
msgstr ""

# 2cc9c0a8a18344afb791ea97034f16e0
#: whatsnew/3.0.rst:135
msgid ""
"When using the ``2to3`` source-to-source conversion tool, all ``print`` "
"statements are automatically converted to :func:`print` function calls, so "
"this is mostly a non-issue for larger projects."
msgstr ""

# fa3b349498c442adbfa2272fd1ae2da9
#: whatsnew/3.0.rst:141
msgid "Views And Iterators Instead Of Lists"
msgstr ""

# 8e74ecfe0c074b2d9fb9ceb40015623b
#: whatsnew/3.0.rst:143
msgid "Some well-known APIs no longer return lists:"
msgstr ""

# 99a6b6943f184ba6bdfc0fcf688d9ffb
#: whatsnew/3.0.rst:145
msgid ""
":class:`dict` methods :meth:`dict.keys`, :meth:`dict.items` and :meth:`dict."
"values` return \"views\" instead of lists.  For example, this no longer "
"works: ``k = d.keys(); k.sort()``.  Use ``k = sorted(d)`` instead (this "
"works in Python 2.5 too and is just as efficient)."
msgstr ""

# 3d71b31258e343ba8e8810ce38cb4da3
#: whatsnew/3.0.rst:151
msgid ""
"Also, the :meth:`dict.iterkeys`, :meth:`dict.iteritems` and :meth:`dict."
"itervalues` methods are no longer supported."
msgstr ""

# bdf827ef235e4e32a5f5a0c101ee26b6
#: whatsnew/3.0.rst:154
msgid ""
":func:`map` and :func:`filter` return iterators.  If you really need a list "
"and the input sequences are all of equal length, a quick fix is to wrap :"
"func:`map` in :func:`list`, e.g. ``list(map(...))``, but a better fix is "
"often to use a list comprehension (especially when the original code uses :"
"keyword:`lambda`), or rewriting the code so it doesn't need a list at all.  "
"Particularly tricky is :func:`map` invoked for the side effects of the "
"function; the correct transformation is to use a regular :keyword:`for` loop "
"(since creating a list would just be wasteful)."
msgstr ""

# 53e6e8eae5e9459db5ee61f824a65f8d
#: whatsnew/3.0.rst:165
msgid ""
"If the input sequences are not of equal length, :func:`map` will stop at the "
"termination of the shortest of the sequences. For full compatibility with "
"`map` from Python 2.x, also wrap the sequences in :func:`itertools."
"zip_longest`, e.g. ``map(func, *sequences)`` becomes ``list(map(func, "
"itertools.zip_longest(*sequences)))``."
msgstr ""

# 42b971a5e508492ba9f5f10ea28a36a3
#: whatsnew/3.0.rst:171
msgid ""
":func:`range` now behaves like :func:`xrange` used to behave, except it "
"works with values of arbitrary size.  The latter no longer exists."
msgstr ""

# f22048f141fa44ecbd5431b87e026b00
#: whatsnew/3.0.rst:175
msgid ":func:`zip` now returns an iterator."
msgstr ""

# 92fc1409dd1c4959b62c2e0805efab88
#: whatsnew/3.0.rst:178
msgid "Ordering Comparisons"
msgstr ""

# 3be63af055424b5797dbfdf2f34f0a25
#: whatsnew/3.0.rst:180
msgid "Python 3.0 has simplified the rules for ordering comparisons:"
msgstr ""

# 3633b6a019334a508e2f1ddc1f095f59
#: whatsnew/3.0.rst:182
msgid ""
"The ordering comparison operators (``<``, ``<=``, ``>=``, ``>``) raise a "
"TypeError exception when the operands don't have a meaningful natural "
"ordering.  Thus, expressions like ``1 < ''``, ``0 > None`` or ``len <= len`` "
"are no longer valid, and e.g. ``None < None`` raises :exc:`TypeError` "
"instead of returning ``False``.  A corollary is that sorting a heterogeneous "
"list no longer makes sense -- all the elements must be comparable to each "
"other.  Note that this does not apply to the ``==`` and ``!=`` operators: "
"objects of different incomparable types always compare unequal to each other."
msgstr ""

# 3a4b458a3c6f4ffebfa71ebc85c8a559
#: whatsnew/3.0.rst:193
msgid ""
":meth:`builtin.sorted` and :meth:`list.sort` no longer accept the *cmp* "
"argument providing a comparison function.  Use the *key* argument instead. N."
"B. the *key* and *reverse* arguments are now \"keyword-only\"."
msgstr ""

# 69822cd268964281b304fd3ab9afa85b
#: whatsnew/3.0.rst:198
msgid ""
"The :func:`cmp` function should be treated as gone, and the :meth:`__cmp__` "
"special method is no longer supported.  Use :meth:`__lt__` for sorting, :"
"meth:`__eq__` with :meth:`__hash__`, and other rich comparisons as needed. "
"(If you really need the :func:`cmp` functionality, you could use the "
"expression ``(a > b) - (a < b)`` as the equivalent for ``cmp(a, b)``.)"
msgstr ""

# 54f5b4f1792d494d84ece6f129d5343f
#: whatsnew/3.0.rst:205
msgid "Integers"
msgstr ""

# 98269ac71512448ab484d94c1e5598e9
#: whatsnew/3.0.rst:207
msgid ""
":pep:`0237`: Essentially, :class:`long` renamed to :class:`int`. That is, "
"there is only one built-in integral type, named :class:`int`; but it behaves "
"mostly like the old :class:`long` type."
msgstr ""

# dcc72d7b3f4c4f14b79bd310eb457e93
#: whatsnew/3.0.rst:211
msgid ""
":pep:`0238`: An expression like ``1/2`` returns a float.  Use ``1//2`` to "
"get the truncating behavior.  (The latter syntax has existed for years, at "
"least since Python 2.2.)"
msgstr ""

# 84a84ad8581b46828db4047dc4291e80
#: whatsnew/3.0.rst:215
msgid ""
"The :data:`sys.maxint` constant was removed, since there is no longer a "
"limit to the value of integers.  However, :data:`sys.maxsize` can be used as "
"an integer larger than any practical list or string index.  It conforms to "
"the implementation's \"natural\" integer size and is typically the same as :"
"data:`sys.maxint` in previous releases on the same platform (assuming the "
"same build options)."
msgstr ""

# 395ce81b0dcd4b1e8d0d645742c0cf0a
#: whatsnew/3.0.rst:222
msgid ""
"The :func:`repr` of a long integer doesn't include the trailing ``L`` "
"anymore, so code that unconditionally strips that character will chop off "
"the last digit instead.  (Use :func:`str` instead.)"
msgstr ""

# 73f9ae06e5014c7ab7210af6c452b9ba
#: whatsnew/3.0.rst:226
msgid ""
"Octal literals are no longer of the form ``0720``; use ``0o720`` instead."
msgstr ""

# 08fdc78a7cd3400d8f8e6fe466d3aef6
#: whatsnew/3.0.rst:230
msgid "Text Vs. Data Instead Of Unicode Vs. 8-bit"
msgstr ""

# 7442bb5123a044be9767681054665563
#: whatsnew/3.0.rst:232
msgid ""
"Everything you thought you knew about binary data and Unicode has changed."
msgstr ""

# 5bf3a9df93da49b6abcf2b79652372e1
#: whatsnew/3.0.rst:235
msgid ""
"Python 3.0 uses the concepts of *text* and (binary) *data* instead of "
"Unicode strings and 8-bit strings.  All text is Unicode; however *encoded* "
"Unicode is represented as binary data.  The type used to hold text is :class:"
"`str`, the type used to hold data is :class:`bytes`.  The biggest difference "
"with the 2.x situation is that any attempt to mix text and data in Python "
"3.0 raises :exc:`TypeError`, whereas if you were to mix Unicode and 8-bit "
"strings in Python 2.x, it would work if the 8-bit string happened to contain "
"only 7-bit (ASCII) bytes, but you would get :exc:`UnicodeDecodeError` if it "
"contained non-ASCII values.  This value-specific behavior has caused "
"numerous sad faces over the years."
msgstr ""

# 8bc22e9552e34519a35e988ec3b8e49a
#: whatsnew/3.0.rst:248
msgid ""
"As a consequence of this change in philosophy, pretty much all code that "
"uses Unicode, encodings or binary data most likely has to change.  The "
"change is for the better, as in the 2.x world there were numerous bugs "
"having to do with mixing encoded and unencoded text.  To be prepared in "
"Python 2.x, start using :class:`unicode` for all unencoded text, and :class:"
"`str` for binary or encoded data only.  Then the ``2to3`` tool will do most "
"of the work for you."
msgstr ""

# fc1cb971ca2347bc8b7bb056e7e11281
#: whatsnew/3.0.rst:256
msgid ""
"You can no longer use ``u\"...\"`` literals for Unicode text. However, you "
"must use ``b\"...\"`` literals for binary data."
msgstr ""

# 8961a9519da8445bbfaaa0353ad0669f
#: whatsnew/3.0.rst:259
msgid ""
"As the :class:`str` and :class:`bytes` types cannot be mixed, you must "
"always explicitly convert between them.  Use :meth:`str.encode` to go from :"
"class:`str` to :class:`bytes`, and :meth:`bytes.decode` to go from :class:"
"`bytes` to :class:`str`.  You can also use ``bytes(s, encoding=...)`` and "
"``str(b, encoding=...)``, respectively."
msgstr ""

# b64632714aac41d4b1ae6d5be05b4d98
#: whatsnew/3.0.rst:266
msgid ""
"Like :class:`str`, the :class:`bytes` type is immutable.  There is a "
"separate *mutable* type to hold buffered binary data, :class:`bytearray`.  "
"Nearly all APIs that accept :class:`bytes` also accept :class:`bytearray`.  "
"The mutable API is based on :class:`collections.MutableSequence`."
msgstr ""

# aaab4f66178e41b7b0be750bb154a8eb
#: whatsnew/3.0.rst:272
msgid ""
"All backslashes in raw string literals are interpreted literally. This means "
"that ``'\\U'`` and ``'\\u'`` escapes in raw strings are not treated "
"specially.  For example, ``r'\\u20ac'`` is a string of 6 characters in "
"Python 3.0, whereas in 2.6, ``ur'\\u20ac'`` was the single \"euro\" "
"character.  (Of course, this change only affects raw string literals; the "
"euro character is ``'\\u20ac'`` in Python 3.0.)"
msgstr ""

# 59cc7fa1c6dc41648c622acab335b832
#: whatsnew/3.0.rst:279
msgid ""
"The built-in :class:`basestring` abstract type was removed.  Use :class:"
"`str` instead.  The :class:`str` and :class:`bytes` types don't have "
"functionality enough in common to warrant a shared base class.  The ``2to3`` "
"tool (see below) replaces every occurrence of :class:`basestring` with :"
"class:`str`."
msgstr ""

# 87da0ed5dce249d1a1913580f4471d46
#: whatsnew/3.0.rst:285
msgid ""
"Files opened as text files (still the default mode for :func:`open`) always "
"use an encoding to map between strings (in memory) and bytes (on disk).  "
"Binary files (opened with a ``b`` in the mode argument) always use bytes in "
"memory.  This means that if a file is opened using an incorrect mode or "
"encoding, I/O will likely fail loudly, instead of silently producing "
"incorrect data.  It also means that even Unix users will have to specify the "
"correct mode (text or binary) when opening a file.  There is a platform-"
"dependent default encoding, which on Unixy platforms can be set with the "
"``LANG`` environment variable (and sometimes also with some other platform-"
"specific locale-related environment variables).  In many cases, but not all, "
"the system default is UTF-8; you should never count on this default.  Any "
"application reading or writing more than pure ASCII text should probably "
"have a way to override the encoding. There is no longer any need for using "
"the encoding-aware streams in the :mod:`codecs` module."
msgstr ""

# 7bc4d5ff34c24887af44276a1a3273c9
#: whatsnew/3.0.rst:302
msgid ""
"The initial values of :data:`sys.stdin`, :data:`sys.stdout` and :data:`sys."
"stderr` are now unicode-only text files (i.e., they are instances of :class:"
"`io.TextIOBase`).  To read and write bytes data with these streams, you need "
"to use their :data:`io.TextIOBase.buffer` attribute."
msgstr ""

# 353f0a14827c4ce3940c27e0ea140287
#: whatsnew/3.0.rst:308
msgid ""
"Filenames are passed to and returned from APIs as (Unicode) strings. This "
"can present platform-specific problems because on some platforms filenames "
"are arbitrary byte strings.  (On the other hand, on Windows filenames are "
"natively stored as Unicode.)  As a work-around, most APIs (e.g. :func:`open` "
"and many functions in the :mod:`os` module) that take filenames accept :"
"class:`bytes` objects as well as strings, and a few APIs have a way to ask "
"for a :class:`bytes` return value.  Thus, :func:`os.listdir` returns a list "
"of :class:`bytes` instances if the argument is a :class:`bytes` instance, "
"and :func:`os.getcwdb` returns the current working directory as a :class:"
"`bytes` instance.  Note that when :func:`os.listdir` returns a list of "
"strings, filenames that cannot be decoded properly are omitted rather than "
"raising :exc:`UnicodeError`."
msgstr ""

# 74e915ca12794534b4407debd1a26e84
#: whatsnew/3.0.rst:323
msgid ""
"Some system APIs like :data:`os.environ` and :data:`sys.argv` can also "
"present problems when the bytes made available by the system is not "
"interpretable using the default encoding.  Setting the ``LANG`` variable and "
"rerunning the program is probably the best approach."
msgstr ""

# 881d3316cef1463bbff8ac0a85c43aa6
#: whatsnew/3.0.rst:328
msgid ""
":pep:`3138`: The :func:`repr` of a string no longer escapes non-ASCII "
"characters.  It still escapes control characters and code points with non-"
"printable status in the Unicode standard, however."
msgstr ""

# d3d7231305ea4e8692a2db7fb15cd41d
#: whatsnew/3.0.rst:332
msgid ":pep:`3120`: The default source encoding is now UTF-8."
msgstr ""

# 0279650d01494ebf8b3ad7ecb8246414
#: whatsnew/3.0.rst:334
msgid ""
":pep:`3131`: Non-ASCII letters are now allowed in identifiers. (However, the "
"standard library remains ASCII-only with the exception of contributor names "
"in comments.)"
msgstr ""

# 0918340e67fa40c780caf2179c5af747
#: whatsnew/3.0.rst:338
msgid ""
"The :mod:`StringIO` and :mod:`cStringIO` modules are gone.  Instead, import "
"the :mod:`io` module and use :class:`io.StringIO` or :class:`io.BytesIO` for "
"text and data respectively."
msgstr ""

# 7a88b6876bf04faca1b8b40de6eacc7e
#: whatsnew/3.0.rst:342
msgid "See also the :ref:`unicode-howto`, which was updated for Python 3.0."
msgstr ""

# 5e155ed397e445238a63616662e03ca4
#: whatsnew/3.0.rst:346
msgid "Overview Of Syntax Changes"
msgstr ""

# b8466585de394ce89a225e1ad64bf2d7
#: whatsnew/3.0.rst:348
msgid ""
"This section gives a brief overview of every *syntactic* change in Python "
"3.0."
msgstr ""

# 7d03e77ab1d745c7b6567de29e20979f
#: whatsnew/3.0.rst:352
msgid "New Syntax"
msgstr ""

# f7d8fc8ade314c3cabf62b018d81dc8f
#: whatsnew/3.0.rst:354
msgid ""
":pep:`3107`: Function argument and return value annotations.  This provides "
"a standardized way of annotating a function's parameters and return value.  "
"There are no semantics attached to such annotations except that they can be "
"introspected at runtime using the :attr:`__annotations__` attribute.  The "
"intent is to encourage experimentation through metaclasses, decorators or "
"frameworks."
msgstr ""

# 0d387acf4298462cb8708618fd1c254b
#: whatsnew/3.0.rst:361
msgid ""
":pep:`3102`: Keyword-only arguments.  Named parameters occurring after "
"``*args`` in the parameter list *must* be specified using keyword syntax in "
"the call.  You can also use a bare ``*`` in the parameter list to indicate "
"that you don't accept a variable-length argument list, but you do have "
"keyword-only arguments."
msgstr ""

# 33fd5508b6b14bc58c54250fe0ed30cd
#: whatsnew/3.0.rst:367
msgid ""
"Keyword arguments are allowed after the list of base classes in a class "
"definition.  This is used by the new convention for specifying a metaclass "
"(see next section), but can be used for other purposes as well, as long as "
"the metaclass supports it."
msgstr ""

# 3c6c25e4d1d5448f8863e8d176a689cd
#: whatsnew/3.0.rst:372
msgid ""
":pep:`3104`: :keyword:`nonlocal` statement.  Using ``nonlocal x`` you can "
"now assign directly to a variable in an outer (but non-global) scope.  :"
"keyword:`nonlocal` is a new reserved word."
msgstr ""

# 7f3f198195cd4a41ba22baeb8d6094b4
#: whatsnew/3.0.rst:376
msgid ""
":pep:`3132`: Extended Iterable Unpacking.  You can now write things like "
"``a, b, *rest = some_sequence``.  And even ``*rest, a = stuff``.  The "
"``rest`` object is always a (possibly empty) list; the right-hand side may "
"be any iterable.  Example::"
msgstr ""

# 10d41a1b99f64b9fb147f75f33f7bd1d
#: whatsnew/3.0.rst:383
msgid "This sets *a* to ``0``, *b* to ``4``, and *rest* to ``[1, 2, 3]``."
msgstr ""

# b8d28bd5e58f46ca9b8ba52bb99c7194
#: whatsnew/3.0.rst:385
msgid ""
"Dictionary comprehensions: ``{k: v for k, v in stuff}`` means the same thing "
"as ``dict(stuff)`` but is more flexible.  (This is :pep:`0274` "
"vindicated. :-)"
msgstr ""

# 6d1c6dcc3c7a4285a030ac54f4243ec0
#: whatsnew/3.0.rst:389
msgid ""
"Set literals, e.g. ``{1, 2}``.  Note that ``{}`` is an empty dictionary; use "
"``set()`` for an empty set.  Set comprehensions are also supported; e.g., "
"``{x for x in stuff}`` means the same thing as ``set(stuff)`` but is more "
"flexible."
msgstr ""

# dd60358c490842a08be24e687b289b2e
#: whatsnew/3.0.rst:394
msgid ""
"New octal literals, e.g. ``0o720`` (already in 2.6).  The old octal literals "
"(``0720``) are gone."
msgstr ""

# e13c5e1472204152af3c880c41a84be8
#: whatsnew/3.0.rst:397
msgid ""
"New binary literals, e.g. ``0b1010`` (already in 2.6), and there is a new "
"corresponding built-in function, :func:`bin`."
msgstr ""

# ff29d97fc646400187400b74e38d9109
#: whatsnew/3.0.rst:400
msgid ""
"Bytes literals are introduced with a leading ``b`` or ``B``, and there is a "
"new corresponding built-in function, :func:`bytes`."
msgstr ""

# 58c7329680f4486e8ba742498bc65369
#: whatsnew/3.0.rst:404
msgid "Changed Syntax"
msgstr ""

# 24ce951ff8b543dabf46e7eb6351c531
#: whatsnew/3.0.rst:406
msgid ""
":pep:`3109` and :pep:`3134`: new :keyword:`raise` statement syntax: :samp:"
"`raise [{expr} [from {expr}]]`.  See below."
msgstr ""

# 8d20c2f8e2424783a0c1330a3c664592
#: whatsnew/3.0.rst:409
msgid ""
":keyword:`as` and :keyword:`with` are now reserved words.  (Since 2.6, "
"actually.)"
msgstr ""

# fa5669ab38b440ba8fa2e67632a5e220
#: whatsnew/3.0.rst:412
msgid ""
"``True``, ``False``, and ``None`` are reserved words.  (2.6 partially "
"enforced the restrictions on ``None`` already.)"
msgstr ""

# ec892f76cac948699692647d5258ebfc
#: whatsnew/3.0.rst:415
msgid ""
"Change from :keyword:`except` *exc*, *var* to :keyword:`except` *exc* :"
"keyword:`as` *var*.  See :pep:`3110`."
msgstr ""

# e6279198b39640298ea5a506394f2497
#: whatsnew/3.0.rst:418
msgid ":pep:`3115`: New Metaclass Syntax.  Instead of::"
msgstr ""

# c077fbe11afd47329031a6708189eab7
#: whatsnew/3.0.rst:424
msgid "you must now use::"
msgstr ""

# 27e393f2fff94673b0a58b2b57b984c1
#: whatsnew/3.0.rst:429
msgid ""
"The module-global :data:`__metaclass__` variable is no longer supported.  "
"(It was a crutch to make it easier to default to new-style classes without "
"deriving every class from :class:`object`.)"
msgstr ""

# 077d4e3ebf4f4cb0bf2851f5e2176bfd
#: whatsnew/3.0.rst:434
msgid ""
"List comprehensions no longer support the syntactic form :samp:`[... for "
"{var} in {item1}, {item2}, ...]`.  Use :samp:`[... for {var} in ({item1}, "
"{item2}, ...)]` instead. Also note that list comprehensions have different "
"semantics: they are closer to syntactic sugar for a generator expression "
"inside a :func:`list` constructor, and in particular the loop control "
"variables are no longer leaked into the surrounding scope."
msgstr ""

# 4a05d756babe4d2db1f8f434bc2dac6b
#: whatsnew/3.0.rst:442
msgid ""
"The *ellipsis* (``...``) can be used as an atomic expression anywhere.  "
"(Previously it was only allowed in slices.)  Also, it *must* now be spelled "
"as ``...``.  (Previously it could also be spelled as ``. . .``, by a mere "
"accident of the grammar.)"
msgstr ""

# a76a024617814c5782c61ca8906a4a9d
#: whatsnew/3.0.rst:448
msgid "Removed Syntax"
msgstr ""

# 81bccac6ac6445d9b381ba9c4c6144e3
#: whatsnew/3.0.rst:450
msgid ""
":pep:`3113`: Tuple parameter unpacking removed.  You can no longer write "
"``def foo(a, (b, c)): ...``. Use ``def foo(a, b_c): b, c = b_c`` instead."
msgstr ""

# b41838a12abe4f269e15e0da3b8571b9
#: whatsnew/3.0.rst:454
msgid "Removed backticks (use :func:`repr` instead)."
msgstr ""

# 75a713f6d7ce4b10932f416aa70ecd6c
#: whatsnew/3.0.rst:456
msgid "Removed ``<>`` (use ``!=`` instead)."
msgstr ""

# 1127a83c434548eb8d6c7368b52a6fdd
#: whatsnew/3.0.rst:458
msgid ""
"Removed keyword: :func:`exec` is no longer a keyword; it remains as a "
"function.  (Fortunately the function syntax was also accepted in 2.x.)  Also "
"note that :func:`exec` no longer takes a stream argument; instead of "
"``exec(f)`` you can use ``exec(f.read())``."
msgstr ""

# 4dde0d474048480a86eb4dc5f7c037e4
#: whatsnew/3.0.rst:463
msgid "Integer literals no longer support a trailing ``l`` or ``L``."
msgstr ""

# 19203a35251d472c9881cc425621c133
#: whatsnew/3.0.rst:465
msgid "String literals no longer support a leading ``u`` or ``U``."
msgstr ""

# 18be5113fdf047a8ab7f10adda7f566a
#: whatsnew/3.0.rst:467
msgid ""
"The :keyword:`from` *module* :keyword:`import` ``*`` syntax is only allowed "
"at the module level, no longer inside functions."
msgstr ""

# 2b4074ce7de248cbaaceb1a08bcb45f1
#: whatsnew/3.0.rst:470
msgid ""
"The only acceptable syntax for relative imports is :samp:`from .[{module}] "
"import {name}`.  All :keyword:`import` forms not starting with ``.`` are "
"interpreted as absolute imports.  (:pep:`0328`)"
msgstr ""

# ebc3d9c0c5c5480993f6e0470533e56c
#: whatsnew/3.0.rst:474
msgid "Classic classes are gone."
msgstr ""

# 1917e72c91cd4eaf89f18ac69382b4ce
#: whatsnew/3.0.rst:478
msgid "Changes Already Present In Python 2.6"
msgstr ""

# 7fe2b3adeb634d6faa0f23a462872de6
#: whatsnew/3.0.rst:480
msgid ""
"Since many users presumably make the jump straight from Python 2.5 to Python "
"3.0, this section reminds the reader of new features that were originally "
"designed for Python 3.0 but that were back-ported to Python 2.6.  The "
"corresponding sections in :ref:`whats-new-in-2.6` should be consulted for "
"longer descriptions."
msgstr ""

# 8c8d3ad87eac46cfac4d5723e3299942
#: whatsnew/3.0.rst:486
msgid ""
":ref:`pep-0343`.  The :keyword:`with` statement is now a standard feature "
"and no longer needs to be imported from the :mod:`__future__`. Also check "
"out :ref:`new-26-context-managers` and :ref:`new-module-contextlib`."
msgstr ""

# 90f19296c4144c4281ba97691f3d33a9
#: whatsnew/3.0.rst:491
msgid ""
":ref:`pep-0366`.  This enhances the usefulness of the :option:`-m` option "
"when the referenced module lives in a package."
msgstr ""

# 898c3881f6434ac8bc5e6f620193cd40
#: whatsnew/3.0.rst:494
msgid ":ref:`pep-0370`."
msgstr ""

# b2ba58625298495fb94afb51c51b0df7
#: whatsnew/3.0.rst:496
msgid ":ref:`pep-0371`."
msgstr ""

# 6b0226872a064cfcbc77fb9142111cac
#: whatsnew/3.0.rst:498
msgid ""
":ref:`pep-3101`.  Note: the 2.6 description mentions the :meth:`format` "
"method for both 8-bit and Unicode strings.  In 3.0, only the :class:`str` "
"type (text strings with Unicode support) supports this method; the :class:"
"`bytes` type does not.  The plan is to eventually make this the only API for "
"string formatting, and to start deprecating the ``%`` operator in Python 3.1."
msgstr ""

# 3df49c23bcc941e3a60b9ba589b332f1
#: whatsnew/3.0.rst:505
msgid ""
":ref:`pep-3105`.  This is now a standard feature and no longer needs to be "
"imported from :mod:`__future__`.  More details were given above."
msgstr ""

# 37452fe22cdc442d8029c70dd595d172
#: whatsnew/3.0.rst:508
msgid ""
":ref:`pep-3110`.  The :keyword:`except` *exc* :keyword:`as` *var* syntax is "
"now standard and :keyword:`except` *exc*, *var* is no longer supported.  (Of "
"course, the :keyword:`as` *var* part is still optional.)"
msgstr ""

# bde4fae008084a2392f88c4d1df706ee
#: whatsnew/3.0.rst:513
msgid ""
":ref:`pep-3112`.  The ``b\"...\"`` string literal notation (and its variants "
"like ``b'...'``, ``b\"\"\"...\"\"\"``, and ``br\"...\"``) now produces a "
"literal of type :class:`bytes`."
msgstr ""

# 512e3fa5a8874256af4ae9f914f1ddf4
#: whatsnew/3.0.rst:517
msgid ""
":ref:`pep-3116`.  The :mod:`io` module is now the standard way of doing file "
"I/O.  The built-in :func:`open` function is now an alias for :func:`io.open` "
"and has additional keyword arguments *encoding*, *errors*, *newline* and "
"*closefd*.  Also note that an invalid *mode* argument now raises :exc:"
"`ValueError`, not :exc:`IOError`.  The binary file object underlying a text "
"file object can be accessed as :attr:`f.buffer` (but beware that the text "
"object maintains a buffer of itself in order to speed up the encoding and "
"decoding operations)."
msgstr ""

# 42bf57716e8d49ee95b89e4baf5a707d
#: whatsnew/3.0.rst:527
msgid ""
":ref:`pep-3118`.  The old builtin :func:`buffer` is now really gone; the new "
"builtin :func:`memoryview` provides (mostly) similar functionality."
msgstr ""

# 23e93ed42b0b47fc8c9c8124842f74b3
#: whatsnew/3.0.rst:531
msgid ""
":ref:`pep-3119`.  The :mod:`abc` module and the ABCs defined in the :mod:"
"`collections` module plays a somewhat more prominent role in the language "
"now, and built-in collection types like :class:`dict` and :class:`list` "
"conform to the :class:`collections.MutableMapping` and :class:`collections."
"MutableSequence` ABCs, respectively."
msgstr ""

# 7da8df5fdf924b679ee869b91f9021a0
#: whatsnew/3.0.rst:537
msgid ""
":ref:`pep-3127`.  As mentioned above, the new octal literal notation is the "
"only one supported, and binary literals have been added."
msgstr ""

# 3e7ddeed575743439ab48f51b88db629
#: whatsnew/3.0.rst:541
msgid ":ref:`pep-3129`."
msgstr ""

# 5c6426bc6a8547e5bc7862f5e78b3fe6
#: whatsnew/3.0.rst:543
msgid ""
":ref:`pep-3141`.  The :mod:`numbers` module is another new use of ABCs, "
"defining Python's \"numeric tower\".  Also note the new :mod:`fractions` "
"module which implements :class:`numbers.Rational`."
msgstr ""

# dd1fd7a6d268423cacd9b771986f45e8
#: whatsnew/3.0.rst:549
msgid "Library Changes"
msgstr ""

# 95c27fa1cfc74a41a7bff3bbfea199a4
#: whatsnew/3.0.rst:551
msgid ""
"Due to time constraints, this document does not exhaustively cover the very "
"extensive changes to the standard library.  :pep:`3108` is the reference for "
"the major changes to the library.  Here's a capsule review:"
msgstr ""

# acd5f1edbffe4f43a5e6885865ef8675
#: whatsnew/3.0.rst:556
msgid ""
"Many old modules were removed.  Some, like :mod:`gopherlib` (no longer used) "
"and :mod:`md5` (replaced by :mod:`hashlib`), were already deprecated by :pep:"
"`0004`.  Others were removed as a result of the removal of support for "
"various platforms such as Irix, BeOS and Mac OS 9 (see :pep:`0011`).  Some "
"modules were also selected for removal in Python 3.0 due to lack of use or "
"because a better replacement exists.  See :pep:`3108` for an exhaustive list."
msgstr ""

# 99a15ee222fe4be0815f4015c1d73999
#: whatsnew/3.0.rst:564
msgid ""
"The :mod:`bsddb3` package was removed because its presence in the core "
"standard library has proved over time to be a particular burden for the core "
"developers due to testing instability and Berkeley DB's release schedule.  "
"However, the package is alive and well, externally maintained at http://www."
"jcea.es/programacion/pybsddb.htm."
msgstr ""

# 2e3201a7fcff4f5580d729ed900a6010
#: whatsnew/3.0.rst:570
msgid ""
"Some modules were renamed because their old name disobeyed :pep:`0008`, or "
"for various other reasons.  Here's the list:"
msgstr ""

# fcde4ed7eead412c8668d0c35c076c6d
# 8231ef6bdab64d73a5e6c0e4a6815138
#: whatsnew/3.0.rst:574 whatsnew/3.2.rst:1778
msgid "Old Name"
msgstr ""

# 2912ca8cb36e4aba9e740b0877c36f68
#: whatsnew/3.0.rst:574
msgid "New Name"
msgstr ""

# 126ffaa8c3ce49e999a1e7390750d149
#: whatsnew/3.0.rst:576
msgid "_winreg"
msgstr ""

# 05425174e26642e2aaf0b48cdc362f61
#: whatsnew/3.0.rst:576
msgid "winreg"
msgstr ""

# f10536a47bb7417fadfe7b734e99b5bd
#: whatsnew/3.0.rst:577
msgid "ConfigParser"
msgstr ""

# ee399f9d9ede4aa883a28f4e5bd144a2
# ae9c00c3fc3243fea160bd71abec225e
#: whatsnew/3.0.rst:577 whatsnew/3.2.rst:2092
msgid "configparser"
msgstr ""

# 97cd2859a37e414a9c57590a825c66da
#: whatsnew/3.0.rst:578
msgid "copy_reg"
msgstr ""

# 2639b333f45b4bd295b48a9e0f1f342a
#: whatsnew/3.0.rst:578
msgid "copyreg"
msgstr ""

# d1b3d9c07ff847309650c7636b67eca3
#: whatsnew/3.0.rst:579
msgid "Queue"
msgstr ""

# eb05067b6376432098c2157039fba805
#: whatsnew/3.0.rst:579
msgid "queue"
msgstr ""

# ba2b4bcf347546b68812b5a9231ac608
#: whatsnew/3.0.rst:580
msgid "SocketServer"
msgstr ""

# 58f71998cc5445d3b6370ecc48ee8ede
#: whatsnew/3.0.rst:580
msgid "socketserver"
msgstr ""

# 381cb4209e1b427e87aad728be13736f
#: whatsnew/3.0.rst:581
msgid "markupbase"
msgstr ""

# 1b2a4c77e31c42758e7db6e71927acff
#: whatsnew/3.0.rst:581
msgid "_markupbase"
msgstr ""

# dfbcd7e456b34e9280c8a6f642eaaac4
#: whatsnew/3.0.rst:582
msgid "repr"
msgstr ""

# 5638137fac364d029e809d682c3de9b3
# 9c538b15f3fa4470b27fda3fee64c2f6
#: whatsnew/3.0.rst:582 whatsnew/3.2.rst:1121
msgid "reprlib"
msgstr ""

# d3e07910a4e14eba9498a2a7048d5761
#: whatsnew/3.0.rst:583
msgid "test.test_support"
msgstr ""

# 7181b50cd53644849f537b88a06b27c8
#: whatsnew/3.0.rst:583
msgid "test.support"
msgstr ""

# f41178e4ed3943a8b4aaafda42075926
#: whatsnew/3.0.rst:586
msgid ""
"A common pattern in Python 2.x is to have one version of a module "
"implemented in pure Python, with an optional accelerated version implemented "
"as a C extension; for example, :mod:`pickle` and :mod:`cPickle`.  This "
"places the burden of importing the accelerated version and falling back on "
"the pure Python version on each user of these modules.  In Python 3.0, the "
"accelerated versions are considered implementation details of the pure "
"Python versions. Users should always import the standard version, which "
"attempts to import the accelerated version and falls back to the pure Python "
"version.  The :mod:`pickle` / :mod:`cPickle` pair received this treatment.  "
"The :mod:`profile` module is on the list for 3.1.  The :mod:`StringIO` "
"module has been turned into a class in the :mod:`io` module."
msgstr ""

# 41468a3d026545908bae9ce51969ac7c
#: whatsnew/3.0.rst:600
msgid ""
"Some related modules have been grouped into packages, and usually the "
"submodule names have been simplified.  The resulting new packages are:"
msgstr ""

# 5b1364e95c554bc09ba4c2ff4c3752af
#: whatsnew/3.0.rst:604
msgid ""
":mod:`dbm` (:mod:`anydbm`, :mod:`dbhash`, :mod:`dbm`, :mod:`dumbdbm`, :mod:"
"`gdbm`, :mod:`whichdb`)."
msgstr ""

# 192db02d289d47e89a8e674b5f44d91a
#: whatsnew/3.0.rst:607
msgid ":mod:`html` (:mod:`HTMLParser`, :mod:`htmlentitydefs`)."
msgstr ""

# 63aba3d5051047fe836999d9d1ce6477
#: whatsnew/3.0.rst:609
msgid ""
":mod:`http` (:mod:`httplib`, :mod:`BaseHTTPServer`, :mod:`CGIHTTPServer`, :"
"mod:`SimpleHTTPServer`, :mod:`Cookie`, :mod:`cookielib`)."
msgstr ""

# d2fe4c9e86e94d2eb7e1d4f77e2cad2e
#: whatsnew/3.0.rst:613
msgid ""
":mod:`tkinter` (all :mod:`Tkinter`-related modules except :mod:`turtle`).  "
"The target audience of :mod:`turtle` doesn't really care about :mod:"
"`tkinter`.  Also note that as of Python 2.6, the functionality of :mod:"
"`turtle` has been greatly enhanced."
msgstr ""

# cafcf110007045c7b4b2f5d7717b8fb3
#: whatsnew/3.0.rst:618
msgid ""
":mod:`urllib` (:mod:`urllib`, :mod:`urllib2`, :mod:`urlparse`, :mod:"
"`robotparse`)."
msgstr ""

# c3bece88da8d414c82e12815d89d2ce2
#: whatsnew/3.0.rst:621
msgid ""
":mod:`xmlrpc` (:mod:`xmlrpclib`, :mod:`DocXMLRPCServer`, :mod:"
"`SimpleXMLRPCServer`)."
msgstr ""

# 413aeed7135f4aafa7bb2e38eae2112f
#: whatsnew/3.0.rst:624
msgid ""
"Some other changes to standard library modules, not covered by :pep:`3108`:"
msgstr ""

# bf9b438bd4ec4f49acb03f4fb744e91a
#: whatsnew/3.0.rst:627
msgid "Killed :mod:`sets`.  Use the built-in :func:`set` class."
msgstr ""

# d45f1113b9244877b947efd46e454ceb
#: whatsnew/3.0.rst:629
msgid ""
"Cleanup of the :mod:`sys` module: removed :func:`sys.exitfunc`, :func:`sys."
"exc_clear`, :data:`sys.exc_type`, :data:`sys.exc_value`, :data:`sys."
"exc_traceback`.  (Note that :data:`sys.last_type` etc. remain.)"
msgstr ""

# 7d7138d62f294fd4ba3cfbb536f76ffc
#: whatsnew/3.0.rst:634
msgid ""
"Cleanup of the :class:`array.array` type: the :meth:`read` and :meth:`write` "
"methods are gone; use :meth:`fromfile` and :meth:`tofile` instead.  Also, "
"the ``'c'`` typecode for array is gone -- use either ``'b'`` for bytes or "
"``'u'`` for Unicode characters."
msgstr ""

# d5d992fa4e874538a2131406699a91c8
#: whatsnew/3.0.rst:640
msgid ""
"Cleanup of the :mod:`operator` module: removed :func:`sequenceIncludes` and :"
"func:`isCallable`."
msgstr ""

# f242d8036bf04ca5b2f152c59a712344
#: whatsnew/3.0.rst:643
msgid ""
"Cleanup of the :mod:`thread` module: :func:`acquire_lock` and :func:"
"`release_lock` are gone; use :func:`acquire` and :func:`release` instead."
msgstr ""

# 425c73d4f19b4a98a33bc6d113cc9ef6
#: whatsnew/3.0.rst:647
msgid "Cleanup of the :mod:`random` module: removed the :func:`jumpahead` API."
msgstr ""

# 6b77840a18c14a49868b6c057c0b7b17
#: whatsnew/3.0.rst:649
msgid "The :mod:`new` module is gone."
msgstr ""

# 7f170da7f9c14e5d95746793822de570
#: whatsnew/3.0.rst:651
msgid ""
"The functions :func:`os.tmpnam`, :func:`os.tempnam` and :func:`os.tmpfile` "
"have been removed in favor of the :mod:`tempfile` module."
msgstr ""

# cd29592b32ac48fa9835084d3579b601
#: whatsnew/3.0.rst:655
msgid ""
"The :mod:`tokenize` module has been changed to work with bytes.  The main "
"entry point is now :func:`tokenize.tokenize`, instead of generate_tokens."
msgstr ""

# b273277baa6e4815b8c1775d413e75cf
#: whatsnew/3.0.rst:659
msgid ""
":data:`string.letters` and its friends (:data:`string.lowercase` and :data:"
"`string.uppercase`) are gone.  Use :data:`string.ascii_letters` etc. "
"instead.  (The reason for the removal is that :data:`string.letters` and "
"friends had locale-specific behavior, which is a bad idea for such "
"attractively-named global \"constants\".)"
msgstr ""

# f7add09f4053436ab1f5a0e1946f1f3f
#: whatsnew/3.0.rst:666
msgid ""
"Renamed module :mod:`__builtin__` to :mod:`builtins` (removing the "
"underscores, adding an 's').  The :data:`__builtins__` variable found in "
"most global namespaces is unchanged.  To modify a builtin, you should use :"
"mod:`builtins`, not :data:`__builtins__`!"
msgstr ""

# af82a5fd29014a1da528a0a9d3704d11
#: whatsnew/3.0.rst:673
msgid ":pep:`3101`: A New Approach To String Formatting"
msgstr ""

# 00f65c797b194e3e88092c3601a30ef2
#: whatsnew/3.0.rst:675
msgid ""
"A new system for  built-in string formatting operations replaces the ``%`` "
"string  formatting operator.   (However, the ``%``  operator is still "
"supported;  it will  be deprecated in  Python 3.1  and removed from the "
"language at some later time.)  Read :pep:`3101` for the full scoop."
msgstr ""

# d2697b52aba94d099db88ddcc723f832
#: whatsnew/3.0.rst:683
msgid "Changes To Exceptions"
msgstr ""

# d245c4ec6f71409787c98426b28cbeb2
#: whatsnew/3.0.rst:685
msgid ""
"The APIs for raising and catching exception have been cleaned up and new "
"powerful features added:"
msgstr ""

# 9e67a0ee3c694574b503aeecce74c6ec
#: whatsnew/3.0.rst:688
msgid ""
":pep:`0352`: All exceptions must be derived (directly or indirectly) from :"
"exc:`BaseException`.  This is the root of the exception hierarchy.  This is "
"not new as a recommendation, but the *requirement* to inherit from :exc:"
"`BaseException` is new.  (Python 2.6 still allowed classic classes to be "
"raised, and placed no restriction on what you can catch.)  As a consequence, "
"string exceptions are finally truly and utterly dead."
msgstr ""

# 3469cb71a77149c38f01406284e55314
#: whatsnew/3.0.rst:696
msgid ""
"Almost all exceptions should actually derive from :exc:`Exception`; :exc:"
"`BaseException` should only be used as a base class for exceptions that "
"should only be handled at the top level, such as :exc:`SystemExit` or :exc:"
"`KeyboardInterrupt`.  The recommended idiom for handling all exceptions "
"except for this latter category is to use :keyword:`except` :exc:`Exception`."
msgstr ""

# e785dbf6037a4d61bf1961a2a275f860
#: whatsnew/3.0.rst:703
msgid ":exc:`StandardError` was removed."
msgstr ""

# 020f106896834dd8af859d1c300df535
#: whatsnew/3.0.rst:705
msgid ""
"Exceptions no longer behave as sequences.  Use the :attr:`args` attribute "
"instead."
msgstr ""

# 381276c260c242368e5d5ed5783dfff9
#: whatsnew/3.0.rst:708
msgid ""
":pep:`3109`: Raising exceptions.  You must now use :samp:`raise {Exception}"
"({args})` instead of :samp:`raise {Exception}, {args}`. Additionally, you "
"can no longer explicitly specify a traceback; instead, if you *have* to do "
"this, you can assign directly to the :attr:`__traceback__` attribute (see "
"below)."
msgstr ""

# 343c975b6c0f4ed2a1ca677e49dcea4b
#: whatsnew/3.0.rst:714
msgid ""
":pep:`3110`: Catching exceptions.  You must now use :samp:`except "
"{SomeException} as {variable}` instead of :samp:`except {SomeException}, "
"{variable}`.  Moreover, the *variable* is explicitly deleted when the :"
"keyword:`except` block is left."
msgstr ""

# 2f4b2620bbe540949c2c6dd81bcce923
#: whatsnew/3.0.rst:720
msgid ""
":pep:`3134`: Exception chaining.  There are two cases: implicit chaining and "
"explicit chaining.  Implicit chaining happens when an exception is raised in "
"an :keyword:`except` or :keyword:`finally` handler block.  This usually "
"happens due to a bug in the handler block; we call this a *secondary* "
"exception.  In this case, the original exception (that was being handled) is "
"saved as the :attr:`__context__` attribute of the secondary exception. "
"Explicit chaining is invoked with this syntax::"
msgstr ""

# 6b9f3539c8164a839c135f26f74193cd
#: whatsnew/3.0.rst:731
msgid ""
"(where *primary_exception* is any expression that produces an exception "
"object, probably an exception that was previously caught). In this case, the "
"primary exception is stored on the :attr:`__cause__` attribute of the "
"secondary exception.  The traceback printed when an unhandled exception "
"occurs walks the chain of :attr:`__cause__` and :attr:`__context__` "
"attributes and prints a separate traceback for each component of the chain, "
"with the primary exception at the top.  (Java users may recognize this "
"behavior.)"
msgstr ""

# f68b4726117241b1ac5d37c163bb8409
#: whatsnew/3.0.rst:740
msgid ""
":pep:`3134`: Exception objects now store their traceback as the :attr:"
"`__traceback__` attribute.  This means that an exception object now contains "
"all the information pertaining to an exception, and there are fewer reasons "
"to use :func:`sys.exc_info` (though the latter is not removed)."
msgstr ""

# b3a881ef99f44e5aa37311e1b7e03d6f
#: whatsnew/3.0.rst:746
msgid ""
"A few exception messages are improved when Windows fails to load an "
"extension module.  For example, ``error code 193`` is now ``%1 is not a "
"valid Win32 application``.  Strings now deal with non-English locales."
msgstr ""

# 262dcc9664214c54822cf6f76e697c85
#: whatsnew/3.0.rst:753
msgid "Miscellaneous Other Changes"
msgstr ""

# 906205ca67004c6fb4db00988deb760c
#: whatsnew/3.0.rst:756
msgid "Operators And Special Methods"
msgstr ""

# 68675c2df3944a8bb322ad38672a502b
#: whatsnew/3.0.rst:758
msgid ""
"``!=`` now returns the opposite of ``==``, unless ``==`` returns :data:"
"`NotImplemented`."
msgstr ""

# d33500d4380e4bc69bd949b012f1c985
#: whatsnew/3.0.rst:761
msgid ""
"The concept of \"unbound methods\" has been removed from the language. When "
"referencing a method as a class attribute, you now get a plain function "
"object."
msgstr ""

# ba4b72da8b94471ea548e813419c62a7
#: whatsnew/3.0.rst:765
msgid ""
":meth:`__getslice__`, :meth:`__setslice__` and :meth:`__delslice__` were "
"killed.  The syntax ``a[i:j]`` now translates to ``a.__getitem__(slice(i, "
"j))`` (or :meth:`__setitem__` or :meth:`__delitem__`, when used as an "
"assignment or deletion target, respectively)."
msgstr ""

# 01ffefe65ebf4e9f923000a7fbc43340
#: whatsnew/3.0.rst:771
msgid ""
":pep:`3114`: the standard :meth:`next` method has been renamed to :meth:"
"`~iterator.__next__`."
msgstr ""

# f19a452e85ab4c9392dd6f623939fe5a
#: whatsnew/3.0.rst:774
msgid ""
"The :meth:`__oct__` and :meth:`__hex__` special methods are removed -- :func:"
"`oct` and :func:`hex` use :meth:`__index__` now to convert the argument to "
"an integer."
msgstr ""

# b7d3c3353fc84712b3903e8e6d470e89
#: whatsnew/3.0.rst:778
msgid "Removed support for :attr:`__members__` and :attr:`__methods__`."
msgstr ""

# 63ddc6e23b2d43bf95cb75a8f02a0c38
#: whatsnew/3.0.rst:780
msgid ""
"The function attributes named :attr:`func_X` have been renamed to use the :"
"data:`__X__` form, freeing up these names in the function attribute "
"namespace for user-defined attributes.  To wit, :attr:`func_closure`, :attr:"
"`func_code`, :attr:`func_defaults`, :attr:`func_dict`, :attr:`func_doc`, :"
"attr:`func_globals`, :attr:`func_name` were renamed to :attr:`__closure__`, :"
"attr:`__code__`, :attr:`__defaults__`, :attr:`__dict__`, :attr:`__doc__`, :"
"attr:`__globals__`, :attr:`__name__`, respectively."
msgstr ""

# 4f13f54524814b109b62bb3607f952a0
#: whatsnew/3.0.rst:790
msgid ":meth:`__nonzero__` is now :meth:`__bool__`."
msgstr ""

# 9cb84496caf3493bb1dc62886d6833c8
#: whatsnew/3.0.rst:793
msgid "Builtins"
msgstr ""

# c43e2ac669694152afbb884f6d7dc65e
#: whatsnew/3.0.rst:795
msgid ""
":pep:`3135`: New :func:`super`.  You can now invoke :func:`super` without "
"arguments and (assuming this is in a regular instance method defined inside "
"a :keyword:`class` statement) the right class and instance will "
"automatically be chosen.  With arguments, the behavior of :func:`super` is "
"unchanged."
msgstr ""

# 5d813c4c7e534c0086a2d9aaae87fba0
#: whatsnew/3.0.rst:801
msgid ""
":pep:`3111`: :func:`raw_input` was renamed to :func:`input`.  That is, the "
"new :func:`input` function reads a line from :data:`sys.stdin` and returns "
"it with the trailing newline stripped. It raises :exc:`EOFError` if the "
"input is terminated prematurely. To get the old behavior of :func:`input`, "
"use ``eval(input())``."
msgstr ""

# 556cd01b497b4dbdbbc32b1f43b8c3ce
#: whatsnew/3.0.rst:807
msgid ""
"A new built-in function :func:`next` was added to call the :meth:`~iterator."
"__next__` method on an object."
msgstr ""

# 320f4de49c8a4b9e9cf0856ae1a4d073
#: whatsnew/3.0.rst:810
msgid ""
"The :func:`round` function rounding strategy and return type have changed.  "
"Exact halfway cases are now rounded to the nearest even result instead of "
"away from zero.  (For example, ``round(2.5)`` now returns ``2`` rather than "
"``3``.)  :func:`round(x[, n])` now delegates to ``x.__round__([n])`` instead "
"of always returning a float.  It generally returns an integer when called "
"with a single argument and a value of the same type as ``x`` when called "
"with two arguments."
msgstr ""

# 0fce4d811a544f279523d4f3e117ee98
#: whatsnew/3.0.rst:819
msgid "Moved :func:`intern` to :func:`sys.intern`."
msgstr ""

# d83ec13cd06f4fc1843a3c12471e5352
#: whatsnew/3.0.rst:821
msgid ""
"Removed: :func:`apply`.  Instead of ``apply(f, args)`` use ``f(*args)``."
msgstr ""

# 9ebea0ffb1fb436dbb6b6a78f0ec84de
#: whatsnew/3.0.rst:824
msgid ""
"Removed :func:`callable`.  Instead of ``callable(f)`` you can use "
"``isinstance(f, collections.Callable)``.  The :func:`operator.isCallable` "
"function is also gone."
msgstr ""

# 9e2889884a2b4f919fa6c549b0e0b442
#: whatsnew/3.0.rst:828
msgid ""
"Removed :func:`coerce`.  This function no longer serves a purpose now that "
"classic classes are gone."
msgstr ""

# 36935abce5de4391b11b88eabed41890
#: whatsnew/3.0.rst:831
msgid ""
"Removed :func:`execfile`.  Instead of ``execfile(fn)`` use ``exec(open(fn)."
"read())``."
msgstr ""

# de306073b4b9439ab13eacc703825a19
#: whatsnew/3.0.rst:834
msgid ""
"Removed the :class:`file` type.  Use :func:`open`.  There are now several "
"different kinds of streams that open can return in the :mod:`io` module."
msgstr ""

# 03d917a678f8470198732e2e74152724
#: whatsnew/3.0.rst:837
msgid ""
"Removed :func:`reduce`.  Use :func:`functools.reduce` if you really need it; "
"however, 99 percent of the time an explicit :keyword:`for` loop is more "
"readable."
msgstr ""

# b98ef4fd9a8e43458ad453ccd3c3d18d
#: whatsnew/3.0.rst:841
msgid "Removed :func:`reload`.  Use :func:`imp.reload`."
msgstr ""

# 6abd0d5f541e4a14bca5e2aa81ad83f1
#: whatsnew/3.0.rst:843
msgid ""
"Removed. :meth:`dict.has_key` -- use the :keyword:`in` operator instead."
msgstr ""

# 920b3c14b0f3431580dfad4ca8faf8e7
#: whatsnew/3.0.rst:852
msgid ""
"Due to time constraints, here is a *very* incomplete list of changes to the "
"C API."
msgstr ""

# 3e5a54a46e034c7ca340fa9979e36ab0
#: whatsnew/3.0.rst:855
msgid ""
"Support for several platforms was dropped, including but not limited to Mac "
"OS 9, BeOS, RISCOS, Irix, and Tru64."
msgstr ""

# 4b0735d97cad4a1290ca8174303bcb12
#: whatsnew/3.0.rst:858
msgid ":pep:`3118`: New Buffer API."
msgstr ""

# fbfd4955a934431b9d8645e5e8a62d8b
#: whatsnew/3.0.rst:860
msgid ":pep:`3121`: Extension Module Initialization & Finalization."
msgstr ""

# b5af87271fab4c568fd969aa9c2b8bfd
#: whatsnew/3.0.rst:862
msgid ":pep:`3123`: Making :c:macro:`PyObject_HEAD` conform to standard C."
msgstr ""

# 0b80e17a9ed943318add5b92e700fedb
#: whatsnew/3.0.rst:864
msgid "No more C API support for restricted execution."
msgstr ""

# 05b965ed4f6c4e04b7d87731c211335a
#: whatsnew/3.0.rst:866
msgid ""
":c:func:`PyNumber_Coerce`, :c:func:`PyNumber_CoerceEx`, :c:func:"
"`PyMember_Get`, and :c:func:`PyMember_Set` C APIs are removed."
msgstr ""

# bc9cb44d2a7c4fa7a739a4cad867d2c3
#: whatsnew/3.0.rst:869
msgid ""
"New C API :c:func:`PyImport_ImportModuleNoBlock`, works like :c:func:"
"`PyImport_ImportModule` but won't block on the import lock (returning an "
"error instead)."
msgstr ""

# ae566186eb954b23bcd44c61d2f22fe9
#: whatsnew/3.0.rst:873
msgid ""
"Renamed the boolean conversion C-level slot and method: ``nb_nonzero`` is "
"now ``nb_bool``."
msgstr ""

# f166331baf6c418b90d9a10b0f4ae974
#: whatsnew/3.0.rst:876
msgid ""
"Removed :c:macro:`METH_OLDARGS` and :c:macro:`WITH_CYCLE_GC` from the C API."
msgstr ""

# ec39115948544baf959714c6685b9215
#: whatsnew/3.0.rst:882
msgid "Performance"
msgstr ""

# 7d4427d7d20843df82cbe9cb162a8299
#: whatsnew/3.0.rst:884
msgid ""
"The net result of the 3.0 generalizations is that Python 3.0 runs the "
"pystone benchmark around 10% slower than Python 2.5.  Most likely the "
"biggest cause is the removal of special-casing for small integers. There's "
"room for improvement, but it will happen after 3.0 is released!"
msgstr ""

# 8182d1a2adb3462b8082d87c24d88674
#: whatsnew/3.0.rst:894
msgid "Porting To Python 3.0"
msgstr "Portage vers Python 3.2"

# 2236054b2082495ebc57cd493dacd8f6
#: whatsnew/3.0.rst:896
msgid ""
"For porting existing Python 2.5 or 2.6 source code to Python 3.0, the best "
"strategy is the following:"
msgstr ""

# d0c6e4cb519f436aa2463fdeda828283
#: whatsnew/3.0.rst:899
msgid "(Prerequisite:) Start with excellent test coverage."
msgstr ""

# 44ea5be5da6f44548da5427cd2b82c4e
#: whatsnew/3.0.rst:901
msgid ""
"Port to Python 2.6.  This should be no more work than the average port from "
"Python 2.x to Python 2.(x+1).  Make sure all your tests pass."
msgstr ""

# 8e55faeae7da40b7be73a9b1c286ebe8
#: whatsnew/3.0.rst:905
msgid ""
"(Still using 2.6:) Turn on the :option:`-3` command line switch. This "
"enables warnings about features that will be removed (or change) in 3.0.  "
"Run your test suite again, and fix code that you get warnings about until "
"there are no warnings left, and all your tests still pass."
msgstr ""

# b6406baf39eb4f31b23e70f423e6fe3c
#: whatsnew/3.0.rst:911
msgid ""
"Run the ``2to3`` source-to-source translator over your source code tree.  "
"(See :ref:`2to3-reference` for more on this tool.)  Run the result of the "
"translation under Python 3.0.  Manually fix up any remaining issues, fixing "
"problems until all tests pass again."
msgstr ""

# f19cb94b92ec4f5cb265dd5d54b45fee
#: whatsnew/3.0.rst:916
msgid ""
"It is not recommended to try to write source code that runs unchanged under "
"both Python 2.6 and 3.0; you'd have to use a very contorted coding style, e."
"g. avoiding ``print`` statements, metaclasses, and much more.  If you are "
"maintaining a library that needs to support both Python 2.6 and Python 3.0, "
"the best approach is to modify step 3 above by editing the 2.6 version of "
"the source code and running the ``2to3`` translator again, rather than "
"editing the 3.0 version of the source code."
msgstr ""

# 2a96211061ce4611ab921e0aaaf0ce28
#: whatsnew/3.0.rst:925
msgid ""
"For porting C extensions to Python 3.0, please see :ref:`cporting-howto`."
msgstr ""

# 123069faca2d4b0aaa5f55b510469019
#: whatsnew/3.1.rst:3
msgid "What's New In Python 3.1"
msgstr "Nouveautés de Python 2.0"

# 2d30b8e9f0af425991bc575c61ad8688
# 7a8f81755f4f463bb3439818c9387d67
#: whatsnew/3.1.rst:5 whatsnew/3.2.rst:5
msgid "Raymond Hettinger"
msgstr ""

# 741e37dc55c54ba8908f2021162c925f
#: whatsnew/3.1.rst:49
msgid "This article explains the new features in Python 3.1, compared to 3.0."
msgstr ""

# 3f4b8476fbfa4c2eaf0ae6e3c2d8cc58
#: whatsnew/3.1.rst:53
msgid "PEP 372: Ordered Dictionaries"
msgstr ""

# 4dab7513a19f4f6bbb197c15cbc5c37d
#: whatsnew/3.1.rst:55
msgid ""
"Regular Python dictionaries iterate over key/value pairs in arbitrary order. "
"Over the years, a number of authors have written alternative implementations "
"that remember the order that the keys were originally inserted.  Based on "
"the experiences from those implementations, a new :class:`collections."
"OrderedDict` class has been introduced."
msgstr ""

# 42706e4bb189482fad8a596507cffc7e
#: whatsnew/3.1.rst:61
msgid ""
"The OrderedDict API is substantially the same as regular dictionaries but "
"will iterate over keys and values in a guaranteed order depending on when a "
"key was first inserted.  If a new entry overwrites an existing entry, the "
"original insertion position is left unchanged.  Deleting an entry and "
"reinserting it will move it to the end."
msgstr ""

# 64ba9b7edadc419e968f43b76e561554
#: whatsnew/3.1.rst:67
msgid ""
"The standard library now supports use of ordered dictionaries in several "
"modules.  The :mod:`configparser` module uses them by default.  This lets "
"configuration files be read, modified, and then written back in their "
"original order.  The *_asdict()* method for :func:`collections.namedtuple` "
"now returns an ordered dictionary with the values appearing in the same "
"order as the underlying tuple indicies.  The :mod:`json` module is being "
"built-out with an *object_pairs_hook* to allow OrderedDicts to be built by "
"the decoder. Support was also added for third-party tools like `PyYAML "
"<http://pyyaml.org/>`_."
msgstr ""

#: whatsnew/3.1.rst:79
msgid "PEP 372 - Ordered Dictionaries"
msgstr ""

# e81b0d8a679c49c5b16515a166e5be37
#: whatsnew/3.1.rst:79
msgid ""
"PEP written by Armin Ronacher and Raymond Hettinger.  Implementation written "
"by Raymond Hettinger."
msgstr ""

# b63eb14419504d93a12f37eb1fcd3471
#: whatsnew/3.1.rst:86
msgid ""
"The built-in :func:`format` function and the :meth:`str.format` method use a "
"mini-language that now includes a simple, non-locale aware way to format a "
"number with a thousands separator.  That provides a way to humanize a "
"program's output, improving its professional appearance and readability::"
msgstr ""

# 62df460362f74879bb30c46efc9d4dad
#: whatsnew/3.1.rst:100
msgid ""
"The supported types are :class:`int`, :class:`float`, :class:`complex` and :"
"class:`decimal.Decimal`."
msgstr ""

# 484ba8cbd23b4dc0980122a06c5e193f
#: whatsnew/3.1.rst:103
msgid ""
"Discussions are underway about how to specify alternative separators like "
"dots, spaces, apostrophes, or underscores.  Locale-aware applications should "
"use the existing *n* format specifier which already has some support for "
"thousands separators."
msgstr ""

# 6a42079915d64d55a247c52a3f6a5d9c
#: whatsnew/3.1.rst:111
msgid ""
"PEP written by Raymond Hettinger and implemented by Eric Smith and Mark "
"Dickinson."
msgstr ""

# 90890c93a5fe40308acb4fdff936a7ca
#: whatsnew/3.1.rst:120
msgid ""
"Directories and zip archives containing a :file:`__main__.py` file can now "
"be executed directly by passing their name to the interpreter. The directory/"
"zipfile is automatically inserted as the first entry in sys.path.  "
"(Suggestion and initial patch by Andy Chu; revised patch by Phillip J. Eby "
"and Nick Coghlan; :issue:`1739468`.)"
msgstr ""

# f0038829ba8f44a49d0499edd1f2c7a5
#: whatsnew/3.1.rst:126
msgid ""
"The :func:`int` type gained a ``bit_length`` method that returns the number "
"of bits necessary to represent its argument in binary::"
msgstr ""

# a3a2fc699de748f282d35feb890a2887
#: whatsnew/3.1.rst:140
msgid ""
"(Contributed by Fredrik Johansson, Victor Stinner, Raymond Hettinger, and "
"Mark Dickinson; :issue:`3439`.)"
msgstr ""

# 48519695398e4744b5a65c6c970e0bdd
#: whatsnew/3.1.rst:143
msgid ""
"The fields in :func:`format` strings can now be automatically numbered::"
msgstr ""

# da1402313dd54076a66f165cf6f0bb41
#: whatsnew/3.1.rst:149
msgid ""
"Formerly, the string would have required numbered fields such as: ``'Sir {0} "
"of {1}'``."
msgstr ""

# cff64ea6adc04f3ca74d55ded73d2cca
#: whatsnew/3.1.rst:152
msgid "(Contributed by Eric Smith; :issue:`5237`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# de6fb71eb8a84c15b5f62cac16dd3f28
#: whatsnew/3.1.rst:154
msgid ""
"The :func:`string.maketrans` function is deprecated and is replaced by new "
"static methods, :meth:`bytes.maketrans` and :meth:`bytearray.maketrans`. "
"This change solves the confusion around which types were supported by the :"
"mod:`string` module. Now, :class:`str`, :class:`bytes`, and :class:"
"`bytearray` each have their own **maketrans** and **translate** methods with "
"intermediate translation tables of the appropriate type."
msgstr ""

# cf3d141b500441fe92f2b817050aa319
# cacb01f2ba914836bdd9792de2137258
#: whatsnew/3.1.rst:161 whatsnew/3.2.rst:2638
msgid "(Contributed by Georg Brandl; :issue:`5675`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# bbecc693915345b8bc6128ccd4703020
#: whatsnew/3.1.rst:163
msgid ""
"The syntax of the :keyword:`with` statement now allows multiple context "
"managers in a single statement::"
msgstr ""

# 361d006a48bb44e5844e490697b2216b
#: whatsnew/3.1.rst:171
msgid ""
"With the new syntax, the :func:`contextlib.nested` function is no longer "
"needed and is now deprecated."
msgstr ""

# 11e8fdccc6f8423098cd41e13d54a6d0
# 4d750194547143a69c46af8c203334c1
#: whatsnew/3.1.rst:174 whatsnew/3.2.rst:2651
msgid ""
"(Contributed by Georg Brandl and Mattias Brändström; `appspot issue 53094 "
"<http://codereview.appspot.com/53094>`_.)"
msgstr ""

# a2e2023197b14b108c39ee33e962711d
#: whatsnew/3.1.rst:177
msgid ""
"``round(x, n)`` now returns an integer if *x* is an integer. Previously it "
"returned a float::"
msgstr ""

# eadce332aff4449082306c0116f79828
#: whatsnew/3.1.rst:183
msgid "(Contributed by Mark Dickinson; :issue:`4707`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 69b9334b7b7342da9cce0c11f2456090
#: whatsnew/3.1.rst:185
msgid ""
"Python now uses David Gay's algorithm for finding the shortest floating "
"point representation that doesn't change its value.  This should help "
"mitigate some of the confusion surrounding binary floating point numbers."
msgstr ""

# 7ae6cb8482b8441eb577734910f92ce4
#: whatsnew/3.1.rst:190
msgid ""
"The significance is easily seen with a number like ``1.1`` which does not "
"have an exact equivalent in binary floating point.  Since there is no exact "
"equivalent, an expression like ``float('1.1')`` evaluates to the nearest "
"representable value which is ``0x1.199999999999ap+0`` in hex or "
"``1.100000000000000088817841970012523233890533447265625`` in decimal. That "
"nearest value was and still is used in subsequent floating point "
"calculations."
msgstr ""

# 47a1e408dfd54ce9b1fe822ba64bac0c
#: whatsnew/3.1.rst:198
msgid ""
"What is new is how the number gets displayed.  Formerly, Python used a "
"simple approach.  The value of ``repr(1.1)`` was computed as ``format(1.1, "
"'.17g')`` which evaluated to ``'1.1000000000000001'``. The advantage of "
"using 17 digits was that it relied on IEEE-754 guarantees to assure that "
"``eval(repr(1.1))`` would round-trip exactly to its original value.  The "
"disadvantage is that many people found the output to be confusing (mistaking "
"intrinsic limitations of binary floating point representation as being a "
"problem with Python itself)."
msgstr ""

# a3f7da1195ef4f71be06dbb3f1ff4a0f
#: whatsnew/3.1.rst:207
msgid ""
"The new algorithm for ``repr(1.1)`` is smarter and returns ``'1.1'``. "
"Effectively, it searches all equivalent string representations (ones that "
"get stored with the same underlying float value) and returns the shortest "
"representation."
msgstr ""

# 7d9d66a993964f7d92506bca7440edff
#: whatsnew/3.1.rst:212
msgid ""
"The new algorithm tends to emit cleaner representations when possible, but "
"it does not change the underlying values.  So, it is still the case that "
"``1.1 + 2.2 != 3.3`` even though the representations may suggest otherwise."
msgstr ""

# d72db2b02c7249f19329b294ab4061ad
#: whatsnew/3.1.rst:216
msgid ""
"The new algorithm depends on certain features in the underlying floating "
"point implementation.  If the required features are not found, the old "
"algorithm will continue to be used.  Also, the text pickle protocols assure "
"cross-platform portability by using the old algorithm."
msgstr ""

# f3201780c85c456b905db92874373b19
#: whatsnew/3.1.rst:221
msgid "(Contributed by Eric Smith and Mark Dickinson; :issue:`1580`)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# f685cd729d2f47c1abc3f75469cbffa4
#: whatsnew/3.1.rst:226
msgid ""
"Added a :class:`collections.Counter` class to support convenient counting of "
"unique items in a sequence or iterable::"
msgstr ""

# fa4367f8553941218d482b4ad5366b4d
#: whatsnew/3.1.rst:232
msgid "(Contributed by Raymond Hettinger; :issue:`1696199`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# f1a97b87b677433bba0ee5f200522789
#: whatsnew/3.1.rst:234
msgid ""
"Added a new module, :mod:`tkinter.ttk` for access to the Tk themed widget "
"set. The basic idea of ttk is to separate, to the extent possible, the code "
"implementing a widget's behavior from the code implementing its appearance."
msgstr ""

# c40e27dcd5624a3aa2cd4826ed13e1e3
#: whatsnew/3.1.rst:238
msgid "(Contributed by Guilherme Polo; :issue:`2983`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# bd59b0b6dadf4c8f91d5a1d575af86dc
#: whatsnew/3.1.rst:240
msgid ""
"The :class:`gzip.GzipFile` and :class:`bz2.BZ2File` classes now support the "
"context manager protocol::"
msgstr ""

# 3dd6f955742b4fe5bff2b34406edf3b8
# 888adc769dad4a6d89c3e6f7f60903cd
#: whatsnew/3.1.rst:247 whatsnew/3.2.rst:2290
msgid "(Contributed by Antoine Pitrou.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 1882847bd78a4689bd599e24561ead63
#: whatsnew/3.1.rst:249
msgid ""
"The :mod:`decimal` module now supports methods for creating a decimal object "
"from a binary :class:`float`.  The conversion is exact but can sometimes be "
"surprising::"
msgstr ""

# 7a866d52658d471ab999b414941d58fe
#: whatsnew/3.1.rst:256
msgid ""
"The long decimal result shows the actual binary fraction being stored for "
"*1.1*.  The fraction has many digits because *1.1* cannot be exactly "
"represented in binary."
msgstr ""

# dd236e0d608d4201bc41c4192319c985
#: whatsnew/3.1.rst:260
msgid "(Contributed by Raymond Hettinger and Mark Dickinson.)"
msgstr ""

# f0a86d61472a437f9ab95a98b4947046
#: whatsnew/3.1.rst:262
msgid ""
"The :mod:`itertools` module grew two new functions.  The :func:`itertools."
"combinations_with_replacement` function is one of four for generating "
"combinatorics including permutations and Cartesian products.  The :func:"
"`itertools.compress` function mimics its namesake from APL.  Also, the "
"existing :func:`itertools.count` function now has an optional *step* "
"argument and can accept any type of counting sequence including :class:"
"`fractions.Fraction` and :class:`decimal.Decimal`::"
msgstr ""

# b3c134ebd5b040eca1e95723cc8fe38d
#: whatsnew/3.1.rst:283
msgid ""
":func:`collections.namedtuple` now supports a keyword argument *rename* "
"which lets invalid fieldnames be automatically converted to positional names "
"in the form _0, _1, etc.  This is useful when the field names are being "
"created by an external source such as a CSV header, SQL field list, or user "
"input::"
msgstr ""

# d89681e4bca74f27a7e7289f8ec9fa30
#: whatsnew/3.1.rst:300
msgid "(Contributed by Raymond Hettinger; :issue:`1818`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 1682f3d5e30546e48855feaeeb6c4357
#: whatsnew/3.1.rst:302
msgid ""
"The :func:`re.sub`, :func:`re.subn` and :func:`re.split` functions now "
"accept a flags parameter."
msgstr ""

# aa81711ddde24f82bc53d7cc3d004049
#: whatsnew/3.1.rst:305
msgid "(Contributed by Gregory Smith.)"
msgstr ""

# b3a344e87f64406a97b754e142bdf85d
#: whatsnew/3.1.rst:307
msgid ""
"The :mod:`logging` module now implements a simple :class:`logging."
"NullHandler` class for applications that are not using logging but are "
"calling library code that does.  Setting-up a null handler will suppress "
"spurious warnings such as \"No handlers could be found for logger foo\"::"
msgstr ""

# fad4fd961e3f467b999bf9828f4c11ce
#: whatsnew/3.1.rst:315
msgid "(Contributed by Vinay Sajip; :issue:`4384`)."
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 0791a977c8bc40a9b79f7c8b70346ccf
#: whatsnew/3.1.rst:317
msgid ""
"The :mod:`runpy` module which supports the ``-m`` command line switch now "
"supports the execution of packages by looking for and executing a "
"``__main__`` submodule when a package name is supplied."
msgstr ""

# 364c194743574275b4d89caabcf1ab02
#: whatsnew/3.1.rst:321
msgid "(Contributed by Andi Vajda; :issue:`4195`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 37721905ad474f7ead5a245698e547d6
#: whatsnew/3.1.rst:323
msgid ""
"The :mod:`pdb` module can now access and display source code loaded via :mod:"
"`zipimport` (or any other conformant :pep:`302` loader)."
msgstr ""

# f16423acc7b34c8984a26cc182c5761f
#: whatsnew/3.1.rst:326
msgid "(Contributed by Alexander Belopolsky; :issue:`4201`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 5094a0e75d9648ce893def73373f31d8
#: whatsnew/3.1.rst:328
msgid ":class:`functools.partial` objects can now be pickled."
msgstr ""

# 9433435ddde545d5b6f4405afb3ce52f
#: whatsnew/3.1.rst:330
msgid ""
"(Suggested by Antoine Pitrou and Jesse Noller.  Implemented by Jack "
"Diederich; :issue:`5228`.)"
msgstr ""

# d4fbf0a3a2f74f21851316a239ee827f
#: whatsnew/3.1.rst:333
msgid ""
"Add :mod:`pydoc` help topics for symbols so that ``help('@')`` works as "
"expected in the interactive environment."
msgstr ""

# 9a5a885b20ae4e2fb449155e74b9ce7c
#: whatsnew/3.1.rst:336
msgid "(Contributed by David Laban; :issue:`4739`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 751a7479590a42a8a40ef511dcbdbcb3
#: whatsnew/3.1.rst:338
msgid ""
"The :mod:`unittest` module now supports skipping individual tests or classes "
"of tests. And it supports marking a test as a expected failure, a test that "
"is known to be broken, but shouldn't be counted as a failure on a "
"TestResult::"
msgstr ""

# 8d6dd98b221d4a05958dd8f6602575bf
#: whatsnew/3.1.rst:353
msgid ""
"Also, tests for exceptions have been builtout to work with context managers "
"using the :keyword:`with` statement::"
msgstr ""

# f8a55286c58f49a7b2084cb28e4765ea
#: whatsnew/3.1.rst:360
msgid ""
"In addition, several new assertion methods were added including :func:"
"`assertSetEqual`, :func:`assertDictEqual`, :func:"
"`assertDictContainsSubset`, :func:`assertListEqual`, :func:"
"`assertTupleEqual`, :func:`assertSequenceEqual`, :func:"
"`assertRaisesRegexp`, :func:`assertIsNone`, and :func:`assertIsNotNone`."
msgstr ""

# b3b5846929744588a55d081d148b6037
#: whatsnew/3.1.rst:367
msgid "(Contributed by Benjamin Peterson and Antoine Pitrou.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 9600caf2d1f24ec7a817d741fcfba233
#: whatsnew/3.1.rst:369
msgid ""
"The :mod:`io` module has three new constants for the :meth:`seek` method :"
"data:`SEEK_SET`, :data:`SEEK_CUR`, and :data:`SEEK_END`."
msgstr ""

# adaef10d8a8f4e079a066da82e18793a
#: whatsnew/3.1.rst:372
msgid "The :attr:`sys.version_info` tuple is now a named tuple::"
msgstr ""

# 6cda3e5fb1b74df08f2d8467fcd72d2d
#: whatsnew/3.1.rst:377
msgid "(Contributed by Ross Light; :issue:`4285`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 91cef6c5f7254594b128bf6043dda536
#: whatsnew/3.1.rst:379
msgid "The :mod:`nntplib` and :mod:`imaplib` modules now support IPv6."
msgstr ""

# 6df69d7cea69488d9ff613755b1a119b
#: whatsnew/3.1.rst:381
msgid "(Contributed by Derek Morr; :issue:`1655` and :issue:`1664`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# f7fab012f01e442887627d225a4ef663
#: whatsnew/3.1.rst:383
msgid ""
"The :mod:`pickle` module has been adapted for better interoperability with "
"Python 2.x when used with protocol 2 or lower.  The reorganization of the "
"standard library changed the formal reference for many objects.  For "
"example, ``__builtin__.set`` in Python 2 is called ``builtins.set`` in "
"Python 3. This change confounded efforts to share data between different "
"versions of Python.  But now when protocol 2 or lower is selected, the "
"pickler will automatically use the old Python 2 names for both loading and "
"dumping. This remapping is turned-on by default but can be disabled with the "
"*fix_imports* option::"
msgstr ""

# 03561eac871945efa3ad5da51ebbc75b
#: whatsnew/3.1.rst:399
msgid ""
"An unfortunate but unavoidable side-effect of this change is that protocol 2 "
"pickles produced by Python 3.1 won't be readable with Python 3.0. The latest "
"pickle protocol, protocol 3, should be used when migrating data between "
"Python 3.x implementations, as it doesn't attempt to remain compatible with "
"Python 2.x."
msgstr ""

# 7be8c86284054237a43f7153b9f83a00
#: whatsnew/3.1.rst:405
msgid ""
"(Contributed by Alexandre Vassalotti and Antoine Pitrou, :issue:`6137`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# e1d26f0c4458479b8faf05fe73b38a0a
#: whatsnew/3.1.rst:407
msgid ""
"A new module, :mod:`importlib` was added.  It provides a complete, portable, "
"pure Python reference implementation of the :keyword:`import` statement and "
"its counterpart, the :func:`__import__` function.  It represents a "
"substantial step forward in documenting and defining the actions that take "
"place during imports."
msgstr ""

# 0edf1030564f41b5a3e281ccf8e72483
#: whatsnew/3.1.rst:418
msgid "Major performance enhancements have been added:"
msgstr ""

# 983a4582cd0646ab80d9f4eb589fa80e
#: whatsnew/3.1.rst:420
msgid ""
"The new I/O library (as defined in :pep:`3116`) was mostly written in Python "
"and quickly proved to be a problematic bottleneck in Python 3.0. In Python "
"3.1, the I/O library has been entirely rewritten in C and is 2 to 20 times "
"faster depending on the task at hand. The pure Python version is still "
"available for experimentation purposes through the ``_pyio`` module."
msgstr ""

# eb557a9b44de4810abe87d06dbec5dda
#: whatsnew/3.1.rst:427
msgid "(Contributed by Amaury Forgeot d'Arc and Antoine Pitrou.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 54fbd64fd3834aed8e37a49405954641
#: whatsnew/3.1.rst:429
msgid ""
"Added a heuristic so that tuples and dicts containing only untrackable "
"objects are not tracked by the garbage collector. This can reduce the size "
"of collections and therefore the garbage collection overhead on long-running "
"programs, depending on their particular use of datatypes."
msgstr ""

# 3a83512f0d224e41ae736b864b6def55
#: whatsnew/3.1.rst:434
msgid "(Contributed by Antoine Pitrou, :issue:`4688`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# d4e8759dbf5041ca98428521bd5f90c0
#: whatsnew/3.1.rst:436
msgid ""
"Enabling a configure option named ``--with-computed-gotos`` on compilers "
"that support it (notably: gcc, SunPro, icc), the bytecode evaluation loop is "
"compiled with a new dispatch mechanism which gives speedups of up to 20%, "
"depending on the system, the compiler, and the benchmark."
msgstr ""

# 4e0f51da54b743029b72ee51fb147e96
#: whatsnew/3.1.rst:442
msgid ""
"(Contributed by Antoine Pitrou along with a number of other participants, :"
"issue:`4753`)."
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 832a90545bc44f58b72b455c67b4d593
#: whatsnew/3.1.rst:445
msgid ""
"The decoding of UTF-8, UTF-16 and LATIN-1 is now two to four times faster."
msgstr ""

# 154bdc726e984cc381c08a6aa50f41ee
#: whatsnew/3.1.rst:448
msgid ""
"(Contributed by Antoine Pitrou and Amaury Forgeot d'Arc, :issue:`4868`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# fb94b3f7cb044a2ab0b87719a49e3d66
#: whatsnew/3.1.rst:450
msgid ""
"The :mod:`json` module now has a C extension to substantially improve its "
"performance.  In addition, the API was modified so that json works only "
"with :class:`str`, not with :class:`bytes`.  That change makes the module "
"closely match the `JSON specification <http://json.org/>`_ which is defined "
"in terms of Unicode."
msgstr ""

# 5e771322caab4291b44a0aabf2cb418e
#: whatsnew/3.1.rst:456
msgid ""
"(Contributed by Bob Ippolito and converted to Py3.1 by Antoine Pitrou and "
"Benjamin Peterson; :issue:`4136`.)"
msgstr ""

# 52bfd41f2dbe4511b581be109e05d640
#: whatsnew/3.1.rst:459
msgid ""
"Unpickling now interns the attribute names of pickled objects.  This saves "
"memory and allows pickles to be smaller."
msgstr ""

# 53dd9756e92644dbb584f9d8d64649ad
#: whatsnew/3.1.rst:462
msgid "(Contributed by Jake McGuire and Antoine Pitrou; :issue:`5084`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 4263ee79ea4f4364b04bb323c58f1dda
# b046e73277064401a811d7fdc262f501
#: whatsnew/3.1.rst:465 whatsnew/3.2.rst:2456
msgid "IDLE"
msgstr "IDLE"

# cc0f30c8699146d3b63ccd18ad4b92ab
#: whatsnew/3.1.rst:467
msgid ""
"IDLE's format menu now provides an option to strip trailing whitespace from "
"a source file."
msgstr ""

# c2b002048351460899001a56bddbcf6d
#: whatsnew/3.1.rst:470
msgid "(Contributed by Roger D. Serwy; :issue:`5150`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 18841a2c92744d6ca710e6628d5acc9a
#: whatsnew/3.1.rst:477
msgid ""
"Integers are now stored internally either in base 2**15 or in base 2**30, "
"the base being determined at build time.  Previously, they were always "
"stored in base 2**15.  Using base 2**30 gives significant performance "
"improvements on 64-bit machines, but benchmark results on 32-bit machines "
"have been mixed.  Therefore, the default is to use base 2**30 on 64-bit "
"machines and base 2**15 on 32-bit machines; on Unix, there's a new configure "
"option ``--enable-big-digits`` that can be used to override this default."
msgstr ""

# 666b5df3332f48c29357797918753fe1
#: whatsnew/3.1.rst:486
msgid ""
"Apart from the performance improvements this change should be invisible to "
"end users, with one exception: for testing and debugging purposes there's a "
"new :attr:`sys.int_info` that provides information about the internal "
"format, giving the number of bits per digit and the size in bytes of the C "
"type used to store each digit::"
msgstr ""

# ca30315a3d96445aa31b4e2720d4ad7d
#: whatsnew/3.1.rst:498
msgid ""
"The :c:func:`PyLong_AsUnsignedLongLong()` function now handles a negative "
"*pylong* by raising :exc:`OverflowError` instead of :exc:`TypeError`."
msgstr ""

# fd4aae921a4844baba4ed430dabe485e
#: whatsnew/3.1.rst:501
msgid "(Contributed by Mark Dickinson and Lisandro Dalcrin; :issue:`5175`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 1c814e02279e4af381f483eb06ed609f
#: whatsnew/3.1.rst:503
msgid ""
"Deprecated :c:func:`PyNumber_Int`.  Use :c:func:`PyNumber_Long` instead."
msgstr ""

# c129442d3a3b4d829dcc5b684cec917e
#: whatsnew/3.1.rst:505
msgid "(Contributed by Mark Dickinson; :issue:`4910`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 79155b34711640469901e7f20793f75c
#: whatsnew/3.1.rst:507
msgid ""
"Added a new :c:func:`PyOS_string_to_double` function to replace the "
"deprecated functions :c:func:`PyOS_ascii_strtod` and :c:func:"
"`PyOS_ascii_atof`."
msgstr ""

# 8f67426587a74157b4df1dea42c28784
#: whatsnew/3.1.rst:510
msgid "(Contributed by Mark Dickinson; :issue:`5914`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 0209b68a2d3c4636ad2a1267fbdf75ab
#: whatsnew/3.1.rst:512
msgid ""
"Added :c:type:`PyCapsule` as a replacement for the :c:type:`PyCObject` API. "
"The principal difference is that the new type has a well defined interface "
"for passing typing safety information and a less complicated signature for "
"calling a destructor.  The old type had a problematic API and is now "
"deprecated."
msgstr ""

# b3ceba88a7844ff1be18c687411fca1d
#: whatsnew/3.1.rst:518
msgid "(Contributed by Larry Hastings; :issue:`5630`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 267cd79417fd4d279acbbb10fc236a03
#: whatsnew/3.1.rst:521
msgid "Porting to Python 3.1"
msgstr "Portage vers Python 3.2"

# 6f071ac0c8af4a3187248cce98ed884b
#: whatsnew/3.1.rst:526
msgid ""
"The new floating point string representations can break existing doctests. "
"For example::"
msgstr ""

# 9ec52431550b472388b88af700b56c0f
#: whatsnew/3.1.rst:549
msgid ""
"The automatic name remapping in the pickle module for protocol 2 or lower "
"can make Python 3.1 pickles unreadable in Python 3.0.  One solution is to "
"use protocol 3.  Another solution is to set the *fix_imports* option to "
"**False**. See the discussion above for more details."
msgstr ""

# 882163d0974744c5afbf8ff969e2a1f4
#: whatsnew/3.2.rst:3
msgid "What's New In Python 3.2"
msgstr "Nouveautés de Python 2.0"

# 948d133d446c4330a8aff16e2cee882c
#: whatsnew/3.2.rst:51
msgid ""
"This article explains the new features in Python 3.2 as compared to 3.1.  It "
"focuses on a few highlights and gives a few examples.  For full details, see "
"the :source:`Misc/NEWS <Misc/NEWS>` file."
msgstr ""

# 4f5527a82d40442a86494530366494ae
#: whatsnew/3.2.rst:57
msgid ":pep:`392` - Python 3.2 Release Schedule"
msgstr ""

# 204846b3b5744dd8b04f950199d66a39
#: whatsnew/3.2.rst:61
msgid "PEP 384: Defining a Stable ABI"
msgstr ""

# 9cf27e7ce81f4f43a7b3de8f2ed594c9
#: whatsnew/3.2.rst:63
msgid ""
"In the past, extension modules built for one Python version were often not "
"usable with other Python versions. Particularly on Windows, every feature "
"release of Python required rebuilding all extension modules that one wanted "
"to use. This requirement was the result of the free access to Python "
"interpreter internals that extension modules could use."
msgstr ""

# 1491b9fb8f764db483ba3d5fe1c29dad
#: whatsnew/3.2.rst:69
msgid ""
"With Python 3.2, an alternative approach becomes available: extension "
"modules which restrict themselves to a limited API (by defining "
"Py_LIMITED_API) cannot use many of the internals, but are constrained to a "
"set of API functions that are promised to be stable for several releases. As "
"a consequence, extension modules built for 3.2 in that mode will also work "
"with 3.3, 3.4, and so on. Extension modules that make use of details of "
"memory structures can still be built, but will need to be recompiled for "
"every feature release."
msgstr ""

#: whatsnew/3.2.rst:80
msgid "PEP 384 - Defining a Stable ABI"
msgstr ""

# bcdf0d12015b4866853938cae5b781b1
#: whatsnew/3.2.rst:81
msgid "PEP written by Martin von Löwis."
msgstr ""

# 67b2683f9f804f93b9b294198e095781
#: whatsnew/3.2.rst:85
msgid "PEP 389: Argparse Command Line Parsing Module"
msgstr ""

# e4f48f453fbf4a76a00ee1f16d0bb99e
#: whatsnew/3.2.rst:87
msgid ""
"A new module for command line parsing, :mod:`argparse`, was introduced to "
"overcome the limitations of :mod:`optparse` which did not provide support "
"for positional arguments (not just options), subcommands, required options "
"and other common patterns of specifying and validating options."
msgstr ""

# a602880e52c3401590d3417a70f6924a
#: whatsnew/3.2.rst:92
msgid ""
"This module has already had widespread success in the community as a third-"
"party module.  Being more fully featured than its predecessor, the :mod:"
"`argparse` module is now the preferred module for command-line processing. "
"The older module is still being kept available because of the substantial "
"amount of legacy code that depends on it."
msgstr ""

# da539896ca7f46a5bd517fe5c5659255
#: whatsnew/3.2.rst:98
msgid ""
"Here's an annotated example parser showing features like limiting results to "
"a set of choices, specifying a *metavar* in the help screen, validating that "
"one or more positional arguments is present, and making a required option::"
msgstr ""

# 8b545220e2d744cc9162290a0b02eed8
#: whatsnew/3.2.rst:117
msgid "Example of calling the parser on a command string::"
msgstr ""

# 197cf19ad0454d9c8229c89a25ec1ccb
#: whatsnew/3.2.rst:128
msgid "Example of the parser's automatically generated help::"
msgstr ""

# c6a5261bc68241fe9b6b30a3f7381185
#: whatsnew/3.2.rst:147
msgid ""
"An especially nice :mod:`argparse` feature is the ability to define "
"subparsers, each with their own argument patterns and help displays::"
msgstr ""

#: whatsnew/3.2.rst:171
msgid "PEP 389 - New Command Line Parsing Module"
msgstr ""

# 6e9ad2679222430994fe13e285471a60
#: whatsnew/3.2.rst:171
msgid "PEP written by Steven Bethard."
msgstr ""

# 686e8600943b4483b97d415c8b9d8d0d
#: whatsnew/3.2.rst:173
msgid ""
":ref:`upgrading-optparse-code` for details on the differences from :mod:"
"`optparse`."
msgstr ""

# 2a72bce25fe3484b88c20ac3e5e66ba2
#: whatsnew/3.2.rst:177
msgid "PEP 391:  Dictionary Based Configuration for Logging"
msgstr ""

# 0cde4ed1f32b4e8b9166bbe9812ca0d4
#: whatsnew/3.2.rst:179
msgid ""
"The :mod:`logging` module provided two kinds of configuration, one style "
"with function calls for each option or another style driven by an external "
"file saved in a :mod:`ConfigParser` format.  Those options did not provide "
"the flexibility to create configurations from JSON or YAML files, nor did "
"they support incremental configuration, which is needed for specifying "
"logger options from a command line."
msgstr ""

# ca1b9620f92940fb82010457112f475c
#: whatsnew/3.2.rst:186
msgid ""
"To support a more flexible style, the module now offers :func:`logging."
"config.dictConfig` for specifying logging configuration with plain Python "
"dictionaries.  The configuration options include formatters, handlers, "
"filters, and loggers.  Here's a working example of a configuration "
"dictionary::"
msgstr ""

# b61eb8ab063d4c648d0e1ec6a7bb3c4b
#: whatsnew/3.2.rst:210
msgid ""
"If that dictionary is stored in a file called :file:`conf.json`, it can be "
"loaded and called with code like this::"
msgstr ""

#: whatsnew/3.2.rst:224
msgid "PEP 391 - Dictionary Based Configuration for Logging"
msgstr ""

# f595d68fd2dd47879a46397b62ae128a
#: whatsnew/3.2.rst:225
msgid "PEP written by Vinay Sajip."
msgstr ""

# f7b876e25c904e93b4996eee39178dc1
#: whatsnew/3.2.rst:229
msgid "PEP 3148:  The ``concurrent.futures`` module"
msgstr ""

# d8f5d41408e543b4bbdc41b95bc71eef
#: whatsnew/3.2.rst:231
msgid ""
"Code for creating and managing concurrency is being collected in a new top-"
"level namespace, *concurrent*.  Its first member is a *futures* package "
"which provides a uniform high-level interface for managing threads and "
"processes."
msgstr ""

# 66f26eadeb184f999374441376ffa979
#: whatsnew/3.2.rst:235
msgid ""
"The design for :mod:`concurrent.futures` was inspired by the *java.util."
"concurrent* package.  In that model, a running call and its result are "
"represented by a :class:`~concurrent.futures.Future` object that abstracts "
"features common to threads, processes, and remote procedure calls.  That "
"object supports status checks (running or done), timeouts, cancellations, "
"adding callbacks, and access to results or exceptions."
msgstr ""

# 94c6c4d26b684cc3bfd7014dd73e04c2
#: whatsnew/3.2.rst:242
msgid ""
"The primary offering of the new module is a pair of executor classes for "
"launching and managing calls.  The goal of the executors is to make it "
"easier to use existing tools for making parallel calls. They save the effort "
"needed to setup a pool of resources, launch the calls, create a results "
"queue, add time-out handling, and limit the total number of threads, "
"processes, or remote procedure calls."
msgstr ""

# 17a35d0610d94a708fc0f039318a7868
#: whatsnew/3.2.rst:249
msgid ""
"Ideally, each application should share a single executor across multiple "
"components so that process and thread limits can be centrally managed.  This "
"solves the design challenge that arises when each component has its own "
"competing strategy for resource management."
msgstr ""

# f5e98f3f19404fc8af231848df50418f
#: whatsnew/3.2.rst:254
msgid ""
"Both classes share a common interface with three methods: :meth:`~concurrent."
"futures.Executor.submit` for scheduling a callable and returning a :class:"
"`~concurrent.futures.Future` object; :meth:`~concurrent.futures.Executor."
"map` for scheduling many asynchronous calls at a time, and :meth:"
"`~concurrent.futures.Executor.shutdown` for freeing resources.  The class is "
"a :term:`context manager` and can be used in a :keyword:`with` statement to "
"assure that resources are automatically released when currently pending "
"futures are done executing."
msgstr ""

# 5d4718988dbf417e9cca10d074ac7c4c
#: whatsnew/3.2.rst:263
msgid ""
"A simple of example of :class:`~concurrent.futures.ThreadPoolExecutor` is a "
"launch of four parallel threads for copying files::"
msgstr ""

#: whatsnew/3.2.rst:276
msgid "PEP 3148 - Futures -- Execute Computations Asynchronously"
msgstr ""

# aa677841ce0b41528a59ac162bc42872
#: whatsnew/3.2.rst:276
msgid "PEP written by Brian Quinlan."
msgstr ""

# 16a029be8b704b64871e041e0345c0f4
#: whatsnew/3.2.rst:278
msgid ""
":ref:`Code for Threaded Parallel URL reads<threadpoolexecutor-example>`, an "
"example using threads to fetch multiple web pages in parallel."
msgstr ""

# abc2d23c7ea94123bd2b0b818e70c846
#: whatsnew/3.2.rst:281
msgid ""
":ref:`Code for computing prime numbers in parallel<processpoolexecutor-"
"example>`, an example demonstrating :class:`~concurrent.futures."
"ProcessPoolExecutor`."
msgstr ""

# 11eed6558e964abb84012bb6b49672d0
#: whatsnew/3.2.rst:287
msgid "PEP 3147:  PYC Repository Directories"
msgstr ""

# 792e761e278d4aea906899fefc76f8cf
#: whatsnew/3.2.rst:289
msgid ""
"Python's scheme for caching bytecode in *.pyc* files did not work well in "
"environments with multiple Python interpreters.  If one interpreter "
"encountered a cached file created by another interpreter, it would recompile "
"the source and overwrite the cached file, thus losing the benefits of "
"caching."
msgstr ""

# 692328aafd0b4128bbb170f697e766a9
#: whatsnew/3.2.rst:294
msgid ""
"The issue of \"pyc fights\" has become more pronounced as it has become "
"commonplace for Linux distributions to ship with multiple versions of "
"Python. These conflicts also arise with CPython alternatives such as Unladen "
"Swallow."
msgstr ""

# fcea293d8ba54ded843a2707cc7693b1
#: whatsnew/3.2.rst:298
msgid ""
"To solve this problem, Python's import machinery has been extended to use "
"distinct filenames for each interpreter.  Instead of Python 3.2 and Python "
"3.3 and Unladen Swallow each competing for a file called \"mymodule.pyc\", "
"they will now look for \"mymodule.cpython-32.pyc\", \"mymodule.cpython-33.pyc"
"\", and \"mymodule.unladen10.pyc\".  And to prevent all of these new files "
"from cluttering source directories, the *pyc* files are now collected in a "
"\"__pycache__\" directory stored under the package directory."
msgstr ""

# c4f290013573433187ad78303142238d
#: whatsnew/3.2.rst:306
msgid ""
"Aside from the filenames and target directories, the new scheme has a few "
"aspects that are visible to the programmer:"
msgstr ""

# c2ea5e81c7cc4f69af65245f0d0850e9
#: whatsnew/3.2.rst:309
msgid ""
"Imported modules now have a :attr:`__cached__` attribute which stores the "
"name of the actual file that was imported:"
msgstr ""

# e28996bc237f417c9a75487c37b4d174
#: whatsnew/3.2.rst:316
msgid ""
"The tag that is unique to each interpreter is accessible from the :mod:`imp` "
"module:"
msgstr ""

# 35e50086ab65462084376016312253c4
#: whatsnew/3.2.rst:323
msgid ""
"Scripts that try to deduce source filename from the imported file now need "
"to be smarter.  It is no longer sufficient to simply strip the \"c\" from a "
"\".pyc\" filename.  Instead, use the new functions in the :mod:`imp` module:"
msgstr ""

# f21bbb7fc38d454abd1b718efef70705
#: whatsnew/3.2.rst:332
msgid ""
"The :mod:`py_compile` and :mod:`compileall` modules have been updated to "
"reflect the new naming convention and target directory.  The command-line "
"invocation of *compileall* has new options: ``-i`` for specifying a list of "
"files and directories to compile and ``-b`` which causes bytecode files to "
"be written to their legacy location rather than *__pycache__*."
msgstr ""

# e0c854d93d6b4f8dafb246ee7417a79c
#: whatsnew/3.2.rst:339
msgid ""
"The :mod:`importlib.abc` module has been updated with new :term:`abstract "
"base classes <abstract base class>` for loading bytecode files.  The "
"obsolete ABCs, :class:`~importlib.abc.PyLoader` and :class:`~importlib.abc."
"PyPycLoader`, have been deprecated (instructions on how to stay Python 3.1 "
"compatible are included with the documentation)."
msgstr ""

#: whatsnew/3.2.rst:347
msgid "PEP 3147 - PYC Repository Directories"
msgstr ""

# 0cf63eb0d20043b1b0858e9305a31197
# e5472fc270754949a4f138a29e74aa48
#: whatsnew/3.2.rst:348 whatsnew/3.2.rst:379
msgid "PEP written by Barry Warsaw."
msgstr ""

# d6f09b30f6a44a3eafaec978fa41ae7c
#: whatsnew/3.2.rst:352
msgid "PEP 3149: ABI Version Tagged .so Files"
msgstr ""

# 38fbf81b05a44abaa383d8002ecfd2c9
#: whatsnew/3.2.rst:354
msgid ""
"The PYC repository directory allows multiple bytecode cache files to be co-"
"located.  This PEP implements a similar mechanism for shared object files by "
"giving them a common directory and distinct names for each version."
msgstr ""

# 43673cca9cb24204ba320daf8aa22926
#: whatsnew/3.2.rst:358
msgid ""
"The common directory is \"pyshared\" and the file names are made distinct by "
"identifying the Python implementation (such as CPython, PyPy, Jython, etc.), "
"the major and minor version numbers, and optional build flags (such as \"d\" "
"for debug, \"m\" for pymalloc, \"u\" for wide-unicode).  For an arbitrary "
"package \"foo\", you may see these files when the distribution package is "
"installed::"
msgstr ""

# a870cc96d4b54f20901874d6ca622dcd
#: whatsnew/3.2.rst:367
msgid ""
"In Python itself, the tags are accessible from functions in the :mod:"
"`sysconfig` module::"
msgstr ""

#: whatsnew/3.2.rst:378
msgid "PEP 3149 - ABI Version Tagged .so Files"
msgstr ""

# 3dad8eb7514d4be6b1e503a3482be246
#: whatsnew/3.2.rst:383
msgid "PEP 3333: Python Web Server Gateway Interface v1.0.1"
msgstr ""

# 5c5b7a944d3540b9a7b3d57369feccd7
#: whatsnew/3.2.rst:385
msgid ""
"This informational PEP clarifies how bytes/text issues are to be handled by "
"the WSGI protocol.  The challenge is that string handling in Python 3 is "
"most conveniently handled with the :class:`str` type even though the HTTP "
"protocol is itself bytes oriented."
msgstr ""

# 84b59a652e0542ffa3b0c3ecc794f63e
#: whatsnew/3.2.rst:390
msgid ""
"The PEP differentiates so-called *native strings* that are used for request/"
"response headers and metadata versus *byte strings* which are used for the "
"bodies of requests and responses."
msgstr ""

# f79888218dc44a6d947bca03075ac2b7
#: whatsnew/3.2.rst:394
msgid ""
"The *native strings* are always of type :class:`str` but are restricted to "
"code points between *U+0000* through *U+00FF* which are translatable to "
"bytes using *Latin-1* encoding.  These strings are used for the keys and "
"values in the environment dictionary and for response headers and statuses "
"in the :func:`start_response` function.  They must follow :rfc:`2616` with "
"respect to encoding. That is, they must either be *ISO-8859-1* characters or "
"use :rfc:`2047` MIME encoding."
msgstr ""

# d2551714abf2474aad7d669482ee2166
#: whatsnew/3.2.rst:402
msgid ""
"For developers porting WSGI applications from Python 2, here are the salient "
"points:"
msgstr ""

# 9e6bcd878e9943b1ae630a51b97a1282
#: whatsnew/3.2.rst:405
msgid ""
"If the app already used strings for headers in Python 2, no change is needed."
msgstr ""

# f85690f30e124f3192ad9877b6d9143a
#: whatsnew/3.2.rst:407
msgid ""
"If instead, the app encoded output headers or decoded input headers, then "
"the headers will need to be re-encoded to Latin-1.  For example, an output "
"header encoded in utf-8 was using ``h.encode('utf-8')`` now needs to convert "
"from bytes to native strings using ``h.encode('utf-8').decode('latin-1')``."
msgstr ""

# 6b216a1167854bb9bbf269d986f1b0ad
#: whatsnew/3.2.rst:412
msgid ""
"Values yielded by an application or sent using the :meth:`write` method must "
"be byte strings.  The :func:`start_response` function and environ must use "
"native strings.  The two cannot be mixed."
msgstr ""

# c05723bb25ac4ffda893aaf748daf3d6
#: whatsnew/3.2.rst:416
msgid ""
"For server implementers writing CGI-to-WSGI pathways or other CGI-style "
"protocols, the users must to be able access the environment using native "
"strings even though the underlying platform may have a different "
"convention.  To bridge this gap, the :mod:`wsgiref` module has a new "
"function, :func:`wsgiref.handlers.read_environ` for transcoding CGI "
"variables from :attr:`os.environ` into native strings and returning a new "
"dictionary."
msgstr ""

#: whatsnew/3.2.rst:425
msgid "PEP 3333 - Python Web Server Gateway Interface v1.0.1"
msgstr ""

# 301819053e564178b1077303a8121e58
#: whatsnew/3.2.rst:426
msgid "PEP written by Phillip Eby."
msgstr ""

# 19e7620300204a3b8464e95b1c4a2af8
#: whatsnew/3.2.rst:434
msgid ""
"String formatting for :func:`format` and :meth:`str.format` gained new "
"capabilities for the format character **#**.  Previously, for integers in "
"binary, octal, or hexadecimal, it caused the output to be prefixed with "
"'0b', '0o', or '0x' respectively.  Now it can also handle floats, complex, "
"and Decimal, causing the output to always have a decimal point even when no "
"digits follow it."
msgstr ""

# b17907dfbb284fec9b44ca30b8929c61
#: whatsnew/3.2.rst:446
msgid ""
"(Suggested by Mark Dickinson and implemented by Eric Smith in :issue:`7094`.)"
msgstr ""

# 80edd3240a4e49c690d012083c26b6cb
#: whatsnew/3.2.rst:448
msgid ""
"There is also a new :meth:`str.format_map` method that extends the "
"capabilities of the existing :meth:`str.format` method by accepting "
"arbitrary :term:`mapping` objects.  This new method makes it possible to use "
"string formatting with any of Python's many dictionary-like objects such as :"
"class:`~collections.defaultdict`, :class:`~shelve.Shelf`, :class:"
"`~configparser.ConfigParser`, or :mod:`dbm`.  It is also useful with custom :"
"class:`dict` subclasses that normalize keys before look-up or that supply a :"
"meth:`__missing__` method for unknown keys::"
msgstr ""

# c08d7c1ffc61417680884a61afc794c5
#: whatsnew/3.2.rst:475
msgid ""
"(Suggested by Raymond Hettinger and implemented by Eric Smith in :issue:"
"`6081`.)"
msgstr ""

# b1c62e18d1554005a5c87810bceff68c
#: whatsnew/3.2.rst:478
msgid ""
"The interpreter can now be started with a quiet option, ``-q``, to prevent "
"the copyright and version information from being displayed in the "
"interactive mode.  The option can be introspected using the :attr:`sys."
"flags` attribute::"
msgstr ""

# 37f261f89e764977b88b190211691641
#: whatsnew/3.2.rst:488
msgid "(Contributed by Marcin Wojdyr in :issue:`1772833`)."
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 1da891bed5604c35b855681e7bf4c93b
#: whatsnew/3.2.rst:490
msgid ""
"The :func:`hasattr` function works by calling :func:`getattr` and detecting "
"whether an exception is raised.  This technique allows it to detect methods "
"created dynamically by :meth:`__getattr__` or :meth:`__getattribute__` which "
"would otherwise be absent from the class dictionary.  Formerly, *hasattr* "
"would catch any exception, possibly masking genuine errors.  Now, *hasattr* "
"has been tightened to only catch :exc:`AttributeError` and let other "
"exceptions pass through::"
msgstr ""

# 62e48cedc5e2445aac212d0cadaa1370
#: whatsnew/3.2.rst:509
msgid ""
"(Discovered by Yury Selivanov and fixed by Benjamin Peterson; :issue:`9666`.)"
msgstr ""

# 7352dacae7c64593877a82584866c2c8
#: whatsnew/3.2.rst:511
msgid ""
"The :func:`str` of a float or complex number is now the same as its :func:"
"`repr`. Previously, the :func:`str` form was shorter but that just caused "
"confusion and is no longer needed now that the shortest possible :func:"
"`repr` is displayed by default:"
msgstr ""

# 4003a22e2dfa4593a04b5197e7a61617
#: whatsnew/3.2.rst:522
msgid "(Proposed and implemented by Mark Dickinson; :issue:`9337`.)"
msgstr ""

# e16ccb967f794bd7a93142f439dc649c
#: whatsnew/3.2.rst:524
msgid ""
":class:`memoryview` objects now have a :meth:`~memoryview.release()` method "
"and they also now support the context manager protocol.  This allows timely "
"release of any resources that were acquired when requesting a buffer from "
"the original object."
msgstr ""

# ddb0a9c9af644d3f9ad3fdca71591229
#: whatsnew/3.2.rst:533
msgid "(Added by Antoine Pitrou; :issue:`9757`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 8a759d4d5ecf46729b2507d103153d49
#: whatsnew/3.2.rst:535
msgid ""
"Previously it was illegal to delete a name from the local namespace if it "
"occurs as a free variable in a nested block::"
msgstr ""

# 21880d6260d642ed8726b5c32bda7f0a
#: whatsnew/3.2.rst:544
msgid ""
"This is now allowed.  Remember that the target of an :keyword:`except` "
"clause is cleared, so this code which used to work with Python 2.6, raised "
"a :exc:`SyntaxError` with Python 3.1 and now works again::"
msgstr ""

# 4d10f0f0c65944f791a61e1aa6f17db8
#: whatsnew/3.2.rst:557
msgid "(See :issue:`4617`.)"
msgstr ""

# 2fff702ccdf64de6bc23bc650c96d5bf
#: whatsnew/3.2.rst:559
msgid ""
"The internal :c:type:`structsequence` tool now creates subclasses of tuple. "
"This means that C structures like those returned by :func:`os.stat`, :func:"
"`time.gmtime`, and :attr:`sys.version_info` now work like a :term:`named "
"tuple` and now work with functions and methods that expect a tuple as an "
"argument.  This is a big step forward in making the C structures as flexible "
"as their pure Python counterparts:"
msgstr ""

# 6b5b332a391346b090b3126e0d9a7aa8
#: whatsnew/3.2.rst:571
msgid ""
"(Suggested by Arfrever Frehtes Taifersar Arahesis and implemented by "
"Benjamin Peterson in :issue:`8413`.)"
msgstr ""

# 100df57f229a4492b977e5089c9ddb61
#: whatsnew/3.2.rst:574
msgid ""
"Warnings are now easier to control using the :envvar:`PYTHONWARNINGS` "
"environment variable as an alternative to using ``-W`` at the command line::"
msgstr ""

# 5ec4260580ff41dbbabb206d987f29ed
#: whatsnew/3.2.rst:579
msgid ""
"(Suggested by Barry Warsaw and implemented by Philip Jenvey in :issue:"
"`7301`.)"
msgstr ""

# 8e447c3a12d0406fa5475031c514f435
#: whatsnew/3.2.rst:581
msgid ""
"A new warning category, :exc:`ResourceWarning`, has been added.  It is "
"emitted when potential issues with resource consumption or cleanup are "
"detected.  It is silenced by default in normal release builds but can be "
"enabled through the means provided by the :mod:`warnings` module, or on the "
"command line."
msgstr ""

# 233cacc3910946c6813bc89782a9558f
#: whatsnew/3.2.rst:587
msgid ""
"A :exc:`ResourceWarning` is issued at interpreter shutdown if the :data:`gc."
"garbage` list isn't empty, and if :attr:`gc.DEBUG_UNCOLLECTABLE` is set, all "
"uncollectable objects are printed.  This is meant to make the programmer "
"aware that their code contains object finalization issues."
msgstr ""

# af2a9b22d3c747ea80b229174ca79d85
#: whatsnew/3.2.rst:592
msgid ""
"A :exc:`ResourceWarning` is also issued when a :term:`file object` is "
"destroyed without having been explicitly closed.  While the deallocator for "
"such object ensures it closes the underlying operating system resource "
"(usually, a file descriptor), the delay in deallocating the object could "
"produce various issues, especially under Windows.  Here is an example of "
"enabling the warning from the command line::"
msgstr ""

# 52cb3259baec4f2ba101de4ee8518fbd
#: whatsnew/3.2.rst:604
msgid ""
"(Added by Antoine Pitrou and Georg Brandl in :issue:`10093` and :issue:"
"`477863`.)"
msgstr ""

# b517e8c6441a4d48a6903c30da092e6c
#: whatsnew/3.2.rst:606
msgid ""
":class:`range` objects now support *index* and *count* methods. This is part "
"of an effort to make more objects fully implement the :class:`collections."
"Sequence` :term:`abstract base class`.  As a result, the language will have "
"a more uniform API.  In addition, :class:`range` objects now support slicing "
"and negative indices, even with values larger than :attr:`sys.maxsize`.  "
"This makes *range* more interoperable with lists::"
msgstr ""

# baabb920b2d044adbd63af0a788ded6a
#: whatsnew/3.2.rst:622
msgid ""
"(Contributed by Daniel Stutzbach in :issue:`9213`, by Alexander Belopolsky "
"in :issue:`2690`, and by Nick Coghlan in :issue:`10889`.)"
msgstr ""

# 922c6e7b0248474fa1d271926cfbb035
#: whatsnew/3.2.rst:625
msgid ""
"The :func:`callable` builtin function from Py2.x was resurrected.  It "
"provides a concise, readable alternative to using an :term:`abstract base "
"class` in an expression like ``isinstance(x, collections.Callable)``:"
msgstr ""

# 998038feb8284dec9b5be46f4db23013
#: whatsnew/3.2.rst:634
msgid "(See :issue:`10518`.)"
msgstr ""

# 00271479ecfe4d60b0274a39bf400347
#: whatsnew/3.2.rst:636
msgid ""
"Python's import mechanism can now load modules installed in directories with "
"non-ASCII characters in the path name.  This solved an aggravating problem "
"with home directories for users with non-ASCII characters in their usernames."
msgstr ""

# 293d64959d874475ad99bbd9a95c577a
#: whatsnew/3.2.rst:640
msgid "(Required extensive work by Victor Stinner in :issue:`9425`.)"
msgstr ""

# a54a18edbe334095bdd0f90470745d46
#: whatsnew/3.2.rst:646
msgid ""
"Python's standard library has undergone significant maintenance efforts and "
"quality improvements."
msgstr ""

# a68d0b1c9fd445e4a90486ed673b200b
#: whatsnew/3.2.rst:649
msgid ""
"The biggest news for Python 3.2 is that the :mod:`email` package, :mod:"
"`mailbox` module, and :mod:`nntplib` modules now work correctly with the "
"bytes/text model in Python 3.  For the first time, there is correct handling "
"of messages with mixed encodings."
msgstr ""

# 39da22d2bb5f45469c2d67cde5f7ea78
#: whatsnew/3.2.rst:654
msgid ""
"Throughout the standard library, there has been more careful attention to "
"encodings and text versus bytes issues.  In particular, interactions with "
"the operating system are now better able to exchange non-ASCII data using "
"the Windows MBCS encoding, locale-aware encodings, or UTF-8."
msgstr ""

# e643d09c5b9b49cdb05ac3b07fcfff4c
#: whatsnew/3.2.rst:659
msgid ""
"Another significant win is the addition of substantially better support for "
"*SSL* connections and security certificates."
msgstr ""

# 220d3a6ccb6e406298d0ebec4e67ecf1
#: whatsnew/3.2.rst:662
msgid ""
"In addition, more classes now implement a :term:`context manager` to support "
"convenient and reliable resource clean-up using a :keyword:`with` statement."
msgstr ""

# 88b09cf872f243768a63ee84e36b7cf0
#: whatsnew/3.2.rst:666
msgid "email"
msgstr ""

# 48b941e18f5544c88b292512d23094bd
#: whatsnew/3.2.rst:668
msgid ""
"The usability of the :mod:`email` package in Python 3 has been mostly fixed "
"by the extensive efforts of R. David Murray.  The problem was that emails "
"are typically read and stored in the form of :class:`bytes` rather than :"
"class:`str` text, and they may contain multiple encodings within a single "
"email.  So, the email package had to be extended to parse and generate email "
"messages in bytes format."
msgstr ""

# 2deb852314dc4d53895d5dfe549d174f
#: whatsnew/3.2.rst:675
msgid ""
"New functions :func:`~email.message_from_bytes` and :func:`~email."
"message_from_binary_file`, and new classes :class:`~email.parser."
"BytesFeedParser` and :class:`~email.parser.BytesParser` allow binary message "
"data to be parsed into model objects."
msgstr ""

# b6a1cc947c90488590a6b273d7384903
#: whatsnew/3.2.rst:680
msgid ""
"Given bytes input to the model, :meth:`~email.message.Message.get_payload` "
"will by default decode a message body that has a :mailheader:`Content-"
"Transfer-Encoding` of *8bit* using the charset specified in the MIME headers "
"and return the resulting string."
msgstr ""

# 0233de62afbb4c258905f3b0f56d9994
#: whatsnew/3.2.rst:685
msgid ""
"Given bytes input to the model, :class:`~email.generator.Generator` will "
"convert message bodies that have a :mailheader:`Content-Transfer-Encoding` "
"of *8bit* to instead have a *7bit* :mailheader:`Content-Transfer-Encoding`."
msgstr ""

# fb6474e742344814a09c256b850ae59a
#: whatsnew/3.2.rst:689
msgid ""
"Headers with unencoded non-ASCII bytes are deemed to be :rfc:`2047`\\ -"
"encoded using the *unknown-8bit* character set."
msgstr ""

# 9d5a92b20b944b769337783c9cd95d26
#: whatsnew/3.2.rst:692
msgid ""
"A new class :class:`~email.generator.BytesGenerator` produces bytes as "
"output, preserving any unchanged non-ASCII data that was present in the "
"input used to build the model, including message bodies with a :mailheader:"
"`Content-Transfer-Encoding` of *8bit*."
msgstr ""

# 798fe1b0b8c44d0c9e6089725b6f1a19
#: whatsnew/3.2.rst:697
msgid ""
"The :mod:`smtplib` :class:`~smtplib.SMTP` class now accepts a byte string "
"for the *msg* argument to the :meth:`~smtplib.SMTP.sendmail` method, and a "
"new method, :meth:`~smtplib.SMTP.send_message` accepts a :class:`~email."
"message.Message` object and can optionally obtain the *from_addr* and "
"*to_addrs* addresses directly from the object."
msgstr ""

# 6ade15ac8efc410085eb94acc607a7e8
#: whatsnew/3.2.rst:703
msgid ""
"(Proposed and implemented by R. David Murray, :issue:`4661` and :issue:"
"`10321`.)"
msgstr ""

# 3083dd3c79e6409a888192179cfec170
#: whatsnew/3.2.rst:706
msgid "elementtree"
msgstr ""

# c63c0cad2cf8418fb0c834ad83c7722d
#: whatsnew/3.2.rst:708
msgid ""
"The :mod:`xml.etree.ElementTree` package and its :mod:`xml.etree."
"cElementTree` counterpart have been updated to version 1.3."
msgstr ""

# 58327b7e0f4e458381be5dbeb81c0859
#: whatsnew/3.2.rst:711
msgid "Several new and useful functions and methods have been added:"
msgstr ""

# aab27e3aff1b4ca4a6afe992cddf60da
#: whatsnew/3.2.rst:713
msgid ""
":func:`xml.etree.ElementTree.fromstringlist` which builds an XML document "
"from a sequence of fragments"
msgstr ""

# ccfead954532498e85c13836cd1bf74c
#: whatsnew/3.2.rst:715
msgid ""
":func:`xml.etree.ElementTree.register_namespace` for registering a global "
"namespace prefix"
msgstr ""

# a0d7b272f2c8420eabcf753d44f52b1e
#: whatsnew/3.2.rst:717
msgid ""
":func:`xml.etree.ElementTree.tostringlist` for string representation "
"including all sublists"
msgstr ""

# 61af9d5e3d3d47b8aee3365ed009b9ff
#: whatsnew/3.2.rst:719
msgid ""
":meth:`xml.etree.ElementTree.Element.extend` for appending a sequence of "
"zero or more elements"
msgstr ""

# 0074bf468bbd4301be7f0e3cc0149a59
#: whatsnew/3.2.rst:721
msgid ""
":meth:`xml.etree.ElementTree.Element.iterfind` searches an element and "
"subelements"
msgstr ""

# 67753001727c4eef95821e309a153b79
#: whatsnew/3.2.rst:723
msgid ""
":meth:`xml.etree.ElementTree.Element.itertext` creates a text iterator over "
"an element and its subelements"
msgstr ""

# 9ba04897a1134554a11db5fbf3224966
#: whatsnew/3.2.rst:725
msgid ""
":meth:`xml.etree.ElementTree.TreeBuilder.end` closes the current element"
msgstr ""

# 2a673e93b9ff4f98856a7e9ea5e1bfe5
#: whatsnew/3.2.rst:726
msgid ""
":meth:`xml.etree.ElementTree.TreeBuilder.doctype` handles a doctype "
"declaration"
msgstr ""

# f846df83b08244f4846d5566b9b653f1
#: whatsnew/3.2.rst:729
msgid "Two methods have been deprecated:"
msgstr ""

# a395695b41c04f43834b786ce866762e
#: whatsnew/3.2.rst:731
msgid ":meth:`xml.etree.ElementTree.getchildren` use ``list(elem)`` instead."
msgstr ""

# a57dccdfce614fa384623aa0d9ffefeb
#: whatsnew/3.2.rst:732
msgid ":meth:`xml.etree.ElementTree.getiterator` use ``Element.iter`` instead."
msgstr ""

# 015e3375019c40469ae290c1fccb402f
#: whatsnew/3.2.rst:734
msgid ""
"For details of the update, see `Introducing ElementTree <http://effbot.org/"
"zone/elementtree-13-intro.htm>`_ on Fredrik Lundh's website."
msgstr ""

# dfeb0a8e900745e1805037ece92d58c7
#: whatsnew/3.2.rst:737
msgid "(Contributed by Florent Xicluna and Fredrik Lundh, :issue:`6472`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 1fa2e22504cf49fe8dbd9cfb09ef7c98
#: whatsnew/3.2.rst:740
msgid "functools"
msgstr ""

# dd46d82421ad42ee95f52f35d415fbb7
#: whatsnew/3.2.rst:742
msgid ""
"The :mod:`functools` module includes a new decorator for caching function "
"calls.  :func:`functools.lru_cache` can save repeated queries to an external "
"resource whenever the results are expected to be the same."
msgstr ""

# 2aa0a73126b74e3a922755e93f9b64d8
#: whatsnew/3.2.rst:746
msgid ""
"For example, adding a caching decorator to a database query function can "
"save database accesses for popular searches:"
msgstr ""

# ed22eab80d2c436c906b84ec324f4858
#: whatsnew/3.2.rst:759
msgid ""
"To help with choosing an effective cache size, the wrapped function is "
"instrumented for tracking cache statistics:"
msgstr ""

# 21e0cbed7b9d4121be194d49a37d5529
#: whatsnew/3.2.rst:765
msgid ""
"If the phonelist table gets updated, the outdated contents of the cache can "
"be cleared with:"
msgstr ""

# 2fe38ae1d8594a1594f59cb5d3bcaef1
#: whatsnew/3.2.rst:770
msgid ""
"(Contributed by Raymond Hettinger and incorporating design ideas from Jim "
"Baker, Miki Tebeka, and Nick Coghlan; see `recipe 498245 <http://code."
"activestate.com/recipes/498245>`_\\, `recipe 577479 <http://code.activestate."
"com/recipes/577479>`_\\, :issue:`10586`, and :issue:`10593`.)"
msgstr ""

# 4a337813cbd74cdeb97a37a3c9bf9904
#: whatsnew/3.2.rst:776
msgid ""
"The :func:`functools.wraps` decorator now adds a :attr:`__wrapped__` "
"attribute pointing to the original callable function.  This allows wrapped "
"functions to be introspected.  It also copies :attr:`__annotations__` if "
"defined.  And now it also gracefully skips over missing attributes such as :"
"attr:`__doc__` which might not be defined for the wrapped callable."
msgstr ""

# 1fd23cbb4c2648aea6c5a5a12dba6593
#: whatsnew/3.2.rst:782
msgid ""
"In the above example, the cache can be removed by recovering the original "
"function:"
msgstr ""

# 4cff9c5072574f6cac8e12e4c9ec2442
#: whatsnew/3.2.rst:787
msgid ""
"(By Nick Coghlan and Terrence Cole; :issue:`9567`, :issue:`3445`, and :issue:"
"`8814`.)"
msgstr ""

# 1f1019cabb1b48e093d6af5b4985f0de
#: whatsnew/3.2.rst:790
msgid ""
"To help write classes with rich comparison methods, a new decorator :func:"
"`functools.total_ordering` will use a existing equality and inequality "
"methods to fill in the remaining methods."
msgstr ""

# b65b3eaff5254890ac843a1b2fa1eb9a
#: whatsnew/3.2.rst:794
msgid ""
"For example, supplying *__eq__* and *__lt__* will enable :func:`~functools."
"total_ordering` to fill-in *__le__*, *__gt__* and *__ge__*::"
msgstr ""

# cf7c06fb925d4b90bd7d385dcf4c9f2a
#: whatsnew/3.2.rst:806
msgid ""
"With the *total_ordering* decorator, the remaining comparison methods are "
"filled in automatically."
msgstr ""

# 6a6f8f7fdd0c43e2864bd77fcc0cbd88
#: whatsnew/3.2.rst:811
msgid ""
"To aid in porting programs from Python 2, the :func:`functools.cmp_to_key` "
"function converts an old-style comparison function to modern :term:`key "
"function`:"
msgstr ""

# 0202242bd5844a43ae339401f7ebf7ee
#: whatsnew/3.2.rst:818
msgid ""
"For sorting examples and a brief sorting tutorial, see the `Sorting HowTo "
"<http://wiki.python.org/moin/HowTo/Sorting/>`_ tutorial."
msgstr ""

# 179e204cd371420eace2d050c285520c
#: whatsnew/3.2.rst:824
msgid "itertools"
msgstr ""

# 43965ae36b64456fa8c6de4823fcf0f9
#: whatsnew/3.2.rst:826
msgid ""
"The :mod:`itertools` module has a new :func:`~itertools.accumulate` function "
"modeled on APL's *scan* operator and Numpy's *accumulate* function:"
msgstr ""

# 6c1003ca175745c2b632cce212e3b0c3
#: whatsnew/3.2.rst:837
msgid ""
"For an example using :func:`~itertools.accumulate`, see the :ref:`examples "
"for the random module <random-examples>`."
msgstr ""

# a29ec0cf247a4e74abbe74d2e11c272b
#: whatsnew/3.2.rst:840
msgid ""
"(Contributed by Raymond Hettinger and incorporating design suggestions from "
"Mark Dickinson.)"
msgstr ""

# 6cd5cee5ef2743509d00a1a67f88bc39
#: whatsnew/3.2.rst:844
msgid "collections"
msgstr ""

# bf999f54943e4927974d3c8ff5b5baee
#: whatsnew/3.2.rst:846
msgid ""
"The :class:`collections.Counter` class now has two forms of in-place "
"subtraction, the existing *-=* operator for `saturating subtraction <http://"
"en.wikipedia.org/wiki/Saturation_arithmetic>`_ and the new :meth:"
"`~collections.Counter.subtract` method for regular subtraction.  The former "
"is suitable for `multisets <http://en.wikipedia.org/wiki/Multiset>`_ which "
"only have positive counts, and the latter is more suitable for use cases "
"that allow negative counts:"
msgstr ""

# 65baf988628347639b136fc226c395c0
#: whatsnew/3.2.rst:866
msgid ""
"The :class:`collections.OrderedDict` class has a new method :meth:"
"`~collections.OrderedDict.move_to_end` which takes an existing key and moves "
"it to either the first or last position in the ordered sequence."
msgstr ""

# 1fcb5a82175044aa84b96cc5a977e3bc
#: whatsnew/3.2.rst:870
msgid ""
"The default is to move an item to the last position.  This is equivalent of "
"renewing an entry with ``od[k] = od.pop(k)``."
msgstr ""

# 4f4cc9df2b98406e9db870a0218bd565
#: whatsnew/3.2.rst:873
msgid ""
"A fast move-to-end operation is useful for resequencing entries.  For "
"example, an ordered dictionary can be used to track order of access by aging "
"entries from the oldest to the most recently accessed."
msgstr ""

# 5307aa3bfc2b40f3a1a5bbb0fd720e57
#: whatsnew/3.2.rst:886
msgid ""
"The :class:`collections.deque` class grew two new methods :meth:"
"`~collections.deque.count` and :meth:`~collections.deque.reverse` that make "
"them more substitutable for :class:`list` objects:"
msgstr ""

# 04c82941becf4c1caf7bbb53241112ea
#: whatsnew/3.2.rst:900
msgid "threading"
msgstr ""

# 7453045cbf2846d5b3fe93b74550b061
#: whatsnew/3.2.rst:902
msgid ""
"The :mod:`threading` module has a new :class:`~threading.Barrier` "
"synchronization class for making multiple threads wait until all of them "
"have reached a common barrier point.  Barriers are useful for making sure "
"that a task with multiple preconditions does not run until all of the "
"predecessor tasks are complete."
msgstr ""

# 2185de83d31c44a5823e66278fe30378
#: whatsnew/3.2.rst:908
msgid ""
"Barriers can work with an arbitrary number of threads.  This is a "
"generalization of a `Rendezvous <http://en.wikipedia.org/wiki/"
"Synchronous_rendezvous>`_ which is defined for only two threads."
msgstr ""

# fad70b11da014d818721cc40a4941c45
#: whatsnew/3.2.rst:912
msgid ""
"Implemented as a two-phase cyclic barrier, :class:`~threading.Barrier` "
"objects are suitable for use in loops.  The separate *filling* and "
"*draining* phases assure that all threads get released (drained) before any "
"one of them can loop back and re-enter the barrier.  The barrier fully "
"resets after each cycle."
msgstr ""

# bbf9a62d017b4794badd3de6c4d097e4
#: whatsnew/3.2.rst:917
msgid "Example of using barriers::"
msgstr ""

# c44dd64cb7fa4862b46d2ca49c5cc9d0
#: whatsnew/3.2.rst:931
msgid ""
"In this example, the barrier enforces a rule that votes cannot be counted at "
"any polling site until all polls are closed.  Notice how a solution with a "
"barrier is similar to one with :meth:`threading.Thread.join`, but the "
"threads stay alive and continue to do work (summarizing ballots) after the "
"barrier point is crossed."
msgstr ""

# 5c5ef9af366a4114b91a55ec2def0d43
#: whatsnew/3.2.rst:937
msgid ""
"If any of the predecessor tasks can hang or be delayed, a barrier can be "
"created with an optional *timeout* parameter.  Then if the timeout period "
"elapses before all the predecessor tasks reach the barrier point, all "
"waiting threads are released and a :exc:`~threading.BrokenBarrierError` "
"exception is raised::"
msgstr ""

# d649fef57edb4f8b88becdf75a05292d
#: whatsnew/3.2.rst:953
msgid ""
"In this example, the barrier enforces a more robust rule.  If some election "
"sites do not finish before midnight, the barrier times-out and the ballots "
"are sealed and deposited in a queue for later handling."
msgstr ""

# 44544231e2774e00b73c3b3706653213
#: whatsnew/3.2.rst:957
msgid ""
"See `Barrier Synchronization Patterns <http://parlab.eecs.berkeley.edu/wiki/"
"_media/patterns/paraplop_g1_3.pdf>`_ for more examples of how barriers can "
"be used in parallel computing.  Also, there is a simple but thorough "
"explanation of barriers in `The Little Book of Semaphores <http://"
"greenteapress.com/semaphores/downey08semaphores.pdf>`_, *section 3.6*."
msgstr ""

# 66c80c833cda4e378a47e6796c291588
#: whatsnew/3.2.rst:963
msgid ""
"(Contributed by Kristján Valur Jónsson with an API review by Jeffrey Yasskin "
"in :issue:`8777`.)"
msgstr ""

# ddd9e755fe724e738abb7b54f6da04ec
#: whatsnew/3.2.rst:967
msgid "datetime and time"
msgstr ""

# 499e2b8182fd472ca603fa4897913183
#: whatsnew/3.2.rst:969
msgid ""
"The :mod:`datetime` module has a new type :class:`~datetime.timezone` that "
"implements the :class:`~datetime.tzinfo` interface by returning a fixed UTC "
"offset and timezone name. This makes it easier to create timezone-aware "
"datetime objects::"
msgstr ""

# a77207e4a6674a839361a19d2f03808c
#: whatsnew/3.2.rst:982
msgid ""
"Also, :class:`~datetime.timedelta` objects can now be multiplied by :class:"
"`float` and divided by :class:`float` and :class:`int` objects. And :class:"
"`~datetime.timedelta` objects can now divide one another."
msgstr ""

# 25ee42f3304c43eab7c833b66d0218a3
#: whatsnew/3.2.rst:986
msgid ""
"The :meth:`datetime.date.strftime` method is no longer restricted to years "
"after 1900.  The new supported year range is from 1000 to 9999 inclusive."
msgstr ""

# 28e8422d511f49ec9123dc57ddbbbb22
#: whatsnew/3.2.rst:989
msgid ""
"Whenever a two-digit year is used in a time tuple, the interpretation has "
"been governed by :attr:`time.accept2dyear`.  The default is *True* which "
"means that for a two-digit year, the century is guessed according to the "
"POSIX rules governing the ``%y`` strptime format."
msgstr ""

# 531ba28986a843608ed079b4844ba0cc
#: whatsnew/3.2.rst:994
msgid ""
"Starting with Py3.2, use of the century guessing heuristic will emit a :exc:"
"`DeprecationWarning`.  Instead, it is recommended that :attr:`time."
"accept2dyear` be set to *False* so that large date ranges can be used "
"without guesswork::"
msgstr ""

# 2bf84402d07b47b2ba4b4540d7ed237c
#: whatsnew/3.2.rst:1013
msgid ""
"Several functions now have significantly expanded date ranges.  When :attr:"
"`time.accept2dyear` is false, the :func:`time.asctime` function will accept "
"any year that fits in a C int, while the :func:`time.mktime` and :func:`time."
"strftime` functions will accept the full range supported by the "
"corresponding operating system functions."
msgstr ""

# 353efcb06b024c62914a26fb3d294300
#: whatsnew/3.2.rst:1019
msgid ""
"(Contributed by Alexander Belopolsky and Victor Stinner in :issue:"
"`1289118`, :issue:`5094`, :issue:`6641`, :issue:`2706`, :issue:`1777412`, :"
"issue:`8013`, and :issue:`10827`.)"
msgstr ""

# 5a7adc8442d34aa1a452e256d3815fcb
#: whatsnew/3.2.rst:1026
msgid "math"
msgstr ""

# a9c557c404d24ac892415475df525550
#: whatsnew/3.2.rst:1028
msgid ""
"The :mod:`math` module has been updated with six new functions inspired by "
"the C99 standard."
msgstr ""

# f9ff7ae1f1894b1abb0f1708f960d94e
#: whatsnew/3.2.rst:1031
msgid ""
"The :func:`~math.isfinite` function provides a reliable and fast way to "
"detect special values.  It returns *True* for regular numbers and *False* "
"for *Nan* or *Infinity*:"
msgstr ""

# c37648438988479686da9b4cab4e5d74
#: whatsnew/3.2.rst:1038
msgid ""
"The :func:`~math.expm1` function computes ``e**x-1`` for small values of *x* "
"without incurring the loss of precision that usually accompanies the "
"subtraction of nearly equal quantities:"
msgstr ""

# b68bc3bae21846cc9c2cc16b0bf27c10
#: whatsnew/3.2.rst:1045
msgid ""
"The :func:`~math.erf` function computes a probability integral or `Gaussian "
"error function <http://en.wikipedia.org/wiki/Error_function>`_.  The "
"complementary error function, :func:`~math.erfc`, is ``1 - erf(x)``:"
msgstr ""

# bac2407d258b4c1b97bafaecb2f86cf9
#: whatsnew/3.2.rst:1056
msgid ""
"The :func:`~math.gamma` function is a continuous extension of the factorial "
"function.  See http://en.wikipedia.org/wiki/Gamma_function for details.  "
"Because the function is related to factorials, it grows large even for small "
"values of *x*, so there is also a :func:`~math.lgamma` function for "
"computing the natural logarithm of the gamma function:"
msgstr ""

# 9e35957f74e6475ab06beecca11c26c3
#: whatsnew/3.2.rst:1067
msgid "(Contributed by Mark Dickinson.)"
msgstr ""

# fa3516ac6a4e4a679221e66783d6bdac
#: whatsnew/3.2.rst:1070
msgid "abc"
msgstr ""

# d671070dd4314441801a7b8d60baab08
#: whatsnew/3.2.rst:1072
msgid ""
"The :mod:`abc` module now supports :func:`~abc.abstractclassmethod` and :"
"func:`~abc.abstractstaticmethod`."
msgstr ""

# 6828787a1afd44a2a3dab1b34c5219f7
#: whatsnew/3.2.rst:1075
msgid ""
"These tools make it possible to define an :term:`abstract base class` that "
"requires a particular :func:`classmethod` or :func:`staticmethod` to be "
"implemented::"
msgstr ""

# 97763ae2b22c44ce91a04814e1ba53f6
#: whatsnew/3.2.rst:1087
msgid "(Patch submitted by Daniel Urban; :issue:`5867`.)"
msgstr ""

# 30bce8a0e55b43918790ffdb189d2315
#: whatsnew/3.2.rst:1090
msgid "io"
msgstr ""

# 182cfd1c9e1d4490af3d7580be41b8bc
#: whatsnew/3.2.rst:1092
msgid ""
"The :class:`io.BytesIO` has a new method, :meth:`~io.BytesIO.getbuffer`, "
"which provides functionality similar to :func:`memoryview`.  It creates an "
"editable view of the data without making a copy.  The buffer's random access "
"and support for slice notation are well-suited to in-place editing::"
msgstr ""

# 2f637653e7334e39bc423026dc58b6f5
#: whatsnew/3.2.rst:1118
msgid "(Contributed by Antoine Pitrou in :issue:`5506`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 7a739912e24f4fe9bb50f17a6f020284
#: whatsnew/3.2.rst:1123
msgid ""
"When writing a :meth:`__repr__` method for a custom container, it is easy to "
"forget to handle the case where a member refers back to the container "
"itself. Python's builtin objects such as :class:`list` and :class:`set` "
"handle self-reference by displaying \"...\" in the recursive part of the "
"representation string."
msgstr ""

# a96c0bddd7194f338d3835793604ef70
#: whatsnew/3.2.rst:1129
msgid ""
"To help write such :meth:`__repr__` methods, the :mod:`reprlib` module has a "
"new decorator, :func:`~reprlib.recursive_repr`, for detecting recursive "
"calls to :meth:`__repr__` and substituting a placeholder string instead::"
msgstr ""

# 167f9fabf5b64df7a041ded486f158dd
#: whatsnew/3.2.rst:1144
msgid "(Contributed by Raymond Hettinger in :issue:`9826` and :issue:`9840`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 13bc36478cf0456883132929b1a764c9
#: whatsnew/3.2.rst:1147
msgid "logging"
msgstr ""

# 0ea7dd300bae4e9f9c77d5fc1bd41ab2
#: whatsnew/3.2.rst:1149
msgid ""
"In addition to dictionary-based configuration described above, the :mod:"
"`logging` package has many other improvements."
msgstr ""

# b9aaaa0286ff4849ae9b363f78ebc507
#: whatsnew/3.2.rst:1152
msgid ""
"The logging documentation has been augmented by a :ref:`basic tutorial "
"<logging-basic-tutorial>`\\, an :ref:`advanced tutorial <logging-advanced-"
"tutorial>`\\, and a :ref:`cookbook <logging-cookbook>` of logging recipes.  "
"These documents are the fastest way to learn about logging."
msgstr ""

# 6e97118b80fd4c11839efe2a5344e6cf
#: whatsnew/3.2.rst:1157
msgid ""
"The :func:`logging.basicConfig` set-up function gained a *style* argument to "
"support three different types of string formatting.  It defaults to \"%\" "
"for traditional %-formatting, can be set to \"{\" for the new :meth:`str."
"format` style, or can be set to \"$\" for the shell-style formatting "
"provided by :class:`string.Template`.  The following three configurations "
"are equivalent::"
msgstr ""

# 963b85748f61430cae9e183d3f7bc1d8
#: whatsnew/3.2.rst:1168
msgid ""
"If no configuration is set-up before a logging event occurs, there is now a "
"default configuration using a :class:`~logging.StreamHandler` directed to :"
"attr:`sys.stderr` for events of ``WARNING`` level or higher.  Formerly, an "
"event occurring before a configuration was set-up would either raise an "
"exception or silently drop the event depending on the value of :attr:"
"`logging.raiseExceptions`.  The new default handler is stored in :attr:"
"`logging.lastResort`."
msgstr ""

# 0278db4c801f4b1b96887c296fd80d62
#: whatsnew/3.2.rst:1176
msgid ""
"The use of filters has been simplified.  Instead of creating a :class:"
"`~logging.Filter` object, the predicate can be any Python callable that "
"returns *True* or *False*."
msgstr ""

# 650d41201a3442a89650f35bca43e928
#: whatsnew/3.2.rst:1180
msgid ""
"There were a number of other improvements that add flexibility and simplify "
"configuration.  See the module documentation for a full listing of changes "
"in Python 3.2."
msgstr ""

# e544199e2dd0453e803c76e6b947eb10
#: whatsnew/3.2.rst:1185
msgid "csv"
msgstr ""

# e9584141a3524227a3cc77dbbd8cab9e
#: whatsnew/3.2.rst:1187
msgid ""
"The :mod:`csv` module now supports a new dialect, :class:`~csv."
"unix_dialect`, which applies quoting for all fields and a traditional Unix "
"style with ``'\\n'`` as the line terminator.  The registered dialect name is "
"``unix``."
msgstr ""

# 05cc7fc0dc894daea883ad4601c6bda7
#: whatsnew/3.2.rst:1191
msgid ""
"The :class:`csv.DictWriter` has a new method, :meth:`~csv.DictWriter."
"writeheader` for writing-out an initial row to document the field names::"
msgstr ""

# 4e7a87c8a1c84329944ed586e0446375
#: whatsnew/3.2.rst:1205
msgid ""
"(New dialect suggested by Jay Talbot in :issue:`5975`, and the new method "
"suggested by Ed Abraham in :issue:`1537721`.)"
msgstr ""

# ac006811c68341caa8c06a778bcb2927
#: whatsnew/3.2.rst:1209
msgid "contextlib"
msgstr ""

# 794de900a3624796b9a5589f86ddd0b7
#: whatsnew/3.2.rst:1211
msgid ""
"There is a new and slightly mind-blowing tool :class:`~contextlib."
"ContextDecorator` that is helpful for creating a :term:`context manager` "
"that does double duty as a function decorator."
msgstr ""

# e3b046b7053b468aa47f8881ca33fb5e
#: whatsnew/3.2.rst:1215
msgid ""
"As a convenience, this new functionality is used by :func:`~contextlib."
"contextmanager` so that no extra effort is needed to support both roles."
msgstr ""

# 898b0c9a43d84b30bf15fafb5b7bc982
#: whatsnew/3.2.rst:1219
msgid ""
"The basic idea is that both context managers and function decorators can be "
"used for pre-action and post-action wrappers.  Context managers wrap a group "
"of statements using a :keyword:`with` statement, and function decorators "
"wrap a group of statements enclosed in a function.  So, occasionally there "
"is a need to write a pre-action or post-action wrapper that can be used in "
"either role."
msgstr ""

# 4b831d382de74093a914e56de2c0a860
#: whatsnew/3.2.rst:1225
msgid ""
"For example, it is sometimes useful to wrap functions or groups of "
"statements with a logger that can track the time of entry and time of exit.  "
"Rather than writing both a function decorator and a context manager for the "
"task, the :func:`~contextlib.contextmanager` provides both capabilities in a "
"single definition::"
msgstr ""

# d5224dac245948278e7345cca3b882d2
#: whatsnew/3.2.rst:1242
msgid "Formerly, this would have only been usable as a context manager::"
msgstr ""

# 39c7f8ab2a924a1c8d15f810d31afa7d
#: whatsnew/3.2.rst:1248
msgid "Now, it can be used as a decorator as well::"
msgstr ""

# ed76cc6e7de44472a7c6dc1e4b4d26be
#: whatsnew/3.2.rst:1255
msgid ""
"Trying to fulfill two roles at once places some limitations on the "
"technique. Context managers normally have the flexibility to return an "
"argument usable by a :keyword:`with` statement, but there is no parallel for "
"function decorators."
msgstr ""

# 2a059d53d9f44653aef6b65b8ad663b6
#: whatsnew/3.2.rst:1259
msgid ""
"In the above example, there is not a clean way for the "
"*track_entry_and_exit* context manager to return a logging instance for use "
"in the body of enclosed statements."
msgstr ""

# 06970e81690b40d4bce6c2df3ce3780b
#: whatsnew/3.2.rst:1263
msgid "(Contributed by Michael Foord in :issue:`9110`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 6cbc28ccfc3045fca4858eda8a7224eb
#: whatsnew/3.2.rst:1266
msgid "decimal and fractions"
msgstr ""

# 3d7a0eef21ae452bbc3332da755c5775
#: whatsnew/3.2.rst:1268
msgid ""
"Mark Dickinson crafted an elegant and efficient scheme for assuring that "
"different numeric datatypes will have the same hash value whenever their "
"actual values are equal (:issue:`8188`)::"
msgstr ""

# 9c98eaa9d60c4bf6a447652fd11923d3
#: whatsnew/3.2.rst:1275
msgid ""
"Some of the hashing details are exposed through a new attribute, :attr:`sys."
"hash_info`, which describes the bit width of the hash value, the prime "
"modulus, the hash values for *infinity* and *nan*, and the multiplier used "
"for the imaginary part of a number:"
msgstr ""

# c0a750b716e048f8879df0693b701b63
#: whatsnew/3.2.rst:1283
msgid ""
"An early decision to limit the inter-operability of various numeric types "
"has been relaxed.  It is still unsupported (and ill-advised) to have "
"implicit mixing in arithmetic expressions such as ``Decimal('1.1') + "
"float('1.1')`` because the latter loses information in the process of "
"constructing the binary float.  However, since existing floating point value "
"can be converted losslessly to either a decimal or rational representation, "
"it makes sense to add them to the constructor and to support mixed-type "
"comparisons."
msgstr ""

# eada3cbe545b451f9cbc0acc333d5179
#: whatsnew/3.2.rst:1291
msgid ""
"The :class:`decimal.Decimal` constructor now accepts :class:`float` objects "
"directly so there in no longer a need to use the :meth:`~decimal.Decimal."
"from_float` method (:issue:`8257`)."
msgstr ""

# bcbd942ea5154124b8f439af74ff823a
#: whatsnew/3.2.rst:1295
msgid ""
"Mixed type comparisons are now fully supported so that :class:`~decimal."
"Decimal` objects can be directly compared with :class:`float` and :class:"
"`fractions.Fraction` (:issue:`2531` and :issue:`8188`)."
msgstr ""

# fe96d8f2c60047aab13686c4a1e6135b
#: whatsnew/3.2.rst:1299
msgid ""
"Similar changes were made to :class:`fractions.Fraction` so that the :meth:"
"`~fractions.Fraction.from_float()` and :meth:`~fractions.Fraction."
"from_decimal` methods are no longer needed (:issue:`8294`):"
msgstr ""

# 486870dc7bd8425b9eb92229ef9705a4
#: whatsnew/3.2.rst:1308
msgid ""
"Another useful change for the :mod:`decimal` module is that the :attr:"
"`Context.clamp` attribute is now public.  This is useful in creating "
"contexts that correspond to the decimal interchange formats specified in "
"IEEE 754 (see :issue:`8540`)."
msgstr ""

# 3152b1d1cf154833b5852375f7f3557d
#: whatsnew/3.2.rst:1313
msgid "(Contributed by Mark Dickinson and Raymond Hettinger.)"
msgstr ""

# d4296647e3914c778b6eaeacf907731a
#: whatsnew/3.2.rst:1316
msgid "ftp"
msgstr ""

# 30d2f69032f94b19a3ae28ccb61d3620
#: whatsnew/3.2.rst:1318
msgid ""
"The :class:`ftplib.FTP` class now supports the context manager protocol to "
"unconditionally consume :exc:`socket.error` exceptions and to close the FTP "
"connection when done::"
msgstr ""

# c0fcee922ba7473aa954d3fa1058afe7
#: whatsnew/3.2.rst:1333
msgid ""
"Other file-like objects such as :class:`mmap.mmap` and :func:`fileinput."
"input` also grew auto-closing context managers::"
msgstr ""

# c005190500344046bdefcc2407d58f64
#: whatsnew/3.2.rst:1340
msgid ""
"(Contributed by Tarek Ziadé and Giampaolo Rodolà in :issue:`4972`, and by "
"Georg Brandl in :issue:`8046` and :issue:`1286`.)"
msgstr ""

# 631803d828614055bf24c6d1fe354ce7
#: whatsnew/3.2.rst:1343
msgid ""
"The :class:`~ftplib.FTP_TLS` class now accepts a *context* parameter, which "
"is a :class:`ssl.SSLContext` object allowing bundling SSL configuration "
"options, certificates and private keys into a single (potentially long-"
"lived) structure."
msgstr ""

# 1df3d66073ab44e1931d725551847806
#: whatsnew/3.2.rst:1347
msgid "(Contributed by Giampaolo Rodolà; :issue:`8806`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# e7122e8cd97a4a47adab448691d61c92
#: whatsnew/3.2.rst:1350
msgid "popen"
msgstr ""

# 20a0983a61b443f48f573aa14371b9f5
#: whatsnew/3.2.rst:1352
msgid ""
"The :func:`os.popen` and :func:`subprocess.Popen` functions now support :"
"keyword:`with` statements for auto-closing of the file descriptors."
msgstr ""

# f3e6b4cae991456bb9f3c7563420f2af
#: whatsnew/3.2.rst:1355
msgid ""
"(Contributed by Antoine Pitrou and Brian Curtin in :issue:`7461` and :issue:"
"`10554`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 5586d403e8ac4702a877854860517b15
#: whatsnew/3.2.rst:1359
msgid "select"
msgstr ""

# efd3d3cf92c142f09c96a8f5be787229
#: whatsnew/3.2.rst:1361
msgid ""
"The :mod:`select` module now exposes a new, constant attribute, :attr:"
"`~select.PIPE_BUF`, which gives the minimum number of bytes which are "
"guaranteed not to block when :func:`select.select` says a pipe is ready for "
"writing."
msgstr ""

# 75558e64b27e4f9b9682fe5100202d4c
#: whatsnew/3.2.rst:1370
msgid "(Available on Unix systems. Patch by Sébastien Sablé in :issue:`9862`)"
msgstr ""

# 563a56bfe7b9426e85c7b2e407e5ed84
#: whatsnew/3.2.rst:1373
msgid "gzip and zipfile"
msgstr ""

# d2994471078b4de9b5a2fa358a4ef908
#: whatsnew/3.2.rst:1375
msgid ""
":class:`gzip.GzipFile` now implements the :class:`io.BufferedIOBase` :term:"
"`abstract base class` (except for ``truncate()``).  It also has a :meth:"
"`~gzip.GzipFile.peek` method and supports unseekable as well as zero-padded "
"file objects."
msgstr ""

# 04ad5687888d4700b62fbed79087f08a
#: whatsnew/3.2.rst:1380
msgid ""
"The :mod:`gzip` module also gains the :func:`~gzip.compress` and :func:"
"`~gzip.decompress` functions for easier in-memory compression and "
"decompression.  Keep in mind that text needs to be encoded as :class:`bytes` "
"before compressing and decompressing:"
msgstr ""

# 0e9f0d4ad26f42d69adb5f1c72842b68
#: whatsnew/3.2.rst:1396
msgid ""
"(Contributed by Anand B. Pillai in :issue:`3488`; and by Antoine Pitrou, Nir "
"Aides and Brian Curtin in :issue:`9962`, :issue:`1675951`, :issue:`7471` "
"and :issue:`2846`.)"
msgstr ""

# dfb7f2053f0c4f26b483e1f763c227d1
#: whatsnew/3.2.rst:1400
msgid ""
"Also, the :class:`zipfile.ZipExtFile` class was reworked internally to "
"represent files stored inside an archive.  The new implementation is "
"significantly faster and can be wrapped in a :class:`io.BufferedReader` "
"object for more speedups.  It also solves an issue where interleaved calls "
"to *read* and *readline* gave the wrong results."
msgstr ""

# 8c5eeb7d72ed4511a5efdbf704b8f67d
#: whatsnew/3.2.rst:1406
msgid "(Patch submitted by Nir Aides in :issue:`7610`.)"
msgstr ""

# de59a0ba02da4f02b30ccaf484e0067c
#: whatsnew/3.2.rst:1409
msgid "tarfile"
msgstr ""

# 075d9072f8ba46578b8026a904a30eaa
#: whatsnew/3.2.rst:1411
msgid ""
"The :class:`~tarfile.TarFile` class can now be used as a context manager.  "
"In addition, its :meth:`~tarfile.TarFile.add` method has a new option, "
"*filter*, that controls which files are added to the archive and allows the "
"file metadata to be edited."
msgstr ""

# 67cb147e5ab9494a866d6ccb1a6ecfc6
#: whatsnew/3.2.rst:1416
msgid ""
"The new *filter* option replaces the older, less flexible *exclude* "
"parameter which is now deprecated.  If specified, the optional *filter* "
"parameter needs to be a :term:`keyword argument`.  The user-supplied filter "
"function accepts a :class:`~tarfile.TarInfo` object and returns an updated :"
"class:`~tarfile.TarInfo` object, or if it wants the file to be excluded, the "
"function can return *None*::"
msgstr ""

# f2fcaa763c0e47bfa01a5cf3418ce5de
#: whatsnew/3.2.rst:1440
msgid ""
"(Proposed by Tarek Ziadé and implemented by Lars Gustäbel in :issue:`6856`.)"
msgstr ""

# 5ce313a071cc43e38242a73c89c97a93
#: whatsnew/3.2.rst:1443
msgid "hashlib"
msgstr ""

# 72a4c39a425b422ca7c26eef1ef61df2
#: whatsnew/3.2.rst:1445
msgid ""
"The :mod:`hashlib` module has two new constant attributes listing the "
"hashing algorithms guaranteed to be present in all implementations and those "
"available on the current implementation::"
msgstr ""

# 79a3bd90ebb44e889c26f35127c14fa3
#: whatsnew/3.2.rst:1460
msgid "(Suggested by Carl Chenet in :issue:`7418`.)"
msgstr ""

# 0f0b89e0282c48e99ab9485417c7c149
#: whatsnew/3.2.rst:1463
msgid "ast"
msgstr ""

# b63fdebee288490caf1af029226e198a
#: whatsnew/3.2.rst:1465
msgid ""
"The :mod:`ast` module has a wonderful a general-purpose tool for safely "
"evaluating expression strings using the Python literal syntax.  The :func:"
"`ast.literal_eval` function serves as a secure alternative to the builtin :"
"func:`eval` function which is easily abused.  Python 3.2 adds :class:`bytes` "
"and :class:`set` literals to the list of supported types: strings, bytes, "
"numbers, tuples, lists, dicts, sets, booleans, and None."
msgstr ""

# 5d727e4f505f4f8f94149f7e87364d9f
#: whatsnew/3.2.rst:1486
msgid "(Implemented by Benjamin Peterson and Georg Brandl.)"
msgstr ""

# eb7f8f28a90946a6902b91d10123a054
#: whatsnew/3.2.rst:1489
msgid "os"
msgstr ""

# f8156365b82c4ddba4072f4a3dda5904
#: whatsnew/3.2.rst:1491
msgid ""
"Different operating systems use various encodings for filenames and "
"environment variables.  The :mod:`os` module provides two new functions, :"
"func:`~os.fsencode` and :func:`~os.fsdecode`, for encoding and decoding "
"filenames:"
msgstr ""

# 1fe66d59c8034c39933fe8383e131fa6
#: whatsnew/3.2.rst:1500
msgid ""
"Some operating systems allow direct access to encoded bytes in the "
"environment.  If so, the :attr:`os.supports_bytes_environ` constant will be "
"true."
msgstr ""

# 57c79e74781c42259591b604153c7a29
#: whatsnew/3.2.rst:1504
msgid ""
"For direct access to encoded environment variables (if available), use the "
"new :func:`os.getenvb` function or use :data:`os.environb` which is a bytes "
"version of :data:`os.environ`."
msgstr ""

# a0a0b19c405545a690359ce06154ed3e
#: whatsnew/3.2.rst:1508
msgid "(Contributed by Victor Stinner.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 1f44077f76694868bcf455d3e437591f
#: whatsnew/3.2.rst:1511
msgid "shutil"
msgstr ""

# f05fc7b99630420db670380c0f26c4cb
#: whatsnew/3.2.rst:1513
msgid "The :func:`shutil.copytree` function has two new options:"
msgstr ""

# c8cdd0e2e26a444b99aedd93472cee1f
#: whatsnew/3.2.rst:1515
msgid ""
"*ignore_dangling_symlinks*: when ``symlinks=False`` so that the function "
"copies a file pointed to by a symlink, not the symlink itself. This option "
"will silence the error raised if the file doesn't exist."
msgstr ""

# 32c55dc501234129b6a33e1e83d034a8
#: whatsnew/3.2.rst:1519
msgid ""
"*copy_function*: is a callable that will be used to copy files. :func:"
"`shutil.copy2` is used by default."
msgstr ""

# 2284bda70db94bf985dcfe8d5d19ac1a
# 04de78c9118f44cb86859572e5bdc6fd
#: whatsnew/3.2.rst:1522 whatsnew/3.2.rst:1560
msgid "(Contributed by Tarek Ziadé.)"
msgstr ""

# 884bfc5f840848a5b8709ef37cefe37d
#: whatsnew/3.2.rst:1524
msgid ""
"In addition, the :mod:`shutil` module now supports :ref:`archiving "
"operations <archiving-operations>` for zipfiles, uncompressed tarfiles, "
"gzipped tarfiles, and bzipped tarfiles.  And there are functions for "
"registering additional archiving file formats (such as xz compressed "
"tarfiles or custom formats)."
msgstr ""

# 4878e3de100b4a93a609eddf159b49eb
#: whatsnew/3.2.rst:1529
msgid ""
"The principal functions are :func:`~shutil.make_archive` and :func:`~shutil."
"unpack_archive`.  By default, both operate on the current directory (which "
"can be set by :func:`os.chdir`) and on any sub-directories. The archive "
"filename needs to be specified with a full pathname.  The archiving step is "
"non-destructive (the original files are left unchanged)."
msgstr ""

# 412648bbf1cc4c4db24c46aeeb495ddf
#: whatsnew/3.2.rst:1563
msgid "sqlite3"
msgstr ""

# f76fa4ed7a344776a04d11b69786c3ac
#: whatsnew/3.2.rst:1565
msgid ""
"The :mod:`sqlite3` module was updated to pysqlite version 2.6.0.  It has two "
"new capabilities."
msgstr ""

# 8e33455d3ad04c04a253624cb542fde9
#: whatsnew/3.2.rst:1567
msgid ""
"The :attr:`sqlite3.Connection.in_transit` attribute is true if there is an "
"active transaction for uncommitted changes."
msgstr ""

# 61818504ec694bc9b0b79690d4b1e722
#: whatsnew/3.2.rst:1570
msgid ""
"The :meth:`sqlite3.Connection.enable_load_extension` and :meth:`sqlite3."
"Connection.load_extension` methods allows you to load SQLite extensions from "
"\".so\" files.  One well-known extension is the fulltext-search extension "
"distributed with SQLite."
msgstr ""

# d7376debc29f4db39b4ff594a29733a9
#: whatsnew/3.2.rst:1575
msgid "(Contributed by R. David Murray and Shashwat Anand; :issue:`8845`.)"
msgstr ""

# 4e9250ad2381489e80b6ac1857ee0ccc
#: whatsnew/3.2.rst:1578
msgid "html"
msgstr ""

# 951a34007f4e448ba60bdc7a6f490a37
#: whatsnew/3.2.rst:1580
msgid ""
"A new :mod:`html` module was introduced with only a single function, :func:"
"`~html.escape`, which is used for escaping reserved characters from HTML "
"markup:"
msgstr ""

# 95b3bed1ca524f21b0c4f330663cd7d8
#: whatsnew/3.2.rst:1589
msgid "socket"
msgstr ""

# 561f826db8ed4e558e472e3685391e3b
#: whatsnew/3.2.rst:1591
msgid "The :mod:`socket` module has two new improvements."
msgstr ""

# e29d8bf752504fc389a1d5cd49cedcf1
#: whatsnew/3.2.rst:1593
msgid ""
"Socket objects now have a :meth:`~socket.socket.detach()` method which puts "
"the socket into closed state without actually closing the underlying file "
"descriptor.  The latter can then be reused for other purposes. (Added by "
"Antoine Pitrou; :issue:`8524`.)"
msgstr ""

# f937a99fbc804d7cb65bed3d4c34b41c
#: whatsnew/3.2.rst:1598
msgid ""
":func:`socket.create_connection` now supports the context manager protocol "
"to unconditionally consume :exc:`socket.error` exceptions and to close the "
"socket when done. (Contributed by Giampaolo Rodolà; :issue:`9794`.)"
msgstr ""

# 3e8068ff6ac048caad8697457db7f58a
#: whatsnew/3.2.rst:1604
msgid "ssl"
msgstr ""

# 260a3971700d493d99a58b875b0ddc01
#: whatsnew/3.2.rst:1606
msgid ""
"The :mod:`ssl` module added a number of features to satisfy common "
"requirements for secure (encrypted, authenticated) internet connections:"
msgstr ""

# 5e81ea0a13154efc96d6d459e09ab04a
#: whatsnew/3.2.rst:1609
msgid ""
"A new class, :class:`~ssl.SSLContext`, serves as a container for persistent "
"SSL data, such as protocol settings, certificates, private keys, and various "
"other options. It includes a :meth:`~ssl.SSLContext.wrap_socket` for "
"creating an SSL socket from an SSL context."
msgstr ""

# 0ceaa5abf24140ddad26aed6f3fe3ba4
#: whatsnew/3.2.rst:1614
msgid ""
"A new function, :func:`ssl.match_hostname`, supports server identity "
"verification for higher-level protocols by implementing the rules of HTTPS "
"(from :rfc:`2818`) which are also suitable for other protocols."
msgstr ""

# b8b2f4aa2a904bd5a73bfc2dcf64f5fc
#: whatsnew/3.2.rst:1618
msgid ""
"The :func:`ssl.wrap_socket` constructor function now takes a *ciphers* "
"argument.  The *ciphers* string lists the allowed encryption algorithms "
"using the format described in the `OpenSSL documentation <http://www.openssl."
"org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT>`__."
msgstr ""

# a67fbcfb858a40729c5fe2bd3651a6a1
#: whatsnew/3.2.rst:1623
msgid ""
"When linked against recent versions of OpenSSL, the :mod:`ssl` module now "
"supports the Server Name Indication extension to the TLS protocol, allowing "
"multiple \"virtual hosts\" using different certificates on a single IP port. "
"This extension is only supported in client mode, and is activated by passing "
"the *server_hostname* argument to :meth:`ssl.SSLContext.wrap_socket`."
msgstr ""

# 58ab1cec1e024a60b50ea83f003c2bea
#: whatsnew/3.2.rst:1629
msgid ""
"Various options have been added to the :mod:`ssl` module, such as :data:"
"`~ssl.OP_NO_SSLv2` which disables the insecure and obsolete SSLv2 protocol."
msgstr ""

# fa18462dfd104b089d62d19dd4bdbaa7
#: whatsnew/3.2.rst:1633
msgid ""
"The extension now loads all the OpenSSL ciphers and digest algorithms.  If "
"some SSL certificates cannot be verified, they are reported as an \"unknown "
"algorithm\" error."
msgstr ""

# 0238872e736a47128b1e3540b91dcecb
#: whatsnew/3.2.rst:1637
msgid ""
"The version of OpenSSL being used is now accessible using the module "
"attributes :data:`ssl.OPENSSL_VERSION` (a string), :data:`ssl."
"OPENSSL_VERSION_INFO` (a 5-tuple), and :data:`ssl.OPENSSL_VERSION_NUMBER` "
"(an integer)."
msgstr ""

# a177545a4c0c40bf81e2739d69ef377c
#: whatsnew/3.2.rst:1642
msgid ""
"(Contributed by Antoine Pitrou in :issue:`8850`, :issue:`1589`, :issue:"
"`8322`, :issue:`5639`, :issue:`4870`, :issue:`8484`, and :issue:`8321`.)"
msgstr ""

# 0e23347f6f1c4e7fbbe0c6d50bf9cd4d
#: whatsnew/3.2.rst:1646
msgid "nntp"
msgstr ""

# 8f1bfe4dd2b94403a10e6d184185602c
#: whatsnew/3.2.rst:1648
msgid ""
"The :mod:`nntplib` module has a revamped implementation with better bytes "
"and text semantics as well as more practical APIs.  These improvements break "
"compatibility with the nntplib version in Python 3.1, which was partly "
"dysfunctional in itself."
msgstr ""

# 64a736cb10644b46a833e3e468208965
#: whatsnew/3.2.rst:1653
msgid ""
"Support for secure connections through both implicit (using :class:`nntplib."
"NNTP_SSL`) and explicit (using :meth:`nntplib.NNTP.starttls`) TLS has also "
"been added."
msgstr ""

# 98d2e73f222b4a05bb68d3ec30da5d0a
#: whatsnew/3.2.rst:1657
msgid ""
"(Contributed by Antoine Pitrou in :issue:`9360` and Andrew Vant in :issue:"
"`1926`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 8e4dd9d15c0942bfbec0295f67b93527
#: whatsnew/3.2.rst:1660
msgid "certificates"
msgstr ""

# 6f64230562fb473ab9c00e2c2f1fa205
#: whatsnew/3.2.rst:1662
msgid ""
":class:`http.client.HTTPSConnection`, :class:`urllib.request.HTTPSHandler` "
"and :func:`urllib.request.urlopen` now take optional arguments to allow for "
"server certificate checking against a set of Certificate Authorities, as "
"recommended in public uses of HTTPS."
msgstr ""

# 5dd85595fce6436f8f3a424baf805731
#: whatsnew/3.2.rst:1667
msgid "(Added by Antoine Pitrou, :issue:`9003`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# d31f508179584fcfa02a6acf4cd2f8f3
#: whatsnew/3.2.rst:1670
msgid "imaplib"
msgstr ""

# c90c61b6b1a146df88b6914e72518f95
#: whatsnew/3.2.rst:1672
msgid ""
"Support for explicit TLS on standard IMAP4 connections has been added "
"through the new :mod:`imaplib.IMAP4.starttls` method."
msgstr ""

# a716663abea24cb887d883e3951dd0c0
#: whatsnew/3.2.rst:1675
msgid "(Contributed by Lorenzo M. Catucci and Antoine Pitrou, :issue:`4471`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 28655871378642888b6b19c94481cbe0
#: whatsnew/3.2.rst:1678
msgid "http.client"
msgstr ""

# 19c9a4770e514bf6a846ff9679cba8ed
#: whatsnew/3.2.rst:1680
msgid ""
"There were a number of small API improvements in the :mod:`http.client` "
"module. The old-style HTTP 0.9 simple responses are no longer supported and "
"the *strict* parameter is deprecated in all classes."
msgstr ""

# fb82f8a657e84626a53fa8b591fce665
#: whatsnew/3.2.rst:1684
msgid ""
"The :class:`~http.client.HTTPConnection` and :class:`~http.client."
"HTTPSConnection` classes now have a *source_address* parameter for a (host, "
"port) tuple indicating where the HTTP connection is made from."
msgstr ""

# 1119469101534e3b8a49da4ee34d3ffc
#: whatsnew/3.2.rst:1689
msgid ""
"Support for certificate checking and HTTPS virtual hosts were added to :"
"class:`~http.client.HTTPSConnection`."
msgstr ""

# 4a36e1b5acc4435bbe9610ee085ed3f9
#: whatsnew/3.2.rst:1692
msgid ""
"The :meth:`~http.client.HTTPConnection.request` method on connection objects "
"allowed an optional *body* argument so that a :term:`file object` could be "
"used to supply the content of the request.  Conveniently, the *body* "
"argument now also accepts an :term:`iterable` object so long as it includes "
"an explicit ``Content-Length`` header.  This extended interface is much more "
"flexible than before."
msgstr ""

# b9f5c1f34a334cb1802e6e674727a00c
#: whatsnew/3.2.rst:1699
msgid ""
"To establish an HTTPS connection through a proxy server, there is a new :"
"meth:`~http.client.HTTPConnection.set_tunnel` method that sets the host and "
"port for HTTP Connect tunneling."
msgstr ""

# cabc7f3f60044f58b408a5086a865d01
#: whatsnew/3.2.rst:1703
msgid ""
"To match the behavior of :mod:`http.server`, the HTTP client library now "
"also encodes headers with ISO-8859-1 (Latin-1) encoding.  It was already "
"doing that for incoming headers, so now the behavior is consistent for both "
"incoming and outgoing traffic. (See work by Armin Ronacher in :issue:"
"`10980`.)"
msgstr ""

# 489ebc2c8a5b4159bafe7ce033094b40
#: whatsnew/3.2.rst:1709
msgid "unittest"
msgstr ""

# ac21804cb45e4687897b17d993696b24
#: whatsnew/3.2.rst:1711
msgid ""
"The unittest module has a number of improvements supporting test discovery "
"for packages, easier experimentation at the interactive prompt, new testcase "
"methods, improved diagnostic messages for test failures, and better method "
"names."
msgstr ""

# 794fad4f220e4e3aa58ac8d5f3ee0c5e
#: whatsnew/3.2.rst:1716
msgid ""
"The command-line call ``python -m unittest`` can now accept file paths "
"instead of module names for running specific tests (:issue:`10620`).  The "
"new test discovery can find tests within packages, locating any test "
"importable from the top-level directory.  The top-level directory can be "
"specified with the `-t` option, a pattern for matching files with ``-p``, "
"and a directory to start discovery with ``-s``::"
msgstr ""

# 2aafb01085ae4bcd98bb7b85cc16fc75
# 8ebd132a2e3a49c78821a1a19607af35
# b8f9e3258a04411d8ddb818b6ec2b409
#: whatsnew/3.2.rst:1725 whatsnew/3.2.rst:1733 whatsnew/3.2.rst:1889
msgid "(Contributed by Michael Foord.)"
msgstr ""

# b7d4a94b135a4a25839c2087a6c3b9e0
#: whatsnew/3.2.rst:1727
msgid ""
"Experimentation at the interactive prompt is now easier because the :class:"
"`unittest.case.TestCase` class can now be instantiated without arguments:"
msgstr ""

# a71d83c081164df2af472b4290e78b42
#: whatsnew/3.2.rst:1735
msgid ""
"The :mod:`unittest` module has two new methods, :meth:`~unittest.TestCase."
"assertWarns` and :meth:`~unittest.TestCase.assertWarnsRegex` to verify that "
"a given warning type is triggered by the code under test::"
msgstr ""

# d8cf54d0fcdc48ff8313ca0d01787723
#: whatsnew/3.2.rst:1743
msgid "(Contributed by Antoine Pitrou, :issue:`9754`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 104e22c1639f439c8c6f6a0c88d621f2
#: whatsnew/3.2.rst:1745
msgid ""
"Another new method, :meth:`~unittest.TestCase.assertCountEqual` is used to "
"compare two iterables to determine if their element counts are equal "
"(whether the same elements are present with the same number of occurrences "
"regardless of order)::"
msgstr ""

# 3c5ad8875dd3471ba800ddb0d46fe7c4
#: whatsnew/3.2.rst:1755
msgid ""
"A principal feature of the unittest module is an effort to produce "
"meaningful diagnostics when a test fails.  When possible, the failure is "
"recorded along with a diff of the output.  This is especially helpful for "
"analyzing log files of failed test runs. However, since diffs can sometime "
"be voluminous, there is a new :attr:`~unittest.TestCase.maxDiff` attribute "
"that sets maximum length of diffs displayed."
msgstr ""

# c208941510b443eb89682b7782d2d3b0
#: whatsnew/3.2.rst:1762
msgid ""
"In addition, the method names in the module have undergone a number of clean-"
"ups."
msgstr ""

# 286616a0f6034edc8e030affac709c44
#: whatsnew/3.2.rst:1764
msgid ""
"For example, :meth:`~unittest.TestCase.assertRegex` is the new name for :"
"meth:`~unittest.TestCase.assertRegexpMatches` which was misnamed because the "
"test uses :func:`re.search`, not :func:`re.match`.  Other methods using "
"regular expressions are now named using short form \"Regex\" in preference "
"to \"Regexp\" -- this matches the names used in other unittest "
"implementations, matches Python's old name for the :mod:`re` module, and it "
"has unambiguous camel-casing."
msgstr ""

# c69334fe50c545a5b3aed185062e306a
#: whatsnew/3.2.rst:1772
msgid "(Contributed by Raymond Hettinger and implemented by Ezio Melotti.)"
msgstr ""

# 3e78a3f993cf4bf7bb36157336db119f
#: whatsnew/3.2.rst:1774
msgid ""
"To improve consistency, some long-standing method aliases are being "
"deprecated in favor of the preferred names:"
msgstr ""

# 5adab0580e7f4f65b2d04dbc657a05e1
#: whatsnew/3.2.rst:1778
msgid "Preferred Name"
msgstr ""

# dc94a293628148e6a7e6a6f4c9805dee
#: whatsnew/3.2.rst:1780
msgid ":meth:`assert_`"
msgstr ""

# a4fa5b2453504938a186b5257339a17a
#: whatsnew/3.2.rst:1780
msgid ":meth:`.assertTrue`"
msgstr ""

# 2f952b16046a48c4b60f853183fe2678
#: whatsnew/3.2.rst:1781
msgid ":meth:`assertEquals`"
msgstr ""

# dc06a43edba048c8bca079dc148f9a60
#: whatsnew/3.2.rst:1781
msgid ":meth:`.assertEqual`"
msgstr ""

# 3687198933494071b90f38360f19c20d
#: whatsnew/3.2.rst:1782
msgid ":meth:`assertNotEquals`"
msgstr ""

# a00c38cef71d4f038fcba5a3054e5606
#: whatsnew/3.2.rst:1782
msgid ":meth:`.assertNotEqual`"
msgstr ""

# 84ea96bb2778406f83a2a3d428d3b93d
#: whatsnew/3.2.rst:1783
msgid ":meth:`assertAlmostEquals`"
msgstr ""

# 927391dd714d4efab09382a5cb3ac452
#: whatsnew/3.2.rst:1783
msgid ":meth:`.assertAlmostEqual`"
msgstr ""

# fb25806961f54f0992c157d90afe3742
#: whatsnew/3.2.rst:1784
msgid ":meth:`assertNotAlmostEquals`"
msgstr ""

# 29b53433f2db43068de893436b11c7ae
#: whatsnew/3.2.rst:1784
msgid ":meth:`.assertNotAlmostEqual`"
msgstr ""

# eac0a48afaf54fbbba10c21074c11990
#: whatsnew/3.2.rst:1787
msgid ""
"Likewise, the ``TestCase.fail*`` methods deprecated in Python 3.1 are "
"expected to be removed in Python 3.3.  Also see the :ref:`deprecated-"
"aliases` section in the :mod:`unittest` documentation."
msgstr ""

# ef7374b2735042c99b370369bae83125
#: whatsnew/3.2.rst:1791
msgid "(Contributed by Ezio Melotti; :issue:`9424`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 923963250b75432f865f8e47f8976c3c
#: whatsnew/3.2.rst:1793
msgid ""
"The :meth:`~unittest.TestCase.assertDictContainsSubset` method was "
"deprecated because it was misimplemented with the arguments in the wrong "
"order.  This created hard-to-debug optical illusions where tests like "
"``TestCase().assertDictContainsSubset({'a':1, 'b':2}, {'a':1})`` would fail."
msgstr ""

# 8461fabd38d741348b4521122fe55539
#: whatsnew/3.2.rst:1801
msgid "random"
msgstr ""

# 848621c59613419aaa9718d38b647426
#: whatsnew/3.2.rst:1803
msgid ""
"The integer methods in the :mod:`random` module now do a better job of "
"producing uniform distributions.  Previously, they computed selections with "
"``int(n*random())`` which had a slight bias whenever *n* was not a power of "
"two. Now, multiple selections are made from a range up to the next power of "
"two and a selection is kept only when it falls within the range ``0 <= x < "
"n``.  The functions and methods affected are :func:`~random.randrange`, :"
"func:`~random.randint`, :func:`~random.choice`, :func:`~random.shuffle` and :"
"func:`~random.sample`."
msgstr ""

# 55e3ed74c4684676b28a1d7960ff9aff
#: whatsnew/3.2.rst:1812
msgid "(Contributed by Raymond Hettinger; :issue:`9025`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 4c27f0ea199947abbab331f1e6d2c682
#: whatsnew/3.2.rst:1815
msgid "poplib"
msgstr ""

# 81be4a49ac3f4d5eac6a9512d512a1ba
#: whatsnew/3.2.rst:1817
msgid ""
":class:`~poplib.POP3_SSL` class now accepts a *context* parameter, which is "
"a :class:`ssl.SSLContext` object allowing bundling SSL configuration "
"options, certificates and private keys into a single (potentially long-"
"lived) structure."
msgstr ""

# 84f5a7984f624b109719b765e55a89a0
#: whatsnew/3.2.rst:1822
msgid "(Contributed by Giampaolo Rodolà; :issue:`8807`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 01e378b70b25496c829ed7a00a89ee68
#: whatsnew/3.2.rst:1825
msgid "asyncore"
msgstr ""

# a9eabc6baa2948f3a8e058b1dae67e78
#: whatsnew/3.2.rst:1827
msgid ""
":class:`asyncore.dispatcher` now provides a :meth:`~asyncore.dispatcher."
"handle_accepted()` method returning a `(sock, addr)` pair which is called "
"when a connection has actually been established with a new remote endpoint. "
"This is supposed to be used as a replacement for old :meth:`~asyncore."
"dispatcher.handle_accept()` and avoids the user  to call :meth:`~asyncore."
"dispatcher.accept()` directly."
msgstr ""

# 2071796771e14eb2879f3eabca921255
#: whatsnew/3.2.rst:1834
msgid "(Contributed by Giampaolo Rodolà; :issue:`6706`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 7c518bfedd4f479b8ffe834ac949ac31
#: whatsnew/3.2.rst:1837
msgid "tempfile"
msgstr ""

# bb4f88cd9e19414580689a44a4a2395f
#: whatsnew/3.2.rst:1839
msgid ""
"The :mod:`tempfile` module has a new context manager, :class:`~tempfile."
"TemporaryDirectory` which provides easy deterministic cleanup of temporary "
"directories::"
msgstr ""

# ee63a31f27bc42e79e18974197273ed4
#: whatsnew/3.2.rst:1846
msgid "(Contributed by Neil Schemenauer and Nick Coghlan; :issue:`5178`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 9c588eb516124b319936ad03583ef6d6
#: whatsnew/3.2.rst:1849
msgid "inspect"
msgstr ""

# 100eeaef30494cbe82b27836a4e1ac36
#: whatsnew/3.2.rst:1851
msgid ""
"The :mod:`inspect` module has a new function :func:`~inspect."
"getgeneratorstate` to easily identify the current state of a generator-"
"iterator::"
msgstr ""

# bf8999d57f3047d08ee543815aa7c087
#: whatsnew/3.2.rst:1869
msgid "(Contributed by Rodolpho Eckhardt and Nick Coghlan, :issue:`10220`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 123106c626af4212b404be4fcb93e230
#: whatsnew/3.2.rst:1871
msgid ""
"To support lookups without the possibility of activating a dynamic "
"attribute, the :mod:`inspect` module has a new function, :func:`~inspect."
"getattr_static`. Unlike :func:`hasattr`, this is a true read-only search, "
"guaranteed not to change state while it is searching::"
msgstr ""

# e7218e0efe75447398cc27e5e9158bad
#: whatsnew/3.2.rst:1892
msgid "pydoc"
msgstr ""

# 5d7af20c54574ea1875e587002557050
#: whatsnew/3.2.rst:1894
msgid ""
"The :mod:`pydoc` module now provides a much-improved Web server interface, "
"as well as a new command-line option ``-b`` to automatically open a browser "
"window to display that server::"
msgstr ""

# cb4e8dbcbaca4b5986b152293302f77a
#: whatsnew/3.2.rst:1900
msgid "(Contributed by Ron Adam; :issue:`2001`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 5d1ed42df0314f1b9258a1bd4352670c
#: whatsnew/3.2.rst:1903
msgid "dis"
msgstr ""

# 951d7fc5dd6c4710b691465b86f150bd
#: whatsnew/3.2.rst:1905
msgid ""
"The :mod:`dis` module gained two new functions for inspecting code, :func:"
"`~dis.code_info` and :func:`~dis.show_code`.  Both provide detailed code "
"object information for the supplied function, method, source code string or "
"code object.  The former returns a string and the latter prints it::"
msgstr ""

# 1286bcf28e7e4bfc88e00c34c317792a
#: whatsnew/3.2.rst:1932
msgid ""
"In addition, the :func:`~dis.dis` function now accepts string arguments so "
"that the common idiom ``dis(compile(s, '', 'eval'))`` can be shortened to "
"``dis(s)``::"
msgstr ""

# 8f50aa898ac640198ec6be6e155c4cb8
#: whatsnew/3.2.rst:1954
msgid ""
"Taken together, these improvements make it easier to explore how CPython is "
"implemented and to see for yourself what the language syntax does under-the-"
"hood."
msgstr ""

# 1a24644cb9a04eaeb6c8fee67e19b776
#: whatsnew/3.2.rst:1958
msgid "(Contributed by Nick Coghlan in :issue:`9147`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 1eabcbdb5dc04fa189879a25d288c87c
#: whatsnew/3.2.rst:1961
msgid "dbm"
msgstr ""

# 4ee78497e79741a98a50a7490c3150a5
#: whatsnew/3.2.rst:1963
msgid ""
"All database modules now support the :meth:`get` and :meth:`setdefault` "
"methods."
msgstr ""

# 53fc7a26cc094ae18d475926374af110
#: whatsnew/3.2.rst:1965
msgid "(Suggested by Ray Allen in :issue:`9523`.)"
msgstr ""

# 4a6a9a7e42084ea68e94b34984edf91f
#: whatsnew/3.2.rst:1968
msgid "ctypes"
msgstr ""

# 3dd0ca3d717a4cc39b76a75ab0662f4b
#: whatsnew/3.2.rst:1970
msgid ""
"A new type, :class:`ctypes.c_ssize_t` represents the C :c:type:`ssize_t` "
"datatype."
msgstr ""

# 1c74fce08ed54c82b9bac07b7dca1bca
#: whatsnew/3.2.rst:1973
msgid "site"
msgstr ""

# aa98c955b45a49d3a681fd7741470a03
#: whatsnew/3.2.rst:1975
msgid ""
"The :mod:`site` module has three new functions useful for reporting on the "
"details of a given Python installation."
msgstr ""

# 8c53e4e232a3475eb6bd58ee40597d30
#: whatsnew/3.2.rst:1978
msgid ""
":func:`~site.getsitepackages` lists all global site-packages directories."
msgstr ""

# 70650e1557dc4a8b930b2a9fb2bda5ef
#: whatsnew/3.2.rst:1980
msgid ""
":func:`~site.getuserbase` reports on the user's base directory where data "
"can be stored."
msgstr ""

# afa9d295168b421a83adde7005aee88c
#: whatsnew/3.2.rst:1983
msgid ""
":func:`~site.getusersitepackages` reveals the user-specific site-packages "
"directory path."
msgstr ""

# 462e5ecaac0645248f29e8d0ebdb16fb
#: whatsnew/3.2.rst:1998
msgid ""
"Conveniently, some of site's functionality is accessible directly from the "
"command-line::"
msgstr ""

# 76f8a6029a5345a8aab7a4c8e63b1d4d
#: whatsnew/3.2.rst:2006
msgid "(Contributed by Tarek Ziadé in :issue:`6693`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# f6101dc34e274c14b34d6fa2527030f1
#: whatsnew/3.2.rst:2009
msgid "sysconfig"
msgstr ""

# 7e47e67dfede4b46bdd50efa7cd38b14
#: whatsnew/3.2.rst:2011
msgid ""
"The new :mod:`sysconfig` module makes it straightforward to discover "
"installation paths and configuration variables that vary across platforms "
"and installations."
msgstr ""

# 4906ece32ec24a6b90502dddbcc4020a
#: whatsnew/3.2.rst:2015
msgid ""
"The module offers access simple access functions for platform and version "
"information:"
msgstr ""

# 1ac065c500e24612ab7bc370edb93fe1
#: whatsnew/3.2.rst:2018
msgid ""
":func:`~sysconfig.get_platform` returning values like *linux-i586* or "
"*macosx-10.6-ppc*."
msgstr ""

# 41819cb09e3540348a77eec8c3a9ec20
#: whatsnew/3.2.rst:2020
msgid ""
":func:`~sysconfig.get_python_version` returns a Python version string such "
"as \"3.2\"."
msgstr ""

# bf012eb582444bbeb7859392ffadd80a
#: whatsnew/3.2.rst:2023
msgid ""
"It also provides access to the paths and variables corresponding to one of "
"seven named schemes used by :mod:`distutils`.  Those include *posix_prefix*, "
"*posix_home*, *posix_user*, *nt*, *nt_user*, *os2*, *os2_home*:"
msgstr ""

# 296c8de159f94b2caa28200d8bd7626f
#: whatsnew/3.2.rst:2027
msgid ""
":func:`~sysconfig.get_paths` makes a dictionary containing installation "
"paths for the current installation scheme."
msgstr ""

# 3aab3052ba904ceeb5ea75d36d5c78a3
#: whatsnew/3.2.rst:2029
msgid ""
":func:`~sysconfig.get_config_vars` returns a dictionary of platform specific "
"variables."
msgstr ""

# 54f3c80d8d6b4a319419a85c894d2135
#: whatsnew/3.2.rst:2032
msgid "There is also a convenient command-line interface::"
msgstr ""

# 1cd4928b0672458aa59980d579748c7d
#: whatsnew/3.2.rst:2069
msgid "(Moved out of Distutils by Tarek Ziadé.)"
msgstr ""

# d8447dd9f5cd4360bba2c6d017aa4a7f
#: whatsnew/3.2.rst:2072
msgid "pdb"
msgstr ""

# 0684dddb18054fdeb61c6dca54bbc4a0
#: whatsnew/3.2.rst:2074
msgid ""
"The :mod:`pdb` debugger module gained a number of usability improvements:"
msgstr ""

# b5d5cc6242814aa7889b0ef8ce7f25ec
#: whatsnew/3.2.rst:2076
msgid ""
":file:`pdb.py` now has a ``-c`` option that executes commands as given in a :"
"file:`.pdbrc` script file."
msgstr ""

# 414fd11e509f4d2b9d3f36cdd6f907ad
#: whatsnew/3.2.rst:2078
msgid ""
"A :file:`.pdbrc` script file can contain ``continue`` and ``next`` commands "
"that continue debugging."
msgstr ""

# dacb39ae01ba46d098b88fdc643662df
#: whatsnew/3.2.rst:2080
msgid "The :class:`Pdb` class constructor now accepts a *nosigint* argument."
msgstr ""

# 10b6df98d69249199f417a987971296b
#: whatsnew/3.2.rst:2081
msgid ""
"New commands: ``l(list)``, ``ll(long list)`` and ``source`` for listing "
"source code."
msgstr ""

# f4a6101a46a041f8ae6986b3319fe44e
#: whatsnew/3.2.rst:2083
msgid ""
"New commands: ``display`` and ``undisplay`` for showing or hiding the value "
"of an expression if it has changed."
msgstr ""

# d4d38ae8b5ba4ab696dc7f6b2fc98baf
#: whatsnew/3.2.rst:2085
msgid ""
"New command: ``interact`` for starting an interactive interpreter containing "
"the global and local  names found in the current scope."
msgstr ""

# b0ed718e0356490aae5f28e933a1bea1
#: whatsnew/3.2.rst:2087
msgid "Breakpoints can be cleared by breakpoint number."
msgstr ""

# fb8477acfe4a4e848532722054ae58ec
#: whatsnew/3.2.rst:2089
msgid "(Contributed by Georg Brandl, Antonio Cuni and Ilya Sandler.)"
msgstr ""

# e3af1cd8fa924305bdaa21b394318251
#: whatsnew/3.2.rst:2094
msgid ""
"The :mod:`configparser` module was modified to improve usability and "
"predictability of the default parser and its supported INI syntax.  The old :"
"class:`ConfigParser` class was removed in favor of :class:`SafeConfigParser` "
"which has in turn been renamed to :class:`~configparser.ConfigParser`. "
"Support for inline comments is now turned off by default and section or "
"option duplicates are not allowed in a single configuration source."
msgstr ""

# 188b1736c6904a0b83af7daf2a42fda7
#: whatsnew/3.2.rst:2101
msgid "Config parsers gained a new API based on the mapping protocol::"
msgstr ""

# 9d90096129e64a37b505c2899cb9e759
#: whatsnew/3.2.rst:2129
msgid ""
"The new API is implemented on top of the classical API, so custom parser "
"subclasses should be able to use it without modifications."
msgstr ""

# 2fcf479033214b83aa832dfb13732bf2
#: whatsnew/3.2.rst:2132
msgid ""
"The INI file structure accepted by config parsers can now be customized. "
"Users can specify alternative option/value delimiters and comment prefixes, "
"change the name of the *DEFAULT* section or switch the interpolation syntax."
msgstr ""

# 69e2c3ae636847b6aab16265b89c492f
#: whatsnew/3.2.rst:2136
msgid ""
"There is support for pluggable interpolation including an additional "
"interpolation handler :class:`~configparser.ExtendedInterpolation`::"
msgstr ""

# 1330b9403afd48c88dc5fc7548fdbf59
#: whatsnew/3.2.rst:2169
msgid ""
"A number of smaller features were also introduced, like support for "
"specifying encoding in read operations, specifying fallback values for get-"
"functions, or reading directly from dictionaries and strings."
msgstr ""

# 7bd68ecfd48846a39af560252d92a9f7
#: whatsnew/3.2.rst:2173
msgid "(All changes contributed by Łukasz Langa.)"
msgstr ""

# a4714dbf8b514882bb726c8077c4626c
#: whatsnew/3.2.rst:2178
msgid "urllib.parse"
msgstr ""

# 458d8d2768bb414398a8d8ab7755999e
#: whatsnew/3.2.rst:2180
msgid ""
"A number of usability improvements were made for the :mod:`urllib.parse` "
"module."
msgstr ""

# a6658b9c48744da09df0d6b39a15a999
#: whatsnew/3.2.rst:2182
msgid ""
"The :func:`~urllib.parse.urlparse` function now supports `IPv6 <http://en."
"wikipedia.org/wiki/IPv6>`_ addresses as described in :rfc:`2732`:"
msgstr ""

# 8dbef02c3513490f9230d39b07fce95c
#: whatsnew/3.2.rst:2194
msgid ""
"The :func:`~urllib.parse.urldefrag` function now returns a :term:`named "
"tuple`::"
msgstr ""

# 0e3524129c1249e7ae78ff83cfa6ab99
#: whatsnew/3.2.rst:2204
msgid ""
"And, the :func:`~urllib.parse.urlencode` function is now much more flexible, "
"accepting either a string or bytes type for the *query* argument.  If it is "
"a string, then the *safe*, *encoding*, and *error* parameters are sent to :"
"func:`~urllib.parse.quote_plus` for encoding::"
msgstr ""

# 7e77c86b39e74ddb84ab899d3e87274a
#: whatsnew/3.2.rst:2215
msgid ""
"As detailed in :ref:`parsing-ascii-encoded-bytes`, all the :mod:`urllib."
"parse` functions now accept ASCII-encoded byte strings as input, so long as "
"they are not mixed with regular strings.  If ASCII-encoded byte strings are "
"given as parameters, the return types will also be an ASCII-encoded byte "
"strings:"
msgstr ""

# 4e8ed75d3cd749e08e5ce5e3dbb6799d
#: whatsnew/3.2.rst:2224
msgid ""
"(Work by Nick Coghlan, Dan Mahn, and Senthil Kumaran in :issue:`2987`, :"
"issue:`5468`, and :issue:`9873`.)"
msgstr ""

# 819a610a12734cfcbb72fd201832e095
#: whatsnew/3.2.rst:2228
msgid "mailbox"
msgstr ""

# 6c2612db19254a87b70f5a7d61a6cc8d
#: whatsnew/3.2.rst:2230
msgid ""
"Thanks to a concerted effort by R. David Murray, the :mod:`mailbox` module "
"has been fixed for Python 3.2.  The challenge was that mailbox had been "
"originally designed with a text interface, but email messages are best "
"represented with :class:`bytes` because various parts of a message may have "
"different encodings."
msgstr ""

# 72a900d6a431475caca3d4c3bd4f14c9
#: whatsnew/3.2.rst:2235
msgid ""
"The solution harnessed the :mod:`email` package's binary support for parsing "
"arbitrary email messages.  In addition, the solution required a number of "
"API changes."
msgstr ""

# a8b424a6d6f24a2481eefe98f9f922dd
#: whatsnew/3.2.rst:2239
msgid ""
"As expected, the :meth:`~mailbox.Mailbox.add` method for :class:`mailbox."
"Mailbox` objects now accepts binary input."
msgstr ""

# a57d003f40db418da8b4ee65cc40de58
#: whatsnew/3.2.rst:2242
msgid ""
":class:`~io.StringIO` and text file input are deprecated.  Also, string "
"input will fail early if non-ASCII characters are used.  Previously it would "
"fail when the email was processed in a later step."
msgstr ""

# c8c21759e2c747809fb8950ed8dbcd9b
#: whatsnew/3.2.rst:2246
msgid ""
"There is also support for binary output.  The :meth:`~mailbox.Mailbox."
"get_file` method now returns a file in the binary mode (where it used to "
"incorrectly set the file to text-mode).  There is also a new :meth:`~mailbox."
"Mailbox.get_bytes` method that returns a :class:`bytes` representation of a "
"message corresponding to a given *key*."
msgstr ""

# d6946283bd414552952a35f943d6f07f
#: whatsnew/3.2.rst:2252
msgid ""
"It is still possible to get non-binary output using the old API's :meth:"
"`~mailbox.Mailbox.get_string` method, but that approach is not very useful.  "
"Instead, it is best to extract messages from a :class:`~mailbox.Message` "
"object or to load them from binary input."
msgstr ""

# 03f9607b18ed40ebae6412a705385d16
#: whatsnew/3.2.rst:2257
msgid ""
"(Contributed by R. David Murray, with efforts from Steffen Daode Nurpmeso "
"and an initial patch by Victor Stinner in :issue:`9124`.)"
msgstr ""

# 427d5df7dd3a4a8abdff076659c6581f
#: whatsnew/3.2.rst:2261
msgid "turtledemo"
msgstr ""

# 3eff45fd3db54a1191005573aa735bc4
#: whatsnew/3.2.rst:2263
msgid ""
"The demonstration code for the :mod:`turtle` module was moved from the "
"*Demo* directory to main library.  It includes over a dozen sample scripts "
"with lively displays.  Being on :attr:`sys.path`, it can now be run directly "
"from the command-line::"
msgstr ""

# 63b2a5b0de3b4ef0b52a09277206bfaf
#: whatsnew/3.2.rst:2270
msgid ""
"(Moved from the Demo directory by Alexander Belopolsky in :issue:`10199`.)"
msgstr ""

# f5cab42d1bbe451b98d980a1d5b82b68
#: whatsnew/3.2.rst:2273
msgid "Multi-threading"
msgstr "Threads"

# d965524182424ddb8f9924ad2d7b7559
#: whatsnew/3.2.rst:2275
msgid ""
"The mechanism for serializing execution of concurrently running Python "
"threads (generally known as the :term:`GIL` or :term:`Global Interpreter "
"Lock`) has been rewritten.  Among the objectives were more predictable "
"switching intervals and reduced overhead due to lock contention and the "
"number of ensuing system calls.  The notion of a \"check interval\" to allow "
"thread switches has been abandoned and replaced by an absolute duration "
"expressed in seconds.  This parameter is tunable through :func:`sys."
"setswitchinterval()`. It currently defaults to 5 milliseconds."
msgstr ""

# f31537b3f3534a5f8a96038a791c1ebc
#: whatsnew/3.2.rst:2284
msgid ""
"Additional details about the implementation can be read from a `python-dev "
"mailing-list message <http://mail.python.org/pipermail/python-dev/2009-"
"October/093321.html>`_ (however, \"priority requests\" as exposed in this "
"message have not been kept for inclusion)."
msgstr ""

# 100835e93b674e9399715f59c394198f
#: whatsnew/3.2.rst:2292
msgid ""
"Regular and recursive locks now accept an optional *timeout* argument to "
"their :meth:`~threading.Lock.acquire` method.  (Contributed by Antoine "
"Pitrou; :issue:`7316`.)"
msgstr ""
"Les verrous standards et récursifs acceptent désormais un argument optionnel "
"*timeout* à leur méthode ``acquire``. (Contribution par Antoine Pitrou; :"
"issue:`7316`). Pareillement, :meth:`threading.Semaphore.acquire` acquière "
"d'un argument *timeout* (Contribution par Torsten Landschoff; :issue:"
"`850728`)."

# 377faabaf1d942beb16662ebe3399911
#: whatsnew/3.2.rst:2296
msgid ""
"Similarly, :meth:`threading.Semaphore.acquire` also gained a *timeout* "
"argument.  (Contributed by Torsten Landschoff; :issue:`850728`.)"
msgstr ""
"Les verrous standards et récursifs acceptent désormais un argument optionnel "
"*timeout* à leur méthode ``acquire``. (Contribution par Antoine Pitrou; :"
"issue:`7316`). Pareillement, :meth:`threading.Semaphore.acquire` acquière "
"d'un argument *timeout* (Contribution par Torsten Landschoff; :issue:"
"`850728`)."

# f8b6a3ea5af143e59ced45a42da83807
#: whatsnew/3.2.rst:2299
msgid ""
"Regular and recursive lock acquisitions can now be interrupted by signals on "
"platforms using Pthreads.  This means that Python programs that deadlock "
"while acquiring locks can be successfully killed by repeatedly sending "
"SIGINT to the process (by pressing :kbd:`Ctrl+C` in most shells). "
"(Contributed by Reid Kleckner; :issue:`8844`.)"
msgstr ""

# d8c9179dd17a49b3866846d1e401a767
#: whatsnew/3.2.rst:2309
msgid "A number of small performance enhancements have been added:"
msgstr ""

# ecde5fcca94249a0ac4a809cd82fe3b6
#: whatsnew/3.2.rst:2311
msgid ""
"Python's peephole optimizer now recognizes patterns such ``x in {1, 2, 3}`` "
"as being a test for membership in a set of constants.  The optimizer recasts "
"the :class:`set` as a :class:`frozenset` and stores the pre-built constant."
msgstr ""

# 437695fccbee4dd6bc2453fa632f0f97
#: whatsnew/3.2.rst:2315
msgid ""
"Now that the speed penalty is gone, it is practical to start writing "
"membership tests using set-notation.  This style is both semantically clear "
"and operationally fast::"
msgstr ""

# 316ab388f611434ca000c34db9af6a3e
#: whatsnew/3.2.rst:2323
msgid ""
"(Patch and additional tests contributed by Dave Malcolm; :issue:`6690`)."
msgstr ""

# b5575b75f2a44dacb77ce21ba8ac4fd9
#: whatsnew/3.2.rst:2325
msgid ""
"Serializing and unserializing data using the :mod:`pickle` module is now "
"several times faster."
msgstr ""

# 3b6cfdefe65542da80fca3a61f85c2bf
#: whatsnew/3.2.rst:2328
msgid ""
"(Contributed by Alexandre Vassalotti, Antoine Pitrou and the Unladen Swallow "
"team in :issue:`9410` and :issue:`3873`.)"
msgstr ""

# 4bf3329715134873bb562ff102bcea1a
#: whatsnew/3.2.rst:2331
msgid ""
"The `Timsort algorithm <http://en.wikipedia.org/wiki/Timsort>`_ used in :"
"meth:`list.sort` and :func:`sorted` now runs faster and uses less memory "
"when called with a :term:`key function`.  Previously, every element of a "
"list was wrapped with a temporary object that remembered the key value "
"associated with each element.  Now, two arrays of keys and values are sorted "
"in parallel.  This saves the memory consumed by the sort wrappers, and it "
"saves time lost to delegating comparisons."
msgstr ""

# 64532755084348828cab0c983b45425d
#: whatsnew/3.2.rst:2339
msgid "(Patch by Daniel Stutzbach in :issue:`9915`.)"
msgstr ""

# 7d5bc4c260c14db8b842a6d0cc2eac98
#: whatsnew/3.2.rst:2341
msgid ""
"JSON decoding performance is improved and memory consumption is reduced "
"whenever the same string is repeated for multiple keys.  Also, JSON encoding "
"now uses the C speedups when the ``sort_keys`` argument is true."
msgstr ""

# ab6fc1b5a0b549e989064086832ceec1
#: whatsnew/3.2.rst:2345
msgid ""
"(Contributed by Antoine Pitrou in :issue:`7451` and by Raymond Hettinger and "
"Antoine Pitrou in :issue:`10314`.)"
msgstr ""

# fb586fa238b146eaa50545f44126715c
#: whatsnew/3.2.rst:2348
msgid ""
"Recursive locks (created with the :func:`threading.RLock` API) now benefit "
"from a C implementation which makes them as fast as regular locks, and "
"between 10x and 15x faster than their previous pure Python implementation."
msgstr ""

# c205e4a13c5c492c9d895e0980a44480
#: whatsnew/3.2.rst:2352
msgid "(Contributed by Antoine Pitrou; :issue:`3001`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# ad8f615a64e34d56b2ecd158731f46df
#: whatsnew/3.2.rst:2354
msgid ""
"The fast-search algorithm in stringlib is now used by the :meth:`split`, :"
"meth:`splitlines` and :meth:`replace` methods on :class:`bytes`, :class:"
"`bytearray` and :class:`str` objects. Likewise, the algorithm is also used "
"by :meth:`rfind`, :meth:`rindex`, :meth:`rsplit` and :meth:`rpartition`."
msgstr ""

# f28949b3a0a5415089d26f6e77bfe6f6
#: whatsnew/3.2.rst:2360
msgid "(Patch by Florent Xicluna in :issue:`7622` and :issue:`7462`.)"
msgstr ""

# 1725bb3106464ddbb6eae4f27662ea0c
#: whatsnew/3.2.rst:2363
msgid ""
"Integer to string conversions now work two \"digits\" at a time, reducing "
"the number of division and modulo operations."
msgstr ""

# 90e023a2d6174d4e9466b13bdd6bb13b
#: whatsnew/3.2.rst:2366
msgid "(:issue:`6713` by Gawain Bolton, Mark Dickinson, and Victor Stinner.)"
msgstr ""

# ff9bf0c5de0c4238a27176f456a8b9da
#: whatsnew/3.2.rst:2368
msgid ""
"There were several other minor optimizations. Set differencing now runs "
"faster when one operand is much larger than the other (patch by Andress "
"Bennetts in :issue:`8685`).  The :meth:`array.repeat` method has a faster "
"implementation (:issue:`1569291` by Alexander Belopolsky). The :class:"
"`BaseHTTPRequestHandler` has more efficient buffering (:issue:`3709` by "
"Andrew Schaaf).  The :func:`operator.attrgetter` function has been sped-up (:"
"issue:`10160` by Christos Georgiou).  And :class:`ConfigParser` loads multi-"
"line arguments a bit faster (:issue:`7113` by Łukasz Langa)."
msgstr ""

# f3dab2ab7d874bdf8bb97f9798326eea
#: whatsnew/3.2.rst:2381
msgid ""
"Python has been updated to `Unicode 6.0.0 <http://unicode.org/versions/"
"Unicode6.0.0/>`_.  The update to the standard adds over 2,000 new characters "
"including `emoji <http://en.wikipedia.org/wiki/Emoji>`_ symbols which are "
"important for mobile phones."
msgstr ""

# 2bfec39f53984f7baa958a64b42e0604
#: whatsnew/3.2.rst:2386
msgid ""
"In addition, the updated standard has altered the character properties for "
"two Kannada characters (U+0CF1, U+0CF2) and one New Tai Lue numeric "
"character (U+19DA), making the former eligible for use in identifiers while "
"disqualifying the latter.  For more information, see `Unicode Character "
"Database Changes <http://www.unicode.org/versions/Unicode6.0.0/"
"#Database_Changes>`_."
msgstr ""

# 7d49439de465485c80e5a7a516b7a63e
#: whatsnew/3.2.rst:2394
msgid "Codecs"
msgstr ""

# 7246ba45cdc94456a431a5cec41567b8
#: whatsnew/3.2.rst:2396
msgid "Support was added for *cp720* Arabic DOS encoding (:issue:`1616979`)."
msgstr ""

# b9cde076c6874a638500b20a86692718
#: whatsnew/3.2.rst:2398
msgid ""
"MBCS encoding no longer ignores the error handler argument. In the default "
"strict mode, it raises an :exc:`UnicodeDecodeError` when it encounters an "
"undecodable byte sequence and an :exc:`UnicodeEncodeError` for an "
"unencodable character."
msgstr ""

# 5bbe925531aa46c9bf96d4f6204a4d7c
#: whatsnew/3.2.rst:2403
msgid ""
"The MBCS codec supports ``'strict'`` and ``'ignore'`` error handlers for "
"decoding, and ``'strict'`` and ``'replace'`` for encoding."
msgstr ""

# adbfb799d59b45469b6ddfdfafc147da
#: whatsnew/3.2.rst:2406
msgid ""
"To emulate Python3.1 MBCS encoding, select the ``'ignore'`` handler for "
"decoding and the ``'replace'`` handler for encoding."
msgstr ""

# 28554c2a4e5d4290b7e4050f15e73412
#: whatsnew/3.2.rst:2409
msgid ""
"On Mac OS X, Python decodes command line arguments with ``'utf-8'`` rather "
"than the locale encoding."
msgstr ""

# 2b7bcf24203c4956bcf95cccbcc7937c
#: whatsnew/3.2.rst:2412
msgid ""
"By default, :mod:`tarfile` uses ``'utf-8'`` encoding on Windows (instead of "
"``'mbcs'``) and the ``'surrogateescape'`` error handler on all operating "
"systems."
msgstr ""

# 4b01214bc4e74de89c441d3ea58369c7
#: whatsnew/3.2.rst:2418
msgid "Documentation"
msgstr ""

# f890df7e51b9429097203e1f829bcf08
#: whatsnew/3.2.rst:2420
msgid "The documentation continues to be improved."
msgstr ""

# b73dceb4a54947c9bde889bc49726db5
#: whatsnew/3.2.rst:2422
msgid ""
"A table of quick links has been added to the top of lengthy sections such "
"as :ref:`built-in-funcs`.  In the case of :mod:`itertools`, the links are "
"accompanied by tables of cheatsheet-style summaries to provide an overview "
"and memory jog without having to read all of the docs."
msgstr ""

# f1efc6e0a84e4314904c669f179eecfc
#: whatsnew/3.2.rst:2427
msgid ""
"In some cases, the pure Python source code can be a helpful adjunct to the "
"documentation, so now many modules now feature quick links to the latest "
"version of the source code.  For example, the :mod:`functools` module "
"documentation has a quick link at the top labeled:"
msgstr ""

# b372dec31aea45f7bf27c6f78d9e6a30
#: whatsnew/3.2.rst:2432
msgid "**Source code** :source:`Lib/functools.py`."
msgstr ""

# 9a43759d33f94ba0b6770cfdb23100d9
#: whatsnew/3.2.rst:2434
msgid ""
"(Contributed by Raymond Hettinger; see `rationale <http://rhettinger."
"wordpress.com/2011/01/28/open-your-source-more/>`_.)"
msgstr ""

# deb97c2a6bf34ed1bb8e774067b30f6d
#: whatsnew/3.2.rst:2437
msgid ""
"The docs now contain more examples and recipes.  In particular, :mod:`re` "
"module has an extensive section, :ref:`re-examples`.  Likewise, the :mod:"
"`itertools` module continues to be updated with new :ref:`itertools-recipes`."
msgstr ""

# 00c45916e0b14940b39586e3da7fbfde
#: whatsnew/3.2.rst:2442
msgid ""
"The :mod:`datetime` module now has an auxiliary implementation in pure "
"Python. No functionality was changed.  This just provides an easier-to-read "
"alternate implementation."
msgstr ""

# 8c207a8c996c4ed89a745e2da3242a5c
#: whatsnew/3.2.rst:2446
msgid "(Contributed by Alexander Belopolsky in :issue:`9528`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 7cb114f2b3a94f3dae79ab6f4a2cca43
#: whatsnew/3.2.rst:2448
msgid ""
"The unmaintained :file:`Demo` directory has been removed.  Some demos were "
"integrated into the documentation, some were moved to the :file:`Tools/demo` "
"directory, and others were removed altogether."
msgstr ""

# cceb968fce4a42369f51eb41b84fe45f
#: whatsnew/3.2.rst:2452
msgid "(Contributed by Georg Brandl in :issue:`7962`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 3c078a42802a41e6b821b9c9ead45ef7
#: whatsnew/3.2.rst:2458
msgid ""
"The format menu now has an option to clean source files by stripping "
"trailing whitespace."
msgstr ""

# fe24c445d4ff416b858eb7644e16b1fa
#: whatsnew/3.2.rst:2461
msgid "(Contributed by Raymond Hettinger; :issue:`5150`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 290e4b09f7e84224a4d4f09c6ebd1e4e
#: whatsnew/3.2.rst:2463
msgid "IDLE on Mac OS X now works with both Carbon AquaTk and Cocoa AquaTk."
msgstr ""

# 6bbb17c3dcd84c3c847f72f50a442a2e
#: whatsnew/3.2.rst:2465
msgid ""
"(Contributed by Kevin Walzer, Ned Deily, and Ronald Oussoren; :issue:`6075`.)"
msgstr ""

# c7654084d0a04366950134c1df49fc19
#: whatsnew/3.2.rst:2468
msgid "Code Repository"
msgstr ""

# 210e52ba137f4101a5c2a50e2a1599b1
#: whatsnew/3.2.rst:2470
msgid ""
"In addition to the existing Subversion code repository at http://svn.python."
"org there is now a `Mercurial <http://mercurial.selenic.com/>`_ repository "
"at http://hg.python.org/\\."
msgstr ""

# 242a200e4e254aa2b0c5ff5ec012776f
#: whatsnew/3.2.rst:2474
msgid ""
"After the 3.2 release, there are plans to switch to Mercurial as the primary "
"repository.  This distributed version control system should make it easier "
"for members of the community to create and share external changesets.  See :"
"pep:`385` for details."
msgstr ""

# 4a2ec4c4daae496a9ba095897f8a9376
#: whatsnew/3.2.rst:2479
msgid ""
"To learn the new version control system, see the `tutorial by Joel Spolsky "
"<http://hginit.com>`_ or the `Guide to Mercurial Workflows <http://mercurial."
"selenic.com/guide/>`_."
msgstr ""

# a1ec46d41d25410eac014be97cb49383
#: whatsnew/3.2.rst:2489
msgid ""
"The *idle*, *pydoc* and *2to3* scripts are now installed with a version-"
"specific suffix on ``make altinstall`` (:issue:`10679`)."
msgstr ""

# c710ba39a08a468d91cdf0886ac01786
#: whatsnew/3.2.rst:2492
msgid ""
"The C functions that access the Unicode Database now accept and return "
"characters from the full Unicode range, even on narrow unicode builds "
"(Py_UNICODE_TOLOWER, Py_UNICODE_ISDECIMAL, and others).  A visible "
"difference in Python is that :func:`unicodedata.numeric` now returns the "
"correct value for large code points, and :func:`repr` may consider more "
"characters as printable."
msgstr ""

# 231a9a91e9b2499e888dbb5706066166
#: whatsnew/3.2.rst:2499
msgid ""
"(Reported by Bupjoe Lee and fixed by Amaury Forgeot D'Arc; :issue:`5127`.)"
msgstr ""

# 4d51496971334870b05ff5a6a6dcd559
#: whatsnew/3.2.rst:2501
msgid ""
"Computed gotos are now enabled by default on supported compilers (which are "
"detected by the configure script).  They can still be disabled selectively "
"by specifying ``--without-computed-gotos``."
msgstr ""

# e68c3c7b8d1745bd87a24fb5a61d8201
#: whatsnew/3.2.rst:2505
msgid "(Contributed by Antoine Pitrou; :issue:`9203`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# fd74de86eeaf4d1f9ee1aab0edf186b1
#: whatsnew/3.2.rst:2507
msgid ""
"The option ``--with-wctype-functions`` was removed.  The built-in unicode "
"database is now used for all functions."
msgstr ""

# 7f6f7c05d2fe46cb993af9aeb2782c31
#: whatsnew/3.2.rst:2510
msgid "(Contributed by Amaury Forgeot D'Arc; :issue:`9210`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# dc0cfda0cb614061ab798b52bd1baed6
#: whatsnew/3.2.rst:2512
msgid ""
"Hash values are now values of a new type, :c:type:`Py_hash_t`, which is "
"defined to be the same size as a pointer.  Previously they were of type "
"long, which on some 64-bit operating systems is still only 32 bits long.  As "
"a result of this fix, :class:`set` and :class:`dict` can now hold more than "
"``2**32`` entries on builds with 64-bit pointers (previously, they could "
"grow to that size but their performance degraded catastrophically)."
msgstr ""

# d681b75cb7c84ad1a92c85a439dd8696
#: whatsnew/3.2.rst:2519
msgid ""
"(Suggested by Raymond Hettinger and implemented by Benjamin Peterson; :issue:"
"`9778`.)"
msgstr ""

# f6eefc9ed5394664a9eec6064b592a26
#: whatsnew/3.2.rst:2522
msgid ""
"A new macro :c:macro:`Py_VA_COPY` copies the state of the variable argument "
"list.  It is equivalent to C99 *va_copy* but available on all Python "
"platforms (:issue:`2443`)."
msgstr ""

# 849923a33b084157964d9ff8ed3e8eef
#: whatsnew/3.2.rst:2526
msgid ""
"A new C API function :c:func:`PySys_SetArgvEx` allows an embedded "
"interpreter to set :attr:`sys.argv` without also modifying :attr:`sys.path` "
"(:issue:`5753`)."
msgstr ""

# 0d916dd886c1485097973418c9fc4d27
#: whatsnew/3.2.rst:2530
msgid ""
":c:macro:`PyEval_CallObject` is now only available in macro form.  The "
"function declaration, which was kept for backwards compatibility reasons, is "
"now removed -- the macro was introduced in 1997 (:issue:`8276`)."
msgstr ""

# 32cbf05bc91d4d1293e92d0ab0ab12d4
#: whatsnew/3.2.rst:2534
msgid ""
"There is a new function :c:func:`PyLong_AsLongLongAndOverflow` which is "
"analogous to :c:func:`PyLong_AsLongAndOverflow`.  They both serve to convert "
"Python :class:`int` into a native fixed-width type while providing detection "
"of cases where the conversion won't fit (:issue:`7767`)."
msgstr ""

# 8982ecc7ff4d440a9ca3d83b6bec3add
#: whatsnew/3.2.rst:2539
msgid ""
"The :c:func:`PyUnicode_CompareWithASCIIString` function now returns *not "
"equal* if the Python string is *NUL* terminated."
msgstr ""

# 007f51d35f6a4b9282442586cbd901cf
#: whatsnew/3.2.rst:2542
msgid ""
"There is a new function :c:func:`PyErr_NewExceptionWithDoc` that is like :c:"
"func:`PyErr_NewException` but allows a docstring to be specified. This lets "
"C exceptions have the same self-documenting capabilities as their pure "
"Python counterparts (:issue:`7033`)."
msgstr ""

# f2ddc0b2955d4efe86114800e765cabe
#: whatsnew/3.2.rst:2547
msgid ""
"When compiled with the ``--with-valgrind`` option, the pymalloc allocator "
"will be automatically disabled when running under Valgrind.  This gives "
"improved memory leak detection when running under Valgrind, while taking "
"advantage of pymalloc at other times (:issue:`2422`)."
msgstr ""

# 7bb686abf45f461f99a71014bce06346
#: whatsnew/3.2.rst:2552
msgid ""
"Removed the ``O?`` format from the *PyArg_Parse* functions.  The format is "
"no longer used and it had never been documented (:issue:`8837`)."
msgstr ""

# 8c020450d33545e6823f0307278074af
#: whatsnew/3.2.rst:2555
msgid ""
"There were a number of other small changes to the C-API.  See the :source:"
"`Misc/NEWS` file for a complete list."
msgstr ""

# 194ed3c3bbc1455d924ff2dd3c969ff5
#: whatsnew/3.2.rst:2558
msgid ""
"Also, there were a number of updates to the Mac OS X build, see :source:`Mac/"
"BuildScript/README.txt` for details.  For users running a 32/64-bit build, "
"there is a known problem with the default Tcl/Tk on Mac OS X 10.6. "
"Accordingly, we recommend installing an updated alternative such as "
"`ActiveState Tcl/Tk 8.5.9 <http://www.activestate.com/activetcl/downloads>`_"
"\\. See http://www.python.org/download/mac/tcltk/ for additional details."
msgstr ""

# f0b75fa8712a422da747e0ac0d27c94d
#: whatsnew/3.2.rst:2566
msgid "Porting to Python 3.2"
msgstr "Portage vers Python 3.2"

# 3874116f827e4d55b35a64ca8f5f9885
#: whatsnew/3.2.rst:2571
msgid ""
"The :mod:`configparser` module has a number of clean-ups.  The major change "
"is to replace the old :class:`ConfigParser` class with long-standing "
"preferred alternative :class:`SafeConfigParser`.  In addition there are a "
"number of smaller incompatibilities:"
msgstr ""

# 55d488d0fe8e431cb51bdf4d5573f505
#: whatsnew/3.2.rst:2576
msgid ""
"The interpolation syntax is now validated on :meth:`~configparser."
"ConfigParser.get` and :meth:`~configparser.ConfigParser.set` operations. In "
"the default interpolation scheme, only two tokens with percent signs are "
"valid: ``%(name)s`` and ``%%``, the latter being an escaped percent sign."
msgstr ""

# 5522c7ca986645c7a993d7dda31c7b03
#: whatsnew/3.2.rst:2582
msgid ""
"The :meth:`~configparser.ConfigParser.set` and :meth:`~configparser."
"ConfigParser.add_section` methods now verify that values are actual "
"strings.  Formerly, unsupported types could be introduced unintentionally."
msgstr ""

# 3c5fbce097ad44fc98322fc96d673e4c
#: whatsnew/3.2.rst:2587
msgid ""
"Duplicate sections or options from a single source now raise either :exc:"
"`~configparser.DuplicateSectionError` or :exc:`~configparser."
"DuplicateOptionError`.  Formerly, duplicates would silently overwrite a "
"previous entry."
msgstr ""

# 3158c37843da47cfb667371e7a7c2502
#: whatsnew/3.2.rst:2592
msgid ""
"Inline comments are now disabled by default so now the **;** character can "
"be safely used in values."
msgstr ""

# b2fd59e2816545c4b1db912ab05e26ef
#: whatsnew/3.2.rst:2595
msgid ""
"Comments now can be indented.  Consequently, for **;** or **#** to appear at "
"the start of a line in multiline values, it has to be interpolated.  This "
"keeps comment prefix characters in values from being mistaken as comments."
msgstr ""

# ec9eccca0ec7489cb764a145c1128ae0
#: whatsnew/3.2.rst:2599
msgid ""
"``\"\"`` is now a valid value and is no longer automatically converted to an "
"empty string. For empty strings, use ``\"option =\"`` in a line."
msgstr ""

# 44caff833c06456caf1dae680accc463
#: whatsnew/3.2.rst:2602
msgid ""
"The :mod:`nntplib` module was reworked extensively, meaning that its APIs "
"are often incompatible with the 3.1 APIs."
msgstr ""

# 96b9d248c5704948acd729fa0ad448aa
#: whatsnew/3.2.rst:2605
msgid ""
":class:`bytearray` objects can no longer be used as filenames; instead, they "
"should be converted to :class:`bytes`."
msgstr ""
"Les objets bytearray ne peuvent plus être utilisés en tant que nom de "
"fichiers : les convertir en octets"

# 1ef32477b1484ab5a0d066840e8f2476
#: whatsnew/3.2.rst:2608
msgid ""
"The :meth:`array.tostring` and :meth:`array.fromstring` have been renamed "
"to :meth:`array.tobytes` and :meth:`array.frombytes` for clarity.  The old "
"names have been deprecated. (See :issue:`8990`.)"
msgstr ""

# 72b8043842904345839b5ad6f78fe9bd
#: whatsnew/3.2.rst:2612
msgid "``PyArg_Parse*()`` functions:"
msgstr "Les fonctions PyArg_Parse*() :"

# 6c1d6ff6074e42c383b6790c253f27ec
#: whatsnew/3.2.rst:2614
msgid "\"t#\" format has been removed: use \"s#\" or \"s*\" instead"
msgstr "Le format \"t#\" a été supprimé : utiliser \"s#\" ou \"s*\" à la place"

# 0e6177560b8a4ae59d8a1d0e6e424542
#: whatsnew/3.2.rst:2615
msgid "\"w\" and \"w#\" formats has been removed: use \"w*\" instead"
msgstr ""
"Les formats \"w\" et \"w#\" ont été supprimés : utiliser \"w*\" à la place"

# 29efd93ff65c421da29c537936890072
#: whatsnew/3.2.rst:2617
msgid ""
"The :c:type:`PyCObject` type, deprecated in 3.1, has been removed.  To wrap "
"opaque C pointers in Python objects, the :c:type:`PyCapsule` API should be "
"used instead; the new type has a well-defined interface for passing typing "
"safety information and a less complicated signature for calling a destructor."
msgstr ""

# 32e9ced90a8f486a99114a6496fd56f2
#: whatsnew/3.2.rst:2622
msgid ""
"The :func:`sys.setfilesystemencoding` function was removed because it had a "
"flawed design."
msgstr ""

# f9a4d509b5124616b00435020a27dde6
#: whatsnew/3.2.rst:2625
msgid ""
"The :func:`random.seed` function and method now salt string seeds with an "
"sha512 hash function.  To access the previous version of *seed* in order to "
"reproduce Python 3.1 sequences, set the *version* argument to *1*, ``random."
"seed(s, version=1)``."
msgstr ""

# 743f6bd17bf9455daa69abbedcea7298
#: whatsnew/3.2.rst:2630
msgid ""
"The previously deprecated :func:`string.maketrans` function has been removed "
"in favor of the static methods :meth:`bytes.maketrans` and :meth:`bytearray."
"maketrans`.  This change solves the confusion around which types were "
"supported by the :mod:`string` module.  Now, :class:`str`, :class:`bytes`, "
"and :class:`bytearray` each have their own **maketrans** and **translate** "
"methods with intermediate translation tables of the appropriate type."
msgstr ""

# 9882bbf4b8304169b68f81e7557144bc
#: whatsnew/3.2.rst:2640
msgid ""
"The previously deprecated :func:`contextlib.nested` function has been "
"removed in favor of a plain :keyword:`with` statement which can accept "
"multiple context managers.  The latter technique is faster (because it is "
"built-in), and it does a better job finalizing multiple context managers "
"when one of them raises an exception::"
msgstr ""

# 8bcb1649c4824a51bdc8edd266a677a1
#: whatsnew/3.2.rst:2654
msgid ""
":func:`struct.pack` now only allows bytes for the ``s`` string pack code. "
"Formerly, it would accept text arguments and implicitly encode them to bytes "
"using UTF-8.  This was problematic because it made assumptions about the "
"correct encoding and because a variable-length encoding can fail when "
"writing to fixed length segment of a structure."
msgstr ""

# 672bb1712dd14ab18e03dffb43252fef
#: whatsnew/3.2.rst:2660
msgid ""
"Code such as ``struct.pack('<6sHHBBB', 'GIF87a', x, y)`` should be rewritten "
"with to use bytes instead of text, ``struct.pack('<6sHHBBB', b'GIF87a', x, "
"y)``."
msgstr ""

# 2b9d99374d114b37959b05f3063d80a0
#: whatsnew/3.2.rst:2663
msgid ""
"(Discovered by David Beazley and fixed by Victor Stinner; :issue:`10783`.)"
msgstr ""

# 7e04da32b0cf410ab10a636dbca97565
#: whatsnew/3.2.rst:2665
msgid ""
"The :class:`xml.etree.ElementTree` class now raises an :exc:`xml.etree."
"ElementTree.ParseError` when a parse fails. Previously it raised a :exc:`xml."
"parsers.expat.ExpatError`."
msgstr ""

# fd707fe307054e799e3c6cf3a3454b25
#: whatsnew/3.2.rst:2669
msgid ""
"The new, longer :func:`str` value on floats may break doctests which rely on "
"the old output format."
msgstr ""

# 8e72f2a84cc24ccda8c6c4f901c78d3b
#: whatsnew/3.2.rst:2672
msgid ""
"In :class:`subprocess.Popen`, the default value for *close_fds* is now "
"``True`` under Unix; under Windows, it is ``True`` if the three standard "
"streams are set to ``None``, ``False`` otherwise.  Previously, *close_fds* "
"was always ``False`` by default, which produced difficult to solve bugs or "
"race conditions when open file descriptors would leak into the child process."
msgstr ""

# b741934a638746d3af3e1c1a7e1c2418
#: whatsnew/3.2.rst:2679
msgid ""
"Support for legacy HTTP 0.9 has been removed from :mod:`urllib.request` and :"
"mod:`http.client`.  Such support is still present on the server side (in :"
"mod:`http.server`)."
msgstr ""

# 28c2873cfa6c40f995ede404f4847674
#: whatsnew/3.2.rst:2683
msgid "(Contributed by Antoine Pitrou, :issue:`10711`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 1ace0c3154c847cd810166b87165257c
#: whatsnew/3.2.rst:2685
msgid ""
"SSL sockets in timeout mode now raise :exc:`socket.timeout` when a timeout "
"occurs, rather than a generic :exc:`~ssl.SSLError`."
msgstr ""

# fb288201f5d14651869373b0d1ea9a01
#: whatsnew/3.2.rst:2688
msgid "(Contributed by Antoine Pitrou, :issue:`10272`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 65db3d7261ef469fad979f12192b7d4b
#: whatsnew/3.2.rst:2690
msgid ""
"The misleading functions :c:func:`PyEval_AcquireLock()` and :c:func:"
"`PyEval_ReleaseLock()` have been officially deprecated.  The thread-state "
"aware APIs (such as :c:func:`PyEval_SaveThread()` and :c:func:"
"`PyEval_RestoreThread()`) should be used instead."
msgstr ""

# c63061bdebe14d09bddf1c74d7fb67dc
#: whatsnew/3.2.rst:2695
msgid ""
"Due to security risks, :func:`asyncore.handle_accept` has been deprecated, "
"and a new function, :func:`asyncore.handle_accepted`, was added to replace "
"it."
msgstr ""

# a0ad060d1c6541e58440081b4102fc07
#: whatsnew/3.2.rst:2698
msgid "(Contributed by Giampaolo Rodola in :issue:`6706`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

# 76151d4d74184d69806ff6c2f03bdd47
#: whatsnew/3.2.rst:2700
msgid ""
"Due to the new :term:`GIL` implementation, :c:func:`PyEval_InitThreads()` "
"cannot be called before :c:func:`Py_Initialize()` anymore."
msgstr ""

# 9b8ea0c81c1640c0bad4cf6f3915cba0
#: whatsnew/index.rst:5
msgid "What's New in Python"
msgstr "Quoi de neuf dans Python"

# ffdd4a897ce14c0ba2d0d8c456ebc343
#: whatsnew/index.rst:7
msgid ""
"The \"What's New in Python\" series of essays takes tours through the most "
"important changes between major Python versions.  They are a \"must read\" "
"for anyone wishing to stay up-to-date after a new release."
msgstr ""
"La série d'essais \"Quoi de neuf dans Python\" reprend les plus importants "
"changements entres les versions majeures de Python. Elles sont à lire pour "
"quiconque souhaitant être à jour suite à une nouvelle sortie."
