# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2015, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-12-20 13:09\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

# 31518bd37bb544938528708d3a43fabc
#: c-api/abstract.rst:7
msgid "Abstract Objects Layer"
msgstr ""

# f9ffd3d07907479b8a30284fc7a0c9b6
#: c-api/abstract.rst:9
msgid ""
"The functions in this chapter interact with Python objects regardless of "
"their type, or with wide classes of object types (e.g. all numerical types, "
"or all sequence types).  When used on object types for which they do not "
"apply, they will raise a Python exception."
msgstr ""

# 52cf71a24f54424cbaa408f9cc4bcf57
#: c-api/abstract.rst:14
msgid ""
"It is not possible to use these functions on objects that are not properly "
"initialized, such as a list object that has been created by :c:func:"
"`PyList_New`, but whose items have not been set to some non-\\ ``NULL`` "
"value yet."
msgstr ""

# 8716e589af2a4ed5af0ddab544612017
#: c-api/allocation.rst:6
msgid "Allocating Objects on the Heap"
msgstr ""

# 335af554c4584671883eff3231946728
#: c-api/allocation.rst:17
msgid ""
"Initialize a newly-allocated object *op* with its type and initial "
"reference.  Returns the initialized object.  If *type* indicates that the "
"object participates in the cyclic garbage detector, it is added to the "
"detector's set of observed objects. Other fields of the object are not "
"affected."
msgstr ""

# 4e58dd4c32b144319645ca34d49ba9ee
#: c-api/allocation.rst:26
msgid ""
"This does everything :c:func:`PyObject_Init` does, and also initializes the "
"length information for a variable-size object."
msgstr ""

# 25be56a2f53d4f04a1753da9698e29c3
#: c-api/allocation.rst:32
msgid ""
"Allocate a new Python object using the C structure type *TYPE* and the "
"Python type object *type*.  Fields not defined by the Python object header "
"are not initialized; the object's reference count will be one.  The size of "
"the memory allocation is determined from the :attr:`tp_basicsize` field of "
"the type object."
msgstr ""

# 609d83269e9a49518d988691309c0b85
#: c-api/allocation.rst:41
msgid ""
"Allocate a new Python object using the C structure type *TYPE* and the "
"Python type object *type*.  Fields not defined by the Python object header "
"are not initialized.  The allocated memory allows for the *TYPE* structure "
"plus *size* fields of the size given by the :attr:`tp_itemsize` field of "
"*type*.  This is useful for implementing objects like tuples, which are able "
"to determine their size at construction time.  Embedding the array of fields "
"into the same allocation decreases the number of allocations, improving the "
"memory management efficiency."
msgstr ""

# 3de65389046f4985b75f4a8082810999
#: c-api/allocation.rst:53
msgid ""
"Releases memory allocated to an object using :c:func:`PyObject_New` or :c:"
"func:`PyObject_NewVar`.  This is normally called from the :attr:`tp_dealloc` "
"handler specified in the object's type.  The fields of the object should not "
"be accessed after this call as the memory is no longer a valid Python object."
msgstr ""

# 7fa9c47e95bc4367bbb448858a5fbf73
#: c-api/allocation.rst:62
msgid ""
"Object which is visible in Python as ``None``.  This should only be accessed "
"using the :c:macro:`Py_None` macro, which evaluates to a pointer to this "
"object."
msgstr ""

# 39632b6ad3bd4d729e48579b533ffb0a
#: c-api/allocation.rst:69
msgid ":c:func:`PyModule_Create`"
msgstr ""

# edc6b99b5dfb499094e906e45ae50f53
#: c-api/allocation.rst:70
msgid "To allocate and create extension modules."
msgstr ""

# 9bc94c7a607643d39dbf22e59fc5781a
#: c-api/arg.rst:6
msgid "Parsing arguments and building values"
msgstr ""

# fb561b4542984d08a012a3bec0029b62
#: c-api/arg.rst:8
msgid ""
"These functions are useful when creating your own extensions functions and "
"methods.  Additional information and examples are available in :ref:"
"`extending-index`."
msgstr ""

# 56bccd900f764874807a5e2986d810c8
#: c-api/arg.rst:12
msgid ""
"The first three of these functions described, :c:func:`PyArg_ParseTuple`, :c:"
"func:`PyArg_ParseTupleAndKeywords`, and :c:func:`PyArg_Parse`, all use "
"*format strings* which are used to tell the function about the expected "
"arguments.  The format strings use the same syntax for each of these "
"functions."
msgstr ""

# e0dd94bd0ecb4dd48db57dedde67e8e3
#: c-api/arg.rst:19
msgid "Parsing arguments"
msgstr ""

# dab0b5e62835415b9181b06eadd076b3
#: c-api/arg.rst:21
msgid ""
"A format string consists of zero or more \"format units.\"  A format unit "
"describes one Python object; it is usually a single character or a "
"parenthesized sequence of format units.  With a few exceptions, a format "
"unit that is not a parenthesized sequence normally corresponds to a single "
"address argument to these functions.  In the following description, the "
"quoted form is the format unit; the entry in (round) parentheses is the "
"Python object type that matches the format unit; and the entry in [square] "
"brackets is the type of the C variable(s) whose address should be passed."
msgstr ""

# 3dad61f7428340bd8d0855278efaab70
#: c-api/arg.rst:31
msgid "Strings and buffers"
msgstr ""

# bc8734619d7b4613b383d4b2eeb0fa0a
#: c-api/arg.rst:33
msgid ""
"These formats allow to access an object as a contiguous chunk of memory. You "
"don't have to provide raw storage for the returned unicode or bytes area.  "
"Also, you won't have to release any memory yourself, except with the ``es``, "
"``es#``, ``et`` and ``et#`` formats."
msgstr ""

# f551c67c503a4af5bd91e44c7f6bf894
#: c-api/arg.rst:38
msgid ""
"However, when a :c:type:`Py_buffer` structure gets filled, the underlying "
"buffer is locked so that the caller can subsequently use the buffer even "
"inside a :c:type:`Py_BEGIN_ALLOW_THREADS` block without the risk of mutable "
"data being resized or destroyed.  As a result, **you have to call** :c:func:"
"`PyBuffer_Release` after you have finished processing the data (or in any "
"early abort case)."
msgstr ""

# cb994695bd204812853a6bbd75ded24e
#: c-api/arg.rst:45
msgid "Unless otherwise stated, buffers are not NUL-terminated."
msgstr ""

# f5b53113cf304c188b41b71b42ae6654
#: c-api/arg.rst:48
msgid ""
"For all ``#`` variants of formats (``s#``, ``y#``, etc.), the type of the "
"length argument (int or :c:type:`Py_ssize_t`) is controlled by defining the "
"macro :c:macro:`PY_SSIZE_T_CLEAN` before including :file:`Python.h`.  If the "
"macro was defined, length is a :c:type:`Py_ssize_t` rather than an :c:type:"
"`int`. This behavior will change in a future Python version to only support :"
"c:type:`Py_ssize_t` and drop :c:type:`int` support. It is best to always "
"define :c:macro:`PY_SSIZE_T_CLEAN`."
msgstr ""

# 7025df0e058f4f96b40106463a4da246
#: c-api/arg.rst:70
msgid "``s`` (:class:`str`) [const char \\*]"
msgstr ""

# 797a25555f974fdab5e8b40243c62470
#: c-api/arg.rst:58
msgid ""
"Convert a Unicode object to a C pointer to a character string. A pointer to "
"an existing string is stored in the character pointer variable whose address "
"you pass.  The C string is NUL-terminated. The Python string must not "
"contain embedded NUL bytes; if it does, a :exc:`TypeError` exception is "
"raised. Unicode objects are converted to C strings using ``'utf-8'`` "
"encoding. If this conversion fails, a :exc:`UnicodeError` is raised."
msgstr ""

# 09ad12c755e34541b7504c51d5b7452c
#: c-api/arg.rst:67
msgid ""
"This format does not accept bytes-like objects.  If you want to accept "
"filesystem paths and convert them to C character strings, it is preferable "
"to use the ``O&`` format with :c:func:`PyUnicode_FSConverter` as *converter*."
msgstr ""

# 567ba2b9f3a4401e8feef5715948f7ed
#: c-api/arg.rst:77
msgid ""
"``s*`` (:class:`str`, :class:`bytes`, :class:`bytearray` or buffer "
"compatible object) [Py_buffer]"
msgstr ""

# 74dcc9a9462f4a9e8ef2e01398c9547e
#: c-api/arg.rst:73
msgid ""
"This format accepts Unicode objects as well as objects supporting the buffer "
"protocol. It fills a :c:type:`Py_buffer` structure provided by the caller. "
"In this case the resulting C string may contain embedded NUL bytes. Unicode "
"objects are converted to C strings using ``'utf-8'`` encoding."
msgstr ""

# cf1f0cc9306549b095f525dd0d81c6bc
#: c-api/arg.rst:84
msgid ""
"``s#`` (:class:`str`, :class:`bytes` or read-only buffer compatible object) "
"[const char \\*, int or :c:type:`Py_ssize_t`]"
msgstr ""

# dd55968e5e90409ea6847bfadb33e791
#: c-api/arg.rst:80
msgid ""
"Like ``s*``, except that it doesn't accept mutable buffer-like objects such "
"as :class:`bytearray`.  The result is stored into two C variables, the first "
"one a pointer to a C string, the second one its length. The string may "
"contain embedded null bytes. Unicode objects are converted to C strings "
"using ``'utf-8'`` encoding."
msgstr ""

# 1f42f4c985fa426e9a305d86a0672ffe
#: c-api/arg.rst:88
msgid "``z`` (:class:`str` or ``None``) [const char \\*]"
msgstr ""

# 294e67a4908743f6a1e8b42541a510fa
#: c-api/arg.rst:87
msgid ""
"Like ``s``, but the Python object may also be ``None``, in which case the C "
"pointer is set to *NULL*."
msgstr ""

# c3eaa85ac8bc4a5690c42b2103de5599
#: c-api/arg.rst:92
msgid ""
"``z*`` (:class:`str`, :class:`bytes`, :class:`bytearray`, buffer compatible "
"object or ``None``) [Py_buffer]"
msgstr ""

# edce01c6661f4b40acaaf8bc35c195b1
#: c-api/arg.rst:91
msgid ""
"Like ``s*``, but the Python object may also be ``None``, in which case the "
"``buf`` member of the :c:type:`Py_buffer` structure is set to *NULL*."
msgstr ""

# c733e6d15e8f414b86c0a05a8c274c2b
#: c-api/arg.rst:96
msgid ""
"``z#`` (:class:`str`, :class:`bytes`, read-only buffer compatible object or "
"``None``) [const char \\*, int]"
msgstr ""

# 93d3f3c51d1b4d2a9ed4609734637b2b
#: c-api/arg.rst:95
msgid ""
"Like ``s#``, but the Python object may also be ``None``, in which case the C "
"pointer is set to *NULL*."
msgstr ""

# 647c4654eaa44c928de88bdf0411d6aa
#: c-api/arg.rst:102
msgid "``y`` (:class:`bytes`) [const char \\*]"
msgstr ""

# 60957412acd748ae9e21af4ddcb09139
#: c-api/arg.rst:99
msgid ""
"This format converts a bytes-like object to a C pointer to a character "
"string; it does not accept Unicode objects.  The bytes buffer must not "
"contain embedded NUL bytes; if it does, a :exc:`TypeError` exception is "
"raised."
msgstr ""

# 0715aa86a74b4bc5a3853fab38b27f4b
#: c-api/arg.rst:107
msgid ""
"``y*`` (:class:`bytes`, :class:`bytearray` or buffer compatible object) "
"[Py_buffer]"
msgstr ""

# 6260969302574ba39d23a57dd3db3e7a
#: c-api/arg.rst:105
msgid ""
"This variant on ``s*`` doesn't accept Unicode objects, only objects "
"supporting the buffer protocol.  **This is the recommended way to accept "
"binary data.**"
msgstr ""

# 3dc6ac422c2947288adf8dad0115734f
#: c-api/arg.rst:111
msgid "``y#`` (:class:`bytes`) [const char \\*, int]"
msgstr ""

# 9abe2674efaf4e2086b7351b48eafd91
#: c-api/arg.rst:110
msgid ""
"This variant on ``s#`` doesn't accept Unicode objects, only bytes-like "
"objects."
msgstr ""

# df7fe1e49b8f4a71a7c9f066d6b8975d
#: c-api/arg.rst:116
msgid "``S`` (:class:`bytes`) [PyBytesObject \\*]"
msgstr ""

# b33ee75ef6ff4abf8891a2fef101170f
#: c-api/arg.rst:114
msgid ""
"Requires that the Python object is a :class:`bytes` object, without "
"attempting any conversion.  Raises :exc:`TypeError` if the object is not a "
"bytes object.  The C variable may also be declared as :c:type:`PyObject\\*`."
msgstr ""

# 177efe98851d4763a5a3656156a10f44
#: c-api/arg.rst:121
msgid "``Y`` (:class:`bytearray`) [PyByteArrayObject \\*]"
msgstr ""

# 5eecc25992694062a8e4e750f18e2a56
#: c-api/arg.rst:119
msgid ""
"Requires that the Python object is a :class:`bytearray` object, without "
"attempting any conversion.  Raises :exc:`TypeError` if the object is not a :"
"class:`bytearray` object. The C variable may also be declared as :c:type:"
"`PyObject\\*`."
msgstr ""

# ec70fb41ea2f4b849cfe55fe92804445
# cf3825f4b2834b09aa512558b0ac8136
#: c-api/arg.rst:135 c-api/arg.rst:511
msgid "``u`` (:class:`str`) [Py_UNICODE \\*]"
msgstr ""

# 74a05dba0aa241e991a2911b7cdba039
#: c-api/arg.rst:124
msgid ""
"Convert a Python Unicode object to a C pointer to a NUL-terminated buffer of "
"Unicode characters.  You must pass the address of a :c:type:`Py_UNICODE` "
"pointer variable, which will be filled with the pointer to an existing "
"Unicode buffer.  Please note that the width of a :c:type:`Py_UNICODE` "
"character depends on compilation options (it is either 16 or 32 bits). The "
"Python string must not contain embedded NUL characters; if it does, a :exc:"
"`TypeError` exception is raised."
msgstr ""

# 31ff4044b26c4cbe9dfc0b23657dca95
#: c-api/arg.rst:133
msgid ""
"Since ``u`` doesn't give you back the length of the string, and it may "
"contain embedded NUL characters, it is recommended to use ``u#`` or ``U`` "
"instead."
msgstr ""

# 74f5ed1b8ccd4c48817d26fed8b56e05
# 02122fe4c55147bb9c72aea29bec882d
#: c-api/arg.rst:139 c-api/arg.rst:516
msgid "``u#`` (:class:`str`) [Py_UNICODE \\*, int]"
msgstr ""

# 2519f19ea1a74c18973d1a010d1c9224
#: c-api/arg.rst:138
msgid ""
"This variant on ``u`` stores into two C variables, the first one a pointer "
"to a Unicode data buffer, the second one its length."
msgstr ""

# e79b4acdaee4477586cdf28c4fc482de
#: c-api/arg.rst:143
msgid "``Z`` (:class:`str` or ``None``) [Py_UNICODE \\*]"
msgstr ""

# af26f6334caa49a7a1ddde5943941a36
#: c-api/arg.rst:142
msgid ""
"Like ``u``, but the Python object may also be ``None``, in which case the :c:"
"type:`Py_UNICODE` pointer is set to *NULL*."
msgstr ""

# 8ac202bae5014f25920bea4b81358f0e
#: c-api/arg.rst:147
msgid "``Z#`` (:class:`str` or ``None``) [Py_UNICODE \\*, int]"
msgstr ""

# 3e177aac6e774abd8a38a2e131b71f27
#: c-api/arg.rst:146
msgid ""
"Like ``u#``, but the Python object may also be ``None``, in which case the :"
"c:type:`Py_UNICODE` pointer is set to *NULL*."
msgstr ""

# f4e4efcc25d1458aa551f40421277c19
#: c-api/arg.rst:152
msgid "``U`` (:class:`str`) [PyUnicodeObject \\*]"
msgstr ""

# bcbfa5035eb14806931d7793d5cd1f9e
#: c-api/arg.rst:150
msgid ""
"Requires that the Python object is a Unicode object, without attempting any "
"conversion.  Raises :exc:`TypeError` if the object is not a Unicode object.  "
"The C variable may also be declared as :c:type:`PyObject\\*`."
msgstr ""

# 1ab09d25188f46d1ab562dd0c355e573
#: c-api/arg.rst:158
msgid ""
"``w*`` (:class:`bytearray` or read-write byte-oriented buffer) [Py_buffer]"
msgstr ""

# 63ba8859587c4bdfba7ace4441a9a847
#: c-api/arg.rst:155
msgid ""
"This format accepts any object which implements the read-write buffer "
"interface. It fills a :c:type:`Py_buffer` structure provided by the caller. "
"The buffer may contain embedded null bytes. The caller have to call :c:func:"
"`PyBuffer_Release` when it is done with the buffer."
msgstr ""

# 8bd56e0c5e5a4f00b0377a55a6421732
#: c-api/arg.rst:175
msgid "``es`` (:class:`str`) [const char \\*encoding, char \\*\\*buffer]"
msgstr ""

# dcf44fac03e74d9e883ace2f69103c43
#: c-api/arg.rst:161
msgid ""
"This variant on ``s`` is used for encoding Unicode into a character buffer. "
"It only works for encoded data without embedded NUL bytes."
msgstr ""

# 2b08aadcddc54b0ba73cf595b85bc55b
#: c-api/arg.rst:164
msgid ""
"This format requires two arguments.  The first is only used as input, and "
"must be a :c:type:`const char\\*` which points to the name of an encoding as "
"a NUL-terminated string, or *NULL*, in which case ``'utf-8'`` encoding is "
"used. An exception is raised if the named encoding is not known to Python.  "
"The second argument must be a :c:type:`char\\*\\*`; the value of the pointer "
"it references will be set to a buffer with the contents of the argument "
"text. The text will be encoded in the encoding specified by the first "
"argument."
msgstr ""

# 5f79b35abf934d7683f63008fcf13f89
#: c-api/arg.rst:172
msgid ""
":c:func:`PyArg_ParseTuple` will allocate a buffer of the needed size, copy "
"the encoded data into this buffer and adjust *\\*buffer* to reference the "
"newly allocated storage.  The caller is responsible for calling :c:func:"
"`PyMem_Free` to free the allocated buffer after use."
msgstr ""

# e9574e1d6e88464189b68332fbe1be3a
#: c-api/arg.rst:180
msgid ""
"``et`` (:class:`str`, :class:`bytes` or :class:`bytearray`) [const char "
"\\*encoding, char \\*\\*buffer]"
msgstr ""

# e4e928b0ab6744aabf81a1737ea4db93
#: c-api/arg.rst:178
msgid ""
"Same as ``es`` except that byte string objects are passed through without "
"recoding them.  Instead, the implementation assumes that the byte string "
"object uses the encoding passed in as parameter."
msgstr ""

# 59be06d0bd184237b4b4e41bd6b4fdfe
#: c-api/arg.rst:211
msgid ""
"``es#`` (:class:`str`) [const char \\*encoding, char \\*\\*buffer, int "
"\\*buffer_length]"
msgstr ""

# 15910524fe514c09a5e8fe1808a9cfb3
#: c-api/arg.rst:183
msgid ""
"This variant on ``s#`` is used for encoding Unicode into a character buffer. "
"Unlike the ``es`` format, this variant allows input data which contains NUL "
"characters."
msgstr ""

# 55a12d2ec7af4a65b14bb3a9f88eb402
#: c-api/arg.rst:187
msgid ""
"It requires three arguments.  The first is only used as input, and must be "
"a :c:type:`const char\\*` which points to the name of an encoding as a NUL-"
"terminated string, or *NULL*, in which case ``'utf-8'`` encoding is used. An "
"exception is raised if the named encoding is not known to Python.  The "
"second argument must be a :c:type:`char\\*\\*`; the value of the pointer it "
"references will be set to a buffer with the contents of the argument text. "
"The text will be encoded in the encoding specified by the first argument. "
"The third argument must be a pointer to an integer; the referenced integer "
"will be set to the number of bytes in the output buffer."
msgstr ""

# bebbda5cb33e4c289a996a26a1e9eb07
#: c-api/arg.rst:197
msgid "There are two modes of operation:"
msgstr ""

# 5ce5ee8ee532442386f2b111bbaa9aa8
#: c-api/arg.rst:199
msgid ""
"If *\\*buffer* points a *NULL* pointer, the function will allocate a buffer "
"of the needed size, copy the encoded data into this buffer and set *"
"\\*buffer* to reference the newly allocated storage.  The caller is "
"responsible for calling :c:func:`PyMem_Free` to free the allocated buffer "
"after usage."
msgstr ""

# f61966a2a7c6485ba5594b5a39deaf09
#: c-api/arg.rst:204
msgid ""
"If *\\*buffer* points to a non-*NULL* pointer (an already allocated "
"buffer), :c:func:`PyArg_ParseTuple` will use this location as the buffer and "
"interpret the initial value of *\\*buffer_length* as the buffer size.  It "
"will then copy the encoded data into the buffer and NUL-terminate it.  If "
"the buffer is not large enough, a :exc:`ValueError` will be set."
msgstr ""

# c33170c8071947cea756bb71b938d901
#: c-api/arg.rst:210
msgid ""
"In both cases, *\\*buffer_length* is set to the length of the encoded data "
"without the trailing NUL byte."
msgstr ""

# 3d0209f6d56c45f79335bfb461cc8316
#: c-api/arg.rst:216
msgid ""
"``et#`` (:class:`str`, :class:`bytes` or :class:`bytearray`) [const char "
"\\*encoding, char \\*\\*buffer, int \\*buffer_length]"
msgstr ""

# 34f7a1d9ce2a43e898164dedc0efc9e8
#: c-api/arg.rst:214
msgid ""
"Same as ``es#`` except that byte string objects are passed through without "
"recoding them. Instead, the implementation assumes that the byte string "
"object uses the encoding passed in as parameter."
msgstr ""

# dd10c8310c9c4bef851225779eb9bba2
#: c-api/arg.rst:219
msgid "Numbers"
msgstr ""

# 4e85ce32b0344197ae47911cd9a51267
#: c-api/arg.rst:223
msgid "``b`` (:class:`int`) [unsigned char]"
msgstr ""

# c24b04fe3d0b4c4d9bd37372bb8a33dd
#: c-api/arg.rst:222
msgid ""
"Convert a nonnegative Python integer to an unsigned tiny int, stored in a C :"
"c:type:`unsigned char`."
msgstr ""

# 66f311e6da2a41e48bcf7f0917905c4e
# 3d49ddd104a94f25bfd3411a495e985e
#: c-api/arg.rst:227 c-api/arg.rst:537
msgid "``B`` (:class:`int`) [unsigned char]"
msgstr ""

# ff40bc6fd4d54079b8752cdab40996d4
#: c-api/arg.rst:226
msgid ""
"Convert a Python integer to a tiny int without overflow checking, stored in "
"a C :c:type:`unsigned char`."
msgstr ""

# 4f9ccb54cfdf45a393fe096729ccf9d7
# 6bc7273a173340b08cfe7e5fcf74374d
#: c-api/arg.rst:230 c-api/arg.rst:531
msgid "``h`` (:class:`int`) [short int]"
msgstr ""

# c05f03993d494e33aebb0276a2d55777
#: c-api/arg.rst:230
msgid "Convert a Python integer to a C :c:type:`short int`."
msgstr ""

# a7485ae650e84b1bad5a903939fac666
# 55a4d9a956284c59922c819da1affa75
#: c-api/arg.rst:234 c-api/arg.rst:540
msgid "``H`` (:class:`int`) [unsigned short int]"
msgstr ""

# 9bc43a69476a4f4aa6eadfcc82434100
#: c-api/arg.rst:233
msgid ""
"Convert a Python integer to a C :c:type:`unsigned short int`, without "
"overflow checking."
msgstr ""

# 9e7111ac546c45c5ad4bde5a769cd730
# 8f8beab97d694c4b9d75ddfd2e4a3644
#: c-api/arg.rst:237 c-api/arg.rst:525
msgid "``i`` (:class:`int`) [int]"
msgstr ""

# 93ffbc4928d34e129703b414152b9a72
#: c-api/arg.rst:237
msgid "Convert a Python integer to a plain C :c:type:`int`."
msgstr ""

# 68f6500b364549539e04c46c1ca80729
# 955c6e26356c4ca3a3d4fade4dcd021f
#: c-api/arg.rst:241 c-api/arg.rst:543
msgid "``I`` (:class:`int`) [unsigned int]"
msgstr ""

# aa5b616ffc284861bc7e556d59dce79c
#: c-api/arg.rst:240
msgid ""
"Convert a Python integer to a C :c:type:`unsigned int`, without overflow "
"checking."
msgstr ""

# 6411bb70e648408b946fd0c6f31a1d99
# b97bf4bf6a3d4cb29c39bc25b6cedfda
#: c-api/arg.rst:244 c-api/arg.rst:534
msgid "``l`` (:class:`int`) [long int]"
msgstr ""

# e1cad4428f714526abf6f145a7fba2f0
#: c-api/arg.rst:244
msgid "Convert a Python integer to a C :c:type:`long int`."
msgstr ""

# 29c42b90ff984e2bba6f07ac085b8a04
# b8d061e9297f44959bdc72372110ff33
#: c-api/arg.rst:248 c-api/arg.rst:546
msgid "``k`` (:class:`int`) [unsigned long]"
msgstr ""

# fce9855e9b5447b69db46f007d0af074
#: c-api/arg.rst:247
msgid ""
"Convert a Python integer to a C :c:type:`unsigned long` without overflow "
"checking."
msgstr ""

# 0a2b78e5cb6449c39c74ad10474d3bb5
# fc623b0bf41a4a2c9cbb9d18d1a2766c
#: c-api/arg.rst:253 c-api/arg.rst:551
msgid "``L`` (:class:`int`) [PY_LONG_LONG]"
msgstr ""

# f49fef9e74c44b829e52b45196816199
#: c-api/arg.rst:251
msgid ""
"Convert a Python integer to a C :c:type:`long long`.  This format is only "
"available on platforms that support :c:type:`long long` (or :c:type:`_int64` "
"on Windows)."
msgstr ""

# 232c3690987e4c478c39e1735b934fff
# 93ac9952a9e94856a551ba4a3e0f71cf
#: c-api/arg.rst:258 c-api/arg.rst:556
msgid "``K`` (:class:`int`) [unsigned PY_LONG_LONG]"
msgstr ""

# ba1d5fb823b44016a651fa01bc6c45de
#: c-api/arg.rst:256
msgid ""
"Convert a Python integer to a C :c:type:`unsigned long long` without "
"overflow checking.  This format is only available on platforms that support :"
"c:type:`unsigned long long` (or :c:type:`unsigned _int64` on Windows)."
msgstr ""

# a784a58d242441d6903c695cbc6d7863
# 47e45aa8739541128a2055ecf0478dab
#: c-api/arg.rst:261 c-api/arg.rst:559
msgid "``n`` (:class:`int`) [Py_ssize_t]"
msgstr ""

# 55254f5139824b14b0b9386e4417e86a
#: c-api/arg.rst:261
msgid "Convert a Python integer to a C :c:type:`Py_ssize_t`."
msgstr ""

# 383b3c9690a34d1284a25e73f187d5e2
# 87fb74c0804741eb90e719b3842151bc
#: c-api/arg.rst:265 c-api/arg.rst:563
msgid "``c`` (:class:`bytes` of length 1) [char]"
msgstr ""

# ddc11b782a4f4dfc9cf643b017f10400
#: c-api/arg.rst:264
msgid ""
"Convert a Python byte, represented as a :class:`bytes` object of length 1, "
"to a C :c:type:`char`."
msgstr ""

# a29dc953122b43fe88cc8ff7e6e0796b
# e985e853124a42a49f54d66ffd3223bc
#: c-api/arg.rst:269 c-api/arg.rst:567
msgid "``C`` (:class:`str` of length 1) [int]"
msgstr ""

# dd08b6b329e5469dad818465638982ed
#: c-api/arg.rst:268
msgid ""
"Convert a Python character, represented as a :class:`str` object of length "
"1, to a C :c:type:`int`."
msgstr ""

# eecedfea48064bf2b775fc9794670e58
# 9103213ab274475da9a31d084703bd4f
#: c-api/arg.rst:272 c-api/arg.rst:573
msgid "``f`` (:class:`float`) [float]"
msgstr ""

# 9b22410e225c4f0387a6994613ecebc0
#: c-api/arg.rst:272
msgid "Convert a Python floating point number to a C :c:type:`float`."
msgstr ""

# 0d8a1eaa2b954bde8d04bf977ae14087
# 1f699f2675cf44c0a575209d3aafe5df
#: c-api/arg.rst:275 c-api/arg.rst:570
msgid "``d`` (:class:`float`) [double]"
msgstr ""

# 95bac86f56764630a982b69a4bda8552
#: c-api/arg.rst:275
msgid "Convert a Python floating point number to a C :c:type:`double`."
msgstr ""

# 98b9159c22174b32a3dc96d09c82522e
#: c-api/arg.rst:278
msgid "``D`` (:class:`complex`) [Py_complex]"
msgstr ""

# 856239f2e47e460590617f1d76af7c07
#: c-api/arg.rst:278
msgid "Convert a Python complex number to a C :c:type:`Py_complex` structure."
msgstr ""

# ae20e37774ff47a79cb7fcec9bdd7f7c
#: c-api/arg.rst:281
msgid "Other objects"
msgstr ""

# e837a7340ac34605af94f3090bddbbbe
# 5d8ecefc9ae6403681d0af0f56136a74
#: c-api/arg.rst:286 c-api/arg.rst:584
msgid "``O`` (object) [PyObject \\*]"
msgstr ""

# 6ac1322539cf40b3a6a71dfe79df97e6
#: c-api/arg.rst:284
msgid ""
"Store a Python object (without any conversion) in a C object pointer.  The C "
"program thus receives the actual object that was passed.  The object's "
"reference count is not increased.  The pointer stored is not *NULL*."
msgstr ""

# 9ba491b818a74a8d9107731a9243e72a
#: c-api/arg.rst:293
msgid "``O!`` (object) [*typeobject*, PyObject \\*]"
msgstr ""

# 24d1b90152b643d2bc1dbdd373f6a7a0
#: c-api/arg.rst:289
msgid ""
"Store a Python object in a C object pointer.  This is similar to ``O``, but "
"takes two C arguments: the first is the address of a Python type object, the "
"second is the address of the C variable (of type :c:type:`PyObject\\*`) into "
"which the object pointer is stored.  If the Python object does not have the "
"required type, :exc:`TypeError` is raised."
msgstr ""

# f43a30a856cc4a74a9a1b6a8fbd0a03a
# 4cf06727d5b0416586c76b644eb22ad7
#: c-api/arg.rst:316 c-api/arg.rst:598
msgid "``O&`` (object) [*converter*, *anything*]"
msgstr ""

# 20ebfd20a6ca49d8a6157f9f40e50505
#: c-api/arg.rst:296
msgid ""
"Convert a Python object to a C variable through a *converter* function.  "
"This takes two arguments: the first is a function, the second is the address "
"of a C variable (of arbitrary type), converted to :c:type:`void \\*`.  The "
"*converter* function in turn is called as follows::"
msgstr ""

# fb7dd494e99941608b98a56c101310b4
#: c-api/arg.rst:303
msgid ""
"where *object* is the Python object to be converted and *address* is the :c:"
"type:`void\\*` argument that was passed to the :c:func:`PyArg_Parse\\*` "
"function. The returned *status* should be ``1`` for a successful conversion "
"and ``0`` if the conversion has failed.  When the conversion fails, the "
"*converter* function should raise an exception and leave the content of "
"*address* unmodified."
msgstr ""

# 1943fe69fd2a4c40ba1b8c779875714c
#: c-api/arg.rst:309
msgid ""
"If the *converter* returns ``Py_CLEANUP_SUPPORTED``, it may get called a "
"second time if the argument parsing eventually fails, giving the converter a "
"chance to release any memory that it had already allocated. In this second "
"call, the *object* parameter will be NULL; *address* will have the same "
"value as in the original call."
msgstr ""

# eea36a86b3fb4a38bc69d4cdfd295573
# 60e4a2385522447e9749880f4f31e9a1
#: c-api/arg.rst:321 c-api/arg.rst:601
msgid "``(items)`` (:class:`tuple`) [*matching-items*]"
msgstr ""

# b9e52672b7674d1cbf41cd5983f93a2c
#: c-api/arg.rst:319
msgid ""
"The object must be a Python sequence whose length is the number of format "
"units in *items*.  The C arguments must correspond to the individual format "
"units in *items*.  Format units for sequences may be nested."
msgstr ""

# 2e4b39c788fc49c6896cdcc270187447
#: c-api/arg.rst:323
msgid ""
"It is possible to pass \"long\" integers (integers whose value exceeds the "
"platform's :const:`LONG_MAX`) however no proper range checking is done --- "
"the most significant bits are silently truncated when the receiving field is "
"too small to receive the value (actually, the semantics are inherited from "
"downcasts in C --- your mileage may vary)."
msgstr ""

# 82f22c924f8c477793cc7e3b75209611
#: c-api/arg.rst:329
msgid ""
"A few other characters have a meaning in a format string.  These may not "
"occur inside nested parentheses.  They are:"
msgstr ""

# 104e441992184ea98fa7bac7c3eca9fd
#: c-api/arg.rst:337
msgid "``|``"
msgstr ""

# 9f8d502982ae4a108252074919c60a0e
#: c-api/arg.rst:333
msgid ""
"Indicates that the remaining arguments in the Python argument list are "
"optional. The C variables corresponding to optional arguments should be "
"initialized to their default value --- when an optional argument is not "
"specified, :c:func:`PyArg_ParseTuple` does not touch the contents of the "
"corresponding C variable(s)."
msgstr ""

# 5f151d1fbe044e878972ac951735ba39
#: c-api/arg.rst:342
msgid "``:``"
msgstr ""

# 8bd9cf86125c4ba69218573b1ea43018
#: c-api/arg.rst:340
msgid ""
"The list of format units ends here; the string after the colon is used as "
"the function name in error messages (the \"associated value\" of the "
"exception that :c:func:`PyArg_ParseTuple` raises)."
msgstr ""

# b75bb917418d4d6faed8418d67cc552a
#: c-api/arg.rst:347
msgid "``;``"
msgstr ""

# de071b582e7f4c3dbc095c793e79a56f
#: c-api/arg.rst:345
msgid ""
"The list of format units ends here; the string after the semicolon is used "
"as the error message *instead* of the default error message.  ``:`` and ``;"
"`` mutually exclude each other."
msgstr ""

# 3f660466150b4d73b580b91b23a211d1
#: c-api/arg.rst:349
msgid ""
"Note that any Python object references which are provided to the caller are "
"*borrowed* references; do not decrement their reference count!"
msgstr ""

# fe5ebda860a246b0b7a1efbff8e29516
#: c-api/arg.rst:352
msgid ""
"Additional arguments passed to these functions must be addresses of "
"variables whose type is determined by the format string; these are used to "
"store values from the input tuple.  There are a few cases, as described in "
"the list of format units above, where these parameters are used as input "
"values; they should match what is specified for the corresponding format "
"unit in that case."
msgstr ""

# 4e011564748741e1a84c4e40895ca0df
#: c-api/arg.rst:358
msgid ""
"For the conversion to succeed, the *arg* object must match the format and "
"the format must be exhausted.  On success, the :c:func:`PyArg_Parse\\*` "
"functions return true, otherwise they return false and raise an appropriate "
"exception. When the :c:func:`PyArg_Parse\\*` functions fail due to "
"conversion failure in one of the format units, the variables at the "
"addresses corresponding to that and the following format units are left "
"untouched."
msgstr ""

# 18cf40c85db04d21852afcc7d93a3c0e
#: c-api/arg.rst:367
msgid "API Functions"
msgstr ""

# 3785442a9f294c3c91c9c5d343ba2aa8
#: c-api/arg.rst:371
msgid ""
"Parse the parameters of a function that takes only positional parameters "
"into local variables.  Returns true on success; on failure, it returns false "
"and raises the appropriate exception."
msgstr ""

# d6772b95d77946ba8f463f288607441a
#: c-api/arg.rst:378
msgid ""
"Identical to :c:func:`PyArg_ParseTuple`, except that it accepts a va_list "
"rather than a variable number of arguments."
msgstr ""

# 74a69d069184482e90ad8c8bea1940fd
#: c-api/arg.rst:384
msgid ""
"Parse the parameters of a function that takes both positional and keyword "
"parameters into local variables.  Returns true on success; on failure, it "
"returns false and raises the appropriate exception."
msgstr ""

# c96127a08d6a48c0a875d709982f2d8e
#: c-api/arg.rst:391
msgid ""
"Identical to :c:func:`PyArg_ParseTupleAndKeywords`, except that it accepts a "
"va_list rather than a variable number of arguments."
msgstr ""

# 3cf67dc9bbfb448ea59e5f3f60004353
#: c-api/arg.rst:397
msgid ""
"Ensure that the keys in the keywords argument dictionary are strings.  This "
"is only needed if :c:func:`PyArg_ParseTupleAndKeywords` is not used, since "
"the latter already does this check."
msgstr ""

# 98e58ae12b5e4ed8b8f6e1d24a5ac585
#: c-api/arg.rst:407
msgid ""
"Function used to deconstruct the argument lists of \"old-style\" functions "
"--- these are functions which use the :const:`METH_OLDARGS` parameter "
"parsing method.  This is not recommended for use in parameter parsing in new "
"code, and most code in the standard interpreter has been modified to no "
"longer use this for that purpose.  It does remain a convenient way to "
"decompose other tuples, however, and may continue to be used for that "
"purpose."
msgstr ""

# 34a46d4aac724ca7bf4a9fe302260b20
#: c-api/arg.rst:417
msgid ""
"A simpler form of parameter retrieval which does not use a format string to "
"specify the types of the arguments.  Functions which use this method to "
"retrieve their parameters should be declared as :const:`METH_VARARGS` in "
"function or method tables.  The tuple containing the actual parameters "
"should be passed as *args*; it must actually be a tuple.  The length of the "
"tuple must be at least *min* and no more than *max*; *min* and *max* may be "
"equal.  Additional arguments must be passed to the function, each of which "
"should be a pointer to a :c:type:`PyObject\\*` variable; these will be "
"filled in with the values from *args*; they will contain borrowed "
"references.  The variables which correspond to optional parameters not given "
"by *args* will not be filled in; these should be initialized by the caller. "
"This function returns true on success and false if *args* is not a tuple or "
"contains the wrong number of elements; an exception will be set if there was "
"a failure."
msgstr ""

# dd54db96a4b648c8bdacc5c6b54e312b
#: c-api/arg.rst:431
msgid ""
"This is an example of the use of this function, taken from the sources for "
"the :mod:`_weakref` helper module for weak references::"
msgstr ""

# 6c6f8a7cfc5d485380c33b8b35cab823
#: c-api/arg.rst:447
msgid ""
"The call to :c:func:`PyArg_UnpackTuple` in this example is entirely "
"equivalent to this call to :c:func:`PyArg_ParseTuple`::"
msgstr ""

# 453a8e73aef64aaf97e0f648bd7498bb
#: c-api/arg.rst:455
msgid "Building values"
msgstr ""

# 46427f18e2cf46bea927304db2e3c76a
#: c-api/arg.rst:459
msgid ""
"Create a new value based on a format string similar to those accepted by "
"the :c:func:`PyArg_Parse\\*` family of functions and a sequence of values.  "
"Returns the value or *NULL* in the case of an error; an exception will be "
"raised if *NULL* is returned."
msgstr ""

# a77bc2f917864786b5c2de300032bdcb
#: c-api/arg.rst:464
msgid ""
":c:func:`Py_BuildValue` does not always build a tuple.  It builds a tuple "
"only if its format string contains two or more format units.  If the format "
"string is empty, it returns ``None``; if it contains exactly one format "
"unit, it returns whatever object is described by that format unit.  To force "
"it to return a tuple of size 0 or one, parenthesize the format string."
msgstr ""

# 93944ef22003489ca67c83193635dab5
#: c-api/arg.rst:470
msgid ""
"When memory buffers are passed as parameters to supply data to build "
"objects, as for the ``s`` and ``s#`` formats, the required data is copied.  "
"Buffers provided by the caller are never referenced by the objects created "
"by :c:func:`Py_BuildValue`.  In other words, if your code invokes :c:func:"
"`malloc` and passes the allocated memory to :c:func:`Py_BuildValue`, your "
"code is responsible for calling :c:func:`free` for that memory once :c:func:"
"`Py_BuildValue` returns."
msgstr ""

# 89b082d529944c319d861e244d05f3fe
#: c-api/arg.rst:478
msgid ""
"In the following description, the quoted form is the format unit; the entry "
"in (round) parentheses is the Python object type that the format unit will "
"return; and the entry in [square] brackets is the type of the C value(s) to "
"be passed."
msgstr ""

# f28154c285574e94859867af4d6f0198
#: c-api/arg.rst:482
msgid ""
"The characters space, tab, colon and comma are ignored in format strings "
"(but not within format units such as ``s#``).  This can be used to make long "
"format strings a tad more readable."
msgstr ""

# 06ab64815f404516ac26a5e8005ae2a4
#: c-api/arg.rst:488
msgid "``s`` (:class:`str` or ``None``) [char \\*]"
msgstr ""

# a6f957b4e19d4d2390198393be11e20f
#: c-api/arg.rst:487
msgid ""
"Convert a null-terminated C string to a Python :class:`str` object using "
"``'utf-8'`` encoding. If the C string pointer is *NULL*, ``None`` is used."
msgstr ""

# e62c88398321421ca9e521ead007058e
#: c-api/arg.rst:493
msgid "``s#`` (:class:`str` or ``None``) [char \\*, int]"
msgstr ""

# 7005594558c948a492826a534b9af7f5
#: c-api/arg.rst:491
msgid ""
"Convert a C string and its length to a Python :class:`str` object using "
"``'utf-8'`` encoding. If the C string pointer is *NULL*, the length is "
"ignored and ``None`` is returned."
msgstr ""

# 5e9cbcbfbbc34f6d8c3e05640cd65ccc
#: c-api/arg.rst:497
msgid "``y`` (:class:`bytes`) [char \\*]"
msgstr ""

# fec9109f668b491f9015c82d870b84bb
#: c-api/arg.rst:496
msgid ""
"This converts a C string to a Python :func:`bytes` object.  If the C string "
"pointer is *NULL*, ``None`` is returned."
msgstr ""

# 90bf39227c134898bcb856f1b46bd10f
#: c-api/arg.rst:501
msgid "``y#`` (:class:`bytes`) [char \\*, int]"
msgstr ""

# 06ea972d5f8c44e0b1e02937b281830d
#: c-api/arg.rst:500
msgid ""
"This converts a C string and its lengths to a Python object.  If the C "
"string pointer is *NULL*, ``None`` is returned."
msgstr ""

# 17af19d0bd714f199324458542acb889
#: c-api/arg.rst:504
msgid "``z`` (:class:`str` or ``None``) [char \\*]"
msgstr ""

# 7031dc3b2450484eb41bf1c7707adc1e
# 215f75e6c0f9409da9d93380ddaebbc8
#: c-api/arg.rst:504 c-api/arg.rst:519
msgid "Same as ``s``."
msgstr ""

# 265ac5c726fd4a32859c9ecd7c478e5d
#: c-api/arg.rst:507
msgid "``z#`` (:class:`str` or ``None``) [char \\*, int]"
msgstr ""

# 33643676c8e449d3ba2f2b2360b77f61
# 0db74685ed784a3f8fe366c7a636f700
#: c-api/arg.rst:507 c-api/arg.rst:522
msgid "Same as ``s#``."
msgstr ""

# 70402a1f2c3847dfafff12d2acd64eca
#: c-api/arg.rst:510
msgid ""
"Convert a null-terminated buffer of Unicode (UCS-2 or UCS-4) data to a "
"Python Unicode object.  If the Unicode buffer pointer is *NULL*, ``None`` is "
"returned."
msgstr ""

# 4f450bc0c0bb49fb83b514b0478cc840
#: c-api/arg.rst:514
msgid ""
"Convert a Unicode (UCS-2 or UCS-4) data buffer and its length to a Python "
"Unicode object.   If the Unicode buffer pointer is *NULL*, the length is "
"ignored and ``None`` is returned."
msgstr ""

# e7a5dc6175374283a460b3a07d9672b6
#: c-api/arg.rst:519
msgid "``U`` (:class:`str` or ``None``) [char \\*]"
msgstr ""

# 0455f35475484a829a69b57b1a7c46a2
#: c-api/arg.rst:522
msgid "``U#`` (:class:`str` or ``None``) [char \\*, int]"
msgstr ""

# 413261e19ad44f049d7b8f638fd7187b
#: c-api/arg.rst:525
msgid "Convert a plain C :c:type:`int` to a Python integer object."
msgstr ""

# b5890be7fb864c59a716daa665b2f333
#: c-api/arg.rst:528
msgid "``b`` (:class:`int`) [char]"
msgstr ""

# 0ffc703f1715489b845320ae504eb494
#: c-api/arg.rst:528
msgid "Convert a plain C :c:type:`char` to a Python integer object."
msgstr ""

# ad408144d1484afa9898b51f05d78218
#: c-api/arg.rst:531
msgid "Convert a plain C :c:type:`short int` to a Python integer object."
msgstr ""

# aadc4df2a9dc44d19b3a74828e2c49ed
#: c-api/arg.rst:534
msgid "Convert a C :c:type:`long int` to a Python integer object."
msgstr ""

# 456378e1545f4bb69cb431d6ba7d5247
#: c-api/arg.rst:537
msgid "Convert a C :c:type:`unsigned char` to a Python integer object."
msgstr ""

# 2986e62a2f6045639b4d392e8f637857
#: c-api/arg.rst:540
msgid "Convert a C :c:type:`unsigned short int` to a Python integer object."
msgstr ""

# 9c4c8e7199af4bc1bf93d4aaaca0922f
#: c-api/arg.rst:543
msgid "Convert a C :c:type:`unsigned int` to a Python integer object."
msgstr ""

# c355ac9cca134cc99967117f8cb278a0
#: c-api/arg.rst:546
msgid "Convert a C :c:type:`unsigned long` to a Python integer object."
msgstr ""

# b372e10b36bf4c6c948a47b5db422024
#: c-api/arg.rst:549
msgid ""
"Convert a C :c:type:`long long` to a Python integer object. Only available "
"on platforms that support :c:type:`long long` (or :c:type:`_int64` on "
"Windows)."
msgstr ""

# 78d4b0e110884450a85309e654efd847
#: c-api/arg.rst:554
msgid ""
"Convert a C :c:type:`unsigned long long` to a Python integer object. Only "
"available on platforms that support :c:type:`unsigned long long` (or :c:type:"
"`unsigned _int64` on Windows)."
msgstr ""

# 41b1d0c372b4433e9cfb530de08cc7a1
#: c-api/arg.rst:559
msgid "Convert a C :c:type:`Py_ssize_t` to a Python integer."
msgstr ""

# d4a6e189642b45ce971ee9869138cc65
#: c-api/arg.rst:562
msgid ""
"Convert a C :c:type:`int` representing a byte to a Python :class:`bytes` "
"object of length 1."
msgstr ""

# dbd0d741da2645db9dade1c8af1bd2ce
#: c-api/arg.rst:566
msgid ""
"Convert a C :c:type:`int` representing a character to Python :class:`str` "
"object of length 1."
msgstr ""

# 755d91f9279d4f73a1e0172f5fc54417
#: c-api/arg.rst:570
msgid "Convert a C :c:type:`double` to a Python floating point number."
msgstr ""

# c1c56f6583304048b383b9c6914744d5
#: c-api/arg.rst:573
msgid "Convert a C :c:type:`float` to a Python floating point number."
msgstr ""

# d4c3b60c26074a88b3dea7b23856f4b3
#: c-api/arg.rst:576
msgid "``D`` (:class:`complex`) [Py_complex \\*]"
msgstr ""

# d37ea61b51d34ac4a5a07cb86e402460
#: c-api/arg.rst:576
msgid "Convert a C :c:type:`Py_complex` structure to a Python complex number."
msgstr ""

# bafb3f0fcb1f4f8d8347aaf0cc1e3a58
#: c-api/arg.rst:579
msgid ""
"Pass a Python object untouched (except for its reference count, which is "
"incremented by one).  If the object passed in is a *NULL* pointer, it is "
"assumed that this was caused because the call producing the argument found "
"an error and set an exception. Therefore, :c:func:`Py_BuildValue` will "
"return *NULL* but won't raise an exception.  If no exception has been raised "
"yet, :exc:`SystemError` is set."
msgstr ""

# 087a2b14a3d14e5e872a4a8498da7fbf
#: c-api/arg.rst:587
msgid "``S`` (object) [PyObject \\*]"
msgstr ""

# a1a06e89f00d427ca77000fc6f32e05c
#: c-api/arg.rst:587
msgid "Same as ``O``."
msgstr ""

# b748afb5be4744b4bcd70146156279be
#: c-api/arg.rst:592
msgid "``N`` (object) [PyObject \\*]"
msgstr ""

# ba894b663d724373b137fb28a9b718de
#: c-api/arg.rst:590
msgid ""
"Same as ``O``, except it doesn't increment the reference count on the "
"object. Useful when the object is created by a call to an object constructor "
"in the argument list."
msgstr ""

# ee7d36081e874fbb844f06cb7c4935c7
#: c-api/arg.rst:595
msgid ""
"Convert *anything* to a Python object through a *converter* function.  The "
"function is called with *anything* (which should be compatible with :c:type:"
"`void \\*`) as its argument and should return a \"new\" Python object, or "
"*NULL* if an error occurred."
msgstr ""

# b8a8f863ce4440fb8b8867fea2f912db
#: c-api/arg.rst:601
msgid ""
"Convert a sequence of C values to a Python tuple with the same number of "
"items."
msgstr ""

# 68a9a3b5642042578e5ab5599f539083
#: c-api/arg.rst:604
msgid "``[items]`` (:class:`list`) [*matching-items*]"
msgstr ""

# cbccd57d2d304963881e1250db551282
#: c-api/arg.rst:604
msgid ""
"Convert a sequence of C values to a Python list with the same number of "
"items."
msgstr ""

# 095b8f9bc7af48398d4ea05b66cec6c1
#: c-api/arg.rst:609
msgid "``{items}`` (:class:`dict`) [*matching-items*]"
msgstr ""

# d7b9e67cdaef48988841eaa8a4548183
#: c-api/arg.rst:607
msgid ""
"Convert a sequence of C values to a Python dictionary.  Each pair of "
"consecutive C values adds one item to the dictionary, serving as key and "
"value, respectively."
msgstr ""

# b7adac6f50d44874a3b44bdab9ac7f3e
#: c-api/arg.rst:611
msgid ""
"If there is an error in the format string, the :exc:`SystemError` exception "
"is set and *NULL* returned."
msgstr ""

# 9ee661d06de747a18b1e3f2cc66556e0
#: c-api/arg.rst:616
msgid ""
"Identical to :c:func:`Py_BuildValue`, except that it accepts a va_list "
"rather than a variable number of arguments."
msgstr ""

# 76ceeadc41d345f285d729ba497fa77e
#: c-api/bool.rst:6
msgid "Boolean Objects"
msgstr ""

# 12970e743dc645efa84d6e14d22ee4a6
#: c-api/bool.rst:8
msgid ""
"Booleans in Python are implemented as a subclass of integers.  There are "
"only two booleans, :const:`Py_False` and :const:`Py_True`.  As such, the "
"normal creation and deletion functions don't apply to booleans.  The "
"following macros are available, however."
msgstr ""

# d65b896be28d48ada429d396d40c27a5
#: c-api/bool.rst:16
msgid "Return true if *o* is of type :c:data:`PyBool_Type`."
msgstr ""

# 43ba7d604747463d926357261ded43e6
#: c-api/bool.rst:21
msgid ""
"The Python ``False`` object.  This object has no methods.  It needs to be "
"treated just like any other object with respect to reference counts."
msgstr ""

# a6090da7c5dc436597c0089ecbac3995
#: c-api/bool.rst:27
msgid ""
"The Python ``True`` object.  This object has no methods.  It needs to be "
"treated just like any other object with respect to reference counts."
msgstr ""

# 61582b2c3ae140f59840a99288ff1da6
#: c-api/bool.rst:33
msgid ""
"Return :const:`Py_False` from a function, properly incrementing its "
"reference count."
msgstr ""

# 27bf304c80f44a8a8a3a4def312b8456
#: c-api/bool.rst:39
msgid ""
"Return :const:`Py_True` from a function, properly incrementing its reference "
"count."
msgstr ""

# 40091d8a34ad469c8fc3da31e0316579
#: c-api/bool.rst:45
msgid ""
"Return a new reference to :const:`Py_True` or :const:`Py_False` depending on "
"the truth value of *v*."
msgstr ""

# 8828421169a44532a1a02b88fa143296
#: c-api/buffer.rst:11
msgid "Buffer Protocol"
msgstr ""

# 33ac09f4a5a14aedbafffa924ac5f9bf
#: c-api/buffer.rst:17
msgid ""
"Certain objects available in Python wrap access to an underlying memory "
"array or *buffer*.  Such objects include the built-in :class:`bytes` and :"
"class:`bytearray`, and some extension types like :class:`array.array`. Third-"
"party libraries may define their own types for special purposes, such as "
"image processing or numeric analysis."
msgstr ""

# c3717844da3c44469cc0e5d5d14dd0f7
#: c-api/buffer.rst:23
msgid ""
"While each of these types have their own semantics, they share the common "
"characteristic of being backed by a possibly large memory buffer.  It is "
"then desireable, in some situations, to access that buffer directly and "
"without intermediate copying."
msgstr ""

# 33e28f3c5b5b4719ac28287a5137a3ea
#: c-api/buffer.rst:28
msgid ""
"Python provides such a facility at the C level in the form of the :ref:"
"`buffer protocol <bufferobjects>`.  This protocol has two sides:"
msgstr ""

# ea6dc34fd66c442e9343e573ad771bd4
#: c-api/buffer.rst:33
msgid ""
"on the producer side, a type can export a \"buffer interface\" which allows "
"objects of that type to expose information about their underlying buffer. "
"This interface is described in the section :ref:`buffer-structs`;"
msgstr ""

# ff455272acca4752bc172fe0a08e9d4d
#: c-api/buffer.rst:37
msgid ""
"on the consumer side, several means are available to obtain a pointer to the "
"raw underlying data of an object (for example a method parameter)."
msgstr ""

# eae070ee5f044c1f85dd55cfddaf57e8
#: c-api/buffer.rst:40
msgid ""
"Simple objects such as :class:`bytes` and :class:`bytearray` expose their "
"underlying buffer in byte-oriented form.  Other forms are possible; for "
"example, the elements exposed by a :class:`array.array` can be multi-byte "
"values."
msgstr ""

# 5587df5f79ff41c5b3b8d1bb78323930
#: c-api/buffer.rst:44
msgid ""
"An example consumer of the buffer interface is the :meth:`~io.BufferedIOBase."
"write` method of file objects: any object that can export a series of bytes "
"through the buffer interface can be written to a file.  While :meth:`write` "
"only needs read-only access to the internal contents of the object passed to "
"it, other methods such as :meth:`~io.BufferedIOBase.readinto` need write "
"access to the contents of their argument.  The buffer interface allows "
"objects to selectively allow or reject exporting of read-write and read-only "
"buffers."
msgstr ""

# 290f7a2cd0874ec08d62e29cfed1fa5f
#: c-api/buffer.rst:52
msgid ""
"There are two ways for a consumer of the buffer interface to acquire a "
"buffer over a target object:"
msgstr ""

# 54424a26f32941ed96411955b4e14bae
#: c-api/buffer.rst:55
msgid "call :c:func:`PyObject_GetBuffer` with the right parameters;"
msgstr ""

# 7e2ea699aea149a982caa65c28f4b24c
#: c-api/buffer.rst:57
msgid ""
"call :c:func:`PyArg_ParseTuple` (or one of its siblings) with one of the "
"``y*``, ``w*`` or ``s*`` :ref:`format codes <arg-parsing>`."
msgstr ""

# 4d5c5b3f695248ef99767e68e67a9a4b
#: c-api/buffer.rst:60
msgid ""
"In both cases, :c:func:`PyBuffer_Release` must be called when the buffer "
"isn't needed anymore.  Failure to do so could lead to various issues such as "
"resource leaks."
msgstr ""

# 741ed0aa985a48e7bdbc7350dd8d8575
#: c-api/buffer.rst:66
msgid "The buffer structure"
msgstr ""

# 33610ed2df8a4d97ac2a3e279252e322
#: c-api/buffer.rst:68
msgid ""
"Buffer structures (or simply \"buffers\") are useful as a way to expose the "
"binary data from another object to the Python programmer.  They can also be "
"used as a zero-copy slicing mechanism.  Using their ability to reference a "
"block of memory, it is possible to expose any data to the Python programmer "
"quite easily.  The memory could be a large, constant array in a C extension, "
"it could be a raw block of memory for manipulation before passing to an "
"operating system library, or it could be used to pass around structured data "
"in its native, in-memory format."
msgstr ""

# 96ed057bc7524d7d9b8038aa93aa56e6
#: c-api/buffer.rst:77
msgid ""
"Contrary to most data types exposed by the Python interpreter, buffers are "
"not :c:type:`PyObject` pointers but rather simple C structures.  This allows "
"them to be created and copied very simply.  When a generic wrapper around a "
"buffer is needed, a :ref:`memoryview <memoryview-objects>` object can be "
"created."
msgstr ""

# 67e503ef4e3446a5bbf27b928e4b3db0
#: c-api/buffer.rst:88
msgid "A pointer to the start of the memory for the object."
msgstr ""

# d7449b21c87440e0926f8c50105a81a6
#: c-api/buffer.rst:93
msgid "The total length of the memory in bytes."
msgstr ""

# 695ae80ca77f4db6888e6ef095a40db4
#: c-api/buffer.rst:97
msgid "An indicator of whether the buffer is read only."
msgstr ""

# 1a9512e78fdf4337951308e01c97dd59
#: c-api/buffer.rst:102
msgid ""
"A *NULL* terminated string in :mod:`struct` module style syntax giving the "
"contents of the elements available through the buffer.  If this is *NULL*, ``"
"\"B\"`` (unsigned bytes) is assumed."
msgstr ""

# 61e875db19c34b4695c56566b4476b70
#: c-api/buffer.rst:108
msgid ""
"The number of dimensions the memory represents as a multi-dimensional "
"array.  If it is 0, :c:data:`strides` and :c:data:`suboffsets` must be "
"*NULL*."
msgstr ""

# 0bdd3e7e67464c32909a872e028e6e20
#: c-api/buffer.rst:114
msgid ""
"An array of :c:type:`Py_ssize_t`\\s the length of :c:data:`ndim` giving the "
"shape of the memory as a multi-dimensional array.  Note that ``((*shape)[0] "
"* ... * (*shape)[ndims-1])*itemsize`` should be equal to :c:data:`len`."
msgstr ""

# 2a8dff6bb09143b4addd107fdd11c045
#: c-api/buffer.rst:121
msgid ""
"An array of :c:type:`Py_ssize_t`\\s the length of :c:data:`ndim` giving the "
"number of bytes to skip to get to a new element in each dimension."
msgstr ""

# 91e78586677544328100202ac6e660df
#: c-api/buffer.rst:126
msgid ""
"An array of :c:type:`Py_ssize_t`\\s the length of :c:data:`ndim`.  If these "
"suboffset numbers are greater than or equal to 0, then the value stored "
"along the indicated dimension is a pointer and the suboffset value dictates "
"how many bytes to add to the pointer after de-referencing. A suboffset value "
"that it negative indicates that no de-referencing should occur (striding in "
"a contiguous memory block)."
msgstr ""

# 84bd3452036a429c8e792550eff73ecd
#: c-api/buffer.rst:133
msgid ""
"Here is a function that returns a pointer to the element in an N-D array "
"pointed to by an N-dimensional index when there are both non-NULL strides "
"and suboffsets::"
msgstr ""

# eb60f4f6f2e54219952ed9a17ea1b0d6
#: c-api/buffer.rst:153
msgid ""
"This is a storage for the itemsize (in bytes) of each element of the shared "
"memory. It is technically un-necessary as it can be obtained using :c:func:"
"`PyBuffer_SizeFromFormat`, however an exporter may know this information "
"without parsing the format string and it is necessary to know the itemsize "
"for proper interpretation of striding. Therefore, storing it is more "
"convenient and faster."
msgstr ""

# 869148ca607545ecb5e72ded1ba0428f
#: c-api/buffer.rst:162
msgid ""
"This is for use internally by the exporting object. For example, this might "
"be re-cast as an integer by the exporter and used to store flags about "
"whether or not the shape, strides, and suboffsets arrays must be freed when "
"the buffer is released. The consumer should never alter this value."
msgstr ""

# e30c9b6c18424b26b41f8646fe24ec45
#: c-api/buffer.rst:170
msgid "Buffer-related functions"
msgstr ""

# a009f3c20fee4326b0f39ab8f062f355
#: c-api/buffer.rst:175
msgid ""
"Return 1 if *obj* supports the buffer interface otherwise 0.  When 1 is "
"returned, it doesn't guarantee that :c:func:`PyObject_GetBuffer` will "
"succeed."
msgstr ""

# 8d2f7d8313484a728a8bcc2cef0b93db
#: c-api/buffer.rst:182
msgid ""
"Export a view over some internal data from the target object *obj*. *obj* "
"must not be NULL, and *view* must point to an existing :c:type:`Py_buffer` "
"structure allocated by the caller (most uses of this function will simply "
"declare a local variable of type :c:type:`Py_buffer`).  The *flags* argument "
"is a bit field indicating what kind of buffer is requested.  The buffer "
"interface allows for complicated memory layout possibilities; however, some "
"callers won't want to handle all the complexity and instead request a simple "
"view of the target object (using :c:macro:`PyBUF_SIMPLE` for a read-only "
"view and :c:macro:`PyBUF_WRITABLE` for a read-write view)."
msgstr ""

# 52d631d0364f489b9831fbbcc0643903
#: c-api/buffer.rst:193
msgid ""
"Some exporters may not be able to share memory in every possible way and may "
"need to raise errors to signal to some consumers that something is just not "
"possible. These errors should be a :exc:`BufferError` unless there is "
"another error that is actually causing the problem. The exporter can use "
"flags information to simplify how much of the :c:data:`Py_buffer` structure "
"is filled in with non-default values and/or raise an error if the object "
"can't support a simpler view of its memory."
msgstr ""

# f55b4f9efe344e678baf97e7cbc65452
#: c-api/buffer.rst:201
msgid ""
"On success, 0 is returned and the *view* structure is filled with useful "
"values.  On error, -1 is returned and an exception is raised; the *view* is "
"left in an undefined state."
msgstr ""

# 2afc606abc8b4e59b85ca386474772bc
#: c-api/buffer.rst:205
msgid "The following are the possible values to the *flags* arguments."
msgstr ""

# 0f8f59fa450d4a188dded4ce5827607a
#: c-api/buffer.rst:209
msgid ""
"This is the default flag.  The returned buffer exposes a read-only memory "
"area.  The format of data is assumed to be raw unsigned bytes, without any "
"particular structure.  This is a \"stand-alone\" flag constant.  It never "
"needs to be '|'d to the others.  The exporter will raise an error if it "
"cannot provide such a contiguous buffer of bytes."
msgstr ""

# 3ddcd667d4cc486aa7c4d6223445a8bd
#: c-api/buffer.rst:217
msgid ""
"Like :c:macro:`PyBUF_SIMPLE`, but the returned buffer is writable.  If the "
"exporter doesn't support writable buffers, an error is raised."
msgstr ""

# 3613f636a0f64259b7f7fc0d03c4d635
#: c-api/buffer.rst:222
msgid ""
"This implies :c:macro:`PyBUF_ND`.  The returned buffer must provide strides "
"information (i.e. the strides cannot be NULL).  This would be used when the "
"consumer can handle strided, discontiguous arrays. Handling strides "
"automatically assumes you can handle shape.  The exporter can raise an error "
"if a strided representation of the data is not possible (i.e. without the "
"suboffsets)."
msgstr ""

# 6cf50316213249c79b1a3689ab13a37f
#: c-api/buffer.rst:231
msgid ""
"The returned buffer must provide shape information.  The memory will be "
"assumed C-style contiguous (last dimension varies the fastest).  The "
"exporter may raise an error if it cannot provide this kind of contiguous "
"buffer.  If this is not given then shape will be *NULL*."
msgstr ""

# a94a0cf1bec443419b615973e6358030
#: c-api/buffer.rst:240
msgid ""
"These flags indicate that the contiguity returned buffer must be "
"respectively, C-contiguous (last dimension varies the fastest), Fortran "
"contiguous (first dimension varies the fastest) or either one.  All of these "
"flags imply :c:macro:`PyBUF_STRIDES` and guarantee that the strides buffer "
"info structure will be filled in correctly."
msgstr ""

# db54418c4be84fd481214abeef2d1c72
#: c-api/buffer.rst:248
msgid ""
"This flag indicates the returned buffer must have suboffsets information "
"(which can be NULL if no suboffsets are needed).  This can be used when the "
"consumer can handle indirect array referencing implied by these suboffsets. "
"This implies :c:macro:`PyBUF_STRIDES`."
msgstr ""

# 6bd993c1bf8a4180b616897d296e4734
#: c-api/buffer.rst:255
msgid ""
"The returned buffer must have true format information if this flag is "
"provided.  This would be used when the consumer is going to be checking for "
"what 'kind' of data is actually stored.  An exporter should always be able "
"to provide this information if requested.  If format is not explicitly "
"requested then the format must be returned as *NULL* (which means ``'B'``, "
"or unsigned bytes)."
msgstr ""

# 2d229b7554f44cbaa385c83aacbfbfe8
#: c-api/buffer.rst:264
msgid "This is equivalent to ``(PyBUF_STRIDES | PyBUF_WRITABLE)``."
msgstr ""

# e30e0e9cd3314db98611583e2d7c44fa
#: c-api/buffer.rst:268
msgid "This is equivalent to ``(PyBUF_STRIDES)``."
msgstr ""

# 00bd374a8d3b466e8fa8d3a7f37c7792
#: c-api/buffer.rst:272
msgid ""
"This is equivalent to ``(PyBUF_STRIDES | PyBUF_FORMAT | PyBUF_WRITABLE)``."
msgstr ""

# 99373c213ab64ff09a4bd7fa9d934dd9
#: c-api/buffer.rst:277
msgid "This is equivalent to ``(PyBUF_STRIDES | PyBUF_FORMAT)``."
msgstr ""

# d8cacb8dc9764f8f8999d1f91158d698
#: c-api/buffer.rst:281
msgid ""
"This is equivalent to ``(PyBUF_INDIRECT | PyBUF_FORMAT | PyBUF_WRITABLE)``."
msgstr ""

# 54f91571444d41278c32c3abe66cd4a0
#: c-api/buffer.rst:286
msgid "This is equivalent to ``(PyBUF_INDIRECT | PyBUF_FORMAT)``."
msgstr ""

# 02e7043dff6345998a70f99574d9de46
#: c-api/buffer.rst:290
msgid "This is equivalent to ``(PyBUF_ND | PyBUF_WRITABLE)``."
msgstr ""

# fcc3ee574c3b473ab392642fe882a300
#: c-api/buffer.rst:294
msgid "This is equivalent to ``(PyBUF_ND)``."
msgstr ""

# 543af78e34864eeabf13e32997442e34
#: c-api/buffer.rst:299
msgid ""
"Release the buffer *view*.  This should be called when the buffer is no "
"longer being used as it may free memory from it."
msgstr ""

# 5855ec7b6da34f629aa9f11dfe257439
#: c-api/buffer.rst:305
msgid ""
"Return the implied :c:data:`~Py_buffer.itemsize` from the struct-stype :c:"
"data:`~Py_buffer.format`."
msgstr ""

# f102b3d4eb4443db87837089f8e7f0be
#: c-api/buffer.rst:311
msgid ""
"Return 1 if the memory defined by the *view* is C-style (*fortran* is "
"``'C'``) or Fortran-style (*fortran* is ``'F'``) contiguous or either one "
"(*fortran* is ``'A'``).  Return 0 otherwise."
msgstr ""

# 02f85dcef5a5439caf2a3705f48a27be
#: c-api/buffer.rst:318
msgid ""
"Fill the *strides* array with byte-strides of a contiguous (C-style if "
"*fortran* is ``'C'`` or Fortran-style if *fortran* is ``'F'``) array of the "
"given shape with the given number of bytes per element."
msgstr ""

# 8b1e3f759b5b4555a7c23796fa0a5cde
#: c-api/buffer.rst:325
msgid ""
"Fill in a buffer-info structure, *view*, correctly for an exporter that can "
"only share a contiguous chunk of memory of \"unsigned bytes\" of the given "
"length.  Return 0 on success and -1 (with raising an error) on error."
msgstr ""

# be0c5bac219a40fc8039b409bd454502
#: c-api/bytearray.rst:6
msgid "Byte Array Objects"
msgstr ""

# 64f8a11e1efa4e258fe870e4a556b2b4
#: c-api/bytearray.rst:13
msgid ""
"This subtype of :c:type:`PyObject` represents a Python bytearray object."
msgstr ""

# 503486695f38460b9ff73736dd1f33f6
#: c-api/bytearray.rst:18
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python bytearray "
"type; it is the same object as :class:`bytearray` in the Python layer."
msgstr ""

# d96ef9db4109449a8c03dd44c0b9ac7b
#: c-api/bytearray.rst:23
msgid "Type check macros"
msgstr ""

# 1666a8b44cbc48dd88b1ded73bfb7522
#: c-api/bytearray.rst:27
msgid ""
"Return true if the object *o* is a bytearray object or an instance of a "
"subtype of the bytearray type."
msgstr ""

# 10bd9f2076b94364ace5513d65a580c9
#: c-api/bytearray.rst:33
msgid ""
"Return true if the object *o* is a bytearray object, but not an instance of "
"a subtype of the bytearray type."
msgstr ""

# b42a950d987542ecb06a83171bba05a8
#: c-api/bytearray.rst:38
msgid "Direct API functions"
msgstr ""

# 0f6f498bdca943f1b70d86606066e2d3
#: c-api/bytearray.rst:42
msgid ""
"Return a new bytearray object from any object, *o*, that implements the "
"buffer protocol."
msgstr ""

# 342e6ef9cf204d5a9029179b6d885206
#: c-api/bytearray.rst:50
msgid ""
"Create a new bytearray object from *string* and its length, *len*.  On "
"failure, *NULL* is returned."
msgstr ""

# 3a2845f7b52f47dd91c658effeb22fdd
#: c-api/bytearray.rst:56
msgid ""
"Concat bytearrays *a* and *b* and return a new bytearray with the result."
msgstr ""

# 64ebf475f655488cbeae08f65b956023
#: c-api/bytearray.rst:61
msgid "Return the size of *bytearray* after checking for a *NULL* pointer."
msgstr ""

# 2584db692e2b4f7caf2331e1a5dd752f
#: c-api/bytearray.rst:66
msgid ""
"Return the contents of *bytearray* as a char array after checking for a "
"*NULL* pointer."
msgstr ""

# c1480917195549908e42ca3706baef9d
#: c-api/bytearray.rst:72
msgid "Resize the internal buffer of *bytearray* to *len*."
msgstr ""

# b64ddf0a30c34c8c96750a6cc6277c7c
#: c-api/bytearray.rst:75
msgid "Macros"
msgstr ""

# 10d0417f3b7a47faadc6f418edc51f5e
#: c-api/bytearray.rst:77
msgid "These macros trade safety for speed and they don't check pointers."
msgstr ""

# 6aea4119236d41f1898a941715a5b4db
#: c-api/bytearray.rst:81
msgid "Macro version of :c:func:`PyByteArray_AsString`."
msgstr ""

# 9298aea648654c688f863193ddb82f5b
#: c-api/bytearray.rst:86
msgid "Macro version of :c:func:`PyByteArray_Size`."
msgstr ""

# 2a936c9dec2c4954ab42f782b8547e0b
#: c-api/bytes.rst:6
msgid "Bytes Objects"
msgstr ""

# b237e3c34233455dafb446da152779b8
#: c-api/bytes.rst:8
msgid ""
"These functions raise :exc:`TypeError` when expecting a bytes parameter and "
"are called with a non-bytes parameter."
msgstr ""

# 08c86120b77f4998b380b5d205c823a8
#: c-api/bytes.rst:16
msgid "This subtype of :c:type:`PyObject` represents a Python bytes object."
msgstr ""

# 92455175282f4aa6942aa98af5b4745b
#: c-api/bytes.rst:21
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python bytes type; it "
"is the same object as :class:`bytes` in the Python layer."
msgstr ""

# 5aabccf4e14c4bcb82fb913f89488d63
#: c-api/bytes.rst:27
msgid ""
"Return true if the object *o* is a bytes object or an instance of a subtype "
"of the bytes type."
msgstr ""

# 6ca79835c8b1475ca28a0198839c4e3a
#: c-api/bytes.rst:33
msgid ""
"Return true if the object *o* is a bytes object, but not an instance of a "
"subtype of the bytes type."
msgstr ""

# f520a6874c954a46935e2bfc512ec8d3
#: c-api/bytes.rst:39
msgid ""
"Return a new bytes object with a copy of the string *v* as value on success, "
"and *NULL* on failure.  The parameter *v* must not be *NULL*; it will not be "
"checked."
msgstr ""

# 2196fe6c26cf4ce8ab4933b9260cdb5d
#: c-api/bytes.rst:46
msgid ""
"Return a new bytes object with a copy of the string *v* as value and length "
"*len* on success, and *NULL* on failure.  If *v* is *NULL*, the contents of "
"the bytes object are uninitialized."
msgstr ""

# 68b1a503f3c7425ba7865886478c56e0
#: c-api/bytes.rst:53
msgid ""
"Take a C :c:func:`printf`\\ -style *format* string and a variable number of "
"arguments, calculate the size of the resulting Python bytes object and "
"return a bytes object with the values formatted into it.  The variable "
"arguments must be C types and must correspond exactly to the format "
"characters in the *format* string.  The following format characters are "
"allowed:"
msgstr ""

# 8ed82453eccb445ba4c83cd49954fa0c
# fa9f25e0f499479987746a7449445b4c
#: c-api/bytes.rst:66 c-api/unicode.rst:247
msgid "Format Characters"
msgstr ""

# 8db8a7272c0a4d9082e60b7b8a058e5d
# 0d6f7460dd174d6c9032203345facf72
#: c-api/bytes.rst:66 c-api/unicode.rst:247
msgid "Type"
msgstr ""

# 2e686e93c211417eb2d12a218a4496cf
# bb148d8de5ba4689b91966c04c39efd2
#: c-api/bytes.rst:66 c-api/unicode.rst:247
msgid "Comment"
msgstr ""

# 00be37e879de450497e016eff07db09f
# a78ca89c7f8645cba9be3be7899cc0c7
#: c-api/bytes.rst:68 c-api/unicode.rst:249
msgid ":attr:`%%`"
msgstr ""

# d57f4bab150b49f091fdc53615f1b948
# 56a0ebd23aa94dfda951b0e615464be7
#: c-api/bytes.rst:68 c-api/unicode.rst:249
msgid "*n/a*"
msgstr ""

# f089934aa94949e3b9810f6676eca826
# 2d5abf3e40d249eeb959e22746bc4e0e
#: c-api/bytes.rst:68 c-api/unicode.rst:249
msgid "The literal % character."
msgstr ""

# 601a81538e114c72b592571dfb3850ed
# 5564cccda8cb41f1af5ac099e596dcff
#: c-api/bytes.rst:70 c-api/unicode.rst:251
msgid ":attr:`%c`"
msgstr ""

# 5c7bc7b43b1a466ca87ddae7e19d74fc
# 9ae19caac4754afeb60409ac74b82677
# f4baba5baf0d4a069bc73ca58a901a75
# 88eba24c52e14f9b862d542d04f6eebe
# b4f069c49ba14667a65aa118a066eb85
# b678abdceb484644996dda7ff87a9658
# eee75a44baa84256a7e710b398a6b792
# 79fcb5b86aa84746a95f79b1230dd2b8
# b1a2743d3f214b6c90ae1ddbf2857197
# 49f01e53e06a44c29ed4eacf59580f69
# 569fa61282ac46ec8601b4349e274d9f
# 8b2288fb857e47aa84c00341105207b1
#: c-api/bytes.rst:70 c-api/bytes.rst:73 c-api/bytes.rst:91 c-api/bytes.rst:94
#: c-api/structures.rst:123 c-api/structures.rst:232 c-api/structures.rst:239
#: c-api/structures.rst:255 c-api/unicode.rst:251 c-api/unicode.rst:254
#: c-api/unicode.rst:278 c-api/unicode.rst:281
msgid "int"
msgstr ""

# ad6bf3eebcd747aeae28cd5d40f818bd
# b238804897764b498b9c126a5f90c196
#: c-api/bytes.rst:70 c-api/unicode.rst:251
msgid "A single character, represented as an C int."
msgstr ""

# 390697941c3746559ffd4549e5a00630
# b1433d70ea19419b94b6d8c8196079fb
#: c-api/bytes.rst:73 c-api/unicode.rst:254
msgid ":attr:`%d`"
msgstr ""

# 34a1b21b54ef4c2b8641f53c471f0974
# 6157c0a56c1d418980b0b9855aa49417
#: c-api/bytes.rst:73 c-api/unicode.rst:254
msgid "Exactly equivalent to ``printf(\"%d\")``."
msgstr ""

# 7b04fdbe2f3745ebaae3a1bf3b3b742b
# cb96688fc5344e2090ea209d9de3f69a
#: c-api/bytes.rst:76 c-api/unicode.rst:257
msgid ":attr:`%u`"
msgstr ""

# cc4eb14079a54c2bbd3c3b946779faf5
# a54ea410a17c45a293fa626c4f11b731
# ed8c7bf93746400fa741879573dffcbf
#: c-api/bytes.rst:76 c-api/structures.rst:265 c-api/unicode.rst:257
msgid "unsigned int"
msgstr ""

# 272ccc88231543c3872d3264ff2192d6
# 8db98d6b2cc74c4a9a900af6d8ec6c63
#: c-api/bytes.rst:76 c-api/unicode.rst:257
msgid "Exactly equivalent to ``printf(\"%u\")``."
msgstr ""

# 8c2d673156b449fea0cceab58c253daa
# 5a4bb344a1474d308697f417dbf28df0
#: c-api/bytes.rst:79 c-api/unicode.rst:260
msgid ":attr:`%ld`"
msgstr ""

# f4948c1bf7ed4b468f0255f59c9f16e0
# b89fab0ed17e497c948426db03832669
# 4559a35759154a77a1486cc356de6953
#: c-api/bytes.rst:79 c-api/structures.rst:256 c-api/unicode.rst:260
msgid "long"
msgstr ""

# 72a60e61da524ce5b0718ecd0913ab9b
# f5d209aed92747ce9913ab36e0364bb9
#: c-api/bytes.rst:79 c-api/unicode.rst:260
msgid "Exactly equivalent to ``printf(\"%ld\")``."
msgstr ""

# c2edaacf491b472e9c09f504e74d0e26
# c9af2b3d4daa4fa8af012bd433f60683
#: c-api/bytes.rst:82 c-api/unicode.rst:263
msgid ":attr:`%lu`"
msgstr ""

# de450533ac8f40a6a31f3bbf785c98fb
# 65ea063c314f4390b05f648ce7ac2261
# cd55a999a6bc4e65a5af86b650ea59c9
#: c-api/bytes.rst:82 c-api/structures.rst:267 c-api/unicode.rst:263
msgid "unsigned long"
msgstr ""

# 2b042ef961f84bed9db5ba19c83cc0fd
# cb115fc58e284cc39e3ac2d45fa1db38
#: c-api/bytes.rst:82 c-api/unicode.rst:263
msgid "Exactly equivalent to ``printf(\"%lu\")``."
msgstr ""

# 24173191ae9149c2b4071c25ee3412cf
# 8804c1085a5249a981ce9d763c42e477
#: c-api/bytes.rst:85 c-api/unicode.rst:272
msgid ":attr:`%zd`"
msgstr ""

# 844f0f883bb940229597b42cc79f28f9
# 17af4092f0824e779bb6bd7440ad723f
# afd96117a152459f8509d4ff0b2f2e8c
# f367219656574e60a74947677b3aab85
#: c-api/bytes.rst:85 c-api/structures.rst:235 c-api/structures.rst:271
#: c-api/unicode.rst:272
msgid "Py_ssize_t"
msgstr ""

# 6b1c8d01e4074b69b882fa4aa9308dd4
# 6f3b4c00f5a748ae91a8ff881c6ca4ff
#: c-api/bytes.rst:85 c-api/unicode.rst:272
msgid "Exactly equivalent to ``printf(\"%zd\")``."
msgstr ""

# 3f5260e9600c42d5ad1400c9749cf634
# 5c187563e68f4043a9286b5c9c794399
#: c-api/bytes.rst:88 c-api/unicode.rst:275
msgid ":attr:`%zu`"
msgstr ""

# ae54f75840304118a4739688c41cdfc6
# 5c18e1218fdc43359cf4cdae20244680
#: c-api/bytes.rst:88 c-api/unicode.rst:275
msgid "size_t"
msgstr ""

# 9e9334c59f7b4b90b4313a0d0dd401c4
# 4fcd355e62584bc3b662681cda132a66
#: c-api/bytes.rst:88 c-api/unicode.rst:275
msgid "Exactly equivalent to ``printf(\"%zu\")``."
msgstr ""

# 997d3cf4c10743eeae9df5ad739d7dac
# e7415b950f7f48959fee46940798990a
#: c-api/bytes.rst:91 c-api/unicode.rst:278
msgid ":attr:`%i`"
msgstr ""

# beacecdcdb134929942925dd39e47125
# 6fe9b9f9f8f34820864c0c25aa98901a
#: c-api/bytes.rst:91 c-api/unicode.rst:278
msgid "Exactly equivalent to ``printf(\"%i\")``."
msgstr ""

# ea7fdae79c48409db162ab71790343c5
# b76c59b1445e4fcb9f71d0c3bf0e2082
#: c-api/bytes.rst:94 c-api/unicode.rst:281
msgid ":attr:`%x`"
msgstr ""

# a183249272e34240aba54d7cbd3d6fe7
# aa86c9cd966f4f7ea10ae8b8ccca1b45
#: c-api/bytes.rst:94 c-api/unicode.rst:281
msgid "Exactly equivalent to ``printf(\"%x\")``."
msgstr ""

# 3e27b986c4f54742aa73b488e007a033
# 0f18612743d946a68eb04dbea7ef7e67
#: c-api/bytes.rst:97 c-api/unicode.rst:284
msgid ":attr:`%s`"
msgstr ""

# c6dad52ea53c49f8840be71593de1460
# 3b56385811154a46b7989b198063b94b
#: c-api/bytes.rst:97 c-api/unicode.rst:284
msgid "char\\*"
msgstr ""

# 1377019d15144c45883a356f5c2d2a9f
# 3c397b9024c94d3198c3415a74b1dc96
#: c-api/bytes.rst:97 c-api/unicode.rst:284
msgid "A null-terminated C character array."
msgstr ""

# f4371af97c0341d199606e6f16bce337
# f707abac0cf5482886224d6189a60027
#: c-api/bytes.rst:100 c-api/unicode.rst:287
msgid ":attr:`%p`"
msgstr ""

# 4d8c0e4fb829469593cf4c9998a2cfab
# a286b854dfb84e87a8edee084b500262
#: c-api/bytes.rst:100 c-api/unicode.rst:287
msgid "void\\*"
msgstr ""

# 4a57076ec4f74ec38a2b804df4277cc4
# 72d13acae56c451785a3bbdd6facc9d1
#: c-api/bytes.rst:100 c-api/unicode.rst:287
msgid ""
"The hex representation of a C pointer. Mostly equivalent to ``printf(\"%p"
"\")`` except that it is guaranteed to start with the literal ``0x`` "
"regardless of what the platform's ``printf`` yields."
msgstr ""

# 6ae3724ef1f54d59bf72e728be53f59e
# bdd8bf23eacb489dab69e02237a208a3
#: c-api/bytes.rst:109 c-api/unicode.rst:314
msgid ""
"An unrecognized format character causes all the rest of the format string to "
"be copied as-is to the result string, and any extra arguments discarded."
msgstr ""

# 5b787f00696b45f683feb4a00debe076
#: c-api/bytes.rst:115
msgid ""
"Identical to :c:func:`PyBytes_FromFormat` except that it takes exactly two "
"arguments."
msgstr ""

# 2f88e100316b4cf7a89b641fdea485ef
#: c-api/bytes.rst:121
msgid ""
"Return the bytes representation of object *o* that implements the buffer "
"protocol."
msgstr ""

# f081b1d19aad49c38d13933b05148c08
#: c-api/bytes.rst:127
msgid "Return the length of the bytes in bytes object *o*."
msgstr ""

# 15153ff2c8714b61901fc06766dd33ee
#: c-api/bytes.rst:132
msgid "Macro form of :c:func:`PyBytes_Size` but without error checking."
msgstr ""

# 04c691dd65434e4a84513c7e636199cc
#: c-api/bytes.rst:137
msgid ""
"Return a NUL-terminated representation of the contents of *o*.  The pointer "
"refers to the internal buffer of *o*, not a copy.  The data must not be "
"modified in any way, unless the string was just created using "
"``PyBytes_FromStringAndSize(NULL, size)``. It must not be deallocated.  If "
"*o* is not a string object at all, :c:func:`PyBytes_AsString` returns *NULL* "
"and raises :exc:`TypeError`."
msgstr ""

# 9ef28eddc22144b8a059672ca51683a4
#: c-api/bytes.rst:147
msgid "Macro form of :c:func:`PyBytes_AsString` but without error checking."
msgstr ""

# 899546b587494d989c1cada8b36ac75f
#: c-api/bytes.rst:152
msgid ""
"Return a NUL-terminated representation of the contents of the object *obj* "
"through the output variables *buffer* and *length*."
msgstr ""

# ca159e742bd74772b006ea663305e2d5
#: c-api/bytes.rst:155
msgid ""
"If *length* is *NULL*, the resulting buffer may not contain NUL characters; "
"if it does, the function returns ``-1`` and a :exc:`TypeError` is raised."
msgstr ""

# cd7b89a1e44740d398e807c9242c494a
#: c-api/bytes.rst:158
msgid ""
"The buffer refers to an internal string buffer of *obj*, not a copy. The "
"data must not be modified in any way, unless the string was just created "
"using ``PyBytes_FromStringAndSize(NULL, size)``.  It must not be "
"deallocated.  If *string* is not a string object at all, :c:func:"
"`PyBytes_AsStringAndSize` returns ``-1`` and raises :exc:`TypeError`."
msgstr ""

# dd5cbfaa8a764104bae0faaf0e1ede75
#: c-api/bytes.rst:167
msgid ""
"Create a new bytes object in *\\*bytes* containing the contents of *newpart* "
"appended to *bytes*; the caller will own the new reference.  The reference "
"to the old value of *bytes* will be stolen.  If the new string cannot be "
"created, the old reference to *bytes* will still be discarded and the value "
"of *\\*bytes* will be set to *NULL*; the appropriate exception will be set."
msgstr ""

# ef405e49bb7b4e01a791ea84dfb8e4d0
#: c-api/bytes.rst:176
msgid ""
"Create a new string object in *\\*bytes* containing the contents of "
"*newpart* appended to *bytes*.  This version decrements the reference count "
"of *newpart*."
msgstr ""

# 03db4b195d2a40c3abb9d79ff84480eb
#: c-api/bytes.rst:183
msgid ""
"A way to resize a bytes object even though it is \"immutable\". Only use "
"this to build up a brand new bytes object; don't use this if the bytes may "
"already be known in other parts of the code.  It is an error to call this "
"function if the refcount on the input bytes object is not one. Pass the "
"address of an existing bytes object as an lvalue (it may be written into), "
"and the new size desired.  On success, *\\*bytes* holds the resized bytes "
"object and ``0`` is returned; the address in *\\*bytes* may differ from its "
"input value.  If the reallocation fails, the original bytes object at *"
"\\*bytes* is deallocated, *\\*bytes* is set to *NULL*, a memory exception is "
"set, and ``-1`` is returned."
msgstr ""

# 206ba07ace6c4ce092c6116069b367cf
#: c-api/capsule.rst:6
msgid "Capsules"
msgstr ""

# 647a2c5b9b84418bac52a659e09a3412
#: c-api/capsule.rst:10
msgid ""
"Refer to :ref:`using-capsules` for more information on using these objects."
msgstr ""

# 303460ed8bbd42e4b61d61a04b5f3664
#: c-api/capsule.rst:15
msgid ""
"This subtype of :c:type:`PyObject` represents an opaque value, useful for C "
"extension modules who need to pass an opaque value (as a :c:type:`void\\*` "
"pointer) through Python code to other C code.  It is often used to make a C "
"function pointer defined in one module available to other modules, so the "
"regular import mechanism can be used to access C APIs defined in dynamically "
"loaded modules."
msgstr ""

# a0d71ba629114b2ea65e819b4b653833
#: c-api/capsule.rst:24
msgid "The type of a destructor callback for a capsule.  Defined as::"
msgstr ""

# 70e13bf8de7c43bb8b2d94c8dab8d0a4
#: c-api/capsule.rst:28
msgid ""
"See :c:func:`PyCapsule_New` for the semantics of PyCapsule_Destructor "
"callbacks."
msgstr ""

# a5307691fe854ec3ae674fb562aa46fd
#: c-api/capsule.rst:34
msgid "Return true if its argument is a :c:type:`PyCapsule`."
msgstr ""

# 10ac2d0459ac4bff8e71d44322bb0b88
#: c-api/capsule.rst:39
msgid ""
"Create a :c:type:`PyCapsule` encapsulating the *pointer*.  The *pointer* "
"argument may not be *NULL*."
msgstr ""

# 8650089f29c549d2bc92f0f117fce165
#: c-api/capsule.rst:42
msgid "On failure, set an exception and return *NULL*."
msgstr ""

# 3288212bb37849aa8bac9703fc8912d9
#: c-api/capsule.rst:44
msgid ""
"The *name* string may either be *NULL* or a pointer to a valid C string.  If "
"non-*NULL*, this string must outlive the capsule.  (Though it is permitted "
"to free it inside the *destructor*.)"
msgstr ""

# 46727a860dbc4e65b6de641c372d04e8
#: c-api/capsule.rst:48
msgid ""
"If the *destructor* argument is not *NULL*, it will be called with the "
"capsule as its argument when it is destroyed."
msgstr ""

# ebc48848863643f5a4dbcff5fbc1f27b
#: c-api/capsule.rst:51
msgid ""
"If this capsule will be stored as an attribute of a module, the *name* "
"should be specified as ``modulename.attributename``.  This will enable other "
"modules to import the capsule using :c:func:`PyCapsule_Import`."
msgstr ""

# 38b48a619a564527ae12c8089462007c
#: c-api/capsule.rst:58
msgid ""
"Retrieve the *pointer* stored in the capsule.  On failure, set an exception "
"and return *NULL*."
msgstr ""

# 9d0c6abcf540403d9afa67a9cd6097e1
#: c-api/capsule.rst:61
msgid ""
"The *name* parameter must compare exactly to the name stored in the capsule. "
"If the name stored in the capsule is *NULL*, the *name* passed in must also "
"be *NULL*.  Python uses the C function :c:func:`strcmp` to compare capsule "
"names."
msgstr ""

# a71bbb492d564933aa614c27f8f7922c
#: c-api/capsule.rst:69
msgid ""
"Return the current destructor stored in the capsule.  On failure, set an "
"exception and return *NULL*."
msgstr ""

# 69f71a37730e4714a757c067459216c9
#: c-api/capsule.rst:72
msgid ""
"It is legal for a capsule to have a *NULL* destructor.  This makes a *NULL* "
"return code somewhat ambiguous; use :c:func:`PyCapsule_IsValid` or :c:func:"
"`PyErr_Occurred` to disambiguate."
msgstr ""

# 358550eec9404dc78f8b858e1f4b9cb1
#: c-api/capsule.rst:79
msgid ""
"Return the current context stored in the capsule.  On failure, set an "
"exception and return *NULL*."
msgstr ""

# d01a193928eb4a0eb4f027c39392915b
#: c-api/capsule.rst:82
msgid ""
"It is legal for a capsule to have a *NULL* context.  This makes a *NULL* "
"return code somewhat ambiguous; use :c:func:`PyCapsule_IsValid` or :c:func:"
"`PyErr_Occurred` to disambiguate."
msgstr ""

# 00c0ba3ee6f64151be20262f14b62953
#: c-api/capsule.rst:89
msgid ""
"Return the current name stored in the capsule.  On failure, set an exception "
"and return *NULL*."
msgstr ""

# 82593da2b9024638bc1fe56ea1830348
#: c-api/capsule.rst:92
msgid ""
"It is legal for a capsule to have a *NULL* name.  This makes a *NULL* return "
"code somewhat ambiguous; use :c:func:`PyCapsule_IsValid` or :c:func:"
"`PyErr_Occurred` to disambiguate."
msgstr ""

# 7536ef1164aa4c00b709a94cf0ed1c11
#: c-api/capsule.rst:99
msgid ""
"Import a pointer to a C object from a capsule attribute in a module.  The "
"*name* parameter should specify the full name to the attribute, as in "
"``module.attribute``.  The *name* stored in the capsule must match this "
"string exactly.  If *no_block* is true, import the module without blocking "
"(using :c:func:`PyImport_ImportModuleNoBlock`).  If *no_block* is false, "
"import the module conventionally (using :c:func:`PyImport_ImportModule`)."
msgstr ""

# 65bb07806f364236868b895b2e5fcd58
#: c-api/capsule.rst:106
msgid ""
"Return the capsule's internal *pointer* on success.  On failure, set an "
"exception and return *NULL*.  However, if :c:func:`PyCapsule_Import` failed "
"to import the module, and *no_block* was true, no exception is set."
msgstr ""

# fd1606d9a14b4aaa8256a2259778594c
#: c-api/capsule.rst:112
msgid ""
"Determines whether or not *capsule* is a valid capsule.  A valid capsule is "
"non-*NULL*, passes :c:func:`PyCapsule_CheckExact`, has a non-*NULL* pointer "
"stored in it, and its internal name matches the *name* parameter.  (See :c:"
"func:`PyCapsule_GetPointer` for information on how capsule names are "
"compared.)"
msgstr ""

# c066672072174b2ea9aa57556d909167
#: c-api/capsule.rst:118
msgid ""
"In other words, if :c:func:`PyCapsule_IsValid` returns a true value, calls "
"to any of the accessors (any function starting with :c:func:`PyCapsule_Get`) "
"are guaranteed to succeed."
msgstr ""

# 5b73153873a14d45a3fa7c29d324422c
#: c-api/capsule.rst:122
msgid ""
"Return a nonzero value if the object is valid and matches the name passed "
"in. Return 0 otherwise.  This function will not fail."
msgstr ""

# b3bb93635157481b88ad1c4613772bcb
#: c-api/capsule.rst:127
msgid "Set the context pointer inside *capsule* to *context*."
msgstr ""

# 2a554bba1c9d4d8b900654c63e7cef9e
# 928240b699e84d31b397a0f81ede1e29
# b14bc8df05744656a7f0e98abb767c9f
# 92cfeeb22c7d4b1eb5e18704b1eb51ef
#: c-api/capsule.rst:129 c-api/capsule.rst:135 c-api/capsule.rst:143
#: c-api/capsule.rst:150
msgid "Return 0 on success.  Return nonzero and set an exception on failure."
msgstr ""

# 43696b0f7fad4fc58d0c7bb07b8dfaf5
#: c-api/capsule.rst:133
msgid "Set the destructor inside *capsule* to *destructor*."
msgstr ""

# c9387404bc134c3c9b32e3dc6f7081e6
#: c-api/capsule.rst:139
msgid ""
"Set the name inside *capsule* to *name*.  If non-*NULL*, the name must "
"outlive the capsule.  If the previous *name* stored in the capsule was not "
"*NULL*, no attempt is made to free it."
msgstr ""

# 1e332ed61c954f39a59389084c7f4019
#: c-api/capsule.rst:147
msgid ""
"Set the void pointer inside *capsule* to *pointer*.  The pointer may not be "
"*NULL*."
msgstr ""

# 900bcb49261d464fa010abe2b0454d02
#: c-api/cell.rst:6
msgid "Cell Objects"
msgstr ""

# ace6994c67b44990a9285876c193af80
#: c-api/cell.rst:8
msgid ""
"\"Cell\" objects are used to implement variables referenced by multiple "
"scopes. For each such variable, a cell object is created to store the value; "
"the local variables of each stack frame that references the value contains a "
"reference to the cells from outer scopes which also use that variable.  When "
"the value is accessed, the value contained in the cell is used instead of "
"the cell object itself.  This de-referencing of the cell object requires "
"support from the generated byte-code; these are not automatically de-"
"referenced when accessed. Cell objects are not likely to be useful elsewhere."
msgstr ""

# 7528111529614688a3039d8027463c2b
#: c-api/cell.rst:20
msgid "The C structure used for cell objects."
msgstr ""

# ca448efe334c4b319b9e1a27024e4f49
#: c-api/cell.rst:25
msgid "The type object corresponding to cell objects."
msgstr ""

# 556920ef0a0b4a85bf8af1c3edb9d7b6
#: c-api/cell.rst:30
msgid "Return true if *ob* is a cell object; *ob* must not be *NULL*."
msgstr ""

# edfaf772afba477c9fc9f2f64aa5ded7
#: c-api/cell.rst:35
msgid ""
"Create and return a new cell object containing the value *ob*. The parameter "
"may be *NULL*."
msgstr ""

# a09e641a518e49c490e7c5ba61b2eebb
#: c-api/cell.rst:41
msgid "Return the contents of the cell *cell*."
msgstr ""

# b192e2343fc94461a67b492b71a80a55
#: c-api/cell.rst:46
msgid ""
"Return the contents of the cell *cell*, but without checking that *cell* is "
"non-*NULL* and a cell object."
msgstr ""

# 069b7eb890f4477f9be0c119d20d32e1
#: c-api/cell.rst:52
msgid ""
"Set the contents of the cell object *cell* to *value*.  This releases the "
"reference to any current content of the cell. *value* may be *NULL*.  *cell* "
"must be non-*NULL*; if it is not a cell object, ``-1`` will be returned.  On "
"success, ``0`` will be returned."
msgstr ""

# 9ed26fa76f724b40aa2ffd08cfceabae
#: c-api/cell.rst:60
msgid ""
"Sets the value of the cell object *cell* to *value*.  No reference counts "
"are adjusted, and no checks are made for safety; *cell* must be non-*NULL* "
"and must be a cell object."
msgstr ""

# bd338616db554507818399a9b1bd76ff
#: c-api/code.rst:6
msgid "Code Objects"
msgstr ""

# f454e3c097d54fdcb3a83070f314fdd6
#: c-api/code.rst:14
msgid ""
"Code objects are a low-level detail of the CPython implementation. Each one "
"represents a chunk of executable code that hasn't yet been bound into a "
"function."
msgstr ""

# 6f9f4e7216fd434d81814873a75f438f
#: c-api/code.rst:20
msgid ""
"The C structure of the objects used to describe code objects.  The fields of "
"this type are subject to change at any time."
msgstr ""

# 65bcb76880f347f598360416ee6b226c
#: c-api/code.rst:26
msgid ""
"This is an instance of :c:type:`PyTypeObject` representing the Python :class:"
"`code` type."
msgstr ""

# a0e383b1521a4bafaca43d973b10d459
#: c-api/code.rst:32
msgid "Return true if *co* is a :class:`code` object"
msgstr ""

# 902ffb0ee7044c1b8910f3ae64d2d122
#: c-api/code.rst:36
msgid "Return the number of free variables in *co*."
msgstr ""

# 3ce63c2446324e33a52d0ad4dc87a4e8
#: c-api/code.rst:40
msgid ""
"Return a new code object.  If you need a dummy code object to create a "
"frame, use :c:func:`PyCode_NewEmpty` instead.  Calling :c:func:`PyCode_New` "
"directly can bind you to a precise Python version since the definition of "
"the bytecode changes often."
msgstr ""

# b01b10ddac65412385a4b82337cfca7e
#: c-api/code.rst:48
msgid ""
"Return a new empty code object with the specified filename, function name, "
"and first line number.  It is illegal to :func:`exec` or :func:`eval` the "
"resulting code object."
msgstr ""

# ca0bde8f98194f16a92975e4ee245a7b
#: c-api/codec.rst:4
msgid "Codec registry and support functions"
msgstr ""

# df2179981f4d4374ba0ab5993fb19ded
#: c-api/codec.rst:8
msgid "Register a new codec search function."
msgstr ""

# ef2719beacbb4cb382ba84f669742966
#: c-api/codec.rst:10
msgid ""
"As side effect, this tries to load the :mod:`encodings` package, if not yet "
"done, to make sure that it is always first in the list of search functions."
msgstr ""

# 15764ba10b9241339f05971ab79292b7
#: c-api/codec.rst:15
msgid ""
"Return ``1`` or ``0`` depending on whether there is a registered codec for "
"the given *encoding*."
msgstr ""

# 7a64b6e779794d0b90c221cf18c71d28
#: c-api/codec.rst:20
msgid "Generic codec based encoding API."
msgstr ""

# 40c417bf8391470f8e9f8750adfce9c6
#: c-api/codec.rst:22
msgid ""
"*object* is passed through the encoder function found for the given "
"*encoding* using the error handling method defined by *errors*.  *errors* "
"may be *NULL* to use the default method defined for the codec.  Raises a :"
"exc:`LookupError` if no encoder can be found."
msgstr ""

# adf69c0ded40499a988b8f7c32ce91f4
#: c-api/codec.rst:29
msgid "Generic codec based decoding API."
msgstr ""

# a5cb2c017c474d04855a3fd927b14016
#: c-api/codec.rst:31
msgid ""
"*object* is passed through the decoder function found for the given "
"*encoding* using the error handling method defined by *errors*.  *errors* "
"may be *NULL* to use the default method defined for the codec.  Raises a :"
"exc:`LookupError` if no encoder can be found."
msgstr ""

# 2c010a4035c54bb6935f7dd11c954834
#: c-api/codec.rst:38
msgid "Codec lookup API"
msgstr ""

# e0511e62038f4041a413533c00197701
#: c-api/codec.rst:40
msgid ""
"In the following functions, the *encoding* string is looked up converted to "
"all lower-case characters, which makes encodings looked up through this "
"mechanism effectively case-insensitive.  If no codec is found, a :exc:"
"`KeyError` is set and *NULL* returned."
msgstr ""

# d7fe90cef25341d3b52da81e305dccc6
#: c-api/codec.rst:47
msgid "Get an encoder function for the given *encoding*."
msgstr ""

# 97818e6830df4fcbb80e04c687896ceb
#: c-api/codec.rst:51
msgid "Get a decoder function for the given *encoding*."
msgstr ""

# 0ffe2488a66349bfb6f9248814b19c64
#: c-api/codec.rst:55
msgid "Get an :class:`IncrementalEncoder` object for the given *encoding*."
msgstr ""

# 51fc5267b3ce47d3a5cbcd2b0bf03a97
#: c-api/codec.rst:59
msgid "Get an :class:`IncrementalDecoder` object for the given *encoding*."
msgstr ""

# da7693df6a6a424fad2fc49324968769
#: c-api/codec.rst:63
msgid "Get a :class:`StreamReader` factory function for the given *encoding*."
msgstr ""

# 35fe324ac78d49faa60b2fd00edbf863
#: c-api/codec.rst:67
msgid "Get a :class:`StreamWriter` factory function for the given *encoding*."
msgstr ""

# 179001e773954eedb47229ebb1e33fc4
#: c-api/codec.rst:71
msgid "Registry API for Unicode encoding error handlers"
msgstr ""

# 5abbc2cf664b4f0883e2bd3be0beeacf
#: c-api/codec.rst:75
msgid ""
"Register the error handling callback function *error* under the given "
"*name*. This callback function will be called by a codec when it encounters "
"unencodable characters/undecodable bytes and *name* is specified as the "
"error parameter in the call to the encode/decode function."
msgstr ""

# 2f3dbd2bf34f4758ba6300d291677060
#: c-api/codec.rst:80
msgid ""
"The callback gets a single argument, an instance of :exc:"
"`UnicodeEncodeError`, :exc:`UnicodeDecodeError` or :exc:"
"`UnicodeTranslateError` that holds information about the problematic "
"sequence of characters or bytes and their offset in the original string "
"(see :ref:`unicodeexceptions` for functions to extract this information).  "
"The callback must either raise the given exception, or return a two-item "
"tuple containing the replacement for the problematic sequence, and an "
"integer giving the offset in the original string at which encoding/decoding "
"should be resumed."
msgstr ""

# d07de5c0853044eb9942d1d862e0c8a4
#: c-api/codec.rst:90
msgid "Return ``0`` on success, ``-1`` on error."
msgstr ""

# 6e8c1819c21848bb813594f1dce88a68
#: c-api/codec.rst:94
msgid ""
"Lookup the error handling callback function registered under *name*.  As a "
"special case *NULL* can be passed, in which case the error handling callback "
"for \"strict\" will be returned."
msgstr ""

# 64a77c21efc14b39926dc70d5b966ee4
#: c-api/codec.rst:100
msgid "Raise *exc* as an exception."
msgstr ""

# c18bb373c4154d8eaea53d076e381199
#: c-api/codec.rst:104
msgid "Ignore the unicode error, skipping the faulty input."
msgstr ""

# 5b83e1802a8d45e8b4d0e1bb6318ca41
#: c-api/codec.rst:108
msgid "Replace the unicode encode error with ``?`` or ``U+FFFD``."
msgstr ""

# 2516bf8746cf4a1c9bf1f36d8921c949
#: c-api/codec.rst:112
msgid "Replace the unicode encode error with XML character references."
msgstr ""

# 2a9ecf3a4f704d20890f347859c09889
#: c-api/codec.rst:116
msgid ""
"Replace the unicode encode error with backslash escapes (``\\x``, ``\\u`` "
"and ``\\U``)."
msgstr ""

# e4b0233750e94c959e617c831fc908fd
#: c-api/complex.rst:6
msgid "Complex Number Objects"
msgstr ""

# 45d293e3a82e4cc78c08c31782ad220c
#: c-api/complex.rst:10
msgid ""
"Python's complex number objects are implemented as two distinct types when "
"viewed from the C API:  one is the Python object exposed to Python programs, "
"and the other is a C structure which represents the actual complex number "
"value. The API provides functions for working with both."
msgstr ""

# 6d58c157893f4c26952762d27222e26d
#: c-api/complex.rst:17
msgid "Complex Numbers as C Structures"
msgstr ""

# 6efe1c2f9a23439fb1494cac93151ec6
#: c-api/complex.rst:19
msgid ""
"Note that the functions which accept these structures as parameters and "
"return them as results do so *by value* rather than dereferencing them "
"through pointers.  This is consistent throughout the API."
msgstr ""

# 9899ff4139bc4011a6d09f81df6b7413
#: c-api/complex.rst:26
msgid ""
"The C structure which corresponds to the value portion of a Python complex "
"number object.  Most of the functions for dealing with complex number "
"objects use structures of this type as input or output values, as "
"appropriate.  It is defined as::"
msgstr ""

# 3ae913e9b8f244d6881ede554583acbe
#: c-api/complex.rst:39
msgid ""
"Return the sum of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr ""

# 42bd3f95e09c4a7fba65a84d1b9217e3
#: c-api/complex.rst:45
msgid ""
"Return the difference between two complex numbers, using the C :c:type:"
"`Py_complex` representation."
msgstr ""

# 788d75a1ea414444ada091a5a273f272
#: c-api/complex.rst:51
msgid ""
"Return the negation of the complex number *complex*, using the C :c:type:"
"`Py_complex` representation."
msgstr ""

# 5135b37662f9462b8433583f337a1486
#: c-api/complex.rst:57
msgid ""
"Return the product of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr ""

# 2ad154ee21f540d6884cd7e45d0e568f
#: c-api/complex.rst:63
msgid ""
"Return the quotient of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr ""

# 13da7a062f7a4d5f99fc5abdbaeb521f
#: c-api/complex.rst:66
msgid ""
"If *divisor* is null, this method returns zero and sets :c:data:`errno` to :"
"c:data:`EDOM`."
msgstr ""

# cefa1195d4af45cf8cefd7939710d9e6
#: c-api/complex.rst:72
msgid ""
"Return the exponentiation of *num* by *exp*, using the C :c:type:"
"`Py_complex` representation."
msgstr ""

# e3373d59a4ba4fe884208d84c5c5a92f
#: c-api/complex.rst:75
msgid ""
"If *num* is null and *exp* is not a positive real number, this method "
"returns zero and sets :c:data:`errno` to :c:data:`EDOM`."
msgstr ""

# 7ac4c7e92b0d486e8a65d57e61f1730f
#: c-api/complex.rst:80
msgid "Complex Numbers as Python Objects"
msgstr ""

# 14d28635be0d4118b6638e10044134cd
#: c-api/complex.rst:85
msgid ""
"This subtype of :c:type:`PyObject` represents a Python complex number object."
msgstr ""

# 93af1e90b4734791a1a4f545520fb889
#: c-api/complex.rst:90
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python complex number "
"type. It is the same object as :class:`complex` in the Python layer."
msgstr ""

# 2179619ef5c64096bb8e883fde66f97b
#: c-api/complex.rst:96
msgid ""
"Return true if its argument is a :c:type:`PyComplexObject` or a subtype of :"
"c:type:`PyComplexObject`."
msgstr ""

# d535e4d711be4b258e17465cf07aae33
#: c-api/complex.rst:102
msgid ""
"Return true if its argument is a :c:type:`PyComplexObject`, but not a "
"subtype of :c:type:`PyComplexObject`."
msgstr ""

# 72494da5e2cf4fc6b349e723fbad5d44
#: c-api/complex.rst:108
msgid ""
"Create a new Python complex number object from a C :c:type:`Py_complex` "
"value."
msgstr ""

# 9ba137e1c28f40daa28d24a2c344fdaf
#: c-api/complex.rst:113
msgid "Return a new :c:type:`PyComplexObject` object from *real* and *imag*."
msgstr ""

# f857f466a7b34b2f90459bc7d9319bb1
#: c-api/complex.rst:118
msgid "Return the real part of *op* as a C :c:type:`double`."
msgstr ""

# 12884635f3864cb2b45555f2f4707df2
#: c-api/complex.rst:123
msgid "Return the imaginary part of *op* as a C :c:type:`double`."
msgstr ""

# 7e147f61910c4d23b97ee471d7d59a78
#: c-api/complex.rst:128
msgid "Return the :c:type:`Py_complex` value of the complex number *op*."
msgstr ""

# 429867a832474d17bec0599256724911
#: c-api/complex.rst:130
msgid ""
"If *op* is not a Python complex number object but has a :meth:`__complex__` "
"method, this method will first be called to convert *op* to a Python complex "
"number object. Upon failure, this method returns ``-1.0`` as a real value."
msgstr ""

# 2395699dbd3d4a5e9b57bad41553cf2e
#: c-api/concrete.rst:8
msgid "Concrete Objects Layer"
msgstr ""

# c9949ad6803a42aa853d2cd49d9d69b8
#: c-api/concrete.rst:10
msgid ""
"The functions in this chapter are specific to certain Python object types. "
"Passing them an object of the wrong type is not a good idea; if you receive "
"an object from a Python program and you are not sure that it has the right "
"type, you must perform a type check first; for example, to check that an "
"object is a dictionary, use :c:func:`PyDict_Check`.  The chapter is "
"structured like the \"family tree\" of Python object types."
msgstr ""

# a1d60f4a7c53434899aa6866c96c8a42
#: c-api/concrete.rst:19
msgid ""
"While the functions described in this chapter carefully check the type of "
"the objects which are passed in, many of them do not check for *NULL* being "
"passed instead of a valid object.  Allowing *NULL* to be passed in can cause "
"memory access violations and immediate termination of the interpreter."
msgstr ""

# 34168edf28c44ab4bc82dc248f409179
#: c-api/concrete.rst:28
msgid "Fundamental Objects"
msgstr ""

# 1866caed9dc74a2f8bff8a09dd38d387
#: c-api/concrete.rst:30
msgid ""
"This section describes Python type objects and the singleton object ``None``."
msgstr ""

# 7685db0a106b4a318508bfe4b4259549
#: c-api/concrete.rst:41
msgid "Numeric Objects"
msgstr ""

# 3f263cca6f7843b897e28eaa99a80dbb
#: c-api/concrete.rst:56
msgid "Sequence Objects"
msgstr ""

# 9a476bfbe8db428384b6dd75083a84a8
#: c-api/concrete.rst:60
msgid ""
"Generic operations on sequence objects were discussed in the previous "
"chapter; this section deals with the specific kinds of sequence objects that "
"are intrinsic to the Python language."
msgstr ""

# bd1d180f97e5454e85e055eddf32ebb9
#: c-api/concrete.rst:78
msgid "Mapping Objects"
msgstr ""

# 9058c95cd0204e349464e228b59360c5
#: c-api/concrete.rst:90
msgid "Other Objects"
msgstr ""

# 63538334efe54788948f4175af39578d
#: c-api/conversion.rst:6
msgid "String conversion and formatting"
msgstr ""

# 414bd89208e64a73988e2fe79080123d
#: c-api/conversion.rst:8
msgid "Functions for number conversion and formatted string output."
msgstr ""

# ff8a9025aae4450a826c0c8fb1060f1e
#: c-api/conversion.rst:13
msgid ""
"Output not more than *size* bytes to *str* according to the format string "
"*format* and the extra arguments. See the Unix man page :manpage:"
"`snprintf(2)`."
msgstr ""

# cddbe1beb2fb4a5fb2847d8c8b8319b4
#: c-api/conversion.rst:19
msgid ""
"Output not more than *size* bytes to *str* according to the format string "
"*format* and the variable argument list *va*. Unix man page :manpage:"
"`vsnprintf(2)`."
msgstr ""

# 45639b4a16c244109cf2f0f715f3ec4e
#: c-api/conversion.rst:23
msgid ""
":c:func:`PyOS_snprintf` and :c:func:`PyOS_vsnprintf` wrap the Standard C "
"library functions :c:func:`snprintf` and :c:func:`vsnprintf`. Their purpose "
"is to guarantee consistent behavior in corner cases, which the Standard C "
"functions do not."
msgstr ""

# ff2b1de47643493584a866d6ec53df83
#: c-api/conversion.rst:28
msgid ""
"The wrappers ensure that *str*[*size*-1] is always ``'\\0'`` upon return. "
"They never write more than *size* bytes (including the trailing ``'\\0'``) "
"into str. Both functions require that ``str != NULL``, ``size > 0`` and "
"``format != NULL``."
msgstr ""

# 3c21e4757de54280ae7e155c12b6a36b
#: c-api/conversion.rst:33
msgid ""
"If the platform doesn't have :c:func:`vsnprintf` and the buffer size needed "
"to avoid truncation exceeds *size* by more than 512 bytes, Python aborts "
"with a *Py_FatalError*."
msgstr ""

# 3f6982d5afdc4961906c638d7827c5ff
#: c-api/conversion.rst:37
msgid ""
"The return value (*rv*) for these functions should be interpreted as follows:"
msgstr ""

# 5ba26342894a404ebc351b57b4bdcad9
#: c-api/conversion.rst:39
msgid ""
"When ``0 <= rv < size``, the output conversion was successful and *rv* "
"characters were written to *str* (excluding the trailing ``'\\0'`` byte at "
"*str*[*rv*])."
msgstr ""

# beacc896ac64452ba6c485894fc826c1
#: c-api/conversion.rst:43
msgid ""
"When ``rv >= size``, the output conversion was truncated and a buffer with "
"``rv + 1`` bytes would have been needed to succeed. *str*[*size*-1] is "
"``'\\0'`` in this case."
msgstr ""

# ea12d57acab140feb443ce7e84d14328
#: c-api/conversion.rst:47
msgid ""
"When ``rv < 0``, \"something bad happened.\" *str*[*size*-1] is ``'\\0'`` in "
"this case too, but the rest of *str* is undefined. The exact cause of the "
"error depends on the underlying platform."
msgstr ""

# 050bf86e14fb4c8da68b893e6f16265f
#: c-api/conversion.rst:51
msgid ""
"The following functions provide locale-independent string to number "
"conversions."
msgstr ""

# 486be99f29cd46858765019d102a92ce
#: c-api/conversion.rst:56
msgid ""
"Convert a string ``s`` to a :c:type:`double`, raising a Python exception on "
"failure.  The set of accepted strings corresponds to the set of strings "
"accepted by Python's :func:`float` constructor, except that ``s`` must not "
"have leading or trailing whitespace. The conversion is independent of the "
"current locale."
msgstr ""

# 28d497bfe3db44eeb4ec120428b0b71a
#: c-api/conversion.rst:62
msgid ""
"If ``endptr`` is ``NULL``, convert the whole string.  Raise ValueError and "
"return ``-1.0`` if the string is not a valid representation of a floating-"
"point number."
msgstr ""

# 58ce375bd04e4844a56d40f8143247d3
#: c-api/conversion.rst:66
msgid ""
"If endptr is not ``NULL``, convert as much of the string as possible and set "
"``*endptr`` to point to the first unconverted character.  If no initial "
"segment of the string is the valid representation of a floating-point "
"number, set ``*endptr`` to point to the beginning of the string, raise "
"ValueError, and return ``-1.0``."
msgstr ""

# 20efe0e0148a4e85addffe6189d00f50
#: c-api/conversion.rst:73
msgid ""
"If ``s`` represents a value that is too large to store in a float (for "
"example, ``\"1e500\"`` is such a string on many platforms) then if "
"``overflow_exception`` is ``NULL`` return ``Py_HUGE_VAL`` (with an "
"appropriate sign) and don't set any exception.  Otherwise, "
"``overflow_exception`` must point to a Python exception object; raise that "
"exception and return ``-1.0``.  In both cases, set ``*endptr`` to point to "
"the first character after the converted value."
msgstr ""

# 68d60ecc688f40f599814e917dd985d1
#: c-api/conversion.rst:81
msgid ""
"If any other error occurs during the conversion (for example an out-of-"
"memory error), set the appropriate Python exception and return ``-1.0``."
msgstr ""

# dcd3f80db6ec4d23ac3361bf50b35702
#: c-api/conversion.rst:90
msgid ""
"Convert a :c:type:`double` *val* to a string using supplied *format_code*, "
"*precision*, and *flags*."
msgstr ""

# 685962750fb143a8ae84529119a23673
#: c-api/conversion.rst:93
msgid ""
"*format_code* must be one of ``'e'``, ``'E'``, ``'f'``, ``'F'``, ``'g'``, "
"``'G'`` or ``'r'``.  For ``'r'``, the supplied *precision* must be 0 and is "
"ignored.  The ``'r'`` format code specifies the standard :func:`repr` format."
msgstr ""

# f627a0a24e9b46f78e1591167132f673
#: c-api/conversion.rst:98
msgid ""
"*flags* can be zero or more of the values *Py_DTSF_SIGN*, "
"*Py_DTSF_ADD_DOT_0*, or *Py_DTSF_ALT*, or-ed together:"
msgstr ""

# ba9dab53da05489bb2c37ce924c66723
#: c-api/conversion.rst:101
msgid ""
"*Py_DTSF_SIGN* means to always precede the returned string with a sign "
"character, even if *val* is non-negative."
msgstr ""

# cca9ed23bffa41a299e3cda22a764c99
#: c-api/conversion.rst:104
msgid ""
"*Py_DTSF_ADD_DOT_0* means to ensure that the returned string will not look "
"like an integer."
msgstr ""

# 637d6c76743f428099e03bf40a620871
#: c-api/conversion.rst:107
msgid ""
"*Py_DTSF_ALT* means to apply \"alternate\" formatting rules.  See the "
"documentation for the :c:func:`PyOS_snprintf` ``'#'`` specifier for details."
msgstr ""

# d5813318ef7d494c91fc193d4350e63e
#: c-api/conversion.rst:111
msgid ""
"If *ptype* is non-NULL, then the value it points to will be set to one of "
"*Py_DTST_FINITE*, *Py_DTST_INFINITE*, or *Py_DTST_NAN*, signifying that "
"*val* is a finite number, an infinite number, or not a number, respectively."
msgstr ""

# d08d76599b1144e5baa863819c455905
#: c-api/conversion.rst:115
msgid ""
"The return value is a pointer to *buffer* with the converted string or "
"*NULL* if the conversion failed. The caller is responsible for freeing the "
"returned string by calling :c:func:`PyMem_Free`."
msgstr ""

# 40c79a3d9b2e491fb21a687966fb17db
#: c-api/conversion.rst:124
msgid ""
"Case insensitive comparison of strings. The function works almost "
"identically to :c:func:`strcmp` except that it ignores the case."
msgstr ""

# cad9a26d77da452d9aff810b6a22ebd0
#: c-api/conversion.rst:130
msgid ""
"Case insensitive comparison of strings. The function works almost "
"identically to :c:func:`strncmp` except that it ignores the case."
msgstr ""

# 37d3b29715ca4a718ce92947e603d24f
#: c-api/datetime.rst:6
msgid "DateTime Objects"
msgstr ""

# 97fa9ce33399495e9ed714103cd0d7a0
#: c-api/datetime.rst:8
msgid ""
"Various date and time objects are supplied by the :mod:`datetime` module. "
"Before using any of these functions, the header file :file:`datetime.h` must "
"be included in your source (note that this is not included by :file:`Python."
"h`), and the macro :c:macro:`PyDateTime_IMPORT` must be invoked, usually as "
"part of the module initialisation function.  The macro puts a pointer to a C "
"structure into a static variable, :c:data:`PyDateTimeAPI`, that is used by "
"the following macros."
msgstr ""

# bfe244625f3f4f028c666d1ad90c5989
#: c-api/datetime.rst:16
msgid "Type-check macros:"
msgstr ""

# a1d29394a95243a1bf814b75366c82f1
#: c-api/datetime.rst:20
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateType` or a subtype "
"of :c:data:`PyDateTime_DateType`.  *ob* must not be *NULL*."
msgstr ""

# f820b039f75240f9849a4f0fc88b3c45
#: c-api/datetime.rst:26
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateType`. *ob* must not "
"be *NULL*."
msgstr ""

# cc1cf1f583104de5a379150da9e54565
#: c-api/datetime.rst:32
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateTimeType` or a "
"subtype of :c:data:`PyDateTime_DateTimeType`.  *ob* must not be *NULL*."
msgstr ""

# cef1c088eb4d4ebcb66daf44963320ab
#: c-api/datetime.rst:38
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateTimeType`. *ob* must "
"not be *NULL*."
msgstr ""

# d62077dc3e984c949bba909ecb635598
#: c-api/datetime.rst:44
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TimeType` or a subtype "
"of :c:data:`PyDateTime_TimeType`.  *ob* must not be *NULL*."
msgstr ""

# e253bbf5cf0e408db60b24e2008035b2
#: c-api/datetime.rst:50
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TimeType`. *ob* must not "
"be *NULL*."
msgstr ""

# 538581877c814cefbbcade79bcb913eb
#: c-api/datetime.rst:56
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DeltaType` or a subtype "
"of :c:data:`PyDateTime_DeltaType`.  *ob* must not be *NULL*."
msgstr ""

# 26fe7d4abdb944f1b266ecb554a4dd2d
#: c-api/datetime.rst:62
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DeltaType`. *ob* must not "
"be *NULL*."
msgstr ""

# 13ee96492b4f44a0b79152dfe9a69cd7
#: c-api/datetime.rst:68
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TZInfoType` or a subtype "
"of :c:data:`PyDateTime_TZInfoType`.  *ob* must not be *NULL*."
msgstr ""

# b88b026e706b45db9263354bef5d105a
#: c-api/datetime.rst:74
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TZInfoType`. *ob* must "
"not be *NULL*."
msgstr ""

# 20766611e7774eecb599e06df0b9c2f1
#: c-api/datetime.rst:78
msgid "Macros to create objects:"
msgstr ""

# fc86c8362a7e4e5e8267400c5d5926e3
#: c-api/datetime.rst:82
msgid ""
"Return a ``datetime.date`` object with the specified year, month and day."
msgstr ""

# 2e74b10221bf4a55bf28bf4f34556fba
#: c-api/datetime.rst:87
msgid ""
"Return a ``datetime.datetime`` object with the specified year, month, day, "
"hour, minute, second and microsecond."
msgstr ""

# dd87d3ef40fa49f7b3ef982a73a2f7a2
#: c-api/datetime.rst:93
msgid ""
"Return a ``datetime.time`` object with the specified hour, minute, second "
"and microsecond."
msgstr ""

# 383267b648b14c3a83fe0dd3c0fbf0c4
#: c-api/datetime.rst:99
msgid ""
"Return a ``datetime.timedelta`` object representing the given number of "
"days, seconds and microseconds.  Normalization is performed so that the "
"resulting number of microseconds and seconds lie in the ranges documented "
"for ``datetime.timedelta`` objects."
msgstr ""

# b2edbb5aa98845a0863fa4fb874b1e71
#: c-api/datetime.rst:105
msgid ""
"Macros to extract fields from date objects.  The argument must be an "
"instance of :c:data:`PyDateTime_Date`, including subclasses (such as :c:data:"
"`PyDateTime_DateTime`).  The argument must not be *NULL*, and the type is "
"not checked:"
msgstr ""

# e65e47f1c78d4e58b0d21413c436f4bb
#: c-api/datetime.rst:112
msgid "Return the year, as a positive int."
msgstr ""

# d920cb12b38b4811bb6d29662d65d3d4
#: c-api/datetime.rst:117
msgid "Return the month, as an int from 1 through 12."
msgstr ""

# 87823909531b42a7b152e9c5a85f71e0
#: c-api/datetime.rst:122
msgid "Return the day, as an int from 1 through 31."
msgstr ""

# 337133501e6a40fa935dc8bc6eb141d4
#: c-api/datetime.rst:125
msgid ""
"Macros to extract fields from datetime objects.  The argument must be an "
"instance of :c:data:`PyDateTime_DateTime`, including subclasses. The "
"argument must not be *NULL*, and the type is not checked:"
msgstr ""

# 68c6eb3c5813488d9da4ba6ee05de367
# 4824307b70914338b331ca37eefd3350
#: c-api/datetime.rst:131 c-api/datetime.rst:155
msgid "Return the hour, as an int from 0 through 23."
msgstr ""

# 711858e72b0d43468d5ca6346501d79a
# b7eb8398c4f344b88d03e33f09b8460f
#: c-api/datetime.rst:136 c-api/datetime.rst:160
msgid "Return the minute, as an int from 0 through 59."
msgstr ""

# 056c1dadc2a740aabae27d516e3f49c8
# fb3b60ffe4644c148380c413733555f3
#: c-api/datetime.rst:141 c-api/datetime.rst:165
msgid "Return the second, as an int from 0 through 59."
msgstr ""

# 49c6c982792e4ca9b1b0d1c7e601c313
# 204f980244a44db380c513c433ba860d
#: c-api/datetime.rst:146 c-api/datetime.rst:170
msgid "Return the microsecond, as an int from 0 through 999999."
msgstr ""

# 1a6933ae24a7458d9690a11ecb80aed4
#: c-api/datetime.rst:149
msgid ""
"Macros to extract fields from time objects.  The argument must be an "
"instance of :c:data:`PyDateTime_Time`, including subclasses. The argument "
"must not be *NULL*, and the type is not checked:"
msgstr ""

# a4b2dfc3c90542388bc05824df9a639e
#: c-api/datetime.rst:173
msgid "Macros for the convenience of modules implementing the DB API:"
msgstr ""

# d479dfd8568044489de00e94e5374e49
#: c-api/datetime.rst:177
msgid ""
"Create and return a new ``datetime.datetime`` object given an argument tuple "
"suitable for passing to ``datetime.datetime.fromtimestamp()``."
msgstr ""

# b48c520d908c4cd2a5ae184ce83d38c7
#: c-api/datetime.rst:183
msgid ""
"Create and return a new ``datetime.date`` object given an argument tuple "
"suitable for passing to ``datetime.date.fromtimestamp()``."
msgstr ""

# 30302d043780474fadc9834486e4aa84
#: c-api/descriptor.rst:6
msgid "Descriptor Objects"
msgstr ""

# a46e346020f24140b67246f1f15924ac
#: c-api/descriptor.rst:8
msgid ""
"\"Descriptors\" are objects that describe some attribute of an object. They "
"are found in the dictionary of type objects."
msgstr ""

# 90be669d3f4d46b9a9e1efcee30d78ef
#: c-api/descriptor.rst:15
msgid "The type object for the built-in descriptor types."
msgstr ""

# 3fa806ca6c4542479df18f84af5d6151
#: c-api/descriptor.rst:35
msgid ""
"Return true if the descriptor objects *descr* describes a data attribute, or "
"false if it describes a method.  *descr* must be a descriptor object; there "
"is no error checking."
msgstr ""

# 0c74c31b7d484407bbf530b8e75e645c
#: c-api/dict.rst:6
msgid "Dictionary Objects"
msgstr ""

# 9fc802e4fe384436a5407b7b28dd32ff
#: c-api/dict.rst:13
msgid ""
"This subtype of :c:type:`PyObject` represents a Python dictionary object."
msgstr ""

# 5018250e5a2d4d089e6890b5f205fd3c
#: c-api/dict.rst:18
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python dictionary "
"type.  This is the same object as :class:`dict` in the Python layer."
msgstr ""

# be9c576c8bd34c03aef44f9664644b9a
#: c-api/dict.rst:24
msgid ""
"Return true if *p* is a dict object or an instance of a subtype of the dict "
"type."
msgstr ""

# 1393a47b66d14d3f9e88270d7be31ebc
#: c-api/dict.rst:30
msgid ""
"Return true if *p* is a dict object, but not an instance of a subtype of the "
"dict type."
msgstr ""

# 444f64cdb54b4134af0ed0c7b26e04e8
#: c-api/dict.rst:36
msgid "Return a new empty dictionary, or *NULL* on failure."
msgstr ""

# b97f799408d3451a91d80e567236b88a
#: c-api/dict.rst:41
msgid ""
"Return a proxy object for a mapping which enforces read-only behavior. This "
"is normally used to create a proxy to prevent modification of the dictionary "
"for non-dynamic class types."
msgstr ""

# 1466ed57a3fc45b08d704207e1a323e7
#: c-api/dict.rst:48
msgid "Empty an existing dictionary of all key-value pairs."
msgstr ""

# d3178c68d83a47edaffdee8f7f8092c8
#: c-api/dict.rst:53
msgid ""
"Determine if dictionary *p* contains *key*.  If an item in *p* is matches "
"*key*, return ``1``, otherwise return ``0``.  On error, return ``-1``. This "
"is equivalent to the Python expression ``key in p``."
msgstr ""

# c741db18cb3f40e6998849bad980f4c1
#: c-api/dict.rst:60
msgid "Return a new dictionary that contains the same key-value pairs as *p*."
msgstr ""

# 74c6a03f0b7f4d028cdb522f41d5d215
#: c-api/dict.rst:65
msgid ""
"Insert *value* into the dictionary *p* with a key of *key*.  *key* must be :"
"term:`hashable`; if it isn't, :exc:`TypeError` will be raised. Return ``0`` "
"on success or ``-1`` on failure."
msgstr ""

# 36de7bbe1cff4b4f912cf93b842dde81
#: c-api/dict.rst:74
msgid ""
"Insert *value* into the dictionary *p* using *key* as a key. *key* should be "
"a :c:type:`char\\*`.  The key object is created using "
"``PyUnicode_FromString(key)``.  Return ``0`` on success or ``-1`` on failure."
msgstr ""

# cc12e6c1bf4e4ed9aab0f8b85bb9ba3f
#: c-api/dict.rst:82
msgid ""
"Remove the entry in dictionary *p* with key *key*. *key* must be hashable; "
"if it isn't, :exc:`TypeError` is raised.  Return ``0`` on success or ``-1`` "
"on failure."
msgstr ""

# 788622a352d746059dc41203ade08c1f
#: c-api/dict.rst:89
msgid ""
"Remove the entry in dictionary *p* which has a key specified by the string "
"*key*.  Return ``0`` on success or ``-1`` on failure."
msgstr ""

# ea778946d9664d3fb05cf63703168d21
#: c-api/dict.rst:95
msgid ""
"Return the object from dictionary *p* which has a key *key*.  Return *NULL* "
"if the key *key* is not present, but *without* setting an exception."
msgstr ""

# e13de7c879f9476fb761005dcfdab9cc
#: c-api/dict.rst:101
msgid ""
"Variant of :c:func:`PyDict_GetItem` that does not suppress exceptions. "
"Return *NULL* **with** an exception set if an exception occurred.  Return "
"*NULL* **without** an exception set if the key wasn't present."
msgstr ""

# 467dd807b76c428b8590fd3100bf4f4e
#: c-api/dict.rst:109
msgid ""
"This is the same as :c:func:`PyDict_GetItem`, but *key* is specified as a :c:"
"type:`char\\*`, rather than a :c:type:`PyObject\\*`."
msgstr ""

# 4dc02e1c006747bba88c817fc3a7dd7e
#: c-api/dict.rst:115
msgid ""
"Return a :c:type:`PyListObject` containing all the items from the dictionary."
msgstr ""

# 83143948e86341d4bbc9688c87b3bdb7
#: c-api/dict.rst:120
msgid ""
"Return a :c:type:`PyListObject` containing all the keys from the dictionary."
msgstr ""

# ecbe07d80bcb4825ae27d40e51b37372
#: c-api/dict.rst:125
msgid ""
"Return a :c:type:`PyListObject` containing all the values from the "
"dictionary *p*."
msgstr ""

# 51a0fbafd15545e195435051a0a5011b
#: c-api/dict.rst:133
msgid ""
"Return the number of items in the dictionary.  This is equivalent to "
"``len(p)`` on a dictionary."
msgstr ""

# 4a79193557c14645b295f241ccb5d543
#: c-api/dict.rst:139
msgid ""
"Iterate over all key-value pairs in the dictionary *p*.  The :c:type:"
"`Py_ssize_t` referred to by *ppos* must be initialized to ``0`` prior to the "
"first call to this function to start the iteration; the function returns "
"true for each pair in the dictionary, and false once all pairs have been "
"reported.  The parameters *pkey* and *pvalue* should either point to :c:type:"
"`PyObject\\*` variables that will be filled in with each key and value, "
"respectively, or may be *NULL*.  Any references returned through them are "
"borrowed.  *ppos* should not be altered during iteration. Its value "
"represents offsets within the internal dictionary structure, and since the "
"structure is sparse, the offsets are not consecutive."
msgstr ""

# 93ca9bf7fb1446a5b582f528bd793be8
#: c-api/dict.rst:150
msgid "For example::"
msgstr ""

# ef627edad6204b9884e449e2da9eb90c
#: c-api/dict.rst:160
msgid ""
"The dictionary *p* should not be mutated during iteration.  It is safe to "
"modify the values of the keys as you iterate over the dictionary, but only "
"so long as the set of keys does not change.  For example::"
msgstr ""

# 7bc8b9c8909d4f528e1d51339c4e7b39
#: c-api/dict.rst:185
msgid ""
"Iterate over mapping object *b* adding key-value pairs to dictionary *a*. "
"*b* may be a dictionary, or any object supporting :c:func:`PyMapping_Keys` "
"and :c:func:`PyObject_GetItem`. If *override* is true, existing pairs in *a* "
"will be replaced if a matching key is found in *b*, otherwise pairs will "
"only be added if there is not a matching key in *a*. Return ``0`` on success "
"or ``-1`` if an exception was raised."
msgstr ""

# 7f4394d7f0194a6cb59ea26c26c192bb
#: c-api/dict.rst:195
msgid ""
"This is the same as ``PyDict_Merge(a, b, 1)`` in C, or ``a.update(b)`` in "
"Python.  Return ``0`` on success or ``-1`` if an exception was raised."
msgstr ""

# 6f1472feb9774d46b0e938cd48ff3731
#: c-api/dict.rst:201
msgid ""
"Update or merge into dictionary *a*, from the key-value pairs in *seq2*. "
"*seq2* must be an iterable object producing iterable objects of length 2, "
"viewed as key-value pairs.  In case of duplicate keys, the last wins if "
"*override* is true, else the first wins. Return ``0`` on success or ``-1`` "
"if an exception was raised. Equivalent Python (except for the return value)::"
msgstr ""

# 1852fd8012954e52b40c76382fed1f11
#: c-api/exceptions.rst:8
msgid "Exception Handling"
msgstr ""

# 86467935441940318d9f0b556c7a92dc
#: c-api/exceptions.rst:10
msgid ""
"The functions described in this chapter will let you handle and raise Python "
"exceptions.  It is important to understand some of the basics of Python "
"exception handling.  It works somewhat like the Unix :c:data:`errno` "
"variable: there is a global indicator (per thread) of the last error that "
"occurred.  Most functions don't clear this on success, but will set it to "
"indicate the cause of the error on failure.  Most functions also return an "
"error indicator, usually *NULL* if they are supposed to return a pointer, or "
"``-1`` if they return an integer (exception: the :c:func:`PyArg_\\*` "
"functions return ``1`` for success and ``0`` for failure)."
msgstr ""

# c5da35e0dcaf4f49aed95ad2ce03607b
#: c-api/exceptions.rst:20
msgid ""
"When a function must fail because some function it called failed, it "
"generally doesn't set the error indicator; the function it called already "
"set it.  It is responsible for either handling the error and clearing the "
"exception or returning after cleaning up any resources it holds (such as "
"object references or memory allocations); it should *not* continue normally "
"if it is not prepared to handle the error.  If returning due to an error, it "
"is important to indicate to the caller that an error has been set.  If the "
"error is not handled or carefully propagated, additional calls into the "
"Python/C API may not behave as intended and may fail in mysterious ways."
msgstr ""

# 81de90fedf6a486897ccf8793c83891b
#: c-api/exceptions.rst:30
msgid ""
"The error indicator consists of three Python objects corresponding to the "
"result of ``sys.exc_info()``.  API functions exist to interact with the "
"error indicator in various ways.  There is a separate error indicator for "
"each thread."
msgstr ""

# 41f92508420046adb9abfb5520bd1ed6
#: c-api/exceptions.rst:40
msgid ""
"Print a standard traceback to ``sys.stderr`` and clear the error indicator. "
"Call this function only when the error indicator is set.  (Otherwise it will "
"cause a fatal error!)"
msgstr ""

# 94be10b1987943138d8d2602292aff4f
#: c-api/exceptions.rst:44
msgid ""
"If *set_sys_last_vars* is nonzero, the variables :data:`sys.last_type`, :"
"data:`sys.last_value` and :data:`sys.last_traceback` will be set to the "
"type, value and traceback of the printed exception, respectively."
msgstr ""

# feb45504ffda471db8e27085215a6c86
#: c-api/exceptions.rst:51
msgid "Alias for ``PyErr_PrintEx(1)``."
msgstr ""

# d9e1479c3a07444789696410fb352224
#: c-api/exceptions.rst:56
msgid ""
"Test whether the error indicator is set.  If set, return the exception "
"*type* (the first argument to the last call to one of the :c:func:`PyErr_Set"
"\\*` functions or to :c:func:`PyErr_Restore`).  If not set, return *NULL*.  "
"You do not own a reference to the return value, so you do not need to :c:"
"func:`Py_DECREF` it."
msgstr ""

# 4e9a6179c24a473b8eb4e97738571a14
#: c-api/exceptions.rst:64
msgid ""
"Do not compare the return value to a specific exception; use :c:func:"
"`PyErr_ExceptionMatches` instead, shown below.  (The comparison could easily "
"fail since the exception may be an instance instead of a class, in the case "
"of a class exception, or it may the a subclass of the expected exception.)"
msgstr ""

# b920ba98c235424eb150a4488c172127
#: c-api/exceptions.rst:72
msgid ""
"Equivalent to ``PyErr_GivenExceptionMatches(PyErr_Occurred(), exc)``.  This "
"should only be called when an exception is actually set; a memory access "
"violation will occur if no exception has been raised."
msgstr ""

# affdb448f2614da5b2ac2a8ad77a53c3
#: c-api/exceptions.rst:79
msgid ""
"Return true if the *given* exception matches the exception in *exc*.  If "
"*exc* is a class object, this also returns true when *given* is an instance "
"of a subclass.  If *exc* is a tuple, all exceptions in the tuple (and "
"recursively in subtuples) are searched for a match."
msgstr ""

# 46a03cdebdf9467cb58ebef8dc4693ab
#: c-api/exceptions.rst:87
msgid ""
"Under certain circumstances, the values returned by :c:func:`PyErr_Fetch` "
"below can be \"unnormalized\", meaning that ``*exc`` is a class object but "
"``*val`` is not an instance of the  same class.  This function can be used "
"to instantiate the class in that case.  If the values are already "
"normalized, nothing happens. The delayed normalization is implemented to "
"improve performance."
msgstr ""

# 96661c2b5cfb43db80904f4e59a98371
#: c-api/exceptions.rst:96
msgid ""
"Clear the error indicator.  If the error indicator is not set, there is no "
"effect."
msgstr ""

# 506dfb99cfca4c6295ccfbb00c965e3a
#: c-api/exceptions.rst:102
msgid ""
"Retrieve the error indicator into three variables whose addresses are "
"passed. If the error indicator is not set, set all three variables to "
"*NULL*.  If it is set, it will be cleared and you own a reference to each "
"object retrieved.  The value and traceback object may be *NULL* even when "
"the type object is not."
msgstr ""

# c40faad6d4b1433ba3563d887061b79f
#: c-api/exceptions.rst:109
msgid ""
"This function is normally only used by code that needs to handle exceptions "
"or by code that needs to save and restore the error indicator temporarily."
msgstr ""

# 8985976e78da4a6091e2278503b02622
#: c-api/exceptions.rst:115
msgid ""
"Set  the error indicator from the three objects.  If the error indicator is "
"already set, it is cleared first.  If the objects are *NULL*, the error "
"indicator is cleared.  Do not pass a *NULL* type and non-*NULL* value or "
"traceback.  The exception type should be a class.  Do not pass an invalid "
"exception type or value. (Violating these rules will cause subtle problems "
"later.)  This call takes away a reference to each object: you must own a "
"reference to each object before the call and after the call you no longer "
"own these references.  (If you don't understand this, don't use this "
"function.  I warned you.)"
msgstr ""

# 4155951d436f4c18bc2c10d0d3650426
#: c-api/exceptions.rst:127
msgid ""
"This function is normally only used by code that needs to save and restore "
"the error indicator temporarily; use :c:func:`PyErr_Fetch` to save the "
"current exception state."
msgstr ""

# a38758215e6f4955bfa14578cff9d796
#: c-api/exceptions.rst:134
msgid ""
"This is the most common way to set the error indicator.  The first argument "
"specifies the exception type; it is normally one of the standard exceptions, "
"e.g. :c:data:`PyExc_RuntimeError`.  You need not increment its reference "
"count. The second argument is an error message; it is decoded from "
"``'utf-8``'."
msgstr ""

# 2f92a973d3614e93bf038328b0bee476
#: c-api/exceptions.rst:142
msgid ""
"This function is similar to :c:func:`PyErr_SetString` but lets you specify "
"an arbitrary Python object for the \"value\" of the exception."
msgstr ""

# aa432159482341208b6ccc281b2d2d79
#: c-api/exceptions.rst:148
msgid ""
"This function sets the error indicator and returns *NULL*.  *exception* "
"should be a Python exception class.  The *format* and subsequent parameters "
"help format the error message; they have the same meaning and values as in :"
"c:func:`PyUnicode_FromFormat`. *format* is an ASCII-encoded string."
msgstr ""

# 8a7f8f3052b7485f818a81e644cb8ef0
#: c-api/exceptions.rst:157
msgid "This is a shorthand for ``PyErr_SetObject(type, Py_None)``."
msgstr ""

# 136ea9a03fc1402fbcf4e33ff1e639a1
#: c-api/exceptions.rst:162
msgid ""
"This is a shorthand for ``PyErr_SetString(PyExc_TypeError, message)``, where "
"*message* indicates that a built-in operation was invoked with an illegal "
"argument.  It is mostly for internal use."
msgstr ""

# e7a6a26ccd89489c8ce342d44e6d7065
#: c-api/exceptions.rst:169
msgid ""
"This is a shorthand for ``PyErr_SetNone(PyExc_MemoryError)``; it returns "
"*NULL* so an object allocation function can write ``return PyErr_NoMemory();"
"`` when it runs out of memory."
msgstr ""

# cd48de15e6684d72be26195f220a202a
#: c-api/exceptions.rst:178
msgid ""
"This is a convenience function to raise an exception when a C library "
"function has returned an error and set the C variable :c:data:`errno`.  It "
"constructs a tuple object whose first item is the integer :c:data:`errno` "
"value and whose second item is the corresponding error message (gotten from :"
"c:func:`strerror`), and then calls ``PyErr_SetObject(type, object)``.  On "
"Unix, when the :c:data:`errno` value is :const:`EINTR`, indicating an "
"interrupted system call, this calls :c:func:`PyErr_CheckSignals`, and if "
"that set the error indicator, leaves it set to that.  The function always "
"returns *NULL*, so a wrapper function around a system call can write "
"``return PyErr_SetFromErrno(type);`` when the system call returns an error."
msgstr ""

# 4bd709b453ae4b14929257066088ada0
#: c-api/exceptions.rst:192
msgid ""
"Similar to :c:func:`PyErr_SetFromErrno`, with the additional behavior that "
"if *filename* is not *NULL*, it is passed to the constructor of *type* as a "
"third parameter.  In the case of exceptions such as :exc:`IOError` and :exc:"
"`OSError`, this is used to define the :attr:`filename` attribute of the "
"exception instance. *filename* is decoded from the filesystem encoding (:"
"func:`sys.getfilesystemencoding`)."
msgstr ""

# fa792ba8d4344920bde205f4858c2d76
#: c-api/exceptions.rst:202
msgid ""
"This is a convenience function to raise :exc:`WindowsError`. If called with "
"*ierr* of :c:data:`0`, the error code returned by a call to :c:func:"
"`GetLastError` is used instead.  It calls the Win32 function :c:func:"
"`FormatMessage` to retrieve the Windows description of error code given by "
"*ierr* or :c:func:`GetLastError`, then it constructs a tuple object whose "
"first item is the *ierr* value and whose second item is the corresponding "
"error message (gotten from :c:func:`FormatMessage`), and then calls "
"``PyErr_SetObject(PyExc_WindowsError, object)``. This function always "
"returns *NULL*. Availability: Windows."
msgstr ""

# e2ab5d6e3b7e4ddc89243362733a1b16
#: c-api/exceptions.rst:214
msgid ""
"Similar to :c:func:`PyErr_SetFromWindowsErr`, with an additional parameter "
"specifying the exception type to be raised. Availability: Windows."
msgstr ""

# 21980c10f3c642e3bc78954d6f33a5ae
#: c-api/exceptions.rst:220
msgid ""
"Similar to :c:func:`PyErr_SetFromWindowsErr`, with the additional behavior "
"that if *filename* is not *NULL*, it is passed to the constructor of :exc:"
"`WindowsError` as a third parameter.  *filename* is decoded from the "
"filesystem encoding (:func:`sys.getfilesystemencoding`).  Availability: "
"Windows."
msgstr ""

# 369c901d6a5c47d0ae8d3e1ce13263dd
#: c-api/exceptions.rst:229
msgid ""
"Similar to :c:func:`PyErr_SetFromWindowsErrWithFilename`, with an additional "
"parameter specifying the exception type to be raised. Availability: Windows."
msgstr ""

# e5f80faa5349460e88bfbc2f62709737
#: c-api/exceptions.rst:235
msgid ""
"Set file, line, and offset information for the current exception.  If the "
"current exception is not a :exc:`SyntaxError`, then it sets additional "
"attributes, which make the exception printing subsystem think the exception "
"is a :exc:`SyntaxError`. *filename* is decoded from the filesystem encoding "
"(:func:`sys.getfilesystemencoding`)."
msgstr ""

# 4134153c1b76474383852331c67d14a6
#: c-api/exceptions.rst:246
msgid ""
"Like :c:func:`PyErr_SyntaxLocationExc`, but the col_offset parameter is "
"omitted."
msgstr ""

# 12fd7949da4043c69b7ffd3ba7864905
#: c-api/exceptions.rst:252
msgid ""
"This is a shorthand for ``PyErr_SetString(PyExc_SystemError, message)``, "
"where *message* indicates that an internal operation (e.g. a Python/C API "
"function) was invoked with an illegal argument.  It is mostly for internal "
"use."
msgstr ""

# 778d9774bc8d4d1f8d9464da87fd6ed2
#: c-api/exceptions.rst:260
msgid ""
"Issue a warning message.  The *category* argument is a warning category (see "
"below) or *NULL*; the *message* argument is an UTF-8 encoded string.  "
"*stack_level* is a positive number giving a number of stack frames; the "
"warning will be issued from the  currently executing line of code in that "
"stack frame.  A *stack_level* of 1 is the function calling :c:func:"
"`PyErr_WarnEx`, 2 is  the function above that, and so forth."
msgstr ""

# 601e4bace15c4910919793c132a693df
#: c-api/exceptions.rst:267
msgid ""
"This function normally prints a warning message to *sys.stderr*; however, it "
"is also possible that the user has specified that warnings are to be turned "
"into errors, and in that case this will raise an exception.  It is also "
"possible that the function raises an exception because of a problem with the "
"warning machinery (the implementation imports the :mod:`warnings` module to "
"do the heavy lifting). The return value is ``0`` if no exception is raised, "
"or ``-1`` if an exception is raised.  (It is not possible to determine "
"whether a warning message is actually printed, nor what the reason is for "
"the exception; this is intentional.)  If an exception is raised, the caller "
"should do its normal exception handling (for example, :c:func:`Py_DECREF` "
"owned references and return an error value)."
msgstr ""

# a78efa16430b42dabf784783da4b1734
#: c-api/exceptions.rst:279
msgid ""
"Warning categories must be subclasses of :c:data:`Warning`; the default "
"warning category is :c:data:`RuntimeWarning`.  The standard Python warning "
"categories are available as global variables whose names are ``PyExc_`` "
"followed by the Python exception name. These have the type :c:type:`PyObject"
"\\*`; they are all class objects. Their names are :c:data:`PyExc_Warning`, :"
"c:data:`PyExc_UserWarning`, :c:data:`PyExc_UnicodeWarning`, :c:data:"
"`PyExc_DeprecationWarning`, :c:data:`PyExc_SyntaxWarning`, :c:data:"
"`PyExc_RuntimeWarning`, and :c:data:`PyExc_FutureWarning`.  :c:data:"
"`PyExc_Warning` is a subclass of :c:data:`PyExc_Exception`; the other "
"warning categories are subclasses of :c:data:`PyExc_Warning`."
msgstr ""

# e546bb08186e46e5ae358fb8c5c518fb
#: c-api/exceptions.rst:290
msgid ""
"For information about warning control, see the documentation for the :mod:"
"`warnings` module and the :option:`-W` option in the command line "
"documentation.  There is no C API for warning control."
msgstr ""

# f3ee34e9aa7d40d8a5025432ef467e62
#: c-api/exceptions.rst:297
msgid ""
"Issue a warning message with explicit control over all warning attributes.  "
"This is a straightforward wrapper around the Python function :func:`warnings."
"warn_explicit`, see there for more information.  The *module* and *registry* "
"arguments may be set to *NULL* to get the default effect described there. "
"*message* and *module* are UTF-8 encoded strings, *filename* is decoded from "
"the filesystem encoding (:func:`sys.getfilesystemencoding`)."
msgstr ""

# b013e70d3f4c4592a1007e00d65fbd1f
#: c-api/exceptions.rst:308
msgid ""
"Function similar to :c:func:`PyErr_WarnEx`, but use :c:func:"
"`PyUnicode_FromFormat` to format the warning message.  *format* is an ASCII-"
"encoded string."
msgstr ""

# eb1167e31b6743bb9a4e56d6f3b1ee83
#: c-api/exceptions.rst:321
msgid ""
"This function interacts with Python's signal handling.  It checks whether a "
"signal has been sent to the processes and if so, invokes the corresponding "
"signal handler.  If the :mod:`signal` module is supported, this can invoke a "
"signal handler written in Python.  In all cases, the default effect for :"
"const:`SIGINT` is to raise the  :exc:`KeyboardInterrupt` exception.  If an "
"exception is raised the error indicator is set and the function returns "
"``-1``; otherwise the function returns ``0``.  The error indicator may or "
"may not be cleared if it was previously set."
msgstr ""

# d38c4db2a07c46fd8058771d573df57f
#: c-api/exceptions.rst:337
msgid ""
"This function simulates the effect of a :const:`SIGINT` signal arriving --- "
"the next time :c:func:`PyErr_CheckSignals` is called,  :exc:"
"`KeyboardInterrupt` will be raised.  It may be called without holding the "
"interpreter lock."
msgstr ""

# 1624261412b24674a47935905787366c
#: c-api/exceptions.rst:347
msgid ""
"This utility function specifies a file descriptor to which a ``'\\0'`` byte "
"will be written whenever a signal is received.  It returns the previous such "
"file descriptor.  The value ``-1`` disables the feature; this is the initial "
"state. This is equivalent to :func:`signal.set_wakeup_fd` in Python, but "
"without any error checking.  *fd* should be a valid file descriptor.  The "
"function should only be called from the main thread."
msgstr ""

# 0dea317fc4f047348c2fc9dbf5cecfbb
#: c-api/exceptions.rst:357
msgid ""
"This utility function creates and returns a new exception class. The *name* "
"argument must be the name of the new exception, a C string of the form "
"``module.classname``.  The *base* and *dict* arguments are normally *NULL*. "
"This creates a class object derived from :exc:`Exception` (accessible in C "
"as :c:data:`PyExc_Exception`)."
msgstr ""

# 57d83aa8783d456d9d371b067734ee92
#: c-api/exceptions.rst:363
msgid ""
"The :attr:`__module__` attribute of the new class is set to the first part "
"(up to the last dot) of the *name* argument, and the class name is set to "
"the last part (after the last dot).  The *base* argument can be used to "
"specify alternate base classes; it can either be only one class or a tuple "
"of classes. The *dict* argument can be used to specify a dictionary of class "
"variables and methods."
msgstr ""

# fa3c656e7f1641738494086e34813ae4
#: c-api/exceptions.rst:372
msgid ""
"Same as :c:func:`PyErr_NewException`, except that the new exception class "
"can easily be given a docstring: If *doc* is non-*NULL*, it will be used as "
"the docstring for the exception class."
msgstr ""

# b5993a0c24ac4314b93e9b6a68ca40c0
#: c-api/exceptions.rst:381
msgid ""
"This utility function prints a warning message to ``sys.stderr`` when an "
"exception has been set but it is impossible for the interpreter to actually "
"raise the exception.  It is used, for example, when an exception occurs in "
"an :meth:`__del__` method."
msgstr ""

# 0ab84b6577af45d49afe0c0493d11f7f
#: c-api/exceptions.rst:386
msgid ""
"The function is called with a single argument *obj* that identifies the "
"context in which the unraisable exception occurred. The repr of *obj* will "
"be printed in the warning message."
msgstr ""

# 7fcfdce41d9841018705935df4f88127
#: c-api/exceptions.rst:392
msgid "Exception Objects"
msgstr ""

# 889236e3a9054ff3a52e5714d5edfc19
#: c-api/exceptions.rst:396
msgid ""
"Return the traceback associated with the exception as a new reference, as "
"accessible from Python through :attr:`__traceback__`.  If there is no "
"traceback associated, this returns *NULL*."
msgstr ""

# 35e1dc442abb4b8f808a34695e880da7
#: c-api/exceptions.rst:403
msgid ""
"Set the traceback associated with the exception to *tb*.  Use ``Py_None`` to "
"clear it."
msgstr ""

# f25ebc2149d54dc3a21835e8e34cfd17
#: c-api/exceptions.rst:409
msgid ""
"Return the context (another exception instance during whose handling *ex* "
"was raised) associated with the exception as a new reference, as accessible "
"from Python through :attr:`__context__`.  If there is no context associated, "
"this returns *NULL*."
msgstr ""

# 2c33e094018542eb90c05f423cfad10c
#: c-api/exceptions.rst:417
msgid ""
"Set the context associated with the exception to *ctx*.  Use *NULL* to clear "
"it.  There is no type check to make sure that *ctx* is an exception "
"instance. This steals a reference to *ctx*."
msgstr ""

# 15063d564f1e4f36945b12c3e18a1d90
#: c-api/exceptions.rst:424
msgid ""
"Return the cause (another exception instance set by ``raise ... from ...``) "
"associated with the exception as a new reference, as accessible from Python "
"through :attr:`__cause__`.  If there is no cause associated, this returns "
"*NULL*."
msgstr ""

# c2a4c01d00ca4577a7d4275210fb8c0b
#: c-api/exceptions.rst:432
msgid ""
"Set the cause associated with the exception to *ctx*.  Use *NULL* to clear "
"it.  There is no type check to make sure that *ctx* is an exception "
"instance. This steals a reference to *ctx*."
msgstr ""

# dd53be4775cf4b3883cf12a3dc884164
#: c-api/exceptions.rst:440
msgid "Unicode Exception Objects"
msgstr ""

# cbe19bad9e03429c8523842b41ee1e20
#: c-api/exceptions.rst:442
msgid ""
"The following functions are used to create and modify Unicode exceptions "
"from C."
msgstr ""

# 1dc95fe4acf04fc9baaa78492c2103fd
#: c-api/exceptions.rst:446
msgid ""
"Create a :class:`UnicodeDecodeError` object with the attributes *encoding*, "
"*object*, *length*, *start*, *end* and *reason*. *encoding* and *reason* are "
"UTF-8 encoded strings."
msgstr ""

# 243653a9b6af40d4a5fa3a419ca253d3
#: c-api/exceptions.rst:452
msgid ""
"Create a :class:`UnicodeEncodeError` object with the attributes *encoding*, "
"*object*, *length*, *start*, *end* and *reason*. *encoding* and *reason* are "
"UTF-8 encoded strings."
msgstr ""

# 076b630111cf4cdb8271ab7641228e75
#: c-api/exceptions.rst:458
msgid ""
"Create a :class:`UnicodeTranslateError` object with the attributes *object*, "
"*length*, *start*, *end* and *reason*. *reason* is an UTF-8 encoded string."
msgstr ""

# 52c186802d7e4815847fad0c00adf239
#: c-api/exceptions.rst:464
msgid "Return the *encoding* attribute of the given exception object."
msgstr ""

# 5d9da621e2614a55bbd7ef872a5a7156
#: c-api/exceptions.rst:470
msgid "Return the *object* attribute of the given exception object."
msgstr ""

# 2bb072cf9aad4d979ae3da89d9a94368
#: c-api/exceptions.rst:476
msgid ""
"Get the *start* attribute of the given exception object and place it into *"
"\\*start*.  *start* must not be *NULL*.  Return ``0`` on success, ``-1`` on "
"failure."
msgstr ""

# c87c561123fb42a2adf61e9e2a4362af
#: c-api/exceptions.rst:484
msgid ""
"Set the *start* attribute of the given exception object to *start*.  Return "
"``0`` on success, ``-1`` on failure."
msgstr ""

# fa0188106a8f401ca87ec28e50ff3bc0
#: c-api/exceptions.rst:491
msgid ""
"Get the *end* attribute of the given exception object and place it into *"
"\\*end*.  *end* must not be *NULL*.  Return ``0`` on success, ``-1`` on "
"failure."
msgstr ""

# b77af76b3c724880a14c5dc23e0db642
#: c-api/exceptions.rst:499
msgid ""
"Set the *end* attribute of the given exception object to *end*.  Return "
"``0`` on success, ``-1`` on failure."
msgstr ""

# 81b399ccf21244dfa7fcd774674ab745
#: c-api/exceptions.rst:506
msgid "Return the *reason* attribute of the given exception object."
msgstr ""

# 6584b1426e664fdab898932dcf077a3b
#: c-api/exceptions.rst:512
msgid ""
"Set the *reason* attribute of the given exception object to *reason*.  "
"Return ``0`` on success, ``-1`` on failure."
msgstr ""

# 7616c331efb34b95a9ed68dd47722209
#: c-api/exceptions.rst:517
msgid "Recursion Control"
msgstr ""

# 0d24c08d9aac4e63b1d833006a3426d1
#: c-api/exceptions.rst:519
msgid ""
"These two functions provide a way to perform safe recursive calls at the C "
"level, both in the core and in extension modules.  They are needed if the "
"recursive code does not necessarily invoke Python code (which tracks its "
"recursion depth automatically)."
msgstr ""

# 1423d8bc876a445c8c652dc176217d03
#: c-api/exceptions.rst:526
msgid "Marks a point where a recursive C-level call is about to be performed."
msgstr ""

# 713dbfc8d10a473bbdd8b54f0c1dd072
#: c-api/exceptions.rst:528
msgid ""
"If :const:`USE_STACKCHECK` is defined, this function checks if the the OS "
"stack overflowed using :c:func:`PyOS_CheckStack`.  In this is the case, it "
"sets a :exc:`MemoryError` and returns a nonzero value."
msgstr ""

# 9908beb380f74a46a0c35c74b0ea97a0
#: c-api/exceptions.rst:532
msgid ""
"The function then checks if the recursion limit is reached.  If this is the "
"case, a :exc:`RuntimeError` is set and a nonzero value is returned. "
"Otherwise, zero is returned."
msgstr ""

# 81dab8fd96d244d5b012e2d4edde2080
#: c-api/exceptions.rst:536
msgid ""
"*where* should be a string such as ``\" in instance check\"`` to be "
"concatenated to the :exc:`RuntimeError` message caused by the recursion "
"depth limit."
msgstr ""

# b01a085cb4354bc5ab8bbb5cbb6c62db
#: c-api/exceptions.rst:542
msgid ""
"Ends a :c:func:`Py_EnterRecursiveCall`.  Must be called once for each "
"*successful* invocation of :c:func:`Py_EnterRecursiveCall`."
msgstr ""

# 268b7323fee94e7a9506320d8005a5bb
#: c-api/exceptions.rst:545
msgid ""
"Properly implementing :attr:`tp_repr` for container types requires special "
"recursion handling.  In addition to protecting the stack, :attr:`tp_repr` "
"also needs to track objects to prevent cycles.  The following two functions "
"facilitate this functionality.  Effectively, these are the C equivalent to :"
"func:`reprlib.recursive_repr`."
msgstr ""

# a0f0c4df9fbc4b50aaa623103396bbd1
#: c-api/exceptions.rst:553
msgid ""
"Called at the beginning of the :attr:`tp_repr` implementation to detect "
"cycles."
msgstr ""

# 34a515b7e7bb414e88de17f2412198b5
#: c-api/exceptions.rst:556
msgid ""
"If the object has already been processed, the function returns a positive "
"integer.  In that case the :attr:`tp_repr` implementation should return a "
"string object indicating a cycle.  As examples, :class:`dict` objects return "
"``{...}`` and :class:`list` objects return ``[...]``."
msgstr ""

# a27ec83653e24393ae1eabf8198f60f2
#: c-api/exceptions.rst:562
msgid ""
"The function will return a negative integer if the recursion limit is "
"reached.  In that case the :attr:`tp_repr` implementation should typically "
"return ``NULL``."
msgstr ""

# b101162e7b384ababa70b5af33129c3d
#: c-api/exceptions.rst:566
msgid ""
"Otherwise, the function returns zero and the :attr:`tp_repr` implementation "
"can continue normally."
msgstr ""

# 6b5d0a3ab339489cae6ffe219e2c6fb5
#: c-api/exceptions.rst:571
msgid ""
"Ends a :c:func:`Py_ReprEnter`.  Must be called once for each invocation of :"
"c:func:`Py_ReprEnter` that returns zero."
msgstr ""

# 5c4373f04ecb4850bb1837788fa21c79
#: c-api/exceptions.rst:578
msgid "Standard Exceptions"
msgstr ""

# 490de4a56c55412abee0a7e297b5b957
#: c-api/exceptions.rst:580
msgid ""
"All standard Python exceptions are available as global variables whose names "
"are ``PyExc_`` followed by the Python exception name.  These have the type :"
"c:type:`PyObject\\*`; they are all class objects.  For completeness, here "
"are all the variables:"
msgstr ""

# a89f79d4be2e4f9fbcd66ed1aa3c6375
#: c-api/exceptions.rst:586
msgid "C Name"
msgstr ""

# 11cffc87a83749eca0e9a4c70b5e9bf9
#: c-api/exceptions.rst:586
msgid "Python Name"
msgstr ""

# 7ae8827edeaf458c97afbdb1b7a863aa
#: c-api/exceptions.rst:586
msgid "Notes"
msgstr ""

# 2e0b8c8a08d742f18a9ebf956d3946d9
#: c-api/exceptions.rst:588
msgid ":c:data:`PyExc_BaseException`"
msgstr ""

# fbda648f352d449d9517cdcf3f324913
#: c-api/exceptions.rst:588
msgid ":exc:`BaseException`"
msgstr ""

# 2011a29b27894ccf8bc19af9f8d6d8ea
# d6590385850640449e335ca45a174a0a
# 7fefea4760534ffcaab1cba257b13a72
# 76e21ec8534a4ccab0958d8d4040a2c0
# d8f9a6c74dfd48b7878f7a2c33f50ad3
#: c-api/exceptions.rst:588 c-api/exceptions.rst:590 c-api/exceptions.rst:592
#: c-api/exceptions.rst:594 c-api/exceptions.rst:602
msgid "\\(1)"
msgstr ""

# 40d1f22350b641d2981828f2cec415de
#: c-api/exceptions.rst:590
msgid ":c:data:`PyExc_Exception`"
msgstr ""

# cf7082e56d65437dadb10fe7e89c87a1
#: c-api/exceptions.rst:590
msgid ":exc:`Exception`"
msgstr ""

# 973cc7bae03244e78fe07b6c9765dd09
#: c-api/exceptions.rst:592
msgid ":c:data:`PyExc_ArithmeticError`"
msgstr ""

# 547f64cc459e432e80683330a1d7a2b4
#: c-api/exceptions.rst:592
msgid ":exc:`ArithmeticError`"
msgstr ""

# 9bd9d4c40ebd47258f9e743d21785301
#: c-api/exceptions.rst:594
msgid ":c:data:`PyExc_LookupError`"
msgstr ""

# 417795b0925f4246a97349a29241f060
#: c-api/exceptions.rst:594
msgid ":exc:`LookupError`"
msgstr ""

# 8d79901ec0164a20841adad465efbc51
#: c-api/exceptions.rst:596
msgid ":c:data:`PyExc_AssertionError`"
msgstr ""

# 7c415bad65a94bc6a68a1038e19d6668
#: c-api/exceptions.rst:596
msgid ":exc:`AssertionError`"
msgstr ""

# af1726c520b348edacc64cea6d9be074
#: c-api/exceptions.rst:598
msgid ":c:data:`PyExc_AttributeError`"
msgstr ""

# 567072dc54c54e62a61396fe3dca1bac
#: c-api/exceptions.rst:598
msgid ":exc:`AttributeError`"
msgstr ""

# c093d3b0a8d9423eb4be6af6b407af53
#: c-api/exceptions.rst:600
msgid ":c:data:`PyExc_EOFError`"
msgstr ""

# 0a9895a80814438ba2392e3106eab155
#: c-api/exceptions.rst:600
msgid ":exc:`EOFError`"
msgstr ""

# 82114e2eef194e3b8fcad0c4fba93ce9
#: c-api/exceptions.rst:602
msgid ":c:data:`PyExc_EnvironmentError`"
msgstr ""

# 859468f996a74f1c95bdbbfb33bae39a
#: c-api/exceptions.rst:602
msgid ":exc:`EnvironmentError`"
msgstr ""

# 5413316b82024ed39c5106fe28229afc
#: c-api/exceptions.rst:604
msgid ":c:data:`PyExc_FloatingPointError`"
msgstr ""

# 202728e621b1476d8e16c591600b0f9b
#: c-api/exceptions.rst:604
msgid ":exc:`FloatingPointError`"
msgstr ""

# cb4f13424f19408aa9048d424cb566ee
#: c-api/exceptions.rst:606
msgid ":c:data:`PyExc_IOError`"
msgstr ""

# f1704727234a46bda5b176170fba0b54
#: c-api/exceptions.rst:606
msgid ":exc:`IOError`"
msgstr ""

# 28ab268b62cb4a66aee0547724685864
#: c-api/exceptions.rst:608
msgid ":c:data:`PyExc_ImportError`"
msgstr ""

# 3b27a580d82f4a47b6efcc82f2dc9e0d
#: c-api/exceptions.rst:608
msgid ":exc:`ImportError`"
msgstr ""

# ccfbd8b76eb6425283a5c4fd7e14562e
#: c-api/exceptions.rst:610
msgid ":c:data:`PyExc_IndexError`"
msgstr ""

# 8ceb69a2955648069fafe84bdaa4fbe0
#: c-api/exceptions.rst:610
msgid ":exc:`IndexError`"
msgstr ""

# a39ebb67f55f4b97a729f4f2602059d1
#: c-api/exceptions.rst:612
msgid ":c:data:`PyExc_KeyError`"
msgstr ""

# 45e82306be71494b94e885246bdd278f
#: c-api/exceptions.rst:612
msgid ":exc:`KeyError`"
msgstr ""

# b84a25de854a4ba7be477bd706290036
#: c-api/exceptions.rst:614
msgid ":c:data:`PyExc_KeyboardInterrupt`"
msgstr ""

# d733e3dd353d44e8b612e92c06041814
#: c-api/exceptions.rst:614
msgid ":exc:`KeyboardInterrupt`"
msgstr ""

# a1b65ab4785a4bf0b0479498cc501a64
#: c-api/exceptions.rst:616
msgid ":c:data:`PyExc_MemoryError`"
msgstr ""

# b7dcf4548596481ca25d60a587b20f57
#: c-api/exceptions.rst:616
msgid ":exc:`MemoryError`"
msgstr ""

# ea85899f50404163a933d6e0cbdd3678
#: c-api/exceptions.rst:618
msgid ":c:data:`PyExc_NameError`"
msgstr ""

# 9d9d88d7171b46938bd39a2b17df6e1f
#: c-api/exceptions.rst:618
msgid ":exc:`NameError`"
msgstr ""

# 92576b27d9ef4821ab7e20a1bc4a1a11
#: c-api/exceptions.rst:620
msgid ":c:data:`PyExc_NotImplementedError`"
msgstr ""

# 81f979618a67473097809178096fe90a
#: c-api/exceptions.rst:620
msgid ":exc:`NotImplementedError`"
msgstr ""

# 85d108cf4ac64e03aa351e762ede7492
#: c-api/exceptions.rst:622
msgid ":c:data:`PyExc_OSError`"
msgstr ""

# 4f7b58d016c9486289aa64521129e0b6
#: c-api/exceptions.rst:622
msgid ":exc:`OSError`"
msgstr ""

# 8fa9e634c2d14e61a6f8a1e8efc3e8f0
#: c-api/exceptions.rst:624
msgid ":c:data:`PyExc_OverflowError`"
msgstr ""

# 1b2be8a64f2346648f9116d90f931d24
#: c-api/exceptions.rst:624
msgid ":exc:`OverflowError`"
msgstr ""

# ee7110e68f6b4b828b1d139ef6674d12
#: c-api/exceptions.rst:626
msgid ":c:data:`PyExc_ReferenceError`"
msgstr ""

# e7163e7048364e919781a551c4bad647
#: c-api/exceptions.rst:626
msgid ":exc:`ReferenceError`"
msgstr ""

# 6525298aaedf44c88712b0a8afb87d3a
#: c-api/exceptions.rst:626
msgid "\\(2)"
msgstr ""

# 2ef4aed512d140e6b1506b2a48599e7f
#: c-api/exceptions.rst:628
msgid ":c:data:`PyExc_RuntimeError`"
msgstr ""

# 63b032dff564426a9ba33d6e2bda211b
#: c-api/exceptions.rst:628
msgid ":exc:`RuntimeError`"
msgstr ""

# 95c184a7642243e4adf2c37968c87df2
#: c-api/exceptions.rst:630
msgid ":c:data:`PyExc_SyntaxError`"
msgstr ""

# 18e33b63c49443f4b09c21c2bb4e40a9
#: c-api/exceptions.rst:630
msgid ":exc:`SyntaxError`"
msgstr ""

# da2828efb7354335bf169aab6cdbd941
#: c-api/exceptions.rst:632
msgid ":c:data:`PyExc_SystemError`"
msgstr ""

# ddcd61b59a224013bea0edd67b1f0016
#: c-api/exceptions.rst:632
msgid ":exc:`SystemError`"
msgstr ""

# b2de7c39b54a423994f6a0b1e0b1fad6
#: c-api/exceptions.rst:634
msgid ":c:data:`PyExc_SystemExit`"
msgstr ""

# 5b458a38d03d4cb8a11cda3784dca1d2
#: c-api/exceptions.rst:634
msgid ":exc:`SystemExit`"
msgstr ""

# 093930f8181242c091ddfa062f647e6f
#: c-api/exceptions.rst:636
msgid ":c:data:`PyExc_TypeError`"
msgstr ""

# b61df511f9254e8dac926088ea52ea8f
#: c-api/exceptions.rst:636
msgid ":exc:`TypeError`"
msgstr ""

# 7791cba0259e4c389192fda54124eada
#: c-api/exceptions.rst:638
msgid ":c:data:`PyExc_ValueError`"
msgstr ""

# a1de0d85298941ac982ebc65a5b6b089
#: c-api/exceptions.rst:638
msgid ":exc:`ValueError`"
msgstr ""

# 3551737e245e424080ea50d0900543e4
#: c-api/exceptions.rst:640
msgid ":c:data:`PyExc_WindowsError`"
msgstr ""

# e70b0183e4d94503825a8c34048d6041
#: c-api/exceptions.rst:640
msgid ":exc:`WindowsError`"
msgstr ""

# 722bba173de94cd1a24ce460c86140be
#: c-api/exceptions.rst:640
msgid "\\(3)"
msgstr ""

# e739628c337d4d909281face10d1de9e
#: c-api/exceptions.rst:642
msgid ":c:data:`PyExc_ZeroDivisionError`"
msgstr ""

# 1ce4be3017e94d359c70522e18d86439
#: c-api/exceptions.rst:642
msgid ":exc:`ZeroDivisionError`"
msgstr ""

# 324016559db94480b10e77f95398957a
#: c-api/exceptions.rst:675
msgid "Notes:"
msgstr ""

# df7a3a9f724e4b0aae6bf6680b8feb6b
#: c-api/exceptions.rst:678
msgid "This is a base class for other standard exceptions."
msgstr ""

# ad16d2ad39b94aaeb727beee2e786b66
#: c-api/exceptions.rst:681
msgid "This is the same as :exc:`weakref.ReferenceError`."
msgstr ""

# 008fe085898947a88bf04e2a96f61770
#: c-api/exceptions.rst:684
msgid ""
"Only defined on Windows; protect code that uses this by testing that the "
"preprocessor macro ``MS_WINDOWS`` is defined."
msgstr ""

# 7d59a83d75c1435e8134f9423615c7f1
#: c-api/file.rst:6
msgid "File Objects"
msgstr ""

# dffcc1b3c60a42fa9696d0e2cb4f7571
#: c-api/file.rst:10
msgid ""
"These APIs are a minimal emulation of the Python 2 C API for built-in file "
"objects, which used to rely on the buffered I/O (:c:type:`FILE\\*`) support "
"from the C standard library.  In Python 3, files and streams use the new :"
"mod:`io` module, which defines several layers over the low-level unbuffered "
"I/O of the operating system.  The functions described below are convenience "
"C wrappers over these new APIs, and meant mostly for internal error "
"reporting in the interpreter; third-party code is advised to access the :mod:"
"`io` APIs instead."
msgstr ""

# 94893cac2b7f4c9b806861e38734b37a
#: c-api/file.rst:22
msgid ""
"Create a Python file object from the file descriptor of an already opened "
"file *fd*.  The arguments *name*, *encoding*, *errors* and *newline* can be "
"*NULL* to use the defaults; *buffering* can be *-1* to use the default. "
"*name* is ignored and kept for backward compatibility. Return *NULL* on "
"failure. For a more comprehensive description of the arguments, please refer "
"to the :func:`io.open` function documentation."
msgstr ""

# 0734d90de99440049ed6faf45fe47dc2
#: c-api/file.rst:31
msgid ""
"Since Python streams have their own buffering layer, mixing them with OS-"
"level file descriptors can produce various issues (such as unexpected "
"ordering of data)."
msgstr ""

# 9f1e74b42430404fa5cb46b1d09becd2
#: c-api/file.rst:41
msgid ""
"Return the file descriptor associated with *p* as an :c:type:`int`.  If the "
"object is an integer, its value is returned.  If not, the object's :meth:"
"`fileno` method is called if it exists; the method must return an integer, "
"which is returned as the file descriptor value.  Sets an exception and "
"returns ``-1`` on failure."
msgstr ""

# 94e476eef68043cf8b7f52c4d1d4080d
#: c-api/file.rst:52
msgid ""
"Equivalent to ``p.readline([n])``, this function reads one line from the "
"object *p*.  *p* may be a file object or any object with a :meth:`readline` "
"method.  If *n* is ``0``, exactly one line is read, regardless of the length "
"of the line.  If *n* is greater than ``0``, no more than *n* bytes will be "
"read from the file; a partial line can be returned.  In both cases, an empty "
"string is returned if the end of the file is reached immediately.  If *n* is "
"less than ``0``, however, one line is read regardless of length, but :exc:"
"`EOFError` is raised if the end of the file is reached immediately."
msgstr ""

# 632bc940df5f4daa905fbfa0789a0b18
#: c-api/file.rst:66
msgid ""
"Write object *obj* to file object *p*.  The only supported flag for *flags* "
"is :const:`Py_PRINT_RAW`; if given, the :func:`str` of the object is written "
"instead of the :func:`repr`.  Return ``0`` on success or ``-1`` on failure; "
"the appropriate exception will be set."
msgstr ""

# 5ca8059f94b445eebe60f190228f6cb2
#: c-api/file.rst:74
msgid ""
"Write string *s* to file object *p*.  Return ``0`` on success or ``-1`` on "
"failure; the appropriate exception will be set."
msgstr ""

# a069a962257b48e5a8dbcbfb46c4f9a3
#: c-api/float.rst:6
msgid "Floating Point Objects"
msgstr ""

# 835458211b5d47fa91ab00e507532914
#: c-api/float.rst:13
msgid ""
"This subtype of :c:type:`PyObject` represents a Python floating point object."
msgstr ""

# bffb4f0d61214d5c8a8b41af65b39580
#: c-api/float.rst:18
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python floating point "
"type.  This is the same object as :class:`float` in the Python layer."
msgstr ""

# ba894ec178b94387960703905dea7b56
#: c-api/float.rst:24
msgid ""
"Return true if its argument is a :c:type:`PyFloatObject` or a subtype of :c:"
"type:`PyFloatObject`."
msgstr ""

# 569bb938be584e78962e26f71d9f787f
#: c-api/float.rst:30
msgid ""
"Return true if its argument is a :c:type:`PyFloatObject`, but not a subtype "
"of :c:type:`PyFloatObject`."
msgstr ""

# a1be9fe8cdfd4739a60fe842862e9180
#: c-api/float.rst:36
msgid ""
"Create a :c:type:`PyFloatObject` object based on the string value in *str*, "
"or *NULL* on failure."
msgstr ""

# 77ed53455aa44777a15d834ff6f7e0d2
#: c-api/float.rst:42
msgid "Create a :c:type:`PyFloatObject` object from *v*, or *NULL* on failure."
msgstr ""

# ee6fe8a2604241f3916980d17b3c01f5
#: c-api/float.rst:47
msgid ""
"Return a C :c:type:`double` representation of the contents of *pyfloat*.  If "
"*pyfloat* is not a Python floating point object but has a :meth:`__float__` "
"method, this method will first be called to convert *pyfloat* into a float. "
"This method returns ``-1.0`` upon failure, so one should call :c:func:"
"`PyErr_Occurred` to check for errors."
msgstr ""

# 58e6ee4a4336403e954180886659d7ce
#: c-api/float.rst:56
msgid ""
"Return a C :c:type:`double` representation of the contents of *pyfloat*, but "
"without error checking."
msgstr ""

# cd959cf21f8e4281a653613bb8e94c87
#: c-api/float.rst:62
msgid ""
"Return a structseq instance which contains information about the precision, "
"minimum and maximum values of a float. It's a thin wrapper around the header "
"file :file:`float.h`."
msgstr ""

# 8eecb53c0ae443c69c8b64a5da4e261b
#: c-api/float.rst:69
msgid ""
"Return the maximum representable finite float *DBL_MAX* as C :c:type:"
"`double`."
msgstr ""

# 18052026114a4b368d206a610580de52
#: c-api/float.rst:74
msgid ""
"Return the minimum normalized positive float *DBL_MIN* as C :c:type:`double`."
msgstr ""

# 136735de6ef64463a680d880ff36b127
#: c-api/float.rst:78
msgid ""
"Clear the float free list. Return the number of items that could not be "
"freed."
msgstr ""

# 0baba2ec3df54ecf983f3b0f3ac888ed
#: c-api/function.rst:6
msgid "Function Objects"
msgstr ""

# a79b18e9ea0047a3a7a862cdd80930fb
#: c-api/function.rst:10
msgid "There are a few functions specific to Python functions."
msgstr ""

# bd7f83a1f0b44eb39329e1ee8395c45b
#: c-api/function.rst:15
msgid "The C structure used for functions."
msgstr ""

# cd646479a8fc422bb136eaf7a8d2c2ba
#: c-api/function.rst:22
msgid ""
"This is an instance of :c:type:`PyTypeObject` and represents the Python "
"function type.  It is exposed to Python programmers as ``types."
"FunctionType``."
msgstr ""

# c085406449d74520bf050777c97a8aa4
#: c-api/function.rst:28
msgid ""
"Return true if *o* is a function object (has type :c:data:"
"`PyFunction_Type`). The parameter must not be *NULL*."
msgstr ""

# 5c42936c6c8642418bb873d03e78b50c
#: c-api/function.rst:34
msgid ""
"Return a new function object associated with the code object *code*. "
"*globals* must be a dictionary with the global variables accessible to the "
"function."
msgstr ""

# 33b3b6735e5c43ea9cb9b0ecac5e7e0f
#: c-api/function.rst:37
msgid ""
"The function's docstring, name and *__module__* are retrieved from the code "
"object, the argument defaults and closure are set to *NULL*."
msgstr ""

# 36613defe790432c8251137c5e4d6738
#: c-api/function.rst:43
msgid "Return the code object associated with the function object *op*."
msgstr ""

# 10a9a9e41cfe47059b6e9420520b61ea
#: c-api/function.rst:48
msgid "Return the globals dictionary associated with the function object *op*."
msgstr ""

# a59713453db64683bfd447ec75ca0987
#: c-api/function.rst:53
msgid ""
"Return the *__module__* attribute of the function object *op*. This is "
"normally a string containing the module name, but can be set to any other "
"object by Python code."
msgstr ""

# 7c75448f619743a88704ede2caed7adc
#: c-api/function.rst:60
msgid ""
"Return the argument default values of the function object *op*. This can be "
"a tuple of arguments or *NULL*."
msgstr ""

# b9b4006273b4464cb3347e1971301f49
#: c-api/function.rst:66
msgid ""
"Set the argument default values for the function object *op*. *defaults* "
"must be *Py_None* or a tuple."
msgstr ""

# acd7725352694defbea3eb4d2e25d4ab
# 91106a549ffd4e30a5308dd421932da5
# c4c0cb6c7611443ea3c5457edf6147f7
#: c-api/function.rst:69 c-api/function.rst:83 c-api/function.rst:97
msgid "Raises :exc:`SystemError` and returns ``-1`` on failure."
msgstr ""

# a91c63abf651404383931691edd0596f
#: c-api/function.rst:74
msgid ""
"Return the closure associated with the function object *op*. This can be "
"*NULL* or a tuple of cell objects."
msgstr ""

# 2a325d8f56b943f3b1ff98955167dccf
#: c-api/function.rst:80
msgid ""
"Set the closure associated with the function object *op*. *closure* must be "
"*Py_None* or a tuple of cell objects."
msgstr ""

# 2862a040347041239524cb60fda71b05
#: c-api/function.rst:88
msgid ""
"Return the annotations of the function object *op*. This can be a mutable "
"dictionary or *NULL*."
msgstr ""

# 3a8a78533d884d6a9ca5994743bf01e8
#: c-api/function.rst:94
msgid ""
"Set the annotations for the function object *op*. *annotations* must be a "
"dictionary or *Py_None*."
msgstr ""

# 5c231f8d890f4e6ebaf3cc071958c695
#: c-api/gcsupport.rst:6
msgid "Supporting Cyclic Garbage Collection"
msgstr ""

# 287dd5e3456141ca941157d1cb0d657b
#: c-api/gcsupport.rst:8
msgid ""
"Python's support for detecting and collecting garbage which involves "
"circular references requires support from object types which are \"containers"
"\" for other objects which may also be containers.  Types which do not store "
"references to other objects, or which only store references to atomic types "
"(such as numbers or strings), do not need to provide any explicit support "
"for garbage collection."
msgstr ""

# 802839a2b17c4bcf81a7d318543af220
#: c-api/gcsupport.rst:15
msgid ""
"To create a container type, the :attr:`tp_flags` field of the type object "
"must include the :const:`Py_TPFLAGS_HAVE_GC` and provide an implementation "
"of the :attr:`tp_traverse` handler.  If instances of the type are mutable, "
"a :attr:`tp_clear` implementation must also be provided."
msgstr ""

# 50cdd493cfba43f0b771a6100b7e6ee5
#: c-api/gcsupport.rst:24
msgid ""
"Objects with a type with this flag set must conform with the rules "
"documented here.  For convenience these objects will be referred to as "
"container objects."
msgstr ""

# 21806618dce1483d8ad4db7c6d3d7d85
#: c-api/gcsupport.rst:28
msgid "Constructors for container types must conform to two rules:"
msgstr ""

# 686e00a903844761a862e2adec2dffb8
#: c-api/gcsupport.rst:30
msgid ""
"The memory for the object must be allocated using :c:func:`PyObject_GC_New` "
"or :c:func:`PyObject_GC_NewVar`."
msgstr ""

# 763c2c26df824e46b0b45302f3b1df13
#: c-api/gcsupport.rst:33
msgid ""
"Once all the fields which may contain references to other containers are "
"initialized, it must call :c:func:`PyObject_GC_Track`."
msgstr ""

# e0b330f3e4db42d38b3c6fe3e95831b9
#: c-api/gcsupport.rst:39
msgid ""
"Analogous to :c:func:`PyObject_New` but for container objects with the :"
"const:`Py_TPFLAGS_HAVE_GC` flag set."
msgstr ""

# b88d4f7e6f7a48ecbab5aadff4293156
#: c-api/gcsupport.rst:45
msgid ""
"Analogous to :c:func:`PyObject_NewVar` but for container objects with the :"
"const:`Py_TPFLAGS_HAVE_GC` flag set."
msgstr ""

# e561fd7c1fed4caf98d22c9c0f8f1b7a
#: c-api/gcsupport.rst:51
msgid ""
"Resize an object allocated by :c:func:`PyObject_NewVar`.  Returns the "
"resized object or *NULL* on failure."
msgstr ""

# 31e467c07f2147ccbbfbefe497bee5ad
#: c-api/gcsupport.rst:57
msgid ""
"Adds the object *op* to the set of container objects tracked by the "
"collector.  The collector can run at unexpected times so objects must be "
"valid while being tracked.  This should be called once all the fields "
"followed by the :attr:`tp_traverse` handler become valid, usually near the "
"end of the constructor."
msgstr ""

# 67bf2b4750de43a091f0e9cde64eccef
#: c-api/gcsupport.rst:66
msgid ""
"A macro version of :c:func:`PyObject_GC_Track`.  It should not be used for "
"extension modules."
msgstr ""

# 4de0126a20cc476db8eeb760eddbbed9
#: c-api/gcsupport.rst:69
msgid ""
"Similarly, the deallocator for the object must conform to a similar pair of "
"rules:"
msgstr ""

# 3c60501f9b954a589939f6addd915c13
#: c-api/gcsupport.rst:72
msgid ""
"Before fields which refer to other containers are invalidated, :c:func:"
"`PyObject_GC_UnTrack` must be called."
msgstr ""

# f695814d274b4873b519b59c4d8c038c
#: c-api/gcsupport.rst:75
msgid ""
"The object's memory must be deallocated using :c:func:`PyObject_GC_Del`."
msgstr ""

# 7e4baa85b33b423cac8cb5a707ef08e3
#: c-api/gcsupport.rst:80
msgid ""
"Releases memory allocated to an object using :c:func:`PyObject_GC_New` or :c:"
"func:`PyObject_GC_NewVar`."
msgstr ""

# 5a7f8f000b324bdcb58d0a0d2e03ad3b
#: c-api/gcsupport.rst:86
msgid ""
"Remove the object *op* from the set of container objects tracked by the "
"collector.  Note that :c:func:`PyObject_GC_Track` can be called again on "
"this object to add it back to the set of tracked objects.  The deallocator (:"
"attr:`tp_dealloc` handler) should call this for the object before any of the "
"fields used by the :attr:`tp_traverse` handler become invalid."
msgstr ""

# 45015598b0384afe9a41098ab24a4b5f
#: c-api/gcsupport.rst:95
msgid ""
"A macro version of :c:func:`PyObject_GC_UnTrack`.  It should not be used for "
"extension modules."
msgstr ""

# 91ddb216bbb84841bb21430b1fe8f25d
#: c-api/gcsupport.rst:98
msgid ""
"The :attr:`tp_traverse` handler accepts a function parameter of this type:"
msgstr ""

# 952f70edf9384304adbfa51c74c1d48c
#: c-api/gcsupport.rst:103
msgid ""
"Type of the visitor function passed to the :attr:`tp_traverse` handler. The "
"function should be called with an object to traverse as *object* and the "
"third parameter to the :attr:`tp_traverse` handler as *arg*.  The Python "
"core uses several visitor functions to implement cyclic garbage detection; "
"it's not expected that users will need to write their own visitor functions."
msgstr ""

# 45375c6a4dd744c59bae9f49f1d43e2e
#: c-api/gcsupport.rst:110
msgid "The :attr:`tp_traverse` handler must have the following type:"
msgstr ""

# b78d7d6f7fb54522b0a2aa7b33dbfd7c
#: c-api/gcsupport.rst:115
msgid ""
"Traversal function for a container object.  Implementations must call the "
"*visit* function for each object directly contained by *self*, with the "
"parameters to *visit* being the contained object and the *arg* value passed "
"to the handler.  The *visit* function must not be called with a *NULL* "
"object argument.  If *visit* returns a non-zero value that value should be "
"returned immediately."
msgstr ""

# 70b1847af83945eea1f5d43d1d7f6d73
#: c-api/gcsupport.rst:122
msgid ""
"To simplify writing :attr:`tp_traverse` handlers, a :c:func:`Py_VISIT` macro "
"is provided.  In order to use this macro, the :attr:`tp_traverse` "
"implementation must name its arguments exactly *visit* and *arg*:"
msgstr ""

# 30cd2e44b5a3497093640918e540de13
#: c-api/gcsupport.rst:129
msgid ""
"Call the *visit* callback, with arguments *o* and *arg*. If *visit* returns "
"a non-zero value, then return it.  Using this macro, :attr:`tp_traverse` "
"handlers look like::"
msgstr ""

# 4f0cfcf858ce4394a6fe705564ff5eb0
#: c-api/gcsupport.rst:141
msgid ""
"The :attr:`tp_clear` handler must be of the :c:type:`inquiry` type, or "
"*NULL* if the object is immutable."
msgstr ""

# 07f6b4cd227b4163aad2544684240384
#: c-api/gcsupport.rst:147
msgid ""
"Drop references that may have created reference cycles.  Immutable objects "
"do not have to define this method since they can never directly create "
"reference cycles.  Note that the object must still be valid after calling "
"this method (don't just call :c:func:`Py_DECREF` on a reference).  The "
"collector will call this method if it detects that this object is involved "
"in a reference cycle."
msgstr ""

# b7cee96ef3684b04be42e88491c924a9
#: c-api/gen.rst:6
msgid "Generator Objects"
msgstr ""

# 999eb6adcd504baa96d6a094f692486b
#: c-api/gen.rst:8
msgid ""
"Generator objects are what Python uses to implement generator iterators. "
"They are normally created by iterating over a function that yields values, "
"rather than explicitly calling :c:func:`PyGen_New`."
msgstr ""

# 51e3786083084d20a16560091c481dd8
#: c-api/gen.rst:15
msgid "The C structure used for generator objects."
msgstr ""

# 244d583384dc425ba4a7bfc3c32c6ce1
#: c-api/gen.rst:20
msgid "The type object corresponding to generator objects"
msgstr ""

# 4d17168e3701492ab15e1d941946e2cb
#: c-api/gen.rst:25
msgid "Return true if *ob* is a generator object; *ob* must not be *NULL*."
msgstr ""

# e8d247c82735442c89f1df9663321428
#: c-api/gen.rst:30
msgid ""
"Return true if *ob*'s type is *PyGen_Type* is a generator object; *ob* must "
"not be *NULL*."
msgstr ""

# 54b2042356a44d929f0cc25f4877fefe
#: c-api/gen.rst:36
msgid ""
"Create and return a new generator object based on the *frame* object. A "
"reference to *frame* is stolen by this function. The parameter must not be "
"*NULL*."
msgstr ""

# 7fd58a612ca04f31b491e091c4fb0fd0
#: c-api/import.rst:6
msgid "Importing Modules"
msgstr ""

# 45babca1ba464034947bccc53f383738
#: c-api/import.rst:16
msgid ""
"This is a simplified interface to :c:func:`PyImport_ImportModuleEx` below, "
"leaving the *globals* and *locals* arguments set to *NULL* and *level* set "
"to 0.  When the *name* argument contains a dot (when it specifies a "
"submodule of a package), the *fromlist* argument is set to the list "
"``['*']`` so that the return value is the named module rather than the top-"
"level package containing it as would otherwise be the case.  (Unfortunately, "
"this has an additional side effect when *name* in fact specifies a "
"subpackage instead of a submodule: the submodules specified in the package's "
"``__all__`` variable are  loaded.)  Return a new reference to the imported "
"module, or *NULL* with an exception set on failure.  A failing import of a "
"module doesn't leave the module in :data:`sys.modules`."
msgstr ""

# c3a8b1dd17bc4edb823531f955eb882d
# 973d75f79b0a43298b19d9cecfd96639
#: c-api/import.rst:28 c-api/import.rst:80
msgid "This function always uses absolute imports."
msgstr ""

# 8421ba0fb96e46d2afadc8c03685e6d9
#: c-api/import.rst:33
msgid ""
"This version of :c:func:`PyImport_ImportModule` does not block. It's "
"intended to be used in C functions that import other modules to execute a "
"function. The import may block if another thread holds the import lock. The "
"function :c:func:`PyImport_ImportModuleNoBlock` never blocks. It first tries "
"to fetch the module from sys.modules and falls back to :c:func:"
"`PyImport_ImportModule` unless the lock is held, in which case the function "
"will raise an :exc:`ImportError`."
msgstr ""

# 73acc7311307404b84330ead7d1b53e6
# 57f0c58cfd8f47fe9641b37a1cb42ff1
#: c-api/import.rst:46 c-api/import.rst:62
msgid ""
"Import a module.  This is best described by referring to the built-in Python "
"function :func:`__import__`, as the standard :func:`__import__` function "
"calls this function directly."
msgstr ""

# fbf4edabdb1343c1a684aa2320645455
# 6d23363d4d8c41c6ab8ff013a06ba0b2
#: c-api/import.rst:50 c-api/import.rst:66
msgid ""
"The return value is a new reference to the imported module or top-level "
"package, or *NULL* with an exception set on failure.  Like for :func:"
"`__import__`, the return value when a submodule of a package was requested "
"is normally the top-level package, unless a non-empty *fromlist* was given."
msgstr ""

# 131654a060124e03a4e754c0b3d96a7b
#: c-api/import.rst:56
msgid ""
"Failing imports remove incomplete module objects, like with :c:func:"
"`PyImport_ImportModule`."
msgstr ""

# 0cfe3881d43f4dc484f2ec5e02fe4765
#: c-api/import.rst:74
msgid ""
"This is a higher-level interface that calls the current \"import hook "
"function\" (with an explicit *level* of 0, meaning absolute import).  It "
"invokes the :func:`__import__` function from the ``__builtins__`` of the "
"current globals.  This means that the import is done using whatever import "
"hooks are installed in the current environment."
msgstr ""

# ad25e07ea08a40a881ab19978101e5ee
#: c-api/import.rst:85
msgid ""
"Reload a module.  Return a new reference to the reloaded module, or *NULL* "
"with an exception set on failure (the module still exists in this case)."
msgstr ""

# 4d699b090d27459181b8c7db181af28b
#: c-api/import.rst:91
msgid ""
"Return the module object corresponding to a module name.  The *name* "
"argument may be of the form ``package.module``. First check the modules "
"dictionary if there's one there, and if not, create a new one and insert it "
"in the modules dictionary. Return *NULL* with an exception set on failure."
msgstr ""

# 885e1496690648b49f895fe8e2bf4a80
#: c-api/import.rst:98
msgid ""
"This function does not load or import the module; if the module wasn't "
"already loaded, you will get an empty module object. Use :c:func:"
"`PyImport_ImportModule` or one of its variants to import a module.  Package "
"structures implied by a dotted name for *name* are not created if not "
"already present."
msgstr ""

# 570b952d256148d2a1da0cc475679b2a
#: c-api/import.rst:108
msgid ""
"Given a module name (possibly of the form ``package.module``) and a code "
"object read from a Python bytecode file or obtained from the built-in "
"function :func:`compile`, load the module.  Return a new reference to the "
"module object, or *NULL* with an exception set if an error occurred.  *name* "
"is removed from :attr:`sys.modules` in error cases, even if *name* was "
"already in :attr:`sys.modules` on entry to :c:func:"
"`PyImport_ExecCodeModule`.  Leaving incompletely initialized modules in :"
"attr:`sys.modules` is dangerous, as imports of such modules have no way to "
"know that the module object is an unknown (and probably damaged with respect "
"to the module author's intents) state."
msgstr ""

# 6be169c0ac50421e874a0a9cefb994c1
#: c-api/import.rst:118
msgid ""
"The module's :attr:`__file__` attribute will be set to the code object's :c:"
"member:`co_filename`."
msgstr ""

# 19ebcfd359144bb1a92e4b508265c977
#: c-api/import.rst:121
msgid ""
"This function will reload the module if it was already imported.  See :c:"
"func:`PyImport_ReloadModule` for the intended way to reload a module."
msgstr ""

# e6d52c8ece17469e808d4b45d3bf57fa
#: c-api/import.rst:124
msgid ""
"If *name* points to a dotted name of the form ``package.module``, any "
"package structures not already created will still not be created."
msgstr ""

# 29dcf1ebbece4dd4842fc6d3beb5eb1f
#: c-api/import.rst:127
msgid ""
"See also :c:func:`PyImport_ExecCodeModuleEx` and :c:func:"
"`PyImport_ExecCodeModuleWithPathnames`."
msgstr ""

# 4ee52debabcf4a2db02c9b05cf1856a5
#: c-api/import.rst:133
msgid ""
"Like :c:func:`PyImport_ExecCodeModule`, but the :attr:`__file__` attribute "
"of the module object is set to *pathname* if it is non-``NULL``."
msgstr ""

# 9b478dc3453944a2b45b063cbcb64d7b
#: c-api/import.rst:136
msgid "See also :c:func:`PyImport_ExecCodeModuleWithPathnames`."
msgstr ""

# 64a4c24616454232851b4fdf2b374770
#: c-api/import.rst:141
msgid ""
"Like :c:func:`PyImport_ExecCodeModuleEx`, but the :attr:`__cached__` "
"attribute of the module object is set to *cpathname* if it is non-``NULL``.  "
"Of the three functions, this is the preferred one to use."
msgstr ""

# 3ba2e276a9fe4344ae0bff5236acd7b9
#: c-api/import.rst:149
msgid ""
"Return the magic number for Python bytecode files (a.k.a. :file:`.pyc` and :"
"file:`.pyo` files).  The magic number should be present in the first four "
"bytes of the bytecode file, in little-endian byte order."
msgstr ""

# bc560e3b5a3e45c5acff59c3d70c988f
#: c-api/import.rst:156
msgid ""
"Return the magic tag string for :pep:`3147` format Python bytecode file "
"names."
msgstr ""

# b6a3070d8ff94fb5bb10e7b27546a7c0
#: c-api/import.rst:163
msgid ""
"Return the dictionary used for the module administration (a.k.a. ``sys."
"modules``).  Note that this is a per-interpreter variable."
msgstr ""

# e82348c3e69b46719fc1aa10203ed1f7
#: c-api/import.rst:169
msgid ""
"Return an importer object for a :data:`sys.path`/:attr:`pkg.__path__` item "
"*path*, possibly by fetching it from the :data:`sys.path_importer_cache` "
"dict.  If it wasn't yet cached, traverse :data:`sys.path_hooks` until a hook "
"is found that can handle the path item.  Return ``None`` if no hook could; "
"this tells our caller it should fall back to the built-in import mechanism. "
"Cache the result in :data:`sys.path_importer_cache`.  Return a new reference "
"to the importer object."
msgstr ""

# f3302efb02f8496ab05926cc0f12e82e
#: c-api/import.rst:180
msgid "Initialize the import mechanism.  For internal use only."
msgstr ""

# a1c428cf77a24d1d95c79535495a1ac5
#: c-api/import.rst:185
msgid "Empty the module table.  For internal use only."
msgstr ""

# 374ab2da4f83414aaf8d30911f915036
#: c-api/import.rst:190
msgid "Finalize the import mechanism.  For internal use only."
msgstr ""

# eecadea179ac40bca21861776568f78c
# bf3d31c6d429409998f9228039347497
#: c-api/import.rst:195 c-api/import.rst:200
msgid "For internal use only."
msgstr ""

# 82852dfd1a4d4331a989c515d33bebfb
#: c-api/import.rst:205
msgid ""
"Load a frozen module named *name*.  Return ``1`` for success, ``0`` if the "
"module is not found, and ``-1`` with an exception set if the initialization "
"failed.  To access the imported module on a successful load, use :c:func:"
"`PyImport_ImportModule`.  (Note the misnomer --- this function would reload "
"the module if it was already imported.)"
msgstr ""

# 1be536960d3d4e4e865d296194080fa1
#: c-api/import.rst:216
msgid ""
"This is the structure type definition for frozen module descriptors, as "
"generated by the :program:`freeze` utility (see :file:`Tools/freeze/` in the "
"Python source distribution).  Its definition, found in :file:`Include/import."
"h`, is::"
msgstr ""

# 53cdc52446244cffb87a239ab14d6ce6
#: c-api/import.rst:230
msgid ""
"This pointer is initialized to point to an array of :c:type:`struct _frozen` "
"records, terminated by one whose members are all *NULL* or zero.  When a "
"frozen module is imported, it is searched in this table.  Third-party code "
"could play tricks with this to provide a dynamically created collection of "
"frozen modules."
msgstr ""

# ee9af43f8758435b9e6a00fd457fda0c
#: c-api/import.rst:238
msgid ""
"Add a single module to the existing table of built-in modules.  This is a "
"convenience wrapper around :c:func:`PyImport_ExtendInittab`, returning "
"``-1`` if the table could not be extended.  The new module can be imported "
"by the name *name*, and uses the function *initfunc* as the initialization "
"function called on the first attempted import.  This should be called "
"before :c:func:`Py_Initialize`."
msgstr ""

# 41343e93a33a4af6ae2fd37a31810797
#: c-api/import.rst:248
msgid ""
"Structure describing a single entry in the list of built-in modules.  Each "
"of these structures gives the name and initialization function for a module "
"built into the interpreter.  Programs which embed Python may use an array of "
"these structures in conjunction with :c:func:`PyImport_ExtendInittab` to "
"provide additional built-in modules.  The structure is defined in :file:"
"`Include/import.h` as::"
msgstr ""

# 9f4b2caa0fe24b868ed0636283167be4
#: c-api/import.rst:263
msgid ""
"Add a collection of modules to the table of built-in modules.  The *newtab* "
"array must end with a sentinel entry which contains *NULL* for the :attr:"
"`name` field; failure to provide the sentinel value can result in a memory "
"fault. Returns ``0`` on success or ``-1`` if insufficient memory could be "
"allocated to extend the internal table.  In the event of failure, no modules "
"are added to the internal table.  This should be called before :c:func:"
"`Py_Initialize`."
msgstr ""

# 60cd44045e3043c8b32fbdea480ec5b2
#: c-api/index.rst:5
msgid "Python/C API Reference Manual"
msgstr ""

# b0c38cea9a954c218a8d5e1282470d5f
#: c-api/index.rst:7
msgid ""
"This manual documents the API used by C and C++ programmers who want to "
"write extension modules or embed Python.  It is a companion to :ref:"
"`extending-index`, which describes the general principles of extension "
"writing but does not document the API functions in detail."
msgstr ""

# ee24c9942a8e46d4873ab85ffd06233b
#: c-api/init.rst:8
msgid "Initialization, Finalization, and Threads"
msgstr ""

# 1c0e309aad6d404d95bbad57baf3c91b
#: c-api/init.rst:12
msgid "Initializing and finalizing the interpreter"
msgstr ""

# 69102028bfcf4065ad21634e13d69291
#: c-api/init.rst:30
msgid ""
"Initialize the Python interpreter.  In an application embedding  Python, "
"this should be called before using any other Python/C API functions; with "
"the exception of :c:func:`Py_SetProgramName`, :c:func:`Py_SetPythonHome` "
"and :c:func:`Py_SetPath`.  This initializes the table of loaded modules "
"(``sys.modules``), and creates the fundamental modules :mod:`builtins`, :mod:"
"`__main__` and :mod:`sys`.  It also initializes the module search path "
"(``sys.path``). It does not set ``sys.argv``; use :c:func:`PySys_SetArgvEx` "
"for that.  This is a no-op when called for a second time (without calling :c:"
"func:`Py_Finalize` first).  There is no return value; it is a fatal error if "
"the initialization fails."
msgstr ""

# 8df36c5c63ea483185dac1b4082455f5
#: c-api/init.rst:43
msgid ""
"This function works like :c:func:`Py_Initialize` if *initsigs* is 1. If "
"*initsigs* is 0, it skips initialization registration of signal handlers, "
"which might be useful when Python is embedded."
msgstr ""

# 2a1094ef2fa44abf86f65d6454c5c8cf
#: c-api/init.rst:50
msgid ""
"Return true (nonzero) when the Python interpreter has been initialized, "
"false (zero) if not.  After :c:func:`Py_Finalize` is called, this returns "
"false until :c:func:`Py_Initialize` is called again."
msgstr ""

# ab1ef82b4a5d4b38a48fc7ab5dbc13df
#: c-api/init.rst:57
msgid ""
"Undo all initializations made by :c:func:`Py_Initialize` and subsequent use "
"of Python/C API functions, and destroy all sub-interpreters (see :c:func:"
"`Py_NewInterpreter` below) that were created and not yet destroyed since the "
"last call to :c:func:`Py_Initialize`.  Ideally, this frees all memory "
"allocated by the Python interpreter.  This is a no-op when called for a "
"second time (without calling :c:func:`Py_Initialize` again first).  There is "
"no return value; errors during finalization are ignored."
msgstr ""

# 234c9984c73340e48b54963e11c6a15d
#: c-api/init.rst:65
msgid ""
"This function is provided for a number of reasons.  An embedding application "
"might want to restart Python without having to restart the application "
"itself. An application that has loaded the Python interpreter from a "
"dynamically loadable library (or DLL) might want to free all memory "
"allocated by Python before unloading the DLL. During a hunt for memory leaks "
"in an application a developer might want to free all memory allocated by "
"Python before exiting from the application."
msgstr ""

# 957e76fb7f52494eb682b89f417c6e3a
#: c-api/init.rst:73
msgid ""
"**Bugs and caveats:** The destruction of modules and objects in modules is "
"done in random order; this may cause destructors (:meth:`__del__` methods) "
"to fail when they depend on other objects (even functions) or modules.  "
"Dynamically loaded extension modules loaded by Python are not unloaded.  "
"Small amounts of memory allocated by the Python interpreter may not be freed "
"(if you find a leak, please report it).  Memory tied up in circular "
"references between objects is not freed.  Some memory allocated by extension "
"modules may not be freed.  Some extensions may not work properly if their "
"initialization routine is called more than once; this can happen if an "
"application calls :c:func:`Py_Initialize` and :c:func:`Py_Finalize` more "
"than once."
msgstr ""

# 075f2bdd395e481f8284d2595a378586
#: c-api/init.rst:86
msgid "Process-wide parameters"
msgstr ""

# 2739505d87254496b126ff94a215e893
#: c-api/init.rst:96
msgid ""
"This function should be called before :c:func:`Py_Initialize` is called for "
"the first time, if it is called at all.  It tells the interpreter the value "
"of the ``argv[0]`` argument to the :c:func:`main` function of the program "
"(converted to wide characters). This is used by :c:func:`Py_GetPath` and "
"some other functions below to find the Python run-time libraries relative to "
"the interpreter executable.  The default value is ``'python'``.  The "
"argument should point to a zero-terminated wide character string in static "
"storage whose contents will not change for the duration of the program's "
"execution.  No code in the Python interpreter will change the contents of "
"this storage."
msgstr ""

# b1d3a0896ba5437490e2f11b554ee355
#: c-api/init.rst:112
msgid ""
"Return the program name set with :c:func:`Py_SetProgramName`, or the "
"default. The returned string points into static storage; the caller should "
"not modify its value."
msgstr ""

# ec6116074a4845a98a4a86e18b7b5184
#: c-api/init.rst:119
msgid ""
"Return the *prefix* for installed platform-independent files. This is "
"derived through a number of complicated rules from the program name set "
"with :c:func:`Py_SetProgramName` and some environment variables; for "
"example, if the program name is ``'/usr/local/bin/python'``, the prefix is "
"``'/usr/local'``. The returned string points into static storage; the caller "
"should not modify its value.  This corresponds to the :makevar:`prefix` "
"variable in the top-level :file:`Makefile` and the ``--prefix`` argument to "
"the :program:`configure` script at build time.  The value is available to "
"Python code as ``sys.prefix``. It is only useful on Unix.  See also the next "
"function."
msgstr ""

# 345d01ba7daa4685833f76efe8d93778
#: c-api/init.rst:132
msgid ""
"Return the *exec-prefix* for installed platform-*dependent* files.  This is "
"derived through a number of complicated rules from the program name set "
"with :c:func:`Py_SetProgramName` and some environment variables; for "
"example, if the program name is ``'/usr/local/bin/python'``, the exec-prefix "
"is ``'/usr/local'``.  The returned string points into static storage; the "
"caller should not modify its value.  This corresponds to the :makevar:"
"`exec_prefix` variable in the top-level :file:`Makefile` and the ``--exec-"
"prefix`` argument to the :program:`configure` script at build  time.  The "
"value is available to Python code as ``sys.exec_prefix``.  It is only useful "
"on Unix."
msgstr ""

# 22720501e3f44494a86d8c776149fb9c
#: c-api/init.rst:142
msgid ""
"Background: The exec-prefix differs from the prefix when platform dependent "
"files (such as executables and shared libraries) are installed in a "
"different directory tree.  In a typical installation, platform dependent "
"files may be installed in the :file:`/usr/local/plat` subtree while platform "
"independent may be installed in :file:`/usr/local`."
msgstr ""

# c709523f3c604b7487d3788fa494f7a2
#: c-api/init.rst:148
msgid ""
"Generally speaking, a platform is a combination of hardware and software "
"families, e.g.  Sparc machines running the Solaris 2.x operating system are "
"considered the same platform, but Intel machines running Solaris 2.x are "
"another platform, and Intel machines running Linux are yet another "
"platform.  Different major revisions of the same operating system generally "
"also form different platforms.  Non-Unix operating systems are a different "
"story; the installation strategies on those systems are so different that "
"the prefix and exec-prefix are meaningless, and set to the empty string. "
"Note that compiled Python bytecode files are platform independent (but not "
"independent from the Python version by which they were compiled!)."
msgstr ""

# 2d8ddebaa4544dd993175b84da033bd0
#: c-api/init.rst:159
msgid ""
"System administrators will know how to configure the :program:`mount` or :"
"program:`automount` programs to share :file:`/usr/local` between platforms "
"while having :file:`/usr/local/plat` be a different filesystem for each "
"platform."
msgstr ""

# 73abeb8e22f1460ca59618a8577454b9
#: c-api/init.rst:171
msgid ""
"Return the full program name of the Python executable; this is  computed as "
"a side-effect of deriving the default module search path  from the program "
"name (set by :c:func:`Py_SetProgramName` above). The returned string points "
"into static storage; the caller should not modify its value.  The value is "
"available to Python code as ``sys.executable``."
msgstr ""

# abbb844075c44f0da5803954e071ae97
#: c-api/init.rst:185
msgid ""
"Return the default module search path; this is computed from the program "
"name (set by :c:func:`Py_SetProgramName` above) and some environment "
"variables. The returned string consists of a series of directory names "
"separated by a platform dependent delimiter character.  The delimiter "
"character is ``':'`` on Unix and Mac OS X, ``';'`` on Windows.  The returned "
"string points into static storage; the caller should not modify its value.  "
"The list :data:`sys.path` is initialized with this value on interpreter "
"startup; it can be (and usually is) modified later to change the search path "
"for loading modules."
msgstr ""

# 6e1180c00d5f4d99a69ea37ef38cb3a1
#: c-api/init.rst:205
msgid ""
"Set the default module search path.  If this function is called before :c:"
"func:`Py_Initialize`, then :c:func:`Py_GetPath` won't attempt to compute a "
"default search path but uses the one provided instead.  This is useful if "
"Python is embedded by an application that has full knowledge of the location "
"of all modules.  The path components should be separated by semicolons."
msgstr ""

# 82430bc0012a44379e090635f3b932c8
#: c-api/init.rst:211
msgid ""
"This also causes :data:`sys.executable` to be set only to the raw program "
"name (see :c:func:`Py_SetProgramName`) and for :data:`sys.prefix` and :data:"
"`sys.exec_prefix` to be empty.  It is up to the caller to modify these if "
"required after calling :c:func:`Py_Initialize`."
msgstr ""

# 614bca88587841d4950f4ea36e364181
#: c-api/init.rst:219
msgid ""
"Return the version of this Python interpreter.  This is a string that looks "
"something like ::"
msgstr ""

# 2196c205faef4ad886e8c1904499ccad
#: c-api/init.rst:226
msgid ""
"The first word (up to the first space character) is the current Python "
"version; the first three characters are the major and minor version "
"separated by a period.  The returned string points into static storage; the "
"caller should not modify its value.  The value is available to Python code "
"as :data:`sys.version`."
msgstr ""

# 07ca852595cf443eb60239430f9a545d
#: c-api/init.rst:236
msgid ""
"Return the platform identifier for the current platform.  On Unix, this is "
"formed from the \"official\" name of the operating system, converted to "
"lower case, followed by the major revision number; e.g., for Solaris 2.x, "
"which is also known as SunOS 5.x, the value is ``'sunos5'``.  On Mac OS X, "
"it is ``'darwin'``.  On Windows, it is ``'win'``.  The returned string "
"points into static storage; the caller should not modify its value.  The "
"value is available to Python code as ``sys.platform``."
msgstr ""

# a3fb9e2116824774acff79738b2a49c7
#: c-api/init.rst:247
msgid ""
"Return the official copyright string for the current Python version, for "
"example"
msgstr ""

# 4565cd8986b540889a00ac269f0dc4e6
#: c-api/init.rst:249
msgid "``'Copyright 1991-1995 Stichting Mathematisch Centrum, Amsterdam'``"
msgstr ""

# 5b86b76d488a4890a9fb6a795e2e08c1
#: c-api/init.rst:253
msgid ""
"The returned string points into static storage; the caller should not modify "
"its value.  The value is available to Python code as ``sys.copyright``."
msgstr ""

# 5356e5cc0df54913b2a148ba286c7d54
#: c-api/init.rst:259
msgid ""
"Return an indication of the compiler used to build the current Python "
"version, in square brackets, for example::"
msgstr ""

# 9c51c7b3dd75462d9ebd8434c2533aa8
# c99583f17d7e45dc99cad6c73dbcb09c
#: c-api/init.rst:266 c-api/init.rst:280
msgid ""
"The returned string points into static storage; the caller should not modify "
"its value.  The value is available to Python code as part of the variable "
"``sys.version``."
msgstr ""

# 047ff9ef21f6459a833168a0acc36bab
#: c-api/init.rst:273
msgid ""
"Return information about the sequence number and build date and time  of the "
"current Python interpreter instance, for example ::"
msgstr ""

# 137f00b0eae048e29547b0a31800eb65
#: c-api/init.rst:292
msgid ""
"Set :data:`sys.argv` based on *argc* and *argv*.  These parameters are "
"similar to those passed to the program's :c:func:`main` function with the "
"difference that the first entry should refer to the script file to be "
"executed rather than the executable hosting the Python interpreter.  If "
"there isn't a script that will be run, the first entry in *argv* can be an "
"empty string.  If this function fails to initialize :data:`sys.argv`, a "
"fatal condition is signalled using :c:func:`Py_FatalError`."
msgstr ""

# 59efe7b748ca47eeabf1ee44761e9ec8
#: c-api/init.rst:300
msgid ""
"If *updatepath* is zero, this is all the function does.  If *updatepath* is "
"non-zero, the function also modifies :data:`sys.path` according to the "
"following algorithm:"
msgstr ""

# 4f1dd353d2144c698f21f91a3e8383dd
#: c-api/init.rst:304
msgid ""
"If the name of an existing script is passed in ``argv[0]``, the absolute "
"path of the directory where the script is located is prepended to :data:`sys."
"path`."
msgstr ""

# b8a99ea2a1884571b4233a808d5f557c
#: c-api/init.rst:307
msgid ""
"Otherwise (that is, if *argc* is 0 or ``argv[0]`` doesn't point to an "
"existing file name), an empty string is prepended to :data:`sys.path`, which "
"is the same as prepending the current working directory (``\".\"``)."
msgstr ""

# a64e3974390f4458b883b4b9f877b73a
#: c-api/init.rst:313
msgid ""
"It is recommended that applications embedding the Python interpreter for "
"purposes other than executing a single script pass 0 as *updatepath*, and "
"update :data:`sys.path` themselves if desired. See `CVE-2008-5983 <http://"
"cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5983>`_."
msgstr ""

# ab5b7a612b1340d784748ab9f8c70406
#: c-api/init.rst:318
msgid ""
"On versions before 3.1.3, you can achieve the same effect by manually "
"popping the first :data:`sys.path` element after having called :c:func:"
"`PySys_SetArgv`, for example using::"
msgstr ""

# fcad158943f34e798d330f2a75cd26dc
#: c-api/init.rst:332
msgid ""
"This function works like :c:func:`PySys_SetArgvEx` with *updatepath* set to "
"1."
msgstr ""

# 8187f0a78b014e7db361523eda917c47
#: c-api/init.rst:337
msgid ""
"Set the default \"home\" directory, that is, the location of the standard "
"Python libraries.  See :envvar:`PYTHONHOME` for the meaning of the argument "
"string."
msgstr ""

# e071efea621948008bd04726b98e6574
#: c-api/init.rst:341
msgid ""
"The argument should point to a zero-terminated character string in static "
"storage whose contents will not change for the duration of the program's "
"execution.  No code in the Python interpreter will change the contents of "
"this storage."
msgstr ""

# 6634f3954048469bbdf760dd5e7e6bec
#: c-api/init.rst:349
msgid ""
"Return the default \"home\", that is, the value set by a previous call to :c:"
"func:`Py_SetPythonHome`, or the value of the :envvar:`PYTHONHOME` "
"environment variable if it is set."
msgstr ""

# 665aaa6c212d42c88ad66e91d78aeb6b
#: c-api/init.rst:357
msgid "Thread State and the Global Interpreter Lock"
msgstr ""

# 8a4040df7ed2422e81b5c1d907e3ced4
#: c-api/init.rst:364
msgid ""
"The Python interpreter is not fully thread-safe.  In order to support multi-"
"threaded Python programs, there's a global lock, called the :term:`global "
"interpreter lock` or :term:`GIL`, that must be held by the current thread "
"before it can safely access Python objects. Without the lock, even the "
"simplest operations could cause problems in a multi-threaded program: for "
"example, when two threads simultaneously increment the reference count of "
"the same object, the reference count could end up being incremented only "
"once instead of twice."
msgstr ""

# 625445a6f0ee4b87ab2bd929e8d798a3
#: c-api/init.rst:374
msgid ""
"Therefore, the rule exists that only the thread that has acquired the :term:"
"`GIL` may operate on Python objects or call Python/C API functions. In order "
"to emulate concurrency of execution, the interpreter regularly tries to "
"switch threads (see :func:`sys.setswitchinterval`).  The lock is also "
"released around potentially blocking I/O operations like reading or writing "
"a file, so that other Python threads can run in the meantime."
msgstr ""

# 5e144cf7c8284ac38d88920a7397c7de
#: c-api/init.rst:385
msgid ""
"The Python interpreter keeps some thread-specific bookkeeping information "
"inside a data structure called :c:type:`PyThreadState`.  There's also one "
"global variable pointing to the current :c:type:`PyThreadState`: it can be "
"retrieved using :c:func:`PyThreadState_Get`."
msgstr ""

# 6e6d781bf1bc41f1abef3a8f178afe5f
#: c-api/init.rst:391
msgid "Releasing the GIL from extension code"
msgstr ""

# 2f4be2703eef4127a834b9e84a14efa4
#: c-api/init.rst:393
msgid ""
"Most extension code manipulating the :term:`GIL` has the following simple "
"structure::"
msgstr ""

# 14008ec2ecb64d75b12a2d07d5c27e98
#: c-api/init.rst:402
msgid "This is so common that a pair of macros exists to simplify it::"
msgstr ""

# 5f06f88a41df4fcdb5ebc4e26f862cdd
#: c-api/init.rst:412
msgid ""
"The :c:macro:`Py_BEGIN_ALLOW_THREADS` macro opens a new block and declares a "
"hidden local variable; the :c:macro:`Py_END_ALLOW_THREADS` macro closes the "
"block.  These two macros are still available when Python is compiled without "
"thread support (they simply have an empty expansion)."
msgstr ""

# 29dd6c6dd68840d1ab1909ccf3de1f1f
#: c-api/init.rst:417
msgid ""
"When thread support is enabled, the block above expands to the following "
"code::"
msgstr ""

# e9327d8ed8f84db2a6b99e04d3b5957d
#: c-api/init.rst:429
msgid ""
"Here is how these functions work: the global interpreter lock is used to "
"protect the pointer to the current thread state.  When releasing the lock "
"and saving the thread state, the current thread state pointer must be "
"retrieved before the lock is released (since another thread could "
"immediately acquire the lock and store its own thread state in the global "
"variable). Conversely, when acquiring the lock and restoring the thread "
"state, the lock must be acquired before storing the thread state pointer."
msgstr ""

# 580b1bbb75364e4e862b284ff5ad5cce
#: c-api/init.rst:438
msgid ""
"Calling system I/O functions is the most common use case for releasing the "
"GIL, but it can also be useful before calling long-running computations "
"which don't need access to Python objects, such as compression or "
"cryptographic functions operating over memory buffers.  For example, the "
"standard :mod:`zlib` and :mod:`hashlib` modules release the GIL when "
"compressing or hashing data."
msgstr ""

# 0fdc775220f8462dbe685c4b24d27e10
#: c-api/init.rst:446
msgid "Non-Python created threads"
msgstr ""

# b26f9914d4a74affa2fa96a988bf1f15
#: c-api/init.rst:448
msgid ""
"When threads are created using the dedicated Python APIs (such as the :mod:"
"`threading` module), a thread state is automatically associated to them and "
"the code showed above is therefore correct.  However, when threads are "
"created from C (for example by a third-party library with its own thread "
"management), they don't hold the GIL, nor is there a thread state structure "
"for them."
msgstr ""

# 4cb87c33e2cb49a7bdc459d39629fb9e
#: c-api/init.rst:455
msgid ""
"If you need to call Python code from these threads (often this will be part "
"of a callback API provided by the aforementioned third-party library), you "
"must first register these threads with the interpreter by creating a thread "
"state data structure, then acquiring the GIL, and finally storing their "
"thread state pointer, before you can start using the Python/C API.  When you "
"are done, you should reset the thread state pointer, release the GIL, and "
"finally free the thread state data structure."
msgstr ""

# 856638f013a246fa82b011a969968db1
#: c-api/init.rst:463
msgid ""
"The :c:func:`PyGILState_Ensure` and :c:func:`PyGILState_Release` functions "
"do all of the above automatically.  The typical idiom for calling into "
"Python from a C thread is::"
msgstr ""

# e0609ee8147c4d38a48a963180616b62
#: c-api/init.rst:477
msgid ""
"Note that the :c:func:`PyGILState_\\*` functions assume there is only one "
"global interpreter (created automatically by :c:func:`Py_Initialize`).  "
"Python supports the creation of additional interpreters (using :c:func:"
"`Py_NewInterpreter`), but mixing multiple interpreters and the :c:func:"
"`PyGILState_\\*` API is unsupported."
msgstr ""

# 2c40c47f1ee4425293bc37fa8e8b4284
#: c-api/init.rst:483
msgid ""
"Another important thing to note about threads is their behaviour in the face "
"of the C :c:func:`fork` call. On most systems with :c:func:`fork`, after a "
"process forks only the thread that issued the fork will exist. That also "
"means any locks held by other threads will never be released. Python solves "
"this for :func:`os.fork` by acquiring the locks it uses internally before "
"the fork, and releasing them afterwards. In addition, it resets any :ref:"
"`lock-objects` in the child. When extending or embedding Python, there is no "
"way to inform Python of additional (non-Python) locks that need to be "
"acquired before or reset after a fork. OS facilities such as :c:func:"
"`pthread_atfork` would need to be used to accomplish the same thing. "
"Additionally, when extending or embedding Python, calling :c:func:`fork` "
"directly rather than through :func:`os.fork` (and returning to or calling "
"into Python) may result in a deadlock by one of Python's internal locks "
"being held by a thread that is defunct after the fork. :c:func:"
"`PyOS_AfterFork` tries to reset the necessary locks, but is not always able "
"to."
msgstr ""

# 7d72ffeff1274125a509c5d708e89576
#: c-api/init.rst:502
msgid "High-level API"
msgstr ""

# 7198ec2b595744f09a9a5d06666f12ef
#: c-api/init.rst:504
msgid ""
"These are the most commonly used types and functions when writing C "
"extension code, or when embedding the Python interpreter:"
msgstr ""

# f3341f82f681478eac14e1c27434c527
#: c-api/init.rst:509
msgid ""
"This data structure represents the state shared by a number of cooperating "
"threads.  Threads belonging to the same interpreter share their module "
"administration and a few other internal items. There are no public members "
"in this structure."
msgstr ""

# ffcfd2b67c754b8f98697dee86b9cdc8
#: c-api/init.rst:514
msgid ""
"Threads belonging to different interpreters initially share nothing, except "
"process state like available memory, open file descriptors and such.  The "
"global interpreter lock is also shared by all threads, regardless of to "
"which interpreter they belong."
msgstr ""

# 4c9eec843a79448ab398bcddfe84b3f5
#: c-api/init.rst:522
msgid ""
"This data structure represents the state of a single thread.  The only "
"public data member is :c:type:`PyInterpreterState \\*`:attr:`interp`, which "
"points to this thread's interpreter state."
msgstr ""

# 885d5ab6a57a43df9527e53791770fb1
#: c-api/init.rst:535
msgid ""
"Initialize and acquire the global interpreter lock.  It should be called in "
"the main thread before creating a second thread or engaging in any other "
"thread operations such as ``PyEval_ReleaseThread(tstate)``. It is not needed "
"before calling :c:func:`PyEval_SaveThread` or :c:func:`PyEval_RestoreThread`."
msgstr ""

# 0fdcc36e9080402f8370922a7ab81662
#: c-api/init.rst:540
msgid "This is a no-op when called for a second time."
msgstr ""

# 3de535f64d5e4b90a4b947d90657c11c
#: c-api/init.rst:548
msgid ""
"When only the main thread exists, no GIL operations are needed. This is a "
"common situation (most Python programs do not use threads), and the lock "
"operations slow the interpreter down a bit. Therefore, the lock is not "
"created initially.  This situation is equivalent to having acquired the "
"lock: when there is only a single thread, all object accesses are safe.  "
"Therefore, when this function initializes the global interpreter lock, it "
"also acquires it.  Before the Python :mod:`_thread` module creates a new "
"thread, knowing that either it has the lock or the lock hasn't been created "
"yet, it calls :c:func:`PyEval_InitThreads`.  When this call returns, it is "
"guaranteed that the lock has been created and that the calling thread has "
"acquired it."
msgstr ""

# 7bf1eb6a4e3f46dabdf5226423c695e3
#: c-api/init.rst:559
msgid ""
"It is **not** safe to call this function when it is unknown which thread (if "
"any) currently has the global interpreter lock."
msgstr ""

# 0617c60766a74d5c9c10e4589207ecff
#: c-api/init.rst:562
msgid ""
"This function is not available when thread support is disabled at compile "
"time."
msgstr ""

# 8e267ade8f394adb9a23eefd3448af2d
#: c-api/init.rst:567
msgid ""
"Returns a non-zero value if :c:func:`PyEval_InitThreads` has been called.  "
"This function can be called without holding the GIL, and therefore can be "
"used to avoid calls to the locking API when running single-threaded.  This "
"function is not available when thread support is disabled at compile time."
msgstr ""

# 7de0eacf715b4b188aa5acfbaa030458
#: c-api/init.rst:575
msgid ""
"Release the global interpreter lock (if it has been created and thread "
"support is enabled) and reset the thread state to *NULL*, returning the "
"previous thread state (which is not *NULL*).  If the lock has been created, "
"the current thread must have acquired it.  (This function is available even "
"when thread support is disabled at compile time.)"
msgstr ""

# 884a1a7f7ebd48ffb7864388b60f550b
#: c-api/init.rst:584
msgid ""
"Acquire the global interpreter lock (if it has been created and thread "
"support is enabled) and set the thread state to *tstate*, which must not be "
"*NULL*.  If the lock has been created, the current thread must not have "
"acquired it, otherwise deadlock ensues.  (This function is available even "
"when thread support is disabled at compile time.)"
msgstr ""

# 73076b7c1fcc44bba6d33bada66097dc
#: c-api/init.rst:593
msgid ""
"Return the current thread state.  The global interpreter lock must be held. "
"When the current thread state is *NULL*, this issues a fatal error (so that "
"the caller needn't check for *NULL*)."
msgstr ""

# 0f41999644b94ecc8e843af2813f5ae3
#: c-api/init.rst:600
msgid ""
"Swap the current thread state with the thread state given by the argument "
"*tstate*, which may be *NULL*.  The global interpreter lock must be held and "
"is not released."
msgstr ""

# 2bfd701cb9384a4ba1fe35e5f4425bba
#: c-api/init.rst:607
msgid ""
"This function is called from :c:func:`PyOS_AfterFork` to ensure that newly "
"created child processes don't hold locks referring to threads which are not "
"running in the child process."
msgstr ""

# 330e82107cf746348c64a8f43728b32b
#: c-api/init.rst:612
msgid ""
"The following functions use thread-local storage, and are not compatible "
"with sub-interpreters:"
msgstr ""

# 3cbe64586be647cab6d78ad668b680db
#: c-api/init.rst:617
msgid ""
"Ensure that the current thread is ready to call the Python C API regardless "
"of the current state of Python, or of the global interpreter lock. This may "
"be called as many times as desired by a thread as long as each call is "
"matched with a call to :c:func:`PyGILState_Release`. In general, other "
"thread-related APIs may be used between :c:func:`PyGILState_Ensure` and :c:"
"func:`PyGILState_Release` calls as long as the thread state is restored to "
"its previous state before the Release().  For example, normal usage of the :"
"c:macro:`Py_BEGIN_ALLOW_THREADS` and :c:macro:`Py_END_ALLOW_THREADS` macros "
"is acceptable."
msgstr ""

# 23a21bed19fb45e8a4dd1ed9758c6b4d
#: c-api/init.rst:627
msgid ""
"The return value is an opaque \"handle\" to the thread state when :c:func:"
"`PyGILState_Ensure` was called, and must be passed to :c:func:"
"`PyGILState_Release` to ensure Python is left in the same state. Even though "
"recursive calls are allowed, these handles *cannot* be shared - each unique "
"call to :c:func:`PyGILState_Ensure` must save the handle for its call to :c:"
"func:`PyGILState_Release`."
msgstr ""

# 02401645018b41e4a42109effe1e43b2
#: c-api/init.rst:634
msgid ""
"When the function returns, the current thread will hold the GIL and be able "
"to call arbitrary Python code.  Failure is a fatal error."
msgstr ""

# 775a5396b5e7426e88fcbf0d74d7b5bf
#: c-api/init.rst:640
msgid ""
"Release any resources previously acquired.  After this call, Python's state "
"will be the same as it was prior to the corresponding :c:func:"
"`PyGILState_Ensure` call (but generally this state will be unknown to the "
"caller, hence the use of the GILState API)."
msgstr ""

# 9798e3af21a747bc9266ed3eda72d164
#: c-api/init.rst:645
msgid ""
"Every call to :c:func:`PyGILState_Ensure` must be matched by a call to :c:"
"func:`PyGILState_Release` on the same thread."
msgstr ""

# 65238d6da9824b6a9827a3ff49cf8622
#: c-api/init.rst:651
msgid ""
"Get the current thread state for this thread.  May return ``NULL`` if no "
"GILState API has been used on the current thread.  Note that the main thread "
"always has such a thread-state, even if no auto-thread-state call has been "
"made on the main thread.  This is mainly a helper/diagnostic function."
msgstr ""

# b4bdbce5bffa44ce9057d144884475c8
#: c-api/init.rst:657
msgid ""
"The following macros are normally used without a trailing semicolon; look "
"for example usage in the Python source distribution."
msgstr ""

# 47f3bd398c9e4d449266034fed69a71d
#: c-api/init.rst:663
msgid ""
"This macro expands to ``{ PyThreadState *_save; _save = PyEval_SaveThread();"
"``. Note that it contains an opening brace; it must be matched with a "
"following :c:macro:`Py_END_ALLOW_THREADS` macro.  See above for further "
"discussion of this macro.  It is a no-op when thread support is disabled at "
"compile time."
msgstr ""

# 8a613f1dcd0e48ba852f9dbbfa18a57c
#: c-api/init.rst:671
msgid ""
"This macro expands to ``PyEval_RestoreThread(_save); }``. Note that it "
"contains a closing brace; it must be matched with an earlier :c:macro:"
"`Py_BEGIN_ALLOW_THREADS` macro.  See above for further discussion of this "
"macro.  It is a no-op when thread support is disabled at compile time."
msgstr ""

# 45792806950a4664b52a67e2be9fca7b
#: c-api/init.rst:679
msgid ""
"This macro expands to ``PyEval_RestoreThread(_save);``: it is equivalent to :"
"c:macro:`Py_END_ALLOW_THREADS` without the closing brace.  It is a no-op "
"when thread support is disabled at compile time."
msgstr ""

# 776bd2b980dc46a1892adcf85486ed6e
#: c-api/init.rst:686
msgid ""
"This macro expands to ``_save = PyEval_SaveThread();``: it is equivalent to :"
"c:macro:`Py_BEGIN_ALLOW_THREADS` without the opening brace and variable "
"declaration.  It is a no-op when thread support is disabled at compile time."
msgstr ""

# 72f5ff15b12d445aa13377897e1767f3
#: c-api/init.rst:692
msgid "Low-level API"
msgstr ""

# d3b79ad74aa84f5a9908b70fb75b5d2b
#: c-api/init.rst:694
msgid ""
"All of the following functions are only available when thread support is "
"enabled at compile time, and must be called only when the global interpreter "
"lock has been created."
msgstr ""

# 1ec6908dacc548d5a748e30178da372a
#: c-api/init.rst:701
msgid ""
"Create a new interpreter state object.  The global interpreter lock need not "
"be held, but may be held if it is necessary to serialize calls to this "
"function."
msgstr ""

# ffb27ae7c52d41108e991e1abf3f262e
#: c-api/init.rst:708
msgid ""
"Reset all information in an interpreter state object.  The global "
"interpreter lock must be held."
msgstr ""

# 764f57e257994b3d9ef17d57d6c6bfe4
#: c-api/init.rst:714
msgid ""
"Destroy an interpreter state object.  The global interpreter lock need not "
"be held.  The interpreter state must have been reset with a previous call "
"to :c:func:`PyInterpreterState_Clear`."
msgstr ""

# 0ec7a6f449f645478669fbadade9944e
#: c-api/init.rst:721
msgid ""
"Create a new thread state object belonging to the given interpreter object. "
"The global interpreter lock need not be held, but may be held if it is "
"necessary to serialize calls to this function."
msgstr ""

# 0594838a8be643f1a695fab1ef0a039c
#: c-api/init.rst:728
msgid ""
"Reset all information in a thread state object.  The global interpreter lock "
"must be held."
msgstr ""

# 358646b60fd44af88f07a0f3557d709c
#: c-api/init.rst:734
msgid ""
"Destroy a thread state object.  The global interpreter lock need not be "
"held. The thread state must have been reset with a previous call to :c:func:"
"`PyThreadState_Clear`."
msgstr ""

# 3d690d18707a4a0a978d59c02550dcab
#: c-api/init.rst:741
msgid ""
"Return a dictionary in which extensions can store thread-specific state "
"information.  Each extension should use a unique key to use to store state "
"in the dictionary.  It is okay to call this function when no current thread "
"state is available. If this function returns *NULL*, no exception has been "
"raised and the caller should assume no current thread state is available."
msgstr ""

# 8af89eb49a3a48cb80bbe8c5ebb2067c
#: c-api/init.rst:750
msgid ""
"Asynchronously raise an exception in a thread. The *id* argument is the "
"thread id of the target thread; *exc* is the exception object to be raised. "
"This function does not steal any references to *exc*. To prevent naive "
"misuse, you must write your own C extension to call this.  Must be called "
"with the GIL held. Returns the number of thread states modified; this is "
"normally one, but will be zero if the thread id isn't found.  If *exc* is :"
"const:`NULL`, the pending exception (if any) for the thread is cleared. This "
"raises no exceptions."
msgstr ""

# 84895d01b5ff49529f22be9b9b147f1b
#: c-api/init.rst:761
msgid ""
"Acquire the global interpreter lock and set the current thread state to "
"*tstate*, which should not be *NULL*.  The lock must have been created "
"earlier. If this thread already has the lock, deadlock ensues."
msgstr ""

# 6193667f7f084fa18b286fd422922a9f
#: c-api/init.rst:765
msgid ""
":c:func:`PyEval_RestoreThread` is a higher-level function which is always "
"available (even when thread support isn't enabled or when threads have not "
"been initialized)."
msgstr ""

# 8ea403613b814e8997561177be46b4b2
#: c-api/init.rst:772
msgid ""
"Reset the current thread state to *NULL* and release the global interpreter "
"lock.  The lock must have been created earlier and must be held by the "
"current thread.  The *tstate* argument, which must not be *NULL*, is only "
"used to check that it represents the current thread state --- if it isn't, a "
"fatal error is reported."
msgstr ""

# 1ab836855f9244eb9e411ef49b36edc2
#: c-api/init.rst:778
msgid ""
":c:func:`PyEval_SaveThread` is a higher-level function which is always "
"available (even when thread support isn't enabled or when threads have not "
"been initialized)."
msgstr ""

# 8f69fba47a8141f6a6edd76c312e4275
#: c-api/init.rst:785
msgid ""
"Acquire the global interpreter lock.  The lock must have been created "
"earlier. If this thread already has the lock, a deadlock ensues."
msgstr ""

# f103cd5890c842498d695170447d8374
#: c-api/init.rst:796
msgid ""
"Release the global interpreter lock.  The lock must have been created "
"earlier."
msgstr ""

# 43acbaf10f024d1e8dc43a12a2ac8de3
#: c-api/init.rst:805
msgid "Sub-interpreter support"
msgstr ""

# 754227bb46c346d79a32b72bd479ebb1
#: c-api/init.rst:807
msgid ""
"While in most uses, you will only embed a single Python interpreter, there "
"are cases where you need to create several independent interpreters in the "
"same process and perhaps even in the same thread.  Sub-interpreters allow "
"you to do that.  You can switch between sub-interpreters using the :c:func:"
"`PyThreadState_Swap` function.  You can create and destroy them using the "
"following functions:"
msgstr ""

# 99733910cfaf432888c9b362b5e7a557
#: c-api/init.rst:825
msgid ""
"Create a new sub-interpreter.  This is an (almost) totally separate "
"environment for the execution of Python code.  In particular, the new "
"interpreter has separate, independent versions of all imported modules, "
"including the fundamental modules :mod:`builtins`, :mod:`__main__` and :mod:"
"`sys`.  The table of loaded modules (``sys.modules``) and the module search "
"path (``sys.path``) are also separate.  The new environment has no ``sys."
"argv`` variable.  It has new standard I/O stream file objects ``sys.stdin``, "
"``sys.stdout`` and ``sys.stderr`` (however these refer to the same "
"underlying file descriptors)."
msgstr ""

# 1ca414c0050646e2a02c5fc1fe0eb1a5
#: c-api/init.rst:835
msgid ""
"The return value points to the first thread state created in the new sub-"
"interpreter.  This thread state is made in the current thread state. Note "
"that no actual thread is created; see the discussion of thread states "
"below.  If creation of the new interpreter is unsuccessful, *NULL* is "
"returned; no exception is set since the exception state is stored in the "
"current thread state and there may not be a current thread state.  (Like all "
"other Python/C API functions, the global interpreter lock must be held "
"before calling this function and is still held when it returns; however, "
"unlike most other Python/C API functions, there needn't be a current thread "
"state on entry.)"
msgstr ""

# ecaecdc07556496bb4ce434f4cda21a8
#: c-api/init.rst:850
msgid ""
"Extension modules are shared between (sub-)interpreters as follows: the "
"first time a particular extension is imported, it is initialized normally, "
"and a (shallow) copy of its module's dictionary is squirreled away.  When "
"the same extension is imported by another (sub-)interpreter, a new module is "
"initialized and filled with the contents of this copy; the extension's "
"``init`` function is not called.  Note that this is different from what "
"happens when an extension is imported after the interpreter has been "
"completely re-initialized by calling :c:func:`Py_Finalize` and :c:func:"
"`Py_Initialize`; in that case, the extension's ``initmodule`` function *is* "
"called again."
msgstr ""

# 72c1252a4b724971bcbacabc2ee8d116
#: c-api/init.rst:867
msgid ""
"Destroy the (sub-)interpreter represented by the given thread state. The "
"given thread state must be the current thread state.  See the discussion of "
"thread states below.  When the call returns, the current thread state is "
"*NULL*.  All thread states associated with this interpreter are destroyed.  "
"(The global interpreter lock must be held before calling this function and "
"is still held when it returns.)  :c:func:`Py_Finalize` will destroy all sub-"
"interpreters that haven't been explicitly destroyed at that point."
msgstr ""

# c0b443c4cdf9438d8af35f1525ec631e
#: c-api/init.rst:877
msgid "Bugs and caveats"
msgstr ""

# 69ab1000505c41e59f701b8ae4306b75
#: c-api/init.rst:879
msgid ""
"Because sub-interpreters (and the main interpreter) are part of the same "
"process, the insulation between them isn't perfect --- for example, using "
"low-level file operations like  :func:`os.close` they can (accidentally or "
"maliciously) affect each other's open files.  Because of the way extensions "
"are shared between (sub-)interpreters, some extensions may not work "
"properly; this is especially likely when the extension makes use of (static) "
"global variables, or when the extension manipulates its module's dictionary "
"after its initialization.  It is possible to insert objects created in one "
"sub-interpreter into a namespace of another sub-interpreter; this should be "
"done with great care to avoid sharing user-defined functions, methods, "
"instances or classes between sub-interpreters, since import operations "
"executed by such objects may affect the wrong (sub-)interpreter's dictionary "
"of loaded modules."
msgstr ""

# 566b50bca5cf4949a93f9bf399415d08
#: c-api/init.rst:893
msgid ""
"Also note that combining this functionality with :c:func:`PyGILState_\\*` "
"APIs is delicate, because these APIs assume a bijection between Python "
"thread states and OS-level threads, an assumption broken by the presence of "
"sub-interpreters. It is highly recommended that you don't switch sub-"
"interpreters between a pair of matching :c:func:`PyGILState_Ensure` and :c:"
"func:`PyGILState_Release` calls. Furthermore, extensions (such as :mod:"
"`ctypes`) using these APIs to allow calling of Python code from non-Python "
"created threads will probably be broken when using sub-interpreters."
msgstr ""

# f72c0a3cda864da58d7ce82e83880a81
#: c-api/init.rst:904
msgid "Asynchronous Notifications"
msgstr ""

# cab5ba4ebeaf4f90bcb94ae5349923d9
#: c-api/init.rst:906
msgid ""
"A mechanism is provided to make asynchronous notifications to the main "
"interpreter thread.  These notifications take the form of a function pointer "
"and a void argument."
msgstr ""

# d8a5326be050452c8d67e08418d56d51
#: c-api/init.rst:912
msgid ""
"Every check interval, when the global interpreter lock is released and "
"reacquired, Python will also call any such provided functions.  This can be "
"used for example by asynchronous IO handlers.  The notification can be "
"scheduled from a worker thread and the actual call than made at the earliest "
"convenience by the main thread where it has possession of the global "
"interpreter lock and can perform any Python API calls."
msgstr ""

# 6edcf96c3b514acea42bec95ef12e801
#: c-api/init.rst:923
msgid ""
"Post a notification to the Python main thread.  If successful, *func* will "
"be called with the argument *arg* at the earliest convenience.  *func* will "
"be called having the global interpreter lock held and can thus use the full "
"Python API and can take any action such as setting object attributes to "
"signal IO completion.  It must return 0 on success, or -1 signalling an "
"exception.  The notification function won't be interrupted to perform "
"another asynchronous notification recursively, but it can still be "
"interrupted to switch threads if the global interpreter lock is released, "
"for example, if it calls back into Python code."
msgstr ""

# 8c57523f071d42e38a50b9a6b7747b91
#: c-api/init.rst:933
msgid ""
"This function returns 0 on success in which case the notification has been "
"scheduled.  Otherwise, for example if the notification buffer is full, it "
"returns -1 without setting any exception."
msgstr ""

# 4aac4b85f4ac4aa4a901bc8ce471ee15
#: c-api/init.rst:937
msgid ""
"This function can be called on any thread, be it a Python thread or some "
"other system thread.  If it is a Python thread, it doesn't matter if it "
"holds the global interpreter lock or not."
msgstr ""

# d6e9dbf984aa45adab5c1e6a04ad3932
#: c-api/init.rst:947
msgid "Profiling and Tracing"
msgstr ""

# 82f566db2a544740ab41e0dfc9542402
#: c-api/init.rst:952
msgid ""
"The Python interpreter provides some low-level support for attaching "
"profiling and execution tracing facilities.  These are used for profiling, "
"debugging, and coverage analysis tools."
msgstr ""

# 22583f0c16074d1cab00c52ee97a93a4
#: c-api/init.rst:956
msgid ""
"This C interface allows the profiling or tracing code to avoid the overhead "
"of calling through Python-level callable objects, making a direct C function "
"call instead.  The essential attributes of the facility have not changed; "
"the interface allows trace functions to be installed per-thread, and the "
"basic events reported to the trace function are the same as had been "
"reported to the Python-level trace functions in previous versions."
msgstr ""

# 4ca5084e59dc447088883aa071c03928
#: c-api/init.rst:966
msgid ""
"The type of the trace function registered using :c:func:`PyEval_SetProfile` "
"and :c:func:`PyEval_SetTrace`. The first parameter is the object passed to "
"the registration function as *obj*, *frame* is the frame object to which the "
"event pertains, *what* is one of the constants :const:`PyTrace_CALL`, :const:"
"`PyTrace_EXCEPTION`, :const:`PyTrace_LINE`, :const:`PyTrace_RETURN`, :const:"
"`PyTrace_C_CALL`, :const:`PyTrace_C_EXCEPTION`, or :const:"
"`PyTrace_C_RETURN`, and *arg* depends on the value of *what*:"
msgstr ""

# cb1b801575b345729a4b5a5f9ee3f5e2
#: c-api/init.rst:975
msgid "Value of *what*"
msgstr ""

# 36820ab8cc5148db8e1dd524ad49b033
#: c-api/init.rst:975
msgid "Meaning of *arg*"
msgstr ""

# d337bfa419be47249ee8cad0bded8e71
#: c-api/init.rst:977
msgid ":const:`PyTrace_CALL`"
msgstr ""

# bc83a63424594035be0ded2722749702
# 31d34b42ab944ab18fb18b3be4a07626
#: c-api/init.rst:977 c-api/init.rst:982
msgid "Always *NULL*."
msgstr ""

# 4f4952b71f284412b08367bc24bc0175
#: c-api/init.rst:979
msgid ":const:`PyTrace_EXCEPTION`"
msgstr ""

# 5a52e20cdc47431a81d7c785380b2d26
#: c-api/init.rst:979
msgid "Exception information as returned by :func:`sys.exc_info`."
msgstr ""

# d80fcf82430e410aadbefb479b14902b
#: c-api/init.rst:982
msgid ":const:`PyTrace_LINE`"
msgstr ""

# bfa4cd4440284b79a07902b0e521a414
#: c-api/init.rst:984
msgid ":const:`PyTrace_RETURN`"
msgstr ""

# 3af3934f004746b3901f2bcd5abe5907
#: c-api/init.rst:984
msgid ""
"Value being returned to the caller, or *NULL* if caused by an exception."
msgstr ""

# 41b4e9bbd11d4c11addc0fbd8c04f6c8
#: c-api/init.rst:987
msgid ":const:`PyTrace_C_CALL`"
msgstr ""

# 1a3a2b8ecd904095a3dbcd92ce6a2ee8
# 763002ccdf1f4e52aa541d86c257a6f2
# 18b5bfd496714bad87ab082126ed77cb
#: c-api/init.rst:987 c-api/init.rst:989 c-api/init.rst:991
msgid "Function object being called."
msgstr ""

# f98306339b1842c18f8722f6a83ceeb3
#: c-api/init.rst:989
msgid ":const:`PyTrace_C_EXCEPTION`"
msgstr ""

# 8e653cb195054672943379451610049e
#: c-api/init.rst:991
msgid ":const:`PyTrace_C_RETURN`"
msgstr ""

# 80731c40ecfd448c96c6cbfeeb10b945
#: c-api/init.rst:997
msgid ""
"The value of the *what* parameter to a :c:type:`Py_tracefunc` function when "
"a new call to a function or method is being reported, or a new entry into a "
"generator. Note that the creation of the iterator for a generator function "
"is not reported as there is no control transfer to the Python bytecode in "
"the corresponding frame."
msgstr ""

# 91fa3c3a516a4ea5b60b56850a0cab0e
#: c-api/init.rst:1006
msgid ""
"The value of the *what* parameter to a :c:type:`Py_tracefunc` function when "
"an exception has been raised.  The callback function is called with this "
"value for *what* when after any bytecode is processed after which the "
"exception becomes set within the frame being executed.  The effect of this "
"is that as exception propagation causes the Python stack to unwind, the "
"callback is called upon return to each frame as the exception propagates.  "
"Only trace functions receives these events; they are not needed by the "
"profiler."
msgstr ""

# 3fd582d17c984faca906ea63d4225be6
#: c-api/init.rst:1017
msgid ""
"The value passed as the *what* parameter to a trace function (but not a "
"profiling function) when a line-number event is being reported."
msgstr ""

# 8392be56d37843d8aaeb6e37faf0fa69
#: c-api/init.rst:1023
msgid ""
"The value for the *what* parameter to :c:type:`Py_tracefunc` functions when "
"a call is returning without propagating an exception."
msgstr ""

# 732e131e976c47ac9e6dc237c2f1114b
#: c-api/init.rst:1029
msgid ""
"The value for the *what* parameter to :c:type:`Py_tracefunc` functions when "
"a C function is about to be called."
msgstr ""

# d3d27ede0a9f4fb7a3b9b507e7bf4357
#: c-api/init.rst:1035
msgid ""
"The value for the *what* parameter to :c:type:`Py_tracefunc` functions when "
"a C function has raised an exception."
msgstr ""

# 0c65df5c20d5409bb1da46105200ae76
#: c-api/init.rst:1041
msgid ""
"The value for the *what* parameter to :c:type:`Py_tracefunc` functions when "
"a C function has returned."
msgstr ""

# 6c2f52e14a284bdfa0cf4f8885f87f53
#: c-api/init.rst:1047
msgid ""
"Set the profiler function to *func*.  The *obj* parameter is passed to the "
"function as its first parameter, and may be any Python object, or *NULL*.  "
"If the profile function needs to maintain state, using a different value for "
"*obj* for each thread provides a convenient and thread-safe place to store "
"it.  The profile function is called for all monitored events except the line-"
"number events."
msgstr ""

# 9d67fa14af394066856c38cc7e58dbb1
#: c-api/init.rst:1057
msgid ""
"Set the tracing function to *func*.  This is similar to :c:func:"
"`PyEval_SetProfile`, except the tracing function does receive line-number "
"events."
msgstr ""

# 343fa370890d4d318bf3de699e10a3ed
#: c-api/init.rst:1063
msgid ""
"Return a tuple of function call counts.  There are constants defined for the "
"positions within the tuple:"
msgstr ""

# 07f702328c8949ea8fb16b1d6c4a5fb4
#: c-api/init.rst:1067
msgid "Name"
msgstr ""

# 44be42e4245546df9b223f6767c7e8c1
#: c-api/init.rst:1067
msgid "Value"
msgstr ""

# 62c249a8d6fa40b6a17688f10ab9745d
#: c-api/init.rst:1069
msgid ":const:`PCALL_ALL`"
msgstr ""

# 179ba91d9d3744448918f23240bcb3d8
#: c-api/init.rst:1069
msgid "0"
msgstr ""

# d3e70941caa6416ea671d18cface7aec
#: c-api/init.rst:1071
msgid ":const:`PCALL_FUNCTION`"
msgstr ""

# 965a4cc50ac34d598fb717ae0ece99e1
#: c-api/init.rst:1071
msgid "1"
msgstr ""

# 85d205c91239457db3c10dd823d5c814
#: c-api/init.rst:1073
msgid ":const:`PCALL_FAST_FUNCTION`"
msgstr ""

# 1f28896ddf5d4f0992d53db0afb1b19f
#: c-api/init.rst:1073
msgid "2"
msgstr ""

# d6e81771631246d3b4b6a1f47d70cc4f
#: c-api/init.rst:1075
msgid ":const:`PCALL_FASTER_FUNCTION`"
msgstr ""

# e87c95eb8c81408ebb9ab1ed2d5e0ca4
#: c-api/init.rst:1075
msgid "3"
msgstr ""

# 4daa44548f614a4ab81350a9ed27b492
#: c-api/init.rst:1077
msgid ":const:`PCALL_METHOD`"
msgstr ""

# 57881ee576c34154b63efba05e4f56c9
#: c-api/init.rst:1077
msgid "4"
msgstr ""

# 0bec016704b14f63bd07a4822f701122
#: c-api/init.rst:1079
msgid ":const:`PCALL_BOUND_METHOD`"
msgstr ""

# 92644953db09477d8bb2808402d7c93e
#: c-api/init.rst:1079
msgid "5"
msgstr ""

# 2670933aaa27452b8c3d6000f5f9c535
#: c-api/init.rst:1081
msgid ":const:`PCALL_CFUNCTION`"
msgstr ""

# 64f214b9ae2c4632ac0f49f159f9d170
#: c-api/init.rst:1081
msgid "6"
msgstr ""

# 4d36c134d9d54d48908bc175fd25f813
#: c-api/init.rst:1083
msgid ":const:`PCALL_TYPE`"
msgstr ""

# 19aea2126e2c44bc9c5b396efe67269b
#: c-api/init.rst:1083
msgid "7"
msgstr ""

# 1ba5929a99d94e4fb96c5dfda2488efe
#: c-api/init.rst:1085
msgid ":const:`PCALL_GENERATOR`"
msgstr ""

# 69579de9163146b98eeec082726bb020
#: c-api/init.rst:1085
msgid "8"
msgstr ""

# d9a18aa98d264b5e825fabd26ba1c76e
#: c-api/init.rst:1087
msgid ":const:`PCALL_OTHER`"
msgstr ""

# da3b5abe9bd944669ceefa67aea8f3a7
#: c-api/init.rst:1087
msgid "9"
msgstr ""

# 800e05bd78254c25813f2b42f6de5eed
#: c-api/init.rst:1089
msgid ":const:`PCALL_POP`"
msgstr ""

# 13fc020be6a74b249744c123008304c9
#: c-api/init.rst:1089
msgid "10"
msgstr ""

# d7893aea822441d4890e7a79cc40e2e1
#: c-api/init.rst:1092
msgid ""
":const:`PCALL_FAST_FUNCTION` means no argument tuple needs to be created. :"
"const:`PCALL_FASTER_FUNCTION` means that the fast-path frame setup code is "
"used."
msgstr ""

# 72113e12ab224653a7aff1f961733ac0
#: c-api/init.rst:1095
msgid ""
"If there is a method call where the call can be optimized by changing the "
"argument tuple and calling the function directly, it gets recorded twice."
msgstr ""

# 2d48c1b366904118bbceb2d9e9dc3262
#: c-api/init.rst:1099
msgid ""
"This function is only present if Python is compiled with :const:"
"`CALL_PROFILE` defined."
msgstr ""

# b4ed396189d8495587d8adc8b3ec36de
#: c-api/init.rst:1105
msgid "Advanced Debugger Support"
msgstr ""

# 4bf7bf7ae0774ed8813b0590c37cd9c9
#: c-api/init.rst:1110
msgid ""
"These functions are only intended to be used by advanced debugging tools."
msgstr ""

# 7a18d8766edc4ef699151da41fa23abd
#: c-api/init.rst:1115
msgid ""
"Return the interpreter state object at the head of the list of all such "
"objects."
msgstr ""

# 4d5b6ca61c434959b276163c48b07fbd
#: c-api/init.rst:1120
msgid ""
"Return the next interpreter state object after *interp* from the list of all "
"such objects."
msgstr ""

# c9bab8627e89415bb0ae36490f1b2c38
#: c-api/init.rst:1126
msgid ""
"Return the a pointer to the first :c:type:`PyThreadState` object in the list "
"of threads associated with the interpreter *interp*."
msgstr ""

# c3babc787d614462b46fab669811b887
#: c-api/init.rst:1132
msgid ""
"Return the next thread state object after *tstate* from the list of all such "
"objects belonging to the same :c:type:`PyInterpreterState` object."
msgstr ""

# d5d2e95cb9be4498a82045e29001efee
#: c-api/intro.rst:8
msgid "Introduction"
msgstr ""

# f71eed7348df4284881d0195cdeaff45
#: c-api/intro.rst:10
msgid ""
"The Application Programmer's Interface to Python gives C and C++ programmers "
"access to the Python interpreter at a variety of levels.  The API is equally "
"usable from C++, but for brevity it is generally referred to as the Python/C "
"API.  There are two fundamentally different reasons for using the Python/C "
"API. The first reason is to write *extension modules* for specific purposes; "
"these are C modules that extend the Python interpreter.  This is probably "
"the most common use.  The second reason is to use Python as a component in a "
"larger application; this technique is generally referred to as :dfn:"
"`embedding` Python in an application."
msgstr ""

# 3f21d9f29d6c4aa99a0766ed0609f056
#: c-api/intro.rst:20
msgid ""
"Writing an extension module is a relatively well-understood process,  where "
"a \"cookbook\" approach works well.  There are several tools  that automate "
"the process to some extent.  While people have embedded  Python in other "
"applications since its early existence, the process of  embedding Python is "
"less straightforward than writing an extension."
msgstr ""

# 74b6af1ccb9e41b4b529d818ff68dfc2
#: c-api/intro.rst:26
msgid ""
"Many API functions are useful independent of whether you're embedding  or "
"extending Python; moreover, most applications that embed Python  will need "
"to provide a custom extension as well, so it's probably a  good idea to "
"become familiar with writing an extension before  attempting to embed Python "
"in a real application."
msgstr ""

# 8f545b6a433941ee8f3fe95ef819c31b
#: c-api/intro.rst:36
msgid "Include Files"
msgstr ""

# 33cdf27b6ea64b85a34d60613203a06b
#: c-api/intro.rst:38
msgid ""
"All function, type and macro definitions needed to use the Python/C API are "
"included in your code by the following line::"
msgstr ""

# c64e416886064febba3f5c9046b3d708
#: c-api/intro.rst:43
msgid ""
"This implies inclusion of the following standard headers: ``<stdio.h>``, "
"``<string.h>``, ``<errno.h>``, ``<limits.h>``, ``<assert.h>`` and ``<stdlib."
"h>`` (if available)."
msgstr ""

# 2d5cb09e36564bd6872960a3cf725fcb
#: c-api/intro.rst:49
msgid ""
"Since Python may define some pre-processor definitions which affect the "
"standard headers on some systems, you *must* include :file:`Python.h` before "
"any standard headers are included."
msgstr ""

# ddfbd5ad6d694e48967a3c15b3f94baa
#: c-api/intro.rst:53
msgid ""
"All user visible names defined by Python.h (except those defined by the "
"included standard headers) have one of the prefixes ``Py`` or ``_Py``.  "
"Names beginning with ``_Py`` are for internal use by the Python "
"implementation and should not be used by extension writers. Structure member "
"names do not have a reserved prefix."
msgstr ""

# 8bb9912d21c84063ae98e9301255355e
#: c-api/intro.rst:58
msgid ""
"**Important:** user code should never define names that begin with ``Py`` or "
"``_Py``.  This confuses the reader, and jeopardizes the portability of the "
"user code to future Python versions, which may define additional names "
"beginning with one of these prefixes."
msgstr ""

# 7ea88d7a3b5c47eb9c163d6affca5e25
#: c-api/intro.rst:63
msgid ""
"The header files are typically installed with Python.  On Unix, these  are "
"located in the directories :file:`{prefix}/include/pythonversion/` and :file:"
"`{exec_prefix}/include/pythonversion/`, where :envvar:`prefix` and :envvar:"
"`exec_prefix` are defined by the corresponding parameters to Python's :"
"program:`configure` script and *version* is ``sys.version[:3]``.  On "
"Windows, the headers are installed in :file:`{prefix}/include`, where :"
"envvar:`prefix` is the installation directory specified to the installer."
msgstr ""

# a4157538d18e4099a9e630ba5b5dbf6b
#: c-api/intro.rst:71
msgid ""
"To include the headers, place both directories (if different) on your "
"compiler's search path for includes.  Do *not* place the parent directories "
"on the search path and then use ``#include <pythonX.Y/Python.h>``; this will "
"break on multi-platform builds since the platform independent headers under :"
"envvar:`prefix` include the platform specific headers from :envvar:"
"`exec_prefix`."
msgstr ""

# 0b41226f9c8f4b5588a2608ff73ee3f0
#: c-api/intro.rst:78
msgid ""
"C++ users should note that though the API is defined entirely using C, the "
"header files do properly declare the entry points to be ``extern \"C\"``, so "
"there is no need to do anything special to use the API from C++."
msgstr ""

# c71303fb89814c97a7dec499bed02393
#: c-api/intro.rst:86
msgid "Objects, Types and Reference Counts"
msgstr ""

# 517b8236c44c443497ae25f62825e840
#: c-api/intro.rst:90
msgid ""
"Most Python/C API functions have one or more arguments as well as a return "
"value of type :c:type:`PyObject\\*`.  This type is a pointer to an opaque "
"data type representing an arbitrary Python object.  Since all Python object "
"types are treated the same way by the Python language in most situations (e."
"g., assignments, scope rules, and argument passing), it is only fitting that "
"they should be represented by a single C type.  Almost all Python objects "
"live on the heap: you never declare an automatic or static variable of type :"
"c:type:`PyObject`, only pointer variables of type :c:type:`PyObject\\*` can  "
"be declared.  The sole exception are the type objects; since these must "
"never be deallocated, they are typically static :c:type:`PyTypeObject` "
"objects."
msgstr ""

# b890044891284a63b9a0c3bceb65704f
#: c-api/intro.rst:101
msgid ""
"All Python objects (even Python integers) have a :dfn:`type` and a :dfn:"
"`reference count`.  An object's type determines what kind of object it is (e."
"g., an integer, a list, or a user-defined function; there are many more as "
"explained in :ref:`types`).  For each of the well-known types there is a "
"macro to check whether an object is of that type; for instance, "
"``PyList_Check(a)`` is true if (and only if) the object pointed to by *a* is "
"a Python list."
msgstr ""

# fd1ae6bb44044a8ab760a8618306d97c
#: c-api/intro.rst:112
msgid "Reference Counts"
msgstr ""

# 6bd705cc368a4d47998433ca2980e147
#: c-api/intro.rst:114
msgid ""
"The reference count is important because today's computers have a  finite "
"(and often severely limited) memory size; it counts how many  different "
"places there are that have a reference to an object.  Such a  place could be "
"another object, or a global (or static) C variable, or  a local variable in "
"some C function. When an object's reference count  becomes zero, the object "
"is deallocated.  If it contains references to  other objects, their "
"reference count is decremented. Those other  objects may be deallocated in "
"turn, if this decrement makes their reference count become zero, and so on.  "
"(There's an obvious problem  with objects that reference each other here; "
"for now, the solution is  \"don't do that.\")"
msgstr ""

# ed514cfc02bb4e6388e4cec8e793e87b
#: c-api/intro.rst:129
msgid ""
"Reference counts are always manipulated explicitly.  The normal way is  to "
"use the macro :c:func:`Py_INCREF` to increment an object's reference count "
"by one, and :c:func:`Py_DECREF` to decrement it by   one.  The :c:func:"
"`Py_DECREF` macro is considerably more complex than the incref one, since it "
"must check whether the reference count becomes zero and then cause the "
"object's deallocator to be called. The deallocator is a function pointer "
"contained in the object's type structure.  The type-specific deallocator "
"takes care of decrementing the reference counts for other objects contained "
"in the object if this is a compound object type, such as a list, as well as "
"performing any additional finalization that's needed.  There's no chance "
"that the reference count can overflow; at least as many bits are used to "
"hold the reference count as there are distinct memory locations in virtual "
"memory (assuming ``sizeof(Py_ssize_t) >= sizeof(void*)``). Thus, the "
"reference count increment is a simple operation."
msgstr ""

# 54689d55aeff46519861e72770e765cd
#: c-api/intro.rst:143
msgid ""
"It is not necessary to increment an object's reference count for every  "
"local variable that contains a pointer to an object.  In theory, the  "
"object's reference count goes up by one when the variable is made to  point "
"to it and it goes down by one when the variable goes out of  scope.  "
"However, these two cancel each other out, so at the end the  reference count "
"hasn't changed.  The only real reason to use the  reference count is to "
"prevent the object from being deallocated as  long as our variable is "
"pointing to it.  If we know that there is at  least one other reference to "
"the object that lives at least as long as our variable, there is no need to "
"increment the reference count  temporarily. An important situation where "
"this arises is in objects  that are passed as arguments to C functions in an "
"extension module  that are called from Python; the call mechanism guarantees "
"to hold a  reference to every argument for the duration of the call."
msgstr ""

# 562dd7baeed845ca9abe3cf612ef7fdc
#: c-api/intro.rst:157
msgid ""
"However, a common pitfall is to extract an object from a list and hold on to "
"it for a while without incrementing its reference count. Some other "
"operation might conceivably remove the object from the list, decrementing "
"its reference count and possible deallocating it. The real danger is that "
"innocent-looking operations may invoke arbitrary Python code which could do "
"this; there is a code path which allows control to flow back to the user "
"from a :c:func:`Py_DECREF`, so almost any operation is potentially dangerous."
msgstr ""

# 5b91f4e114da41d4a8df51f06b24559a
#: c-api/intro.rst:165
msgid ""
"A safe approach is to always use the generic operations (functions  whose "
"name begins with ``PyObject_``, ``PyNumber_``, ``PySequence_`` or "
"``PyMapping_``). These operations always increment the reference count of "
"the object they return. This leaves the caller with the responsibility to "
"call :c:func:`Py_DECREF` when they are done with the result; this soon "
"becomes second nature."
msgstr ""

# 65b5f59a18e34fc698473ddf4a49d814
#: c-api/intro.rst:175
msgid "Reference Count Details"
msgstr ""

# 6df9e5e5884142919edaf853a359d98d
#: c-api/intro.rst:177
msgid ""
"The reference count behavior of functions in the Python/C API is best  "
"explained in terms of *ownership of references*.  Ownership pertains to "
"references, never to objects (objects are not owned: they are always "
"shared).  \"Owning a reference\" means being responsible for calling "
"Py_DECREF on it when the reference is no longer needed.  Ownership can also "
"be transferred, meaning that the code that receives ownership of the "
"reference then becomes responsible for eventually decref'ing it by calling :"
"c:func:`Py_DECREF` or :c:func:`Py_XDECREF` when it's no longer needed---or "
"passing on this responsibility (usually to its caller). When a function "
"passes ownership of a reference on to its caller, the caller is said to "
"receive a *new* reference.  When no ownership is transferred, the caller is "
"said to *borrow* the reference. Nothing needs to be done for a borrowed "
"reference."
msgstr ""

# 7bb24f3b7d3648e0967382857c21aae8
#: c-api/intro.rst:190
msgid ""
"Conversely, when a calling function passes in a reference to an  object, "
"there are two possibilities: the function *steals* a  reference to the "
"object, or it does not.  *Stealing a reference* means that when you pass a "
"reference to a function, that function assumes that it now owns that "
"reference, and you are not responsible for it any longer."
msgstr ""

# 96ea2ff575534584b7802a6607aa4e02
#: c-api/intro.rst:200
msgid ""
"Few functions steal references; the two notable exceptions are :c:func:"
"`PyList_SetItem` and :c:func:`PyTuple_SetItem`, which  steal a reference to "
"the item (but not to the tuple or list into which the item is put!).  These "
"functions were designed to steal a reference because of a common idiom for "
"populating a tuple or list with newly created objects; for example, the code "
"to create the tuple ``(1, 2, \"three\")`` could look like this (forgetting "
"about error handling for the moment; a better way to code this is shown "
"below)::"
msgstr ""

# c6bea79554704b04a9cfd96a3da5ba4a
#: c-api/intro.rst:215
msgid ""
"Here, :c:func:`PyLong_FromLong` returns a new reference which is immediately "
"stolen by :c:func:`PyTuple_SetItem`.  When you want to keep using an object "
"although the reference to it will be stolen, use :c:func:`Py_INCREF` to grab "
"another reference before calling the reference-stealing function."
msgstr ""

# e81afa6a92a649cfb74846bbddd8e847
#: c-api/intro.rst:220
msgid ""
"Incidentally, :c:func:`PyTuple_SetItem` is the *only* way to set tuple "
"items; :c:func:`PySequence_SetItem` and :c:func:`PyObject_SetItem` refuse to "
"do this since tuples are an immutable data type.  You should only use :c:"
"func:`PyTuple_SetItem` for tuples that you are creating yourself."
msgstr ""

# 9015836c0ce94975b83863649a925e20
#: c-api/intro.rst:225
msgid ""
"Equivalent code for populating a list can be written using :c:func:"
"`PyList_New` and :c:func:`PyList_SetItem`."
msgstr ""

# f901daddac914af2a34729459a40c2c9
#: c-api/intro.rst:228
msgid ""
"However, in practice, you will rarely use these ways of creating and "
"populating a tuple or list.  There's a generic function, :c:func:"
"`Py_BuildValue`, that can create most common objects from C values, directed "
"by a :dfn:`format string`. For example, the above two blocks of code could "
"be replaced by the following (which also takes care of the error checking)::"
msgstr ""

# 42652de0ee1c430db26ae101924ac286
#: c-api/intro.rst:239
msgid ""
"It is much more common to use :c:func:`PyObject_SetItem` and friends with "
"items whose references you are only borrowing, like arguments that were "
"passed in to the function you are writing.  In that case, their behaviour "
"regarding reference counts is much saner, since you don't have to increment "
"a reference count so you can give a reference away (\"have it be stolen\").  "
"For example, this function sets all items of a list (actually, any mutable "
"sequence) to a given item::"
msgstr ""

# 06609f2e4e0f4b6fb40ea522da20fa8f
#: c-api/intro.rst:269
msgid ""
"The situation is slightly different for function return values.   While "
"passing a reference to most functions does not change your  ownership "
"responsibilities for that reference, many functions that  return a reference "
"to an object give you ownership of the reference. The reason is simple: in "
"many cases, the returned object is created  on the fly, and the reference "
"you get is the only reference to the  object.  Therefore, the generic "
"functions that return object references, like :c:func:`PyObject_GetItem` "
"and  :c:func:`PySequence_GetItem`, always return a new reference (the caller "
"becomes the owner of the reference)."
msgstr ""

# bdeef8f6b03141b0bf62cd98b0a22fce
#: c-api/intro.rst:278
msgid ""
"It is important to realize that whether you own a reference returned  by a "
"function depends on which function you call only --- *the plumage* (the type "
"of the object passed as an argument to the function) *doesn't enter into it!"
"* Thus, if you  extract an item from a list using :c:func:`PyList_GetItem`, "
"you don't own the reference --- but if you obtain the same item from the "
"same list using :c:func:`PySequence_GetItem` (which happens to take exactly "
"the same arguments), you do own a reference to the returned object."
msgstr ""

# 29a0ff575c324c2fb9f8bae817eb954d
#: c-api/intro.rst:290
msgid ""
"Here is an example of how you could write a function that computes the sum "
"of the items in a list of integers; once using  :c:func:`PyList_GetItem`, "
"and once using :c:func:`PySequence_GetItem`. ::"
msgstr ""

# ce8cd0e63e5b419cafee8b3792a92322
#: c-api/intro.rst:354
msgid "Types"
msgstr ""

# 7c9ea0fb692141ea8f8b59f7b70846c8
#: c-api/intro.rst:356
msgid ""
"There are few other data types that play a significant role in  the Python/C "
"API; most are simple C types such as :c:type:`int`,  :c:type:`long`, :c:type:"
"`double` and :c:type:`char\\*`.  A few structure types  are used to describe "
"static tables used to list the functions exported  by a module or the data "
"attributes of a new object type, and another is used to describe the value "
"of a complex number.  These will  be discussed together with the functions "
"that use them."
msgstr ""

# b09cfa8ddce84ed38e216fc733f8663f
#: c-api/intro.rst:368
msgid "Exceptions"
msgstr ""

# b9551c5f510f47a5ac5289d4d90e6149
#: c-api/intro.rst:370
msgid ""
"The Python programmer only needs to deal with exceptions if specific  error "
"handling is required; unhandled exceptions are automatically  propagated to "
"the caller, then to the caller's caller, and so on, until they reach the top-"
"level interpreter, where they are reported to the  user accompanied by a "
"stack traceback."
msgstr ""

# 65051d93b0e442d29db3b9e323dedc5b
#: c-api/intro.rst:378
msgid ""
"For C programmers, however, error checking always has to be explicit.  All "
"functions in the Python/C API can raise exceptions, unless an explicit claim "
"is made otherwise in a function's documentation.  In general, when a "
"function encounters an error, it sets an exception, discards any object "
"references that it owns, and returns an error indicator.  If not documented "
"otherwise, this indicator is either *NULL* or ``-1``, depending on the "
"function's return type. A few functions return a Boolean true/false result, "
"with false indicating an error.  Very few functions return no explicit error "
"indicator or have an ambiguous return value, and require explicit testing "
"for errors with :c:func:`PyErr_Occurred`.  These exceptions are always "
"explicitly documented."
msgstr ""

# 1a6587003da34cb1a054cf4a677bafb5
#: c-api/intro.rst:393
msgid ""
"Exception state is maintained in per-thread storage (this is  equivalent to "
"using global storage in an unthreaded application).  A  thread can be in one "
"of two states: an exception has occurred, or not. The function :c:func:"
"`PyErr_Occurred` can be used to check for this: it returns a borrowed "
"reference to the exception type object when an exception has occurred, and "
"*NULL* otherwise.  There are a number of functions to set the exception "
"state: :c:func:`PyErr_SetString` is the most common (though not the most "
"general) function to set the exception state, and :c:func:`PyErr_Clear` "
"clears the exception state."
msgstr ""

# b6df203902c8452ba2332972ea61fdd6
#: c-api/intro.rst:403
msgid ""
"The full exception state consists of three objects (all of which can  be "
"*NULL*): the exception type, the corresponding exception  value, and the "
"traceback.  These have the same meanings as the Python result of ``sys."
"exc_info()``; however, they are not the same: the Python objects represent "
"the last exception being handled by a Python  :keyword:`try` ... :keyword:"
"`except` statement, while the C level exception state only exists while an "
"exception is being passed on between C functions until it reaches the Python "
"bytecode interpreter's  main loop, which takes care of transferring it to "
"``sys.exc_info()`` and friends."
msgstr ""

# 67ee2a3e081c4b8aaa20e933ccfdfd67
#: c-api/intro.rst:415
msgid ""
"Note that starting with Python 1.5, the preferred, thread-safe way to access "
"the exception state from Python code is to call the function :func:`sys."
"exc_info`, which returns the per-thread exception state for Python code.  "
"Also, the semantics of both ways to access the exception state have changed "
"so that a function which catches an exception will save and restore its "
"thread's exception state so as to preserve the exception state of its "
"caller.  This prevents common bugs in exception handling code caused by an "
"innocent-looking function overwriting the exception being handled; it also "
"reduces the often unwanted lifetime extension for objects that are "
"referenced by the stack frames in the traceback."
msgstr ""

# 5c8b738779ff426788ea191a7502622d
#: c-api/intro.rst:426
msgid ""
"As a general principle, a function that calls another function to  perform "
"some task should check whether the called function raised an  exception, and "
"if so, pass the exception state on to its caller.  It  should discard any "
"object references that it owns, and return an  error indicator, but it "
"should *not* set another exception --- that would overwrite the exception "
"that was just raised, and lose important information about the exact cause "
"of the error."
msgstr ""

# 9d5c3d075643437fb3b7118ac21323e9
#: c-api/intro.rst:435
msgid ""
"A simple example of detecting exceptions and passing them on is shown in "
"the :c:func:`sum_sequence` example above.  It so happens that this example "
"doesn't need to clean up any owned references when it detects an error.  The "
"following example function shows some error cleanup.  First, to remind you "
"why you like Python, we show the equivalent Python code::"
msgstr ""

# 4c21c469fa1a4ad9bbdda59bb494d23a
#: c-api/intro.rst:450
msgid "Here is the corresponding C code, in all its glory::"
msgstr ""

# 9c2fa07de8404c0589cbab1b42f1490a
#: c-api/intro.rst:502
msgid ""
"This example represents an endorsed use of the ``goto`` statement  in C! It "
"illustrates the use of :c:func:`PyErr_ExceptionMatches` and :c:func:"
"`PyErr_Clear` to handle specific exceptions, and the use of :c:func:"
"`Py_XDECREF` to dispose of owned references that may be *NULL* (note the "
"``'X'`` in the name; :c:func:`Py_DECREF` would crash when confronted with a "
"*NULL* reference).  It is important that the variables used to hold owned "
"references are initialized to *NULL* for this to work; likewise, the "
"proposed return value is initialized to ``-1`` (failure) and only set to "
"success after the final call made is successful."
msgstr ""

# d5a8a4b848a04c73849a127660b9116b
#: c-api/intro.rst:516
msgid "Embedding Python"
msgstr ""

# 95c028a660384adea2adb4feae00efa4
#: c-api/intro.rst:518
msgid ""
"The one important task that only embedders (as opposed to extension writers) "
"of the Python interpreter have to worry about is the initialization, and "
"possibly the finalization, of the Python interpreter.  Most functionality of "
"the interpreter can only be used after the interpreter has been initialized."
msgstr ""

# 5b2a162539144e659075efa8dd825d3d
#: c-api/intro.rst:531
msgid ""
"The basic initialization function is :c:func:`Py_Initialize`. This "
"initializes the table of loaded modules, and creates the fundamental "
"modules :mod:`builtins`, :mod:`__main__`, and :mod:`sys`.  It also "
"initializes the module search path (``sys.path``)."
msgstr ""

# ecad1650426d4131818398121ff929a3
#: c-api/intro.rst:538
msgid ""
":c:func:`Py_Initialize` does not set the \"script argument list\"  (``sys."
"argv``). If this variable is needed by Python code that will be executed "
"later, it must be set explicitly with a call to  ``PySys_SetArgvEx(argc, "
"argv, updatepath)`` after the call to :c:func:`Py_Initialize`."
msgstr ""

# b541e9b3a7e94314b476bbdfdd7cf364
#: c-api/intro.rst:543
msgid ""
"On most systems (in particular, on Unix and Windows, although the details "
"are slightly different), :c:func:`Py_Initialize` calculates the module "
"search path based upon its best guess for the location of the standard "
"Python interpreter executable, assuming that the Python library is found in "
"a fixed location relative to the Python interpreter executable.  In "
"particular, it looks for a directory named :file:`lib/python{X.Y}` relative "
"to the parent directory where the executable named :file:`python` is found "
"on the shell command search path (the environment variable :envvar:`PATH`)."
msgstr ""

# 991ee0c4737148659f1023cd30a6bb7c
#: c-api/intro.rst:552
msgid ""
"For instance, if the Python executable is found in :file:`/usr/local/bin/"
"python`, it will assume that the libraries are in :file:`/usr/local/lib/"
"python{X.Y}`.  (In fact, this particular path is also the \"fallback\" "
"location, used when no executable file named :file:`python` is found along :"
"envvar:`PATH`.)  The user can override this behavior by setting the "
"environment variable :envvar:`PYTHONHOME`, or insert additional directories "
"in front of the standard path by setting :envvar:`PYTHONPATH`."
msgstr ""

# edd84251375d4216a534af8f880f43a7
#: c-api/intro.rst:567
msgid ""
"The embedding application can steer the search by calling "
"``Py_SetProgramName(file)`` *before* calling  :c:func:`Py_Initialize`.  Note "
"that :envvar:`PYTHONHOME` still overrides this and :envvar:`PYTHONPATH` is "
"still inserted in front of the standard path.  An application that requires "
"total control has to provide its own implementation of :c:func:"
"`Py_GetPath`, :c:func:`Py_GetPrefix`, :c:func:`Py_GetExecPrefix`, and :c:"
"func:`Py_GetProgramFullPath` (all defined in :file:`Modules/getpath.c`)."
msgstr ""

# 4ff252926e68467a930314da0196dff7
#: c-api/intro.rst:577
msgid ""
"Sometimes, it is desirable to \"uninitialize\" Python.  For instance,  the "
"application may want to start over (make another call to :c:func:"
"`Py_Initialize`) or the application is simply done with its  use of Python "
"and wants to free memory allocated by Python.  This can be accomplished by "
"calling :c:func:`Py_Finalize`.  The function :c:func:`Py_IsInitialized` "
"returns true if Python is currently in the initialized state.  More "
"information about these functions is given in a later chapter. Notice that :"
"c:func:`Py_Finalize` does *not* free all memory allocated by the Python "
"interpreter, e.g. memory allocated by extension modules currently cannot be "
"released."
msgstr ""

# ffdc6c6abbb34af8b0484a89156d6e47
#: c-api/intro.rst:591
msgid "Debugging Builds"
msgstr ""

# 65dee151b92d4400b4a15b47d8ac6f89
#: c-api/intro.rst:593
msgid ""
"Python can be built with several macros to enable extra checks of the "
"interpreter and extension modules.  These checks tend to add a large amount "
"of overhead to the runtime so they are not enabled by default."
msgstr ""

# 8abd2cefe63e452a91477e0e48269b56
#: c-api/intro.rst:597
msgid ""
"A full list of the various types of debugging builds is in the file :file:"
"`Misc/SpecialBuilds.txt` in the Python source distribution. Builds are "
"available that support tracing of reference counts, debugging the memory "
"allocator, or low-level profiling of the main interpreter loop.  Only the "
"most frequently-used builds will be described in the remainder of this "
"section."
msgstr ""

# c9c50a7ecb04405a901057df530830b9
#: c-api/intro.rst:603
msgid ""
"Compiling the interpreter with the :c:macro:`Py_DEBUG` macro defined "
"produces what is generally meant by \"a debug build\" of Python. :c:macro:"
"`Py_DEBUG` is enabled in the Unix build by adding ``--with-pydebug`` to the :"
"file:`./configure` command.  It is also implied by the presence of the not-"
"Python-specific :c:macro:`_DEBUG` macro.  When :c:macro:`Py_DEBUG` is "
"enabled in the Unix build, compiler optimization is disabled."
msgstr ""

# 324d15381cf947ffbe05906941f99ad5
#: c-api/intro.rst:610
msgid ""
"In addition to the reference count debugging described below, the following "
"extra checks are performed:"
msgstr ""

# c48106f8c692444c9b32b7ed80c4f89a
#: c-api/intro.rst:613
msgid "Extra checks are added to the object allocator."
msgstr ""

# fe58865c581f4eb0b6195311adbac0ef
#: c-api/intro.rst:615
msgid "Extra checks are added to the parser and compiler."
msgstr ""

# 36628c2e3e9b4576b0a596c4acc9b9ef
#: c-api/intro.rst:617
msgid ""
"Downcasts from wide types to narrow types are checked for loss of "
"information."
msgstr ""

# 6c39d750f2c24203acaae6ac5c2d2c8f
#: c-api/intro.rst:619
msgid ""
"A number of assertions are added to the dictionary and set implementations. "
"In addition, the set object acquires a :meth:`test_c_api` method."
msgstr ""

# c4ac2b6989d149f89cb2b19fa0e0ad57
#: c-api/intro.rst:622
msgid "Sanity checks of the input arguments are added to frame creation."
msgstr ""

# c1be229209b24473872b50c8196d1ee7
#: c-api/intro.rst:624
msgid ""
"The storage for ints is initialized with a known invalid pattern to catch "
"reference to uninitialized digits."
msgstr ""

# ba04e241bf9c4252af5b3a96ea37cec0
#: c-api/intro.rst:627
msgid ""
"Low-level tracing and extra exception checking are added to the runtime "
"virtual machine."
msgstr ""

# 84b509282e5d470c8076f91075bea97d
#: c-api/intro.rst:630
msgid "Extra checks are added to the memory arena implementation."
msgstr ""

# 62b977df40e24a6c9743721a8f19c4ad
#: c-api/intro.rst:632
msgid "Extra debugging is added to the thread module."
msgstr ""

# eda56744c3f94352952c3cceff43a71f
#: c-api/intro.rst:634
msgid "There may be additional checks not mentioned here."
msgstr ""

# be49069e9b23436aafff11f21b9a1d63
#: c-api/intro.rst:636
msgid ""
"Defining :c:macro:`Py_TRACE_REFS` enables reference tracing.  When defined, "
"a circular doubly linked list of active objects is maintained by adding two "
"extra fields to every :c:type:`PyObject`.  Total allocations are tracked as "
"well.  Upon exit, all existing references are printed.  (In interactive mode "
"this happens after every statement run by the interpreter.)  Implied by :c:"
"macro:`Py_DEBUG`."
msgstr ""

# f8d4b9d65f15422b80adca090d26adf9
#: c-api/intro.rst:642
msgid ""
"Please refer to :file:`Misc/SpecialBuilds.txt` in the Python source "
"distribution for more detailed information."
msgstr ""

# 42eec1224503407fa7104f3f850f657c
#: c-api/iter.rst:6
msgid "Iterator Protocol"
msgstr ""

# 48fb5923369a4532a0ee14412af1b07b
#: c-api/iter.rst:8
msgid ""
"There are only a couple of functions specifically for working with iterators."
msgstr ""

# a5c2512cd2e14ba49cadc61ac7d17694
#: c-api/iter.rst:12
msgid "Return true if the object *o* supports the iterator protocol."
msgstr ""

# 7b4ddec958304607bc15269d2c0176f5
#: c-api/iter.rst:17
msgid ""
"Return the next value from the iteration *o*.  If the object is an iterator, "
"this retrieves the next value from the iteration, and returns *NULL* with no "
"exception set if there are no remaining items.  If the object is not an "
"iterator, :exc:`TypeError` is raised, or if there is an error in retrieving "
"the item, returns *NULL* and passes along the exception."
msgstr ""

# dc6420e249e54b688feb74091a22c4a3
#: c-api/iter.rst:23
msgid ""
"To write a loop which iterates over an iterator, the C code should look "
"something like this::"
msgstr ""

# 8072815545c4435b985d26e5cb499c5e
#: c-api/iterator.rst:6
msgid "Iterator Objects"
msgstr ""

# 6bf4ab38de4249c9827aebb05d46a017
#: c-api/iterator.rst:8
msgid ""
"Python provides two general-purpose iterator objects.  The first, a sequence "
"iterator, works with an arbitrary sequence supporting the :meth:"
"`__getitem__` method.  The second works with a callable object and a "
"sentinel value, calling the callable for each item in the sequence, and "
"ending the iteration when the sentinel value is returned."
msgstr ""

# 635a819911a54e99bd5eb7b8a4a4d7e5
#: c-api/iterator.rst:17
msgid ""
"Type object for iterator objects returned by :c:func:`PySeqIter_New` and the "
"one-argument form of the :func:`iter` built-in function for built-in "
"sequence types."
msgstr ""

# 96cc88a132ef4056843368bcca0804fd
#: c-api/iterator.rst:24
msgid "Return true if the type of *op* is :c:data:`PySeqIter_Type`."
msgstr ""

# e62cf5ce4c444f539f568fb3cf800a62
#: c-api/iterator.rst:29
msgid ""
"Return an iterator that works with a general sequence object, *seq*.  The "
"iteration ends when the sequence raises :exc:`IndexError` for the "
"subscripting operation."
msgstr ""

# d896bef2eaed4973a338716306e3f592
#: c-api/iterator.rst:36
msgid ""
"Type object for iterator objects returned by :c:func:`PyCallIter_New` and "
"the two-argument form of the :func:`iter` built-in function."
msgstr ""

# d015072492d64e1db57a69d13778c355
#: c-api/iterator.rst:42
msgid "Return true if the type of *op* is :c:data:`PyCallIter_Type`."
msgstr ""

# c80a0bd8fe3241a8872f5b544df40ed9
#: c-api/iterator.rst:47
msgid ""
"Return a new iterator.  The first parameter, *callable*, can be any Python "
"callable object that can be called with no parameters; each call to it "
"should return the next item in the iteration.  When *callable* returns a "
"value equal to *sentinel*, the iteration will be terminated."
msgstr ""

# 3d41ff50b4dd401a8fb5d5e8c9599755
#: c-api/list.rst:6
msgid "List Objects"
msgstr ""

# 14eb42fcf18d4cfeb9018754ba433a59
#: c-api/list.rst:13
msgid "This subtype of :c:type:`PyObject` represents a Python list object."
msgstr ""

# ce3bc6777db34371a66637f8938009e9
#: c-api/list.rst:18
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python list type. "
"This is the same object as :class:`list` in the Python layer."
msgstr ""

# 005dbfa3e72f4bb39292925ffa735712
#: c-api/list.rst:24
msgid ""
"Return true if *p* is a list object or an instance of a subtype of the list "
"type."
msgstr ""

# c92a27ec6f134909a1d8835f4e353969
#: c-api/list.rst:30
msgid ""
"Return true if *p* is a list object, but not an instance of a subtype of the "
"list type."
msgstr ""

# 60970d953050438484da2162ce72b957
#: c-api/list.rst:36
msgid "Return a new list of length *len* on success, or *NULL* on failure."
msgstr ""

# 124df742150b41548c5cb5639c8dd860
#: c-api/list.rst:40
msgid ""
"If *len* is greater than zero, the returned list object's items are set to "
"``NULL``.  Thus you cannot use abstract API functions such as :c:func:"
"`PySequence_SetItem`  or expose the object to Python code before setting all "
"items to a real object with :c:func:`PyList_SetItem`."
msgstr ""

# b5d2bd12937f42c4a70cabf857cdd019
#: c-api/list.rst:50
msgid ""
"Return the length of the list object in *list*; this is equivalent to "
"``len(list)`` on a list object."
msgstr ""

# dce2ec4f162e4053ad2d349668ef3b61
#: c-api/list.rst:56
msgid "Macro form of :c:func:`PyList_Size` without error checking."
msgstr ""

# 67c6474267cd46868a3ce3b2433c3ee6
#: c-api/list.rst:61
msgid ""
"Return the object at position *index* in the list pointed to by *list*.  The "
"position must be positive, indexing from the end of the list is not "
"supported.  If *index* is out of bounds, return *NULL* and set an :exc:"
"`IndexError` exception."
msgstr ""

# 0de0bfe7b3034e9e9d04f4c299cd3e1a
#: c-api/list.rst:69
msgid "Macro form of :c:func:`PyList_GetItem` without error checking."
msgstr ""

# ab9dc13c7b314bedaad1bf1d5b072dc3
#: c-api/list.rst:74
msgid ""
"Set the item at index *index* in list to *item*.  Return ``0`` on success or "
"``-1`` on failure."
msgstr ""

# a6ff950d5e9248c286cdeaee8c7857b8
#: c-api/list.rst:79
msgid ""
"This function \"steals\" a reference to *item* and discards a reference to "
"an item already in the list at the affected position."
msgstr ""

# dff97129b50e47c7bf334a6cad8d3d51
#: c-api/list.rst:85
msgid ""
"Macro form of :c:func:`PyList_SetItem` without error checking. This is "
"normally only used to fill in new lists where there is no previous content."
msgstr ""

# f53b8a30e82848bcbdb6076f8a54394c
#: c-api/list.rst:90
msgid ""
"This macro \"steals\" a reference to *item*, and, unlike :c:func:"
"`PyList_SetItem`, does *not* discard a reference to any item that is being "
"replaced; any reference in *list* at position *i* will be leaked."
msgstr ""

# ba10317fa06848d7840fc023315241a4
#: c-api/list.rst:98
msgid ""
"Insert the item *item* into list *list* in front of index *index*.  Return "
"``0`` if successful; return ``-1`` and set an exception if unsuccessful. "
"Analogous to ``list.insert(index, item)``."
msgstr ""

# 36317309fc4f49faa4f9fd9664dc6e04
#: c-api/list.rst:105
msgid ""
"Append the object *item* at the end of list *list*. Return ``0`` if "
"successful; return ``-1`` and set an exception if unsuccessful.  Analogous "
"to ``list.append(item)``."
msgstr ""

# ce5a5802a8284193bbf3c72561634416
#: c-api/list.rst:112
msgid ""
"Return a list of the objects in *list* containing the objects *between* "
"*low* and *high*.  Return *NULL* and set an exception if unsuccessful.  "
"Analogous to ``list[low:high]``.  Negative indices, as when slicing from "
"Python, are not supported."
msgstr ""

# 50852473d6274884baa0d134f9064171
#: c-api/list.rst:120
msgid ""
"Set the slice of *list* between *low* and *high* to the contents of "
"*itemlist*.  Analogous to ``list[low:high] = itemlist``. The *itemlist* may "
"be *NULL*, indicating the assignment of an empty list (slice deletion). "
"Return ``0`` on success, ``-1`` on failure.  Negative indices, as when "
"slicing from Python, are not supported."
msgstr ""

# 835ebeb02da347a6994554538df23b1d
#: c-api/list.rst:129
msgid ""
"Sort the items of *list* in place.  Return ``0`` on success, ``-1`` on "
"failure.  This is equivalent to ``list.sort()``."
msgstr ""

# c60bd9d47c074676a886c33558d8e5bf
#: c-api/list.rst:135
msgid ""
"Reverse the items of *list* in place.  Return ``0`` on success, ``-1`` on "
"failure.  This is the equivalent of ``list.reverse()``."
msgstr ""

# 5322ab60bafb40f4925c64e9f41ee0fa
#: c-api/list.rst:143
msgid ""
"Return a new tuple object containing the contents of *list*; equivalent to "
"``tuple(list)``."
msgstr ""

# 097038dbdec444b8bd51418a7c468dbc
#: c-api/long.rst:6
msgid "Integer Objects"
msgstr ""

# e576b536c5244c1ca85c2bab1c4971f6
#: c-api/long.rst:11
msgid ""
"All integers are implemented as \"long\" integer objects of arbitrary size."
msgstr ""

# 778b6ad42542430bbf3d517045e4d544
#: c-api/long.rst:15
msgid "This subtype of :c:type:`PyObject` represents a Python integer object."
msgstr ""

# f09966fc55364cb783b3f27cd7ab7257
#: c-api/long.rst:20
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python integer type. "
"This is the same object as :class:`int` in the Python layer."
msgstr ""

# 6b688aa06f3443b3a95b7069828f6670
#: c-api/long.rst:26
msgid ""
"Return true if its argument is a :c:type:`PyLongObject` or a subtype of :c:"
"type:`PyLongObject`."
msgstr ""

# 468fc1f48cad4e5fa0683afd69e10962
#: c-api/long.rst:32
msgid ""
"Return true if its argument is a :c:type:`PyLongObject`, but not a subtype "
"of :c:type:`PyLongObject`."
msgstr ""

# 37d77bf882a04307ba6bfe8f04ee11d6
#: c-api/long.rst:38
msgid ""
"Return a new :c:type:`PyLongObject` object from *v*, or *NULL* on failure."
msgstr ""

# 7acf5c4e785f403e87022c2ccb0ffe8b
#: c-api/long.rst:40
msgid ""
"The current implementation keeps an array of integer objects for all "
"integers between ``-5`` and ``256``, when you create an int in that range "
"you actually just get back a reference to the existing object. So it should "
"be possible to change the value of ``1``.  I suspect the behaviour of Python "
"in this case is undefined. :-)"
msgstr ""

# a66ea11a9e3747849aa3b592ef7075b0
#: c-api/long.rst:49
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`unsigned long`, "
"or *NULL* on failure."
msgstr ""

# 347f3e5c9dc042f4ba80dd6f57e5b683
#: c-api/long.rst:55
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`Py_ssize_t`, or "
"*NULL* on failure."
msgstr ""

# aea0d5d158624e308711e897f6bcd6d3
#: c-api/long.rst:61
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`size_t`, or "
"*NULL* on failure."
msgstr ""

# a090ecdb040148999b39d63c74ccc2c4
#: c-api/long.rst:67
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`long long`, or "
"*NULL* on failure."
msgstr ""

# 0a16dd0e7a744f8fbd8062711c9f77a0
#: c-api/long.rst:73
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`unsigned long "
"long`, or *NULL* on failure."
msgstr ""

# 497af475e01c4245acad17d4717f405a
#: c-api/long.rst:79
msgid ""
"Return a new :c:type:`PyLongObject` object from the integer part of *v*, or "
"*NULL* on failure."
msgstr ""

# 8cf085c92a6e425dad4c89a769b419ad
#: c-api/long.rst:85
msgid ""
"Return a new :c:type:`PyLongObject` based on the string value in *str*, "
"which is interpreted according to the radix in *base*.  If *pend* is non-"
"*NULL*, *\\*pend* will point to the first character in *str* which follows "
"the representation of the number.  If *base* is ``0``, the radix will be "
"determined based on the leading characters of *str*: if *str* starts with "
"``'0x'`` or ``'0X'``, radix 16 will be used; if *str* starts with ``'0o'`` "
"or ``'0O'``, radix 8 will be used; if *str* starts with ``'0b'`` or "
"``'0B'``, radix 2 will be used; otherwise radix 10 will be used.  If *base* "
"is not ``0``, it must be between ``2`` and ``36``, inclusive.  Leading "
"spaces are ignored.  If there are no digits, :exc:`ValueError` will be "
"raised."
msgstr ""

# 2604a03ba37a485c8a7cf4fd03cfd838
#: c-api/long.rst:99
msgid ""
"Convert a sequence of Unicode digits to a Python integer value.  The Unicode "
"string is first encoded to a byte string using :c:func:"
"`PyUnicode_EncodeDecimal` and then converted using :c:func:"
"`PyLong_FromString`."
msgstr ""

# 0d7743b79b404ea3b9e9f2cd4fcc374e
#: c-api/long.rst:106
msgid ""
"Create a Python integer from the pointer *p*. The pointer value can be "
"retrieved from the resulting value using :c:func:`PyLong_AsVoidPtr`."
msgstr ""

# b80eb96456934ee689b2824bfb9345ad
# 58f258baeef14bffb9abf184a7dbb3f1
#: c-api/long.rst:117 c-api/long.rst:127
msgid ""
"Return a C :c:type:`long` representation of *obj*.  If *obj* is not an "
"instance of :c:type:`PyLongObject`, first call its :meth:`__int__` method "
"(if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""

# 590208719bf0490dba2c4140fe8baf63
# 8d6f844104f74ec59a4199df055a0331
#: c-api/long.rst:121 c-api/long.rst:146
msgid ""
"Raise :exc:`OverflowError` if the value of *obj* is out of range for a :c:"
"type:`long`."
msgstr ""

# 51fe261066304f89901c108b352796f2
#: c-api/long.rst:131
msgid ""
"If the value of *obj* is greater than :const:`LONG_MAX` or less than :const:"
"`LONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively, and return "
"``-1``; otherwise, set *\\*overflow* to ``0``.  If any other exception "
"occurs set *\\*overflow* to ``0`` and return ``-1`` as usual."
msgstr ""

# 360f6db1912d42f2998b6818cec3ff8c
# de012e7bf6ac4bfbbfc4c7c44384ba48
#: c-api/long.rst:142 c-api/long.rst:152
msgid ""
"Return a C :c:type:`long long` representation of *obj*.  If *obj* is not an "
"instance of :c:type:`PyLongObject`, first call its :meth:`__int__` method "
"(if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""

# f9e087c38b8b4a2488de7d3c1b4e8ddd
#: c-api/long.rst:156
msgid ""
"If the value of *obj* is greater than :const:`PY_LLONG_MAX` or less than :"
"const:`PY_LLONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively, "
"and return ``-1``; otherwise, set *\\*overflow* to ``0``.  If any other "
"exception occurs set *\\*overflow* to ``0`` and return ``-1`` as usual."
msgstr ""

# 71f2b59597b54d00b562d266f3b3a180
#: c-api/long.rst:170
msgid ""
"Return a C :c:type:`Py_ssize_t` representation of *pylong*.  *pylong* must "
"be an instance of :c:type:`PyLongObject`."
msgstr ""

# 21ec9f9cd05b4e86928f4da8434414af
#: c-api/long.rst:173
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"type:`Py_ssize_t`."
msgstr ""

# f9628eee0e6545dabc8c2a7834f03acf
#: c-api/long.rst:183
msgid ""
"Return a C :c:type:`unsigned long` representation of *pylong*.  *pylong* "
"must be an instance of :c:type:`PyLongObject`."
msgstr ""

# 88f82a9f3c544677848e7e0831ac90ea
#: c-api/long.rst:186
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"type:`unsigned long`."
msgstr ""

# 9f6bdc7ce23147cc94c09d51824d6b92
#: c-api/long.rst:192
msgid ""
"Return a C :c:type:`size_t` representation of *pylong*.  *pylong* must be an "
"instance of :c:type:`PyLongObject`."
msgstr ""

# 811d4bf5ad1f434a84d2b4a8daec8db5
#: c-api/long.rst:195
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"type:`size_t`."
msgstr ""

# 92d367e17770413691277f318b447a83
#: c-api/long.rst:204
msgid ""
"Return a C :c:type:`unsigned PY_LONG_LONG` representation of *pylong*. "
"*pylong* must be an instance of :c:type:`PyLongObject`."
msgstr ""

# 0110e0ed976d439295e8d872701633c1
#: c-api/long.rst:207
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for an :"
"c:type:`unsigned PY_LONG_LONG`."
msgstr ""

# ebb765c18f0148fbae3c4d2da8aa18d4
#: c-api/long.rst:216
msgid ""
"Return a C :c:type:`unsigned long` representation of *obj*.  If *obj* is not "
"an instance of :c:type:`PyLongObject`, first call its :meth:`__int__` method "
"(if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""

# 0ea702f1c16942a0b982221e2fd462f5
#: c-api/long.rst:220
msgid ""
"If the value of *obj* is out of range for an :c:type:`unsigned long`, return "
"the reduction of that value modulo :const:`ULONG_MAX + 1`."
msgstr ""

# 62ae460d50f546909bb6803650467933
#: c-api/long.rst:226
msgid ""
"Return a C :c:type:`unsigned long long` representation of *obj*.  If *obj* "
"is not an instance of :c:type:`PyLongObject`, first call its :meth:`__int__` "
"method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""

# 15910a5accdf425abecb11709bc5c427
#: c-api/long.rst:230
msgid ""
"If the value of *obj* is out of range for an :c:type:`unsigned long long`, "
"return the reduction of that value modulo :const:`PY_ULLONG_MAX + 1`."
msgstr ""

# dbd1aec47f09471c9fd8e13991316e14
#: c-api/long.rst:236
msgid ""
"Return a C :c:type:`double` representation of *pylong*.  *pylong* must be an "
"instance of :c:type:`PyLongObject`."
msgstr ""

# 2120e570590d45e0a37bbfe5893532a1
#: c-api/long.rst:239
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"type:`double`."
msgstr ""

# 53b054cb35f14453b143899598a155c6
#: c-api/long.rst:245
msgid ""
"Convert a Python integer *pylong* to a C :c:type:`void` pointer. If *pylong* "
"cannot be converted, an :exc:`OverflowError` will be raised.  This is only "
"assured to produce a usable :c:type:`void` pointer for values created with :"
"c:func:`PyLong_FromVoidPtr`."
msgstr ""

# be30490525f34a35bf7a846d212cca2b
#: c-api/mapping.rst:6
msgid "Mapping Protocol"
msgstr ""

# f5232956f0bb415889df992d1972d558
#: c-api/mapping.rst:11
msgid ""
"Return ``1`` if the object provides mapping protocol, and ``0`` otherwise.  "
"This function always succeeds."
msgstr ""

# 287f2fd4f2ad42fcb890417b57c7bbfb
#: c-api/mapping.rst:20
msgid ""
"Returns the number of keys in object *o* on success, and ``-1`` on failure.  "
"For objects that do not provide mapping protocol, this is equivalent to the "
"Python expression ``len(o)``."
msgstr ""

# ae0f419ca7b449739e479dbd6b1e83b9
# f40e710c9a1342ed9261b1185c8d2e89
#: c-api/mapping.rst:27 c-api/mapping.rst:33
msgid ""
"Remove the mapping for object *key* from the object *o*. Return ``-1`` on "
"failure.  This is equivalent to the Python statement ``del o[key]``."
msgstr ""

# 43f8bf9e475c43caa62a1d208593beae
#: c-api/mapping.rst:39
msgid ""
"On success, return ``1`` if the mapping object has the key *key* and ``0`` "
"otherwise.  This is equivalent to the Python expression ``key in o``. This "
"function always succeeds."
msgstr ""

# 195aa13552c344028ba5a30a60acdf5f
#: c-api/mapping.rst:46
msgid ""
"Return ``1`` if the mapping object has the key *key* and ``0`` otherwise.  "
"This is equivalent to the Python expression ``key in o``.  This function "
"always succeeds."
msgstr ""

# d0afd4a8e4b146de953af2d37dcf8918
#: c-api/mapping.rst:53
msgid ""
"On success, return a list of the keys in object *o*.  On failure, return "
"*NULL*. This is equivalent to the Python expression ``list(o.keys())``."
msgstr ""

# 6a00edfc62a243428b5620d6657c5166
#: c-api/mapping.rst:59
msgid ""
"On success, return a list of the values in object *o*.  On failure, return "
"*NULL*. This is equivalent to the Python expression ``list(o.values())``."
msgstr ""

# 520b0987b7ab4df897a29f50a71844fe
#: c-api/mapping.rst:65
msgid ""
"On success, return a list of the items in object *o*, where each item is a "
"tuple containing a key-value pair.  On failure, return *NULL*. This is "
"equivalent to the Python expression ``list(o.items())``."
msgstr ""

# 11029828fed94b3daa569a789f304d37
# 9c3c1ce90cc6414cbc2e5b96641dd155
#: c-api/mapping.rst:72 c-api/object.rst:318
msgid ""
"Return element of *o* corresponding to the object *key* or *NULL* on "
"failure. This is the equivalent of the Python expression ``o[key]``."
msgstr ""

# caba9e7f403140da89ff6206f17a50cb
#: c-api/mapping.rst:78
msgid ""
"Map the object *key* to the value *v* in object *o*. Returns ``-1`` on "
"failure. This is the equivalent of the Python statement ``o[key] = v``."
msgstr ""

# 634de4fb9f744ffd87bcaf3c997cb04d
#: c-api/marshal.rst:6
msgid "Data marshalling support"
msgstr ""

# 40cb31982f1541cda346c91281e24ea6
#: c-api/marshal.rst:8
msgid ""
"These routines allow C code to work with serialized objects using the same "
"data format as the :mod:`marshal` module.  There are functions to write data "
"into the serialization format, and additional functions that can be used to "
"read the data back.  Files used to store marshalled data must be opened in "
"binary mode."
msgstr ""

# 5895110fae3141959259f7b8811f275e
#: c-api/marshal.rst:14
msgid "Numeric values are stored with the least significant byte first."
msgstr ""

# 1c9d6b6a120041789b45c1e08b3cbeb6
#: c-api/marshal.rst:16
msgid ""
"The module supports two versions of the data format: version 0 is the "
"historical version, version 1 shares interned strings in the file, and upon "
"unmarshalling.  Version 2 uses a binary format for floating point numbers. "
"*Py_MARSHAL_VERSION* indicates the current file format (currently 2)."
msgstr ""

# 0c9bb4a8b54d4044afcb29976a7d6e40
#: c-api/marshal.rst:24
msgid ""
"Marshal a :c:type:`long` integer, *value*, to *file*.  This will only write "
"the least-significant 32 bits of *value*; regardless of the size of the "
"native :c:type:`long` type.  *version* indicates the file format."
msgstr ""

# 78e7f63db266446490d54192f3508514
#: c-api/marshal.rst:31
msgid ""
"Marshal a Python object, *value*, to *file*. *version* indicates the file "
"format."
msgstr ""

# ca1397c3a8f140cebcd63a5be7e267f6
#: c-api/marshal.rst:37
msgid ""
"Return a string object containing the marshalled representation of *value*. "
"*version* indicates the file format."
msgstr ""

# c103d09e312b40319c5e8bf075386619
#: c-api/marshal.rst:41
msgid "The following functions allow marshalled values to be read back in."
msgstr ""

# 380432f458fe4140a8471e05ce036c02
#: c-api/marshal.rst:43
msgid ""
"XXX What about error detection?  It appears that reading past the end of the "
"file will always result in a negative numeric value (where that's relevant), "
"but it's not clear that negative values won't be handled properly when "
"there's no error.  What's the right way to tell? Should only non-negative "
"values be written using these routines?"
msgstr ""

# f8f4a0f81bcb4b36866b71b1113e6439
#: c-api/marshal.rst:52
msgid ""
"Return a C :c:type:`long` from the data stream in a :c:type:`FILE\\*` opened "
"for reading.  Only a 32-bit value can be read in using this function, "
"regardless of the native size of :c:type:`long`."
msgstr ""

# 5b3be993099b43deb100c443a0414206
#: c-api/marshal.rst:59
msgid ""
"Return a C :c:type:`short` from the data stream in a :c:type:`FILE\\*` "
"opened for reading.  Only a 16-bit value can be read in using this function, "
"regardless of the native size of :c:type:`short`."
msgstr ""

# 8338e83ea82e46bf9d625497cd39d9be
#: c-api/marshal.rst:66
msgid ""
"Return a Python object from the data stream in a :c:type:`FILE\\*` opened "
"for reading.  On error, sets the appropriate exception (:exc:`EOFError` or :"
"exc:`TypeError`) and returns *NULL*."
msgstr ""

# 264671cd0e654d34aeeec4d61799991a
#: c-api/marshal.rst:73
msgid ""
"Return a Python object from the data stream in a :c:type:`FILE\\*` opened "
"for reading.  Unlike :c:func:`PyMarshal_ReadObjectFromFile`, this function "
"assumes that no further objects will be read from the file, allowing it to "
"aggressively load file data into memory so that the de-serialization can "
"operate from data in memory rather than reading a byte at a time from the "
"file.  Only use these variant if you are certain that you won't be reading "
"anything else from the file.  On error, sets the appropriate exception (:exc:"
"`EOFError` or :exc:`TypeError`) and returns *NULL*."
msgstr ""

# f1d97050f7fd41adb0261759b972e967
#: c-api/marshal.rst:85
msgid ""
"Return a Python object from the data stream in a character buffer containing "
"*len* bytes pointed to by *string*.  On error, sets the appropriate "
"exception (:exc:`EOFError` or :exc:`TypeError`) and returns *NULL*."
msgstr ""

# 673d07ed858144d293a08e31f8541a62
#: c-api/memory.rst:8
msgid "Memory Management"
msgstr ""

# 8183157fe5454e138f641a2f14c408f2
#: c-api/memory.rst:17
msgid "Overview"
msgstr ""

# 99d405543d5e42cc9dc33d68cf6f14a6
#: c-api/memory.rst:19
msgid ""
"Memory management in Python involves a private heap containing all Python "
"objects and data structures. The management of this private heap is ensured "
"internally by the *Python memory manager*.  The Python memory manager has "
"different components which deal with various dynamic storage management "
"aspects, like sharing, segmentation, preallocation or caching."
msgstr ""

# 4602509e68b34d23b617c2bc041634fd
#: c-api/memory.rst:25
msgid ""
"At the lowest level, a raw memory allocator ensures that there is enough "
"room in the private heap for storing all Python-related data by interacting "
"with the memory manager of the operating system. On top of the raw memory "
"allocator, several object-specific allocators operate on the same heap and "
"implement distinct memory management policies adapted to the peculiarities "
"of every object type. For example, integer objects are managed differently "
"within the heap than strings, tuples or dictionaries because integers imply "
"different storage requirements and speed/space tradeoffs. The Python memory "
"manager thus delegates some of the work to the object-specific allocators, "
"but ensures that the latter operate within the bounds of the private heap."
msgstr ""

# 2eed899e7b23486aad4083858cb942e1
#: c-api/memory.rst:36
msgid ""
"It is important to understand that the management of the Python heap is "
"performed by the interpreter itself and that the user has no control over "
"it, even if she regularly manipulates object pointers to memory blocks "
"inside that heap.  The allocation of heap space for Python objects and other "
"internal buffers is performed on demand by the Python memory manager through "
"the Python/C API functions listed in this document."
msgstr ""

# 13e08e27550e42829563295a56b39469
#: c-api/memory.rst:49
msgid ""
"To avoid memory corruption, extension writers should never try to operate on "
"Python objects with the functions exported by the C library: :c:func:"
"`malloc`, :c:func:`calloc`, :c:func:`realloc` and :c:func:`free`.  This will "
"result in  mixed calls between the C allocator and the Python memory manager "
"with fatal consequences, because they implement different algorithms and "
"operate on different heaps.  However, one may safely allocate and release "
"memory blocks with the C library allocator for individual purposes, as shown "
"in the following example::"
msgstr ""

# 4678eaad41ef49eaa597ae9144ec34df
#: c-api/memory.rst:68
msgid ""
"In this example, the memory request for the I/O buffer is handled by the C "
"library allocator. The Python memory manager is involved only in the "
"allocation of the string object returned as a result."
msgstr ""

# 99fd14d22a354547a370d60c80879b39
#: c-api/memory.rst:72
msgid ""
"In most situations, however, it is recommended to allocate memory from the "
"Python heap specifically because the latter is under control of the Python "
"memory manager. For example, this is required when the interpreter is "
"extended with new object types written in C. Another reason for using the "
"Python heap is the desire to *inform* the Python memory manager about the "
"memory needs of the extension module. Even when the requested memory is used "
"exclusively for internal, highly-specific purposes, delegating all memory "
"requests to the Python memory manager causes the interpreter to have a more "
"accurate image of its memory footprint as a whole. Consequently, under "
"certain circumstances, the Python memory manager may or may not trigger "
"appropriate actions, like garbage collection, memory compaction or other "
"preventive procedures. Note that by using the C library allocator as shown "
"in the previous example, the allocated memory for the I/O buffer escapes "
"completely the Python memory manager."
msgstr ""

# bcf2181d349c4ccdac9215e439600ec4
#: c-api/memory.rst:90
msgid "Memory Interface"
msgstr ""

# 571597373189465e9708511f2967e0f5
#: c-api/memory.rst:92
msgid ""
"The following function sets, modeled after the ANSI C standard, but "
"specifying behavior when requesting zero bytes, are available for allocating "
"and releasing memory from the Python heap:"
msgstr ""

# db7e9cb572434774980b7c75daefaf81
#: c-api/memory.rst:99
msgid ""
"Allocates *n* bytes and returns a pointer of type :c:type:`void\\*` to the "
"allocated memory, or *NULL* if the request fails. Requesting zero bytes "
"returns a distinct non-*NULL* pointer if possible, as if ``PyMem_Malloc(1)`` "
"had been called instead. The memory will not have been initialized in any "
"way."
msgstr ""

# 3815f9ab02f14f848df66637d61c8372
#: c-api/memory.rst:107
msgid ""
"Resizes the memory block pointed to by *p* to *n* bytes. The contents will "
"be unchanged to the minimum of the old and the new sizes. If *p* is *NULL*, "
"the call is equivalent to ``PyMem_Malloc(n)``; else if *n* is equal to zero, "
"the memory block is resized but is not freed, and the returned pointer is "
"non-*NULL*.  Unless *p* is *NULL*, it must have been returned by a previous "
"call to :c:func:`PyMem_Malloc` or :c:func:`PyMem_Realloc`. If the request "
"fails, :c:func:`PyMem_Realloc` returns *NULL* and *p* remains a valid "
"pointer to the previous memory area."
msgstr ""

# 440b794212ba44e3a208fc075fe9565d
#: c-api/memory.rst:119
msgid ""
"Frees the memory block pointed to by *p*, which must have been returned by a "
"previous call to :c:func:`PyMem_Malloc` or :c:func:`PyMem_Realloc`.  "
"Otherwise, or if ``PyMem_Free(p)`` has been called before, undefined "
"behavior occurs. If *p* is *NULL*, no operation is performed."
msgstr ""

# 0e0b93429cba4cd281a3bdd720079867
#: c-api/memory.rst:124
msgid ""
"The following type-oriented macros are provided for convenience.  Note  that "
"*TYPE* refers to any C type."
msgstr ""

# a5284dfa77f4490f8227d7c1a45848da
#: c-api/memory.rst:130
msgid ""
"Same as :c:func:`PyMem_Malloc`, but allocates ``(n * sizeof(TYPE))`` bytes "
"of memory.  Returns a pointer cast to :c:type:`TYPE\\*`.  The memory will "
"not have been initialized in any way."
msgstr ""

# 4fdb3148f12d4644a830a9eefbdb2c8b
#: c-api/memory.rst:137
msgid ""
"Same as :c:func:`PyMem_Realloc`, but the memory block is resized to ``(n * "
"sizeof(TYPE))`` bytes.  Returns a pointer cast to :c:type:`TYPE\\*`. On "
"return, *p* will be a pointer to the new memory area, or *NULL* in the event "
"of failure.  This is a C preprocessor macro; p is always reassigned.  Save "
"the original value of p to avoid losing memory when handling errors."
msgstr ""

# 96bdeb02dd584ff188daa20e1abe9564
#: c-api/memory.rst:146
msgid "Same as :c:func:`PyMem_Free`."
msgstr ""

# 4623cc61e0a34a4b9f5828e00299a065
#: c-api/memory.rst:148
msgid ""
"In addition, the following macro sets are provided for calling the Python "
"memory allocator directly, without involving the C API functions listed "
"above. However, note that their use does not preserve binary compatibility "
"across Python versions and is therefore deprecated in extension modules."
msgstr ""

# 89768ec12a9144a886e32b862e1ad5eb
#: c-api/memory.rst:153
msgid ":c:func:`PyMem_MALLOC`, :c:func:`PyMem_REALLOC`, :c:func:`PyMem_FREE`."
msgstr ""

# 49a7eed8e6b7483ca5e5c38e75c237ea
#: c-api/memory.rst:155
msgid ":c:func:`PyMem_NEW`, :c:func:`PyMem_RESIZE`, :c:func:`PyMem_DEL`."
msgstr ""

# 0dca10909b574000b8b36789f79e4465
#: c-api/memory.rst:161
msgid "Examples"
msgstr ""

# c5c7321915c84ad69c15aaa8d16a8e69
#: c-api/memory.rst:163
msgid ""
"Here is the example from section :ref:`memoryoverview`, rewritten so that "
"the I/O buffer is allocated from the Python heap by using the first function "
"set::"
msgstr ""

# 39455d13cf90454dae3a0febaf6c8a69
#: c-api/memory.rst:176
msgid "The same code using the type-oriented function set::"
msgstr ""

# 18a5deb0f3614a3e9eb27aa3786fd600
#: c-api/memory.rst:188
msgid ""
"Note that in the two examples above, the buffer is always manipulated via "
"functions belonging to the same set. Indeed, it is required to use the same "
"memory API family for a given memory block, so that the risk of mixing "
"different allocators is reduced to a minimum. The following code sequence "
"contains two errors, one of which is labeled as *fatal* because it mixes two "
"different allocators operating on different heaps. ::"
msgstr ""

# 4fca4ae7e36341a1876f3463ac0afa68
#: c-api/memory.rst:203
msgid ""
"In addition to the functions aimed at handling raw memory blocks from the "
"Python heap, objects in Python are allocated and released with :c:func:"
"`PyObject_New`, :c:func:`PyObject_NewVar` and :c:func:`PyObject_Del`."
msgstr ""

# 51a9aadb80b748fc99e561f3e075da08
#: c-api/memory.rst:207
msgid ""
"These will be explained in the next chapter on defining and implementing new "
"object types in C."
msgstr ""

# 99157ed3bb8d42549a10354a7ea0d38f
#: c-api/memoryview.rst:9
msgid "MemoryView objects"
msgstr ""

# 2d171a21e7e24dae9fe3e9c5afd87985
#: c-api/memoryview.rst:11
msgid ""
"A :class:`memoryview` object exposes the C level :ref:`buffer interface "
"<bufferobjects>` as a Python object which can then be passed around like any "
"other object."
msgstr ""

# b9b99a4ac2a140f2824599b89f9a93eb
#: c-api/memoryview.rst:18
msgid ""
"Create a memoryview object from an object that provides the buffer "
"interface. If *obj* supports writable buffer exports, the memoryview object "
"will be readable and writable, otherwise it will be read-only."
msgstr ""

# 2ad70fa9c2a9492a9b09781c70bb8811
#: c-api/memoryview.rst:25
msgid ""
"Create a memoryview object wrapping the given buffer structure *view*. The "
"memoryview object then owns the buffer represented by *view*, which means "
"you shouldn't try to call :c:func:`PyBuffer_Release` yourself: it will be "
"done on deallocation of the memoryview object."
msgstr ""

# ddb27e0cf6da4380ae662fee74dad643
#: c-api/memoryview.rst:33
msgid ""
"Create a memoryview object to a contiguous chunk of memory (in either 'C' or "
"'F'ortran *order*) from an object that defines the buffer interface. If "
"memory is contiguous, the memoryview object points to the original memory. "
"Otherwise, a copy is made and the memoryview points to a new bytes object."
msgstr ""

# 3d229c7675764980982e63dcec566db6
#: c-api/memoryview.rst:42
msgid ""
"Return true if the object *obj* is a memoryview object.  It is not currently "
"allowed to create subclasses of :class:`memoryview`."
msgstr ""

# 7515a22efaf7482e89dba9e43f0a2fa9
#: c-api/memoryview.rst:48
msgid ""
"Return a pointer to the buffer structure wrapped by the given memoryview "
"object.  The object **must** be a memoryview instance; this macro doesn't "
"check its type, you must do it yourself or you will risk crashes."
msgstr ""

# cad8ac4e34474d8d8253bd624f9549f8
#: c-api/method.rst:6
msgid "Instance Method Objects"
msgstr ""

# 70bb4c78a73d49aa90a83c062e0c54dd
#: c-api/method.rst:10
msgid ""
"An instance method is a wrapper for a :c:data:`PyCFunction` and the new way "
"to bind a :c:data:`PyCFunction` to a class object. It replaces the former "
"call ``PyMethod_New(func, NULL, class)``."
msgstr ""

# 862e944763714df39b0557b0b1959d46
#: c-api/method.rst:17
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python instance "
"method type. It is not exposed to Python programs."
msgstr ""

# 2c0dd3338df0475d9dbe822c70b94708
#: c-api/method.rst:23
msgid ""
"Return true if *o* is an instance method object (has type :c:data:"
"`PyInstanceMethod_Type`).  The parameter must not be *NULL*."
msgstr ""

# 40f27bd0a9764892bb4f78030a728184
#: c-api/method.rst:29
msgid ""
"Return a new instance method object, with *func* being any callable object "
"*func* is the function that will be called when the instance method is "
"called."
msgstr ""

# 7fd2af5dd2724bb5aa368dc378b13762
#: c-api/method.rst:36
msgid "Return the function object associated with the instance method *im*."
msgstr ""

# 096690a716bb4376837280a341bdb0e6
#: c-api/method.rst:41
msgid ""
"Macro version of :c:func:`PyInstanceMethod_Function` which avoids error "
"checking."
msgstr ""

# b88c45f36c7c479585482bb89a34a8bd
#: c-api/method.rst:47
msgid "Method Objects"
msgstr ""

# 461698ae344341398de7368a174100b7
#: c-api/method.rst:51
msgid ""
"Methods are bound function objects. Methods are always bound to an instance "
"of an user-defined class. Unbound methods (methods bound to a class object) "
"are no longer available."
msgstr ""

# 18eefb51e71b4530b3fcaf6bc050505f
#: c-api/method.rst:60
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python method type.  "
"This is exposed to Python programs as ``types.MethodType``."
msgstr ""

# 7be13123a19c411a87e937db1b018476
#: c-api/method.rst:66
msgid ""
"Return true if *o* is a method object (has type :c:data:`PyMethod_Type`).  "
"The parameter must not be *NULL*."
msgstr ""

# 1531bbdece6c4726990d232863bd45c7
#: c-api/method.rst:72
msgid ""
"Return a new method object, with *func* being any callable object and *self* "
"the instance the method should be bound. *func* is the function that will be "
"called when the method is called. *self* must not be *NULL*."
msgstr ""

# be6dda8a64b54e7dbd233b3e0a6da332
#: c-api/method.rst:79
msgid "Return the function object associated with the method *meth*."
msgstr ""

# cc06ce5fbca94149843c57135416cd55
#: c-api/method.rst:84
msgid ""
"Macro version of :c:func:`PyMethod_Function` which avoids error checking."
msgstr ""

# f40cdf88b3d14039bf545fe7116134fd
#: c-api/method.rst:89
msgid "Return the instance associated with the method *meth*."
msgstr ""

# 3bda06578afc44dbb608096ce36b3b8c
#: c-api/method.rst:94
msgid "Macro version of :c:func:`PyMethod_Self` which avoids error checking."
msgstr ""

# e7db8de2f5fa456685ae833274ad4103
# 3edbfc62d6ad46c688eb9c75737c3cdc
# bb462ad5b54041ab934fc8862c679b70
#: c-api/method.rst:99 c-api/tuple.rst:110 c-api/unicode.rst:90
msgid "Clear the free list. Return the total number of freed items."
msgstr ""

# 58c4499137c345ba87df23db6b5b9776
#: c-api/module.rst:6
msgid "Module Objects"
msgstr ""

# cc5b09ac8a5145b79ecee44ec5c7fbf3
#: c-api/module.rst:10
msgid "There are only a few functions special to module objects."
msgstr ""

# 50bd0582537f45f9bd9ad720f0679003
#: c-api/module.rst:17
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python module type.  "
"This is exposed to Python programs as ``types.ModuleType``."
msgstr ""

# c3572a4ced5540a990b0f7d119119b30
#: c-api/module.rst:23
msgid "Return true if *p* is a module object, or a subtype of a module object."
msgstr ""

# 1b2f4bd182a4438d8ed5542a364bdc9c
#: c-api/module.rst:28
msgid ""
"Return true if *p* is a module object, but not a subtype of :c:data:"
"`PyModule_Type`."
msgstr ""

# 0d96f2e5ee394f07a5c8f274d9a419ff
#: c-api/module.rst:39
msgid ""
"Return a new module object with the :attr:`__name__` attribute set to "
"*name*. Only the module's :attr:`__doc__` and :attr:`__name__` attributes "
"are filled in; the caller is responsible for providing a :attr:`__file__` "
"attribute."
msgstr ""

# a6950986e14645f8b439f59716513f4d
#: c-api/module.rst:48
msgid ""
"Return the dictionary object that implements *module*'s namespace; this "
"object is the same as the :attr:`__dict__` attribute of the module object.  "
"This function never fails.  It is recommended extensions use other :c:func:"
"`PyModule_\\*` and :c:func:`PyObject_\\*` functions rather than directly "
"manipulate a module's :attr:`__dict__`."
msgstr ""

# 7a5ec54c88124e319bdb43b2efdc36c5
#: c-api/module.rst:61
msgid ""
"Return *module*'s :attr:`__name__` value.  If the module does not provide "
"one, or if it is not a string, :exc:`SystemError` is raised and *NULL* is "
"returned."
msgstr ""

# 404bbbd55f694f499edc8c976690143f
#: c-api/module.rst:67
msgid ""
"Similar to :c:func:`PyModule_GetFilenameObject` but return the filename "
"encoded to 'utf-8'."
msgstr ""

# 73f9bff55361417d93487f818f270eaa
#: c-api/module.rst:81
msgid ""
"Return the name of the file from which *module* was loaded using *module*'s :"
"attr:`__file__` attribute.  If this is not defined, or if it is not a "
"unicode string, raise :exc:`SystemError` and return *NULL*; otherwise return "
"a reference to a :c:type:`PyUnicodeObject`."
msgstr ""

# e4e61699d71b4c1da6b675ced226b262
#: c-api/module.rst:91
msgid ""
"Return the \"state\" of the module, that is, a pointer to the block of "
"memory allocated at module creation time, or *NULL*.  See :c:member:"
"`PyModuleDef.m_size`."
msgstr ""

# 185cde0d535b418bbe6d3a61907a779f
#: c-api/module.rst:98
msgid ""
"Return a pointer to the :c:type:`PyModuleDef` struct from which the module "
"was created, or *NULL* if the module wasn't created with :c:func:"
"`PyModule_Create`."
msgstr ""

# 2fdd29915d194d969d60965858d7e9e6
#: c-api/module.rst:104
msgid "Initializing C modules"
msgstr ""

# 4105ecb040144bfebcbd54b1b83eb08a
#: c-api/module.rst:106
msgid "These functions are usually used in the module initialization function."
msgstr ""

# 8f624c145101428380ad3b80cd42b135
#: c-api/module.rst:110
msgid ""
"Create a new module object, given the definition in *module*.  This behaves "
"like :c:func:`PyModule_Create2` with *module_api_version* set to :const:"
"`PYTHON_API_VERSION`."
msgstr ""

# a78e4059720845d5bd5a4c586d2af4d1
#: c-api/module.rst:117
msgid ""
"Create a new module object, given the definition in *module*, assuming the "
"API version *module_api_version*.  If that version does not match the "
"version of the running interpreter, a :exc:`RuntimeWarning` is emitted."
msgstr ""

# 1787e20c59044e23951946b0fd4b0c8b
#: c-api/module.rst:123
msgid ""
"Most uses of this function should be using :c:func:`PyModule_Create` "
"instead; only use this if you are sure you need it."
msgstr ""

# eb93b9618cc44c7bbb68752b91dfe920
#: c-api/module.rst:129
msgid ""
"This struct holds all information that is needed to create a module object. "
"There is usually only one static variable of that type for each module, "
"which is statically initialized and then passed to :c:func:`PyModule_Create` "
"in the module initialization function."
msgstr ""

# 07022bcbb7984fbd871df4ec85fdaef9
#: c-api/module.rst:136
msgid "Always initialize this member to :const:`PyModuleDef_HEAD_INIT`."
msgstr ""

# a54f25b9b6c3480180cb019cdc8b4ada
#: c-api/module.rst:140
msgid "Name for the new module."
msgstr ""

# d00e0681960849e1a11cfbae44986f48
#: c-api/module.rst:144
msgid ""
"Docstring for the module; usually a docstring variable created with :c:func:"
"`PyDoc_STRVAR` is used."
msgstr ""

# 2d41704d8cf24ead8e745923f1e70169
#: c-api/module.rst:149
msgid ""
"If the module object needs additional memory, this should be set to the "
"number of bytes to allocate; a pointer to the block of memory can be "
"retrieved with :c:func:`PyModule_GetState`.  If no memory is needed, set "
"this to ``-1``."
msgstr ""

# 0b1d96f99ce14aad9d422a7beeed3439
#: c-api/module.rst:154
msgid ""
"This memory should be used, rather than static globals, to hold per-module "
"state, since it is then safe for use in multiple sub-interpreters.  It is "
"freed when the module object is deallocated, after the :c:member:`m_free` "
"function has been called, if present."
msgstr ""

# c13cf226fc1c428cb1c9131010b11c98
#: c-api/module.rst:161
msgid ""
"A pointer to a table of module-level functions, described by :c:type:"
"`PyMethodDef` values.  Can be *NULL* if no functions are present."
msgstr ""

# 1917e9cdba1d49088f713a8498a798f6
#: c-api/module.rst:166
msgid "Currently unused, should be *NULL*."
msgstr ""

# 59cbc25320754e2bbcff67fb4c253f72
#: c-api/module.rst:170
msgid ""
"A traversal function to call during GC traversal of the module object, or "
"*NULL* if not needed."
msgstr ""

# c0dbe0e049d44dd39238940568cdb835
#: c-api/module.rst:175
msgid ""
"A clear function to call during GC clearing of the module object, or *NULL* "
"if not needed."
msgstr ""

# 42353e0ea9814478b789f66ff636c5f9
#: c-api/module.rst:180
msgid ""
"A function to call during deallocation of the module object, or *NULL* if "
"not needed."
msgstr ""

# 1d497ca971dd4b699da5553adc6b5366
#: c-api/module.rst:186
msgid ""
"Add an object to *module* as *name*.  This is a convenience function which "
"can be used from the module's initialization function.  This steals a "
"reference to *value*.  Return ``-1`` on error, ``0`` on success."
msgstr ""

# 1ce7006e93e1451fb632318cf2838d15
#: c-api/module.rst:193
msgid ""
"Add an integer constant to *module* as *name*.  This convenience function "
"can be used from the module's initialization function. Return ``-1`` on "
"error, ``0`` on success."
msgstr ""

# 6b2bbcb74f8e46368d36fbb08036fb16
#: c-api/module.rst:200
msgid ""
"Add a string constant to *module* as *name*.  This convenience function can "
"be used from the module's initialization function.  The string *value* must "
"be null-terminated.  Return ``-1`` on error, ``0`` on success."
msgstr ""

# 935f5868d48f483abd1d3f154c2e2725
#: c-api/module.rst:207
msgid ""
"Add an int constant to *module*. The name and the value are taken from "
"*macro*. For example ``PyModule_AddIntMacro(module, AF_INET)`` adds the int "
"constant *AF_INET* with the value of *AF_INET* to *module*. Return ``-1`` on "
"error, ``0`` on success."
msgstr ""

# 60b893239f8742c6abb365b6daecaacc
#: c-api/module.rst:215
msgid "Add a string constant to *module*."
msgstr ""

# 7ef6567fbed14325b27e81f70b179c64
#: c-api/none.rst:6
msgid "The None Object"
msgstr ""

# e9739e0329be42e0bea251f255b2bc4d
#: c-api/none.rst:10
msgid ""
"Note that the :c:type:`PyTypeObject` for ``None`` is not directly exposed in "
"the Python/C API.  Since ``None`` is a singleton, testing for object "
"identity (using ``==`` in C) is sufficient. There is no :c:func:"
"`PyNone_Check` function for the same reason."
msgstr ""

# f2ee4c9fb5cf487ab19dd577969d61d7
#: c-api/none.rst:18
msgid ""
"The Python ``None`` object, denoting lack of value.  This object has no "
"methods. It needs to be treated just like any other object with respect to "
"reference counts."
msgstr ""

# 6cf85bfd3e7d41409de8ef61aa884e81
#: c-api/none.rst:25
msgid ""
"Properly handle returning :c:data:`Py_None` from within a C function (that "
"is, increment the reference count of None and return it.)"
msgstr ""

# 871ef8a750ca4dbcaf0f0065b8384d08
#: c-api/number.rst:6
msgid "Number Protocol"
msgstr ""

# 537306841ea7409bbd4633b5a96d79fd
#: c-api/number.rst:11
msgid ""
"Returns ``1`` if the object *o* provides numeric protocols, and false "
"otherwise. This function always succeeds."
msgstr ""

# 831720c69ece40b08bee478383fae060
#: c-api/number.rst:17
msgid ""
"Returns the result of adding *o1* and *o2*, or *NULL* on failure.  This is "
"the equivalent of the Python expression ``o1 + o2``."
msgstr ""

# b4717ddbef364c6bba200c3a603ab380
#: c-api/number.rst:23
msgid ""
"Returns the result of subtracting *o2* from *o1*, or *NULL* on failure.  "
"This is the equivalent of the Python expression ``o1 - o2``."
msgstr ""

# 78b4d083eb684c77b5ba26208938b154
#: c-api/number.rst:29
msgid ""
"Returns the result of multiplying *o1* and *o2*, or *NULL* on failure.  This "
"is the equivalent of the Python expression ``o1 * o2``."
msgstr ""

# f9eb52211f464580bcfa8a298dec0195
#: c-api/number.rst:35
msgid ""
"Return the floor of *o1* divided by *o2*, or *NULL* on failure.  This is "
"equivalent to the \"classic\" division of integers."
msgstr ""

# c3f9d142ec4f4adeba34a7b4b474cc85
#: c-api/number.rst:41
msgid ""
"Return a reasonable approximation for the mathematical value of *o1* divided "
"by *o2*, or *NULL* on failure.  The return value is \"approximate\" because "
"binary floating point numbers are approximate; it is not possible to "
"represent all real numbers in base two.  This function can return a floating "
"point value when passed two integers."
msgstr ""

# a79c3b442845428b99699b5d5d2ea130
#: c-api/number.rst:50
msgid ""
"Returns the remainder of dividing *o1* by *o2*, or *NULL* on failure.  This "
"is the equivalent of the Python expression ``o1 % o2``."
msgstr ""

# ad83ea02d53b4e3d951620de3c776ffb
#: c-api/number.rst:58
msgid ""
"See the built-in function :func:`divmod`. Returns *NULL* on failure.  This "
"is the equivalent of the Python expression ``divmod(o1, o2)``."
msgstr ""

# 957e51e1d608468881a5ff09007c9ea0
#: c-api/number.rst:66
msgid ""
"See the built-in function :func:`pow`. Returns *NULL* on failure.  This is "
"the equivalent of the Python expression ``pow(o1, o2, o3)``, where *o3* is "
"optional. If *o3* is to be ignored, pass :c:data:`Py_None` in its place "
"(passing *NULL* for *o3* would cause an illegal memory access)."
msgstr ""

# e189ff1f36774cd1bf7cce7bfa6312b4
#: c-api/number.rst:74
msgid ""
"Returns the negation of *o* on success, or *NULL* on failure. This is the "
"equivalent of the Python expression ``-o``."
msgstr ""

# c999c52866fd44f5b7fc9e610bca40c4
#: c-api/number.rst:80
msgid ""
"Returns *o* on success, or *NULL* on failure.  This is the equivalent of the "
"Python expression ``+o``."
msgstr ""

# fed456e549074f299575550e7db168db
#: c-api/number.rst:88
msgid ""
"Returns the absolute value of *o*, or *NULL* on failure.  This is the "
"equivalent of the Python expression ``abs(o)``."
msgstr ""

# 031d7d72e08d4bfd9a695be67bf060e3
#: c-api/number.rst:94
msgid ""
"Returns the bitwise negation of *o* on success, or *NULL* on failure.  This "
"is the equivalent of the Python expression ``~o``."
msgstr ""

# ab6600275f4d40cb989a2c0e715de6e6
#: c-api/number.rst:100
msgid ""
"Returns the result of left shifting *o1* by *o2* on success, or *NULL* on "
"failure.  This is the equivalent of the Python expression ``o1 << o2``."
msgstr ""

# 45fcfd77bc22492aac63afc6af3c4006
#: c-api/number.rst:106
msgid ""
"Returns the result of right shifting *o1* by *o2* on success, or *NULL* on "
"failure.  This is the equivalent of the Python expression ``o1 >> o2``."
msgstr ""

# afd155a5ee304424adcb1d1732476bd0
#: c-api/number.rst:112
msgid ""
"Returns the \"bitwise and\" of *o1* and *o2* on success and *NULL* on "
"failure. This is the equivalent of the Python expression ``o1 & o2``."
msgstr ""

# dbc36ddbbaed436294877076e339b9d8
#: c-api/number.rst:118
msgid ""
"Returns the \"bitwise exclusive or\" of *o1* by *o2* on success, or *NULL* "
"on failure.  This is the equivalent of the Python expression ``o1 ^ o2``."
msgstr ""

# 654f7ea0aa7040ce867ebe68407f07d6
#: c-api/number.rst:124
msgid ""
"Returns the \"bitwise or\" of *o1* and *o2* on success, or *NULL* on "
"failure. This is the equivalent of the Python expression ``o1 | o2``."
msgstr ""

# 65c0864aa9ad4a64bb01b8a622b1149a
#: c-api/number.rst:130
msgid ""
"Returns the result of adding *o1* and *o2*, or *NULL* on failure.  The "
"operation is done *in-place* when *o1* supports it.  This is the equivalent "
"of the Python statement ``o1 += o2``."
msgstr ""

# eeb6e1fbd2f24de38a2aa85586aaa0d6
#: c-api/number.rst:137
msgid ""
"Returns the result of subtracting *o2* from *o1*, or *NULL* on failure.  The "
"operation is done *in-place* when *o1* supports it.  This is the equivalent "
"of the Python statement ``o1 -= o2``."
msgstr ""

# 926a48dcf99b417bbf9e3fad5ddbb5a1
#: c-api/number.rst:144
msgid ""
"Returns the result of multiplying *o1* and *o2*, or *NULL* on failure.  The "
"operation is done *in-place* when *o1* supports it.  This is the equivalent "
"of the Python statement ``o1 *= o2``."
msgstr ""

# 93b8f6a1c0c3495589c38fe80b700a33
#: c-api/number.rst:151
msgid ""
"Returns the mathematical floor of dividing *o1* by *o2*, or *NULL* on "
"failure. The operation is done *in-place* when *o1* supports it.  This is "
"the equivalent of the Python statement ``o1 //= o2``."
msgstr ""

# 514debe4a226413b95a128051b3bdff3
#: c-api/number.rst:158
msgid ""
"Return a reasonable approximation for the mathematical value of *o1* divided "
"by *o2*, or *NULL* on failure.  The return value is \"approximate\" because "
"binary floating point numbers are approximate; it is not possible to "
"represent all real numbers in base two.  This function can return a floating "
"point value when passed two integers.  The operation is done *in-place* when "
"*o1* supports it."
msgstr ""

# 66a37d0e17cb4fb3aabb435d52371b34
#: c-api/number.rst:167
msgid ""
"Returns the remainder of dividing *o1* by *o2*, or *NULL* on failure.  The "
"operation is done *in-place* when *o1* supports it.  This is the equivalent "
"of the Python statement ``o1 %= o2``."
msgstr ""

# 9772274c0e494b519e20256c75e33828
#: c-api/number.rst:176
msgid ""
"See the built-in function :func:`pow`. Returns *NULL* on failure.  The "
"operation is done *in-place* when *o1* supports it.  This is the equivalent "
"of the Python statement ``o1 **= o2`` when o3 is :c:data:`Py_None`, or an in-"
"place variant of ``pow(o1, o2, o3)`` otherwise. If *o3* is to be ignored, "
"pass :c:data:`Py_None` in its place (passing *NULL* for *o3* would cause an "
"illegal memory access)."
msgstr ""

# 18da792796ba4cd78bbcdac5b2ebe4e1
#: c-api/number.rst:185
msgid ""
"Returns the result of left shifting *o1* by *o2* on success, or *NULL* on "
"failure.  The operation is done *in-place* when *o1* supports it.  This is "
"the equivalent of the Python statement ``o1 <<= o2``."
msgstr ""

# aeb86bcacf2a44258330709c5f3489b5
#: c-api/number.rst:192
msgid ""
"Returns the result of right shifting *o1* by *o2* on success, or *NULL* on "
"failure.  The operation is done *in-place* when *o1* supports it.  This is "
"the equivalent of the Python statement ``o1 >>= o2``."
msgstr ""

# d57e6f03f38047aabc0d08d419af964b
#: c-api/number.rst:199
msgid ""
"Returns the \"bitwise and\" of *o1* and *o2* on success and *NULL* on "
"failure. The operation is done *in-place* when *o1* supports it.  This is "
"the equivalent of the Python statement ``o1 &= o2``."
msgstr ""

# 6411b0d36eaa46109a1b0fc11d146e0b
#: c-api/number.rst:206
msgid ""
"Returns the \"bitwise exclusive or\" of *o1* by *o2* on success, or *NULL* "
"on failure.  The operation is done *in-place* when *o1* supports it.  This "
"is the equivalent of the Python statement ``o1 ^= o2``."
msgstr ""

# b9abd4bcf3384e089ce512c580723cc1
#: c-api/number.rst:213
msgid ""
"Returns the \"bitwise or\" of *o1* and *o2* on success, or *NULL* on "
"failure.  The operation is done *in-place* when *o1* supports it.  This is "
"the equivalent of the Python statement ``o1 |= o2``."
msgstr ""

# 818b19f2f2454985b1af61f7f477c4d3
#: c-api/number.rst:222
msgid ""
"Returns the *o* converted to an integer object on success, or *NULL* on "
"failure.  This is the equivalent of the Python expression ``int(o)``."
msgstr ""

# bdc3d08ed34a4076846c2c1efbc3533d
#: c-api/number.rst:230
msgid ""
"Returns the *o* converted to a float object on success, or *NULL* on "
"failure. This is the equivalent of the Python expression ``float(o)``."
msgstr ""

# 31ed6bbe3e75489cadc524a945c30c6e
#: c-api/number.rst:236
msgid ""
"Returns the *o* converted to a Python int on success or *NULL* with a :exc:"
"`TypeError` exception raised on failure."
msgstr ""

# 0e1705cff7d54ac7972264542ccc1eb5
#: c-api/number.rst:242
msgid ""
"Returns the integer *n* converted to base *base* as a string.  The *base* "
"argument must be one of 2, 8, 10, or 16.  For base 2, 8, or 16, the returned "
"string is prefixed with a base marker of ``'0b'``, ``'0o'``, or ``'0x'``, "
"respectively.  If *n* is not a Python int, it is converted with :c:func:"
"`PyNumber_Index` first."
msgstr ""

# 4ef03f53129b44e6a343fad1853bbafd
#: c-api/number.rst:251
msgid ""
"Returns *o* converted to a Py_ssize_t value if *o* can be interpreted as an "
"integer.  If the call fails, an exception is raised and -1 is returned."
msgstr ""

# a38e9b80d19b490b953c0c882dfb5947
#: c-api/number.rst:254
msgid ""
"If *o* can be converted to a Python int but the attempt to convert to a "
"Py_ssize_t value would raise an :exc:`OverflowError`, then the *exc* "
"argument is the type of exception that will be raised (usually :exc:"
"`IndexError` or :exc:`OverflowError`).  If *exc* is *NULL*, then the "
"exception is cleared and the value is clipped to *PY_SSIZE_T_MIN* for a "
"negative integer or *PY_SSIZE_T_MAX* for a positive integer."
msgstr ""

# bb6daebb4f5548cdad3d2ada9f2f13c1
#: c-api/number.rst:264
msgid ""
"Returns True if *o* is an index integer (has the nb_index slot of  the "
"tp_as_number structure filled in)."
msgstr ""

# b073db9f53c64d838cfac2c9f10ef97a
#: c-api/objbuffer.rst:4
msgid "Old Buffer Protocol"
msgstr ""

# 51684707ee5e4dccaab9719bdaddc579
#: c-api/objbuffer.rst:8
msgid ""
"These functions were part of the \"old buffer protocol\" API in Python 2. In "
"Python 3, this protocol doesn't exist anymore but the functions are still "
"exposed to ease porting 2.x code.  They act as a compatibility wrapper "
"around the :ref:`new buffer protocol <bufferobjects>`, but they don't give "
"you control over the lifetime of the resources acquired when a buffer is "
"exported."
msgstr ""

# da2c675132d64ebdb8df89565b3b7e80
#: c-api/objbuffer.rst:15
msgid ""
"Therefore, it is recommended that you call :c:func:`PyObject_GetBuffer` (or "
"the ``y*`` or ``w*`` :ref:`format codes <arg-parsing>` with the :c:func:"
"`PyArg_ParseTuple` family of functions) to get a buffer view over an object, "
"and :c:func:`PyBuffer_Release` when the buffer view can be released."
msgstr ""

# 4c32ee02cd9c4c1081a0f04d8207071c
#: c-api/objbuffer.rst:23
msgid ""
"Returns a pointer to a read-only memory location usable as character-based "
"input.  The *obj* argument must support the single-segment character buffer "
"interface.  On success, returns ``0``, sets *buffer* to the memory location "
"and *buffer_len* to the buffer length.  Returns ``-1`` and sets a :exc:"
"`TypeError` on error."
msgstr ""

# c86e1a17cab04002bdd1dad4a984a209
#: c-api/objbuffer.rst:32
msgid ""
"Returns a pointer to a read-only memory location containing arbitrary data. "
"The *obj* argument must support the single-segment readable buffer "
"interface.  On success, returns ``0``, sets *buffer* to the memory location "
"and *buffer_len* to the buffer length.  Returns ``-1`` and sets a :exc:"
"`TypeError` on error."
msgstr ""

# 1b4c65b7497e4b358f7532a99404937e
#: c-api/objbuffer.rst:41
msgid ""
"Returns ``1`` if *o* supports the single-segment readable buffer interface. "
"Otherwise returns ``0``."
msgstr ""

# 79b99957d0a9497dac245dbf0c2ed199
#: c-api/objbuffer.rst:47
msgid ""
"Returns a pointer to a writable memory location.  The *obj* argument must "
"support the single-segment, character buffer interface.  On success, returns "
"``0``, sets *buffer* to the memory location and *buffer_len* to the buffer "
"length.  Returns ``-1`` and sets a :exc:`TypeError` on error."
msgstr ""

# f0e5295ada8c48b3be2c383e1e2b66a5
#: c-api/object.rst:6
msgid "Object Protocol"
msgstr ""

# a54fea18756f43a69675288b44ddc121
#: c-api/object.rst:11
msgid ""
"Print an object *o*, on file *fp*.  Returns ``-1`` on error.  The flags "
"argument is used to enable certain printing options.  The only option "
"currently supported is :const:`Py_PRINT_RAW`; if given, the :func:`str` of "
"the object is written instead of the :func:`repr`."
msgstr ""

# bfbde11271f44cf58b9c4323730542db
# b67a6e2b3c6a44c8996f2d2a3aa12d51
#: c-api/object.rst:19 c-api/object.rst:26
msgid ""
"Returns ``1`` if *o* has the attribute *attr_name*, and ``0`` otherwise.  "
"This is equivalent to the Python expression ``hasattr(o, attr_name)``.  This "
"function always succeeds."
msgstr ""

# 376509b29f7549aeb120043d6e1fb2e2
#: c-api/object.rst:33
msgid ""
"Retrieve an attribute named *attr_name* from object *o*. Returns the "
"attribute value on success, or *NULL* on failure.  This is the equivalent of "
"the Python expression ``o.attr_name``."
msgstr ""

# d3260189bdd049be8ca24958b0fd875d
#: c-api/object.rst:40
msgid ""
"Retrieve an attribute named *attr_name* from object *o*. Returns the "
"attribute value on success, or *NULL* on failure. This is the equivalent of "
"the Python expression ``o.attr_name``."
msgstr ""

# 1c4b2a4a73964bb8918750006501decd
#: c-api/object.rst:47
msgid ""
"Generic attribute getter function that is meant to be put into a type "
"object's ``tp_getattro`` slot.  It looks for a descriptor in the dictionary "
"of classes in the object's MRO as well as an attribute in the object's :attr:"
"`__dict__` (if present).  As outlined in :ref:`descriptors`, data "
"descriptors take preference over instance attributes, while non-data "
"descriptors don't.  Otherwise, an :exc:`AttributeError` is raised."
msgstr ""

# a895599affcf4d0d9cd32405bf8b27d9
# 63f57c46018a48d8aa0945c45d0fa28f
#: c-api/object.rst:57 c-api/object.rst:64
msgid ""
"Set the value of the attribute named *attr_name*, for object *o*, to the "
"value *v*. Returns ``-1`` on failure.  This is the equivalent of the Python "
"statement ``o.attr_name = v``."
msgstr ""

# b20de1532c7c4e04adf186df7cfb4b38
#: c-api/object.rst:71
msgid ""
"Generic attribute setter function that is meant to be put into a type "
"object's ``tp_setattro`` slot.  It looks for a data descriptor in the "
"dictionary of classes in the object's MRO, and if found it takes preference "
"over setting the attribute in the instance dictionary. Otherwise, the "
"attribute is set in the object's :attr:`__dict__` (if present).  Otherwise, "
"an :exc:`AttributeError` is raised and ``-1`` is returned."
msgstr ""

# 36360732d7ec4b18a51a1c0456bc2d2f
# fddc97ab96034bf992ef4079cadf5f19
#: c-api/object.rst:81 c-api/object.rst:87
msgid ""
"Delete attribute named *attr_name*, for object *o*. Returns ``-1`` on "
"failure. This is the equivalent of the Python statement ``del o.attr_name``."
msgstr ""

# 04ed24bf9a76450e927fdae9f70951e8
#: c-api/object.rst:93
msgid ""
"Compare the values of *o1* and *o2* using the operation specified by *opid*, "
"which must be one of :const:`Py_LT`, :const:`Py_LE`, :const:`Py_EQ`, :const:"
"`Py_NE`, :const:`Py_GT`, or :const:`Py_GE`, corresponding to ``<``, ``<=``, "
"``==``, ``!=``, ``>``, or ``>=`` respectively. This is the equivalent of the "
"Python expression ``o1 op o2``, where ``op`` is the operator corresponding "
"to *opid*. Returns the value of the comparison on success, or *NULL* on "
"failure."
msgstr ""

# 9b23c2357a2d4de8b7405adbf43adf5e
#: c-api/object.rst:103
msgid ""
"Compare the values of *o1* and *o2* using the operation specified by *opid*, "
"which must be one of :const:`Py_LT`, :const:`Py_LE`, :const:`Py_EQ`, :const:"
"`Py_NE`, :const:`Py_GT`, or :const:`Py_GE`, corresponding to ``<``, ``<=``, "
"``==``, ``!=``, ``>``, or ``>=`` respectively. Returns ``-1`` on error, "
"``0`` if the result is false, ``1`` otherwise. This is the equivalent of the "
"Python expression ``o1 op o2``, where ``op`` is the operator corresponding "
"to *opid*."
msgstr ""

# 43a042a8d7724cefa545801db1d86659
#: c-api/object.rst:112
msgid ""
"If *o1* and *o2* are the same object, :c:func:`PyObject_RichCompareBool` "
"will always return ``1`` for :const:`Py_EQ` and ``0`` for :const:`Py_NE`."
msgstr ""

# 6b4b4f414ede4f2f9da5f68e0ae00e78
#: c-api/object.rst:119
msgid ""
"Compute a string representation of object *o*.  Returns the string "
"representation on success, *NULL* on failure.  This is the equivalent of the "
"Python expression ``repr(o)``.  Called by the :func:`repr` built-in function."
msgstr ""

# c5eaeb24af91408991c8162e1e8eb8c0
#: c-api/object.rst:128
msgid ""
"As :c:func:`PyObject_Repr`, compute a string representation of object *o*, "
"but escape the non-ASCII characters in the string returned by :c:func:"
"`PyObject_Repr` with ``\\x``, ``\\u`` or ``\\U`` escapes.  This generates a "
"string similar to that returned by :c:func:`PyObject_Repr` in Python 2. "
"Called by the :func:`ascii` built-in function."
msgstr ""

# 53a201e8543442dea0d5eeb84e3c9f39
#: c-api/object.rst:139
msgid ""
"Compute a string representation of object *o*.  Returns the string "
"representation on success, *NULL* on failure.  This is the equivalent of the "
"Python expression ``str(o)``.  Called by the :func:`str` built-in function "
"and, therefore, by the :func:`print` function."
msgstr ""

# 7644097216474c6abeff4f94685a9ee3
#: c-api/object.rst:148
msgid ""
"Compute a bytes representation of object *o*.  *NULL* is returned on failure "
"and a bytes object on success.  This is equivalent to the Python expression "
"``bytes(o)``, when *o* is not an integer.  Unlike ``bytes(o)``, a TypeError "
"is raised when *o* is an integer instead of a zero-initialized bytes object."
msgstr ""

# 463bed74409c444da94d027ef9c5f41c
#: c-api/object.rst:156
msgid ""
"Returns ``1`` if *inst* is an instance of the class *cls* or a subclass of "
"*cls*, or ``0`` if not.  On error, returns ``-1`` and sets an exception.  If "
"*cls* is a type object rather than a class object, :c:func:"
"`PyObject_IsInstance` returns ``1`` if *inst* is of type *cls*.  If *cls* is "
"a tuple, the check will be done against every entry in *cls*. The result "
"will be ``1`` when at least one of the checks returns ``1``, otherwise it "
"will be ``0``. If *inst* is not a class instance and *cls* is neither a type "
"object, nor a class object, nor a tuple, *inst* must have a :attr:"
"`__class__` attribute --- the class relationship of the value of that "
"attribute with *cls* will be used to determine the result of this function."
msgstr ""

# 08c6e65808aa4a30907969778b50f905
#: c-api/object.rst:168
msgid ""
"Subclass determination is done in a fairly straightforward way, but includes "
"a wrinkle that implementors of extensions to the class system may want to be "
"aware of.  If :class:`A` and :class:`B` are class objects, :class:`B` is a "
"subclass of :class:`A` if it inherits from :class:`A` either directly or "
"indirectly.  If either is not a class object, a more general mechanism is "
"used to determine the class relationship of the two objects.  When testing "
"if *B* is a subclass of *A*, if *A* is *B*, :c:func:`PyObject_IsSubclass` "
"returns true.  If *A* and *B* are different objects, *B*'s :attr:`__bases__` "
"attribute is searched in a depth-first fashion for *A* --- the presence of "
"the :attr:`__bases__` attribute is considered sufficient for this "
"determination."
msgstr ""

# 50bc5aaa106b48deb2d0a6280c5f661e
#: c-api/object.rst:182
msgid ""
"Returns ``1`` if the class *derived* is identical to or derived from the "
"class *cls*, otherwise returns ``0``.  In case of an error, returns ``-1``. "
"If *cls* is a tuple, the check will be done against every entry in *cls*. "
"The result will be ``1`` when at least one of the checks returns ``1``, "
"otherwise it will be ``0``. If either *derived* or *cls* is not an actual "
"class object (or tuple), this function uses the generic algorithm described "
"above."
msgstr ""

# 6e0d1598ac9e474d8c36beb33513b02a
#: c-api/object.rst:192
msgid ""
"Determine if the object *o* is callable.  Return ``1`` if the object is "
"callable and ``0`` otherwise.  This function always succeeds."
msgstr ""

# d4b12198f3dd410fa7b544f2649d4be6
#: c-api/object.rst:198
msgid ""
"Call a callable Python object *callable_object*, with arguments given by the "
"tuple *args*, and named arguments given by the dictionary *kw*. If no named "
"arguments are needed, *kw* may be *NULL*. *args* must not be *NULL*, use an "
"empty tuple if no arguments are needed. Returns the result of the call on "
"success, or *NULL* on failure.  This is the equivalent of the Python "
"expression ``callable_object(*args, **kw)``."
msgstr ""

# 27c2aac7c8a24955beceee1c37d4a04c
#: c-api/object.rst:208
msgid ""
"Call a callable Python object *callable_object*, with arguments given by the "
"tuple *args*.  If no arguments are needed, then *args* may be *NULL*.  "
"Returns the result of the call on success, or *NULL* on failure.  This is "
"the equivalent of the Python expression ``callable_object(*args)``."
msgstr ""

# ee55f24aeaa247eb883ba8fdaf464814
#: c-api/object.rst:216
msgid ""
"Call a callable Python object *callable*, with a variable number of C "
"arguments. The C arguments are described using a :c:func:`Py_BuildValue` "
"style format string.  The format may be *NULL*, indicating that no arguments "
"are provided. Returns the result of the call on success, or *NULL* on "
"failure.  This is the equivalent of the Python expression "
"``callable(*args)``. Note that if you only pass :c:type:`PyObject \\*` "
"args, :c:func:`PyObject_CallFunctionObjArgs` is a faster alternative."
msgstr ""

# 006bb6370f5745b6b87b3c16743e9ebb
#: c-api/object.rst:227
msgid ""
"Call the method named *method* of object *o* with a variable number of C "
"arguments.  The C arguments are described by a :c:func:`Py_BuildValue` "
"format string that should  produce a tuple.  The format may be *NULL*, "
"indicating that no arguments are provided. Returns the result of the call on "
"success, or *NULL* on failure.  This is the equivalent of the Python "
"expression ``o.method(args)``. Note that if you only pass :c:type:`PyObject "
"\\*` args, :c:func:`PyObject_CallMethodObjArgs` is a faster alternative."
msgstr ""

# a9290a70f5e541df802cf0af5876498d
#: c-api/object.rst:238
msgid ""
"Call a callable Python object *callable*, with a variable number of :c:type:"
"`PyObject\\*` arguments.  The arguments are provided as a variable number of "
"parameters followed by *NULL*. Returns the result of the call on success, or "
"*NULL* on failure."
msgstr ""

# e9626cd68be147f891850069253e11e4
#: c-api/object.rst:246
msgid ""
"Calls a method of the object *o*, where the name of the method is given as a "
"Python string object in *name*.  It is called with a variable number of :c:"
"type:`PyObject\\*` arguments.  The arguments are provided as a variable "
"number of parameters followed by *NULL*. Returns the result of the call on "
"success, or *NULL* on failure."
msgstr ""

# 38ea552211c045829aaf597d50f2d71a
#: c-api/object.rst:257
msgid ""
"Compute and return the hash value of an object *o*.  On failure, return "
"``-1``. This is the equivalent of the Python expression ``hash(o)``."
msgstr ""

# 7aa3f296ac9c4fe794e71044c494a310
#: c-api/object.rst:267
msgid ""
"Set a :exc:`TypeError` indicating that ``type(o)`` is not hashable and "
"return ``-1``. This function receives special treatment when stored in a "
"``tp_hash`` slot, allowing a type to explicitly indicate to the interpreter "
"that it is not hashable."
msgstr ""

# b4a762afe6994f8cbd98d01907c6a867
#: c-api/object.rst:275
msgid ""
"Returns ``1`` if the object *o* is considered to be true, and ``0`` "
"otherwise. This is equivalent to the Python expression ``not not o``.  On "
"failure, return ``-1``."
msgstr ""

# 75fa34710d5c4a7d9e3f9897c533a0a8
#: c-api/object.rst:282
msgid ""
"Returns ``0`` if the object *o* is considered to be true, and ``1`` "
"otherwise. This is equivalent to the Python expression ``not o``.  On "
"failure, return ``-1``."
msgstr ""

# 2946ac7d43b54630ae2751c40f7533e8
#: c-api/object.rst:291
msgid ""
"When *o* is non-*NULL*, returns a type object corresponding to the object "
"type of object *o*. On failure, raises :exc:`SystemError` and returns "
"*NULL*.  This is equivalent to the Python expression ``type(o)``. This "
"function increments the reference count of the return value. There's really "
"no reason to use this function instead of the common expression ``o-"
">ob_type``, which returns a pointer of type :c:type:`PyTypeObject\\*`, "
"except when the incremented reference count is needed."
msgstr ""

# 69194f9cb95447f1aad4828c40e17f39
#: c-api/object.rst:302
msgid ""
"Return true if the object *o* is of type *type* or a subtype of *type*.  "
"Both parameters must be non-*NULL*."
msgstr ""

# 0c63e29e787843719576d5aafb681208
#: c-api/object.rst:311
msgid ""
"Return the length of object *o*.  If the object *o* provides either the "
"sequence and mapping protocols, the sequence length is returned.  On error, "
"``-1`` is returned.  This is the equivalent to the Python expression "
"``len(o)``."
msgstr ""

# 226aa669e5d64759b0f84443023ba3f3
#: c-api/object.rst:324
msgid ""
"Map the object *key* to the value *v*.  Returns ``-1`` on failure.  This is "
"the equivalent of the Python statement ``o[key] = v``."
msgstr ""

# 4f34886f6417436ea911856297a71819
#: c-api/object.rst:330
msgid ""
"Delete the mapping for *key* from *o*.  Returns ``-1`` on failure. This is "
"the equivalent of the Python statement ``del o[key]``."
msgstr ""

# 5102cff5424e4056a19971dd27eb11be
#: c-api/object.rst:336
msgid ""
"This is equivalent to the Python expression ``dir(o)``, returning a "
"(possibly empty) list of strings appropriate for the object argument, or "
"*NULL* if there was an error.  If the argument is *NULL*, this is like the "
"Python ``dir()``, returning the names of the current locals; in this case, "
"if no execution frame is active then *NULL* is returned but :c:func:"
"`PyErr_Occurred` will return false."
msgstr ""

# ec7a008cf7a24a96af75f15884250608
#: c-api/object.rst:345
msgid ""
"This is equivalent to the Python expression ``iter(o)``. It returns a new "
"iterator for the object argument, or the object  itself if the object is "
"already an iterator.  Raises :exc:`TypeError` and returns *NULL* if the "
"object cannot be iterated."
msgstr ""

# f30cd7c5c2a347c9867247924e970e2d
#: c-api/objimpl.rst:7
msgid "Object Implementation Support"
msgstr ""

# 5f8fe9fc51cf4a159f7b000576a35ac7
#: c-api/objimpl.rst:9
msgid ""
"This chapter describes the functions, types, and macros used when defining "
"new object types."
msgstr ""

# 27a1fd44e0fc4ccdbd04dd914e648839
#: c-api/refcounting.rst:8
msgid "Reference Counting"
msgstr ""

# b2dbe695a1c346e78874017fa2877674
#: c-api/refcounting.rst:10
msgid ""
"The macros in this section are used for managing reference counts of Python "
"objects."
msgstr ""

# 2e9bd9f9d3b64c808b1739777fb7804b
#: c-api/refcounting.rst:16
msgid ""
"Increment the reference count for object *o*.  The object must not be "
"*NULL*; if you aren't sure that it isn't *NULL*, use :c:func:`Py_XINCREF`."
msgstr ""

# a30ba2b307fa485c8c128f2bc309d781
#: c-api/refcounting.rst:22
msgid ""
"Increment the reference count for object *o*.  The object may be *NULL*, in "
"which case the macro has no effect."
msgstr ""

# d2a5ad0385ea45478aff0cdec04bc3d5
#: c-api/refcounting.rst:28
msgid ""
"Decrement the reference count for object *o*.  The object must not be "
"*NULL*; if you aren't sure that it isn't *NULL*, use :c:func:`Py_XDECREF`.  "
"If the reference count reaches zero, the object's type's deallocation "
"function (which must not be *NULL*) is invoked."
msgstr ""

# fdd0467d1cca425db7300128b589ba3b
#: c-api/refcounting.rst:35
msgid ""
"The deallocation function can cause arbitrary Python code to be invoked (e."
"g. when a class instance with a :meth:`__del__` method is deallocated).  "
"While exceptions in such code are not propagated, the executed code has free "
"access to all Python global variables.  This means that any object that is "
"reachable from a global variable should be in a consistent state before :c:"
"func:`Py_DECREF` is invoked.  For example, code to delete an object from a "
"list should copy a reference to the deleted object in a temporary variable, "
"update the list data structure, and then call :c:func:`Py_DECREF` for the "
"temporary variable."
msgstr ""

# 60662192ba7a4a2fa7ee022fdda9300f
#: c-api/refcounting.rst:47
msgid ""
"Decrement the reference count for object *o*.  The object may be *NULL*, in "
"which case the macro has no effect; otherwise the effect is the same as for :"
"c:func:`Py_DECREF`, and the same warning applies."
msgstr ""

# e7d9678e430847c9a049b46c0367d734
#: c-api/refcounting.rst:54
msgid ""
"Decrement the reference count for object *o*.  The object may be *NULL*, in "
"which case the macro has no effect; otherwise the effect is the same as for :"
"c:func:`Py_DECREF`, except that the argument is also set to *NULL*.  The "
"warning for :c:func:`Py_DECREF` does not apply with respect to the object "
"passed because the macro carefully uses a temporary variable and sets the "
"argument to *NULL* before decrementing its reference count."
msgstr ""

# 9531c01e864d4804a8ac00fd9915e75e
#: c-api/refcounting.rst:61
msgid ""
"It is a good idea to use this macro whenever decrementing the value of a "
"variable that might be traversed during garbage collection."
msgstr ""

# b754a848066a4fa3ab59caa0cf520a73
#: c-api/refcounting.rst:65
msgid ""
"The following functions are for runtime dynamic embedding of Python: "
"``Py_IncRef(PyObject *o)``, ``Py_DecRef(PyObject *o)``. They are simply "
"exported function versions of :c:func:`Py_XINCREF` and :c:func:`Py_XDECREF`, "
"respectively."
msgstr ""

# 428f8ba27953453bbb6892f02e7e6942
#: c-api/refcounting.rst:70
msgid ""
"The following functions or macros are only for use within the interpreter "
"core: :c:func:`_Py_Dealloc`, :c:func:`_Py_ForgetReference`, :c:func:"
"`_Py_NewReference`, as well as the global variable :c:data:`_Py_RefTotal`."
msgstr ""

# 35d330e61a1146199800b97c2fb45f64
#: c-api/reflection.rst:6
msgid "Reflection"
msgstr ""

# 508a4aa562234849903ad5d28254c7fd
#: c-api/reflection.rst:10
msgid ""
"Return a dictionary of the builtins in the current execution frame, or the "
"interpreter of the thread state if no frame is currently executing."
msgstr ""

# 044c197fc9e546ca9c09dfb5f7232839
#: c-api/reflection.rst:16
msgid ""
"Return a dictionary of the local variables in the current execution frame, "
"or *NULL* if no frame is currently executing."
msgstr ""

# ad73f71215fd4ea49f469bf7fe1ad311
#: c-api/reflection.rst:22
msgid ""
"Return a dictionary of the global variables in the current execution frame, "
"or *NULL* if no frame is currently executing."
msgstr ""

# 23aa66525edd45539968bddac8437f64
#: c-api/reflection.rst:28
msgid ""
"Return the current thread state's frame, which is *NULL* if no frame is "
"currently executing."
msgstr ""

# 6256303e63be483a8955412e2658d6bf
#: c-api/reflection.rst:34
msgid "Return the line number that *frame* is currently executing."
msgstr ""

# 8f4ae5918c1c4b48b23c7603a5587fde
#: c-api/reflection.rst:39
msgid ""
"Return the name of *func* if it is a function, class or instance object, "
"else the name of *func*\\s type."
msgstr ""

# 9695fb1847274b3ea343eb6187b3f81b
#: c-api/reflection.rst:45
msgid ""
"Return a description string, depending on the type of *func*. Return values "
"include \"()\" for functions and methods, \" constructor\", \" instance\", "
"and \" object\".  Concatenated with the result of :c:func:"
"`PyEval_GetFuncName`, the result will be a description of *func*."
msgstr ""

# aac795a4f61f41459ae821baf2ee72e5
#: c-api/sequence.rst:6
msgid "Sequence Protocol"
msgstr ""

# 5704f7f20efd4b16a285749197ca3514
#: c-api/sequence.rst:11
msgid ""
"Return ``1`` if the object provides sequence protocol, and ``0`` otherwise. "
"This function always succeeds."
msgstr ""

# 35e4571dcec94af2bdf9ed1040a516f7
#: c-api/sequence.rst:20
msgid ""
"Returns the number of objects in sequence *o* on success, and ``-1`` on "
"failure. For objects that do not provide sequence protocol, this is "
"equivalent to the Python expression ``len(o)``."
msgstr ""

# 11e147dfcbc54a579e011e3834089be1
#: c-api/sequence.rst:27
msgid ""
"Return the concatenation of *o1* and *o2* on success, and *NULL* on failure. "
"This is the equivalent of the Python expression ``o1 + o2``."
msgstr ""

# 36a70f222f114e23baccfeed41188e4d
#: c-api/sequence.rst:33
msgid ""
"Return the result of repeating sequence object *o* *count* times, or *NULL* "
"on failure.  This is the equivalent of the Python expression ``o * count``."
msgstr ""

# 98dc46451461425a9ebafeeae630bc23
#: c-api/sequence.rst:39
msgid ""
"Return the concatenation of *o1* and *o2* on success, and *NULL* on failure. "
"The operation is done *in-place* when *o1* supports it.  This is the "
"equivalent of the Python expression ``o1 += o2``."
msgstr ""

# 76908e92a9eb48a0878a07c4cd4f12ca
#: c-api/sequence.rst:46
msgid ""
"Return the result of repeating sequence object *o* *count* times, or *NULL* "
"on failure.  The operation is done *in-place* when *o* supports it.  This is "
"the equivalent of the Python expression ``o *= count``."
msgstr ""

# d7e0b32794f64d6dbad2721ac502ee91
#: c-api/sequence.rst:53
msgid ""
"Return the *i*\\ th element of *o*, or *NULL* on failure. This is the "
"equivalent of the Python expression ``o[i]``."
msgstr ""

# d0e939f84794433bbbef26d2a87d982f
#: c-api/sequence.rst:59
msgid ""
"Return the slice of sequence object *o* between *i1* and *i2*, or *NULL* on "
"failure. This is the equivalent of the Python expression ``o[i1:i2]``."
msgstr ""

# 2f90e47d7d5d450e9bd8e12e64e5adef
#: c-api/sequence.rst:65
msgid ""
"Assign object *v* to the *i*\\ th element of *o*.  Returns ``-1`` on "
"failure.  This is the equivalent of the Python statement ``o[i] = v``.  This "
"function *does not* steal a reference to *v*."
msgstr ""

# 375b989f30264692bd58d3740796e5ed
#: c-api/sequence.rst:72
msgid ""
"Delete the *i*\\ th element of object *o*.  Returns ``-1`` on failure.  This "
"is the equivalent of the Python statement ``del o[i]``."
msgstr ""

# 1ad8cc15a9784e57a0d7823b1c7b556f
#: c-api/sequence.rst:78
msgid ""
"Assign the sequence object *v* to the slice in sequence object *o* from *i1* "
"to *i2*.  This is the equivalent of the Python statement ``o[i1:i2] = v``."
msgstr ""

# 5d7af758665c45469c09ebf9edd100ea
#: c-api/sequence.rst:84
msgid ""
"Delete the slice in sequence object *o* from *i1* to *i2*.  Returns ``-1`` "
"on failure.  This is the equivalent of the Python statement ``del o[i1:i2]``."
msgstr ""

# 5dc7ae7ae7544a81ae1e24f23832e7d6
#: c-api/sequence.rst:90
msgid ""
"Return the number of occurrences of *value* in *o*, that is, return the "
"number of keys for which ``o[key] == value``.  On failure, return ``-1``.  "
"This is equivalent to the Python expression ``o.count(value)``."
msgstr ""

# a4cb927d64fb4e8cbc7b65d277498b4f
#: c-api/sequence.rst:97
msgid ""
"Determine if *o* contains *value*.  If an item in *o* is equal to *value*, "
"return ``1``, otherwise return ``0``. On error, return ``-1``.  This is "
"equivalent to the Python expression ``value in o``."
msgstr ""

# 78998897ce9142189ec716ef39ddf87e
#: c-api/sequence.rst:104
msgid ""
"Return the first index *i* for which ``o[i] == value``.  On error, return "
"``-1``.    This is equivalent to the Python expression ``o.index(value)``."
msgstr ""

# 91708b4fc13344c99528c7fc956f737d
#: c-api/sequence.rst:110
msgid ""
"Return a list object with the same contents as the arbitrary sequence *o*.  "
"The returned list is guaranteed to be new."
msgstr ""

# b7d86a5b6b8c4721b20e4086383a25e1
#: c-api/sequence.rst:118
msgid ""
"Return a tuple object with the same contents as the arbitrary sequence *o* "
"or *NULL* on failure.  If *o* is a tuple, a new reference will be returned, "
"otherwise a tuple will be constructed with the appropriate contents.  This "
"is equivalent to the Python expression ``tuple(o)``."
msgstr ""

# 0fe641d3217c4f039d5cbc444478b0b6
#: c-api/sequence.rst:126
msgid ""
"Returns the sequence *o* as a tuple, unless it is already a tuple or list, "
"in which case *o* is returned.  Use :c:func:`PySequence_Fast_GET_ITEM` to "
"access the members of the result.  Returns *NULL* on failure.  If the object "
"is not a sequence, raises :exc:`TypeError` with *m* as the message text."
msgstr ""

# 16f4d80c369b4221ad73ab6fa6eb66cf
#: c-api/sequence.rst:134
msgid ""
"Return the *i*\\ th element of *o*, assuming that *o* was returned by :c:"
"func:`PySequence_Fast`, *o* is not *NULL*, and that *i* is within bounds."
msgstr ""

# 926d0a01dc6244ab88f23b4bec029bfb
#: c-api/sequence.rst:140
msgid ""
"Return the underlying array of PyObject pointers.  Assumes that *o* was "
"returned by :c:func:`PySequence_Fast` and *o* is not *NULL*."
msgstr ""

# 6da05e4d4f2a41118476f695143134be
#: c-api/sequence.rst:143
msgid ""
"Note, if a list gets resized, the reallocation may relocate the items array. "
"So, only use the underlying array pointer in contexts where the sequence "
"cannot change."
msgstr ""

# c8718a9f33c54e5ba77241d72f45e9fc
#: c-api/sequence.rst:150
msgid ""
"Return the *i*\\ th element of *o* or *NULL* on failure. Macro form of :c:"
"func:`PySequence_GetItem` but without checking that :c:func:"
"`PySequence_Check` on *o* is true and without adjustment for negative "
"indices."
msgstr ""

# 95353abb542c431393e701cb924415f0
#: c-api/sequence.rst:158
msgid ""
"Returns the length of *o*, assuming that *o* was returned by :c:func:"
"`PySequence_Fast` and that *o* is not *NULL*.  The size can also be gotten "
"by calling :c:func:`PySequence_Size` on *o*, but :c:func:"
"`PySequence_Fast_GET_SIZE` is faster because it can assume *o* is a list or "
"tuple."
msgstr ""

# 83fe1dc0172247d3aae23cf28bd51fb7
#: c-api/set.rst:6
msgid "Set Objects"
msgstr ""

# bec990d82dc44dddbc642ff2bb562fd6
#: c-api/set.rst:15
msgid ""
"This section details the public API for :class:`set` and :class:`frozenset` "
"objects.  Any functionality not listed below is best accessed using the "
"either the abstract object protocol (including :c:func:"
"`PyObject_CallMethod`, :c:func:`PyObject_RichCompareBool`, :c:func:"
"`PyObject_Hash`, :c:func:`PyObject_Repr`, :c:func:`PyObject_IsTrue`, :c:func:"
"`PyObject_Print`, and :c:func:`PyObject_GetIter`) or the abstract number "
"protocol (including :c:func:`PyNumber_And`, :c:func:`PyNumber_Subtract`, :c:"
"func:`PyNumber_Or`, :c:func:`PyNumber_Xor`, :c:func:`PyNumber_InPlaceAnd`, :"
"c:func:`PyNumber_InPlaceSubtract`, :c:func:`PyNumber_InPlaceOr`, and :c:func:"
"`PyNumber_InPlaceXor`)."
msgstr ""

# c1a2ef9bf18b45538f0440e4de6e3311
#: c-api/set.rst:29
msgid ""
"This subtype of :c:type:`PyObject` is used to hold the internal data for "
"both :class:`set` and :class:`frozenset` objects.  It is like a :c:type:"
"`PyDictObject` in that it is a fixed size for small sets (much like tuple "
"storage) and will point to a separate, variable sized block of memory for "
"medium and large sized sets (much like list storage). None of the fields of "
"this structure should be considered public and are subject to change.  All "
"access should be done through the documented API rather than by manipulating "
"the values in the structure."
msgstr ""

# efb1714bed67497abd2b41d27dbcaac1
#: c-api/set.rst:40
msgid ""
"This is an instance of :c:type:`PyTypeObject` representing the Python :class:"
"`set` type."
msgstr ""

# 7189b3876dfa43c782f16ae09602167b
#: c-api/set.rst:46
msgid ""
"This is an instance of :c:type:`PyTypeObject` representing the Python :class:"
"`frozenset` type."
msgstr ""

# 5a419a7e58944dd5b67f3fa6e789c7d6
#: c-api/set.rst:49
msgid ""
"The following type check macros work on pointers to any Python object. "
"Likewise, the constructor functions work with any iterable Python object."
msgstr ""

# 33c4840ff8fa4427aead9225f67b2348
#: c-api/set.rst:55
msgid ""
"Return true if *p* is a :class:`set` object or an instance of a subtype."
msgstr ""

# 2e49903d95f546f2902d720908ad2a49
#: c-api/set.rst:59
msgid ""
"Return true if *p* is a :class:`frozenset` object or an instance of a "
"subtype."
msgstr ""

# 9dfa65e0c32a4d969b228066d586367e
#: c-api/set.rst:64
msgid ""
"Return true if *p* is a :class:`set` object, a :class:`frozenset` object, or "
"an instance of a subtype."
msgstr ""

# 5a4c5923782b4d2c9c79acec298c3c55
#: c-api/set.rst:70
msgid ""
"Return true if *p* is a :class:`set` object or a :class:`frozenset` object "
"but not an instance of a subtype."
msgstr ""

# 71ddcf7e427d4a59941cf9862ed8ade9
#: c-api/set.rst:76
msgid ""
"Return true if *p* is a :class:`frozenset` object but not an instance of a "
"subtype."
msgstr ""

# bdbb1a21e0944a7498a0f0f203d109d4
#: c-api/set.rst:82
msgid ""
"Return a new :class:`set` containing objects returned by the *iterable*.  "
"The *iterable* may be *NULL* to create a new empty set.  Return the new set "
"on success or *NULL* on failure.  Raise :exc:`TypeError` if *iterable* is "
"not actually iterable.  The constructor is also useful for copying a set "
"(``c=set(s)``)."
msgstr ""

# a84b00b0dc354036b7eaf4a612b395c7
#: c-api/set.rst:91
msgid ""
"Return a new :class:`frozenset` containing objects returned by the "
"*iterable*. The *iterable* may be *NULL* to create a new empty frozenset.  "
"Return the new set on success or *NULL* on failure.  Raise :exc:`TypeError` "
"if *iterable* is not actually iterable."
msgstr ""

# b5715acd88114ff792a702d574cddb2e
#: c-api/set.rst:97
msgid ""
"The following functions and macros are available for instances of :class:"
"`set` or :class:`frozenset` or instances of their subtypes."
msgstr ""

# 9ccfefc3619147e684823669e7a703d4
#: c-api/set.rst:105
msgid ""
"Return the length of a :class:`set` or :class:`frozenset` object. Equivalent "
"to ``len(anyset)``.  Raises a :exc:`PyExc_SystemError` if *anyset* is not a :"
"class:`set`, :class:`frozenset`, or an instance of a subtype."
msgstr ""

# 428d8b04d99c4549b18f7337479a404d
#: c-api/set.rst:112
msgid "Macro form of :c:func:`PySet_Size` without error checking."
msgstr ""

# 1bbdb140b38446de90e345063ff2f08d
#: c-api/set.rst:117
msgid ""
"Return 1 if found, 0 if not found, and -1 if an error is encountered.  "
"Unlike the Python :meth:`__contains__` method, this function does not "
"automatically convert unhashable sets into temporary frozensets.  Raise a :"
"exc:`TypeError` if the *key* is unhashable. Raise :exc:`PyExc_SystemError` "
"if *anyset* is not a :class:`set`, :class:`frozenset`, or an instance of a "
"subtype."
msgstr ""

# f8d45154312641939b250496a8b452bd
#: c-api/set.rst:126
msgid ""
"Add *key* to a :class:`set` instance.  Also works with :class:`frozenset` "
"instances (like :c:func:`PyTuple_SetItem` it can be used to fill-in the "
"values of brand new frozensets before they are exposed to other code).  "
"Return 0 on success or -1 on failure. Raise a :exc:`TypeError` if the *key* "
"is unhashable. Raise a :exc:`MemoryError` if there is no room to grow.  "
"Raise a :exc:`SystemError` if *set* is an not an instance of :class:`set` or "
"its subtype."
msgstr ""

# 7c6dd37432274bcc9e295f32a0567e1c
#: c-api/set.rst:135
msgid ""
"The following functions are available for instances of :class:`set` or its "
"subtypes but not for instances of :class:`frozenset` or its subtypes."
msgstr ""

# 1486c584720e4b84a2a8e0a47e7c69bf
#: c-api/set.rst:141
msgid ""
"Return 1 if found and removed, 0 if not found (no action taken), and -1 if "
"an error is encountered.  Does not raise :exc:`KeyError` for missing keys.  "
"Raise a :exc:`TypeError` if the *key* is unhashable.  Unlike the Python :"
"meth:`discard` method, this function does not automatically convert "
"unhashable sets into temporary frozensets. Raise :exc:`PyExc_SystemError` if "
"*set* is an not an instance of :class:`set` or its subtype."
msgstr ""

# 2cca911a8eb74551a7cad56f3d60cf19
#: c-api/set.rst:151
msgid ""
"Return a new reference to an arbitrary object in the *set*, and removes the "
"object from the *set*.  Return *NULL* on failure.  Raise :exc:`KeyError` if "
"the set is empty. Raise a :exc:`SystemError` if *set* is an not an instance "
"of :class:`set` or its subtype."
msgstr ""

# 67e3276b3e0841cc896f986ef7b2c712
#: c-api/set.rst:159
msgid "Empty an existing set of all elements."
msgstr ""

# dcbc8f69a33649c3b949e136a4a5b3b2
#: c-api/slice.rst:6
msgid "Slice Objects"
msgstr ""

# fc3617cea7c04e6fbeb1e5188b779f8f
#: c-api/slice.rst:11
msgid ""
"The type object for slice objects.  This is the same as :class:`slice` in "
"the Python layer."
msgstr ""

# 5bb19fa137cd41798957999c1252ce1b
#: c-api/slice.rst:17
msgid "Return true if *ob* is a slice object; *ob* must not be *NULL*."
msgstr ""

# 38831a10c8924beabbc97b8a36ad0fde
#: c-api/slice.rst:22
msgid ""
"Return a new slice object with the given values.  The *start*, *stop*, and "
"*step* parameters are used as the values of the slice object attributes of "
"the same names.  Any of the values may be *NULL*, in which case the ``None`` "
"will be used for the corresponding attribute.  Return *NULL* if the new "
"object could not be allocated."
msgstr ""

# 0ae1e0bc29ac4fb3aed8fca39b87a67b
#: c-api/slice.rst:31
msgid ""
"Retrieve the start, stop and step indices from the slice object *slice*, "
"assuming a sequence of length *length*. Treats indices greater than *length* "
"as errors."
msgstr ""

# 4850257241e84802b6950664b3618164
#: c-api/slice.rst:35
msgid ""
"Returns 0 on success and -1 on error with no exception set (unless one of "
"the indices was not :const:`None` and failed to be converted to an integer, "
"in which case -1 is returned with an exception set)."
msgstr ""

# 601f3c23877b4e868f04d68789cf085d
#: c-api/slice.rst:39
msgid "You probably do not want to use this function."
msgstr ""

# 7bf39ffa96064d9896e8563769d569a0
#: c-api/slice.rst:48
msgid ""
"Usable replacement for :c:func:`PySlice_GetIndices`.  Retrieve the start, "
"stop, and step indices from the slice object *slice* assuming a sequence of "
"length *length*, and store the length of the slice in *slicelength*.  Out of "
"bounds indices are clipped in a manner consistent with the handling of "
"normal slices."
msgstr ""

# bc0a9fd905a74828a4e9c42b6c7027a8
#: c-api/slice.rst:54
msgid "Returns 0 on success and -1 on error with exception set."
msgstr ""

# b42b049e84b84746b4b39865ce246aa8
#: c-api/structures.rst:6
msgid "Common Object Structures"
msgstr ""

# 26eeb30e9884418e9c81e6c1fe4970e3
#: c-api/structures.rst:8
msgid ""
"There are a large number of structures which are used in the definition of "
"object types for Python.  This section describes these structures and how "
"they are used."
msgstr ""

# 1a13bec2f15447d6bb636a3fd79270cf
#: c-api/structures.rst:12
msgid ""
"All Python objects ultimately share a small number of fields at the "
"beginning of the object's representation in memory.  These are represented "
"by the :c:type:`PyObject` and :c:type:`PyVarObject` types, which are "
"defined, in turn, by the expansions of some macros also used, whether "
"directly or indirectly, in the definition of all other Python objects."
msgstr ""

# cd2c342bd2a647c5bb08482c849dc612
#: c-api/structures.rst:21
msgid ""
"All object types are extensions of this type.  This is a type which contains "
"the information Python needs to treat a pointer to an object as an object.  "
"In a normal \"release\" build, it contains only the object's reference count "
"and a pointer to the corresponding type object.  It corresponds to the "
"fields defined by the expansion of the ``PyObject_HEAD`` macro."
msgstr ""

# 161188e7daa04026b341604c46eaf6b3
#: c-api/structures.rst:31
msgid ""
"This is an extension of :c:type:`PyObject` that adds the :attr:`ob_size` "
"field.  This is only used for objects that have some notion of *length*. "
"This type does not often appear in the Python/C API.  It corresponds to the "
"fields defined by the expansion of the ``PyObject_VAR_HEAD`` macro."
msgstr ""

# 3a7670e0d74143d882fc2a90380f8108
#: c-api/structures.rst:36
msgid ""
"These macros are used in the definition of :c:type:`PyObject` and :c:type:"
"`PyVarObject`:"
msgstr ""

# 72c2255d5b164d67ad0695c93979e972
#: c-api/structures.rst:43
msgid ""
"This is a macro which expands to the declarations of the fields of the :c:"
"type:`PyObject` type; it is used when declaring new types which represent "
"objects without a varying length.  The specific fields it expands to depend "
"on the definition of :c:macro:`Py_TRACE_REFS`.  By default, that macro is "
"not defined, and :c:macro:`PyObject_HEAD` expands to::"
msgstr ""

# d90e8eab7d1b45e782c7cc4da9723eb3
#: c-api/structures.rst:52
msgid "When :c:macro:`Py_TRACE_REFS` is defined, it expands to::"
msgstr ""

# 87a71df4607445158d745a18e8a6d3f2
#: c-api/structures.rst:61
msgid ""
"This is a macro which expands to the declarations of the fields of the :c:"
"type:`PyVarObject` type; it is used when declaring new types which represent "
"objects with a length that varies from instance to instance. This macro "
"always expands to::"
msgstr ""

# 0995cedc63bd4f36861c261632eb38ea
#: c-api/structures.rst:69
msgid ""
"Note that :c:macro:`PyObject_HEAD` is part of the expansion, and that its "
"own expansion varies depending on the definition of :c:macro:`Py_TRACE_REFS`."
msgstr ""

# ab0c886e6c8d4c58885e6e460c9bf9be
#: c-api/structures.rst:75
msgid ""
"This is a macro which expands to initialization values for a new :c:type:"
"`PyObject` type.  This macro expands to::"
msgstr ""

# 1902a19b742446f5aa32d4c8ac9a7075
#: c-api/structures.rst:84
msgid ""
"This is a macro which expands to initialization values for a new :c:type:"
"`PyVarObject` type, including the :attr:`ob_size` field. This macro expands "
"to::"
msgstr ""

# ec3868edf2df4397a57404acea7cb835
#: c-api/structures.rst:94
msgid ""
"Type of the functions used to implement most Python callables in C. "
"Functions of this type take two :c:type:`PyObject\\*` parameters and return "
"one such value.  If the return value is *NULL*, an exception shall have been "
"set.  If not *NULL*, the return value is interpreted as the return value of "
"the function as exposed in Python.  The function must return a new reference."
msgstr ""

# 02ad920b19e944fbbe78d32eb12af662
#: c-api/structures.rst:104
msgid ""
"Type of the functions used to implement Python callables in C that take "
"keyword arguments: they take three :c:type:`PyObject\\*` parameters and "
"return one such value.  See :c:type:`PyCFunction` above for the meaning of "
"the return value."
msgstr ""

# f62193c55e074d34a692bc696b9604ca
#: c-api/structures.rst:112
msgid ""
"Structure used to describe a method of an extension type.  This structure "
"has four fields:"
msgstr ""

# 38a615f78a8842d29f63166f843896f0
# 32d2c93b57c64a92868818801d5df65b
#: c-api/structures.rst:116 c-api/structures.rst:228
msgid "Field"
msgstr ""

# de9d4239889244eb8712ffcdfda964e3
# 16dca3997a5c4fcba6c4ff2dd054810a
#: c-api/structures.rst:116 c-api/structures.rst:228
msgid "C Type"
msgstr ""

# 030fd4e78a524e029b18b670a2308abe
# caea23e47cdf487dbf01f82ecf8e3aa1
#: c-api/structures.rst:116 c-api/structures.rst:228
msgid "Meaning"
msgstr ""

# 52ef901eee7a4610afe01ef27b2624af
#: c-api/structures.rst:118
msgid ":attr:`ml_name`"
msgstr ""

# 88ae9efd75534acf96e2dc24ef7274b3
# f1ea429b55f84db7bc036ea88c822ac2
# fcaa7f6ebf114b2a91af01c9b8e21b88
# 0b20796232184f86ae599315e04b4f8b
# 2c60477cdf23408e858bf92a8b98fae5
#: c-api/structures.rst:118 c-api/structures.rst:126 c-api/structures.rst:230
#: c-api/structures.rst:243 c-api/structures.rst:259
msgid "char \\*"
msgstr ""

# e797251f949046fcba929d1e059e566b
#: c-api/structures.rst:118
msgid "name of the method"
msgstr ""

# 9a76e4ea81144a47b847b3452be80d19
#: c-api/structures.rst:120
msgid ":attr:`ml_meth`"
msgstr ""

# f7bd5098aee6413d80515c75abd4dd63
#: c-api/structures.rst:120
msgid "PyCFunction"
msgstr ""

# 058911b8a6ad496da2660e16a9b86b32
#: c-api/structures.rst:120
msgid "pointer to the C implementation"
msgstr ""

# a53fa85a379a468aac3180e047035bd8
#: c-api/structures.rst:123
msgid ":attr:`ml_flags`"
msgstr ""

# 0ba49039c5bd47f9971f752fd49624e8
#: c-api/structures.rst:123
msgid "flag bits indicating how the call should be constructed"
msgstr ""

# e272d3c2b0b14f42b0dcef1d3485359f
#: c-api/structures.rst:126
msgid ":attr:`ml_doc`"
msgstr ""

# cc459092962f45b4ba2015fff8ed2e84
# 34a308fdbdf54dcd9609de7af265c058
#: c-api/structures.rst:126 c-api/structures.rst:243
msgid "points to the contents of the docstring"
msgstr ""

# 7bb1a29a69b54b70927535e50b802b62
#: c-api/structures.rst:130
msgid ""
"The :attr:`ml_meth` is a C function pointer.  The functions may be of "
"different types, but they always return :c:type:`PyObject\\*`.  If the "
"function is not of the :c:type:`PyCFunction`, the compiler will require a "
"cast in the method table. Even though :c:type:`PyCFunction` defines the "
"first parameter as :c:type:`PyObject\\*`, it is common that the method "
"implementation uses a the specific C type of the *self* object."
msgstr ""

# 0663b5926fdb42609f777192dfe1f9dd
#: c-api/structures.rst:137
msgid ""
"The :attr:`ml_flags` field is a bitfield which can include the following "
"flags. The individual flags indicate either a calling convention or a "
"binding convention.  Of the calling convention flags, only :const:"
"`METH_VARARGS` and :const:`METH_KEYWORDS` can be combined (but note that :"
"const:`METH_KEYWORDS` alone is equivalent to ``METH_VARARGS | "
"METH_KEYWORDS``). Any of the calling convention flags can be combined with a "
"binding flag."
msgstr ""

# dee4c24d94b44b14bc417eabfdb695bf
#: c-api/structures.rst:147
msgid ""
"This is the typical calling convention, where the methods have the type :c:"
"type:`PyCFunction`. The function expects two :c:type:`PyObject\\*` values. "
"The first one is the *self* object for methods; for module functions, it is "
"the module object.  The second parameter (often called *args*) is a tuple "
"object representing all arguments. This parameter is typically processed "
"using :c:func:`PyArg_ParseTuple` or :c:func:`PyArg_UnpackTuple`."
msgstr ""

# 0155007db4374e1e845b6762b38a2fa0
#: c-api/structures.rst:157
msgid ""
"Methods with these flags must be of type :c:type:`PyCFunctionWithKeywords`. "
"The function expects three parameters: *self*, *args*, and a dictionary of "
"all the keyword arguments.  The flag is typically combined with :const:"
"`METH_VARARGS`, and the parameters are typically processed using :c:func:"
"`PyArg_ParseTupleAndKeywords`."
msgstr ""

# 060047e38d27488b8fd2682edae3e0f8
#: c-api/structures.rst:166
msgid ""
"Methods without parameters don't need to check whether arguments are given "
"if they are listed with the :const:`METH_NOARGS` flag.  They need to be of "
"type :c:type:`PyCFunction`.  The first parameter is typically named *self* "
"and will hold a reference to the module or object instance.  In all cases "
"the second parameter will be *NULL*."
msgstr ""

# 35fafcc280c043e0b941031bac9a9056
#: c-api/structures.rst:175
msgid ""
"Methods with a single object argument can be listed with the :const:`METH_O` "
"flag, instead of invoking :c:func:`PyArg_ParseTuple` with a ``\"O\"`` "
"argument. They have the type :c:type:`PyCFunction`, with the *self* "
"parameter, and a :c:type:`PyObject\\*` parameter representing the single "
"argument."
msgstr ""

# 8d253ac327fe4616b44f6f79be1db740
#: c-api/structures.rst:181
msgid ""
"These two constants are not used to indicate the calling convention but the "
"binding when use with methods of classes.  These may not be used for "
"functions defined for modules.  At most one of these flags may be set for "
"any given method."
msgstr ""

# 30950fc5b7a94041bf2ded2880b48602
#: c-api/structures.rst:191
msgid ""
"The method will be passed the type object as the first parameter rather than "
"an instance of the type.  This is used to create *class methods*, similar to "
"what is created when using the :func:`classmethod` built-in function."
msgstr ""

# 17b25c8897604e4aae88a9358c87d850
#: c-api/structures.rst:201
msgid ""
"The method will be passed *NULL* as the first parameter rather than an "
"instance of the type.  This is used to create *static methods*, similar to "
"what is created when using the :func:`staticmethod` built-in function."
msgstr ""

# 5eb2401e31164e2795e6c408cad0435b
#: c-api/structures.rst:205
msgid ""
"One other constant controls whether a method is loaded in place of another "
"definition with the same method name."
msgstr ""

# 473cd1d465c441c3ad030abcedf9a704
#: c-api/structures.rst:211
msgid ""
"The method will be loaded in place of existing definitions.  Without "
"*METH_COEXIST*, the default is to skip repeated definitions.  Since slot "
"wrappers are loaded before the method table, the existence of a "
"*sq_contains* slot, for example, would generate a wrapped method named :meth:"
"`__contains__` and preclude the loading of a corresponding PyCFunction with "
"the same name.  With the flag defined, the PyCFunction will be loaded in "
"place of the wrapper object and will co-exist with the slot.  This is "
"helpful because calls to PyCFunctions are optimized more than wrapper object "
"calls."
msgstr ""

# 4357432c7d6a4805b8fadcf6c84ad86d
#: c-api/structures.rst:224
msgid ""
"Structure which describes an attribute of a type which corresponds to a C "
"struct member.  Its fields are:"
msgstr ""

# 22c8701cc4464b959616fc8800261748
#: c-api/structures.rst:230
msgid ":attr:`name`"
msgstr ""

# f4532bb3e692432c92d07468730d827a
#: c-api/structures.rst:230
msgid "name of the member"
msgstr ""

# 1ef0f9f079494de883e655e14f1f2678
#: c-api/structures.rst:232
msgid ":attr:`type`"
msgstr ""

# 749e9cc227f4472fb5b77c92e8a21057
#: c-api/structures.rst:232
msgid "the type of the member in the C struct"
msgstr ""

# 315df01c8ae54e53bafb4bc870727d15
#: c-api/structures.rst:235
msgid ":attr:`offset`"
msgstr ""

# ddf5334f4c454b1b95252ef3d6cc9947
#: c-api/structures.rst:235
msgid ""
"the offset in bytes that the member is located on the type's object struct"
msgstr ""

# 067bd651fc5945a3afe439d3d4f5c8ca
#: c-api/structures.rst:239
msgid ":attr:`flags`"
msgstr ""

# 30597dd5a15c4ffaaae38e95ab89bf77
#: c-api/structures.rst:239
msgid "flag bits indicating if the field should be read-only or writable"
msgstr ""

# 7f03eabcb9174fd884e7b69184ff8916
#: c-api/structures.rst:243
msgid ":attr:`doc`"
msgstr ""

# a1b46a1dd97a4dcdacb71f7b93c55795
#: c-api/structures.rst:247
msgid ""
":attr:`type` can be one of many ``T_`` macros corresponding to various C "
"types.  When the member is accessed in Python, it will be converted to the "
"equivalent Python type."
msgstr ""

# b4cabb3e970c48e99d33b6529dd1eb4f
#: c-api/structures.rst:252
msgid "Macro name"
msgstr ""

# 45cf04c6cfa9409186f187c482f950db
#: c-api/structures.rst:252
msgid "C type"
msgstr ""

# c34e934a21ad47d9a6ebfe75420b33e7
#: c-api/structures.rst:254
msgid "T_SHORT"
msgstr ""

# fdbfd033072a4149b6ecd15534761319
#: c-api/structures.rst:254
msgid "short"
msgstr ""

# 0f7acee23808410199960137128709e8
#: c-api/structures.rst:255
msgid "T_INT"
msgstr ""

# 6e9c443f07cc4443b1206771f24c9b33
#: c-api/structures.rst:256
msgid "T_LONG"
msgstr ""

# 2623ab199d864da4a05d678d7568ae53
#: c-api/structures.rst:257
msgid "T_FLOAT"
msgstr ""

# 48a07f3226da480db528f268f11943bf
#: c-api/structures.rst:257
msgid "float"
msgstr ""

# c5f590a84b8c4d6397e8eea802b95a35
#: c-api/structures.rst:258
msgid "T_DOUBLE"
msgstr ""

# 530c1a31faa14a07ab3b040dd968b38a
#: c-api/structures.rst:258
msgid "double"
msgstr ""

# 02d949e0d0de4851a2749fcc2b9d4104
#: c-api/structures.rst:259
msgid "T_STRING"
msgstr ""

# a976df1b9542438581e8b657266ea4e8
#: c-api/structures.rst:260
msgid "T_OBJECT"
msgstr ""

# fe4563119b2745d78b0587ef41b4e716
# 0555d1c1c3304b0e91a00b6877d1353f
#: c-api/structures.rst:260 c-api/structures.rst:261
msgid "PyObject \\*"
msgstr ""

# 2bc0e7c3bfed43b59b181ba709034351
#: c-api/structures.rst:261
msgid "T_OBJECT_EX"
msgstr ""

# 39ad06f20ff343eba5a4ada1241bf559
#: c-api/structures.rst:262
msgid "T_CHAR"
msgstr ""

# b0f7157bd7a549d5a6a96d29946544b0
# 03d64a3970c543a68875ee0919bf1a1c
# d69e6cca738c49aeb27586f0dc3b9ab4
#: c-api/structures.rst:262 c-api/structures.rst:263 c-api/structures.rst:268
msgid "char"
msgstr ""

# 0be7b09c8bda4a5490e36439bd026778
#: c-api/structures.rst:263
msgid "T_BYTE"
msgstr ""

# d22b66a1e0ea4b28810c08866a99c818
#: c-api/structures.rst:264
msgid "T_UBYTE"
msgstr ""

# 10249305fd0f4f4988487b229ae60bf0
#: c-api/structures.rst:264
msgid "unsigned char"
msgstr ""

# 94f220908a0543c8943592f6dfd31363
#: c-api/structures.rst:265
msgid "T_UINT"
msgstr ""

# acbce108e955463ebd1ab0ec381e8736
#: c-api/structures.rst:266
msgid "T_USHORT"
msgstr ""

# e9e473f05daa4cc3b85f9b44e0aa5b6d
#: c-api/structures.rst:266
msgid "unsigned short"
msgstr ""

# 05ebd9c604404dd4ba3dc8fed9df0fa9
#: c-api/structures.rst:267
msgid "T_ULONG"
msgstr ""

# 24331beb518b426285bc2a96882103dc
#: c-api/structures.rst:268
msgid "T_BOOL"
msgstr ""

# 9312930b39234886a55915c203638695
#: c-api/structures.rst:269
msgid "T_LONGLONG"
msgstr ""

# 3037ec96ceb6460c8ea24071e3f594d2
# efec19cf870d45f3ab5c1d6306d14da0
#: c-api/structures.rst:269 c-api/unicode.rst:266
msgid "long long"
msgstr ""

# 87c7eb523566404abb2c8e14ca739e7c
#: c-api/structures.rst:270
msgid "T_ULONGLONG"
msgstr ""

# a38c2d83c2be44e8a98fd56a0b373ee7
# bcfff56c5e5948dfb113e12bbbd93c76
#: c-api/structures.rst:270 c-api/unicode.rst:269
msgid "unsigned long long"
msgstr ""

# 01d63f572e324467af8ab849d5656bf3
#: c-api/structures.rst:271
msgid "T_PYSSIZET"
msgstr ""

# 60d2f2c5cf4d4256ac655798e35dd0bb
#: c-api/structures.rst:274
msgid ""
":c:macro:`T_OBJECT` and :c:macro:`T_OBJECT_EX` differ in that :c:macro:"
"`T_OBJECT` returns ``None`` if the member is *NULL* and :c:macro:"
"`T_OBJECT_EX` raises an :exc:`AttributeError`.  Try to use :c:macro:"
"`T_OBJECT_EX` over :c:macro:`T_OBJECT` because :c:macro:`T_OBJECT_EX` "
"handles use of the :keyword:`del` statement on that attribute more correctly "
"than :c:macro:`T_OBJECT`."
msgstr ""

# aedc6f2a302146808e020aee5fa04e8a
#: c-api/structures.rst:281
msgid ""
":attr:`flags` can be 0 for write and read access or :c:macro:`READONLY` for "
"read-only access.  Using :c:macro:`T_STRING` for :attr:`type` implies :c:"
"macro:`READONLY`.  Only :c:macro:`T_OBJECT` and :c:macro:`T_OBJECT_EX` "
"members can be deleted.  (They are set to *NULL*)."
msgstr ""

# a6ae9c9c20e54f8ca9ee21d75308b31a
#: c-api/sys.rst:6
msgid "Operating System Utilities"
msgstr ""

# cfe197d460114befa849db3d90bff3dc
#: c-api/sys.rst:11
msgid ""
"Return true (nonzero) if the standard I/O file *fp* with name *filename* is "
"deemed interactive.  This is the case for files for which "
"``isatty(fileno(fp))`` is true.  If the global flag :c:data:"
"`Py_InteractiveFlag` is true, this function also returns true if the "
"*filename* pointer is *NULL* or if the name is equal to one of the strings "
"``'<stdin>'`` or ``'???'``."
msgstr ""

# 1e87ba14cbb34823991a0da1c63510a7
#: c-api/sys.rst:20
msgid ""
"Function to update some internal state after a process fork; this should be "
"called in the new process if the Python interpreter will continue to be "
"used. If a new executable is loaded into the new process, this function does "
"not need to be called."
msgstr ""

# acfa8e5ed2bb4e57b53b8c1e953dc539
#: c-api/sys.rst:28
msgid ""
"Return true when the interpreter runs out of stack space.  This is a "
"reliable check, but is only available when :const:`USE_STACKCHECK` is "
"defined (currently on Windows using the Microsoft Visual C++ compiler).  :"
"const:`USE_STACKCHECK` will be defined automatically; you should never "
"change the definition in your own code."
msgstr ""

# a659829c9f374b928738fe9ad28a5422
#: c-api/sys.rst:37
msgid ""
"Return the current signal handler for signal *i*.  This is a thin wrapper "
"around either :c:func:`sigaction` or :c:func:`signal`.  Do not call those "
"functions directly! :c:type:`PyOS_sighandler_t` is a typedef alias for :c:"
"type:`void (\\*)(int)`."
msgstr ""

# a4f73192b04a4f8db801482ee6b926e6
#: c-api/sys.rst:45
msgid ""
"Set the signal handler for signal *i* to be *h*; return the old signal "
"handler. This is a thin wrapper around either :c:func:`sigaction` or :c:func:"
"`signal`.  Do not call those functions directly!  :c:type:"
"`PyOS_sighandler_t` is a typedef alias for :c:type:`void (\\*)(int)`."
msgstr ""

# 507821df8c4e4f8cbb69a1eecf35ff5a
#: c-api/sys.rst:53
msgid "System Functions"
msgstr ""

# 67eb7752f8c1440ca1152129e3f48566
#: c-api/sys.rst:55
msgid ""
"These are utility functions that make functionality from the :mod:`sys` "
"module accessible to C code.  They all work with the current interpreter "
"thread's :mod:`sys` module's dict, which is contained in the internal thread "
"state structure."
msgstr ""

# 53060def6bf344a7a0512432a75f4b82
#: c-api/sys.rst:61
msgid ""
"Return the object *name* from the :mod:`sys` module or *NULL* if it does not "
"exist, without setting an exception."
msgstr ""

# 9f3b24c75c19408a8e528637741855b5
#: c-api/sys.rst:66
msgid ""
"Set *name* in the :mod:`sys` module to *v* unless *v* is *NULL*, in which "
"case *name* is deleted from the sys module. Returns ``0`` on success, ``-1`` "
"on error."
msgstr ""

# 63ff1969b16f43bca7a4a3abc8161f59
#: c-api/sys.rst:72
msgid "Reset :data:`sys.warnoptions` to an empty list."
msgstr ""

# 19807ff26be749f198c961d3fb1a462e
#: c-api/sys.rst:76
msgid "Append *s* to :data:`sys.warnoptions`."
msgstr ""

# c46f8d1603ef42cfbcbbb85d9a45a22e
#: c-api/sys.rst:80
msgid "Append *unicode* to :data:`sys.warnoptions`."
msgstr ""

# bc8a02f77017432aa98d1c35eef54762
#: c-api/sys.rst:84
msgid ""
"Set :data:`sys.path` to a list object of paths found in *path* which should "
"be a list of paths separated with the platform's search path delimiter (``:"
"`` on Unix, ``;`` on Windows)."
msgstr ""

# 27ccb348c2b54541a6b9bf8aac84989c
#: c-api/sys.rst:90
msgid ""
"Write the output string described by *format* to :data:`sys.stdout`.  No "
"exceptions are raised, even if truncation occurs (see below)."
msgstr ""

# 16d9218e8fda48d4a94b54576935b5b6
#: c-api/sys.rst:93
msgid ""
"*format* should limit the total size of the formatted output string to 1000 "
"bytes or less -- after 1000 bytes, the output string is truncated. In "
"particular, this means that no unrestricted \"%s\" formats should occur; "
"these should be limited using \"%.<N>s\" where <N> is a decimal number "
"calculated so that <N> plus the maximum size of other formatted text does "
"not exceed 1000 bytes.  Also watch out for \"%f\", which can print hundreds "
"of digits for very large numbers."
msgstr ""

# a0cca42e1104406d8120578fad6c4164
#: c-api/sys.rst:101
msgid ""
"If a problem occurs, or :data:`sys.stdout` is unset, the formatted message "
"is written to the real (C level) *stdout*."
msgstr ""

# 1bee5180ec4d4262a0808370ee09a8c6
#: c-api/sys.rst:106
msgid ""
"As :c:func:`PySys_WriteStdout`, but write to :data:`sys.stderr` or *stderr* "
"instead."
msgstr ""

# 3fdc1cc874784f1ea061995696d41ac5
#: c-api/sys.rst:111
msgid ""
"Function similar to PySys_WriteStdout() but format the message using :c:func:"
"`PyUnicode_FromFormatV` and don't truncate the message to an arbitrary "
"length."
msgstr ""

# 8947415c9c55434aab4b515af85609cb
#: c-api/sys.rst:119
msgid ""
"As :c:func:`PySys_FormatStdout`, but write to :data:`sys.stderr` or *stderr* "
"instead."
msgstr ""

# 4de7dda438d14211870b4f4ce53e714a
#: c-api/sys.rst:126
msgid ""
"Parse *s* as a set of :option:`-X` options and add them to the current "
"options mapping as returned by :c:func:`PySys_GetXOptions`."
msgstr ""

# e9121396cb8b4894968f3ec8cb5ef59c
#: c-api/sys.rst:133
msgid ""
"Return the current dictionary of :option:`-X` options, similarly to :data:"
"`sys._xoptions`.  On error, *NULL* is returned and an exception is set."
msgstr ""

# b59701e3d67847dc86599d9af737d54a
#: c-api/sys.rst:143
msgid "Process Control"
msgstr ""

# 84ab50b894364e07897cb093b4309bf4
#: c-api/sys.rst:150
msgid ""
"Print a fatal error message and kill the process.  No cleanup is performed. "
"This function should only be invoked when a condition is detected that would "
"make it dangerous to continue using the Python interpreter; e.g., when the "
"object administration appears to be corrupted.  On Unix, the standard C "
"library function :c:func:`abort` is called which will attempt to produce a :"
"file:`core` file."
msgstr ""

# daf7b4ee06dd41b5bf557afb2041cef0
#: c-api/sys.rst:164
msgid ""
"Exit the current process.  This calls :c:func:`Py_Finalize` and then calls "
"the standard C library function ``exit(status)``."
msgstr ""

# 47f448ba2adb460b9b04440cbfd7a87c
#: c-api/sys.rst:174
msgid ""
"Register a cleanup function to be called by :c:func:`Py_Finalize`.  The "
"cleanup function will be called with no arguments and should return no "
"value.  At most 32 cleanup functions can be registered.  When the "
"registration is successful, :c:func:`Py_AtExit` returns ``0``; on failure, "
"it returns ``-1``.  The cleanup function registered last is called first. "
"Each cleanup function will be called at most once.  Since Python's internal "
"finalization will have completed before the cleanup function, no Python APIs "
"should be called by *func*."
msgstr ""

# 8bd8197039da49e6babb56548b0dc083
#: c-api/tuple.rst:6
msgid "Tuple Objects"
msgstr ""

# 6e658b2959b4461c9649901229bfd427
#: c-api/tuple.rst:13
msgid "This subtype of :c:type:`PyObject` represents a Python tuple object."
msgstr ""

# 43a87a24d2064339b941e83e97b22e1a
#: c-api/tuple.rst:18
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python tuple type; it "
"is the same object as :class:`tuple` in the Python layer."
msgstr ""

# e26ab871c2f94e4b988dc276b2c6e38b
#: c-api/tuple.rst:24
msgid ""
"Return true if *p* is a tuple object or an instance of a subtype of the "
"tuple type."
msgstr ""

# b4a5b59f063e46c18bbbe62a6bd15cfc
#: c-api/tuple.rst:30
msgid ""
"Return true if *p* is a tuple object, but not an instance of a subtype of "
"the tuple type."
msgstr ""

# 6050646b87ad4f23a0a8e03d4cd2fc0f
#: c-api/tuple.rst:36
msgid "Return a new tuple object of size *len*, or *NULL* on failure."
msgstr ""

# 4f7b35c2caf54685903bad8dec37379a
#: c-api/tuple.rst:41
msgid ""
"Return a new tuple object of size *n*, or *NULL* on failure. The tuple "
"values are initialized to the subsequent *n* C arguments pointing to Python "
"objects. ``PyTuple_Pack(2, a, b)`` is equivalent to "
"``Py_BuildValue(\"(OO)\", a, b)``."
msgstr ""

# dc5864c39c4d4499b3bae933528afbea
#: c-api/tuple.rst:48
msgid "Take a pointer to a tuple object, and return the size of that tuple."
msgstr ""

# eef808270c724442939121083a751860
#: c-api/tuple.rst:53
msgid ""
"Return the size of the tuple *p*, which must be non-*NULL* and point to a "
"tuple; no error checking is performed."
msgstr ""

# 1d85a26616c64dfc96e3750966b82b78
#: c-api/tuple.rst:59
msgid ""
"Return the object at position *pos* in the tuple pointed to by *p*.  If "
"*pos* is out of bounds, return *NULL* and sets an :exc:`IndexError` "
"exception."
msgstr ""

# a2519f2b70ac48ff885d70c6d2edc84a
#: c-api/tuple.rst:65
msgid "Like :c:func:`PyTuple_GetItem`, but does no checking of its arguments."
msgstr ""

# c96366a73c484be59662f2a8eef1fa3c
#: c-api/tuple.rst:70
msgid ""
"Take a slice of the tuple pointed to by *p* from *low* to *high* and return "
"it as a new tuple."
msgstr ""

# 78f536d7fe9d4f4db267258e69c4e6d1
#: c-api/tuple.rst:76
msgid ""
"Insert a reference to object *o* at position *pos* of the tuple pointed to "
"by *p*. Return ``0`` on success."
msgstr ""

# 2aeb4ffe1dca44008a7fd27ee182db51
# c0edd9bb72c24d6c8d12fd3d3e88467b
#: c-api/tuple.rst:81 c-api/tuple.rst:91
msgid "This function \"steals\" a reference to *o*."
msgstr ""

# f395fc187f224d2387d4e5057f10ab10
#: c-api/tuple.rst:86
msgid ""
"Like :c:func:`PyTuple_SetItem`, but does no error checking, and should "
"*only* be used to fill in brand new tuples."
msgstr ""

# 686610ef7b1f46938cfa72ffede76b4a
#: c-api/tuple.rst:96
msgid ""
"Can be used to resize a tuple.  *newsize* will be the new length of the "
"tuple. Because tuples are *supposed* to be immutable, this should only be "
"used if there is only one reference to the object.  Do *not* use this if the "
"tuple may already be known to some other part of the code.  The tuple will "
"always grow or shrink at the end.  Think of this as destroying the old tuple "
"and creating a new one, only more efficiently.  Returns ``0`` on success. "
"Client code should never assume that the resulting value of ``*p`` will be "
"the same as before calling this function. If the object referenced by ``*p`` "
"is replaced, the original ``*p`` is destroyed.  On failure, returns ``-1`` "
"and sets ``*p`` to *NULL*, and raises :exc:`MemoryError` or :exc:"
"`SystemError`."
msgstr ""

# 96b497538fab4f6f93244127b3e44464
# 708bb90f6eae498a8746bdf917435868
#: c-api/type.rst:6 c-api/typeobj.rst:6
msgid "Type Objects"
msgstr ""

# e76ae172bfd6482ca0fbba0e5ccb8adb
#: c-api/type.rst:13
msgid "The C structure of the objects used to describe built-in types."
msgstr ""

# f732e101ebdd4d78b2ddfde138d5af23
#: c-api/type.rst:18
msgid ""
"This is the type object for type objects; it is the same object as :class:"
"`type` in the Python layer."
msgstr ""

# 3893f2028b5546ef8d92ba6c195d7328
#: c-api/type.rst:24
msgid ""
"Return true if the object *o* is a type object, including instances of types "
"derived from the standard type object.  Return false in all other cases."
msgstr ""

# b7e85ec35af84a14a4ffde39370541b4
#: c-api/type.rst:30
msgid ""
"Return true if the object *o* is a type object, but not a subtype of the "
"standard type object.  Return false in all other cases."
msgstr ""

# 3c136d099e9d4266b4b4f1604fd7202e
#: c-api/type.rst:36
msgid "Clear the internal lookup cache. Return the current version tag."
msgstr ""

# 6de778ba45a043babc3f13a1a2560c96
#: c-api/type.rst:40
msgid ""
"Return the :attr:`tp_flags` member of *type*. This function is primarily "
"meant for use with `Py_LIMITED_API`; the individual flag bits are guaranteed "
"to be stable across Python releases, but access to :attr:`tp_flags` itself "
"is not part of the limited API."
msgstr ""

# 08d1fd72d3ae4b06a97d7e5ddf738803
#: c-api/type.rst:49
msgid ""
"Invalidate the internal lookup cache for the type and all of its subtypes.  "
"This function must be called after any manual modification of the attributes "
"or base classes of the type."
msgstr ""

# 698ed99cff084c51ad87471994b0f349
#: c-api/type.rst:56
msgid ""
"Return true if the type object *o* sets the feature *feature*.  Type "
"features are denoted by single bit flags."
msgstr ""

# f730f66f683f4b8dbe756c3a1e3c5c59
#: c-api/type.rst:62
msgid ""
"Return true if the type object includes support for the cycle detector; this "
"tests the type flag :const:`Py_TPFLAGS_HAVE_GC`."
msgstr ""

# f7e655be812242dabea49b2f6ccb6794
#: c-api/type.rst:68
msgid "Return true if *a* is a subtype of *b*."
msgstr ""

# e4b684f0e3254a63bbfcb546f4d85d3d
# 233bd60af6e342babaf5126694157414
#: c-api/type.rst:73 c-api/type.rst:78
msgid "XXX: Document."
msgstr ""

# 33e77e53bc00446984a1d6ab2b52e57b
#: c-api/type.rst:83
msgid ""
"Finalize a type object.  This should be called on all type objects to finish "
"their initialization.  This function is responsible for adding inherited "
"slots from a type's base class.  Return ``0`` on success, or return ``-1`` "
"and sets an exception on error."
msgstr ""

# 16f0577121bb4b529c64d1c8c116b4d8
#: c-api/typeobj.rst:8
msgid ""
"Perhaps one of the most important structures of the Python object system is "
"the structure that defines a new type: the :c:type:`PyTypeObject` "
"structure.  Type objects can be handled using any of the :c:func:`PyObject_"
"\\*` or :c:func:`PyType_\\*` functions, but do not offer much that's "
"interesting to most Python applications. These objects are fundamental to "
"how objects behave, so they are very important to the interpreter itself and "
"to any extension module that implements new types."
msgstr ""

# 7cf526f4ae0c40bd85e2ba2873045715
#: c-api/typeobj.rst:16
msgid ""
"Type objects are fairly large compared to most of the standard types. The "
"reason for the size is that each type object stores a large number of "
"values, mostly C function pointers, each of which implements a small part of "
"the type's functionality.  The fields of the type object are examined in "
"detail in this section.  The fields will be described in the order in which "
"they occur in the structure."
msgstr ""

# 2d7e56fa74794f2dbb3bb436c7c70ceb
#: c-api/typeobj.rst:23
msgid ""
"Typedefs: unaryfunc, binaryfunc, ternaryfunc, inquiry, intargfunc, "
"intintargfunc, intobjargproc, intintobjargproc, objobjargproc, destructor, "
"freefunc, printfunc, getattrfunc, getattrofunc, setattrfunc, setattrofunc, "
"reprfunc, hashfunc"
msgstr ""

# c95925d762e64555a97bfa8588d5d129
#: c-api/typeobj.rst:28
msgid ""
"The structure definition for :c:type:`PyTypeObject` can be found in :file:"
"`Include/object.h`.  For convenience of reference, this repeats the "
"definition found there:"
msgstr ""

# bf3293d8f0b24e0294d06062c319f0a5
#: c-api/typeobj.rst:35
msgid ""
"The type object structure extends the :c:type:`PyVarObject` structure. The :"
"attr:`ob_size` field is used for dynamic types (created by  :func:"
"`type_new`, usually called from a class statement). Note that :c:data:"
"`PyType_Type` (the metatype) initializes :attr:`tp_itemsize`, which means "
"that its instances (i.e. type objects) *must* have the :attr:`ob_size` field."
msgstr ""

# b31a844f16544528ab34014ac5b263a2
#: c-api/typeobj.rst:45
msgid ""
"These fields are only present when the macro ``Py_TRACE_REFS`` is defined. "
"Their initialization to *NULL* is taken care of by the "
"``PyObject_HEAD_INIT`` macro.  For statically allocated objects, these "
"fields always remain *NULL*. For dynamically allocated objects, these two "
"fields are used to link the object into a doubly-linked list of *all* live "
"objects on the heap.  This could be used for various debugging purposes; "
"currently the only use is to print the objects that are still alive at the "
"end of a run when the environment variable :envvar:`PYTHONDUMPREFS` is set."
msgstr ""

# 060d13ff64b040a3ba16ef85dc0e913d
#: c-api/typeobj.rst:54
msgid "These fields are not inherited by subtypes."
msgstr ""

# 12b3f83682ae4a05b82a9198bdb699f6
#: c-api/typeobj.rst:59
msgid ""
"This is the type object's reference count, initialized to ``1`` by the "
"``PyObject_HEAD_INIT`` macro.  Note that for statically allocated type "
"objects, the type's instances (objects whose :attr:`ob_type` points back to "
"the type) do *not* count as references.  But for dynamically allocated type "
"objects, the instances *do* count as references."
msgstr ""

# 4ce04de48997443a98ac407091911010
# e403d3949c6c4edfbe169a2c8c0a59df
# 5a9907b7aadf4961baa71ebdcc667f5f
#: c-api/typeobj.rst:65 c-api/typeobj.rst:94 c-api/typeobj.rst:121
msgid "This field is not inherited by subtypes."
msgstr ""

# f6d35bcb8c534e85af3f477d1ac8818c
#: c-api/typeobj.rst:70
msgid ""
"This is the type's type, in other words its metatype.  It is initialized by "
"the argument to the ``PyObject_HEAD_INIT`` macro, and its value should "
"normally be ``&PyType_Type``.  However, for dynamically loadable extension "
"modules that must be usable on Windows (at least), the compiler complains "
"that this is not a valid initializer.  Therefore, the convention is to pass "
"*NULL* to the ``PyObject_HEAD_INIT`` macro and to initialize this field "
"explicitly at the start of the module's initialization function, before "
"doing anything else.  This is typically done like this::"
msgstr ""

# b5b33a51869146efb740b4f1f6e17e7b
#: c-api/typeobj.rst:81
msgid ""
"This should be done before any instances of the type are created. :c:func:"
"`PyType_Ready` checks if :attr:`ob_type` is *NULL*, and if so, initializes "
"it to the :attr:`ob_type` field of the base class. :c:func:`PyType_Ready` "
"will not change this field if it is non-zero."
msgstr ""

# fd51f17ac1ca46669679fdc6f937d79d
# 3ba370706c2746a2b1bc8c795fabef39
# 1dbee3286d22427caa12cacbc215e311
# 74461af652de4a30becc4891fe307791
# b59bcd670a9e4934bff75be254ac6de0
# cb284ac4d0624156b32ef319fadc7651
# 3f842e09837c4604b4c30dfaf43a3cb6
# eceda51e7f014fb19c1e7e3da1557e40
# 9d17eb79b6ef448cbbf8edfec539126a
# 6ee795c9dfe4435f92343e50edb7521d
# bcd615e5d56b4410a735e3f777777f32
# ca31bbcee95c4b18bbe8e0072c7e9ea9
#: c-api/typeobj.rst:86 c-api/typeobj.rst:187 c-api/typeobj.rst:216
#: c-api/typeobj.rst:270 c-api/typeobj.rst:337 c-api/typeobj.rst:355
#: c-api/typeobj.rst:652 c-api/typeobj.rst:669 c-api/typeobj.rst:764
#: c-api/typeobj.rst:775 c-api/typeobj.rst:857 c-api/typeobj.rst:950
msgid "This field is inherited by subtypes."
msgstr ""

# e5468c0b1141489c8be4bd190d6f886b
#: c-api/typeobj.rst:91
msgid ""
"For statically allocated type objects, this should be initialized to zero.  "
"For dynamically allocated type objects, this field has a special internal "
"meaning."
msgstr ""

# 31cf9e03eecd418991036fb6eb03c2bf
#: c-api/typeobj.rst:99
msgid ""
"Pointer to a NUL-terminated string containing the name of the type. For "
"types that are accessible as module globals, the string should be the full "
"module name, followed by a dot, followed by the type name; for built-in "
"types, it should be just the type name.  If the module is a submodule of a "
"package, the full package name is part of the full module name.  For "
"example, a type named :class:`T` defined in module :mod:`M` in subpackage :"
"mod:`Q` in package :mod:`P` should have the :attr:`tp_name` initializer ``"
"\"P.Q.M.T\"``."
msgstr ""

# 011f478fc6804261a9280a9f1a5a71fd
#: c-api/typeobj.rst:107
msgid ""
"For dynamically allocated type objects, this should just be the type name, "
"and the module name explicitly stored in the type dict as the value for key "
"``'__module__'``."
msgstr ""

# d15f42edf8644227a4098dcb9d03ee48
#: c-api/typeobj.rst:111
msgid ""
"For statically allocated type objects, the tp_name field should contain a "
"dot. Everything before the last dot is made accessible as the :attr:"
"`__module__` attribute, and everything after the last dot is made accessible "
"as the :attr:`__name__` attribute."
msgstr ""

# 26bcb8a4725049fdb2acc924271656e6
#: c-api/typeobj.rst:116
msgid ""
"If no dot is present, the entire :attr:`tp_name` field is made accessible as "
"the :attr:`__name__` attribute, and the :attr:`__module__` attribute is "
"undefined (unless explicitly set in the dictionary, as explained above).  "
"This means your type will be impossible to pickle."
msgstr ""

# 986e5e9ce87341b4a7c33b1393c2b69a
#: c-api/typeobj.rst:127
msgid ""
"These fields allow calculating the size in bytes of instances of the type."
msgstr ""

# 82035fac90f04fe0a3361f66cd8844b5
#: c-api/typeobj.rst:129
msgid ""
"There are two kinds of types: types with fixed-length instances have a zero :"
"attr:`tp_itemsize` field, types with variable-length instances have a non-"
"zero :attr:`tp_itemsize` field.  For a type with fixed-length instances, all "
"instances have the same size, given in :attr:`tp_basicsize`."
msgstr ""

# e0a53b305fad49aba0c93a9adc5265ed
#: c-api/typeobj.rst:134
msgid ""
"For a type with variable-length instances, the instances must have an :attr:"
"`ob_size` field, and the instance size is :attr:`tp_basicsize` plus N times :"
"attr:`tp_itemsize`, where N is the \"length\" of the object.  The value of N "
"is typically stored in the instance's :attr:`ob_size` field.  There are "
"exceptions:  for example, ints use a negative :attr:`ob_size` to indicate a "
"negative number, and N is ``abs(ob_size)`` there.  Also, the presence of an :"
"attr:`ob_size` field in the instance layout doesn't mean that the instance "
"structure is variable-length (for example, the structure for the list type "
"has fixed-length instances, yet those instances have a meaningful :attr:"
"`ob_size` field)."
msgstr ""

# a29421b50abd4045a9bcad39b0e85648
#: c-api/typeobj.rst:145
msgid ""
"The basic size includes the fields in the instance declared by the macro :c:"
"macro:`PyObject_HEAD` or :c:macro:`PyObject_VAR_HEAD` (whichever is used to "
"declare the instance struct) and this in turn includes the :attr:`_ob_prev` "
"and :attr:`_ob_next` fields if they are present.  This means that the only "
"correct way to get an initializer for the :attr:`tp_basicsize` is to use the "
"``sizeof`` operator on the struct used to declare the instance layout. The "
"basic size does not include the GC header size."
msgstr ""

# 9f0c982257ae4649a4e03d5b12bddc64
#: c-api/typeobj.rst:153
msgid ""
"These fields are inherited separately by subtypes.  If the base type has a "
"non-zero :attr:`tp_itemsize`, it is generally not safe to set :attr:"
"`tp_itemsize` to a different non-zero value in a subtype (though this "
"depends on the implementation of the base type)."
msgstr ""

# 3eed3fc391f441beb98331574616aa91
#: c-api/typeobj.rst:158
msgid ""
"A note about alignment: if the variable items require a particular "
"alignment, this should be taken care of by the value of :attr:"
"`tp_basicsize`.  Example: suppose a type implements an array of ``double``. :"
"attr:`tp_itemsize` is ``sizeof(double)``. It is the programmer's "
"responsibility that :attr:`tp_basicsize` is a multiple of ``sizeof(double)`` "
"(assuming this is the alignment requirement for ``double``)."
msgstr ""

# ed969f93ffca4b268ee78c5fd60f983c
#: c-api/typeobj.rst:168
msgid ""
"A pointer to the instance destructor function.  This function must be "
"defined unless the type guarantees that its instances will never be "
"deallocated (as is the case for the singletons ``None`` and ``Ellipsis``)."
msgstr ""

# 784a45f8a70e4769b11c06730b158b16
#: c-api/typeobj.rst:172
msgid ""
"The destructor function is called by the :c:func:`Py_DECREF` and :c:func:"
"`Py_XDECREF` macros when the new reference count is zero.  At this point, "
"the instance is still in existence, but there are no references to it.  The "
"destructor function should free all references which the instance owns, free "
"all memory buffers owned by the instance (using the freeing function "
"corresponding to the allocation function used to allocate the buffer), and "
"finally (as its last action) call the type's :attr:`tp_free` function.  If "
"the type is not subtypable (doesn't have the :const:`Py_TPFLAGS_BASETYPE` "
"flag bit set), it is permissible to call the object deallocator directly "
"instead of via :attr:`tp_free`.  The object deallocator should be the one "
"used to allocate the instance; this is normally :c:func:`PyObject_Del` if "
"the instance was allocated using :c:func:`PyObject_New` or :c:func:"
"`PyObject_VarNew`, or :c:func:`PyObject_GC_Del` if the instance was "
"allocated using :c:func:`PyObject_GC_New` or :c:func:`PyObject_GC_NewVar`."
msgstr ""

# eead075b555240e389f1c14dd484d99a
#: c-api/typeobj.rst:192
msgid "An optional pointer to the instance print function."
msgstr ""

# 11982531c55345e6b77c1c3185809a34
#: c-api/typeobj.rst:194
msgid ""
"The print function is only called when the instance is printed to a *real* "
"file; when it is printed to a pseudo-file (like a :class:`StringIO` "
"instance), the instance's :attr:`tp_repr` or :attr:`tp_str` function is "
"called to convert it to a string.  These are also called when the type's :"
"attr:`tp_print` field is *NULL*.  A type should never implement :attr:"
"`tp_print` in a way that produces different output than :attr:`tp_repr` or :"
"attr:`tp_str` would."
msgstr ""

# 8ace29f2b6134e11b3a349605a840840
#: c-api/typeobj.rst:201
msgid ""
"The print function is called with the same signature as :c:func:"
"`PyObject_Print`: ``int tp_print(PyObject *self, FILE *file, int flags)``.  "
"The *self* argument is the instance to be printed.  The *file* argument is "
"the stdio file to which it is to be printed.  The *flags* argument is "
"composed of flag bits. The only flag bit currently defined is :const:"
"`Py_PRINT_RAW`. When the :const:`Py_PRINT_RAW` flag bit is set, the instance "
"should be printed the same way as :attr:`tp_str` would format it; when the :"
"const:`Py_PRINT_RAW` flag bit is clear, the instance should be printed the "
"same was as :attr:`tp_repr` would format it. It should return ``-1`` and set "
"an exception condition when an error occurred during the comparison."
msgstr ""

# c33d32bbbbab41539a7e002ce1f57b74
#: c-api/typeobj.rst:212
msgid ""
"It is possible that the :attr:`tp_print` field will be deprecated. In any "
"case, it is recommended not to define :attr:`tp_print`, but instead to rely "
"on :attr:`tp_repr` and :attr:`tp_str` for printing."
msgstr ""

# bf01b0df02e54cb79edd3598fe43bdc2
#: c-api/typeobj.rst:221
msgid "An optional pointer to the get-attribute-string function."
msgstr ""

# 05acf9ebf1574409b5b5ba570175b4c8
#: c-api/typeobj.rst:223
msgid ""
"This field is deprecated.  When it is defined, it should point to a function "
"that acts the same as the :attr:`tp_getattro` function, but taking a C "
"string instead of a Python string object to give the attribute name.  The "
"signature is the same as for :c:func:`PyObject_GetAttrString`."
msgstr ""

# 3bda307fed79476683f82ec72d9200cb
#: c-api/typeobj.rst:228
msgid ""
"This field is inherited by subtypes together with :attr:`tp_getattro`: a "
"subtype inherits both :attr:`tp_getattr` and :attr:`tp_getattro` from its "
"base type when the subtype's :attr:`tp_getattr` and :attr:`tp_getattro` are "
"both *NULL*."
msgstr ""

# 449ed0ffe6e34fcda9f190d706688751
#: c-api/typeobj.rst:235
msgid "An optional pointer to the set-attribute-string function."
msgstr ""

# aa0637a70a6f450c86a99312bdeb0a8b
#: c-api/typeobj.rst:237
msgid ""
"This field is deprecated.  When it is defined, it should point to a function "
"that acts the same as the :attr:`tp_setattro` function, but taking a C "
"string instead of a Python string object to give the attribute name.  The "
"signature is the same as for :c:func:`PyObject_SetAttrString`."
msgstr ""

# 519671173f8949aeac592f62ec518441
#: c-api/typeobj.rst:242
msgid ""
"This field is inherited by subtypes together with :attr:`tp_setattro`: a "
"subtype inherits both :attr:`tp_setattr` and :attr:`tp_setattro` from its "
"base type when the subtype's :attr:`tp_setattr` and :attr:`tp_setattro` are "
"both *NULL*."
msgstr ""

# a3263384e966482aace76809b9a7b0b3
#: c-api/typeobj.rst:249
msgid "Reserved slot, formerly known as tp_compare."
msgstr ""

# 60f99797c95642d0b0a01328e2f7a3a8
#: c-api/typeobj.rst:256
msgid ""
"An optional pointer to a function that implements the built-in function :"
"func:`repr`."
msgstr ""

# 08ece05976454224862d22e22c46e389
#: c-api/typeobj.rst:259
msgid ""
"The signature is the same as for :c:func:`PyObject_Repr`; it must return a "
"string or a Unicode object.  Ideally, this function should return a string "
"that, when passed to :func:`eval`, given a suitable environment, returns an "
"object with the same value.  If this is not feasible, it should return a "
"string starting with ``'<'`` and ending with ``'>'`` from which both the "
"type and the value of the object can be deduced."
msgstr ""

# 08263ac8163f4bd8aa62f1f5ac718a19
#: c-api/typeobj.rst:266
msgid ""
"When this field is not set, a string of the form ``<%s object at %p>`` is "
"returned, where ``%s`` is replaced by the type name, and ``%p`` by the "
"object's memory address."
msgstr ""

# 14ffce0ab3f9431a8e77580253c45218
#: c-api/typeobj.rst:274
msgid ""
"Pointer to an additional structure that contains fields relevant only to "
"objects which implement the number protocol.  These fields are documented "
"in :ref:`number-structs`."
msgstr ""

# cfd13d197665426db6775b8aa2a95e82
#: c-api/typeobj.rst:278
msgid ""
"The :attr:`tp_as_number` field is not inherited, but the contained fields "
"are inherited individually."
msgstr ""

# 24e64b338fe3466daec7585a7e381b72
#: c-api/typeobj.rst:284
msgid ""
"Pointer to an additional structure that contains fields relevant only to "
"objects which implement the sequence protocol.  These fields are documented "
"in :ref:`sequence-structs`."
msgstr ""

# 929bbfd91c164897b53e385576807f37
#: c-api/typeobj.rst:288
msgid ""
"The :attr:`tp_as_sequence` field is not inherited, but the contained fields "
"are inherited individually."
msgstr ""

# c6d1347d4ff04b7499c44ad07c9402bf
#: c-api/typeobj.rst:294
msgid ""
"Pointer to an additional structure that contains fields relevant only to "
"objects which implement the mapping protocol.  These fields are documented "
"in :ref:`mapping-structs`."
msgstr ""

# fba1b75f7895495f954ad8004e251d3d
#: c-api/typeobj.rst:298
msgid ""
"The :attr:`tp_as_mapping` field is not inherited, but the contained fields "
"are inherited individually."
msgstr ""

# 3a0bb88a82be4e6d869b05148f09635c
#: c-api/typeobj.rst:306
msgid ""
"An optional pointer to a function that implements the built-in function :"
"func:`hash`."
msgstr ""

# 6701ad141f724d38bdf71c8a24a0e700
#: c-api/typeobj.rst:309
msgid ""
"The signature is the same as for :c:func:`PyObject_Hash`; it must return a "
"value of the type Py_hash_t.  The value ``-1`` should not be returned as a "
"normal return value; when an error occurs during the computation of the hash "
"value, the function should set an exception and return ``-1``."
msgstr ""

# 5737aa07bc8746d5862e62cdf1c140a5
#: c-api/typeobj.rst:314
msgid ""
"This field can be set explicitly to :c:func:`PyObject_HashNotImplemented` to "
"block inheritance of the hash method from a parent type. This is interpreted "
"as the equivalent of ``__hash__ = None`` at the Python level, causing "
"``isinstance(o, collections.Hashable)`` to correctly return ``False``. Note "
"that the converse is also true - setting ``__hash__ = None`` on a class at "
"the Python level will result in the ``tp_hash`` slot being set to :c:func:"
"`PyObject_HashNotImplemented`."
msgstr ""

# 6d12c20504454ce391850f108b7e2d7b
#: c-api/typeobj.rst:322
msgid ""
"When this field is not set, an attempt to take the hash of the object "
"raises :exc:`TypeError`."
msgstr ""

# b1c10d94346447679374882bbaad181f
#: c-api/typeobj.rst:325
msgid ""
"This field is inherited by subtypes together with :attr:`tp_richcompare`: a "
"subtype inherits both of :attr:`tp_richcompare` and :attr:`tp_hash`, when "
"the subtype's :attr:`tp_richcompare` and :attr:`tp_hash` are both *NULL*."
msgstr ""

# 6f4d1ed3b9044fc6b10103a582b120cc
#: c-api/typeobj.rst:333
msgid ""
"An optional pointer to a function that implements calling the object.  This "
"should be *NULL* if the object is not callable.  The signature is the same "
"as for :c:func:`PyObject_Call`."
msgstr ""

# 8766b7283ff644d2a8338c38cb5c9e1e
#: c-api/typeobj.rst:342
msgid ""
"An optional pointer to a function that implements the built-in operation :"
"func:`str`.  (Note that :class:`str` is a type now, and :func:`str` calls "
"the constructor for that type.  This constructor calls :c:func:"
"`PyObject_Str` to do the actual work, and :c:func:`PyObject_Str` will call "
"this handler.)"
msgstr ""

# 9ce9cd0c98104c4db03942467e9da447
#: c-api/typeobj.rst:347
msgid ""
"The signature is the same as for :c:func:`PyObject_Str`; it must return a "
"string or a Unicode object.  This function should return a \"friendly\" "
"string representation of the object, as this is the representation that will "
"be used, among other things, by the :func:`print` function."
msgstr ""

# 3c00158b19bf4267a02f32ae550138d6
#: c-api/typeobj.rst:352
msgid ""
"When this field is not set, :c:func:`PyObject_Repr` is called to return a "
"string representation."
msgstr ""

# c33b20cf30524da5b7f5ec26cf68ad66
#: c-api/typeobj.rst:360
msgid "An optional pointer to the get-attribute function."
msgstr ""

# db142978cb5245c7b1b9f4e2918fc23a
#: c-api/typeobj.rst:362
msgid ""
"The signature is the same as for :c:func:`PyObject_GetAttr`.  It is usually "
"convenient to set this field to :c:func:`PyObject_GenericGetAttr`, which "
"implements the normal way of looking for object attributes."
msgstr ""

# 770f2a6f44d345beab3bc8eaeac4ac40
#: c-api/typeobj.rst:366
msgid ""
"This field is inherited by subtypes together with :attr:`tp_getattr`: a "
"subtype inherits both :attr:`tp_getattr` and :attr:`tp_getattro` from its "
"base type when the subtype's :attr:`tp_getattr` and :attr:`tp_getattro` are "
"both *NULL*."
msgstr ""

# cb4e07e6e34c46ecb9535dc33ac2f5d6
#: c-api/typeobj.rst:373
msgid "An optional pointer to the set-attribute function."
msgstr ""

# dc435814b54547dea310f8aced0b46f3
#: c-api/typeobj.rst:375
msgid ""
"The signature is the same as for :c:func:`PyObject_SetAttr`.  It is usually "
"convenient to set this field to :c:func:`PyObject_GenericSetAttr`, which "
"implements the normal way of setting object attributes."
msgstr ""

# 68408d03de554aab9d3d35e7beb3aa7f
#: c-api/typeobj.rst:379
msgid ""
"This field is inherited by subtypes together with :attr:`tp_setattr`: a "
"subtype inherits both :attr:`tp_setattr` and :attr:`tp_setattro` from its "
"base type when the subtype's :attr:`tp_setattr` and :attr:`tp_setattro` are "
"both *NULL*."
msgstr ""

# cbdd0390644f44419fb888591d7fd674
#: c-api/typeobj.rst:386
msgid ""
"Pointer to an additional structure that contains fields relevant only to "
"objects which implement the buffer interface.  These fields are documented "
"in :ref:`buffer-structs`."
msgstr ""

# f6428a7cb5d1474fbe4c1ed89d10abf2
#: c-api/typeobj.rst:390
msgid ""
"The :attr:`tp_as_buffer` field is not inherited, but the contained fields "
"are inherited individually."
msgstr ""

# 3ec18022b50842e6a999bf0567d958f3
#: c-api/typeobj.rst:396
msgid ""
"This field is a bit mask of various flags.  Some flags indicate variant "
"semantics for certain situations; others are used to indicate that certain "
"fields in the type object (or in the extension structures referenced via :"
"attr:`tp_as_number`, :attr:`tp_as_sequence`, :attr:`tp_as_mapping`, and :"
"attr:`tp_as_buffer`) that were historically not always present are valid; if "
"such a flag bit is clear, the type fields it guards must not be accessed and "
"must be considered to have a zero or *NULL* value instead."
msgstr ""

# 43b0ec6a5cc24741b7d39b006cabd691
#: c-api/typeobj.rst:404
msgid ""
"Inheritance of this field is complicated.  Most flag bits are inherited "
"individually, i.e. if the base type has a flag bit set, the subtype inherits "
"this flag bit.  The flag bits that pertain to extension structures are "
"strictly inherited if the extension structure is inherited, i.e. the base "
"type's value of the flag bit is copied into the subtype together with a "
"pointer to the extension structure.  The :const:`Py_TPFLAGS_HAVE_GC` flag "
"bit is inherited together with the :attr:`tp_traverse` and :attr:`tp_clear` "
"fields, i.e. if the :const:`Py_TPFLAGS_HAVE_GC` flag bit is clear in the "
"subtype and the :attr:`tp_traverse` and :attr:`tp_clear` fields in the "
"subtype exist and have *NULL* values."
msgstr ""

# d4f6076b82fb485888cf2b5d003d6134
#: c-api/typeobj.rst:415
msgid ""
"The following bit masks are currently defined; these can be ORed together "
"using the ``|`` operator to form the value of the :attr:`tp_flags` field.  "
"The macro :c:func:`PyType_HasFeature` takes a type and a flags value, *tp* "
"and *f*, and checks whether ``tp->tp_flags & f`` is non-zero."
msgstr ""

# 6e654c8851eb4b7bbf374f48751636e1
#: c-api/typeobj.rst:423
msgid ""
"This bit is set when the type object itself is allocated on the heap.  In "
"this case, the :attr:`ob_type` field of its instances is considered a "
"reference to the type, and the type object is INCREF'ed when a new instance "
"is created, and DECREF'ed when an instance is destroyed (this does not apply "
"to instances of subtypes; only the type referenced by the instance's ob_type "
"gets INCREF'ed or DECREF'ed)."
msgstr ""

# 0dd779b283784f61879acf15804a3b41
#: c-api/typeobj.rst:433
msgid ""
"This bit is set when the type can be used as the base type of another type.  "
"If this bit is clear, the type cannot be subtyped (similar to a \"final\" "
"class in Java)."
msgstr ""

# 0c9c8557a15749e9b9dbc4ae2dc52b54
#: c-api/typeobj.rst:440
msgid ""
"This bit is set when the type object has been fully initialized by :c:func:"
"`PyType_Ready`."
msgstr ""

# 868640d979fe4160a1d10199c9f375b3
#: c-api/typeobj.rst:446
msgid ""
"This bit is set while :c:func:`PyType_Ready` is in the process of "
"initializing the type object."
msgstr ""

# 801b39f1410c459ea1ff3a7e408b5767
#: c-api/typeobj.rst:452
msgid ""
"This bit is set when the object supports garbage collection.  If this bit is "
"set, instances must be created using :c:func:`PyObject_GC_New` and destroyed "
"using :c:func:`PyObject_GC_Del`.  More information in section :ref:"
"`supporting-cycle-detection`.  This bit also implies that the GC-related "
"fields :attr:`tp_traverse` and :attr:`tp_clear` are present in the type "
"object."
msgstr ""

# 1295d0aa07444e01b7940413d56acfb7
#: c-api/typeobj.rst:462
msgid ""
"This is a bitmask of all the bits that pertain to the existence of certain "
"fields in the type object and its extension structures. Currently, it "
"includes the following bits: :const:`Py_TPFLAGS_HAVE_STACKLESS_EXTENSION`, :"
"const:`Py_TPFLAGS_HAVE_VERSION_TAG`."
msgstr ""

# e274df68daa34ce5befbd76aafc34624
#: c-api/typeobj.rst:470
msgid ""
"An optional pointer to a NUL-terminated C string giving the docstring for "
"this type object.  This is exposed as the :attr:`__doc__` attribute on the "
"type and instances of the type."
msgstr ""

# 48a010b91e0d4fd99b3308883fb9ae42
#: c-api/typeobj.rst:474
msgid "This field is *not* inherited by subtypes."
msgstr ""

# 400393367f1642d7bf5e3e839f418439
#: c-api/typeobj.rst:479
msgid ""
"An optional pointer to a traversal function for the garbage collector.  This "
"is only used if the :const:`Py_TPFLAGS_HAVE_GC` flag bit is set.  More "
"information about Python's garbage collection scheme can be found in "
"section :ref:`supporting-cycle-detection`."
msgstr ""

# 1ede7bb955534ac48b23393d75351936
#: c-api/typeobj.rst:484
msgid ""
"The :attr:`tp_traverse` pointer is used by the garbage collector to detect "
"reference cycles. A typical implementation of a :attr:`tp_traverse` function "
"simply calls :c:func:`Py_VISIT` on each of the instance's members that are "
"Python objects.  For example, this is function :c:func:`local_traverse` from "
"the :mod:`_thread` extension module::"
msgstr ""

# 839766516e614d6893dc5cda3d47ffea
#: c-api/typeobj.rst:499
msgid ""
"Note that :c:func:`Py_VISIT` is called only on those members that can "
"participate in reference cycles.  Although there is also a ``self->key`` "
"member, it can only be *NULL* or a Python string and therefore cannot be "
"part of a reference cycle."
msgstr ""

# 0408452f4a31486395c20efcd0277dc5
#: c-api/typeobj.rst:503
msgid ""
"On the other hand, even if you know a member can never be part of a cycle, "
"as a debugging aid you may want to visit it anyway just so the :mod:`gc` "
"module's :func:`get_referents` function will include it."
msgstr ""

# 0bd5495382de4e1aad41c409813f87af
#: c-api/typeobj.rst:507
msgid ""
"Note that :c:func:`Py_VISIT` requires the *visit* and *arg* parameters to :c:"
"func:`local_traverse` to have these specific names; don't name them just "
"anything."
msgstr ""

# 04b3c9c185be4ebb895771a440c7f598
#: c-api/typeobj.rst:511
msgid ""
"This field is inherited by subtypes together with :attr:`tp_clear` and the :"
"const:`Py_TPFLAGS_HAVE_GC` flag bit: the flag bit, :attr:`tp_traverse`, and :"
"attr:`tp_clear` are all inherited from the base type if they are all zero in "
"the subtype."
msgstr ""

# 8c6e1765a7cc4e8e947c26d47e5b7861
#: c-api/typeobj.rst:519
msgid ""
"An optional pointer to a clear function for the garbage collector. This is "
"only used if the :const:`Py_TPFLAGS_HAVE_GC` flag bit is set."
msgstr ""

# 398a3b3f395843aab114abb5d6ccab20
#: c-api/typeobj.rst:522
msgid ""
"The :attr:`tp_clear` member function is used to break reference cycles in "
"cyclic garbage detected by the garbage collector.  Taken together, all :attr:"
"`tp_clear` functions in the system must combine to break all reference "
"cycles.  This is subtle, and if in any doubt supply a :attr:`tp_clear` "
"function.  For example, the tuple type does not implement a :attr:`tp_clear` "
"function, because it's possible to prove that no reference cycle can be "
"composed entirely of tuples. Therefore the :attr:`tp_clear` functions of "
"other types must be sufficient to break any cycle containing a tuple.  This "
"isn't immediately obvious, and there's rarely a good reason to avoid "
"implementing :attr:`tp_clear`."
msgstr ""

# 2eb03103e2664e68824bcb7b3a7baa1d
#: c-api/typeobj.rst:532
msgid ""
"Implementations of :attr:`tp_clear` should drop the instance's references to "
"those of its members that may be Python objects, and set its pointers to "
"those members to *NULL*, as in the following example::"
msgstr ""

# 1cd3f92501584d19860eb6907debdd48
#: c-api/typeobj.rst:546
msgid ""
"The :c:func:`Py_CLEAR` macro should be used, because clearing references is "
"delicate:  the reference to the contained object must not be decremented "
"until after the pointer to the contained object is set to *NULL*.  This is "
"because decrementing the reference count may cause the contained object to "
"become trash, triggering a chain of reclamation activity that may include "
"invoking arbitrary Python code (due to finalizers, or weakref callbacks, "
"associated with the contained object). If it's possible for such code to "
"reference *self* again, it's important that the pointer to the contained "
"object be *NULL* at that time, so that *self* knows the contained object can "
"no longer be used.  The :c:func:`Py_CLEAR` macro performs the operations in "
"a safe order."
msgstr ""

# 597ebe9ef4f846f09b8876764e9aad62
#: c-api/typeobj.rst:557
msgid ""
"Because the goal of :attr:`tp_clear` functions is to break reference cycles, "
"it's not necessary to clear contained objects like Python strings or Python "
"integers, which can't participate in reference cycles. On the other hand, it "
"may be convenient to clear all contained Python objects, and write the "
"type's :attr:`tp_dealloc` function to invoke :attr:`tp_clear`."
msgstr ""

# 481d866bf41147b88f8134b9e189ffb8
#: c-api/typeobj.rst:563
msgid ""
"More information about Python's garbage collection scheme can be found in "
"section :ref:`supporting-cycle-detection`."
msgstr ""

# fc9f1a35342b410a837d15a7789a9f86
#: c-api/typeobj.rst:566
msgid ""
"This field is inherited by subtypes together with :attr:`tp_traverse` and "
"the :const:`Py_TPFLAGS_HAVE_GC` flag bit: the flag bit, :attr:`tp_traverse`, "
"and :attr:`tp_clear` are all inherited from the base type if they are all "
"zero in the subtype."
msgstr ""

# 9b7a97023e2841f89e1d1e9093f47c4d
#: c-api/typeobj.rst:574
msgid ""
"An optional pointer to the rich comparison function, whose signature is "
"``PyObject *tp_richcompare(PyObject *a, PyObject *b, int op)``."
msgstr ""

# d10863f3a1a348fd8486ba31d5ef1214
#: c-api/typeobj.rst:577
msgid ""
"The function should return the result of the comparison (usually ``Py_True`` "
"or ``Py_False``).  If the comparison is undefined, it must return "
"``Py_NotImplemented``, if another error occurred it must return ``NULL`` and "
"set an exception condition."
msgstr ""

# da2907fd792b4a95b8b2a9f8c989bf81
#: c-api/typeobj.rst:584
msgid ""
"If you want to implement a type for which only a limited set of comparisons "
"makes sense (e.g. ``==`` and ``!=``, but not ``<`` and friends), directly "
"raise :exc:`TypeError` in the rich comparison function."
msgstr ""

# 9224c6ae505f4684939c66da8e650e47
#: c-api/typeobj.rst:588
msgid ""
"This field is inherited by subtypes together with :attr:`tp_hash`: a subtype "
"inherits :attr:`tp_richcompare` and :attr:`tp_hash` when the subtype's :attr:"
"`tp_richcompare` and :attr:`tp_hash` are both *NULL*."
msgstr ""

# 63cb1a0d63ac4f4c9513f44c14a4c54d
#: c-api/typeobj.rst:593
msgid ""
"The following constants are defined to be used as the third argument for :"
"attr:`tp_richcompare` and for :c:func:`PyObject_RichCompare`:"
msgstr ""

# cf85095038f248e68e4ddea8f66ab69b
#: c-api/typeobj.rst:597
msgid "Constant"
msgstr ""

# 73e4959da48048239d57ea89f8878255
#: c-api/typeobj.rst:597
msgid "Comparison"
msgstr ""

# c83a4fcb33d5401784f4faccab2790ee
#: c-api/typeobj.rst:599
msgid ":const:`Py_LT`"
msgstr ""

# 2cd90dc09e1c4fa38a0d5f95e159909b
#: c-api/typeobj.rst:599
msgid "``<``"
msgstr ""

# 91cc1764a5bc424db161d5a257830a72
#: c-api/typeobj.rst:601
msgid ":const:`Py_LE`"
msgstr ""

# edbee78017dd43998c16b7709eb97b9e
#: c-api/typeobj.rst:601
msgid "``<=``"
msgstr ""

# 406d0084668e47a0935e2300b0187812
#: c-api/typeobj.rst:603
msgid ":const:`Py_EQ`"
msgstr ""

# 517b7108148347389cfa1cccabfd7ea8
#: c-api/typeobj.rst:603
msgid "``==``"
msgstr ""

# 33fec623b23343cb8749cf3ba64d2812
#: c-api/typeobj.rst:605
msgid ":const:`Py_NE`"
msgstr ""

# c786cd651a9e45399147fa72115f09ee
#: c-api/typeobj.rst:605
msgid "``!=``"
msgstr ""

# a4c0b2dfe64e49579c5e8ef27f4885ce
#: c-api/typeobj.rst:607
msgid ":const:`Py_GT`"
msgstr ""

# 86ac18fca04a491ca30c6f2d021e0630
#: c-api/typeobj.rst:607
msgid "``>``"
msgstr ""

# e096e8be20e04939bf32cb1ec7a5e660
#: c-api/typeobj.rst:609
msgid ":const:`Py_GE`"
msgstr ""

# 7af1195c7e4b444b9ef9eb6544650948
#: c-api/typeobj.rst:609
msgid "``>=``"
msgstr ""

# 67483e2d63c747ed821c806789e266b3
#: c-api/typeobj.rst:615
msgid ""
"If the instances of this type are weakly referenceable, this field is "
"greater than zero and contains the offset in the instance structure of the "
"weak reference list head (ignoring the GC header, if present); this offset "
"is used by :c:func:`PyObject_ClearWeakRefs` and the :c:func:`PyWeakref_\\*` "
"functions.  The instance structure needs to include a field of type :c:type:"
"`PyObject\\*` which is initialized to *NULL*."
msgstr ""

# d98255f7ed4f4aa383d095acb38e2b5c
#: c-api/typeobj.rst:622
msgid ""
"Do not confuse this field with :attr:`tp_weaklist`; that is the list head "
"for weak references to the type object itself."
msgstr ""

# 47544de3257a4a90a8bf14ceaa19ab19
#: c-api/typeobj.rst:625
msgid ""
"This field is inherited by subtypes, but see the rules listed below. A "
"subtype may override this offset; this means that the subtype uses a "
"different weak reference list head than the base type.  Since the list head "
"is always found via :attr:`tp_weaklistoffset`, this should not be a problem."
msgstr ""

# 0da54d4f79154f60a1ef7f0a06753621
#: c-api/typeobj.rst:630
msgid ""
"When a type defined by a class statement has no :attr:`__slots__` "
"declaration, and none of its base types are weakly referenceable, the type "
"is made weakly referenceable by adding a weak reference list head slot to "
"the instance layout and setting the :attr:`tp_weaklistoffset` of that slot's "
"offset."
msgstr ""

# e366404646724c9caef31fcf5cd02427
#: c-api/typeobj.rst:635
msgid ""
"When a type's :attr:`__slots__` declaration contains a slot named :attr:"
"`__weakref__`, that slot becomes the weak reference list head for instances "
"of the type, and the slot's offset is stored in the type's :attr:"
"`tp_weaklistoffset`."
msgstr ""

# bca0c7d8a8ef4d85af200212a0d44d6b
#: c-api/typeobj.rst:640
msgid ""
"When a type's :attr:`__slots__` declaration does not contain a slot named :"
"attr:`__weakref__`, the type inherits its :attr:`tp_weaklistoffset` from its "
"base type."
msgstr ""

# b20191a8d7e74868aab9580616e5a08d
#: c-api/typeobj.rst:646
msgid ""
"An optional pointer to a function that returns an iterator for the object.  "
"Its presence normally signals that the instances of this type are iterable "
"(although sequences may be iterable without this function)."
msgstr ""

# 06b46a204d6047638a475cb23cef383e
#: c-api/typeobj.rst:650
msgid "This function has the same signature as :c:func:`PyObject_GetIter`."
msgstr ""

# 5fbe2feddb3e42b6a96cddc188db1b0f
#: c-api/typeobj.rst:657
msgid ""
"An optional pointer to a function that returns the next item in an iterator. "
"When the iterator is exhausted, it must return *NULL*; a :exc:"
"`StopIteration` exception may or may not be set.  When another error occurs, "
"it must return *NULL* too.  Its presence signals that the instances of this "
"type are iterators."
msgstr ""

# b2f558f9292a413194587f16de29daff
#: c-api/typeobj.rst:663
msgid ""
"Iterator types should also define the :attr:`tp_iter` function, and that "
"function should return the iterator instance itself (not a new iterator "
"instance)."
msgstr ""

# 6ecd8f83e0314fcdaf3067b084f61549
#: c-api/typeobj.rst:667
msgid "This function has the same signature as :c:func:`PyIter_Next`."
msgstr ""

# b299762e36a04dc8a639287d6bb9d4f7
#: c-api/typeobj.rst:674
msgid ""
"An optional pointer to a static *NULL*-terminated array of :c:type:"
"`PyMethodDef` structures, declaring regular methods of this type."
msgstr ""

# 0ebb7051b4fe4673bc3ab7b8b2adfd18
#: c-api/typeobj.rst:677
msgid ""
"For each entry in the array, an entry is added to the type's dictionary "
"(see :attr:`tp_dict` below) containing a method descriptor."
msgstr ""

# 6b81d9542d834cd6b324ebefdbf4aca2
#: c-api/typeobj.rst:680
msgid ""
"This field is not inherited by subtypes (methods are inherited through a "
"different mechanism)."
msgstr ""

# 7cb82fec9ce440999a05c6942f73da74
#: c-api/typeobj.rst:686
msgid ""
"An optional pointer to a static *NULL*-terminated array of :c:type:"
"`PyMemberDef` structures, declaring regular data members (fields or slots) "
"of instances of this type."
msgstr ""

# 361c792f625d412cb89af4dec0677c8e
#: c-api/typeobj.rst:690
msgid ""
"For each entry in the array, an entry is added to the type's dictionary "
"(see :attr:`tp_dict` below) containing a member descriptor."
msgstr ""

# c9fa3fb222504bf1a9a75a0e823eaf4b
#: c-api/typeobj.rst:693
msgid ""
"This field is not inherited by subtypes (members are inherited through a "
"different mechanism)."
msgstr ""

# b455891984c94226869726a727ac3f71
#: c-api/typeobj.rst:699
msgid ""
"An optional pointer to a static *NULL*-terminated array of :c:type:"
"`PyGetSetDef` structures, declaring computed attributes of instances of this "
"type."
msgstr ""

# 63feb625adab4a03a4a668b208ea6155
#: c-api/typeobj.rst:702
msgid ""
"For each entry in the array, an entry is added to the type's dictionary "
"(see :attr:`tp_dict` below) containing a getset descriptor."
msgstr ""

# 46e689cd5b154f00a34704c218ad77f8
#: c-api/typeobj.rst:705
msgid ""
"This field is not inherited by subtypes (computed attributes are inherited "
"through a different mechanism)."
msgstr ""

# 59f73c57324b4a40bf470443be964563
#: c-api/typeobj.rst:710
msgid "Docs for PyGetSetDef::"
msgstr ""

# e278e799db854c929685b0f504a83822
#: c-api/typeobj.rst:726
msgid ""
"An optional pointer to a base type from which type properties are "
"inherited.  At this level, only single inheritance is supported; multiple "
"inheritance require dynamically creating a type object by calling the "
"metatype."
msgstr ""

# d6d1787a6d744c98a726929a36b6b1b0
#: c-api/typeobj.rst:730
msgid ""
"This field is not inherited by subtypes (obviously), but it defaults to "
"``&PyBaseObject_Type`` (which to Python programmers is known as the type :"
"class:`object`)."
msgstr ""

# 38f736f6973d48969544aaf9722f2f7d
#: c-api/typeobj.rst:737
msgid "The type's dictionary is stored here by :c:func:`PyType_Ready`."
msgstr ""

# 351933855c2a49ed8a6b68be060666e5
#: c-api/typeobj.rst:739
msgid ""
"This field should normally be initialized to *NULL* before PyType_Ready is "
"called; it may also be initialized to a dictionary containing initial "
"attributes for the type.  Once :c:func:`PyType_Ready` has initialized the "
"type, extra attributes for the type may be added to this dictionary only if "
"they don't correspond to overloaded operations (like :meth:`__add__`)."
msgstr ""

# c84765ebc80c4b79a4f4d9f568cdb49f
#: c-api/typeobj.rst:745
msgid ""
"This field is not inherited by subtypes (though the attributes defined in "
"here are inherited through a different mechanism)."
msgstr ""

# 7f07533eb9b743cb8c30dc20e1f8514e
#: c-api/typeobj.rst:750
msgid ""
"It is not safe to use :c:func:`PyDict_SetItem` on or otherwise modify :attr:"
"`tp_dict` with the dictionary C-API."
msgstr ""

# cb174b70b12a454bb6b8e727bd0f93cc
#: c-api/typeobj.rst:756
msgid "An optional pointer to a \"descriptor get\" function."
msgstr ""

# 5d4b4bf974dc48819053699618c9e337
# 06c70e28ae9743769e72d6711efd097a
# 61a3e362f4c8418d9683bc321b77c790
# 8468893ed7934d5b81f451d811546f54
# d323c5dc8a0a434db7708e216a82ed83
#: c-api/typeobj.rst:758 c-api/typeobj.rst:771 c-api/typeobj.rst:842
#: c-api/typeobj.rst:864 c-api/typeobj.rst:895
msgid "The function signature is ::"
msgstr ""

# 747f0996041e45ab96d8b666d9dbb50f
#: c-api/typeobj.rst:769
msgid "An optional pointer to a \"descriptor set\" function."
msgstr ""

# d5521e30bef44b8798088138c4e997ee
#: c-api/typeobj.rst:782
msgid ""
"If the instances of this type have a dictionary containing instance "
"variables, this field is non-zero and contains the offset in the instances "
"of the type of the instance variable dictionary; this offset is used by :c:"
"func:`PyObject_GenericGetAttr`."
msgstr ""

# fb3d25f9da6a4780a8090266fdebf0f6
#: c-api/typeobj.rst:787
msgid ""
"Do not confuse this field with :attr:`tp_dict`; that is the dictionary for "
"attributes of the type object itself."
msgstr ""

# e9cdd336aa4f460eb2d87609e3759bf9
#: c-api/typeobj.rst:790
msgid ""
"If the value of this field is greater than zero, it specifies the offset "
"from the start of the instance structure.  If the value is less than zero, "
"it specifies the offset from the *end* of the instance structure.  A "
"negative offset is more expensive to use, and should only be used when the "
"instance structure contains a variable-length part.  This is used for "
"example to add an instance variable dictionary to subtypes of :class:`str` "
"or :class:`tuple`. Note that the :attr:`tp_basicsize` field should account "
"for the dictionary added to the end in that case, even though the dictionary "
"is not included in the basic object layout.  On a system with a pointer size "
"of 4 bytes, :attr:`tp_dictoffset` should be set to ``-4`` to indicate that "
"the dictionary is at the very end of the structure."
msgstr ""

# b19722c7be074695b80e4a6dce440171
#: c-api/typeobj.rst:802
msgid ""
"The real dictionary offset in an instance can be computed from a negative :"
"attr:`tp_dictoffset` as follows::"
msgstr ""

# 5dcee04120cc4682bae2cb7dafd87773
#: c-api/typeobj.rst:809
msgid ""
"where :attr:`tp_basicsize`, :attr:`tp_itemsize` and :attr:`tp_dictoffset` "
"are taken from the type object, and :attr:`ob_size` is taken from the "
"instance.  The absolute value is taken because ints use the sign of :attr:"
"`ob_size` to store the sign of the number.  (There's never a need to do this "
"calculation yourself; it is done for you by :c:func:`_PyObject_GetDictPtr`.)"
msgstr ""

# 02ed70926de8423db5ac452507440989
#: c-api/typeobj.rst:815
msgid ""
"This field is inherited by subtypes, but see the rules listed below. A "
"subtype may override this offset; this means that the subtype instances "
"store the dictionary at a difference offset than the base type.  Since the "
"dictionary is always found via :attr:`tp_dictoffset`, this should not be a "
"problem."
msgstr ""

# 2156e0c5ec594e37bd45f8cfdf91f171
#: c-api/typeobj.rst:820
msgid ""
"When a type defined by a class statement has no :attr:`__slots__` "
"declaration, and none of its base types has an instance variable dictionary, "
"a dictionary slot is added to the instance layout and the :attr:"
"`tp_dictoffset` is set to that slot's offset."
msgstr ""

# f0ba04936cb742fcb9c6c5cdf400ee22
#: c-api/typeobj.rst:825
msgid ""
"When a type defined by a class statement has a :attr:`__slots__` "
"declaration, the type inherits its :attr:`tp_dictoffset` from its base type."
msgstr ""

# 09d536f6a4a240e797d1baff0ef2cd0e
#: c-api/typeobj.rst:828
msgid ""
"(Adding a slot named :attr:`__dict__` to the :attr:`__slots__` declaration "
"does not have the expected effect, it just causes confusion.  Maybe this "
"should be added as a feature just like :attr:`__weakref__` though.)"
msgstr ""

# 3fe9646f226a4ec9990415cf2c36e7f9
#: c-api/typeobj.rst:835
msgid "An optional pointer to an instance initialization function."
msgstr ""

# 7efb70e42b9f44c498428b9597bba3c4
#: c-api/typeobj.rst:837
msgid ""
"This function corresponds to the :meth:`__init__` method of classes.  Like :"
"meth:`__init__`, it is possible to create an instance without calling :meth:"
"`__init__`, and it is possible to reinitialize an instance by calling its :"
"meth:`__init__` method again."
msgstr ""

# 2d10bb11589f4512ade8e5f15a48f4a2
#: c-api/typeobj.rst:846
msgid ""
"The self argument is the instance to be initialized; the *args* and *kwds* "
"arguments represent positional and keyword arguments of the call to :meth:"
"`__init__`."
msgstr ""

# c4edbe03fdff49f9808d2eb074445b80
#: c-api/typeobj.rst:850
msgid ""
"The :attr:`tp_init` function, if not *NULL*, is called when an instance is "
"created normally by calling its type, after the type's :attr:`tp_new` "
"function has returned an instance of the type.  If the :attr:`tp_new` "
"function returns an instance of some other type that is not a subtype of the "
"original type, no :attr:`tp_init` function is called; if :attr:`tp_new` "
"returns an instance of a subtype of the original type, the subtype's :attr:"
"`tp_init` is called."
msgstr ""

# a424b61fd30a4508b97672d72c2ebb8f
#: c-api/typeobj.rst:862
msgid "An optional pointer to an instance allocation function."
msgstr ""

# 620c84487666493ea8b31e65d5a8f9b2
#: c-api/typeobj.rst:868
msgid ""
"The purpose of this function is to separate memory allocation from memory "
"initialization.  It should return a pointer to a block of memory of adequate "
"length for the instance, suitably aligned, and initialized to zeros, but "
"with :attr:`ob_refcnt` set to ``1`` and :attr:`ob_type` set to the type "
"argument.  If the type's :attr:`tp_itemsize` is non-zero, the object's :attr:"
"`ob_size` field should be initialized to *nitems* and the length of the "
"allocated memory block should be ``tp_basicsize + nitems*tp_itemsize``, "
"rounded up to a multiple of ``sizeof(void*)``; otherwise, *nitems* is not "
"used and the length of the block should be :attr:`tp_basicsize`."
msgstr ""

# 088c928ac5a7467d995c1795911eaaad
#: c-api/typeobj.rst:878
msgid ""
"Do not use this function to do any other instance initialization, not even "
"to allocate additional memory; that should be done by :attr:`tp_new`."
msgstr ""

# 1149cc29d1a8401088b2459d24b9b9e5
#: c-api/typeobj.rst:881
msgid ""
"This field is inherited by static subtypes, but not by dynamic subtypes "
"(subtypes created by a class statement); in the latter, this field is always "
"set to :c:func:`PyType_GenericAlloc`, to force a standard heap allocation "
"strategy. That is also the recommended value for statically defined types."
msgstr ""

# f906bed610224754898033b665ea556c
#: c-api/typeobj.rst:889
msgid "An optional pointer to an instance creation function."
msgstr ""

# 739a623f9d95466c9186033514d156c2
#: c-api/typeobj.rst:891
msgid ""
"If this function is *NULL* for a particular type, that type cannot be called "
"to create new instances; presumably there is some other way to create "
"instances, like a factory function."
msgstr ""

# 3f95510ab75b4145af1a0abf06131bdf
#: c-api/typeobj.rst:899
msgid ""
"The subtype argument is the type of the object being created; the *args* and "
"*kwds* arguments represent positional and keyword arguments of the call to "
"the type.  Note that subtype doesn't have to equal the type whose :attr:"
"`tp_new` function is called; it may be a subtype of that type (but not an "
"unrelated type)."
msgstr ""

# b01f3656cb3f4a6c9afa0bb0b6188bf1
#: c-api/typeobj.rst:905
msgid ""
"The :attr:`tp_new` function should call ``subtype->tp_alloc(subtype, "
"nitems)`` to allocate space for the object, and then do only as much further "
"initialization as is absolutely necessary.  Initialization that can safely "
"be ignored or repeated should be placed in the :attr:`tp_init` handler.  A "
"good rule of thumb is that for immutable types, all initialization should "
"take place in :attr:`tp_new`, while for mutable types, most initialization "
"should be deferred to :attr:`tp_init`."
msgstr ""

# c91fee13686a4eef92bc13165df6740d
#: c-api/typeobj.rst:913
msgid ""
"This field is inherited by subtypes, except it is not inherited by static "
"types whose :attr:`tp_base` is *NULL* or ``&PyBaseObject_Type``."
msgstr ""

# c733be0c222046e388ea7dacbad00154
#: c-api/typeobj.rst:919
msgid ""
"An optional pointer to an instance deallocation function.  Its signature is :"
"c:type:`freefunc`::"
msgstr ""

# 22de2334d7ca4a8e8ec0e0258265c175
#: c-api/typeobj.rst:924
msgid ""
"An initializer that is compatible with this signature is :c:func:"
"`PyObject_Free`."
msgstr ""

# 06051b67e949413e87839612deb6f334
#: c-api/typeobj.rst:926
msgid ""
"This field is inherited by static subtypes, but not by dynamic subtypes "
"(subtypes created by a class statement); in the latter, this field is set to "
"a deallocator suitable to match :c:func:`PyType_GenericAlloc` and the value "
"of the :const:`Py_TPFLAGS_HAVE_GC` flag bit."
msgstr ""

# f7ceb3cc28e14374a4c8b1919000006c
#: c-api/typeobj.rst:934
msgid "An optional pointer to a function called by the garbage collector."
msgstr ""

# 9fae38ff7fe34ceba664ecbcf8c0504c
#: c-api/typeobj.rst:936
msgid ""
"The garbage collector needs to know whether a particular object is "
"collectible or not.  Normally, it is sufficient to look at the object's "
"type's :attr:`tp_flags` field, and check the :const:`Py_TPFLAGS_HAVE_GC` "
"flag bit.  But some types have a mixture of statically and dynamically "
"allocated instances, and the statically allocated instances are not "
"collectible.  Such types should define this function; it should return ``1`` "
"for a collectible instance, and ``0`` for a non-collectible instance. The "
"signature is ::"
msgstr ""

# a7ec20f5370b4531a081a7263ff10746
#: c-api/typeobj.rst:946
msgid ""
"(The only example of this are types themselves.  The metatype, :c:data:"
"`PyType_Type`, defines this function to distinguish between statically and "
"dynamically allocated types.)"
msgstr ""

# 9c7445cb3e724af2900e3107bdae2140
#: c-api/typeobj.rst:955
msgid "Tuple of base types."
msgstr ""

# 9c4ac1e6db6f474aa806eee021776c94
#: c-api/typeobj.rst:957
msgid ""
"This is set for types created by a class statement.  It should be *NULL* for "
"statically defined types."
msgstr ""

# 05155e82912a4ed4a66c685d2805bc75
#: c-api/typeobj.rst:960
msgid "This field is not inherited."
msgstr ""

# 1be6a7a3042d4f39a172477a51be311f
#: c-api/typeobj.rst:965
msgid ""
"Tuple containing the expanded set of base types, starting with the type "
"itself and ending with :class:`object`, in Method Resolution Order."
msgstr ""

# 2a5a75b817ff4a89859eadaf7d15ec01
#: c-api/typeobj.rst:968
msgid ""
"This field is not inherited; it is calculated fresh by :c:func:"
"`PyType_Ready`."
msgstr ""

# 02e20fca6b7240188a5a08635216af53
#: c-api/typeobj.rst:973
msgid "Unused.  Not inherited.  Internal use only."
msgstr ""

# c72a77dc3ddf40de8ac2d93fd3c2ac19
#: c-api/typeobj.rst:978
msgid ""
"List of weak references to subclasses.  Not inherited.  Internal use only."
msgstr ""

# 89a9c5291ce44e569d94bca8efaa99e8
#: c-api/typeobj.rst:983
msgid ""
"Weak reference list head, for weak references to this type object.  Not "
"inherited.  Internal use only."
msgstr ""

# ecfd776316974fd4903af0666baa3efc
#: c-api/typeobj.rst:986
msgid ""
"The remaining fields are only defined if the feature test macro :const:"
"`COUNT_ALLOCS` is defined, and are for internal use only. They are "
"documented here for completeness.  None of these fields are inherited by "
"subtypes."
msgstr ""

# 4f34408871ad4457b5ffdfe76da729f8
#: c-api/typeobj.rst:994
msgid "Number of allocations."
msgstr ""

# 364e5be59f2f429295916ebad4bc9e47
#: c-api/typeobj.rst:999
msgid "Number of frees."
msgstr ""

# 91d2db4b19684d70961bbda3c01e0563
#: c-api/typeobj.rst:1004
msgid "Maximum simultaneously allocated objects."
msgstr ""

# cadaa3dee3f941b2b2e277c694e2874b
#: c-api/typeobj.rst:1009
msgid ""
"Pointer to the next type object with a non-zero :attr:`tp_allocs` field."
msgstr ""

# ae3b137e2cba42b7ade169f7c052289e
#: c-api/typeobj.rst:1011
msgid ""
"Also, note that, in a garbage collected Python, tp_dealloc may be called "
"from any Python thread, not just the thread which created the object (if the "
"object becomes part of a refcount cycle, that cycle might be collected by a "
"garbage collection on any thread).  This is not a problem for Python API "
"calls, since the thread on which tp_dealloc is called will own the Global "
"Interpreter Lock (GIL). However, if the object being destroyed in turn "
"destroys objects from some other C or C++ library, care should be taken to "
"ensure that destroying those objects on the thread which called tp_dealloc "
"will not violate any assumptions of the library."
msgstr ""

# 2555644375644ec5ac33e27dfd918f7c
#: c-api/typeobj.rst:1025
msgid "Number Object Structures"
msgstr ""

# c6f6b84e5ff349a0b9580747498dcc21
#: c-api/typeobj.rst:1032
msgid ""
"This structure holds pointers to the functions which an object uses to "
"implement the number protocol.  Each function is used by the function of "
"similar name documented in the :ref:`number` section."
msgstr ""

# 1b8b319ca86a4a9496d058352ac1f0dc
#: c-api/typeobj.rst:1036
msgid "Here is the structure definition::"
msgstr ""

# 38b4d0ccdf044c3ebebabe5234800980
#: c-api/typeobj.rst:1080
msgid ""
"Binary and ternary functions must check the type of all their operands, and "
"implement the necessary conversions (at least one of the operands is an "
"instance of the defined type).  If the operation is not defined for the "
"given operands, binary and ternary functions must return "
"``Py_NotImplemented``, if another error occurred they must return ``NULL`` "
"and set an exception."
msgstr ""

# c4ffb30ad9184f7ead692bcb66378654
#: c-api/typeobj.rst:1089
msgid ""
"The :c:data:`nb_reserved` field should always be ``NULL``.  It was "
"previously called :c:data:`nb_long`, and was renamed in Python 3.0.1."
msgstr ""

# 358c0b211eab48c6abce450103852de7
#: c-api/typeobj.rst:1097
msgid "Mapping Object Structures"
msgstr ""

# 070fa10b3b704d0fa56a3ad276b08e0f
#: c-api/typeobj.rst:1104
msgid ""
"This structure holds pointers to the functions which an object uses to "
"implement the mapping protocol.  It has three members:"
msgstr ""

# c35f81942f224845a3d87d2b260e0cfc
#: c-api/typeobj.rst:1109
msgid ""
"This function is used by :c:func:`PyMapping_Length` and :c:func:"
"`PyObject_Size`, and has the same signature.  This slot may be set to *NULL* "
"if the object has no defined length."
msgstr ""

# 1e6afdc5850e496cb3f2bc1f8be579c3
#: c-api/typeobj.rst:1115
msgid ""
"This function is used by :c:func:`PyObject_GetItem` and has the same "
"signature.  This slot must be filled for the :c:func:`PyMapping_Check` "
"function to return ``1``, it can be *NULL* otherwise."
msgstr ""

# c06c684d61664dc9aa2f788f543d6a06
#: c-api/typeobj.rst:1121
msgid ""
"This function is used by :c:func:`PyObject_SetItem` and has the same "
"signature.  If this slot is *NULL*, the object does not support item "
"assignment."
msgstr ""

# 6be98eda682143b5adda9cde144a06dd
#: c-api/typeobj.rst:1129
msgid "Sequence Object Structures"
msgstr ""

# 36c04af326504bb187649b81e9810c42
#: c-api/typeobj.rst:1136
msgid ""
"This structure holds pointers to the functions which an object uses to "
"implement the sequence protocol."
msgstr ""

# 58c05aab422240ce9ae22f555ca91bdd
#: c-api/typeobj.rst:1141
msgid ""
"This function is used by :c:func:`PySequence_Size` and :c:func:"
"`PyObject_Size`, and has the same signature."
msgstr ""

# 50b553589f514fb0b3f9c9ae07dd05c1
#: c-api/typeobj.rst:1146
msgid ""
"This function is used by :c:func:`PySequence_Concat` and has the same "
"signature.  It is also used by the ``+`` operator, after trying the numeric "
"addition via the :attr:`tp_as_number.nb_add` slot."
msgstr ""

# d6c88cd755c645878f578e1a95c8245c
#: c-api/typeobj.rst:1152
msgid ""
"This function is used by :c:func:`PySequence_Repeat` and has the same "
"signature.  It is also used by the ``*`` operator, after trying numeric "
"multiplication via the :attr:`tp_as_number.nb_mul` slot."
msgstr ""

# e1b66038a0a845d982bd6f940024015e
#: c-api/typeobj.rst:1158
msgid ""
"This function is used by :c:func:`PySequence_GetItem` and has the same "
"signature.  This slot must be filled for the :c:func:`PySequence_Check` "
"function to return ``1``, it can be *NULL* otherwise."
msgstr ""

# 21877f2587be4df7bda60324dbb262cc
#: c-api/typeobj.rst:1162
msgid ""
"Negative indexes are handled as follows: if the :attr:`sq_length` slot is "
"filled, it is called and the sequence length is used to compute a positive "
"index which is passed to :attr:`sq_item`.  If :attr:`sq_length` is *NULL*, "
"the index is passed as is to the function."
msgstr ""

# ccc0bb8d8f134acc978fd3112452f9d5
#: c-api/typeobj.rst:1169
msgid ""
"This function is used by :c:func:`PySequence_SetItem` and has the same "
"signature.  This slot may be left to *NULL* if the object does not support "
"item assignment."
msgstr ""

# 3f43e554cb1f4427b0abc62ef6b65aa2
#: c-api/typeobj.rst:1175
msgid ""
"This function may be used by :c:func:`PySequence_Contains` and has the same "
"signature.  This slot may be left to *NULL*, in this case :c:func:"
"`PySequence_Contains` simply traverses the sequence until it finds a match."
msgstr ""

# b225ccf211594f979ce89c0323a2ab17
#: c-api/typeobj.rst:1182
msgid ""
"This function is used by :c:func:`PySequence_InPlaceConcat` and has the same "
"signature.  It should modify its first operand, and return it."
msgstr ""

# 45380020187d434faf3220a7bb41a51c
#: c-api/typeobj.rst:1187
msgid ""
"This function is used by :c:func:`PySequence_InPlaceRepeat` and has the same "
"signature.  It should modify its first operand, and return it."
msgstr ""

# c1e927a961d64e52a6d1caaf651754f4
#: c-api/typeobj.rst:1197
msgid "Buffer Object Structures"
msgstr ""

# 3454d1976b504cf1878ee5210c062f67
#: c-api/typeobj.rst:1203
msgid ""
"The :ref:`buffer interface <bufferobjects>` exports a model where an object "
"can expose its internal data."
msgstr ""

# c5a2083a23af40a3bc64c95c3996ad0a
#: c-api/typeobj.rst:1206
msgid ""
"If an object does not export the buffer interface, then its :attr:"
"`tp_as_buffer` member in the :c:type:`PyTypeObject` structure should be "
"*NULL*.  Otherwise, the :attr:`tp_as_buffer` will point to a :c:type:"
"`PyBufferProcs` structure."
msgstr ""

# ad7fcb8178e14d068618450167d0279b
#: c-api/typeobj.rst:1213
msgid ""
"Structure used to hold the function pointers which define an implementation "
"of the buffer protocol."
msgstr ""

# b91ce94681a74b68a7fe0e17c6ab9fb4
#: c-api/typeobj.rst:1218
msgid ""
"This should fill a :c:type:`Py_buffer` with the necessary data for exporting "
"the type.  The signature of :data:`getbufferproc` is ``int (PyObject *obj, "
"Py_buffer *view, int flags)``.  *obj* is the object to export, *view* is "
"the :c:type:`Py_buffer` struct to fill, and *flags* gives the conditions the "
"caller wants the memory under.  (See :c:func:`PyObject_GetBuffer` for all "
"flags.)  :c:member:`bf_getbuffer` is responsible for filling *view* with the "
"appropriate information. (:c:func:`PyBuffer_FillView` can be used in simple "
"cases.)  See :c:type:`Py_buffer`\\s docs for what needs to be filled in."
msgstr ""

# 900052e4e6b346c18208dab3719b1da4
#: c-api/typeobj.rst:1231
msgid ""
"This should release the resources of the buffer.  The signature of :c:data:"
"`releasebufferproc` is ``void (PyObject *obj, Py_buffer *view)``. If the :c:"
"data:`bf_releasebuffer` function is not provided (i.e. it is *NULL*), then "
"it does not ever need to be called."
msgstr ""

# b72868dc9f8c4f8da58d4f210f7021a0
#: c-api/typeobj.rst:1236
msgid ""
"The exporter of the buffer interface must make sure that any memory pointed "
"to in the :c:type:`Py_buffer` structure remains valid until releasebuffer is "
"called.  Exporters will need to define a :c:data:`bf_releasebuffer` function "
"if they can re-allocate their memory, strides, shape, suboffsets, or format "
"variables which they might share through the struct bufferinfo."
msgstr ""

# 56a3b1befc0841e0aa4ba80b5e41f747
#: c-api/typeobj.rst:1243
msgid "See :c:func:`PyBuffer_Release`."
msgstr ""

# 26afbf13fe0d44d397d39aafc9f122b5
#: c-api/unicode.rst:6
msgid "Unicode Objects and Codecs"
msgstr ""

# 847bfeebee794de0af9eaefe040dbacb
#: c-api/unicode.rst:11
msgid "Unicode Objects"
msgstr ""

# 381de8e1492b4b90b267893006c6e0b3
#: c-api/unicode.rst:14
msgid "Unicode Type"
msgstr ""

# b05fe7c9584a4d4086a7343fc7812693
#: c-api/unicode.rst:16
msgid ""
"These are the basic Unicode object types used for the Unicode implementation "
"in Python:"
msgstr ""

# 064f98dcca2a42d3bdcc565522eae83b
#: c-api/unicode.rst:22
msgid ""
"This type represents the storage type which is used by Python internally as "
"basis for holding Unicode ordinals.  Python's default builds use a 16-bit "
"type for :c:type:`Py_UNICODE` and store Unicode values internally as UCS2. "
"It is also possible to build a UCS4 version of Python (most recent Linux "
"distributions come with UCS4 builds of Python). These builds then use a 32-"
"bit type for :c:type:`Py_UNICODE` and store Unicode data internally as UCS4. "
"On platforms where :c:type:`wchar_t` is available and compatible with the "
"chosen Python Unicode build variant, :c:type:`Py_UNICODE` is a typedef alias "
"for :c:type:`wchar_t` to enhance native platform compatibility. On all other "
"platforms, :c:type:`Py_UNICODE` is a typedef alias for either :c:type:"
"`unsigned short` (UCS2) or :c:type:`unsigned long` (UCS4)."
msgstr ""

# 5ec5db3763c64c87890d01f19319eeca
#: c-api/unicode.rst:34
msgid ""
"Note that UCS2 and UCS4 Python builds are not binary compatible. Please keep "
"this in mind when writing extensions or interfaces."
msgstr ""

# 4207d6adfdee4270b9af6ff91a7e150d
#: c-api/unicode.rst:40
msgid "This subtype of :c:type:`PyObject` represents a Python Unicode object."
msgstr ""

# 286a8ce2db0642c3b77dc853e412b4b6
#: c-api/unicode.rst:45
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python Unicode type.  "
"It is exposed to Python code as ``str``."
msgstr ""

# 04c7ddc0e082456ea4d08d2e385c7aca
#: c-api/unicode.rst:48
msgid ""
"The following APIs are really C macros and can be used to do fast checks and "
"to access internal read-only data of Unicode objects:"
msgstr ""

# bb1a925861524a469314219f9790668a
#: c-api/unicode.rst:54
msgid ""
"Return true if the object *o* is a Unicode object or an instance of a "
"Unicode subtype."
msgstr ""

# 2a99fac638ff435fa127e372168c906c
#: c-api/unicode.rst:60
msgid ""
"Return true if the object *o* is a Unicode object, but not an instance of a "
"subtype."
msgstr ""

# 5de4c0747d00437ebb52ebc3bcbd107c
#: c-api/unicode.rst:66
msgid ""
"Return the size of the object.  *o* has to be a :c:type:`PyUnicodeObject` "
"(not checked)."
msgstr ""

# 50120ab8bfe24ffbbb5d77d1ae1750e7
#: c-api/unicode.rst:72
msgid ""
"Return the size of the object's internal buffer in bytes.  *o* has to be a :"
"c:type:`PyUnicodeObject` (not checked)."
msgstr ""

# b36b1ece74214e09a40fa808f011358f
#: c-api/unicode.rst:78
msgid ""
"Return a pointer to the internal :c:type:`Py_UNICODE` buffer of the object.  "
"*o* has to be a :c:type:`PyUnicodeObject` (not checked)."
msgstr ""

# cfd84f4df05e46089bdf7c89a8ea30c2
#: c-api/unicode.rst:84
msgid ""
"Return a pointer to the internal buffer of the object. *o* has to be a :c:"
"type:`PyUnicodeObject` (not checked)."
msgstr ""

# 0e6637eaacde4f47be995a8117134ab7
#: c-api/unicode.rst:94
msgid "Unicode Character Properties"
msgstr ""

# bba5325e47244b259520fe4ce7428d2a
#: c-api/unicode.rst:96
msgid ""
"Unicode provides many different character properties. The most often needed "
"ones are available through these macros which are mapped to C functions "
"depending on the Python configuration."
msgstr ""

# f7f983c8aff54b0d8b94dfb3aaa75636
#: c-api/unicode.rst:103
msgid "Return 1 or 0 depending on whether *ch* is a whitespace character."
msgstr ""

# 1e3810c3e5bd45a8920d8dbce24acbf8
#: c-api/unicode.rst:108
msgid "Return 1 or 0 depending on whether *ch* is a lowercase character."
msgstr ""

# c95b9189503547d0890c91f7915bd6b6
#: c-api/unicode.rst:113
msgid "Return 1 or 0 depending on whether *ch* is an uppercase character."
msgstr ""

# 90219eb76de249709b7368f012903062
#: c-api/unicode.rst:118
msgid "Return 1 or 0 depending on whether *ch* is a titlecase character."
msgstr ""

# 3ee0d7f40ad543e581a07ba01deffc4d
#: c-api/unicode.rst:123
msgid "Return 1 or 0 depending on whether *ch* is a linebreak character."
msgstr ""

# 6e158afdf8a7468d89524451f7706d13
#: c-api/unicode.rst:128
msgid "Return 1 or 0 depending on whether *ch* is a decimal character."
msgstr ""

# db94a63a2f684e2a83d5d3e3a727af4c
#: c-api/unicode.rst:133
msgid "Return 1 or 0 depending on whether *ch* is a digit character."
msgstr ""

# c10458834722422687c21ce8eeb1fc82
#: c-api/unicode.rst:138
msgid "Return 1 or 0 depending on whether *ch* is a numeric character."
msgstr ""

# 12ca3598f3024263aed26b345e306bbd
#: c-api/unicode.rst:143
msgid "Return 1 or 0 depending on whether *ch* is an alphabetic character."
msgstr ""

# c248d07ca5ac4f699ee32fea62286bc3
#: c-api/unicode.rst:148
msgid "Return 1 or 0 depending on whether *ch* is an alphanumeric character."
msgstr ""

# cc650845a55745e8abe392cd8e011655
#: c-api/unicode.rst:153
msgid ""
"Return 1 or 0 depending on whether *ch* is a printable character. "
"Nonprintable characters are those characters defined in the Unicode "
"character database as \"Other\" or \"Separator\", excepting the ASCII space "
"(0x20) which is considered printable.  (Note that printable characters in "
"this context are those which should not be escaped when :func:`repr` is "
"invoked on a string. It has no bearing on the handling of strings written "
"to :data:`sys.stdout` or :data:`sys.stderr`.)"
msgstr ""

# a1bf0e05a7374b4ab684889a884a7ddb
#: c-api/unicode.rst:162
msgid "These APIs can be used for fast direct character conversions:"
msgstr ""

# 5882ba6950b748c393d5245077da0b20
#: c-api/unicode.rst:167
msgid "Return the character *ch* converted to lower case."
msgstr ""

# f017bdf1397148b4a437b74895d60574
#: c-api/unicode.rst:172
msgid "Return the character *ch* converted to upper case."
msgstr ""

# 9e5344e2a8f74c63b459c5865450c265
#: c-api/unicode.rst:177
msgid "Return the character *ch* converted to title case."
msgstr ""

# 069c79ffd0f14858b24ad2988cb3f2c5
#: c-api/unicode.rst:182
msgid ""
"Return the character *ch* converted to a decimal positive integer.  Return "
"``-1`` if this is not possible.  This macro does not raise exceptions."
msgstr ""

# 04aecf68b42b4fa7ab8dd6def403dc56
#: c-api/unicode.rst:188
msgid ""
"Return the character *ch* converted to a single digit integer. Return ``-1`` "
"if this is not possible.  This macro does not raise exceptions."
msgstr ""

# b165c24146fd4f79a728713017e63aca
#: c-api/unicode.rst:194
msgid ""
"Return the character *ch* converted to a double. Return ``-1.0`` if this is "
"not possible.  This macro does not raise exceptions."
msgstr ""

# 2902e737ba9b4fc090829b6360a1d8d2
#: c-api/unicode.rst:199
msgid "Plain Py_UNICODE"
msgstr ""

# b08ce53f51464adfb292bf5308278326
#: c-api/unicode.rst:201
msgid ""
"To create Unicode objects and access their basic sequence properties, use "
"these APIs:"
msgstr ""

# 5ad8bf4fe7e844fca7eedbe42882dee4
#: c-api/unicode.rst:207
msgid ""
"Create a Unicode object from the Py_UNICODE buffer *u* of the given size. "
"*u* may be *NULL* which causes the contents to be undefined. It is the "
"user's responsibility to fill in the needed data.  The buffer is copied into "
"the new object. If the buffer is not *NULL*, the return value might be a "
"shared object. Therefore, modification of the resulting Unicode object is "
"only allowed when *u* is *NULL*."
msgstr ""

# bf789b77a1694fd2a531c4c8e10b90a7
#: c-api/unicode.rst:217
msgid ""
"Create a Unicode object from the char buffer *u*.  The bytes will be "
"interpreted as being UTF-8 encoded.  *u* may also be *NULL* which causes the "
"contents to be undefined. It is the user's responsibility to fill in the "
"needed data.  The buffer is copied into the new object. If the buffer is not "
"*NULL*, the return value might be a shared object. Therefore, modification "
"of the resulting Unicode object is only allowed when *u* is *NULL*."
msgstr ""

# 81be8544ad104b73addf1feffe9cbe9a
#: c-api/unicode.rst:227
msgid ""
"Create a Unicode object from an UTF-8 encoded null-terminated char buffer "
"*u*."
msgstr ""

# d362e9c9774f470c84560a6c49bee4d0
#: c-api/unicode.rst:233
msgid ""
"Take a C :c:func:`printf`\\ -style *format* string and a variable number of "
"arguments, calculate the size of the resulting Python unicode string and "
"return a string with the values formatted into it.  The variable arguments "
"must be C types and must correspond exactly to the format characters in the "
"*format* ASCII-encoded string. The following format characters are allowed:"
msgstr ""

# cfe4cc6a05c842e2af19294b95ea1396
#: c-api/unicode.rst:266
msgid ":attr:`%lld`"
msgstr ""

# 414c30cf572b4f4c8c366766b3eec924
#: c-api/unicode.rst:266
msgid "Exactly equivalent to ``printf(\"%lld\")``."
msgstr ""

# 7d8577df66f04c74a5d9244a994b9a69
#: c-api/unicode.rst:269
msgid ":attr:`%llu`"
msgstr ""

# 530887265c7b4ed7b965824461adde0a
#: c-api/unicode.rst:269
msgid "Exactly equivalent to ``printf(\"%llu\")``."
msgstr ""

# 41ee09ddd0dd4913a5c879fa70ac6b5f
#: c-api/unicode.rst:295
msgid ":attr:`%A`"
msgstr ""

# df959080ad3e455794b605cd5f86630d
# 50882ebbc1c7415f8ee67a45f6d69e79
# b7e2b4de39f94d80989afae64580edb5
# 8359c726ec934effb763fce578d5848c
#: c-api/unicode.rst:295 c-api/unicode.rst:298 c-api/unicode.rst:307
#: c-api/unicode.rst:310
msgid "PyObject\\*"
msgstr ""

# 6298ce6711f54f62a62a889e5a24a0bf
#: c-api/unicode.rst:295
msgid "The result of calling :func:`ascii`."
msgstr ""

# 54086541d9c646239a62b55f390948a0
#: c-api/unicode.rst:298
msgid ":attr:`%U`"
msgstr ""

# 806d621e5fa9407eb68ac636fc42a9ed
#: c-api/unicode.rst:298
msgid "A unicode object."
msgstr ""

# 757e43fe302544d3a8a8e78de8967a4d
#: c-api/unicode.rst:300
msgid ":attr:`%V`"
msgstr ""

# ffe875b3f72e4eb48b0ad935dc19566d
#: c-api/unicode.rst:300
msgid "PyObject\\*, char \\*"
msgstr ""

# c3444031dd534da29c6dc55e602b6889
#: c-api/unicode.rst:300
msgid ""
"A unicode object (which may be *NULL*) and a null-terminated C character "
"array as a second parameter (which will be used, if the first parameter is "
"*NULL*)."
msgstr ""

# e974b53443b4482aad8152b14b3ffa9b
#: c-api/unicode.rst:307
msgid ":attr:`%S`"
msgstr ""

# 0aefcc98ead945a38472c678ad3293e4
#: c-api/unicode.rst:307
msgid "The result of calling :c:func:`PyObject_Str`."
msgstr ""

# 8f0f0b08279848569ad9bacd371d88e5
#: c-api/unicode.rst:310
msgid ":attr:`%R`"
msgstr ""

# 2240ec660e8340c2a3789e32135e02bc
#: c-api/unicode.rst:310
msgid "The result of calling :c:func:`PyObject_Repr`."
msgstr ""

# 3f1d5bd6b034467ca55cc9542456b1af
#: c-api/unicode.rst:319
msgid ""
"The `\"%lld\"` and `\"%llu\"` format specifiers are only available when :"
"const:`HAVE_LONG_LONG` is defined."
msgstr ""

# 02636a538280495d8235d22e5794be46
#: c-api/unicode.rst:328
msgid ""
"Identical to :c:func:`PyUnicode_FromFormat` except that it takes exactly two "
"arguments."
msgstr ""

# 76f126a26b6e4bf6b8cf8cfbf4f91012
#: c-api/unicode.rst:333
msgid ""
"Create a Unicode object by replacing all decimal digits in :c:type:"
"`Py_UNICODE` buffer of the given *size* by ASCII digits 0--9 according to "
"their decimal value.  Return *NULL* if an exception occurs."
msgstr ""

# 55d436052b7f47f1967e25fa410708c2
#: c-api/unicode.rst:341
msgid ""
"Return a read-only pointer to the Unicode object's internal :c:type:"
"`Py_UNICODE` buffer, *NULL* if *unicode* is not a Unicode object. Note that "
"the resulting :c:type:`Py_UNICODE*` string may contain embedded null "
"characters, which would cause the string to be truncated when used in most C "
"functions."
msgstr ""

# 7fb56eb001cb4d0d992a5394359159ed
#: c-api/unicode.rst:350
msgid ""
"Create a copy of a Unicode string ending with a nul character. Return *NULL* "
"and raise a :exc:`MemoryError` exception on memory allocation failure, "
"otherwise return a new allocated buffer (use :c:func:`PyMem_Free` to free "
"the buffer). Note that the resulting :c:type:`Py_UNICODE*` string may "
"contain embedded null characters, which would cause the string to be "
"truncated when used in most C functions."
msgstr ""

# 0feecb5b61ee411cafa5dd75137e71ed
#: c-api/unicode.rst:362
msgid "Return the length of the Unicode object."
msgstr ""

# bc65bd68abd147d29ddcebd25510a3e1
#: c-api/unicode.rst:367
msgid ""
"Coerce an encoded object *obj* to an Unicode object and return a reference "
"with incremented refcount."
msgstr ""

# 3f18cfda8f0e4227807c4ba38c4a6d32
#: c-api/unicode.rst:370
msgid ""
":class:`bytes`, :class:`bytearray` and other char buffer compatible objects "
"are decoded according to the given *encoding* and using the error handling "
"defined by *errors*. Both can be *NULL* to have the interface use the "
"default values (see the next section for details)."
msgstr ""

# d189cd477cc04edca14f68187be3a361
#: c-api/unicode.rst:375
msgid ""
"All other objects, including Unicode objects, cause a :exc:`TypeError` to be "
"set."
msgstr ""

# 00d6a64831d14829b2aa63665f5eecbc
#: c-api/unicode.rst:378
msgid ""
"The API returns *NULL* if there was an error.  The caller is responsible for "
"decref'ing the returned objects."
msgstr ""

# 8ce589a975ca413f97b5206e348c8179
#: c-api/unicode.rst:384
msgid ""
"Shortcut for ``PyUnicode_FromEncodedObject(obj, NULL, \"strict\")`` which is "
"used throughout the interpreter whenever coercion to Unicode is needed."
msgstr ""

# 8cc8000c65eb453288ad215cb7f070fa
#: c-api/unicode.rst:387
msgid ""
"If the platform supports :c:type:`wchar_t` and provides a header file wchar."
"h, Python can interface directly to this type using the following functions. "
"Support is optimized if Python's own :c:type:`Py_UNICODE` type is identical "
"to the system's :c:type:`wchar_t`."
msgstr ""

# 3da508ee600744589b19f2b0490a3351
#: c-api/unicode.rst:394
msgid "File System Encoding"
msgstr ""

# 981634b2ce94435f9ef24ccec8e3da94
#: c-api/unicode.rst:396
msgid ""
"To encode and decode file names and other environment strings, :c:data:"
"`Py_FileSystemEncoding` should be used as the encoding, and ``"
"\"surrogateescape\"`` should be used as the error handler (:pep:`383`). To "
"encode file names during argument parsing, the ``\"O&\"`` converter should "
"be used, passing :c:func:`PyUnicode_FSConverter` as the conversion function:"
msgstr ""

# 505cf952a36446fdbdea4e5e1907bc08
#: c-api/unicode.rst:404
msgid ""
"ParseTuple converter: encode :class:`str` objects to :class:`bytes` using :c:"
"func:`PyUnicode_EncodeFSDefault`; :class:`bytes` objects are output as-is. "
"*result* must be a :c:type:`PyBytesObject*` which must be released when it "
"is no longer used."
msgstr ""

# f5069455c75a4439bf5e9e0df090a816
#: c-api/unicode.rst:412
msgid ""
"To decode file names during argument parsing, the ``\"O&\"`` converter "
"should be used, passing :c:func:`PyUnicode_FSDecoder` as the conversion "
"function:"
msgstr ""

# 8e56d9ffcc2248f39bae41ad828a98b1
#: c-api/unicode.rst:417
msgid ""
"ParseTuple converter: decode :class:`bytes` objects to :class:`str` using :c:"
"func:`PyUnicode_DecodeFSDefaultAndSize`; :class:`str` objects are output as-"
"is. *result* must be a :c:type:`PyUnicodeObject*` which must be released "
"when it is no longer used."
msgstr ""

# a321805ac0f54132b3cd7941d9cedbca
#: c-api/unicode.rst:427
msgid ""
"Decode a string using :c:data:`Py_FileSystemDefaultEncoding` and the "
"``'surrogateescape'`` error handler, or ``'strict'`` on Windows."
msgstr ""

# 2b33407533f24462bb3227b757429e8f
# 37e9eae5d32842dab5acafe2402b1744
# 539ebfbf2f9f4b4b8182b08c305b9c63
#: c-api/unicode.rst:430 c-api/unicode.rst:442 c-api/unicode.rst:458
msgid ""
"If :c:data:`Py_FileSystemDefaultEncoding` is not set, fall back to the "
"locale encoding."
msgstr ""

# 81dbaf42aeb54257b6b8f6ec90f002ed
#: c-api/unicode.rst:439
msgid ""
"Decode a null-terminated string using :c:data:`Py_FileSystemDefaultEncoding` "
"and the ``'surrogateescape'`` error handler, or ``'strict'`` on Windows."
msgstr ""

# 2a76476a07444e5d87363204c8802da7
#: c-api/unicode.rst:445
msgid ""
"Use :c:func:`PyUnicode_DecodeFSDefaultAndSize` if you know the string length."
msgstr ""

# 1bc9fee2fd7047d5a31f9dad6e2f86c5
#: c-api/unicode.rst:453
msgid ""
"Encode a Unicode object to :c:data:`Py_FileSystemDefaultEncoding` with the "
"``'surrogateescape'`` error handler, or ``'strict'`` on Windows, and return :"
"class:`bytes`. Note that the resulting :class:`bytes` object may contain "
"null bytes."
msgstr ""

# c0750b01391f4e0b9e1092b3841bc5a3
#: c-api/unicode.rst:465
msgid "wchar_t Support"
msgstr ""

# 1ff5b9335b754ea3ad3df3a17980d541
#: c-api/unicode.rst:467
msgid ":c:type:`wchar_t` support for platforms which support it:"
msgstr ""

# 6118ec1ff3ed4defa8d0d4a1b7c5aeb3
#: c-api/unicode.rst:471
msgid ""
"Create a Unicode object from the :c:type:`wchar_t` buffer *w* of the given "
"*size*. Passing -1 as the *size* indicates that the function must itself "
"compute the length, using wcslen. Return *NULL* on failure."
msgstr ""

# 6d3cc8d6be7c4ca9bb40946261ecb8dd
#: c-api/unicode.rst:479
msgid ""
"Copy the Unicode object contents into the :c:type:`wchar_t` buffer *w*.  At "
"most *size* :c:type:`wchar_t` characters are copied (excluding a possibly "
"trailing 0-termination character).  Return the number of :c:type:`wchar_t` "
"characters copied or -1 in case of an error.  Note that the resulting :c:"
"type:`wchar_t` string may or may not be 0-terminated.  It is the "
"responsibility of the caller to make sure that the :c:type:`wchar_t` string "
"is 0-terminated in case this is required by the application. Also, note that "
"the :c:type:`wchar_t*` string might contain null characters, which would "
"cause the string to be truncated when used with most C functions."
msgstr ""

# 9b878d06729f460c8b7b4c6ca83ae4dc
#: c-api/unicode.rst:492
msgid ""
"Convert the Unicode object to a wide character string. The output string "
"always ends with a nul character. If *size* is not *NULL*, write the number "
"of wide characters (excluding the trailing 0-termination character) into *"
"\\*size*."
msgstr ""

# ee2e6b4380484f9886d5f9a8083a09b3
#: c-api/unicode.rst:497
msgid ""
"Returns a buffer allocated by :c:func:`PyMem_Alloc` (use :c:func:"
"`PyMem_Free` to free it) on success. On error, returns *NULL*, *\\*size* is "
"undefined and raises a :exc:`MemoryError`. Note that the resulting :c:type:"
"`wchar_t*` string might contain null characters, which would cause the "
"string to be truncated when used with most C functions."
msgstr ""

# 184b9a4fbd7b47958aef93b8d45961fd
#: c-api/unicode.rst:509
msgid "Built-in Codecs"
msgstr ""

# 0241f149961d4ba7be5f814443dbaded
#: c-api/unicode.rst:511
msgid ""
"Python provides a set of built-in codecs which are written in C for speed. "
"All of these codecs are directly usable via the following functions."
msgstr ""

# aa9896925c3b4b7b9e6cc9caa82dbd80
#: c-api/unicode.rst:514
msgid ""
"Many of the following APIs take two arguments encoding and errors, and they "
"have the same semantics as the ones of the built-in :func:`str` string "
"object constructor."
msgstr ""

# 2f4060b189354577a2572670f42f3a53
#: c-api/unicode.rst:518
msgid ""
"Setting encoding to *NULL* causes the default encoding to be used which is "
"ASCII.  The file system calls should use :c:func:`PyUnicode_FSConverter` for "
"encoding file names. This uses the variable :c:data:"
"`Py_FileSystemDefaultEncoding` internally. This variable should be treated "
"as read-only: on some systems, it will be a pointer to a static string, on "
"others, it will change at run-time (such as when the application invokes "
"setlocale)."
msgstr ""

# 2e03f599825f460c9d73b5bd39cd581f
#: c-api/unicode.rst:526
msgid ""
"Error handling is set by errors which may also be set to *NULL* meaning to "
"use the default handling defined for the codec.  Default error handling for "
"all built-in codecs is \"strict\" (:exc:`ValueError` is raised)."
msgstr ""

# 27b43534de6c4183b34cf414dab1c889
#: c-api/unicode.rst:530
msgid ""
"The codecs all use a similar interface.  Only deviation from the following "
"generic ones are documented for simplicity."
msgstr ""

# a2929cd05b40492b8e96620293290e00
#: c-api/unicode.rst:535
msgid "Generic Codecs"
msgstr ""

# 577be017473f47629c57fa74f2e59554
#: c-api/unicode.rst:537
msgid "These are the generic codec APIs:"
msgstr ""

# 2ed7fe24b7144a9785134d3cd6500a95
#: c-api/unicode.rst:542
msgid ""
"Create a Unicode object by decoding *size* bytes of the encoded string *s*. "
"*encoding* and *errors* have the same meaning as the parameters of the same "
"name in the :func:`unicode` built-in function.  The codec to be used is "
"looked up using the Python codec registry.  Return *NULL* if an exception "
"was raised by the codec."
msgstr ""

# ae0e2adea8d74926986251a87627f4e8
#: c-api/unicode.rst:551
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer *s* of the given *size* and return a "
"Python bytes object.  *encoding* and *errors* have the same meaning as the "
"parameters of the same name in the Unicode :meth:`encode` method.  The codec "
"to be used is looked up using the Python codec registry.  Return *NULL* if "
"an exception was raised by the codec."
msgstr ""

# 241e1f3b11354692ada124fd1ba5540e
#: c-api/unicode.rst:560
msgid ""
"Encode a Unicode object and return the result as Python bytes object. "
"*encoding* and *errors* have the same meaning as the parameters of the same "
"name in the Unicode :meth:`encode` method. The codec to be used is looked up "
"using the Python codec registry. Return *NULL* if an exception was raised by "
"the codec."
msgstr ""

# 698f2bf267c747c1bc1e08c99e4e6a7c
#: c-api/unicode.rst:568
msgid "UTF-8 Codecs"
msgstr ""

# a866ad26a39a4ac5a4b039cf835286d3
#: c-api/unicode.rst:570
msgid "These are the UTF-8 codec APIs:"
msgstr ""

# 659c37a288df4b9e97b8fd0fd9f82f64
#: c-api/unicode.rst:575
msgid ""
"Create a Unicode object by decoding *size* bytes of the UTF-8 encoded string "
"*s*. Return *NULL* if an exception was raised by the codec."
msgstr ""

# 837d0fc9d7b94ddd9fe4ae061dd96702
#: c-api/unicode.rst:581
msgid ""
"If *consumed* is *NULL*, behave like :c:func:`PyUnicode_DecodeUTF8`. If "
"*consumed* is not *NULL*, trailing incomplete UTF-8 byte sequences will not "
"be treated as an error. Those bytes will not be decoded and the number of "
"bytes that have been decoded will be stored in *consumed*."
msgstr ""

# cd6b3b4ea69b4a9b9a189bb4f7ab4a3f
#: c-api/unicode.rst:589
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer *s* of the given *size* using UTF-8 "
"and return a Python bytes object.  Return *NULL* if an exception was raised "
"by the codec."
msgstr ""

# 528a6efb8dfd42ae9b4481b757bb0bc2
#: c-api/unicode.rst:596
msgid ""
"Encode a Unicode object using UTF-8 and return the result as Python bytes "
"object.  Error handling is \"strict\".  Return *NULL* if an exception was "
"raised by the codec."
msgstr ""

# d223726cafd747d8b091caf4e8b0d70e
#: c-api/unicode.rst:602
msgid "UTF-32 Codecs"
msgstr ""

# ef1fadd71a454ca6bced6c2d97f2f23b
#: c-api/unicode.rst:604
msgid "These are the UTF-32 codec APIs:"
msgstr ""

# 524b2cbc13f6440a97e8fc092992a411
#: c-api/unicode.rst:609
msgid ""
"Decode *size* bytes from a UTF-32 encoded buffer string and return the "
"corresponding Unicode object.  *errors* (if non-*NULL*) defines the error "
"handling. It defaults to \"strict\"."
msgstr ""

# ca0ce2ce842d4ed78b186bf6f2a77f0a
# 937734ff2e3b447ab37ed8e4b35f0844
#: c-api/unicode.rst:613 c-api/unicode.rst:681
msgid ""
"If *byteorder* is non-*NULL*, the decoder starts decoding using the given "
"byte order::"
msgstr ""

# 0777ba957628400d882252f583e5942d
#: c-api/unicode.rst:620
msgid ""
"If ``*byteorder`` is zero, and the first four bytes of the input data are a "
"byte order mark (BOM), the decoder switches to this byte order and the BOM "
"is not copied into the resulting Unicode string.  If ``*byteorder`` is "
"``-1`` or ``1``, any byte order mark is copied to the output."
msgstr ""

# 719e018ed7984c78aa461a8f170ddbfc
# c911310e70fa4b0f88ae757299ee85c7
#: c-api/unicode.rst:625 c-api/unicode.rst:694
msgid ""
"After completion, *\\*byteorder* is set to the current byte order at the end "
"of input data."
msgstr ""

# 1c3496bb81524c698b54e64d3f17b50d
#: c-api/unicode.rst:628
msgid ""
"In a narrow build codepoints outside the BMP will be decoded as surrogate "
"pairs."
msgstr ""

# 6d54da153844493bb2dffe0a025d705c
# bb78a502ce3a4e368465cec66ed221eb
#: c-api/unicode.rst:630 c-api/unicode.rst:697
msgid "If *byteorder* is *NULL*, the codec starts in native order mode."
msgstr ""

# 9e1f578a9cdc47b9be9dffcc0d967a71
# 0b5abcb1ab334352a6978f057738c537
# 60399c92aa3b46389647fd74d55a4cea
# b6f7fe7a761c45958e1fa038a55ab29b
#: c-api/unicode.rst:632 c-api/unicode.rst:659 c-api/unicode.rst:699
#: c-api/unicode.rst:727
msgid "Return *NULL* if an exception was raised by the codec."
msgstr ""

# 3c51395dd22c4f43a8f5e5d2b8662315
#: c-api/unicode.rst:637
msgid ""
"If *consumed* is *NULL*, behave like :c:func:`PyUnicode_DecodeUTF32`. If "
"*consumed* is not *NULL*, :c:func:`PyUnicode_DecodeUTF32Stateful` will not "
"treat trailing incomplete UTF-32 byte sequences (such as a number of bytes "
"not divisible by four) as an error. Those bytes will not be decoded and the "
"number of bytes that have been decoded will be stored in *consumed*."
msgstr ""

# 645010e730cf4d6fb7abf74c107d0117
#: c-api/unicode.rst:646
msgid ""
"Return a Python bytes object holding the UTF-32 encoded value of the Unicode "
"data in *s*.  Output is written according to the following byte order::"
msgstr ""

# e5589beece724a81a6e83bcd2e9e1d4a
# 159c4b1fd4854f51bd87eb5cd799175f
#: c-api/unicode.rst:653 c-api/unicode.rst:720
msgid ""
"If byteorder is ``0``, the output string will always start with the Unicode "
"BOM mark (U+FEFF). In the other two modes, no BOM mark is prepended."
msgstr ""

# f6749d51beb241be9756f57445b8425b
#: c-api/unicode.rst:656
msgid ""
"If *Py_UNICODE_WIDE* is not defined, surrogate pairs will be output as a "
"single codepoint."
msgstr ""

# 5df82f435dab482a815a37de87578103
#: c-api/unicode.rst:664
msgid ""
"Return a Python byte string using the UTF-32 encoding in native byte order. "
"The string always starts with a BOM mark.  Error handling is \"strict\". "
"Return *NULL* if an exception was raised by the codec."
msgstr ""

# 89c6a0c3fd1649579336d5538b767ba1
#: c-api/unicode.rst:670
msgid "UTF-16 Codecs"
msgstr ""

# 6acecff40f544c478a29e35141481627
#: c-api/unicode.rst:672
msgid "These are the UTF-16 codec APIs:"
msgstr ""

# 1cf57553c5594730ae24876a97e5b340
#: c-api/unicode.rst:677
msgid ""
"Decode *size* bytes from a UTF-16 encoded buffer string and return the "
"corresponding Unicode object.  *errors* (if non-*NULL*) defines the error "
"handling. It defaults to \"strict\"."
msgstr ""

# 265a2a31dae54af3bfdeca07e133e805
#: c-api/unicode.rst:688
msgid ""
"If ``*byteorder`` is zero, and the first two bytes of the input data are a "
"byte order mark (BOM), the decoder switches to this byte order and the BOM "
"is not copied into the resulting Unicode string.  If ``*byteorder`` is "
"``-1`` or ``1``, any byte order mark is copied to the output (where it will "
"result in either a ``\\ufeff`` or a ``\\ufffe`` character)."
msgstr ""

# 129e1d04c2be4352bac17a4acef75bb4
#: c-api/unicode.rst:704
msgid ""
"If *consumed* is *NULL*, behave like :c:func:`PyUnicode_DecodeUTF16`. If "
"*consumed* is not *NULL*, :c:func:`PyUnicode_DecodeUTF16Stateful` will not "
"treat trailing incomplete UTF-16 byte sequences (such as an odd number of "
"bytes or a split surrogate pair) as an error. Those bytes will not be "
"decoded and the number of bytes that have been decoded will be stored in "
"*consumed*."
msgstr ""

# 2710a34baa334b4fb5460f0379fc7b06
#: c-api/unicode.rst:713
msgid ""
"Return a Python bytes object holding the UTF-16 encoded value of the Unicode "
"data in *s*.  Output is written according to the following byte order::"
msgstr ""

# 4e46ee5d4c744a2e81fce0231174afe2
#: c-api/unicode.rst:723
msgid ""
"If *Py_UNICODE_WIDE* is defined, a single :c:type:`Py_UNICODE` value may get "
"represented as a surrogate pair. If it is not defined, each :c:type:"
"`Py_UNICODE` values is interpreted as an UCS-2 character."
msgstr ""

# c787132ea9f14ab08bc0b40fabc216fb
#: c-api/unicode.rst:732
msgid ""
"Return a Python byte string using the UTF-16 encoding in native byte order. "
"The string always starts with a BOM mark.  Error handling is \"strict\". "
"Return *NULL* if an exception was raised by the codec."
msgstr ""

# 7f4aa6bc28fd4b748eeeaa2e2aa3fed1
#: c-api/unicode.rst:738
msgid "UTF-7 Codecs"
msgstr ""

# 8f4362e2fa6845cba01deb1e59f29f50
#: c-api/unicode.rst:740
msgid "These are the UTF-7 codec APIs:"
msgstr ""

# 5a03bffe0a984cb4b26ed6ff100602b9
#: c-api/unicode.rst:745
msgid ""
"Create a Unicode object by decoding *size* bytes of the UTF-7 encoded string "
"*s*.  Return *NULL* if an exception was raised by the codec."
msgstr ""

# e5d021658ef24201a51da4a64e14fb68
#: c-api/unicode.rst:751
msgid ""
"If *consumed* is *NULL*, behave like :c:func:`PyUnicode_DecodeUTF7`.  If "
"*consumed* is not *NULL*, trailing incomplete UTF-7 base-64 sections will "
"not be treated as an error.  Those bytes will not be decoded and the number "
"of bytes that have been decoded will be stored in *consumed*."
msgstr ""

# 59e5115d84274598896abc45ccba9aac
#: c-api/unicode.rst:759
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given size using UTF-7 and "
"return a Python bytes object.  Return *NULL* if an exception was raised by "
"the codec."
msgstr ""

# 6ad7b77c0b904a89adc6dab3fcdaaff6
#: c-api/unicode.rst:763
msgid ""
"If *base64SetO* is nonzero, \"Set O\" (punctuation that has no otherwise "
"special meaning) will be encoded in base-64.  If *base64WhiteSpace* is "
"nonzero, whitespace will be encoded in base-64.  Both are set to zero for "
"the Python \"utf-7\" codec."
msgstr ""

# 966a6eb77a3d4bcabe7d079752b6c404
#: c-api/unicode.rst:770
msgid "Unicode-Escape Codecs"
msgstr ""

# 23eb72e0a0ff421ea80bdda4a636df10
#: c-api/unicode.rst:772
msgid "These are the \"Unicode Escape\" codec APIs:"
msgstr ""

# b83d9cb148ba4b02af0104b3dfd300bc
#: c-api/unicode.rst:777
msgid ""
"Create a Unicode object by decoding *size* bytes of the Unicode-Escape "
"encoded string *s*.  Return *NULL* if an exception was raised by the codec."
msgstr ""

# 535b0b47150f474bb93782a9f2e01938
#: c-api/unicode.rst:783
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using Unicode-"
"Escape and return a Python string object.  Return *NULL* if an exception was "
"raised by the codec."
msgstr ""

# b72353414fee4fd288534fb45755721a
#: c-api/unicode.rst:790
msgid ""
"Encode a Unicode object using Unicode-Escape and return the result as Python "
"string object.  Error handling is \"strict\". Return *NULL* if an exception "
"was raised by the codec."
msgstr ""

# 9d67187d6bc34618a097db19f590b769
#: c-api/unicode.rst:796
msgid "Raw-Unicode-Escape Codecs"
msgstr ""

# 967bb6b44d9145489607081f16ffa63b
#: c-api/unicode.rst:798
msgid "These are the \"Raw Unicode Escape\" codec APIs:"
msgstr ""

# f50ebea981334af7893dcdc711eb61e1
#: c-api/unicode.rst:803
msgid ""
"Create a Unicode object by decoding *size* bytes of the Raw-Unicode-Escape "
"encoded string *s*.  Return *NULL* if an exception was raised by the codec."
msgstr ""

# a128ade4c3354d3788faa00b5f67a3fc
#: c-api/unicode.rst:809
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using Raw-Unicode-"
"Escape and return a Python string object.  Return *NULL* if an exception was "
"raised by the codec."
msgstr ""

# f22313be14a94736a8b17d12849d7f6a
#: c-api/unicode.rst:816
msgid ""
"Encode a Unicode object using Raw-Unicode-Escape and return the result as "
"Python string object. Error handling is \"strict\". Return *NULL* if an "
"exception was raised by the codec."
msgstr ""

# 025c6517ef7b4b23968aabfc7a72ba48
#: c-api/unicode.rst:822
msgid "Latin-1 Codecs"
msgstr ""

# 4bec523034bd4c3fa3c42fed0e4d21f4
#: c-api/unicode.rst:824
msgid ""
"These are the Latin-1 codec APIs: Latin-1 corresponds to the first 256 "
"Unicode ordinals and only these are accepted by the codecs during encoding."
msgstr ""

# a2c302d0e3024d54a817245ba95a7b97
#: c-api/unicode.rst:830
msgid ""
"Create a Unicode object by decoding *size* bytes of the Latin-1 encoded "
"string *s*.  Return *NULL* if an exception was raised by the codec."
msgstr ""

# 69a6abd54c8542f2902de644ddea686d
#: c-api/unicode.rst:836
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using Latin-1 and "
"return a Python bytes object.  Return *NULL* if an exception was raised by "
"the codec."
msgstr ""

# ba4392152cd54fe6b790d98cb1c8253a
#: c-api/unicode.rst:843
msgid ""
"Encode a Unicode object using Latin-1 and return the result as Python bytes "
"object.  Error handling is \"strict\".  Return *NULL* if an exception was "
"raised by the codec."
msgstr ""

# ab3a7db853834fc7aec4fc75f52d8799
#: c-api/unicode.rst:849
msgid "ASCII Codecs"
msgstr ""

# 13342b948989448c993fbda4d9f02d12
#: c-api/unicode.rst:851
msgid ""
"These are the ASCII codec APIs.  Only 7-bit ASCII data is accepted. All "
"other codes generate errors."
msgstr ""

# 900058125e7741f4b5f6becda3aee0fd
#: c-api/unicode.rst:857
msgid ""
"Create a Unicode object by decoding *size* bytes of the ASCII encoded string "
"*s*.  Return *NULL* if an exception was raised by the codec."
msgstr ""

# 8aff61a478b84eafa657d5258092b680
#: c-api/unicode.rst:863
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using ASCII and "
"return a Python bytes object.  Return *NULL* if an exception was raised by "
"the codec."
msgstr ""

# c63430b9add54d948e4261dacf4a4f5d
#: c-api/unicode.rst:870
msgid ""
"Encode a Unicode object using ASCII and return the result as Python bytes "
"object.  Error handling is \"strict\".  Return *NULL* if an exception was "
"raised by the codec."
msgstr ""

# 90a156f294b640c0984f1cf17df8561e
#: c-api/unicode.rst:876
msgid "Character Map Codecs"
msgstr ""

# 84f575b744774173837c82df87eb3772
#: c-api/unicode.rst:878
msgid ""
"This codec is special in that it can be used to implement many different "
"codecs (and this is in fact what was done to obtain most of the standard "
"codecs included in the :mod:`encodings` package). The codec uses mapping to "
"encode and decode characters."
msgstr ""

# f0a34811db7d4f60845e33b7af670617
#: c-api/unicode.rst:883
msgid ""
"Decoding mappings must map single string characters to single Unicode "
"characters, integers (which are then interpreted as Unicode ordinals) or "
"None (meaning \"undefined mapping\" and causing an error)."
msgstr ""

# 912d89a97457409bbcd51637ed114b51
#: c-api/unicode.rst:887
msgid ""
"Encoding mappings must map single Unicode characters to single string "
"characters, integers (which are then interpreted as Latin-1 ordinals) or "
"None (meaning \"undefined mapping\" and causing an error)."
msgstr ""

# ab4aa52039464f63803270d23fb22a99
#: c-api/unicode.rst:891
msgid ""
"The mapping objects provided must only support the __getitem__ mapping "
"interface."
msgstr ""

# a9cd6babf9904397952f0ea9af6c6669
#: c-api/unicode.rst:894
msgid ""
"If a character lookup fails with a LookupError, the character is copied as-"
"is meaning that its ordinal value will be interpreted as Unicode or Latin-1 "
"ordinal resp. Because of this, mappings only need to contain those mappings "
"which map characters to different code points."
msgstr ""

# 7611ec79b65e47f48e130b9e001eabac
#: c-api/unicode.rst:899
msgid "These are the mapping codec APIs:"
msgstr ""

# 25e3667a6fe84f29844d991cecc6e88f
#: c-api/unicode.rst:903
msgid ""
"Create a Unicode object by decoding *size* bytes of the encoded string *s* "
"using the given *mapping* object.  Return *NULL* if an exception was raised "
"by the codec. If *mapping* is *NULL* latin-1 decoding will be done. Else it "
"can be a dictionary mapping byte or a unicode string, which is treated as a "
"lookup table. Byte values greater that the length of the string and U+FFFE "
"\"characters\" are treated as \"undefined mapping\"."
msgstr ""

# 4f5108619edd44c58dbea55e99b78d29
#: c-api/unicode.rst:913
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using the given "
"*mapping* object and return a Python string object. Return *NULL* if an "
"exception was raised by the codec."
msgstr ""

# 9617f465eb8c48238a87ea027bc87076
#: c-api/unicode.rst:920
msgid ""
"Encode a Unicode object using the given *mapping* object and return the "
"result as Python string object.  Error handling is \"strict\".  Return "
"*NULL* if an exception was raised by the codec."
msgstr ""

# 9c09e6785f70440199146ddf473f6900
#: c-api/unicode.rst:924
msgid "The following codec API is special in that maps Unicode to Unicode."
msgstr ""

# d053c7afad37411086d24961b8ab86bb
#: c-api/unicode.rst:929
msgid ""
"Translate a :c:type:`Py_UNICODE` buffer of the given *size* by applying a "
"character mapping *table* to it and return the resulting Unicode object.  "
"Return *NULL* when an exception was raised by the codec."
msgstr ""

# 5e3e9b37453149c8a6fe811334108e19
#: c-api/unicode.rst:933
msgid ""
"The *mapping* table must map Unicode ordinal integers to Unicode ordinal "
"integers or None (causing deletion of the character)."
msgstr ""

# e661b1a918ef4ca9961ae8bb21c1d523
# 59021593fe5d47e0849690c9e9e596bf
#: c-api/unicode.rst:936 c-api/unicode.rst:1022
msgid ""
"Mapping tables need only provide the :meth:`__getitem__` interface; "
"dictionaries and sequences work well.  Unmapped character ordinals (ones "
"which cause a :exc:`LookupError`) are left untouched and are copied as-is."
msgstr ""

# 235dabbd76524968a1fbbb98bef0ae7b
#: c-api/unicode.rst:943
msgid "MBCS codecs for Windows"
msgstr ""

# bfca3c252ef8469a8674bfa365e9428d
#: c-api/unicode.rst:945
msgid ""
"These are the MBCS codec APIs. They are currently only available on Windows "
"and use the Win32 MBCS converters to implement the conversions.  Note that "
"MBCS (or DBCS) is a class of encodings, not just one.  The target encoding "
"is defined by the user settings on the machine running the codec."
msgstr ""

# e0c91e012cb145bca90665aef072a7d7
#: c-api/unicode.rst:952
msgid ""
"Create a Unicode object by decoding *size* bytes of the MBCS encoded string "
"*s*. Return *NULL* if an exception was raised by the codec."
msgstr ""

# d19b919f444a42e5b342e20c27930ada
#: c-api/unicode.rst:958
msgid ""
"If *consumed* is *NULL*, behave like :c:func:`PyUnicode_DecodeMBCS`. If "
"*consumed* is not *NULL*, :c:func:`PyUnicode_DecodeMBCSStateful` will not "
"decode trailing lead byte and the number of bytes that have been decoded "
"will be stored in *consumed*."
msgstr ""

# 1e329630748544fea4a61375e8127e65
#: c-api/unicode.rst:966
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using MBCS and "
"return a Python bytes object.  Return *NULL* if an exception was raised by "
"the codec."
msgstr ""

# 7228200f272a4f8699285fd0f5894e2e
#: c-api/unicode.rst:973
msgid ""
"Encode a Unicode object using MBCS and return the result as Python bytes "
"object.  Error handling is \"strict\".  Return *NULL* if an exception was "
"raised by the codec."
msgstr ""

# 447f513f18d9447ba6c542e216f1e95e
#: c-api/unicode.rst:979
msgid "Methods & Slots"
msgstr ""

# 1d6dfc7dfb1c46e2898330ca8a50b409
#: c-api/unicode.rst:985
msgid "Methods and Slot Functions"
msgstr ""

# 749d1d153efa4f17aa65ba2c92f8ce7c
#: c-api/unicode.rst:987
msgid ""
"The following APIs are capable of handling Unicode objects and strings on "
"input (we refer to them as strings in the descriptions) and return Unicode "
"objects or integers as appropriate."
msgstr ""

# 238e41980eaf4b3090401ac28500ba75
#: c-api/unicode.rst:991
msgid "They all return *NULL* or ``-1`` if an exception occurs."
msgstr ""

# 5d47e3a2ee9e4f9eb673057fdc68d698
#: c-api/unicode.rst:996
msgid "Concat two strings giving a new Unicode string."
msgstr ""

# 77cc015ec03245febb895164add7dbf1
#: c-api/unicode.rst:1001
msgid ""
"Split a string giving a list of Unicode strings.  If *sep* is *NULL*, "
"splitting will be done at all whitespace substrings.  Otherwise, splits "
"occur at the given separator.  At most *maxsplit* splits will be done.  If "
"negative, no limit is set.  Separators are not included in the resulting "
"list."
msgstr ""

# 7be36bf5feae4ca8a94deca3e68df181
#: c-api/unicode.rst:1009
msgid ""
"Split a Unicode string at line breaks, returning a list of Unicode strings. "
"CRLF is considered to be one line break.  If *keepend* is 0, the Line break "
"characters are not included in the resulting strings."
msgstr ""

# 4375e75409ea486b9dd894380d6ba669
#: c-api/unicode.rst:1016
msgid ""
"Translate a string by applying a character mapping table to it and return "
"the resulting Unicode object."
msgstr ""

# ef823fae0637449db13b6f79065703b0
#: c-api/unicode.rst:1019
msgid ""
"The mapping table must map Unicode ordinal integers to Unicode ordinal "
"integers or None (causing deletion of the character)."
msgstr ""

# 5b4dab77b7c54d7f9167244aba06a8de
#: c-api/unicode.rst:1026
msgid ""
"*errors* has the usual meaning for codecs. It may be *NULL* which indicates "
"to use the default error handling."
msgstr ""

# a323f8449a864debb56b7da08bdd7141
#: c-api/unicode.rst:1032
msgid ""
"Join a sequence of strings using the given *separator* and return the "
"resulting Unicode string."
msgstr ""

# 6d7b7c1fbb8d4f5a8e6d4ff0cd6f1759
#: c-api/unicode.rst:1038
msgid ""
"Return 1 if *substr* matches ``str[start:end]`` at the given tail end "
"(*direction* == -1 means to do a prefix match, *direction* == 1 a suffix "
"match), 0 otherwise. Return ``-1`` if an error occurred."
msgstr ""

# 7108415794754ca3b7ee03f3d7e9d1f3
#: c-api/unicode.rst:1045
msgid ""
"Return the first position of *substr* in ``str[start:end]`` using the given "
"*direction* (*direction* == 1 means to do a forward search, *direction* == "
"-1 a backward search).  The return value is the index of the first match; a "
"value of ``-1`` indicates that no match was found, and ``-2`` indicates that "
"an error occurred and an exception has been set."
msgstr ""

# bde154cfddab415f8282328a30ad22ec
#: c-api/unicode.rst:1054
msgid ""
"Return the number of non-overlapping occurrences of *substr* in ``str[start:"
"end]``.  Return ``-1`` if an error occurred."
msgstr ""

# dc95a0048f6048ffba3b02e7c7af34e2
#: c-api/unicode.rst:1060
msgid ""
"Replace at most *maxcount* occurrences of *substr* in *str* with *replstr* "
"and return the resulting Unicode object. *maxcount* == -1 means replace all "
"occurrences."
msgstr ""

# 3237405e34614d2abfcbe8fd5517cd13
#: c-api/unicode.rst:1067
msgid ""
"Compare two strings and return -1, 0, 1 for less than, equal, and greater "
"than, respectively."
msgstr ""

# 27727e4728a94760afd330ea570f84c5
#: c-api/unicode.rst:1073
msgid ""
"Compare a unicode object, *uni*, with *string* and return -1, 0, 1 for less "
"than, equal, and greater than, respectively. It is best to pass only ASCII-"
"encoded strings, but the function interprets the input string as ISO-8859-1 "
"if it contains non-ASCII characters\"."
msgstr ""

# 9c4a96db804042fbbc88fe51a1f01338
#: c-api/unicode.rst:1081
msgid "Rich compare two unicode strings and return one of the following:"
msgstr ""

# 7bda805853cd4596ae418f925e7a94a1
#: c-api/unicode.rst:1083
msgid "``NULL`` in case an exception was raised"
msgstr ""

# 75ba348f45b749258238e806bf502d9b
#: c-api/unicode.rst:1084
msgid ":const:`Py_True` or :const:`Py_False` for successful comparisons"
msgstr ""

# 94860aa96a7c44bfa8fd534419042c99
#: c-api/unicode.rst:1085
msgid ":const:`Py_NotImplemented` in case the type combination is unknown"
msgstr ""

# b670be2d48ba4f32a25c59b4bb65b882
#: c-api/unicode.rst:1087
msgid ""
"Note that :const:`Py_EQ` and :const:`Py_NE` comparisons can cause a :exc:"
"`UnicodeWarning` in case the conversion of the arguments to Unicode fails "
"with a :exc:`UnicodeDecodeError`."
msgstr ""

# 8c2a906c52cf460e9885ea171ad2ffc3
#: c-api/unicode.rst:1091
msgid ""
"Possible values for *op* are :const:`Py_GT`, :const:`Py_GE`, :const:"
"`Py_EQ`, :const:`Py_NE`, :const:`Py_LT`, and :const:`Py_LE`."
msgstr ""

# bc5e256c54484ae4a09bcea177f19f35
#: c-api/unicode.rst:1097
msgid ""
"Return a new string object from *format* and *args*; this is analogous to "
"``format % args``.  The *args* argument must be a tuple."
msgstr ""

# d4f583ee8c0f48c5bfa6aaac9cccc444
#: c-api/unicode.rst:1103
msgid ""
"Check whether *element* is contained in *container* and return true or false "
"accordingly."
msgstr ""

# 7aeb195b96164403a7f7c40db2f07560
#: c-api/unicode.rst:1106
msgid ""
"*element* has to coerce to a one element Unicode string. ``-1`` is returned "
"if there was an error."
msgstr ""

# 2533d12351314be788674b5e4ef86c31
#: c-api/unicode.rst:1112
msgid ""
"Intern the argument *\\*string* in place.  The argument must be the address "
"of a pointer variable pointing to a Python unicode string object.  If there "
"is an existing interned string that is the same as *\\*string*, it sets *"
"\\*string* to it (decrementing the reference count of the old string object "
"and incrementing the reference count of the interned string object), "
"otherwise it leaves *\\*string* alone and interns it (incrementing its "
"reference count). (Clarification: even though there is a lot of talk about "
"reference counts, think of this function as reference-count-neutral; you own "
"the object after the call if and only if you owned it before the call.)"
msgstr ""

# 117343ca75a642f78838810278216b04
#: c-api/unicode.rst:1125
msgid ""
"A combination of :c:func:`PyUnicode_FromString` and :c:func:"
"`PyUnicode_InternInPlace`, returning either a new unicode string object that "
"has been interned, or a new (\"owned\") reference to an earlier interned "
"string object with the same value."
msgstr ""

# ef0b3f497aad45858fabaf372c550aa2
#: c-api/utilities.rst:7
msgid "Utilities"
msgstr ""

# ee8c683eabc84800bb9cc23351a56ac5
#: c-api/utilities.rst:9
msgid ""
"The functions in this chapter perform various utility tasks, ranging from "
"helping C code be more portable across platforms, using Python modules from "
"C, and parsing function arguments and constructing Python values from C "
"values."
msgstr ""

# df5fb1dbcc7d4456a5d789c10051b216
#: c-api/veryhigh.rst:8
msgid "The Very High Level Layer"
msgstr ""

# 60f8f5558ebe4fb38d56cd54a8465194
#: c-api/veryhigh.rst:10
msgid ""
"The functions in this chapter will let you execute Python source code given "
"in a file or a buffer, but they will not let you interact in a more detailed "
"way with the interpreter."
msgstr ""

# 77d9e2eafd554e07ac938c5ec2e62a99
#: c-api/veryhigh.rst:14
msgid ""
"Several of these functions accept a start symbol from the grammar as a "
"parameter.  The available start symbols are :const:`Py_eval_input`, :const:"
"`Py_file_input`, and :const:`Py_single_input`.  These are described "
"following the functions which accept them as parameters."
msgstr ""

# 0c795593c41d49edbe73836e1de7a886
#: c-api/veryhigh.rst:19
msgid ""
"Note also that several of these functions take :c:type:`FILE\\*` "
"parameters.  One particular issue which needs to be handled carefully is "
"that the :c:type:`FILE` structure for different C libraries can be different "
"and incompatible.  Under Windows (at least), it is possible for dynamically "
"linked extensions to actually use different libraries, so care should be "
"taken that :c:type:`FILE\\*` parameters are only passed to these functions "
"if it is certain that they were created by the same library that the Python "
"runtime is using."
msgstr ""

# 9b977d852f8b40c7b0cee96ca745fa07
#: c-api/veryhigh.rst:30
msgid ""
"The main program for the standard interpreter.  This is made available for "
"programs which embed Python.  The *argc* and *argv* parameters should be "
"prepared exactly as those which are passed to a C program's :c:func:`main` "
"function (converted to wchar_t according to the user's locale).  It is "
"important to note that the argument list may be modified (but the contents "
"of the strings pointed to by the argument list are not). The return value "
"will be ``0`` if the interpreter exits normally (i.e., without an "
"exception), ``1`` if the interpreter exits due to an exception, or ``2`` if "
"the parameter list does not represent a valid Python command line."
msgstr ""

# ce8de703633143b5aff72839d006bf90
#: c-api/veryhigh.rst:40
msgid ""
"Note that if an otherwise unhandled :exc:`SystemExit` is raised, this "
"function will not return ``1``, but exit the process, as long as "
"``Py_InspectFlag`` is not set."
msgstr ""

# e05f9f2af3424075a2ab7acdf36ac1a6
#: c-api/veryhigh.rst:47
msgid ""
"This is a simplified interface to :c:func:`PyRun_AnyFileExFlags` below, "
"leaving *closeit* set to ``0`` and *flags* set to *NULL*."
msgstr ""

# 10eb915e6aff460097a51811221dbd57
#: c-api/veryhigh.rst:53
msgid ""
"This is a simplified interface to :c:func:`PyRun_AnyFileExFlags` below, "
"leaving the *closeit* argument set to ``0``."
msgstr ""

# fdae99bce4be4275a65b9a860e799164
#: c-api/veryhigh.rst:59
msgid ""
"This is a simplified interface to :c:func:`PyRun_AnyFileExFlags` below, "
"leaving the *flags* argument set to *NULL*."
msgstr ""

# 171704fffdf745a39f7dccf6059921ff
#: c-api/veryhigh.rst:65
msgid ""
"If *fp* refers to a file associated with an interactive device (console or "
"terminal input or Unix pseudo-terminal), return the value of :c:func:"
"`PyRun_InteractiveLoop`, otherwise return the result of :c:func:"
"`PyRun_SimpleFile`.  *filename* is decoded from the filesystem encoding (:"
"func:`sys.getfilesystemencoding`).  If *filename* is *NULL*, this function "
"uses ``\"???\"`` as the filename."
msgstr ""

# f1710d156ba945d4a1ee02f0a1b18998
#: c-api/veryhigh.rst:75
msgid ""
"This is a simplified interface to :c:func:`PyRun_SimpleStringFlags` below, "
"leaving the *PyCompilerFlags\\** argument set to NULL."
msgstr ""

# 27527b5fdeee4c0ea213633d4bbcfa23
#: c-api/veryhigh.rst:81
msgid ""
"Executes the Python source code from *command* in the :mod:`__main__` module "
"according to the *flags* argument. If :mod:`__main__` does not already "
"exist, it is created.  Returns ``0`` on success or ``-1`` if an exception "
"was raised.  If there was an error, there is no way to get the exception "
"information. For the meaning of *flags*, see below."
msgstr ""

# bee421be1ec1475e91c4fe31db34be37
#: c-api/veryhigh.rst:87
msgid ""
"Note that if an otherwise unhandled :exc:`SystemExit` is raised, this "
"function will not return ``-1``, but exit the process, as long as "
"``Py_InspectFlag`` is not set."
msgstr ""

# 27335e391e8d49389b46275ca893ab4f
#: c-api/veryhigh.rst:94
msgid ""
"This is a simplified interface to :c:func:`PyRun_SimpleFileExFlags` below, "
"leaving *closeit* set to ``0`` and *flags* set to *NULL*."
msgstr ""

# 4d7ff91268464b3e8cf7ca1488dc0aee
#: c-api/veryhigh.rst:100
msgid ""
"This is a simplified interface to :c:func:`PyRun_SimpleFileExFlags` below, "
"leaving *closeit* set to ``0``."
msgstr ""

# 1d6cb1a7112141948bf5ba272dfeffc2
#: c-api/veryhigh.rst:106
msgid ""
"This is a simplified interface to :c:func:`PyRun_SimpleFileExFlags` below, "
"leaving *flags* set to *NULL*."
msgstr ""

# 4663e840f7274d76ae0f5dc81f2b2bb0
#: c-api/veryhigh.rst:112
msgid ""
"Similar to :c:func:`PyRun_SimpleStringFlags`, but the Python source code is "
"read from *fp* instead of an in-memory string. *filename* should be the name "
"of the file, it is decoded from the filesystem encoding (:func:`sys."
"getfilesystemencoding`).  If *closeit* is true, the file is closed before "
"PyRun_SimpleFileExFlags returns."
msgstr ""

# 0df067e38c014fafafb8a2890c038141
#: c-api/veryhigh.rst:121
msgid ""
"This is a simplified interface to :c:func:`PyRun_InteractiveOneFlags` below, "
"leaving *flags* set to *NULL*."
msgstr ""

# 1a5c4c4e31534eb7a383430a0212e1d2
#: c-api/veryhigh.rst:127
msgid ""
"Read and execute a single statement from a file associated with an "
"interactive device according to the *flags* argument.  The user will be "
"prompted using ``sys.ps1`` and ``sys.ps2``.  *filename* is decoded from the "
"filesystem encoding (:func:`sys.getfilesystemencoding`)."
msgstr ""

# d841a0d71b7643ff87b216956146fab9
#: c-api/veryhigh.rst:132
msgid ""
"Returns ``0`` when the input was executed successfully, ``-1`` if there was "
"an exception, or an error code from the :file:`errcode.h` include file "
"distributed as part of Python if there was a parse error.  (Note that :file:"
"`errcode.h` is not included by :file:`Python.h`, so must be included "
"specifically if needed.)"
msgstr ""

# 4aee0536a17344b0b32945636524d691
#: c-api/veryhigh.rst:141
msgid ""
"This is a simplified interface to :c:func:`PyRun_InteractiveLoopFlags` "
"below, leaving *flags* set to *NULL*."
msgstr ""

# c0db9afdc78240d699cafccd72cb2039
#: c-api/veryhigh.rst:147
msgid ""
"Read and execute statements from a file associated with an interactive "
"device until EOF is reached.  The user will be prompted using ``sys.ps1`` "
"and ``sys.ps2``.  *filename* is decoded from the filesystem encoding (:func:"
"`sys.getfilesystemencoding`).  Returns ``0`` at EOF."
msgstr ""

# 0a1bd75df72641feb428c83ad5670fd4
#: c-api/veryhigh.rst:155
msgid ""
"This is a simplified interface to :c:func:"
"`PyParser_SimpleParseStringFlagsFilename` below, leaving  *filename* set to "
"*NULL* and *flags* set to ``0``."
msgstr ""

# 063118c10c62492aaea65289f2290a86
#: c-api/veryhigh.rst:162
msgid ""
"This is a simplified interface to :c:func:"
"`PyParser_SimpleParseStringFlagsFilename` below, leaving  *filename* set to "
"*NULL*."
msgstr ""

# 3774549827e148548b67145522b26936
#: c-api/veryhigh.rst:169
msgid ""
"Parse Python source code from *str* using the start token *start* according "
"to the *flags* argument.  The result can be used to create a code object "
"which can be evaluated efficiently. This is useful if a code fragment must "
"be evaluated many times. *filename* is decoded from the filesystem encoding "
"(:func:`sys.getfilesystemencoding`)."
msgstr ""

# de39a43571ff4ec98f87c0909b21de9d
#: c-api/veryhigh.rst:178
msgid ""
"This is a simplified interface to :c:func:`PyParser_SimpleParseFileFlags` "
"below, leaving *flags* set to ``0``"
msgstr ""

# 71b346cbdf9641ffa7bd7825c04d67d5
#: c-api/veryhigh.rst:184
msgid ""
"Similar to :c:func:`PyParser_SimpleParseStringFlagsFilename`, but the Python "
"source code is read from *fp* instead of an in-memory string."
msgstr ""

# f71a4d8165194f0d91a5647adaa65e5a
#: c-api/veryhigh.rst:190
msgid ""
"This is a simplified interface to :c:func:`PyRun_StringFlags` below, leaving "
"*flags* set to *NULL*."
msgstr ""

# b3844ef4145345ad8e2353146310460e
#: c-api/veryhigh.rst:196
msgid ""
"Execute Python source code from *str* in the context specified by the "
"dictionaries *globals* and *locals* with the compiler flags specified by "
"*flags*.  The parameter *start* specifies the start token that should be "
"used to parse the source code."
msgstr ""

# 753915b7cc8a42c5b3f235c7eb009e9a
#: c-api/veryhigh.rst:201
msgid ""
"Returns the result of executing the code as a Python object, or *NULL* if an "
"exception was raised."
msgstr ""

# 1ef63ddd256e419aa4db137616be2685
#: c-api/veryhigh.rst:207
msgid ""
"This is a simplified interface to :c:func:`PyRun_FileExFlags` below, leaving "
"*closeit* set to ``0`` and *flags* set to *NULL*."
msgstr ""

# e04f5f7652e847ef99218bd918af791b
#: c-api/veryhigh.rst:213
msgid ""
"This is a simplified interface to :c:func:`PyRun_FileExFlags` below, leaving "
"*flags* set to *NULL*."
msgstr ""

# 2d70615eabfd4e0590b74edef4e878e4
#: c-api/veryhigh.rst:219
msgid ""
"This is a simplified interface to :c:func:`PyRun_FileExFlags` below, leaving "
"*closeit* set to ``0``."
msgstr ""

# de2ec97225f94d2284045ae445544417
#: c-api/veryhigh.rst:225
msgid ""
"Similar to :c:func:`PyRun_StringFlags`, but the Python source code is read "
"from *fp* instead of an in-memory string. *filename* should be the name of "
"the file, it is decoded from the filesystem encoding (:func:`sys."
"getfilesystemencoding`). If *closeit* is true, the file is closed before :c:"
"func:`PyRun_FileExFlags` returns."
msgstr ""

# dd046447a62041e5b316d187396758a2
#: c-api/veryhigh.rst:234
msgid ""
"This is a simplified interface to :c:func:`Py_CompileStringFlags` below, "
"leaving *flags* set to *NULL*."
msgstr ""

# 8e2cc93757e0450c84fb41a427001c4f
#: c-api/veryhigh.rst:240
msgid ""
"This is a simplified interface to :c:func:`Py_CompileStringExFlags` below, "
"with *optimize* set to ``-1``."
msgstr ""

# c0a9d4cf6571472e9388dc9fb4051a0a
#: c-api/veryhigh.rst:246
msgid ""
"Parse and compile the Python source code in *str*, returning the resulting "
"code object.  The start token is given by *start*; this can be used to "
"constrain the code which can be compiled and should be :const:"
"`Py_eval_input`, :const:`Py_file_input`, or :const:`Py_single_input`.  The "
"filename specified by *filename* is used to construct the code object and "
"may appear in tracebacks or :exc:`SyntaxError` exception messages, it is "
"decoded from the filesystem encoding (:func:`sys.getfilesystemencoding`).  "
"This returns *NULL* if the code cannot be parsed or compiled."
msgstr ""

# 331a3f7b051243cb85c1d2f647671073
#: c-api/veryhigh.rst:255
msgid ""
"The integer *optimize* specifies the optimization level of the compiler; a "
"value of ``-1`` selects the optimization level of the interpreter as given "
"by :option:`-O` options.  Explicit levels are ``0`` (no optimization; "
"``__debug__`` is true), ``1`` (asserts are removed, ``__debug__`` is false) "
"or ``2`` (docstrings are removed too)."
msgstr ""

# 48b5cd9007e04ed798252838d9a01c28
#: c-api/veryhigh.rst:266
msgid ""
"This is a simplified interface to :c:func:`PyEval_EvalCodeEx`, with just the "
"code object, and the dictionaries of global and local variables. The other "
"arguments are set to *NULL*."
msgstr ""

# 58d5b228c6d44c6f927a35a99f4ae95c
#: c-api/veryhigh.rst:273
msgid ""
"Evaluate a precompiled code object, given a particular environment for its "
"evaluation.  This environment consists of dictionaries of global and local "
"variables, arrays of arguments, keywords and defaults, and a closure tuple "
"of cells."
msgstr ""

# 17aaa73290da4334a2b152a6188aa7c2
#: c-api/veryhigh.rst:281
msgid ""
"Evaluate an execution frame.  This is a simplified interface to "
"PyEval_EvalFrameEx, for backward compatibility."
msgstr ""

# c6bf61a91d274dbbb522c045244e3fe2
#: c-api/veryhigh.rst:287
msgid ""
"This is the main, unvarnished function of Python interpretation.  It is "
"literally 2000 lines long.  The code object associated with the execution "
"frame *f* is executed, interpreting bytecode and executing calls as needed. "
"The additional *throwflag* parameter can mostly be ignored - if true, then "
"it causes an exception to immediately be thrown; this is used for the :meth:"
"`throw` methods of generator objects."
msgstr ""

# c7a47827581044abbd3231c873cc0a8d
#: c-api/veryhigh.rst:297
msgid ""
"This function changes the flags of the current evaluation frame, and returns "
"true on success, false on failure."
msgstr ""

# 3804c4736a2a4a018c7c57156c19230e
#: c-api/veryhigh.rst:305
msgid ""
"The start symbol from the Python grammar for isolated expressions; for use "
"with :c:func:`Py_CompileString`."
msgstr ""

# c3e2c54355f545ed8e02a201ea9ab47a
#: c-api/veryhigh.rst:313
msgid ""
"The start symbol from the Python grammar for sequences of statements as read "
"from a file or other source; for use with :c:func:`Py_CompileString`.  This "
"is the symbol to use when compiling arbitrarily long Python source code."
msgstr ""

# aaa7bc342ea74b0eb12806f804ac22bb
#: c-api/veryhigh.rst:322
msgid ""
"The start symbol from the Python grammar for a single statement; for use "
"with :c:func:`Py_CompileString`. This is the symbol used for the interactive "
"interpreter loop."
msgstr ""

# eee516f88bf0499da3d4f88d220229f4
#: c-api/veryhigh.rst:329
msgid ""
"This is the structure used to hold compiler flags.  In cases where code is "
"only being compiled, it is passed as ``int flags``, and in cases where code "
"is being executed, it is passed as ``PyCompilerFlags *flags``.  In this "
"case, ``from __future__ import`` can modify *flags*."
msgstr ""

# cb00979af58d43b4b300ad123c0da8fd
#: c-api/veryhigh.rst:334
msgid ""
"Whenever ``PyCompilerFlags *flags`` is *NULL*, :attr:`cf_flags` is treated "
"as equal to ``0``, and any modification due to ``from __future__ import`` is "
"discarded.  ::"
msgstr ""

# a5792fdf162a4cbfaed5a8e2cced197f
#: c-api/veryhigh.rst:345
msgid ""
"This bit can be set in *flags* to cause division operator ``/`` to be "
"interpreted as \"true division\" according to :pep:`238`."
msgstr ""

# 85472515a5694016bd22c052581875d6
#: c-api/weakref.rst:6
msgid "Weak Reference Objects"
msgstr ""

# 67a5882c2c104665b866491c8028e3fe
#: c-api/weakref.rst:8
msgid ""
"Python supports *weak references* as first-class objects.  There are two "
"specific object types which directly implement weak references.  The first "
"is a simple reference object, and the second acts as a proxy for the "
"original object as much as it can."
msgstr ""

# b8308e0f8683439a8745139b1fd601f2
#: c-api/weakref.rst:16
msgid "Return true if *ob* is either a reference or proxy object."
msgstr ""

# 8a79030e70964736937d50ad8b41b046
#: c-api/weakref.rst:21
msgid "Return true if *ob* is a reference object."
msgstr ""

# d5d569ee8dbe4e3c93bfac82165a7178
#: c-api/weakref.rst:26
msgid "Return true if *ob* is a proxy object."
msgstr ""

# ef50c63ea6a348dfb84f95df2ffaf311
#: c-api/weakref.rst:31
msgid ""
"Return a weak reference object for the object *ob*.  This will always return "
"a new reference, but is not guaranteed to create a new object; an existing "
"reference object may be returned.  The second parameter, *callback*, can be "
"a callable object that receives notification when *ob* is garbage collected; "
"it should accept a single parameter, which will be the weak reference object "
"itself. *callback* may also be ``None`` or *NULL*.  If *ob* is not a weakly-"
"referencable object, or if *callback* is not callable, ``None``, or *NULL*, "
"this will return *NULL* and raise :exc:`TypeError`."
msgstr ""

# 8e851e466c334c3daabb5c26a68b0122
#: c-api/weakref.rst:43
msgid ""
"Return a weak reference proxy object for the object *ob*.  This will always "
"return a new reference, but is not guaranteed to create a new object; an "
"existing proxy object may be returned.  The second parameter, *callback*, "
"can be a callable object that receives notification when *ob* is garbage "
"collected; it should accept a single parameter, which will be the weak "
"reference object itself. *callback* may also be ``None`` or *NULL*.  If *ob* "
"is not a weakly-referencable object, or if *callback* is not callable, "
"``None``, or *NULL*, this will return *NULL* and raise :exc:`TypeError`."
msgstr ""

# 402383c7e66c421eb193773d4585499c
#: c-api/weakref.rst:55
msgid ""
"Return the referenced object from a weak reference, *ref*.  If the referent "
"is no longer live, returns :const:`Py_None`."
msgstr ""

# ba431b1ad1cf4cb69479b0d4436ab87f
#: c-api/weakref.rst:60
msgid ""
"This function returns a **borrowed reference** to the referenced object. "
"This means that you should always call :c:func:`Py_INCREF` on the object "
"except if you know that it cannot be destroyed while you are still using it."
msgstr ""

# b5c6247502a74c4f8e142e4504542813
#: c-api/weakref.rst:68
msgid ""
"Similar to :c:func:`PyWeakref_GetObject`, but implemented as a macro that "
"does no error checking."
msgstr ""
