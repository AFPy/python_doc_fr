# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:40+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/tutorial/venv.rst:6
msgid "Virtual Environments and Packages"
msgstr "Environnements virtuels et Paquets"

#: ../Doc/tutorial/venv.rst:9
msgid "Introduction"
msgstr "Introduction"

#: ../Doc/tutorial/venv.rst:11
msgid ""
"Python applications will often use packages and modules that don't come as "
"part of the standard library.  Applications will sometimes need a specific "
"version of a library, because the application may require that a particular "
"bug has been fixed or the application may be written using an obsolete "
"version of the library's interface."
msgstr ""
"Les programmes Python utilisent souvent des paquets et modules qui ne font "
"pas partie de la bibliothèque standard. Ils nécessitent aussi, parfois, une "
"version spécifique de la bibliothèque, nécessitant par exemple qu'un certain "
"bug ai été corrigé, ou encore que le programme à été implémenté en utilisant "
"une version obsolète de l'interface de la bibliothèque."

#: ../Doc/tutorial/venv.rst:17
msgid ""
"This means it may not be possible for one Python installation to meet the "
"requirements of every application.  If application A needs version 1.0 of a "
"particular module but application B needs version 2.0, then the requirements "
"are in conflict and installing either version 1.0 or 2.0 will leave one "
"application unable to run."
msgstr ""
"Cela signifie qu'il n'est pas forcément possible, pour une installation de "
"Python, de couvrir tous les besoins de toutes les applications. Basiquement, "
"si une application A dépend de la version 1.0 d'un module et qu'une "
"application B dépend de la version 2.0, il y a conflit, et installer la "
"version 1.0 ou 2.0 laissera une des deux application incapable de "
"fonctionner."

#: ../Doc/tutorial/venv.rst:23
msgid ""
"The solution for this problem is to create a :term:`virtual environment`, a "
"self-contained directory tree that contains a Python installation for a "
"particular version of Python, plus a number of additional packages."
msgstr ""

#: ../Doc/tutorial/venv.rst:27
msgid ""
"Different applications can then use different virtual environments. To "
"resolve the earlier example of conflicting requirements, application A can "
"have its own virtual environment with version 1.0 installed while "
"application B has another virtual environment with version 2.0. If "
"application B requires a library be upgraded to version 3.0, this will not "
"affect application A's environment."
msgstr ""

#: ../Doc/tutorial/venv.rst:36
msgid "Creating Virtual Environments"
msgstr "Création d'Environnements Virtuels"

#: ../Doc/tutorial/venv.rst:38
msgid ""
"The module used to create and manage virtual environments is called :mod:"
"`venv`.  :mod:`venv` will usually install the most recent version of Python "
"that you have available. If you have multiple versions of Python on your "
"system, you can select a specific Python version by running ``python3`` or "
"whichever version you want."
msgstr ""

#: ../Doc/tutorial/venv.rst:44
msgid ""
"To create a virtual environment, decide upon a directory where you want to "
"place it, and run the :mod:`venv` module as a script with the directory "
"path::"
msgstr ""

#: ../Doc/tutorial/venv.rst:49
msgid ""
"This will create the ``tutorial-env`` directory if it doesn't exist, and "
"also create directories inside it containing a copy of the Python "
"interpreter, the standard library, and various supporting files."
msgstr ""
"Cela créera le dossier ``tutorial-env`` (s'il n'existe pas) et des sous "
"dossiers contenant une copie de l'interpréteur Python, de la bibliothèque "
"standard, et quelques autres fichiers utiles."

#: ../Doc/tutorial/venv.rst:53
msgid "Once you've created a virtual environment, you may activate it."
msgstr ""

#: ../Doc/tutorial/venv.rst:55
msgid "On Windows, run::"
msgstr "Sur windows, lancez : ::"

#: ../Doc/tutorial/venv.rst:59
msgid "On Unix or MacOS, run::"
msgstr "Sur Unix et MacOS, lancez : ::"

#: ../Doc/tutorial/venv.rst:63
msgid ""
"(This script is written for the bash shell.  If you use the :program:`csh` "
"or :program:`fish` shells, there are alternate ``activate.csh`` and "
"``activate.fish`` scripts you should use instead.)"
msgstr ""
"(Ce script est écrit pour le shell :program:`bash`, si vous utilisez :"
"program:`csh` ou :program:`fish`, utilisez les variantes ``activate.csh`` ou "
"``activate.fish``.)"

#: ../Doc/tutorial/venv.rst:68
msgid ""
"Activating the virtual environment will change your shell's prompt to show "
"what virtual environment you're using, and modify the environment so that "
"running ``python`` will get you that particular version and installation of "
"Python. For example:"
msgstr ""

#: ../Doc/tutorial/venv.rst:87
msgid "Managing Packages with pip"
msgstr "Gérer les Paquets avec pip"

#: ../Doc/tutorial/venv.rst:89
msgid ""
"You can install, upgrade, and remove packages using a program called :"
"program:`pip`.  By default ``pip`` will install packages from the Python "
"Package Index, <https://pypi.python.org/pypi>.  You can browse the Python "
"Package Index by going to it in your web browser, or you can use ``pip``'s "
"limited search feature:"
msgstr ""

#: ../Doc/tutorial/venv.rst:105
msgid ""
"``pip`` has a number of subcommands: \"search\", \"install\", \"uninstall\", "
"\"freeze\", etc.  (Consult the :ref:`installing-index` guide for complete "
"documentation for ``pip``.)"
msgstr ""
"``pip`` a plusieurs sous commandes : \"search\", \"install\", \" uninstall"
"\", \"freeze\", etc... (Consultez le guide :ref:`installing-index` contenant "
"une documentation exhaustive sur ``pip``.)"

#: ../Doc/tutorial/venv.rst:109
msgid ""
"You can install the latest version of a package by specifying a package's "
"name:"
msgstr ""

#: ../Doc/tutorial/venv.rst:120
msgid ""
"You can also install a specific version of a package by giving the package "
"name  followed by ``==`` and the version number:"
msgstr ""

#: ../Doc/tutorial/venv.rst:131
msgid ""
"If you re-run this command, ``pip`` will notice that the requested version "
"is already installed and do nothing.  You can supply a different version "
"number to get that version, or you can run ``pip install --upgrade`` to "
"upgrade the package to the latest version:"
msgstr ""

#: ../Doc/tutorial/venv.rst:146
msgid ""
"``pip uninstall`` followed by one or more package names will remove the "
"packages from the virtual environment."
msgstr ""
"``pip uninstall`` suivi d'un ou plusieurs noms de paquets les supprimera de "
"votre virtualenv."

#: ../Doc/tutorial/venv.rst:149
msgid "``pip show`` will display information about a particular package:"
msgstr ""

#: ../Doc/tutorial/venv.rst:166
msgid ""
"``pip list`` will display all of the packages installed in the virtual "
"environment:"
msgstr ""

#: ../Doc/tutorial/venv.rst:178
msgid ""
"``pip freeze`` will produce a similar list of the installed packages, but "
"the output uses the format that ``pip install`` expects. A common convention "
"is to put this list in a ``requirements.txt`` file:"
msgstr ""

#: ../Doc/tutorial/venv.rst:190
msgid ""
"The ``requirements.txt`` can then be committed to version control and "
"shipped as part of an application.  Users can then install all the necessary "
"packages with ``install -r``:"
msgstr ""

#: ../Doc/tutorial/venv.rst:207
msgid ""
"``pip`` has many more options.  Consult the :ref:`installing-index` guide "
"for complete documentation for ``pip``.  When you've written a package and "
"want to make it available on the Python Package Index, consult the :ref:"
"`distributing-index` guide."
msgstr ""
"``pip`` a beaucoup d'autres options, documentées dans le guide :ref:"
"`installing-index`. Lorsque vous aurez écrit un paquet, si vous voulez le "
"rendre disponible sur PyPI, lisez le guide :ref:`distributing-index`."
