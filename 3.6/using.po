# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-17 21:44+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/using/cmdline.rst:9
msgid "Command line and environment"
msgstr ""

#: ../Doc/using/cmdline.rst:11
msgid ""
"The CPython interpreter scans the command line and the environment for "
"various settings."
msgstr ""

#: ../Doc/using/cmdline.rst:16
msgid ""
"Other implementations' command line schemes may differ.  See :ref:"
"`implementations` for further resources."
msgstr ""

#: ../Doc/using/cmdline.rst:23
msgid "Command line"
msgstr ""

#: ../Doc/using/cmdline.rst:25
msgid "When invoking Python, you may specify any of these options::"
msgstr ""

#: ../Doc/using/cmdline.rst:29
msgid ""
"The most common use case is, of course, a simple invocation of a script::"
msgstr ""

#: ../Doc/using/cmdline.rst:37
msgid "Interface options"
msgstr ""

#: ../Doc/using/cmdline.rst:39
msgid ""
"The interpreter interface resembles that of the UNIX shell, but provides "
"some additional methods of invocation:"
msgstr ""

#: ../Doc/using/cmdline.rst:42
msgid ""
"When called with standard input connected to a tty device, it prompts for "
"commands and executes them until an EOF (an end-of-file character, you can "
"produce that with :kbd:`Ctrl-D` on UNIX or :kbd:`Ctrl-Z, Enter` on Windows) "
"is read."
msgstr ""

#: ../Doc/using/cmdline.rst:45
msgid ""
"When called with a file name argument or with a file as standard input, it "
"reads and executes a script from that file."
msgstr ""

#: ../Doc/using/cmdline.rst:47
msgid ""
"When called with a directory name argument, it reads and executes an "
"appropriately named script from that directory."
msgstr ""

#: ../Doc/using/cmdline.rst:49
msgid ""
"When called with ``-c command``, it executes the Python statement(s) given "
"as *command*.  Here *command* may contain multiple statements separated by "
"newlines. Leading whitespace is significant in Python statements!"
msgstr ""

#: ../Doc/using/cmdline.rst:52
msgid ""
"When called with ``-m module-name``, the given module is located on the "
"Python module path and executed as a script."
msgstr ""

#: ../Doc/using/cmdline.rst:55
msgid ""
"In non-interactive mode, the entire input is parsed before it is executed."
msgstr ""

#: ../Doc/using/cmdline.rst:57
msgid ""
"An interface option terminates the list of options consumed by the "
"interpreter, all consecutive arguments will end up in :data:`sys.argv` -- "
"note that the first element, subscript zero (``sys.argv[0]``), is a string "
"reflecting the program's source."
msgstr ""

#: ../Doc/using/cmdline.rst:64
msgid ""
"Execute the Python code in *command*.  *command* can be one or more "
"statements separated by newlines, with significant leading whitespace as in "
"normal module code."
msgstr ""

#: ../Doc/using/cmdline.rst:68
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be ``\"-c"
"\"`` and the current directory will be added to the start of :data:`sys."
"path` (allowing modules in that directory to be imported as top level "
"modules)."
msgstr ""

#: ../Doc/using/cmdline.rst:76
msgid ""
"Search :data:`sys.path` for the named module and execute its contents as "
"the :mod:`__main__` module."
msgstr ""

#: ../Doc/using/cmdline.rst:79
msgid ""
"Since the argument is a *module* name, you must not give a file extension "
"(``.py``).  The module name should be a valid absolute Python module name, "
"but the implementation may not always enforce this (e.g. it may allow you to "
"use a name that includes a hyphen)."
msgstr ""

#: ../Doc/using/cmdline.rst:84
msgid ""
"Package names (including namespace packages) are also permitted. When a "
"package name is supplied instead of a normal module, the interpreter will "
"execute ``<pkg>.__main__`` as the main module. This behaviour is "
"deliberately similar to the handling of directories and zipfiles that are "
"passed to the interpreter as the script argument."
msgstr ""

#: ../Doc/using/cmdline.rst:93
msgid ""
"This option cannot be used with built-in modules and extension modules "
"written in C, since they do not have Python module files. However, it can "
"still be used for precompiled modules, even if the original source file is "
"not available."
msgstr ""

#: ../Doc/using/cmdline.rst:98
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be the "
"full path to the module file (while the module file is being located, the "
"first element will be set to ``\"-m\"``). As with the :option:`-c` option, "
"the current directory will be added to the start of :data:`sys.path`."
msgstr ""

#: ../Doc/using/cmdline.rst:103
msgid ""
"Many standard library modules contain code that is invoked on their "
"execution as a script.  An example is the :mod:`timeit` module::"
msgstr ""

#: ../Doc/using/cmdline.rst:111
msgid ":func:`runpy.run_module`"
msgstr ""

#: ../Doc/using/cmdline.rst:111 ../Doc/using/cmdline.rst:153
msgid "Equivalent functionality directly available to Python code"
msgstr ""

#: ../Doc/using/cmdline.rst:113
msgid ":pep:`338` -- Executing modules as scripts"
msgstr ""

#: ../Doc/using/cmdline.rst:116
msgid "Supply the package name to run a ``__main__`` submodule."
msgstr ""

#: ../Doc/using/cmdline.rst:119
msgid "namespace packages are also supported"
msgstr ""

#: ../Doc/using/cmdline.rst:125
msgid ""
"Read commands from standard input (:data:`sys.stdin`).  If standard input is "
"a terminal, :option:`-i` is implied."
msgstr ""

#: ../Doc/using/cmdline.rst:128
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be ``\"-"
"\"`` and the current directory will be added to the start of :data:`sys."
"path`."
msgstr ""

#: ../Doc/using/cmdline.rst:135
msgid ""
"Execute the Python code contained in *script*, which must be a filesystem "
"path (absolute or relative) referring to either a Python file, a directory "
"containing a ``__main__.py`` file, or a zipfile containing a ``__main__.py`` "
"file."
msgstr ""

#: ../Doc/using/cmdline.rst:140
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be the "
"script name as given on the command line."
msgstr ""

#: ../Doc/using/cmdline.rst:143
msgid ""
"If the script name refers directly to a Python file, the directory "
"containing that file is added to the start of :data:`sys.path`, and the file "
"is executed as the :mod:`__main__` module."
msgstr ""

#: ../Doc/using/cmdline.rst:147
msgid ""
"If the script name refers to a directory or zipfile, the script name is "
"added to the start of :data:`sys.path` and the ``__main__.py`` file in that "
"location is executed as the :mod:`__main__` module."
msgstr ""

#: ../Doc/using/cmdline.rst:152
msgid ":func:`runpy.run_path`"
msgstr ""

#: ../Doc/using/cmdline.rst:156
msgid ""
"If no interface option is given, :option:`-i` is implied, ``sys.argv[0]`` is "
"an empty string (``\"\"``) and the current directory will be added to the "
"start of :data:`sys.path`.  Also, tab-completion and history editing is "
"automatically enabled, if available on your platform (see :ref:`rlcompleter-"
"config`)."
msgstr ""

#: ../Doc/using/cmdline.rst:162
msgid ":ref:`tut-invoking`"
msgstr ""

#: ../Doc/using/cmdline.rst:164
msgid "Automatic enabling of tab-completion and history editing."
msgstr ""

#: ../Doc/using/cmdline.rst:169
msgid "Generic options"
msgstr ""

#: ../Doc/using/cmdline.rst:175
msgid "Print a short description of all command line options."
msgstr ""

#: ../Doc/using/cmdline.rst:181
msgid "Print the Python version number and exit.  Example output could be::"
msgstr ""

#: ../Doc/using/cmdline.rst:189
msgid "Miscellaneous options"
msgstr ""

#: ../Doc/using/cmdline.rst:193
msgid ""
"Issue a warning when comparing :class:`bytes` or :class:`bytearray` with :"
"class:`str` or :class:`bytes` with :class:`int`.  Issue an error when the "
"option is given twice (:option:`-bb`)."
msgstr ""

#: ../Doc/using/cmdline.rst:197
msgid "Affects comparisons of :class:`bytes` with :class:`int`."
msgstr ""

#: ../Doc/using/cmdline.rst:202
msgid ""
"If given, Python won't try to write ``.pyc`` files on the import of source "
"modules.  See also :envvar:`PYTHONDONTWRITEBYTECODE`."
msgstr ""

#: ../Doc/using/cmdline.rst:208
msgid ""
"Turn on parser debugging output (for wizards only, depending on compilation "
"options).  See also :envvar:`PYTHONDEBUG`."
msgstr ""

#: ../Doc/using/cmdline.rst:214
msgid ""
"Ignore all :envvar:`PYTHON*` environment variables, e.g. :envvar:"
"`PYTHONPATH` and :envvar:`PYTHONHOME`, that might be set."
msgstr ""

#: ../Doc/using/cmdline.rst:220
msgid ""
"When a script is passed as first argument or the :option:`-c` option is "
"used, enter interactive mode after executing the script or the command, even "
"when :data:`sys.stdin` does not appear to be a terminal.  The :envvar:"
"`PYTHONSTARTUP` file is not read."
msgstr ""

#: ../Doc/using/cmdline.rst:225
msgid ""
"This can be useful to inspect global variables or a stack trace when a "
"script raises an exception.  See also :envvar:`PYTHONINSPECT`."
msgstr ""

#: ../Doc/using/cmdline.rst:231
msgid ""
"Run Python in isolated mode. This also implies -E and -s. In isolated mode :"
"data:`sys.path` contains neither the script's directory nor the user's site-"
"packages directory. All :envvar:`PYTHON*` environment variables are ignored, "
"too. Further restrictions may be imposed to prevent the user from injecting "
"malicious code."
msgstr ""

#: ../Doc/using/cmdline.rst:242
msgid "Turn on basic optimizations.  See also :envvar:`PYTHONOPTIMIZE`."
msgstr ""

#: ../Doc/using/cmdline.rst:247
msgid "Discard docstrings in addition to the :option:`-O` optimizations."
msgstr ""

#: ../Doc/using/cmdline.rst:252
msgid ""
"Don't display the copyright and version messages even in interactive mode."
msgstr ""

#: ../Doc/using/cmdline.rst:259
msgid ""
"Kept for compatibility.  On Python 3.3 and greater, hash randomization is "
"turned on by default."
msgstr ""

#: ../Doc/using/cmdline.rst:262
msgid ""
"On previous versions of Python, this option turns on hash randomization, so "
"that the :meth:`__hash__` values of str, bytes and datetime are \"salted\" "
"with an unpredictable random value.  Although they remain constant within an "
"individual Python process, they are not predictable between repeated "
"invocations of Python."
msgstr ""

#: ../Doc/using/cmdline.rst:268
msgid ""
"Hash randomization is intended to provide protection against a denial-of-"
"service caused by carefully-chosen inputs that exploit the worst case "
"performance of a dict construction, O(n^2) complexity.  See http://www.ocert."
"org/advisories/ocert-2011-003.html for details."
msgstr ""

#: ../Doc/using/cmdline.rst:273
msgid ""
":envvar:`PYTHONHASHSEED` allows you to set a fixed value for the hash seed "
"secret."
msgstr ""

#: ../Doc/using/cmdline.rst:281
msgid ""
"Don't add the :data:`user site-packages directory <site.USER_SITE>` to :data:"
"`sys.path`."
msgstr ""

#: ../Doc/using/cmdline.rst:286 ../Doc/using/cmdline.rst:574
#: ../Doc/using/cmdline.rst:586
msgid ":pep:`370` -- Per user site-packages directory"
msgstr ""

#: ../Doc/using/cmdline.rst:291
msgid ""
"Disable the import of the module :mod:`site` and the site-dependent "
"manipulations of :data:`sys.path` that it entails.  Also disable these "
"manipulations if :mod:`site` is explicitly imported later (call :func:`site."
"main` if you want them to be triggered)."
msgstr ""

#: ../Doc/using/cmdline.rst:299
msgid ""
"Force the binary layer of the stdout and stderr streams (which is available "
"as their ``buffer`` attribute) to be unbuffered. The text I/O layer will "
"still be line-buffered if writing to the console, or block-buffered if "
"redirected to a non-interactive file."
msgstr ""

#: ../Doc/using/cmdline.rst:304
msgid "See also :envvar:`PYTHONUNBUFFERED`."
msgstr ""

#: ../Doc/using/cmdline.rst:309
msgid ""
"Print a message each time a module is initialized, showing the place "
"(filename or built-in module) from which it is loaded.  When given twice (:"
"option:`-vv`), print a message for each file that is checked for when "
"searching for a module.  Also provides information on module cleanup at "
"exit. See also :envvar:`PYTHONVERBOSE`."
msgstr ""

#: ../Doc/using/cmdline.rst:318
msgid ""
"Warning control.  Python's warning machinery by default prints warning "
"messages to :data:`sys.stderr`.  A typical warning message has the following "
"form::"
msgstr ""

#: ../Doc/using/cmdline.rst:324
msgid ""
"By default, each warning is printed once for each source line where it "
"occurs.  This option controls how often warnings are printed."
msgstr ""

#: ../Doc/using/cmdline.rst:327
msgid ""
"Multiple :option:`-W` options may be given; when a warning matches more than "
"one option, the action for the last matching option is performed.  Invalid :"
"option:`-W` options are ignored (though, a warning message is printed about "
"invalid options when the first warning is issued)."
msgstr ""

#: ../Doc/using/cmdline.rst:332
msgid ""
"Warnings can also be controlled from within a Python program using the :mod:"
"`warnings` module."
msgstr ""

#: ../Doc/using/cmdline.rst:335
msgid ""
"The simplest form of argument is one of the following action strings (or a "
"unique abbreviation):"
msgstr ""

#: ../Doc/using/cmdline.rst:338
msgid "``ignore``"
msgstr ""

#: ../Doc/using/cmdline.rst:339
msgid "Ignore all warnings."
msgstr ""

#: ../Doc/using/cmdline.rst:341
msgid "``default``"
msgstr ""

#: ../Doc/using/cmdline.rst:341
msgid ""
"Explicitly request the default behavior (printing each warning once per "
"source line)."
msgstr ""

#: ../Doc/using/cmdline.rst:345
msgid "``all``"
msgstr ""

#: ../Doc/using/cmdline.rst:344
msgid ""
"Print a warning each time it occurs (this may generate many messages if a "
"warning is triggered repeatedly for the same source line, such as inside a "
"loop)."
msgstr ""

#: ../Doc/using/cmdline.rst:347
msgid "``module``"
msgstr ""

#: ../Doc/using/cmdline.rst:348
msgid "Print each warning only the first time it occurs in each module."
msgstr ""

#: ../Doc/using/cmdline.rst:349
msgid "``once``"
msgstr ""

#: ../Doc/using/cmdline.rst:350
msgid "Print each warning only the first time it occurs in the program."
msgstr ""

#: ../Doc/using/cmdline.rst:352
msgid "``error``"
msgstr ""

#: ../Doc/using/cmdline.rst:352
msgid "Raise an exception instead of printing a warning message."
msgstr ""

#: ../Doc/using/cmdline.rst:354
msgid "The full form of argument is::"
msgstr ""

#: ../Doc/using/cmdline.rst:358
msgid ""
"Here, *action* is as explained above but only applies to messages that match "
"the remaining fields.  Empty fields match all values; trailing empty fields "
"may be omitted.  The *message* field matches the start of the warning "
"message printed; this match is case-insensitive.  The *category* field "
"matches the warning category.  This must be a class name; the match tests "
"whether the actual warning category of the message is a subclass of the "
"specified warning category.  The full class name must be given.  The "
"*module* field matches the (fully-qualified) module name; this match is case-"
"sensitive.  The *line* field matches the line number, where zero matches all "
"line numbers and is thus equivalent to an omitted line number."
msgstr ""

#: ../Doc/using/cmdline.rst:370
msgid ":mod:`warnings` -- the warnings module"
msgstr ""

#: ../Doc/using/cmdline.rst:372
msgid ":pep:`230` -- Warning framework"
msgstr ""

#: ../Doc/using/cmdline.rst:374
msgid ":envvar:`PYTHONWARNINGS`"
msgstr ""

#: ../Doc/using/cmdline.rst:379
msgid ""
"Skip the first line of the source, allowing use of non-Unix forms of ``#!"
"cmd``.  This is intended for a DOS specific hack only."
msgstr ""

#: ../Doc/using/cmdline.rst:382
msgid "The line numbers in error messages will be off by one."
msgstr ""

#: ../Doc/using/cmdline.rst:387
msgid ""
"Reserved for various implementation-specific options.  CPython currently "
"defines the following possible values:"
msgstr ""

#: ../Doc/using/cmdline.rst:390
msgid "``-X faulthandler`` to enable :mod:`faulthandler`;"
msgstr ""

#: ../Doc/using/cmdline.rst:391
msgid ""
"``-X showrefcount`` to enable the output of the total reference count and "
"memory blocks (only works on debug builds);"
msgstr ""

#: ../Doc/using/cmdline.rst:393
msgid ""
"``-X tracemalloc`` to start tracing Python memory allocations using the :mod:"
"`tracemalloc` module. By default, only the most recent frame is stored in a "
"traceback of a trace. Use ``-X tracemalloc=NFRAME`` to start tracing with a "
"traceback limit of *NFRAME* frames. See the :func:`tracemalloc.start` for "
"more information."
msgstr ""

#: ../Doc/using/cmdline.rst:398
msgid ""
"``-X showalloccount`` to enable the output of the total count of allocated "
"objects for each type (only works when built with ``COUNT_ALLOCS`` defined);"
msgstr ""

#: ../Doc/using/cmdline.rst:401
msgid ""
"It also allows passing arbitrary values and retrieving them through the :"
"data:`sys._xoptions` dictionary."
msgstr ""

#: ../Doc/using/cmdline.rst:404
msgid "It is now allowed to pass :option:`-X` with CPython."
msgstr ""

#: ../Doc/using/cmdline.rst:407
msgid "The ``-X faulthandler`` option."
msgstr ""

#: ../Doc/using/cmdline.rst:410
msgid "The ``-X showrefcount`` and ``-X tracemalloc`` options."
msgstr ""

#: ../Doc/using/cmdline.rst:413
msgid "The ``-X showalloccount`` option."
msgstr ""

#: ../Doc/using/cmdline.rst:418
msgid "Options you shouldn't use"
msgstr ""

#: ../Doc/using/cmdline.rst:422
msgid "Reserved for use by Jython_."
msgstr ""

#: ../Doc/using/cmdline.rst:430
msgid "Environment variables"
msgstr ""

#: ../Doc/using/cmdline.rst:432
msgid ""
"These environment variables influence Python's behavior, they are processed "
"before the command-line switches other than -E or -I.  It is customary that "
"command-line switches override environmental variables where there is a "
"conflict."
msgstr ""

#: ../Doc/using/cmdline.rst:439
msgid ""
"Change the location of the standard Python libraries.  By default, the "
"libraries are searched in :file:`{prefix}/lib/python{version}` and :file:"
"`{exec_prefix}/lib/python{version}`, where :file:`{prefix}` and :file:"
"`{exec_prefix}` are installation-dependent directories, both defaulting to :"
"file:`/usr/local`."
msgstr ""

#: ../Doc/using/cmdline.rst:445
msgid ""
"When :envvar:`PYTHONHOME` is set to a single directory, its value replaces "
"both :file:`{prefix}` and :file:`{exec_prefix}`.  To specify different "
"values for these, set :envvar:`PYTHONHOME` to :file:`{prefix}:{exec_prefix}`."
msgstr ""

#: ../Doc/using/cmdline.rst:452
msgid ""
"Augment the default search path for module files.  The format is the same as "
"the shell's :envvar:`PATH`: one or more directory pathnames separated by :"
"data:`os.pathsep` (e.g. colons on Unix or semicolons on Windows). Non-"
"existent directories are silently ignored."
msgstr ""

#: ../Doc/using/cmdline.rst:457
msgid ""
"In addition to normal directories, individual :envvar:`PYTHONPATH` entries "
"may refer to zipfiles containing pure Python modules (in either source or "
"compiled form). Extension modules cannot be imported from zipfiles."
msgstr ""

#: ../Doc/using/cmdline.rst:461
msgid ""
"The default search path is installation dependent, but generally begins "
"with :file:`{prefix}/lib/python{version}` (see :envvar:`PYTHONHOME` above).  "
"It is *always* appended to :envvar:`PYTHONPATH`."
msgstr ""

#: ../Doc/using/cmdline.rst:465
msgid ""
"An additional directory will be inserted in the search path in front of :"
"envvar:`PYTHONPATH` as described above under :ref:`using-on-interface-"
"options`. The search path can be manipulated from within a Python program as "
"the variable :data:`sys.path`."
msgstr ""

#: ../Doc/using/cmdline.rst:473
msgid ""
"If this is the name of a readable file, the Python commands in that file are "
"executed before the first prompt is displayed in interactive mode.  The file "
"is executed in the same namespace where interactive commands are executed so "
"that objects defined or imported in it can be used without qualification in "
"the interactive session.  You can also change the prompts :data:`sys.ps1` "
"and :data:`sys.ps2` and the hook :data:`sys.__interactivehook__` in this "
"file."
msgstr ""

#: ../Doc/using/cmdline.rst:483
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-O` option.  If set to an integer, it is equivalent to specifying :"
"option:`-O` multiple times."
msgstr ""

#: ../Doc/using/cmdline.rst:490
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-d` option.  If set to an integer, it is equivalent to specifying :"
"option:`-d` multiple times."
msgstr ""

#: ../Doc/using/cmdline.rst:497
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-i` option."
msgstr ""

#: ../Doc/using/cmdline.rst:500
msgid ""
"This variable can also be modified by Python code using :data:`os.environ` "
"to force inspect mode on program termination."
msgstr ""

#: ../Doc/using/cmdline.rst:506
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-u` option."
msgstr ""

#: ../Doc/using/cmdline.rst:512
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-v` option.  If set to an integer, it is equivalent to specifying :"
"option:`-v` multiple times."
msgstr ""

#: ../Doc/using/cmdline.rst:519
msgid ""
"If this is set, Python ignores case in :keyword:`import` statements.  This "
"only works on Windows and OS X."
msgstr ""

#: ../Doc/using/cmdline.rst:525
msgid ""
"If this is set to a non-empty string, Python won't try to write ``.pyc`` or "
"``.pyo`` files on the import of source modules.  This is equivalent to "
"specifying the :option:`-B` option."
msgstr ""

#: ../Doc/using/cmdline.rst:532
msgid ""
"If this variable is not set or set to ``random``, a random value is used to "
"seed the hashes of str, bytes and datetime objects."
msgstr ""

#: ../Doc/using/cmdline.rst:535
msgid ""
"If :envvar:`PYTHONHASHSEED` is set to an integer value, it is used as a "
"fixed seed for generating the hash() of the types covered by the hash "
"randomization."
msgstr ""

#: ../Doc/using/cmdline.rst:539
msgid ""
"Its purpose is to allow repeatable hashing, such as for selftests for the "
"interpreter itself, or to allow a cluster of python processes to share hash "
"values."
msgstr ""

#: ../Doc/using/cmdline.rst:543
msgid ""
"The integer must be a decimal number in the range [0,4294967295].  "
"Specifying the value 0 will disable hash randomization."
msgstr ""

#: ../Doc/using/cmdline.rst:551
msgid ""
"If this is set before running the interpreter, it overrides the encoding "
"used for stdin/stdout/stderr, in the syntax ``encodingname:errorhandler``.  "
"Both the ``encodingname`` and the ``:errorhandler`` parts are optional and "
"have the same meaning as in :func:`str.encode`."
msgstr ""

#: ../Doc/using/cmdline.rst:556
msgid ""
"For stderr, the ``:errorhandler`` part is ignored; the handler will always "
"be ``'backslashreplace'``."
msgstr ""

#: ../Doc/using/cmdline.rst:559
msgid "The ``encodingname`` part is now optional."
msgstr ""

#: ../Doc/using/cmdline.rst:562
msgid ""
"On Windows, the encoding specified by this variable is ignored for "
"interactive console buffers unless :envvar:`PYTHONLEGACYWINDOWSIOENCODING` "
"is also specified. Files and pipes redirected through the standard streams "
"are not affected."
msgstr ""

#: ../Doc/using/cmdline.rst:569
msgid ""
"If this is set, Python won't add the :data:`user site-packages directory "
"<site.USER_SITE>` to :data:`sys.path`."
msgstr ""

#: ../Doc/using/cmdline.rst:579
msgid ""
"Defines the :data:`user base directory <site.USER_BASE>`, which is used to "
"compute the path of the :data:`user site-packages directory <site."
"USER_SITE>` and :ref:`Distutils installation paths <inst-alt-install-user>` "
"for ``python setup.py install --user``."
msgstr ""

#: ../Doc/using/cmdline.rst:591
msgid ""
"If this environment variable is set, ``sys.argv[0]`` will be set to its "
"value instead of the value got through the C runtime.  Only works on Mac OS "
"X."
msgstr ""

#: ../Doc/using/cmdline.rst:597
msgid ""
"This is equivalent to the :option:`-W` option. If set to a comma separated "
"string, it is equivalent to specifying :option:`-W` multiple times."
msgstr ""

#: ../Doc/using/cmdline.rst:603
msgid ""
"If this environment variable is set to a non-empty string, :func:"
"`faulthandler.enable` is called at startup: install a handler for :const:"
"`SIGSEGV`, :const:`SIGFPE`, :const:`SIGABRT`, :const:`SIGBUS` and :const:"
"`SIGILL` signals to dump the Python traceback.  This is equivalent to :"
"option:`-X` ``faulthandler`` option."
msgstr ""

#: ../Doc/using/cmdline.rst:614
msgid ""
"If this environment variable is set to a non-empty string, start tracing "
"Python memory allocations using the :mod:`tracemalloc` module. The value of "
"the variable is the maximum number of frames stored in a traceback of a "
"trace. For example, ``PYTHONTRACEMALLOC=1`` stores only the most recent "
"frame. See the :func:`tracemalloc.start` for more information."
msgstr ""

#: ../Doc/using/cmdline.rst:625
msgid ""
"If this environment variable is set to a non-empty string, enable the :ref:"
"`debug mode <asyncio-debug-mode>` of the :mod:`asyncio` module."
msgstr ""

#: ../Doc/using/cmdline.rst:633
msgid "Set the Python memory allocators and/or install debug hooks."
msgstr ""

#: ../Doc/using/cmdline.rst:635
msgid "Set the family of memory allocators used by Python:"
msgstr ""

#: ../Doc/using/cmdline.rst:637
msgid ""
"``malloc``: use the :c:func:`malloc` function of the C library for all "
"domains (:c:data:`PYMEM_DOMAIN_RAW`, :c:data:`PYMEM_DOMAIN_MEM`, :c:data:"
"`PYMEM_DOMAIN_OBJ`)."
msgstr ""

#: ../Doc/using/cmdline.rst:640
msgid ""
"``pymalloc``: use the :ref:`pymalloc allocator <pymalloc>` for :c:data:"
"`PYMEM_DOMAIN_MEM` and :c:data:`PYMEM_DOMAIN_OBJ` domains and use the :c:"
"func:`malloc` function for the :c:data:`PYMEM_DOMAIN_RAW` domain."
msgstr ""

#: ../Doc/using/cmdline.rst:644
msgid "Install debug hooks:"
msgstr ""

#: ../Doc/using/cmdline.rst:646
msgid "``debug``: install debug hooks on top of the default memory allocator"
msgstr ""

#: ../Doc/using/cmdline.rst:647
msgid "``malloc_debug``: same as ``malloc`` but also install debug hooks"
msgstr ""

#: ../Doc/using/cmdline.rst:648
msgid "``pymalloc_debug``: same as ``pymalloc`` but also install debug hooks"
msgstr ""

#: ../Doc/using/cmdline.rst:650
msgid ""
"When Python is compiled in release mode, the default is ``pymalloc``. When "
"compiled in debug mode, the default is ``pymalloc_debug`` and the debug "
"hooks are used automatically."
msgstr ""

#: ../Doc/using/cmdline.rst:654
msgid ""
"If Python is configured without ``pymalloc`` support, ``pymalloc`` and "
"``pymalloc_debug`` are not available, the default is ``malloc`` in release "
"mode and ``malloc_debug`` in debug mode."
msgstr ""

#: ../Doc/using/cmdline.rst:658
msgid ""
"See the :c:func:`PyMem_SetupDebugHooks` function for debug hooks on Python "
"memory allocators."
msgstr ""

#: ../Doc/using/cmdline.rst:666
msgid ""
"If set to a non-empty string, Python will print statistics of the :ref:"
"`pymalloc memory allocator <pymalloc>` every time a new pymalloc object "
"arena is created, and on shutdown."
msgstr ""

#: ../Doc/using/cmdline.rst:670
msgid ""
"This variable is ignored if the :envvar:`PYTHONMALLOC` environment variable "
"is used to force the :c:func:`malloc` allocator of the C library, or if "
"Python is configured without ``pymalloc`` support."
msgstr ""

#: ../Doc/using/cmdline.rst:674
msgid ""
"This variable can now also be used on Python compiled in release mode. It "
"now has no effect if set to an empty string."
msgstr ""

#: ../Doc/using/cmdline.rst:681
msgid ""
"If set to a non-empty string, the default filesystem encoding and errors "
"mode will revert to their pre-3.6 values of 'mbcs' and 'replace', "
"respectively. Otherwise, the new defaults 'utf-8' and 'surrogatepass' are "
"used."
msgstr ""

#: ../Doc/using/cmdline.rst:685
msgid ""
"This may also be enabled at runtime with :func:`sys."
"_enablelegacywindowsfsencoding()`."
msgstr ""

#: ../Doc/using/cmdline.rst:688 ../Doc/using/cmdline.rst:702
msgid "Availability: Windows"
msgstr ""

#: ../Doc/using/cmdline.rst:690
msgid "See :pep:`529` for more details."
msgstr ""

#: ../Doc/using/cmdline.rst:695
msgid ""
"If set to a non-empty string, does not use the new console reader and "
"writer. This means that Unicode characters will be encoded according to the "
"active console code page, rather than using utf-8."
msgstr ""

#: ../Doc/using/cmdline.rst:699
msgid ""
"This variable is ignored if the standard streams are redirected (to files or "
"pipes) rather than referring to console buffers."
msgstr ""

#: ../Doc/using/cmdline.rst:707
msgid "Debug-mode variables"
msgstr ""

#: ../Doc/using/cmdline.rst:709
msgid ""
"Setting these variables only has an effect in a debug build of Python, that "
"is, if Python was configured with the ``--with-pydebug`` build option."
msgstr ""

#: ../Doc/using/cmdline.rst:714
msgid "If set, Python will print threading debug info."
msgstr ""

#: ../Doc/using/cmdline.rst:719
msgid ""
"If set, Python will dump objects and reference counts still alive after "
"shutting down the interpreter."
msgstr ""

#: ../Doc/using/index.rst:5
msgid "Python Setup and Usage"
msgstr ""

#: ../Doc/using/index.rst:8
msgid ""
"This part of the documentation is devoted to general information on the "
"setup of the Python environment on different platform, the invocation of the "
"interpreter and things that make working with Python easier."
msgstr ""

#: ../Doc/using/mac.rst:6
msgid "Using Python on a Macintosh"
msgstr ""

#: ../Doc/using/mac.rst:8
msgid "Bob Savage <bobsavage@mac.com>"
msgstr ""

#: ../Doc/using/mac.rst:11
msgid ""
"Python on a Macintosh running Mac OS X is in principle very similar to "
"Python on any other Unix platform, but there are a number of additional "
"features such as the IDE and the Package Manager that are worth pointing out."
msgstr ""

#: ../Doc/using/mac.rst:18
msgid "Getting and Installing MacPython"
msgstr ""

#: ../Doc/using/mac.rst:20
msgid ""
"Mac OS X 10.8 comes with Python 2.7 pre-installed by Apple.  If you wish, "
"you are invited to install the most recent version of Python 3 from the "
"Python website (https://www.python.org).  A current \"universal binary\" "
"build of Python, which runs natively on the Mac's new Intel and legacy PPC "
"CPU's, is available there."
msgstr ""

#: ../Doc/using/mac.rst:26
msgid "What you get after installing is a number of things:"
msgstr ""

#: ../Doc/using/mac.rst:28
msgid ""
"A :file:`MacPython 3.6` folder in your :file:`Applications` folder. In here "
"you find IDLE, the development environment that is a standard part of "
"official Python distributions; PythonLauncher, which handles double-clicking "
"Python scripts from the Finder; and the \"Build Applet\" tool, which allows "
"you to package Python scripts as standalone applications on your system."
msgstr ""

#: ../Doc/using/mac.rst:34
msgid ""
"A framework :file:`/Library/Frameworks/Python.framework`, which includes the "
"Python executable and libraries. The installer adds this location to your "
"shell path. To uninstall MacPython, you can simply remove these three "
"things. A symlink to the Python executable is placed in /usr/local/bin/."
msgstr ""

#: ../Doc/using/mac.rst:39
msgid ""
"The Apple-provided build of Python is installed in :file:`/System/Library/"
"Frameworks/Python.framework` and :file:`/usr/bin/python`, respectively. You "
"should never modify or delete these, as they are Apple-controlled and are "
"used by Apple- or third-party software.  Remember that if you choose to "
"install a newer Python version from python.org, you will have two different "
"but functional Python installations on your computer, so it will be "
"important that your paths and usages are consistent with what you want to do."
msgstr ""

#: ../Doc/using/mac.rst:47
msgid ""
"IDLE includes a help menu that allows you to access Python documentation. If "
"you are completely new to Python you should start reading the tutorial "
"introduction in that document."
msgstr ""

#: ../Doc/using/mac.rst:51
msgid ""
"If you are familiar with Python on other Unix platforms you should read the "
"section on running Python scripts from the Unix shell."
msgstr ""

#: ../Doc/using/mac.rst:56
msgid "How to run a Python script"
msgstr ""

#: ../Doc/using/mac.rst:58
msgid ""
"Your best way to get started with Python on Mac OS X is through the IDLE "
"integrated development environment, see section :ref:`ide` and use the Help "
"menu when the IDE is running."
msgstr ""

#: ../Doc/using/mac.rst:62
msgid ""
"If you want to run Python scripts from the Terminal window command line or "
"from the Finder you first need an editor to create your script. Mac OS X "
"comes with a number of standard Unix command line editors, :program:`vim` "
"and :program:`emacs` among them. If you want a more Mac-like editor, :"
"program:`BBEdit` or :program:`TextWrangler` from Bare Bones Software (see "
"http://www.barebones.com/products/bbedit/index.html) are good choices, as "
"is :program:`TextMate` (see https://macromates.com/). Other editors include :"
"program:`Gvim` (http://macvim.org) and :program:`Aquamacs` (http://aquamacs."
"org/)."
msgstr ""

#: ../Doc/using/mac.rst:72
msgid ""
"To run your script from the Terminal window you must make sure that :file:`/"
"usr/local/bin` is in your shell search path."
msgstr ""

#: ../Doc/using/mac.rst:75
msgid "To run your script from the Finder you have two options:"
msgstr ""

#: ../Doc/using/mac.rst:77
msgid "Drag it to :program:`PythonLauncher`"
msgstr ""

#: ../Doc/using/mac.rst:79
msgid ""
"Select :program:`PythonLauncher` as the default application to open your "
"script (or any .py script) through the finder Info window and double-click "
"it. :program:`PythonLauncher` has various preferences to control how your "
"script is launched. Option-dragging allows you to change these for one "
"invocation, or use its Preferences menu to change things globally."
msgstr ""

#: ../Doc/using/mac.rst:89
msgid "Running scripts with a GUI"
msgstr ""

#: ../Doc/using/mac.rst:91
msgid ""
"With older versions of Python, there is one Mac OS X quirk that you need to "
"be aware of: programs that talk to the Aqua window manager (in other words, "
"anything that has a GUI) need to be run in a special way. Use :program:"
"`pythonw` instead of :program:`python` to start such scripts."
msgstr ""

#: ../Doc/using/mac.rst:96
msgid ""
"With Python 3.6, you can use either :program:`python` or :program:`pythonw`."
msgstr ""

#: ../Doc/using/mac.rst:100
msgid "Configuration"
msgstr ""

#: ../Doc/using/mac.rst:102
msgid ""
"Python on OS X honors all standard Unix environment variables such as :"
"envvar:`PYTHONPATH`, but setting these variables for programs started from "
"the Finder is non-standard as the Finder does not read your :file:`.profile` "
"or :file:`.cshrc` at startup. You need to create a file :file:`~/.MacOSX/"
"environment.plist`. See Apple's Technical Document QA1067 for details."
msgstr ""

#: ../Doc/using/mac.rst:109
msgid ""
"For more information on installation Python packages in MacPython, see "
"section :ref:`mac-package-manager`."
msgstr ""

#: ../Doc/using/mac.rst:116
msgid "The IDE"
msgstr ""

#: ../Doc/using/mac.rst:118
msgid ""
"MacPython ships with the standard IDLE development environment. A good "
"introduction to using IDLE can be found at https://hkn.eecs.berkeley.edu/"
"~dyoo/python/idle_intro/index.html."
msgstr ""

#: ../Doc/using/mac.rst:126
msgid "Installing Additional Python Packages"
msgstr ""

#: ../Doc/using/mac.rst:128
msgid "There are several methods to install additional Python packages:"
msgstr ""

#: ../Doc/using/mac.rst:130
msgid ""
"Packages can be installed via the standard Python distutils mode (``python "
"setup.py install``)."
msgstr ""

#: ../Doc/using/mac.rst:133
msgid ""
"Many packages can also be installed via the :program:`setuptools` extension "
"or :program:`pip` wrapper, see https://pip.pypa.io/."
msgstr ""

#: ../Doc/using/mac.rst:138
msgid "GUI Programming on the Mac"
msgstr ""

#: ../Doc/using/mac.rst:140
msgid ""
"There are several options for building GUI applications on the Mac with "
"Python."
msgstr ""

#: ../Doc/using/mac.rst:142
msgid ""
"*PyObjC* is a Python binding to Apple's Objective-C/Cocoa framework, which "
"is the foundation of most modern Mac development. Information on PyObjC is "
"available from https://pythonhosted.org/pyobjc/."
msgstr ""

#: ../Doc/using/mac.rst:146
msgid ""
"The standard Python GUI toolkit is :mod:`tkinter`, based on the cross-"
"platform Tk toolkit (https://www.tcl.tk). An Aqua-native version of Tk is "
"bundled with OS X by Apple, and the latest version can be downloaded and "
"installed from https://www.activestate.com; it can also be built from source."
msgstr ""

#: ../Doc/using/mac.rst:151
msgid ""
"*wxPython* is another popular cross-platform GUI toolkit that runs natively "
"on Mac OS X. Packages and documentation are available from http://www."
"wxpython.org."
msgstr ""

#: ../Doc/using/mac.rst:154
msgid ""
"*PyQt* is another popular cross-platform GUI toolkit that runs natively on "
"Mac OS X. More information can be found at https://riverbankcomputing.com/"
"software/pyqt/intro."
msgstr ""

#: ../Doc/using/mac.rst:160
msgid "Distributing Python Applications on the Mac"
msgstr ""

#: ../Doc/using/mac.rst:162
msgid ""
"The \"Build Applet\" tool that is placed in the MacPython 3.6 folder is fine "
"for packaging small Python scripts on your own machine to run as a standard "
"Mac application. This tool, however, is not robust enough to distribute "
"Python applications to other users."
msgstr ""

#: ../Doc/using/mac.rst:167
msgid ""
"The standard tool for deploying standalone Python applications on the Mac "
"is :program:`py2app`. More information on installing and using py2app can be "
"found at http://undefined.org/python/#py2app."
msgstr ""

#: ../Doc/using/mac.rst:173
msgid "Other Resources"
msgstr ""

#: ../Doc/using/mac.rst:175
msgid ""
"The MacPython mailing list is an excellent support resource for Python users "
"and developers on the Mac:"
msgstr ""

#: ../Doc/using/mac.rst:178
msgid "https://www.python.org/community/sigs/current/pythonmac-sig/"
msgstr ""

#: ../Doc/using/mac.rst:180
msgid "Another useful resource is the MacPython wiki:"
msgstr ""

#: ../Doc/using/mac.rst:182
msgid "https://wiki.python.org/moin/MacPython"
msgstr ""

#: ../Doc/using/unix.rst:7
msgid "Using Python on Unix platforms"
msgstr ""

#: ../Doc/using/unix.rst:13
msgid "Getting and installing the latest version of Python"
msgstr ""

#: ../Doc/using/unix.rst:16
msgid "On Linux"
msgstr ""

#: ../Doc/using/unix.rst:18
msgid ""
"Python comes preinstalled on most Linux distributions, and is available as a "
"package on all others.  However there are certain features you might want to "
"use that are not available on your distro's package.  You can easily compile "
"the latest version of Python from source."
msgstr ""

#: ../Doc/using/unix.rst:23
msgid ""
"In the event that Python doesn't come preinstalled and isn't in the "
"repositories as well, you can easily make packages for your own distro.  "
"Have a look at the following links:"
msgstr ""

#: ../Doc/using/unix.rst:29
msgid "https://www.debian.org/doc/manuals/maint-guide/first.en.html"
msgstr ""

#: ../Doc/using/unix.rst:30
msgid "for Debian users"
msgstr ""

#: ../Doc/using/unix.rst:31
msgid "https://en.opensuse.org/Portal:Packaging"
msgstr ""

#: ../Doc/using/unix.rst:32
msgid "for OpenSuse users"
msgstr ""

#: ../Doc/using/unix.rst:33
msgid ""
"https://docs.fedoraproject.org/en-US/Fedora_Draft_Documentation/0.1/html/"
"RPM_Guide/ch-creating-rpms.html"
msgstr ""

#: ../Doc/using/unix.rst:34
msgid "for Fedora users"
msgstr ""

#: ../Doc/using/unix.rst:35
msgid "http://www.slackbook.org/html/package-management-making-packages.html"
msgstr ""

#: ../Doc/using/unix.rst:36
msgid "for Slackware users"
msgstr ""

#: ../Doc/using/unix.rst:40
msgid "On FreeBSD and OpenBSD"
msgstr ""

#: ../Doc/using/unix.rst:42
msgid "FreeBSD users, to add the package use::"
msgstr ""

#: ../Doc/using/unix.rst:46
msgid "OpenBSD users use::"
msgstr ""

#: ../Doc/using/unix.rst:50
msgid "For example i386 users get the 2.5.1 version of Python using::"
msgstr ""

#: ../Doc/using/unix.rst:56
msgid "On OpenSolaris"
msgstr ""

#: ../Doc/using/unix.rst:58
msgid ""
"You can get Python from `OpenCSW <https://www.opencsw.org/>`_.  Various "
"versions of Python are available and can be installed with e.g. ``pkgutil -i "
"python27``."
msgstr ""

#: ../Doc/using/unix.rst:65
msgid "Building Python"
msgstr ""

#: ../Doc/using/unix.rst:67
msgid ""
"If you want to compile CPython yourself, first thing you should do is get "
"the `source <https://www.python.org/downloads/source/>`_. You can download "
"either the latest release's source or just grab a fresh `clone <https://docs."
"python.org/devguide/setup.html#getting-the-source-code>`_.  (If you want to "
"contribute patches, you will need a clone.)"
msgstr ""

#: ../Doc/using/unix.rst:73
msgid "The build process consists in the usual ::"
msgstr ""

#: ../Doc/using/unix.rst:79
msgid ""
"invocations. Configuration options and caveats for specific Unix platforms "
"are extensively documented in the :source:`README` file in the root of the "
"Python source tree."
msgstr ""

#: ../Doc/using/unix.rst:85
msgid ""
"``make install`` can overwrite or masquerade the :file:`python3` binary. "
"``make altinstall`` is therefore recommended instead of ``make install`` "
"since it only installs :file:`{exec_prefix}/bin/python{version}`."
msgstr ""

#: ../Doc/using/unix.rst:91
msgid "Python-related paths and files"
msgstr ""

#: ../Doc/using/unix.rst:93
msgid ""
"These are subject to difference depending on local installation "
"conventions; :envvar:`prefix` (``${prefix}``) and :envvar:`exec_prefix` (``"
"${exec_prefix}``) are installation-dependent and should be interpreted as "
"for GNU software; they may be the same."
msgstr ""

#: ../Doc/using/unix.rst:98
msgid ""
"For example, on most Linux systems, the default for both is :file:`/usr`."
msgstr ""

#: ../Doc/using/unix.rst:101
msgid "File/directory"
msgstr ""

#: ../Doc/using/unix.rst:101
msgid "Meaning"
msgstr ""

#: ../Doc/using/unix.rst:103
msgid ":file:`{exec_prefix}/bin/python3`"
msgstr ""

#: ../Doc/using/unix.rst:103
msgid "Recommended location of the interpreter."
msgstr ""

#: ../Doc/using/unix.rst:105
msgid ""
":file:`{prefix}/lib/python{version}`, :file:`{exec_prefix}/lib/"
"python{version}`"
msgstr ""

#: ../Doc/using/unix.rst:105
msgid ""
"Recommended locations of the directories containing the standard modules."
msgstr ""

#: ../Doc/using/unix.rst:108
msgid ""
":file:`{prefix}/include/python{version}`, :file:`{exec_prefix}/include/"
"python{version}`"
msgstr ""

#: ../Doc/using/unix.rst:108
msgid ""
"Recommended locations of the directories containing the include files needed "
"for developing Python extensions and embedding the interpreter."
msgstr ""

#: ../Doc/using/unix.rst:116
msgid "Miscellaneous"
msgstr ""

#: ../Doc/using/unix.rst:118
msgid ""
"To easily use Python scripts on Unix, you need to make them executable, e.g. "
"with ::"
msgstr ""

#: ../Doc/using/unix.rst:123
msgid ""
"and put an appropriate Shebang line at the top of the script.  A good choice "
"is usually ::"
msgstr ""

#: ../Doc/using/unix.rst:128
msgid ""
"which searches for the Python interpreter in the whole :envvar:`PATH`.  "
"However, some Unices may not have the :program:`env` command, so you may "
"need to hardcode ``/usr/bin/python3`` as the interpreter path."
msgstr ""

#: ../Doc/using/unix.rst:132
msgid ""
"To use shell commands in your Python scripts, look at the :mod:`subprocess` "
"module."
msgstr ""

#: ../Doc/using/unix.rst:136
msgid "Editors"
msgstr ""

#: ../Doc/using/unix.rst:138
msgid ""
"Vim and Emacs are excellent editors which support Python very well.  For "
"more information on how to code in Python in these editors, look at:"
msgstr ""

#: ../Doc/using/unix.rst:141
msgid "http://www.vim.org/scripts/script.php?script_id=790"
msgstr ""

#: ../Doc/using/unix.rst:142
msgid "https://sourceforge.net/projects/python-mode"
msgstr ""

#: ../Doc/using/unix.rst:144
msgid ""
"Geany is an excellent IDE with support for a lot of languages. For more "
"information, read: https://www.geany.org/"
msgstr ""

#: ../Doc/using/unix.rst:147
msgid ""
"Komodo edit is another extremely good IDE.  It also has support for a lot of "
"languages. For more information, read https://komodoide.com/."
msgstr ""

#: ../Doc/using/windows.rst:7
msgid "Using Python on Windows"
msgstr ""

#: ../Doc/using/windows.rst:12
msgid ""
"This document aims to give an overview of Windows-specific behaviour you "
"should know about when using Python on Microsoft Windows."
msgstr ""

#: ../Doc/using/windows.rst:16
msgid "Installing Python"
msgstr ""

#: ../Doc/using/windows.rst:18
msgid ""
"Unlike most Unix systems and services, Windows does not include a system "
"supported installation of Python. To make Python available, the CPython team "
"has compiled Windows installers (MSI packages) with every `release <https://"
"www.python.org/download/releases/>`_ for many years. These installers are "
"primarily intended to add a per-user installation of Python, with the core "
"interpreter and library being used by a single user. The installer is also "
"able to install for all users of a single machine, and a separate ZIP file "
"is available for application-local distributions."
msgstr ""

#: ../Doc/using/windows.rst:28
msgid "Supported Versions"
msgstr ""

#: ../Doc/using/windows.rst:30
msgid ""
"As specified in :pep:`11`, a Python release only supports a Windows platform "
"while Microsoft considers the platform under extended support. This means "
"that Python |version| supports Windows Vista and newer. If you require "
"Windows XP support then please install Python 3.4."
msgstr ""

#: ../Doc/using/windows.rst:36
msgid "Installation Steps"
msgstr ""

#: ../Doc/using/windows.rst:38
msgid ""
"Four Python |version| installers are available for download - two each for "
"the 32-bit and 64-bit versions of the interpreter. The *web installer* is a "
"small initial download, and it will automatically download the required "
"components as necessary. The *offline installer* includes the components "
"necessary for a default installation and only requires an internet "
"connection for optional features. See :ref:`install-layout-option` for other "
"ways to avoid downloading during installation."
msgstr ""

#: ../Doc/using/windows.rst:46
msgid "After starting the installer, one of two options may be selected:"
msgstr ""

#: ../Doc/using/windows.rst:50
msgid "If you select \"Install Now\":"
msgstr ""

#: ../Doc/using/windows.rst:52
msgid ""
"You will *not* need to be an administrator (unless a system update for the C "
"Runtime Library is required or you install the :ref:`launcher` for all users)"
msgstr ""

#: ../Doc/using/windows.rst:55
msgid "Python will be installed into your user directory"
msgstr ""

#: ../Doc/using/windows.rst:56
msgid ""
"The :ref:`launcher` will be installed according to the option at the bottom "
"of the first page"
msgstr ""

#: ../Doc/using/windows.rst:58
msgid "The standard library, test suite, launcher and pip will be installed"
msgstr ""

#: ../Doc/using/windows.rst:59
msgid "If selected, the install directory will be added to your :envvar:`PATH`"
msgstr ""

#: ../Doc/using/windows.rst:60
msgid "Shortcuts will only be visible for the current user"
msgstr ""

#: ../Doc/using/windows.rst:62
msgid ""
"Selecting \"Customize installation\" will allow you to select the features "
"to install, the installation location and other options or post-install "
"actions. To install debugging symbols or binaries, you will need to use this "
"option."
msgstr ""

#: ../Doc/using/windows.rst:66
msgid ""
"To perform an all-users installation, you should select \"Customize "
"installation\". In this case:"
msgstr ""

#: ../Doc/using/windows.rst:69
msgid "You may be required to provide administrative credentials or approval"
msgstr ""

#: ../Doc/using/windows.rst:70
msgid "Python will be installed into the Program Files directory"
msgstr ""

#: ../Doc/using/windows.rst:71
msgid "The :ref:`launcher` will be installed into the Windows directory"
msgstr ""

#: ../Doc/using/windows.rst:72
msgid "Optional features may be selected during installation"
msgstr ""

#: ../Doc/using/windows.rst:73
msgid "The standard library can be pre-compiled to bytecode"
msgstr ""

#: ../Doc/using/windows.rst:74
msgid ""
"If selected, the install directory will be added to the system :envvar:`PATH`"
msgstr ""

#: ../Doc/using/windows.rst:75
msgid "Shortcuts are available for all users"
msgstr ""

#: ../Doc/using/windows.rst:80
msgid "Removing the MAX_PATH Limitation"
msgstr ""

#: ../Doc/using/windows.rst:82
msgid ""
"Windows historically has limited path lengths to 260 characters. This meant "
"that paths longer than this would not resolve and errors would result."
msgstr ""

#: ../Doc/using/windows.rst:85
msgid ""
"In the latest versions of Windows, this limitation can be expanded to "
"approximately 32,000 characters. Your administrator will need to activate "
"the \"Enable Win32 long paths\" group policy, or set the registry value "
"``HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control"
"\\FileSystem@LongPathsEnabled`` to ``1``."
msgstr ""

#: ../Doc/using/windows.rst:91
msgid ""
"This allows the :func:`open` function, the :mod:`os` module and most other "
"path functionality to accept and return paths longer than 260 characters "
"when using strings. (Use of bytes as paths is deprecated on Windows, and "
"this feature is not available when using bytes.)"
msgstr ""

#: ../Doc/using/windows.rst:96
msgid "After changing the above option, no further configuration is required."
msgstr ""

#: ../Doc/using/windows.rst:100
msgid "Support for long paths was enabled in Python."
msgstr ""

#: ../Doc/using/windows.rst:105
msgid "Installing Without UI"
msgstr ""

#: ../Doc/using/windows.rst:107
msgid ""
"All of the options available in the installer UI can also be specified from "
"the command line, allowing scripted installers to replicate an installation "
"on many machines without user interaction.  These options may also be set "
"without suppressing the UI in order to change some of the defaults."
msgstr ""

#: ../Doc/using/windows.rst:112
msgid ""
"To completely hide the installer UI and install Python silently, pass the ``/"
"quiet`` option. To skip past the user interaction but still display progress "
"and errors, pass the ``/passive`` option. The ``/uninstall`` option may be "
"passed to immediately begin removing Python - no prompt will be displayed."
msgstr ""

#: ../Doc/using/windows.rst:118
msgid ""
"All other options are passed as ``name=value``, where the value is usually "
"``0`` to disable a feature, ``1`` to enable a feature, or a path. The full "
"list of available options is shown below."
msgstr ""

#: ../Doc/using/windows.rst:123
msgid "Name"
msgstr ""

#: ../Doc/using/windows.rst:123
msgid "Description"
msgstr ""

#: ../Doc/using/windows.rst:123
msgid "Default"
msgstr ""

#: ../Doc/using/windows.rst:125
msgid "InstallAllUsers"
msgstr ""

#: ../Doc/using/windows.rst:125
msgid "Perform a system-wide installation."
msgstr ""

#: ../Doc/using/windows.rst:125 ../Doc/using/windows.rst:146
#: ../Doc/using/windows.rst:149 ../Doc/using/windows.rst:158
#: ../Doc/using/windows.rst:176 ../Doc/using/windows.rst:184
#: ../Doc/using/windows.rst:187
msgid "0"
msgstr ""

#: ../Doc/using/windows.rst:127
msgid "TargetDir"
msgstr ""

#: ../Doc/using/windows.rst:127
msgid "The installation directory"
msgstr ""

#: ../Doc/using/windows.rst:127
msgid "Selected based on InstallAllUsers"
msgstr ""

#: ../Doc/using/windows.rst:130
msgid "DefaultAllUsersTargetDir"
msgstr ""

#: ../Doc/using/windows.rst:130
msgid "The default installation directory for all-user installs"
msgstr ""

#: ../Doc/using/windows.rst:130
msgid ""
":file:`%ProgramFiles%\\\\\\ Python X.Y` or :file:`\\ %ProgramFiles(x86)%\\\\"
"\\ Python X.Y`"
msgstr ""

#: ../Doc/using/windows.rst:135
msgid "DefaultJustForMeTargetDir"
msgstr ""

#: ../Doc/using/windows.rst:135
msgid "The default install directory for just-for-me installs"
msgstr ""

#: ../Doc/using/windows.rst:135
msgid ""
":file:`%LocalAppData%\\\\\\ Programs\\\\PythonXY` or :file:`%LocalAppData%\\"
"\\\\ Programs\\\\PythonXY-32`"
msgstr ""

#: ../Doc/using/windows.rst:140
msgid "DefaultCustomTargetDir"
msgstr ""

#: ../Doc/using/windows.rst:140
msgid "The default custom install directory displayed in the UI"
msgstr ""

#: ../Doc/using/windows.rst:140 ../Doc/using/windows.rst:189
msgid "(empty)"
msgstr ""

#: ../Doc/using/windows.rst:143
msgid "AssociateFiles"
msgstr ""

#: ../Doc/using/windows.rst:143
msgid "Create file associations if the launcher is also installed."
msgstr ""

#: ../Doc/using/windows.rst:143 ../Doc/using/windows.rst:153
#: ../Doc/using/windows.rst:156 ../Doc/using/windows.rst:160
#: ../Doc/using/windows.rst:163 ../Doc/using/windows.rst:166
#: ../Doc/using/windows.rst:168 ../Doc/using/windows.rst:171
#: ../Doc/using/windows.rst:174 ../Doc/using/windows.rst:178
#: ../Doc/using/windows.rst:180 ../Doc/using/windows.rst:182
msgid "1"
msgstr ""

#: ../Doc/using/windows.rst:146
msgid "CompileAll"
msgstr ""

#: ../Doc/using/windows.rst:146
msgid "Compile all ``.py`` files to ``.pyc``."
msgstr ""

#: ../Doc/using/windows.rst:149
msgid "PrependPath"
msgstr ""

#: ../Doc/using/windows.rst:149
msgid ""
"Add install and Scripts directories tho :envvar:`PATH` and ``.PY`` to :"
"envvar:`PATHEXT`"
msgstr ""

#: ../Doc/using/windows.rst:153
msgid "Shortcuts"
msgstr ""

#: ../Doc/using/windows.rst:153
msgid ""
"Create shortcuts for the interpreter, documentation and IDLE if installed."
msgstr ""

#: ../Doc/using/windows.rst:156
msgid "Include_doc"
msgstr ""

#: ../Doc/using/windows.rst:156
msgid "Install Python manual"
msgstr ""

#: ../Doc/using/windows.rst:158
msgid "Include_debug"
msgstr ""

#: ../Doc/using/windows.rst:158
msgid "Install debug binaries"
msgstr ""

#: ../Doc/using/windows.rst:160
msgid "Include_dev"
msgstr ""

#: ../Doc/using/windows.rst:160
msgid "Install developer headers and libraries"
msgstr ""

#: ../Doc/using/windows.rst:163
msgid "Include_exe"
msgstr ""

#: ../Doc/using/windows.rst:163
msgid "Install :file:`python.exe` and related files"
msgstr ""

#: ../Doc/using/windows.rst:166
msgid "Include_launcher"
msgstr ""

#: ../Doc/using/windows.rst:166
msgid "Install :ref:`launcher`."
msgstr ""

#: ../Doc/using/windows.rst:168
msgid "InstallLauncherAllUsers"
msgstr ""

#: ../Doc/using/windows.rst:168
msgid "Installs :ref:`launcher` for all users."
msgstr ""

#: ../Doc/using/windows.rst:171
msgid "Include_lib"
msgstr ""

#: ../Doc/using/windows.rst:171
msgid "Install standard library and extension modules"
msgstr ""

#: ../Doc/using/windows.rst:174
msgid "Include_pip"
msgstr ""

#: ../Doc/using/windows.rst:174
msgid "Install bundled pip and setuptools"
msgstr ""

#: ../Doc/using/windows.rst:176
msgid "Include_symbols"
msgstr ""

#: ../Doc/using/windows.rst:176
msgid "Install debugging symbols (`*`.pdb)"
msgstr ""

#: ../Doc/using/windows.rst:178
msgid "Include_tcltk"
msgstr ""

#: ../Doc/using/windows.rst:178
msgid "Install Tcl/Tk support and IDLE"
msgstr ""

#: ../Doc/using/windows.rst:180
msgid "Include_test"
msgstr ""

#: ../Doc/using/windows.rst:180
msgid "Install standard library test suite"
msgstr ""

#: ../Doc/using/windows.rst:182
msgid "Include_tools"
msgstr ""

#: ../Doc/using/windows.rst:182
msgid "Install utility scripts"
msgstr ""

#: ../Doc/using/windows.rst:184
msgid "LauncherOnly"
msgstr ""

#: ../Doc/using/windows.rst:184
msgid "Only installs the launcher. This will override most other options."
msgstr ""

#: ../Doc/using/windows.rst:187
msgid "SimpleInstall"
msgstr ""

#: ../Doc/using/windows.rst:187
msgid "Disable most install UI"
msgstr ""

#: ../Doc/using/windows.rst:189
msgid "SimpleInstallDescription"
msgstr ""

#: ../Doc/using/windows.rst:189
msgid "A custom message to display when the simplified install UI is used."
msgstr ""

#: ../Doc/using/windows.rst:193
msgid ""
"For example, to silently install a default, system-wide Python installation, "
"you could use the following command (from an elevated command prompt)::"
msgstr ""

#: ../Doc/using/windows.rst:198
msgid ""
"To allow users to easily install a personal copy of Python without the test "
"suite, you could provide a shortcut with the following command. This will "
"display a simplified initial page and disallow customization::"
msgstr ""

#: ../Doc/using/windows.rst:205
msgid ""
"(Note that omitting the launcher also omits file associations, and is only "
"recommended for per-user installs when there is also a system-wide "
"installation that included the launcher.)"
msgstr ""

#: ../Doc/using/windows.rst:209
msgid ""
"The options listed above can also be provided in a file named ``unattend."
"xml`` alongside the executable. This file specifies a list of options and "
"values. When a value is provided as an attribute, it will be converted to a "
"number if possible. Values provided as element text are always left as "
"strings. This example file sets the same options and the previous example::"
msgstr ""

#: ../Doc/using/windows.rst:226
msgid "Installing Without Downloading"
msgstr ""

#: ../Doc/using/windows.rst:228
msgid ""
"As some features of Python are not included in the initial installer "
"download, selecting those features may require an internet connection.  To "
"avoid this need, all possible components may be downloaded on-demand to "
"create a complete *layout* that will no longer require an internet "
"connection regardless of the selected features. Note that this download may "
"be bigger than required, but where a large number of installations are going "
"to be performed it is very useful to have a locally cached copy."
msgstr ""

#: ../Doc/using/windows.rst:236
msgid ""
"Execute the following command from Command Prompt to download all possible "
"required files.  Remember to substitute ``python-3.6.0.exe`` for the actual "
"name of your installer, and to create layouts in their own directories to "
"avoid collisions between files with the same name."
msgstr ""

#: ../Doc/using/windows.rst:245
msgid ""
"You may also specify the ``/quiet`` option to hide the progress display."
msgstr ""

#: ../Doc/using/windows.rst:248
msgid "Modifying an install"
msgstr ""

#: ../Doc/using/windows.rst:250
msgid ""
"Once Python has been installed, you can add or remove features through the "
"Programs and Features tool that is part of Windows. Select the Python entry "
"and choose \"Uninstall/Change\" to open the installer in maintenance mode."
msgstr ""

#: ../Doc/using/windows.rst:254
msgid ""
"\"Modify\" allows you to add or remove features by modifying the checkboxes "
"- unchanged checkboxes will not install or remove anything. Some options "
"cannot be changed in this mode, such as the install directory; to modify "
"these, you will need to remove and then reinstall Python completely."
msgstr ""

#: ../Doc/using/windows.rst:259
msgid ""
"\"Repair\" will verify all the files that should be installed using the "
"current settings and replace any that have been removed or modified."
msgstr ""

#: ../Doc/using/windows.rst:262
msgid ""
"\"Uninstall\" will remove Python entirely, with the exception of the :ref:"
"`launcher`, which has its own entry in Programs and Features."
msgstr ""

#: ../Doc/using/windows.rst:266
msgid "Other Platforms"
msgstr ""

#: ../Doc/using/windows.rst:268
msgid ""
"With ongoing development of Python, some platforms that used to be supported "
"earlier are no longer supported (due to the lack of users or developers). "
"Check :pep:`11` for details on all unsupported platforms."
msgstr ""

#: ../Doc/using/windows.rst:272
msgid "`Windows CE <http://pythonce.sourceforge.net/>`_ is still supported."
msgstr ""

#: ../Doc/using/windows.rst:273
msgid ""
"The `Cygwin <https://cygwin.com/>`_ installer offers to install the Python "
"interpreter as well (cf. `Cygwin package source <ftp://ftp.uni-erlangen.de/"
"pub/pc/gnuwin32/cygwin/mirrors/cygnus/ release/python>`_, `Maintainer "
"releases <http://www.tishler.net/jason/software/python/>`_)"
msgstr ""

#: ../Doc/using/windows.rst:279
msgid ""
"See `Python for Windows <https://www.python.org/downloads/windows/>`_ for "
"detailed information about platforms with pre-compiled installers."
msgstr ""

#: ../Doc/using/windows.rst:286
msgid ""
"`Python on XP <http://dooling.com/index.php/2006/03/14/python-on-xp-7-"
"minutes-to-hello-world/>`_"
msgstr ""

#: ../Doc/using/windows.rst:285
msgid "\"7 Minutes to \"Hello World!\"\" by Richard Dooling, 2006"
msgstr ""

#: ../Doc/using/windows.rst:292
msgid ""
"`Installing on Windows <http://www.diveintopython.net/installing_python/"
"windows.html>`_"
msgstr ""

#: ../Doc/using/windows.rst:289
msgid ""
"in \"`Dive into Python: Python from novice to pro <http://www.diveintopython."
"net/>`_\" by Mark Pilgrim, 2004, ISBN 1-59059-356-1"
msgstr ""

#: ../Doc/using/windows.rst:296
msgid ""
"`For Windows users <http://python.swaroopch.com/installation."
"html#installation-on-windows>`_"
msgstr ""

#: ../Doc/using/windows.rst:295
msgid ""
"in \"Installing Python\" in \"`A Byte of Python <http://python.swaroopch.com/"
">`_\" by Swaroop C H, 2003"
msgstr ""

#: ../Doc/using/windows.rst:301
msgid "Alternative bundles"
msgstr ""

#: ../Doc/using/windows.rst:303
msgid ""
"Besides the standard CPython distribution, there are modified packages "
"including additional functionality.  The following is a list of popular "
"versions and their key features:"
msgstr ""

#: ../Doc/using/windows.rst:308
msgid "`ActivePython <https://www.activestate.com/activepython/>`_"
msgstr ""

#: ../Doc/using/windows.rst:308
msgid "Installer with multi-platform compatibility, documentation, PyWin32"
msgstr ""

#: ../Doc/using/windows.rst:312
msgid "`Anaconda <https://www.continuum.io/downloads/>`_"
msgstr ""

#: ../Doc/using/windows.rst:311
msgid ""
"Popular scientific modules (such as numpy, scipy and pandas) and the "
"``conda`` package manager."
msgstr ""

#: ../Doc/using/windows.rst:316
msgid "`Canopy <https://www.enthought.com/products/canopy/>`_"
msgstr ""

#: ../Doc/using/windows.rst:315
msgid ""
"A \"comprehensive Python analysis environment\" with editors and other "
"development tools."
msgstr ""

#: ../Doc/using/windows.rst:320
msgid "`WinPython <https://winpython.github.io/>`_"
msgstr ""

#: ../Doc/using/windows.rst:319
msgid ""
"Windows-specific distribution with prebuilt scientific packages and tools "
"for building packages."
msgstr ""

#: ../Doc/using/windows.rst:322
msgid ""
"Note that these packages may not include the latest versions of Python or "
"other libraries, and are not maintained or supported by the core Python team."
msgstr ""

#: ../Doc/using/windows.rst:328
msgid "Configuring Python"
msgstr ""

#: ../Doc/using/windows.rst:330
msgid ""
"To run Python conveniently from a command prompt, you might consider "
"changing some default environment variables in Windows.  While the installer "
"provides an option to configure the PATH and PATHEXT variables for you, this "
"is only reliable for a single, system-wide installation.  If you regularly "
"use multiple versions of Python, consider using the :ref:`launcher`."
msgstr ""

#: ../Doc/using/windows.rst:340
msgid "Excursus: Setting environment variables"
msgstr ""

#: ../Doc/using/windows.rst:342
msgid ""
"Windows allows environment variables to be configured permanently at both "
"the User level and the System level, or temporarily in a command prompt."
msgstr ""

#: ../Doc/using/windows.rst:345
msgid ""
"To temporarily set environment variables, open Command Prompt and use the :"
"command:`set` command::"
msgstr ""

#: ../Doc/using/windows.rst:352
msgid ""
"These changes will apply to any further commands executed in that console, "
"and will be inherited by any applications started from the console."
msgstr ""

#: ../Doc/using/windows.rst:355
msgid ""
"Including the variable name within percent signs will expand to the existing "
"value, allowing you to add your new value at either the start or the end. "
"Modifying :envvar:`PATH` by adding the directory containing :program:`python."
"exe` to the start is a common way to ensure the correct version of Python is "
"launched."
msgstr ""

#: ../Doc/using/windows.rst:361
msgid ""
"To permanently modify the default environment variables, click Start and "
"search for 'edit environment variables', or open System properties, :"
"guilabel:`Advanced system settings` and click the :guilabel:`Environment "
"Variables` button. In this dialog, you can add or modify User and System "
"variables. To change System variables, you need non-restricted access to "
"your machine (i.e. Administrator rights)."
msgstr ""

#: ../Doc/using/windows.rst:370
msgid ""
"Windows will concatenate User variables *after* System variables, which may "
"cause unexpected results when modifying :envvar:`PATH`."
msgstr ""

#: ../Doc/using/windows.rst:373
msgid ""
"The :envvar:`PYTHONPATH` variable is used by all versions of Python 2 and "
"Python 3, so you should not permanently configure this variable unless it "
"only includes code that is compatible with all of your installed Python "
"versions."
msgstr ""

#: ../Doc/using/windows.rst:381
msgid "https://support.microsoft.com/kb/100843"
msgstr ""

#: ../Doc/using/windows.rst:381
msgid "Environment variables in Windows NT"
msgstr ""

#: ../Doc/using/windows.rst:384
msgid "https://technet.microsoft.com/en-us/library/cc754250.aspx"
msgstr ""

#: ../Doc/using/windows.rst:384
msgid "The SET command, for temporarily modifying environment variables"
msgstr ""

#: ../Doc/using/windows.rst:387
msgid "https://technet.microsoft.com/en-us/library/cc755104.aspx"
msgstr ""

#: ../Doc/using/windows.rst:387
msgid "The SETX command, for permanently modifying environment variables"
msgstr ""

#: ../Doc/using/windows.rst:390
msgid "https://support.microsoft.com/kb/310519"
msgstr ""

#: ../Doc/using/windows.rst:390
msgid "How To Manage Environment Variables in Windows XP"
msgstr ""

#: ../Doc/using/windows.rst:392
msgid "https://www.chem.gla.ac.uk/~louis/software/faq/q1.html"
msgstr ""

#: ../Doc/using/windows.rst:393
msgid "Setting Environment variables, Louis J. Farrugia"
msgstr ""

#: ../Doc/using/windows.rst:398
msgid "Finding the Python executable"
msgstr ""

#: ../Doc/using/windows.rst:402
msgid ""
"Besides using the automatically created start menu entry for the Python "
"interpreter, you might want to start Python in the command prompt. The "
"installer has an option to set that up for you."
msgstr ""

#: ../Doc/using/windows.rst:406
msgid ""
"On the first page of the installer, an option labelled \"Add Python to PATH"
"\" may be selected to have the installer add the install location into the :"
"envvar:`PATH`.  The location of the :file:`Scripts\\\\` folder is also "
"added. This allows you to type :command:`python` to run the interpreter, "
"and :command:`pip` for the package installer. Thus, you can also execute "
"your scripts with command line options, see :ref:`using-on-cmdline` "
"documentation."
msgstr ""

#: ../Doc/using/windows.rst:413
msgid ""
"If you don't enable this option at install time, you can always re-run the "
"installer, select Modify, and enable it.  Alternatively, you can manually "
"modify the :envvar:`PATH` using the directions in :ref:`setting-envvars`.  "
"You need to set your :envvar:`PATH` environment variable to include the "
"directory of your Python installation, delimited by a semicolon from other "
"entries.  An example variable could look like this (assuming the first two "
"entries already existed)::"
msgstr ""

#: ../Doc/using/windows.rst:426
msgid "Python Launcher for Windows"
msgstr ""

#: ../Doc/using/windows.rst:430
msgid ""
"The Python launcher for Windows is a utility which aids in locating and "
"executing of different Python versions.  It allows scripts (or the command-"
"line) to indicate a preference for a specific Python version, and will "
"locate and execute that version."
msgstr ""

#: ../Doc/using/windows.rst:435
msgid ""
"Unlike the :envvar:`PATH` variable, the launcher will correctly select the "
"most appropriate version of Python. It will prefer per-user installations "
"over system-wide ones, and orders by language version rather than using the "
"most recently installed version."
msgstr ""

#: ../Doc/using/windows.rst:441
msgid "Getting started"
msgstr ""

#: ../Doc/using/windows.rst:444
msgid "From the command-line"
msgstr ""

#: ../Doc/using/windows.rst:448
msgid ""
"System-wide installations of Python 3.3 and later will put the launcher on "
"your :envvar:`PATH`. The launcher is compatible with all available versions "
"of Python, so it does not matter which version is installed. To check that "
"the launcher is available, execute the following command in Command Prompt:"
msgstr ""

#: ../Doc/using/windows.rst:457
msgid ""
"You should find that the latest version of Python you have installed is "
"started - it can be exited as normal, and any additional command-line "
"arguments specified will be sent directly to Python."
msgstr ""

#: ../Doc/using/windows.rst:461
msgid ""
"If you have multiple versions of Python installed (e.g., 2.7 and |version|) "
"you will have noticed that Python |version| was started - to launch Python "
"2.7, try the command:"
msgstr ""

#: ../Doc/using/windows.rst:469
msgid ""
"If you want the latest version of Python 2.x you have installed, try the "
"command:"
msgstr ""

#: ../Doc/using/windows.rst:476
msgid "You should find the latest version of Python 2.x starts."
msgstr ""

#: ../Doc/using/windows.rst:478
msgid "If you see the following error, you do not have the launcher installed:"
msgstr ""

#: ../Doc/using/windows.rst:485
msgid ""
"Per-user installations of Python do not add the launcher to :envvar:`PATH` "
"unless the option was selected on installation."
msgstr ""

#: ../Doc/using/windows.rst:489
msgid "Virtual environments"
msgstr ""

#: ../Doc/using/windows.rst:493
msgid ""
"If the launcher is run with no explicit Python version specification, and a "
"virtual environment (created with the standard library :mod:`venv` module or "
"the external ``virtualenv`` tool) active, the launcher will run the virtual "
"environment's interpreter rather than the global one.  To run the global "
"interpreter, either deactivate the virtual environment, or explicitly "
"specify the global Python version."
msgstr ""

#: ../Doc/using/windows.rst:501
msgid "From a script"
msgstr ""

#: ../Doc/using/windows.rst:503
msgid ""
"Let's create a test Python script - create a file called ``hello.py`` with "
"the following contents"
msgstr ""

#: ../Doc/using/windows.rst:512
msgid "From the directory in which hello.py lives, execute the command:"
msgstr ""

#: ../Doc/using/windows.rst:518
msgid ""
"You should notice the version number of your latest Python 2.x installation "
"is printed.  Now try changing the first line to be:"
msgstr ""

#: ../Doc/using/windows.rst:525
msgid ""
"Re-executing the command should now print the latest Python 3.x information. "
"As with the above command-line examples, you can specify a more explicit "
"version qualifier.  Assuming you have Python 2.6 installed, try changing the "
"first line to ``#! python2.6`` and you should find the 2.6 version "
"information printed."
msgstr ""

#: ../Doc/using/windows.rst:531
msgid ""
"Note that unlike interactive use, a bare \"python\" will use the latest "
"version of Python 2.x that you have installed.  This is for backward "
"compatibility and for compatibility with Unix, where the command ``python`` "
"typically refers to Python 2."
msgstr ""

#: ../Doc/using/windows.rst:537
msgid "From file associations"
msgstr ""

#: ../Doc/using/windows.rst:539
msgid ""
"The launcher should have been associated with Python files (i.e. ``.py``, ``."
"pyw``, ``.pyc`` files) when it was installed.  This means that when you "
"double-click on one of these files from Windows explorer the launcher will "
"be used, and therefore you can use the same facilities described above to "
"have the script specify the version which should be used."
msgstr ""

#: ../Doc/using/windows.rst:545
msgid ""
"The key benefit of this is that a single launcher can support multiple "
"Python versions at the same time depending on the contents of the first line."
msgstr ""

#: ../Doc/using/windows.rst:549
msgid "Shebang Lines"
msgstr ""

#: ../Doc/using/windows.rst:551
msgid ""
"If the first line of a script file starts with ``#!``, it is known as a "
"\"shebang\" line.  Linux and other Unix like operating systems have native "
"support for such lines and are commonly used on such systems to indicate how "
"a script should be executed.  This launcher allows the same facilities to be "
"using with Python scripts on Windows and the examples above demonstrate "
"their use."
msgstr ""

#: ../Doc/using/windows.rst:558
msgid ""
"To allow shebang lines in Python scripts to be portable between Unix and "
"Windows, this launcher supports a number of 'virtual' commands to specify "
"which interpreter to use.  The supported virtual commands are:"
msgstr ""

#: ../Doc/using/windows.rst:562
msgid "``/usr/bin/env python``"
msgstr ""

#: ../Doc/using/windows.rst:563
msgid "``/usr/bin/python``"
msgstr ""

#: ../Doc/using/windows.rst:564
msgid "``/usr/local/bin/python``"
msgstr ""

#: ../Doc/using/windows.rst:565
msgid "``python``"
msgstr ""

#: ../Doc/using/windows.rst:567
msgid "For example, if the first line of your script starts with"
msgstr ""

#: ../Doc/using/windows.rst:573
msgid ""
"The default Python will be located and used.  As many Python scripts written "
"to work on Unix will already have this line, you should find these scripts "
"can be used by the launcher without modification.  If you are writing a new "
"script on Windows which you hope will be useful on Unix, you should use one "
"of the shebang lines starting with ``/usr``."
msgstr ""

#: ../Doc/using/windows.rst:579
msgid ""
"Any of the above virtual commands can be suffixed with an explicit version "
"(either just the major version, or the major and minor version) - for "
"example ``/usr/bin/python2.7`` - which will cause that specific version to "
"be located and used."
msgstr ""

#: ../Doc/using/windows.rst:584
msgid ""
"The ``/usr/bin/env`` form of shebang line has one further special property. "
"Before looking for installed Python interpreters, this form will search the "
"executable :envvar:`PATH` for a Python executable. This corresponds to the "
"behaviour of the Unix ``env`` program, which performs a :envvar:`PATH` "
"search."
msgstr ""

#: ../Doc/using/windows.rst:590
msgid "Arguments in shebang lines"
msgstr ""

#: ../Doc/using/windows.rst:592
msgid ""
"The shebang lines can also specify additional options to be passed to the "
"Python interpreter.  For example, if you have a shebang line:"
msgstr ""

#: ../Doc/using/windows.rst:599
msgid "Then Python will be started with the ``-v`` option"
msgstr ""

#: ../Doc/using/windows.rst:602
msgid "Customization"
msgstr ""

#: ../Doc/using/windows.rst:605
msgid "Customization via INI files"
msgstr ""

#: ../Doc/using/windows.rst:607
msgid ""
"Two .ini files will be searched by the launcher - ``py.ini`` in the current "
"user's \"application data\" directory (i.e. the directory returned by "
"calling the Windows function SHGetFolderPath with CSIDL_LOCAL_APPDATA) and "
"``py.ini`` in the same directory as the launcher. The same .ini files are "
"used for both the 'console' version of the launcher (i.e. py.exe) and for "
"the 'windows' version (i.e. pyw.exe)"
msgstr ""

#: ../Doc/using/windows.rst:614
msgid ""
"Customization specified in the \"application directory\" will have "
"precedence over the one next to the executable, so a user, who may not have "
"write access to the .ini file next to the launcher, can override commands in "
"that global .ini file)"
msgstr ""

#: ../Doc/using/windows.rst:619
msgid "Customizing default Python versions"
msgstr ""

#: ../Doc/using/windows.rst:621
msgid ""
"In some cases, a version qualifier can be included in a command to dictate "
"which version of Python will be used by the command. A version qualifier "
"starts with a major version number and can optionally be followed by a "
"period ('.') and a minor version specifier. If the minor qualifier is "
"specified, it may optionally be followed by \"-32\" to indicate the 32-bit "
"implementation of that version be used."
msgstr ""

#: ../Doc/using/windows.rst:628
msgid ""
"For example, a shebang line of ``#!python`` has no version qualifier, while "
"``#!python3`` has a version qualifier which specifies only a major version."
msgstr ""

#: ../Doc/using/windows.rst:631
msgid ""
"If no version qualifiers are found in a command, the environment variable "
"``PY_PYTHON`` can be set to specify the default version qualifier - the "
"default value is \"2\". Note this value could specify just a major version "
"(e.g. \"2\") or a major.minor qualifier (e.g. \"2.6\"), or even major."
"minor-32."
msgstr ""

#: ../Doc/using/windows.rst:636
msgid ""
"If no minor version qualifiers are found, the environment variable "
"``PY_PYTHON{major}`` (where ``{major}`` is the current major version "
"qualifier as determined above) can be set to specify the full version. If no "
"such option is found, the launcher will enumerate the installed Python "
"versions and use the latest minor release found for the major version, which "
"is likely, although not guaranteed, to be the most recently installed "
"version in that family."
msgstr ""

#: ../Doc/using/windows.rst:644
msgid ""
"On 64-bit Windows with both 32-bit and 64-bit implementations of the same "
"(major.minor) Python version installed, the 64-bit version will always be "
"preferred. This will be true for both 32-bit and 64-bit implementations of "
"the launcher - a 32-bit launcher will prefer to execute a 64-bit Python "
"installation of the specified version if available. This is so the behavior "
"of the launcher can be predicted knowing only what versions are installed on "
"the PC and without regard to the order in which they were installed (i.e., "
"without knowing whether a 32 or 64-bit version of Python and corresponding "
"launcher was installed last). As noted above, an optional \"-32\" suffix can "
"be used on a version specifier to change this behaviour."
msgstr ""

#: ../Doc/using/windows.rst:655
msgid "Examples:"
msgstr ""

#: ../Doc/using/windows.rst:657
msgid ""
"If no relevant options are set, the commands ``python`` and ``python2`` will "
"use the latest Python 2.x version installed and the command ``python3`` will "
"use the latest Python 3.x installed."
msgstr ""

#: ../Doc/using/windows.rst:661
msgid ""
"The commands ``python3.1`` and ``python2.7`` will not consult any options at "
"all as the versions are fully specified."
msgstr ""

#: ../Doc/using/windows.rst:664
msgid ""
"If ``PY_PYTHON=3``, the commands ``python`` and ``python3`` will both use "
"the latest installed Python 3 version."
msgstr ""

#: ../Doc/using/windows.rst:667
msgid ""
"If ``PY_PYTHON=3.1-32``, the command ``python`` will use the 32-bit "
"implementation of 3.1 whereas the command ``python3`` will use the latest "
"installed Python (PY_PYTHON was not considered at all as a major version was "
"specified.)"
msgstr ""

#: ../Doc/using/windows.rst:672
msgid ""
"If ``PY_PYTHON=3`` and ``PY_PYTHON3=3.1``, the commands ``python`` and "
"``python3`` will both use specifically 3.1"
msgstr ""

#: ../Doc/using/windows.rst:675
msgid ""
"In addition to environment variables, the same settings can be configured in "
"the .INI file used by the launcher.  The section in the INI file is called "
"``[defaults]`` and the key name will be the same as the environment "
"variables without the leading ``PY_`` prefix (and note that the key names in "
"the INI file are case insensitive.)  The contents of an environment variable "
"will override things specified in the INI file."
msgstr ""

#: ../Doc/using/windows.rst:682
msgid "For example:"
msgstr ""

#: ../Doc/using/windows.rst:684
msgid "Setting ``PY_PYTHON=3.1`` is equivalent to the INI file containing:"
msgstr ""

#: ../Doc/using/windows.rst:691
msgid ""
"Setting ``PY_PYTHON=3`` and ``PY_PYTHON3=3.1`` is equivalent to the INI file "
"containing:"
msgstr ""

#: ../Doc/using/windows.rst:701
msgid "Diagnostics"
msgstr ""

#: ../Doc/using/windows.rst:703
msgid ""
"If an environment variable ``PYLAUNCH_DEBUG`` is set (to any value), the "
"launcher will print diagnostic information to stderr (i.e. to the console). "
"While this information manages to be simultaneously verbose *and* terse, it "
"should allow you to see what versions of Python were located, why a "
"particular version was chosen and the exact command-line used to execute the "
"target Python."
msgstr ""

#: ../Doc/using/windows.rst:715
msgid "Finding modules"
msgstr ""

#: ../Doc/using/windows.rst:717
msgid ""
"Python usually stores its library (and thereby your site-packages folder) in "
"the installation directory.  So, if you had installed Python to :file:`C:\\"
"\\Python\\\\`, the default library would reside in :file:`C:\\\\Python\\\\Lib"
"\\\\` and third-party modules should be stored in :file:`C:\\\\Python\\\\Lib"
"\\\\site-packages\\\\`."
msgstr ""

#: ../Doc/using/windows.rst:723
msgid ""
"To completely override :data:`sys.path`, create a ``._pth`` file with the "
"same name as the DLL (``python36._pth``) or the executable (``python._pth``) "
"and specify one line for each path to add to :data:`sys.path`. The file "
"based on the DLL name overrides the one based on the executable, which "
"allows paths to be restricted for any program loading the runtime if desired."
msgstr ""

#: ../Doc/using/windows.rst:729
msgid ""
"When the file exists, all registry and environment variables are ignored, "
"isolated mode is enabled, and :mod:`site` is not imported unless one line in "
"the file specifies ``import site``. Blank paths and lines starting with "
"``#`` are ignored. Each path may be absolute or relative to the location of "
"the file. Import statements other than to ``site`` are not permitted, and "
"arbitrary code cannot be specified."
msgstr ""

#: ../Doc/using/windows.rst:736
msgid ""
"Note that ``.pth`` files (without leading underscore) will be processed "
"normally by the :mod:`site` module."
msgstr ""

#: ../Doc/using/windows.rst:739
msgid ""
"When no ``._pth`` file is found, this is how :data:`sys.path` is populated "
"on Windows:"
msgstr ""

#: ../Doc/using/windows.rst:742
msgid ""
"An empty entry is added at the start, which corresponds to the current "
"directory."
msgstr ""

#: ../Doc/using/windows.rst:745
msgid ""
"If the environment variable :envvar:`PYTHONPATH` exists, as described in :"
"ref:`using-on-envvars`, its entries are added next.  Note that on Windows, "
"paths in this variable must be separated by semicolons, to distinguish them "
"from the colon used in drive identifiers (``C:\\`` etc.)."
msgstr ""

#: ../Doc/using/windows.rst:750
msgid ""
"Additional \"application paths\" can be added in the registry as subkeys of :"
"samp:`\\\\SOFTWARE\\\\Python\\\\PythonCore\\\\{version}\\\\PythonPath` under "
"both the ``HKEY_CURRENT_USER`` and ``HKEY_LOCAL_MACHINE`` hives.  Subkeys "
"which have semicolon-delimited path strings as their default value will "
"cause each path to be added to :data:`sys.path`.  (Note that all known "
"installers only use HKLM, so HKCU is typically empty.)"
msgstr ""

#: ../Doc/using/windows.rst:757
msgid ""
"If the environment variable :envvar:`PYTHONHOME` is set, it is assumed as "
"\"Python Home\".  Otherwise, the path of the main Python executable is used "
"to locate a \"landmark file\" (either ``Lib\\os.py`` or ``pythonXY.zip``) to "
"deduce the \"Python Home\".  If a Python home is found, the relevant sub-"
"directories added to :data:`sys.path` (``Lib``, ``plat-win``, etc) are based "
"on that folder.  Otherwise, the core Python path is constructed from the "
"PythonPath stored in the registry."
msgstr ""

#: ../Doc/using/windows.rst:765
msgid ""
"If the Python Home cannot be located, no :envvar:`PYTHONPATH` is specified "
"in the environment, and no registry entries can be found, a default path "
"with relative entries is used (e.g. ``.\\Lib;.\\plat-win``, etc)."
msgstr ""

#: ../Doc/using/windows.rst:769
msgid ""
"If a ``pyvenv.cfg`` file is found alongside the main executable or in the "
"directory one level above the executable, the following variations apply:"
msgstr ""

#: ../Doc/using/windows.rst:772
msgid ""
"If ``home`` is an absolute path and :envvar:`PYTHONHOME` is not set, this "
"path is used instead of the path to the main executable when deducing the "
"home location."
msgstr ""

#: ../Doc/using/windows.rst:776
msgid "The end result of all this is:"
msgstr ""

#: ../Doc/using/windows.rst:778
msgid ""
"When running :file:`python.exe`, or any other .exe in the main Python "
"directory (either an installed version, or directly from the PCbuild "
"directory), the core path is deduced, and the core paths in the registry are "
"ignored.  Other \"application paths\" in the registry are always read."
msgstr ""

#: ../Doc/using/windows.rst:783
msgid ""
"When Python is hosted in another .exe (different directory, embedded via "
"COM, etc), the \"Python Home\" will not be deduced, so the core path from "
"the registry is used.  Other \"application paths\" in the registry are "
"always read."
msgstr ""

#: ../Doc/using/windows.rst:787
msgid ""
"If Python can't find its home and there are no registry value (frozen .exe, "
"some very strange installation setup) you get a path with some default, but "
"relative, paths."
msgstr ""

#: ../Doc/using/windows.rst:791
msgid ""
"For those who want to bundle Python into their application or distribution, "
"the following advice will prevent conflicts with other installations:"
msgstr ""

#: ../Doc/using/windows.rst:794
msgid ""
"Include a ``._pth`` file alongside your executable containing the "
"directories to include. This will ignore paths listed in the registry and "
"environment variables, and also ignore :mod:`site` unless ``import site`` is "
"listed."
msgstr ""

#: ../Doc/using/windows.rst:799
msgid ""
"If you are loading :file:`python3.dll` or :file:`python36.dll` in your own "
"executable, explicitly call :c:func:`Py_SetPath` or (at least) :c:func:"
"`Py_SetProgramName` before :c:func:`Py_Initialize`."
msgstr ""

#: ../Doc/using/windows.rst:803
msgid ""
"Clear and/or overwrite :envvar:`PYTHONPATH` and set :envvar:`PYTHONHOME` "
"before launching :file:`python.exe` from your application."
msgstr ""

#: ../Doc/using/windows.rst:806
msgid ""
"If you cannot use the previous suggestions (for example, you are a "
"distribution that allows people to run :file:`python.exe` directly), ensure "
"that the landmark file (:file:`Lib\\\\os.py`) exists in your install "
"directory. (Note that it will not be detected inside a ZIP file, but a "
"correctly named ZIP file will be detected instead.)"
msgstr ""

#: ../Doc/using/windows.rst:812
msgid ""
"These will ensure that the files in a system-wide installation will not take "
"precedence over the copy of the standard library bundled with your "
"application. Otherwise, your users may experience problems using your "
"application. Note that the first suggestion is the best, as the other may "
"still be susceptible to non-standard paths in the registry and user site-"
"packages."
msgstr ""

#: ../Doc/using/windows.rst:821
msgid ""
"Adds ``._pth`` file support and removes ``applocal`` option from ``pyvenv."
"cfg``."
msgstr ""

#: ../Doc/using/windows.rst:823
msgid ""
"Adds ``pythonXX.zip`` as a potential landmark when directly adjacent to the "
"executable."
msgstr ""

#: ../Doc/using/windows.rst:827
msgid "Additional modules"
msgstr ""

#: ../Doc/using/windows.rst:829
msgid ""
"Even though Python aims to be portable among all platforms, there are "
"features that are unique to Windows.  A couple of modules, both in the "
"standard library and external, and snippets exist to use these features."
msgstr ""

#: ../Doc/using/windows.rst:833
msgid ""
"The Windows-specific standard modules are documented in :ref:`mswin-specific-"
"services`."
msgstr ""

#: ../Doc/using/windows.rst:837
msgid "PyWin32"
msgstr ""

#: ../Doc/using/windows.rst:839
msgid ""
"The `PyWin32 <https://pypi.python.org/pypi/pywin32>`_ module by Mark Hammond "
"is a collection of modules for advanced Windows-specific support.  This "
"includes utilities for:"
msgstr ""

#: ../Doc/using/windows.rst:843
msgid "`Component Object Model <https://www.microsoft.com/com/>`_ (COM)"
msgstr ""

#: ../Doc/using/windows.rst:844
msgid "Win32 API calls"
msgstr ""

#: ../Doc/using/windows.rst:845
msgid "Registry"
msgstr ""

#: ../Doc/using/windows.rst:846
msgid "Event log"
msgstr ""

#: ../Doc/using/windows.rst:847
msgid ""
"`Microsoft Foundation Classes <https://msdn.microsoft.com/en-us/library/"
"fe1cf721%28VS.80%29.aspx>`_ (MFC) user interfaces"
msgstr ""

#: ../Doc/using/windows.rst:850
msgid ""
"`PythonWin <https://web.archive.org/web/20060524042422/ https://www.python."
"org/windows/pythonwin/>`_ is a sample MFC application shipped with PyWin32.  "
"It is an embeddable IDE with a built-in debugger."
msgstr ""

#: ../Doc/using/windows.rst:857
msgid ""
"`Win32 How Do I...? <http://timgolden.me.uk/python/win32_how_do_i.html>`_"
msgstr ""

#: ../Doc/using/windows.rst:857
msgid "by Tim Golden"
msgstr ""

#: ../Doc/using/windows.rst:859
msgid "`Python and COM <http://www.boddie.org.uk/python/COM.html>`_"
msgstr ""

#: ../Doc/using/windows.rst:860
msgid "by David and Paul Boddie"
msgstr ""

#: ../Doc/using/windows.rst:864
msgid "cx_Freeze"
msgstr ""

#: ../Doc/using/windows.rst:866
msgid ""
"`cx_Freeze <http://cx-freeze.sourceforge.net/>`_ is a :mod:`distutils` "
"extension (see :ref:`extending-distutils`) which wraps Python scripts into "
"executable Windows programs (:file:`{*}.exe` files).  When you have done "
"this, you can distribute your application without requiring your users to "
"install Python."
msgstr ""

#: ../Doc/using/windows.rst:874
msgid "WConio"
msgstr ""

#: ../Doc/using/windows.rst:876
msgid ""
"Since Python's advanced terminal handling layer, :mod:`curses`, is "
"restricted to Unix-like systems, there is a library exclusive to Windows as "
"well: Windows Console I/O for Python."
msgstr ""

#: ../Doc/using/windows.rst:880
msgid ""
"`WConio <http://newcenturycomputers.net/projects/wconio.html>`_ is a wrapper "
"for Turbo-C's :file:`CONIO.H`, used to create text user interfaces."
msgstr ""

#: ../Doc/using/windows.rst:886
msgid "Compiling Python on Windows"
msgstr ""

#: ../Doc/using/windows.rst:888
msgid ""
"If you want to compile CPython yourself, first thing you should do is get "
"the `source <https://www.python.org/downloads/source/>`_. You can download "
"either the latest release's source or just grab a fresh `checkout <https://"
"docs.python.org/devguide/setup.html#getting-the-source-code>`_."
msgstr ""

#: ../Doc/using/windows.rst:893
msgid ""
"The source tree contains a build solution and project files for Microsoft "
"Visual Studio 2015, which is the compiler used to build the official Python "
"releases. These files are in the :file:`PCbuild` directory."
msgstr ""

#: ../Doc/using/windows.rst:897
msgid ""
"Check :file:`PCbuild/readme.txt` for general information on the build "
"process."
msgstr ""

#: ../Doc/using/windows.rst:900
msgid "For extension modules, consult :ref:`building-on-windows`."
msgstr ""

#: ../Doc/using/windows.rst:907
msgid ""
"`Python + Windows + distutils + SWIG + gcc MinGW <http://sebsauvage.net/"
"python/mingw.html>`_"
msgstr ""

#: ../Doc/using/windows.rst:905
msgid ""
"or \"Creating Python extensions in C/C++ with SWIG and compiling them with "
"MinGW gcc under Windows\" or \"Installing Python extension with distutils "
"and without Microsoft Visual C++\" by Sébastien Sauvage, 2003"
msgstr ""

#: ../Doc/using/windows.rst:909
msgid ""
"`MingW -- Python extensions <http://oldwiki.mingw.org/index.php/Python"
"%20extensions>`_"
msgstr ""

#: ../Doc/using/windows.rst:910
msgid "by Trent Apted et al, 2007"
msgstr ""

#: ../Doc/using/windows.rst:914
msgid "Embedded Distribution"
msgstr ""

#: ../Doc/using/windows.rst:918
msgid ""
"The embedded distribution is a ZIP file containing a minimal Python "
"environment. It is intended for acting as part of another application, "
"rather than being directly accessed by end-users."
msgstr ""

#: ../Doc/using/windows.rst:922
msgid ""
"When extracted, the embedded distribution is (almost) fully isolated from "
"the user's system, including environment variables, system registry "
"settings, and installed packages. The standard library is included as pre-"
"compiled and optimized ``.pyc`` files in a ZIP, and ``python3.dll``, "
"``python36.dll``, ``python.exe`` and ``pythonw.exe`` are all provided. Tcl/"
"tk (including all dependants, such as Idle), pip and the Python "
"documentation are not included."
msgstr ""

#: ../Doc/using/windows.rst:931
msgid ""
"The embedded distribution does not include the `Microsoft C Runtime <https://"
"www.microsoft.com/en-us/download/details.aspx?id=48145>`_ and it is the "
"responsibility of the application installer to provide this. The runtime may "
"have already been installed on a user's system previously or automatically "
"via Windows Update, and can be detected by finding ``ucrtbase.dll`` in the "
"system directory."
msgstr ""

#: ../Doc/using/windows.rst:938
msgid ""
"Third-party packages should be installed by the application installer "
"alongside the embedded distribution. Using pip to manage dependencies as for "
"a regular Python installation is not supported with this distribution, "
"though with some care it may be possible to include and use pip for "
"automatic updates. In general, third-party packages should be treated as "
"part of the application (\"vendoring\") so that the developer can ensure "
"compatibility with newer versions before providing updates to users."
msgstr ""

#: ../Doc/using/windows.rst:946
msgid ""
"The two recommended use cases for this distribution are described below."
msgstr ""

#: ../Doc/using/windows.rst:949
msgid "Python Application"
msgstr ""

#: ../Doc/using/windows.rst:951
msgid ""
"An application written in Python does not necessarily require users to be "
"aware of that fact. The embedded distribution may be used in this case to "
"include a private version of Python in an install package. Depending on how "
"transparent it should be (or conversely, how professional it should appear), "
"there are two options."
msgstr ""

#: ../Doc/using/windows.rst:957
msgid ""
"Using a specialized executable as a launcher requires some coding, but "
"provides the most transparent experience for users. With a customized "
"launcher, there are no obvious indications that the program is running on "
"Python: icons can be customized, company and version information can be "
"specified, and file associations behave properly. In most cases, a custom "
"launcher should simply be able to call ``Py_Main`` with a hard-coded command "
"line."
msgstr ""

#: ../Doc/using/windows.rst:964
msgid ""
"The simpler approach is to provide a batch file or generated shortcut that "
"directly calls the ``python.exe`` or ``pythonw.exe`` with the required "
"command-line arguments. In this case, the application will appear to be "
"Python and not its actual name, and users may have trouble distinguishing it "
"from other running Python processes or file associations."
msgstr ""

#: ../Doc/using/windows.rst:970
msgid ""
"With the latter approach, packages should be installed as directories "
"alongside the Python executable to ensure they are available on the path. "
"With the specialized launcher, packages can be located in other locations as "
"there is an opportunity to specify the search path before launching the "
"application."
msgstr ""

#: ../Doc/using/windows.rst:976
msgid "Embedding Python"
msgstr ""

#: ../Doc/using/windows.rst:978
msgid ""
"Applications written in native code often require some form of scripting "
"language, and the embedded Python distribution can be used for this purpose. "
"In general, the majority of the application is in native code, and some part "
"will either invoke ``python.exe`` or directly use ``python3.dll``. For "
"either case, extracting the embedded distribution to a subdirectory of the "
"application installation is sufficient to provide a loadable Python "
"interpreter."
msgstr ""

#: ../Doc/using/windows.rst:985
msgid ""
"As with the application use, packages can be installed to any location as "
"there is an opportunity to specify search paths before initializing the "
"interpreter. Otherwise, there is no fundamental differences between using "
"the embedded distribution and a regular installation."
msgstr ""

#: ../Doc/using/windows.rst:991
msgid "Other resources"
msgstr ""

#: ../Doc/using/windows.rst:998
msgid ""
"`Python Programming On Win32 <http://shop.oreilly.com/product/9781565926219."
"do>`_"
msgstr ""

#: ../Doc/using/windows.rst:996
msgid ""
"\"Help for Windows Programmers\" by Mark Hammond and Andy Robinson, O'Reilly "
"Media, 2000, ISBN 1-56592-621-8"
msgstr ""

#: ../Doc/using/windows.rst:1001
msgid ""
"`A Python for Windows Tutorial <http://www.imladris.com/Scripts/"
"PythonForWindows.html>`_"
msgstr ""

#: ../Doc/using/windows.rst:1001
msgid "by Amanda Birmingham, 2004"
msgstr ""

#: ../Doc/using/windows.rst:1003
msgid ":pep:`397` - Python launcher for Windows"
msgstr ""

#: ../Doc/using/windows.rst:1004
msgid ""
"The proposal for the launcher to be included in the Python distribution."
msgstr ""
