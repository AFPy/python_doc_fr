# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:40+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/datetime.rst:2
msgid ":mod:`datetime` --- Basic date and time types"
msgstr ":mod:`datetime` --- Types de base pour la date et l'heure"

#: ../Doc/library/datetime.rst:11
msgid "**Source code:** :source:`Lib/datetime.py`"
msgstr "**Code source :** :source:`Lib/datetime.py`"

#: ../Doc/library/datetime.rst:17
msgid ""
"The :mod:`datetime` module supplies classes for manipulating dates and times "
"in both simple and complex ways.  While date and time arithmetic is "
"supported, the focus of the implementation is on efficient attribute "
"extraction for output formatting and manipulation. For related "
"functionality, see also the :mod:`time` and :mod:`calendar` modules."
msgstr ""
"Le module :mod:`datetime` fournit des classes pour manipuler de façon simple "
"ou plus complexe des dates et des heures. Bien que les calculs de date et "
"d'heure sont supportés, l'implémentation est essentiellement tournée vers "
"l'efficacité pour extraire des attributs pour les manipuler et les formater "
"pour l'affichage. Pour d'autres fonctionnalités associées, voir aussi les "
"modules :mod:`time` et :mod:`calendar`."

#: ../Doc/library/datetime.rst:23
msgid "There are two kinds of date and time objects: \"naive\" and \"aware\"."
msgstr ""
"Il y a deux sortes d'objets date et time : les \"naïfs\" et les \"avisés\"."

#: ../Doc/library/datetime.rst:25
msgid ""
"An aware object has sufficient knowledge of applicable algorithmic and "
"political time adjustments, such as time zone and daylight saving time "
"information, to locate itself relative to other aware objects.  An aware "
"object is used to represent a specific moment in time that is not open to "
"interpretation [#]_."
msgstr ""
"Un objet avisé possède suffisamment de connaissance des règles à appliquer "
"et des politiques d'ajustement de l'heure comme les informations sur les "
"fuseaux horaires et l'heure d'été pour se situer de façon relative par "
"rapport à d'autres objets avisés. Un objet avisé est utilisé pour représenté "
"un moment précis de l'histoire qui n'est pas ouvert à l'interprétation [#]_."

#: ../Doc/library/datetime.rst:31
msgid ""
"A naive object does not contain enough information to unambiguously locate "
"itself relative to other date/time objects.  Whether a naive object "
"represents Coordinated Universal Time (UTC), local time, or time in some "
"other timezone is purely up to the program, just like it is up to the "
"program whether a particular number represents metres, miles, or mass.  "
"Naive objects are easy to understand and to work with, at the cost of "
"ignoring some aspects of reality."
msgstr ""
"Un objet naïf ne comporte pas assez d'informations pour se situer sans "
"ambiguïté par rapport à d'autres objets date/time. Le fait qu'un objet naïf "
"représente un Temps universel coordonné (UTC), une heure locale ou une heure "
"dans un autre fuseau horaire dépend complètement du programme, tout comme un "
"nombre peut représenter une longueur, un poids ou une distance pour le "
"programme. Les objets naïfs sont simples à comprendre et il est aisé de "
"travailler avec, au prix de négliger certains aspects de la réalité."

#: ../Doc/library/datetime.rst:38
msgid ""
"For applications requiring aware objects, :class:`.datetime` and :class:`."
"time` objects have an optional time zone information attribute, :attr:`!"
"tzinfo`, that can be set to an instance of a subclass of the abstract :class:"
"`tzinfo` class. These :class:`tzinfo` objects capture information about the "
"offset from UTC time, the time zone name, and whether Daylight Saving Time "
"is in effect.  Note that only one concrete :class:`tzinfo` class, the :class:"
"`timezone` class, is supplied by the :mod:`datetime` module.  The :class:"
"`timezone` class can represent simple timezones with fixed offset from UTC, "
"such as UTC itself or North American EST and EDT timezones.  Supporting "
"timezones at deeper levels of detail is up to the application.  The rules "
"for time adjustment across the world are more political than rational, "
"change frequently, and there is no standard suitable for every application "
"aside from UTC."
msgstr ""

#: ../Doc/library/datetime.rst:51
msgid "The :mod:`datetime` module exports the following constants:"
msgstr "Le module :mod:`datetime` exporte les constantes suivantes :"

#: ../Doc/library/datetime.rst:55
msgid ""
"The smallest year number allowed in a :class:`date` or :class:`.datetime` "
"object. :const:`MINYEAR` is ``1``."
msgstr ""
"Le numéro d'année le plus petit autorisé dans un objet :class:`date` ou :"
"class:`datetime`. :const:`MINYEAR` vaut ``1``."

#: ../Doc/library/datetime.rst:61
msgid ""
"The largest year number allowed in a :class:`date` or :class:`.datetime` "
"object. :const:`MAXYEAR` is ``9999``."
msgstr ""
"Le numéro d'année le plus grand autorisé dans un objet :class:`date` ou :"
"class:`datetime`. :const:`MAXYEAR` vaut ``9999``."

#: ../Doc/library/datetime.rst:68
msgid "Module :mod:`calendar`"
msgstr "Module :mod:`calendar`"

#: ../Doc/library/datetime.rst:68
msgid "General calendar related functions."
msgstr "Fonctions génériques associées au calendrier."

#: ../Doc/library/datetime.rst:70
msgid "Module :mod:`time`"
msgstr "Module :mod:`time`"

#: ../Doc/library/datetime.rst:71
msgid "Time access and conversions."
msgstr "Accès au données d'horaires et aux conversions assosiées."

#: ../Doc/library/datetime.rst:75
msgid "Available Types"
msgstr "Types disponibles"

#: ../Doc/library/datetime.rst:80
msgid ""
"An idealized naive date, assuming the current Gregorian calendar always was, "
"and always will be, in effect. Attributes: :attr:`year`, :attr:`month`, and :"
"attr:`day`."
msgstr ""
"Une date naïve idéalisée, en supposant que le calendrier Grégorien actuel a "
"toujours existé et qu'il existera toujours. Attributs : :attr:`year`, :attr:"
"`month` et :attr:`day`."

#: ../Doc/library/datetime.rst:88
msgid ""
"An idealized time, independent of any particular day, assuming that every "
"day has exactly 24\\*60\\*60 seconds (there is no notion of \"leap seconds\" "
"here). Attributes: :attr:`hour`, :attr:`minute`, :attr:`second`, :attr:"
"`microsecond`, and :attr:`.tzinfo`."
msgstr ""
"Un temps idéalisé, indépendant d'une date particulière, en supposant qu'une "
"journée est composée d'exactement 24\\*60\\*60 secondes (il n'y a pas ici de "
"notion de \"seconde bissextile\"). Attributs : :attr:`hour`, :attr:"
"`minute`, :attr:`second`, :attr:`microsecond` et :attr:`tzinfo`."

#: ../Doc/library/datetime.rst:97
msgid ""
"A combination of a date and a time. Attributes: :attr:`year`, :attr:"
"`month`, :attr:`day`, :attr:`hour`, :attr:`minute`, :attr:`second`, :attr:"
"`microsecond`, and :attr:`.tzinfo`."
msgstr ""
"Une combinaison d'une date et d'une heure. Attributs : :attr:`year`, :attr:"
"`month`, :attr:`day`, :attr:`hour`, :attr:`minute`, :attr:`second`, :attr:"
"`microsecond`, et :attr:`tzinfo`."

#: ../Doc/library/datetime.rst:105
msgid ""
"A duration expressing the difference between two :class:`date`, :class:`."
"time`, or :class:`.datetime` instances to microsecond resolution."
msgstr ""
"Une durée qui exprime la différence entre deux instances de :class:`date`, :"
"class:`time` ou :class:`datetime` en microsecondes."

#: ../Doc/library/datetime.rst:112
msgid ""
"An abstract base class for time zone information objects.  These are used by "
"the :class:`.datetime` and :class:`.time` classes to provide a customizable "
"notion of time adjustment (for example, to account for time zone and/or "
"daylight saving time)."
msgstr ""
"Une classe de base abstraite pour les objets portants des informations sur "
"les fuseaux horaires. Ceux-ci sont utilisés par les classes :class:`."
"datetime` et :class:`.time` pour donner une notion personnalisable "
"d'ajustement d'horaire (par exemple la prise en compte d'un fuseau horaire "
"et/ou de l'heure d'été)."

#: ../Doc/library/datetime.rst:120
msgid ""
"A class that implements the :class:`tzinfo` abstract base class as a fixed "
"offset from the UTC."
msgstr ""
"Une classe qui implémente la classe de base abstraite :class:`tzinfo` en "
"tant qu'offset fixe par rapport au temps UTC."

#: ../Doc/library/datetime.rst:126
msgid "Objects of these types are immutable."
msgstr "Les objets issus de ces types sont immuables."

#: ../Doc/library/datetime.rst:128
msgid "Objects of the :class:`date` type are always naive."
msgstr "Les objets de type :class:`date` sont toujours naïfs."

#: ../Doc/library/datetime.rst:130
msgid ""
"An object of type :class:`.time` or :class:`.datetime` may be naive or "
"aware. A :class:`.datetime` object *d* is aware if ``d.tzinfo`` is not "
"``None`` and ``d.tzinfo.utcoffset(d)`` does not return ``None``.  If ``d."
"tzinfo`` is ``None``, or if ``d.tzinfo`` is not ``None`` but ``d.tzinfo."
"utcoffset(d)`` returns ``None``, *d* is naive.  A :class:`.time` object *t* "
"is aware if ``t.tzinfo`` is not ``None`` and ``t.tzinfo.utcoffset(None)`` "
"does not return ``None``.  Otherwise, *t* is naive."
msgstr ""
"Un objet de type :class:`.time` ou :class:`.datetime` peut être naïf ou "
"avisé. Un objet :class:`.datetime` *d* est avisé si ``d.tzinfo`` ne vaut pas "
"``None`` et que ``d.tzinfo.utcoffset(d)`` ne renvoie pas ``None``. Si ``d."
"tzinfo`` vaut ``None`` ou que ``d.tzinfo`` ne vaut pas ``None`` mais que ``d."
"tzinfo.utcoffset(d)`` renvoie ``None``, alors *d* est naïf. Un objet :class:"
"`.time` *t* est avisé si ``t.tzinfo`` ne vaut pas ``None`` et que ``t.tzinfo."
"utcoffset(None)`` ne renvoie pas ``None``. Sinon, *t* est naïf."

#: ../Doc/library/datetime.rst:138
msgid ""
"The distinction between naive and aware doesn't apply to :class:`timedelta` "
"objects."
msgstr ""
"La distinction entre naïf et avisé ne s'applique pas aux objets de type :"
"class:`timedelta`."

#: ../Doc/library/datetime.rst:141
msgid "Subclass relationships::"
msgstr "Relations entre les sous-classes :"

#: ../Doc/library/datetime.rst:155
msgid ":class:`timedelta` Objects"
msgstr "Objets :class:`timedelta`"

#: ../Doc/library/datetime.rst:157
msgid ""
"A :class:`timedelta` object represents a duration, the difference between "
"two dates or times."
msgstr ""
"Un objet :class:`timedelta` représente une durée, c'est-à-dire la différence "
"entre deux dates ou heures."

#: ../Doc/library/datetime.rst:162
msgid ""
"All arguments are optional and default to ``0``.  Arguments may be integers "
"or floats, and may be positive or negative."
msgstr ""
"Tous les paramètres sont optionnels et ont ``0`` comme valeur par défaut. "
"Les paramètres peuvent être des entiers ou des flottants et ils peuvent être "
"positifs ou négatifs."

#: ../Doc/library/datetime.rst:165
msgid ""
"Only *days*, *seconds* and *microseconds* are stored internally.  Arguments "
"are converted to those units:"
msgstr ""
"Seuls les *jours*, les *secondes* et les *microsecondes* sont stockés en "
"interne. Tous les paramètres sont convertis dans ces unités :"

#: ../Doc/library/datetime.rst:168
msgid "A millisecond is converted to 1000 microseconds."
msgstr "Une milliseconde est convertie en 1000 microsecondes."

#: ../Doc/library/datetime.rst:169
msgid "A minute is converted to 60 seconds."
msgstr "Une minute est convertie en 60 secondes."

#: ../Doc/library/datetime.rst:170
msgid "An hour is converted to 3600 seconds."
msgstr "Une heure est convertie en 3600 secondes."

#: ../Doc/library/datetime.rst:171
msgid "A week is converted to 7 days."
msgstr "Une semaine est convertie en 7 jours."

#: ../Doc/library/datetime.rst:173
msgid ""
"and days, seconds and microseconds are then normalized so that the "
"representation is unique, with"
msgstr ""
"et ensuite les jours, secondes et microsecondes sont normalisés pour que la "
"représentation soit unique avec"

#: ../Doc/library/datetime.rst:176
msgid "``0 <= microseconds < 1000000``"
msgstr "``0 <= microseconds < 1000000``"

#: ../Doc/library/datetime.rst:177
msgid "``0 <= seconds < 3600*24`` (the number of seconds in one day)"
msgstr "``0 <= secondes < 3600*24`` (le nombre de secondes dans une journée)"

#: ../Doc/library/datetime.rst:178
msgid "``-999999999 <= days <= 999999999``"
msgstr "``-999999999 <= days <= 999999999``"

#: ../Doc/library/datetime.rst:180
msgid ""
"If any argument is a float and there are fractional microseconds, the "
"fractional microseconds left over from all arguments are combined and their "
"sum is rounded to the nearest microsecond using round-half-to-even "
"tiebreaker.  If no argument is a float, the conversion and normalization "
"processes are exact (no information is lost)."
msgstr ""

#: ../Doc/library/datetime.rst:187
msgid ""
"If the normalized value of days lies outside the indicated range, :exc:"
"`OverflowError` is raised."
msgstr ""

#: ../Doc/library/datetime.rst:190
msgid ""
"Note that normalization of negative values may be surprising at first. For "
"example,"
msgstr ""

#: ../Doc/library/datetime.rst:199
msgid "Class attributes are:"
msgstr "Les attributs de la classe sont :"

#: ../Doc/library/datetime.rst:203
msgid "The most negative :class:`timedelta` object, ``timedelta(-999999999)``."
msgstr "L'objet class:`timedelta` le plus négatif, ``timedelta(-999999999)``."

#: ../Doc/library/datetime.rst:208
msgid ""
"The most positive :class:`timedelta` object, ``timedelta(days=999999999, "
"hours=23, minutes=59, seconds=59, microseconds=999999)``."
msgstr ""
"L'objet class:`timedelta` le plus positif, ``timedelta(days=999999999, "
"hours=23, minutes=59, seconds=59, microseconds=999999)``."

#: ../Doc/library/datetime.rst:214
msgid ""
"The smallest possible difference between non-equal :class:`timedelta` "
"objects, ``timedelta(microseconds=1)``."
msgstr ""
"La plus petite différence entre des objets :class:`timedelta` non égaux, "
"``timedelta(microseconds=1)``."

#: ../Doc/library/datetime.rst:217
msgid ""
"Note that, because of normalization, ``timedelta.max`` > ``-timedelta.min``. "
"``-timedelta.max`` is not representable as a :class:`timedelta` object."
msgstr ""
"Il est à noter, du fait de la normalisation, que ``timedelta.max`` > ``-"
"timedelta.min``. ``-timedelta.max`` n'est pas représentable sous la forme "
"d'un objet :class:`timedelta`."

#: ../Doc/library/datetime.rst:220 ../Doc/library/datetime.rst:456
#: ../Doc/library/datetime.rst:852 ../Doc/library/datetime.rst:1412
msgid "Instance attributes (read-only):"
msgstr "Attributs de l'instance (en lecture seule) :"

#: ../Doc/library/datetime.rst:223
msgid "Attribute"
msgstr "Attribut"

#: ../Doc/library/datetime.rst:223
msgid "Value"
msgstr "Valeur"

#: ../Doc/library/datetime.rst:225
msgid "``days``"
msgstr "``days``"

#: ../Doc/library/datetime.rst:225
msgid "Between -999999999 and 999999999 inclusive"
msgstr "Entre -999999999 et 999999999 inclus"

#: ../Doc/library/datetime.rst:227
msgid "``seconds``"
msgstr "``seconds``"

#: ../Doc/library/datetime.rst:227
msgid "Between 0 and 86399 inclusive"
msgstr "Entre 0 et 86399 inclus"

#: ../Doc/library/datetime.rst:229
msgid "``microseconds``"
msgstr "``microseconds``"

#: ../Doc/library/datetime.rst:229
msgid "Between 0 and 999999 inclusive"
msgstr "Entre 0 et 999999 inclus"

#: ../Doc/library/datetime.rst:232 ../Doc/library/datetime.rst:473
#: ../Doc/library/datetime.rst:905 ../Doc/library/datetime.rst:1451
msgid "Supported operations:"
msgstr "Opérations supportées :"

#: ../Doc/library/datetime.rst:237 ../Doc/library/datetime.rst:476
#: ../Doc/library/datetime.rst:908
msgid "Operation"
msgstr "Opération"

#: ../Doc/library/datetime.rst:237 ../Doc/library/datetime.rst:476
#: ../Doc/library/datetime.rst:908
msgid "Result"
msgstr "Résultat"

#: ../Doc/library/datetime.rst:239
msgid "``t1 = t2 + t3``"
msgstr "``t1 = t2 + t3``"

#: ../Doc/library/datetime.rst:239
msgid ""
"Sum of *t2* and *t3*. Afterwards *t1*-*t2* == *t3* and *t1*-*t3* == *t2* are "
"true. (1)"
msgstr ""
"Somme de *t2* et *t3*. Ensuite *t1*-*t2* == *t3* et *t1*-*t3* == *t2* sont "
"des expressions vraies. (1)"

#: ../Doc/library/datetime.rst:242
msgid "``t1 = t2 - t3``"
msgstr "``t1 = t2 - t3``"

#: ../Doc/library/datetime.rst:242
msgid ""
"Difference of *t2* and *t3*. Afterwards *t1* == *t2* - *t3* and *t2* == *t1* "
"+ *t3* are true. (1)"
msgstr ""
"Différence entre *t2* et *t3*. Ensuite *t1* == *t2* - *t3* et *t2* == *t1* + "
"*t3* sont des expressions vraies. (1)"

#: ../Doc/library/datetime.rst:246
msgid "``t1 = t2 * i or t1 = i * t2``"
msgstr "``t1 = t2 * i or t1 = i * t2``"

#: ../Doc/library/datetime.rst:246
msgid ""
"Delta multiplied by an integer. Afterwards *t1* // i == *t2* is true, "
"provided ``i != 0``."
msgstr ""
"Delta multiplié par un entier. Ensuite *t1* // i == *t2* est vrai, en "
"admettant que ``i != 0``."

#: ../Doc/library/datetime.rst:250
msgid "In general, *t1* \\* i == *t1* \\* (i-1) + *t1* is true. (1)"
msgstr "De manière générale, *t1* \\* i == *t1* \\* (i-1) + *t1* est vrai. (1)"

#: ../Doc/library/datetime.rst:253
msgid "``t1 = t2 * f or t1 = f * t2``"
msgstr "``t1 = t2 * f or t1 = f * t2``"

#: ../Doc/library/datetime.rst:253
msgid ""
"Delta multiplied by a float. The result is rounded to the nearest multiple "
"of timedelta.resolution using round-half-to-even."
msgstr ""
"Delta multiplié par un flottant. Le résultat est arrondi au multiple le plus "
"proche de timedelta.resolution en utilisant la règle de l'arrondi au pair le "
"plus proche."

#: ../Doc/library/datetime.rst:257
msgid "``f = t2 / t3``"
msgstr "``f = t2 / t3``"

#: ../Doc/library/datetime.rst:257
msgid "Division (3) of *t2* by *t3*.  Returns a :class:`float` object."
msgstr "Division (3) de *t2* par *t3*. Renvoie un objet :class:`float`."

#: ../Doc/library/datetime.rst:260
msgid "``t1 = t2 / f or t1 = t2 / i``"
msgstr "``t1 = t2 / f or t1 = t2 / i``"

#: ../Doc/library/datetime.rst:260
msgid ""
"Delta divided by a float or an int. The result is rounded to the nearest "
"multiple of timedelta.resolution using round-half-to-even."
msgstr ""
"Delta divisé par un flottant ou un entier. Le résultat est arrondi au "
"multiple le plus proche de timedelta.resolution en utilisant la règle de "
"l'arrondi au pair le plus proche."

#: ../Doc/library/datetime.rst:264
msgid "``t1 = t2 // i`` or ``t1 = t2 // t3``"
msgstr "``t1 = t2 // i`` or ``t1 = t2 // t3``"

#: ../Doc/library/datetime.rst:264
msgid ""
"The floor is computed and the remainder (if any) is thrown away.  In the "
"second case, an integer is returned. (3)"
msgstr ""
"Le quotient est calculé et le reste (s'il y en a un) est ignoré. Dans le "
"second cas, un enter est renvoyé. (3)"

#: ../Doc/library/datetime.rst:268
msgid "``t1 = t2 % t3``"
msgstr "``t1 = t2 % t3``"

#: ../Doc/library/datetime.rst:268
msgid "The remainder is computed as a :class:`timedelta` object. (3)"
msgstr "Le reste est calculé comme un objet de type :class:`timedelta`. (3)"

#: ../Doc/library/datetime.rst:271
msgid "``q, r = divmod(t1, t2)``"
msgstr "``q, r = divmod(t1, t2)``"

#: ../Doc/library/datetime.rst:271
msgid ""
"Computes the quotient and the remainder: ``q = t1 // t2`` (3) and ``r = t1 % "
"t2``. q is an integer and r is a :class:`timedelta` object."
msgstr ""

#: ../Doc/library/datetime.rst:276
msgid "``+t1``"
msgstr "``+t1``"

#: ../Doc/library/datetime.rst:276
msgid "Returns a :class:`timedelta` object with the same value. (2)"
msgstr ""

#: ../Doc/library/datetime.rst:279
msgid "``-t1``"
msgstr "``-t1``"

#: ../Doc/library/datetime.rst:279
msgid ""
"equivalent to :class:`timedelta`\\ (-*t1.days*, -*t1.seconds*, -*t1."
"microseconds*), and to *t1*\\* -1. (1)(4)"
msgstr ""

#: ../Doc/library/datetime.rst:283
msgid "``abs(t)``"
msgstr "``abs(t)``"

#: ../Doc/library/datetime.rst:283
msgid ""
"equivalent to +\\ *t* when ``t.days >= 0``, and to -*t* when ``t.days < 0``. "
"(2)"
msgstr ""

#: ../Doc/library/datetime.rst:286
msgid "``str(t)``"
msgstr "``str(t)``"

#: ../Doc/library/datetime.rst:286
msgid ""
"Returns a string in the form ``[D day[s], ][H]H:MM:SS[.UUUUUU]``, where D is "
"negative for negative ``t``. (5)"
msgstr ""

#: ../Doc/library/datetime.rst:290
msgid "``repr(t)``"
msgstr "``repr(t)``"

#: ../Doc/library/datetime.rst:290
msgid ""
"Returns a string in the form ``datetime.timedelta(D[, S[, U]])``, where D is "
"negative for negative ``t``. (5)"
msgstr ""

#: ../Doc/library/datetime.rst:295 ../Doc/library/datetime.rst:490
#: ../Doc/library/datetime.rst:2092
msgid "Notes:"
msgstr "Notes : "

#: ../Doc/library/datetime.rst:298
msgid "This is exact, but may overflow."
msgstr "Ceci est exact, mais peut provoquer un débordement"

#: ../Doc/library/datetime.rst:301
msgid "This is exact, and cannot overflow."
msgstr "Ceci est exact, et ne peut pas provoquer un débordement."

#: ../Doc/library/datetime.rst:304
msgid "Division by 0 raises :exc:`ZeroDivisionError`."
msgstr "Une division par 0 provoque :exc:`ZeroDivisionError`."

#: ../Doc/library/datetime.rst:307
msgid "-*timedelta.max* is not representable as a :class:`timedelta` object."
msgstr ""
"- * Timedelta.max * est pas représentable comme: class: `timedelta` objet."

#: ../Doc/library/datetime.rst:310
msgid ""
"String representations of :class:`timedelta` objects are normalized "
"similarly to their internal representation.  This leads to somewhat unusual "
"results for negative timedeltas.  For example:"
msgstr ""

#: ../Doc/library/datetime.rst:319
msgid ""
"In addition to the operations listed above :class:`timedelta` objects "
"support certain additions and subtractions with :class:`date` and :class:`."
"datetime` objects (see below)."
msgstr ""

#: ../Doc/library/datetime.rst:323
msgid ""
"Floor division and true division of a :class:`timedelta` object by another :"
"class:`timedelta` object are now supported, as are remainder operations and "
"the :func:`divmod` function.  True division and multiplication of a :class:"
"`timedelta` object by a :class:`float` object are now supported."
msgstr ""

#: ../Doc/library/datetime.rst:330
msgid ""
"Comparisons of :class:`timedelta` objects are supported with the :class:"
"`timedelta` object representing the smaller duration considered to be the "
"smaller timedelta. In order to stop mixed-type comparisons from falling back "
"to the default comparison by object address, when a :class:`timedelta` "
"object is compared to an object of a different type, :exc:`TypeError` is "
"raised unless the comparison is ``==`` or ``!=``.  The latter cases return :"
"const:`False` or :const:`True`, respectively."
msgstr ""

#: ../Doc/library/datetime.rst:338
msgid ""
":class:`timedelta` objects are :term:`hashable` (usable as dictionary keys), "
"support efficient pickling, and in Boolean contexts, a :class:`timedelta` "
"object is considered to be true if and only if it isn't equal to "
"``timedelta(0)``."
msgstr ""

#: ../Doc/library/datetime.rst:342 ../Doc/library/datetime.rst:523
#: ../Doc/library/datetime.rst:984 ../Doc/library/datetime.rst:1484
msgid "Instance methods:"
msgstr "Méthodes de l'instance :"

#: ../Doc/library/datetime.rst:346
msgid ""
"Return the total number of seconds contained in the duration. Equivalent to "
"``td / timedelta(seconds=1)``."
msgstr ""

#: ../Doc/library/datetime.rst:349
msgid ""
"Note that for very large time intervals (greater than 270 years on most "
"platforms) this method will lose microsecond accuracy."
msgstr ""

#: ../Doc/library/datetime.rst:355
msgid "Example usage:"
msgstr "Exemple d'utilisation :"

#: ../Doc/library/datetime.rst:381
msgid ":class:`date` Objects"
msgstr "Objets :class:`date`"

#: ../Doc/library/datetime.rst:383
msgid ""
"A :class:`date` object represents a date (year, month and day) in an "
"idealized calendar, the current Gregorian calendar indefinitely extended in "
"both directions.  January 1 of year 1 is called day number 1, January 2 of "
"year 1 is called day number 2, and so on.  This matches the definition of "
"the \"proleptic Gregorian\" calendar in Dershowitz and Reingold's book "
"Calendrical Calculations, where it's the base calendar for all "
"computations.  See the book for algorithms for converting between proleptic "
"Gregorian ordinals and many other calendar systems."
msgstr ""

#: ../Doc/library/datetime.rst:395
msgid ""
"All arguments are required.  Arguments may be integers, in the following "
"ranges:"
msgstr ""

#: ../Doc/library/datetime.rst:398
msgid "``MINYEAR <= year <= MAXYEAR``"
msgstr "``MINYEAR <= year <= MAXYEAR``"

#: ../Doc/library/datetime.rst:399
msgid "``1 <= month <= 12``"
msgstr "``1 <= month <= 12``"

#: ../Doc/library/datetime.rst:400
msgid "``1 <= day <= number of days in the given month and year``"
msgstr "``1 <= day <= number of days in the given month and year``"

#: ../Doc/library/datetime.rst:402 ../Doc/library/datetime.rst:701
msgid ""
"If an argument outside those ranges is given, :exc:`ValueError` is raised."
msgstr ""

#: ../Doc/library/datetime.rst:405 ../Doc/library/datetime.rst:706
msgid "Other constructors, all class methods:"
msgstr ""

#: ../Doc/library/datetime.rst:409
msgid ""
"Return the current local date.  This is equivalent to ``date."
"fromtimestamp(time.time())``."
msgstr ""

#: ../Doc/library/datetime.rst:415
msgid ""
"Return the local date corresponding to the POSIX timestamp, such as is "
"returned by :func:`time.time`.  This may raise :exc:`OverflowError`, if the "
"timestamp is out of the range of values supported by the platform C :c:func:"
"`localtime` function, and :exc:`OSError` on :c:func:`localtime` failure. "
"It's common for this to be restricted to years from 1970 through 2038.  Note "
"that on non-POSIX systems that include leap seconds in their notion of a "
"timestamp, leap seconds are ignored by :meth:`fromtimestamp`."
msgstr ""

#: ../Doc/library/datetime.rst:423
msgid ""
"Raise :exc:`OverflowError` instead of :exc:`ValueError` if the timestamp is "
"out of the range of values supported by the platform C :c:func:`localtime` "
"function. Raise :exc:`OSError` instead of :exc:`ValueError` on :c:func:"
"`localtime` failure."
msgstr ""

#: ../Doc/library/datetime.rst:432
msgid ""
"Return the date corresponding to the proleptic Gregorian ordinal, where "
"January 1 of year 1 has ordinal 1.  :exc:`ValueError` is raised unless ``1 "
"<= ordinal <= date.max.toordinal()``. For any date *d*, ``date.fromordinal(d."
"toordinal()) == d``."
msgstr ""

#: ../Doc/library/datetime.rst:438 ../Doc/library/datetime.rst:832
#: ../Doc/library/datetime.rst:1392 ../Doc/library/datetime.rst:1924
msgid "Class attributes:"
msgstr "Attributs de la classe :"

#: ../Doc/library/datetime.rst:442
msgid "The earliest representable date, ``date(MINYEAR, 1, 1)``."
msgstr ""

#: ../Doc/library/datetime.rst:447
msgid "The latest representable date, ``date(MAXYEAR, 12, 31)``."
msgstr ""

#: ../Doc/library/datetime.rst:452
msgid ""
"The smallest possible difference between non-equal date objects, "
"``timedelta(days=1)``."
msgstr ""

#: ../Doc/library/datetime.rst:460 ../Doc/library/datetime.rst:856
msgid "Between :const:`MINYEAR` and :const:`MAXYEAR` inclusive."
msgstr ""

#: ../Doc/library/datetime.rst:465 ../Doc/library/datetime.rst:861
msgid "Between 1 and 12 inclusive."
msgstr "Entre 1 et 12 inclus."

#: ../Doc/library/datetime.rst:470 ../Doc/library/datetime.rst:866
msgid "Between 1 and the number of days in the given month of the given year."
msgstr ""

#: ../Doc/library/datetime.rst:478
msgid "``date2 = date1 + timedelta``"
msgstr "``date2 = date1 + timedelta``"

#: ../Doc/library/datetime.rst:478
msgid "*date2* is ``timedelta.days`` days removed from *date1*.  (1)"
msgstr ""

#: ../Doc/library/datetime.rst:481
msgid "``date2 = date1 - timedelta``"
msgstr "``date2 = date1 - timedelta``"

#: ../Doc/library/datetime.rst:481
msgid "Computes *date2* such that ``date2 + timedelta == date1``. (2)"
msgstr "Calcule *date2* de façon à avoir ``date2 + timedelta == date1``. (2)"

#: ../Doc/library/datetime.rst:484
msgid "``timedelta = date1 - date2``"
msgstr "``timedelta = date1 - date2``"

#: ../Doc/library/datetime.rst:484 ../Doc/library/datetime.rst:914
msgid "\\(3)"
msgstr "\\(3)"

#: ../Doc/library/datetime.rst:486
msgid "``date1 < date2``"
msgstr "``date1 < date2``"

#: ../Doc/library/datetime.rst:486
msgid ""
"*date1* is considered less than *date2* when *date1* precedes *date2* in "
"time. (4)"
msgstr ""

#: ../Doc/library/datetime.rst:493
msgid ""
"*date2* is moved forward in time if ``timedelta.days > 0``, or backward if "
"``timedelta.days < 0``.  Afterward ``date2 - date1 == timedelta.days``. "
"``timedelta.seconds`` and ``timedelta.microseconds`` are ignored. :exc:"
"`OverflowError` is raised if ``date2.year`` would be smaller than :const:"
"`MINYEAR` or larger than :const:`MAXYEAR`."
msgstr ""

#: ../Doc/library/datetime.rst:500
msgid ""
"This isn't quite equivalent to date1 + (-timedelta), because -timedelta in "
"isolation can overflow in cases where date1 - timedelta does not. "
"``timedelta.seconds`` and ``timedelta.microseconds`` are ignored."
msgstr ""

#: ../Doc/library/datetime.rst:505
msgid ""
"This is exact, and cannot overflow.  timedelta.seconds and timedelta."
"microseconds are 0, and date2 + timedelta == date1 after."
msgstr ""

#: ../Doc/library/datetime.rst:509
msgid ""
"In other words, ``date1 < date2`` if and only if ``date1.toordinal() < date2."
"toordinal()``. In order to stop comparison from falling back to the default "
"scheme of comparing object addresses, date comparison normally raises :exc:"
"`TypeError` if the other comparand isn't also a :class:`date` object. "
"However, ``NotImplemented`` is returned instead if the other comparand has "
"a :meth:`timetuple` attribute.  This hook gives other kinds of date objects "
"a chance at implementing mixed-type comparison. If not, when a :class:`date` "
"object is compared to an object of a different type, :exc:`TypeError` is "
"raised unless the comparison is ``==`` or ``!=``.  The latter cases return :"
"const:`False` or :const:`True`, respectively."
msgstr ""

#: ../Doc/library/datetime.rst:520
msgid ""
"Dates can be used as dictionary keys. In Boolean contexts, all :class:`date` "
"objects are considered to be true."
msgstr ""

#: ../Doc/library/datetime.rst:527
msgid ""
"Return a date with the same value, except for those parameters given new "
"values by whichever keyword arguments are specified.  For example, if ``d == "
"date(2002, 12, 31)``, then ``d.replace(day=26) == date(2002, 12, 26)``."
msgstr ""

#: ../Doc/library/datetime.rst:534
msgid ""
"Return a :class:`time.struct_time` such as returned by :func:`time."
"localtime`. The hours, minutes and seconds are 0, and the DST flag is -1. "
"``d.timetuple()`` is equivalent to ``time.struct_time((d.year, d.month, d."
"day, 0, 0, 0, d.weekday(), yday, -1))``, where ``yday = d.toordinal() - "
"date(d.year, 1, 1).toordinal() + 1`` is the day number within the current "
"year starting with ``1`` for January 1st."
msgstr ""

#: ../Doc/library/datetime.rst:544
msgid ""
"Return the proleptic Gregorian ordinal of the date, where January 1 of year "
"1 has ordinal 1.  For any :class:`date` object *d*, ``date.fromordinal(d."
"toordinal()) == d``."
msgstr ""

#: ../Doc/library/datetime.rst:551
msgid ""
"Return the day of the week as an integer, where Monday is 0 and Sunday is 6. "
"For example, ``date(2002, 12, 4).weekday() == 2``, a Wednesday. See also :"
"meth:`isoweekday`."
msgstr ""

#: ../Doc/library/datetime.rst:558
msgid ""
"Return the day of the week as an integer, where Monday is 1 and Sunday is 7. "
"For example, ``date(2002, 12, 4).isoweekday() == 3``, a Wednesday. See also :"
"meth:`weekday`, :meth:`isocalendar`."
msgstr ""

#: ../Doc/library/datetime.rst:565
msgid "Return a 3-tuple, (ISO year, ISO week number, ISO weekday)."
msgstr ""

#: ../Doc/library/datetime.rst:567
msgid ""
"The ISO calendar is a widely used variant of the Gregorian calendar. See "
"https://www.staff.science.uu.nl/~gent0113/calendar/isocalendar.htm for a "
"good explanation."
msgstr ""

#: ../Doc/library/datetime.rst:571
msgid ""
"The ISO year consists of 52 or 53 full weeks, and where a week starts on a "
"Monday and ends on a Sunday.  The first week of an ISO year is the first "
"(Gregorian) calendar week of a year containing a Thursday. This is called "
"week number 1, and the ISO year of that Thursday is the same as its "
"Gregorian year."
msgstr ""

#: ../Doc/library/datetime.rst:576
msgid ""
"For example, 2004 begins on a Thursday, so the first week of ISO year 2004 "
"begins on Monday, 29 Dec 2003 and ends on Sunday, 4 Jan 2004, so that "
"``date(2003, 12, 29).isocalendar() == (2004, 1, 1)`` and ``date(2004, 1, 4)."
"isocalendar() == (2004, 1, 7)``."
msgstr ""

#: ../Doc/library/datetime.rst:584
msgid ""
"Return a string representing the date in ISO 8601 format, 'YYYY-MM-DD'.  For "
"example, ``date(2002, 12, 4).isoformat() == '2002-12-04'``."
msgstr ""

#: ../Doc/library/datetime.rst:590
msgid "For a date *d*, ``str(d)`` is equivalent to ``d.isoformat()``."
msgstr "Pour une date *d*, ``str(d)`` est équivalent à ``d.isoformat()``."

#: ../Doc/library/datetime.rst:595
msgid ""
"Return a string representing the date, for example ``date(2002, 12, 4)."
"ctime() == 'Wed Dec 4 00:00:00 2002'``. ``d.ctime()`` is equivalent to "
"``time.ctime(time.mktime(d.timetuple()))`` on platforms where the native C :"
"c:func:`ctime` function (which :func:`time.ctime` invokes, but which :meth:"
"`date.ctime` does not invoke) conforms to the C standard."
msgstr ""

#: ../Doc/library/datetime.rst:604
msgid ""
"Return a string representing the date, controlled by an explicit format "
"string. Format codes referring to hours, minutes or seconds will see 0 "
"values. For a complete list of formatting directives, see :ref:`strftime-"
"strptime-behavior`."
msgstr ""

#: ../Doc/library/datetime.rst:612
msgid ""
"Same as :meth:`.date.strftime`. This makes it possible to specify a format "
"string for a :class:`.date` object in :ref:`formatted string literals <f-"
"strings>` and when using :meth:`str.format`. For a complete list of "
"formatting directives, see :ref:`strftime-strptime-behavior`."
msgstr ""

#: ../Doc/library/datetime.rst:619
msgid "Example of counting days to an event::"
msgstr "Exemple de décompte des jours avant un évènement :"

#: ../Doc/library/datetime.rst:637
msgid "Example of working with :class:`date`:"
msgstr "Exemple d'utilisation de la classe :class:`date` :"

#: ../Doc/library/datetime.rst:676
msgid ":class:`.datetime` Objects"
msgstr "Objets :class:`.datetime`"

#: ../Doc/library/datetime.rst:678
msgid ""
"A :class:`.datetime` object is a single object containing all the "
"information from a :class:`date` object and a :class:`.time` object.  Like "
"a :class:`date` object, :class:`.datetime` assumes the current Gregorian "
"calendar extended in both directions; like a time object, :class:`.datetime` "
"assumes there are exactly 3600\\*24 seconds in every day."
msgstr ""
"Un objet :class:`.datetime` est un objet comportant toutes les informations "
"d'un objet :class:`date` et d'un objet :class:`.time`. Comme un objet :class:"
"`date`, un objet :class:`.datetime` utilise l'actuel calendrier Grégorien "
"étendu vers le passé et le futur ; comme un objet :class:`.time`, un objet :"
"class:`.datetime` suppose qu'il y a exactement 3600\\*24 secondes chaque "
"jour."

#: ../Doc/library/datetime.rst:684
msgid "Constructor:"
msgstr "Constructeur :"

#: ../Doc/library/datetime.rst:688
msgid ""
"The year, month and day arguments are required.  *tzinfo* may be ``None``, "
"or an instance of a :class:`tzinfo` subclass.  The remaining arguments may "
"be integers, in the following ranges:"
msgstr ""

#: ../Doc/library/datetime.rst:692
msgid "``MINYEAR <= year <= MAXYEAR``,"
msgstr ""

#: ../Doc/library/datetime.rst:693
msgid "``1 <= month <= 12``,"
msgstr ""

#: ../Doc/library/datetime.rst:694
msgid "``1 <= day <= number of days in the given month and year``,"
msgstr ""

#: ../Doc/library/datetime.rst:695 ../Doc/library/datetime.rst:1383
msgid "``0 <= hour < 24``,"
msgstr ""

#: ../Doc/library/datetime.rst:696 ../Doc/library/datetime.rst:1384
msgid "``0 <= minute < 60``,"
msgstr ""

#: ../Doc/library/datetime.rst:697 ../Doc/library/datetime.rst:1385
msgid "``0 <= second < 60``,"
msgstr ""

#: ../Doc/library/datetime.rst:698 ../Doc/library/datetime.rst:1386
msgid "``0 <= microsecond < 1000000``,"
msgstr ""

#: ../Doc/library/datetime.rst:699 ../Doc/library/datetime.rst:1387
msgid "``fold in [0, 1]``."
msgstr ""

#: ../Doc/library/datetime.rst:703 ../Doc/library/datetime.rst:1018
#: ../Doc/library/datetime.rst:1494
msgid "Added the ``fold`` argument."
msgstr ""

#: ../Doc/library/datetime.rst:710
msgid ""
"Return the current local datetime, with :attr:`.tzinfo` ``None``. This is "
"equivalent to ``datetime.fromtimestamp(time.time())``. See also :meth:"
"`now`, :meth:`fromtimestamp`."
msgstr ""

#: ../Doc/library/datetime.rst:717
msgid ""
"Return the current local date and time.  If optional argument *tz* is "
"``None`` or not specified, this is like :meth:`today`, but, if possible, "
"supplies more precision than can be gotten from going through a :func:`time."
"time` timestamp (for example, this may be possible on platforms supplying "
"the C :c:func:`gettimeofday` function)."
msgstr ""

#: ../Doc/library/datetime.rst:723
msgid ""
"If *tz* is not ``None``, it must be an instance of a :class:`tzinfo` "
"subclass, and the current date and time are converted to *tz*’s time zone.  "
"In this case the result is equivalent to ``tz.fromutc(datetime.utcnow()."
"replace(tzinfo=tz))``. See also :meth:`today`, :meth:`utcnow`."
msgstr ""

#: ../Doc/library/datetime.rst:731
msgid ""
"Return the current UTC date and time, with :attr:`.tzinfo` ``None``. This is "
"like :meth:`now`, but returns the current UTC date and time, as a naive :"
"class:`.datetime` object.  An aware current UTC datetime can be obtained by "
"calling ``datetime.now(timezone.utc)``.  See also :meth:`now`."
msgstr ""

#: ../Doc/library/datetime.rst:738
msgid ""
"Return the local date and time corresponding to the POSIX timestamp, such as "
"is returned by :func:`time.time`. If optional argument *tz* is ``None`` or "
"not specified, the timestamp is converted to the platform's local date and "
"time, and the returned :class:`.datetime` object is naive."
msgstr ""

#: ../Doc/library/datetime.rst:743
msgid ""
"If *tz* is not ``None``, it must be an instance of a :class:`tzinfo` "
"subclass, and the timestamp is converted to *tz*’s time zone.  In this case "
"the result is equivalent to ``tz.fromutc(datetime."
"utcfromtimestamp(timestamp).replace(tzinfo=tz))``."
msgstr ""

#: ../Doc/library/datetime.rst:748
msgid ""
":meth:`fromtimestamp` may raise :exc:`OverflowError`, if the timestamp is "
"out of the range of values supported by the platform C :c:func:`localtime` "
"or :c:func:`gmtime` functions, and :exc:`OSError` on :c:func:`localtime` or :"
"c:func:`gmtime` failure. It's common for this to be restricted to years in "
"1970 through 2038. Note that on non-POSIX systems that include leap seconds "
"in their notion of a timestamp, leap seconds are ignored by :meth:"
"`fromtimestamp`, and then it's possible to have two timestamps differing by "
"a second that yield identical :class:`.datetime` objects. See also :meth:"
"`utcfromtimestamp`."
msgstr ""

#: ../Doc/library/datetime.rst:758
msgid ""
"Raise :exc:`OverflowError` instead of :exc:`ValueError` if the timestamp is "
"out of the range of values supported by the platform C :c:func:`localtime` "
"or :c:func:`gmtime` functions. Raise :exc:`OSError` instead of :exc:"
"`ValueError` on :c:func:`localtime` or :c:func:`gmtime` failure."
msgstr ""

#: ../Doc/library/datetime.rst:765
msgid ":meth:`fromtimestamp` may return instances with :attr:`.fold` set to 1."
msgstr ""

#: ../Doc/library/datetime.rst:770
msgid ""
"Return the UTC :class:`.datetime` corresponding to the POSIX timestamp, "
"with :attr:`.tzinfo` ``None``. This may raise :exc:`OverflowError`, if the "
"timestamp is out of the range of values supported by the platform C :c:func:"
"`gmtime` function, and :exc:`OSError` on :c:func:`gmtime` failure. It's "
"common for this to be restricted to years in 1970 through 2038."
msgstr ""

#: ../Doc/library/datetime.rst:776
msgid "To get an aware :class:`.datetime` object, call :meth:`fromtimestamp`::"
msgstr ""

#: ../Doc/library/datetime.rst:780
msgid ""
"On the POSIX compliant platforms, it is equivalent to the following "
"expression::"
msgstr ""

#: ../Doc/library/datetime.rst:785
msgid ""
"except the latter formula always supports the full years range: between :"
"const:`MINYEAR` and :const:`MAXYEAR` inclusive."
msgstr ""

#: ../Doc/library/datetime.rst:788
msgid ""
"Raise :exc:`OverflowError` instead of :exc:`ValueError` if the timestamp is "
"out of the range of values supported by the platform C :c:func:`gmtime` "
"function. Raise :exc:`OSError` instead of :exc:`ValueError` on :c:func:"
"`gmtime` failure."
msgstr ""

#: ../Doc/library/datetime.rst:797
msgid ""
"Return the :class:`.datetime` corresponding to the proleptic Gregorian "
"ordinal, where January 1 of year 1 has ordinal 1. :exc:`ValueError` is "
"raised unless ``1 <= ordinal <= datetime.max.toordinal()``.  The hour, "
"minute, second and microsecond of the result are all 0, and :attr:`.tzinfo` "
"is ``None``."
msgstr ""

#: ../Doc/library/datetime.rst:805
msgid ""
"Return a new :class:`.datetime` object whose date components are equal to "
"the given :class:`date` object's, and whose time components are equal to the "
"given :class:`.time` object's.  If the *tzinfo* argument is provided, its "
"value is used to set the :attr:`.tzinfo` attribute of the result, otherwise "
"the :attr:`~.time.tzinfo` attribute of the *time* argument is used."
msgstr ""

#: ../Doc/library/datetime.rst:812
msgid ""
"For any :class:`.datetime` object *d*, ``d == datetime.combine(d.date(), d."
"time(), d.tzinfo)``.  If date is a :class:`.datetime` object, its time "
"components and :attr:`.tzinfo` attributes are ignored."
msgstr ""

#: ../Doc/library/datetime.rst:817
msgid "Added the *tzinfo* argument."
msgstr ""

#: ../Doc/library/datetime.rst:823
msgid ""
"Return a :class:`.datetime` corresponding to *date_string*, parsed according "
"to *format*.  This is equivalent to ``datetime(*(time.strptime(date_string, "
"format)[0:6]))``. :exc:`ValueError` is raised if the date_string and format "
"can't be parsed by :func:`time.strptime` or if it returns a value which "
"isn't a time tuple. For a complete list of formatting directives, see :ref:"
"`strftime-strptime-behavior`."
msgstr ""

#: ../Doc/library/datetime.rst:836
msgid ""
"The earliest representable :class:`.datetime`, ``datetime(MINYEAR, 1, 1, "
"tzinfo=None)``."
msgstr ""

#: ../Doc/library/datetime.rst:842
msgid ""
"The latest representable :class:`.datetime`, ``datetime(MAXYEAR, 12, 31, 23, "
"59, 59, 999999, tzinfo=None)``."
msgstr ""

#: ../Doc/library/datetime.rst:848
msgid ""
"The smallest possible difference between non-equal :class:`.datetime` "
"objects, ``timedelta(microseconds=1)``."
msgstr ""

#: ../Doc/library/datetime.rst:871 ../Doc/library/datetime.rst:1416
msgid "In ``range(24)``."
msgstr "Dans ``range(24)``."

#: ../Doc/library/datetime.rst:876 ../Doc/library/datetime.rst:881
#: ../Doc/library/datetime.rst:1421 ../Doc/library/datetime.rst:1426
msgid "In ``range(60)``."
msgstr "Dans ``range(60)``."

#: ../Doc/library/datetime.rst:886 ../Doc/library/datetime.rst:1431
msgid "In ``range(1000000)``."
msgstr "Dans ``range(1000000)``."

#: ../Doc/library/datetime.rst:891
msgid ""
"The object passed as the *tzinfo* argument to the :class:`.datetime` "
"constructor, or ``None`` if none was passed."
msgstr ""
"L'objet passé en tant que paramètre *tzinfo* du constructeur de la classe "
"class:`.datetime` ou ``None`` si aucun n'a été donné."

#: ../Doc/library/datetime.rst:897 ../Doc/library/datetime.rst:1442
msgid ""
"In ``[0, 1]``.  Used to disambiguate wall times during a repeated interval.  "
"(A repeated interval occurs when clocks are rolled back at the end of "
"daylight saving time or when the UTC offset for the current zone is "
"decreased for political reasons.) The value 0 (1) represents the earlier "
"(later) of the two moments with the same wall time representation."
msgstr ""

#: ../Doc/library/datetime.rst:910
msgid "``datetime2 = datetime1 + timedelta``"
msgstr "``datetime2 = datetime1 + timedelta``"

#: ../Doc/library/datetime.rst:910 ../Doc/library/datetime.rst:1968
#: ../Doc/library/datetime.rst:1973 ../Doc/library/datetime.rst:1985
#: ../Doc/library/datetime.rst:1990 ../Doc/library/datetime.rst:2049
#: ../Doc/library/datetime.rst:2054 ../Doc/library/datetime.rst:2058
msgid "\\(1)"
msgstr "\\(1)"

#: ../Doc/library/datetime.rst:912
msgid "``datetime2 = datetime1 - timedelta``"
msgstr "``datetime2 = datetime1 - timedelta``"

#: ../Doc/library/datetime.rst:912 ../Doc/library/datetime.rst:2001
msgid "\\(2)"
msgstr "\\(2)"

#: ../Doc/library/datetime.rst:914
msgid "``timedelta = datetime1 - datetime2``"
msgstr "``timedelta = datetime1 - datetime2``"

#: ../Doc/library/datetime.rst:916
msgid "``datetime1 < datetime2``"
msgstr "``datetime1 < datetime2``"

#: ../Doc/library/datetime.rst:916
msgid "Compares :class:`.datetime` to :class:`.datetime`. (4)"
msgstr "Compare :class:`.datetime` à :class:`.datetime`. (4)"

#: ../Doc/library/datetime.rst:921
msgid ""
"datetime2 is a duration of timedelta removed from datetime1, moving forward "
"in time if ``timedelta.days`` > 0, or backward if ``timedelta.days`` < 0.  "
"The result has the same :attr:`~.datetime.tzinfo` attribute as the input "
"datetime, and datetime2 - datetime1 == timedelta after. :exc:`OverflowError` "
"is raised if datetime2.year would be smaller than :const:`MINYEAR` or larger "
"than :const:`MAXYEAR`. Note that no time zone adjustments are done even if "
"the input is an aware object."
msgstr ""

#: ../Doc/library/datetime.rst:930
msgid ""
"Computes the datetime2 such that datetime2 + timedelta == datetime1. As for "
"addition, the result has the same :attr:`~.datetime.tzinfo` attribute as the "
"input datetime, and no time zone adjustments are done even if the input is "
"aware. This isn't quite equivalent to datetime1 + (-timedelta), because -"
"timedelta in isolation can overflow in cases where datetime1 - timedelta "
"does not."
msgstr ""

#: ../Doc/library/datetime.rst:937
msgid ""
"Subtraction of a :class:`.datetime` from a :class:`.datetime` is defined "
"only if both operands are naive, or if both are aware.  If one is aware and "
"the other is naive, :exc:`TypeError` is raised."
msgstr ""

#: ../Doc/library/datetime.rst:941
msgid ""
"If both are naive, or both are aware and have the same :attr:`~.datetime."
"tzinfo` attribute, the :attr:`~.datetime.tzinfo` attributes are ignored, and "
"the result is a :class:`timedelta` object *t* such that ``datetime2 + t == "
"datetime1``.  No time zone adjustments are done in this case."
msgstr ""

#: ../Doc/library/datetime.rst:946
msgid ""
"If both are aware and have different :attr:`~.datetime.tzinfo` attributes, "
"``a-b`` acts as if *a* and *b* were first converted to naive UTC datetimes "
"first.  The result is ``(a.replace(tzinfo=None) - a.utcoffset()) - (b."
"replace(tzinfo=None) - b.utcoffset())`` except that the implementation never "
"overflows."
msgstr ""

#: ../Doc/library/datetime.rst:952
msgid ""
"*datetime1* is considered less than *datetime2* when *datetime1* precedes "
"*datetime2* in time."
msgstr ""

#: ../Doc/library/datetime.rst:955
msgid ""
"If one comparand is naive and the other is aware, :exc:`TypeError` is raised "
"if an order comparison is attempted.  For equality comparisons, naive "
"instances are never equal to aware instances."
msgstr ""

#: ../Doc/library/datetime.rst:959
msgid ""
"If both comparands are aware, and have the same :attr:`~.datetime.tzinfo` "
"attribute, the common :attr:`~.datetime.tzinfo` attribute is ignored and the "
"base datetimes are compared.  If both comparands are aware and have "
"different :attr:`~.datetime.tzinfo` attributes, the comparands are first "
"adjusted by subtracting their UTC offsets (obtained from ``self."
"utcoffset()``)."
msgstr ""

#: ../Doc/library/datetime.rst:965
msgid ""
"Equality comparisons between naive and aware :class:`.datetime` instances "
"don't raise :exc:`TypeError`."
msgstr ""

#: ../Doc/library/datetime.rst:971
msgid ""
"In order to stop comparison from falling back to the default scheme of "
"comparing object addresses, datetime comparison normally raises :exc:"
"`TypeError` if the other comparand isn't also a :class:`.datetime` object.  "
"However, ``NotImplemented`` is returned instead if the other comparand has "
"a :meth:`timetuple` attribute.  This hook gives other kinds of date objects "
"a chance at implementing mixed-type comparison.  If not, when a :class:`."
"datetime` object is compared to an object of a different type, :exc:"
"`TypeError` is raised unless the comparison is ``==`` or ``!=``.  The latter "
"cases return :const:`False` or :const:`True`, respectively."
msgstr ""

#: ../Doc/library/datetime.rst:981
msgid ""
":class:`.datetime` objects can be used as dictionary keys. In Boolean "
"contexts, all :class:`.datetime` objects are considered to be true."
msgstr ""

#: ../Doc/library/datetime.rst:988
msgid "Return :class:`date` object with same year, month and day."
msgstr ""

#: ../Doc/library/datetime.rst:993
msgid ""
"Return :class:`.time` object with same hour, minute, second, microsecond and "
"fold. :attr:`.tzinfo` is ``None``.  See also method :meth:`timetz`."
msgstr ""

#: ../Doc/library/datetime.rst:996 ../Doc/library/datetime.rst:1005
msgid "The fold value is copied to the returned :class:`.time` object."
msgstr ""

#: ../Doc/library/datetime.rst:1002
msgid ""
"Return :class:`.time` object with same hour, minute, second, microsecond, "
"fold, and tzinfo attributes.  See also method :meth:`time`."
msgstr ""

#: ../Doc/library/datetime.rst:1013
msgid ""
"Return a datetime with the same attributes, except for those attributes "
"given new values by whichever keyword arguments are specified.  Note that "
"``tzinfo=None`` can be specified to create a naive datetime from an aware "
"datetime with no conversion of date and time data."
msgstr ""

#: ../Doc/library/datetime.rst:1024
msgid ""
"Return a :class:`.datetime` object with new :attr:`.tzinfo` attribute *tz*, "
"adjusting the date and time data so the result is the same UTC time as "
"*self*, but in *tz*'s local time."
msgstr ""

#: ../Doc/library/datetime.rst:1028
msgid ""
"If provided, *tz* must be an instance of a :class:`tzinfo` subclass, and "
"its :meth:`utcoffset` and :meth:`dst` methods must not return ``None``.  If "
"*self* is naive (``self.tzinfo is None``), it is presumed to represent time "
"in the system timezone."
msgstr ""

#: ../Doc/library/datetime.rst:1033
msgid ""
"If called without arguments (or with ``tz=None``) the system local timezone "
"is assumed for the target timezone.  The ``.tzinfo`` attribute of the "
"converted datetime instance will be set to an instance of :class:`timezone` "
"with the zone name and offset obtained from the OS."
msgstr ""

#: ../Doc/library/datetime.rst:1038
msgid ""
"If ``self.tzinfo`` is *tz*, ``self.astimezone(tz)`` is equal to *self*:  no "
"adjustment of date or time data is performed. Else the result is local time "
"in the timezone *tz*, representing the same UTC time as *self*:  after "
"``astz = dt.astimezone(tz)``, ``astz - astz.utcoffset()`` will have the same "
"date and time data as ``dt - dt.utcoffset()``."
msgstr ""

#: ../Doc/library/datetime.rst:1044
msgid ""
"If you merely want to attach a time zone object *tz* to a datetime *dt* "
"without adjustment of date and time data, use ``dt.replace(tzinfo=tz)``.  If "
"you merely want to remove the time zone object from an aware datetime *dt* "
"without conversion of date and time data, use ``dt.replace(tzinfo=None)``."
msgstr ""

#: ../Doc/library/datetime.rst:1049
msgid ""
"Note that the default :meth:`tzinfo.fromutc` method can be overridden in a :"
"class:`tzinfo` subclass to affect the result returned by :meth:`astimezone`. "
"Ignoring error cases, :meth:`astimezone` acts like::"
msgstr ""

#: ../Doc/library/datetime.rst:1061
msgid "*tz* now can be omitted."
msgstr ""

#: ../Doc/library/datetime.rst:1064
msgid ""
"The :meth:`astimezone` method can now be called on naive instances that are "
"presumed to represent system local time."
msgstr ""

#: ../Doc/library/datetime.rst:1071
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"utcoffset(self)``, and raises an exception if the latter doesn't return "
"``None``, or a :class:`timedelta` object representing a whole number of "
"minutes with magnitude less than one day."
msgstr ""

#: ../Doc/library/datetime.rst:1079
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"dst(self)``, and raises an exception if the latter doesn't return ``None``, "
"or a :class:`timedelta` object representing a whole number of minutes with "
"magnitude less than one day."
msgstr ""

#: ../Doc/library/datetime.rst:1087
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"tzname(self)``, raises an exception if the latter doesn't return ``None`` or "
"a string object,"
msgstr ""

#: ../Doc/library/datetime.rst:1094
msgid ""
"Return a :class:`time.struct_time` such as returned by :func:`time."
"localtime`. ``d.timetuple()`` is equivalent to ``time.struct_time((d.year, d."
"month, d.day, d.hour, d.minute, d.second, d.weekday(), yday, dst))``, where "
"``yday = d.toordinal() - date(d.year, 1, 1).toordinal() + 1`` is the day "
"number within the current year starting with ``1`` for January 1st. The :"
"attr:`tm_isdst` flag of the result is set according to the :meth:`dst` "
"method: :attr:`.tzinfo` is ``None`` or :meth:`dst` returns ``None``, :attr:"
"`tm_isdst` is set to ``-1``; else if :meth:`dst` returns a non-zero value, :"
"attr:`tm_isdst` is set to ``1``; else :attr:`tm_isdst` is set to ``0``."
msgstr ""

#: ../Doc/library/datetime.rst:1107
msgid ""
"If :class:`.datetime` instance *d* is naive, this is the same as ``d."
"timetuple()`` except that :attr:`tm_isdst` is forced to 0 regardless of what "
"``d.dst()`` returns.  DST is never in effect for a UTC time."
msgstr ""

#: ../Doc/library/datetime.rst:1111
msgid ""
"If *d* is aware, *d* is normalized to UTC time, by subtracting ``d."
"utcoffset()``, and a :class:`time.struct_time` for the normalized time is "
"returned.  :attr:`tm_isdst` is forced to 0. Note that an :exc:"
"`OverflowError` may be raised if *d*.year was ``MINYEAR`` or ``MAXYEAR`` and "
"UTC adjustment spills over a year boundary."
msgstr ""

#: ../Doc/library/datetime.rst:1121
msgid ""
"Return the proleptic Gregorian ordinal of the date.  The same as ``self."
"date().toordinal()``."
msgstr ""

#: ../Doc/library/datetime.rst:1126
msgid ""
"Return POSIX timestamp corresponding to the :class:`.datetime` instance.  "
"The return value is a :class:`float` similar to that returned by :func:`time."
"time`."
msgstr ""

#: ../Doc/library/datetime.rst:1130
msgid ""
"Naive :class:`.datetime` instances are assumed to represent local time and "
"this method relies on the platform C :c:func:`mktime` function to perform "
"the conversion.  Since :class:`.datetime` supports wider range of values "
"than :c:func:`mktime` on many platforms, this method may raise :exc:"
"`OverflowError` for times far in the past or far in the future."
msgstr ""

#: ../Doc/library/datetime.rst:1137
msgid ""
"For aware :class:`.datetime` instances, the return value is computed as::"
msgstr ""

#: ../Doc/library/datetime.rst:1144
msgid ""
"The :meth:`timestamp` method uses the :attr:`.fold` attribute to "
"disambiguate the times during a repeated interval."
msgstr ""

#: ../Doc/library/datetime.rst:1150
msgid ""
"There is no method to obtain the POSIX timestamp directly from a naive :"
"class:`.datetime` instance representing UTC time.  If your application uses "
"this convention and your system timezone is not set to UTC, you can obtain "
"the POSIX timestamp by supplying ``tzinfo=timezone.utc``::"
msgstr ""

#: ../Doc/library/datetime.rst:1158
msgid "or by calculating the timestamp directly::"
msgstr ""

#: ../Doc/library/datetime.rst:1164
msgid ""
"Return the day of the week as an integer, where Monday is 0 and Sunday is 6. "
"The same as ``self.date().weekday()``. See also :meth:`isoweekday`."
msgstr ""

#: ../Doc/library/datetime.rst:1170
msgid ""
"Return the day of the week as an integer, where Monday is 1 and Sunday is 7. "
"The same as ``self.date().isoweekday()``. See also :meth:`weekday`, :meth:"
"`isocalendar`."
msgstr ""

#: ../Doc/library/datetime.rst:1177
msgid ""
"Return a 3-tuple, (ISO year, ISO week number, ISO weekday).  The same as "
"``self.date().isocalendar()``."
msgstr ""

#: ../Doc/library/datetime.rst:1183
msgid ""
"Return a string representing the date and time in ISO 8601 format, YYYY-MM-"
"DDTHH:MM:SS.mmmmmm or, if :attr:`microsecond` is 0, YYYY-MM-DDTHH:MM:SS"
msgstr ""

#: ../Doc/library/datetime.rst:1187
msgid ""
"If :meth:`utcoffset` does not return ``None``, a 6-character string is "
"appended, giving the UTC offset in (signed) hours and minutes: YYYY-MM-DDTHH:"
"MM:SS.mmmmmm+HH:MM or, if :attr:`microsecond` is 0 YYYY-MM-DDTHH:MM:SS+HH:MM"
msgstr ""

#: ../Doc/library/datetime.rst:1192
msgid ""
"The optional argument *sep* (default ``'T'``) is a one-character separator, "
"placed between the date and time portions of the result.  For example,"
msgstr ""

#: ../Doc/library/datetime.rst:1202 ../Doc/library/datetime.rst:1505
msgid ""
"The optional argument *timespec* specifies the number of additional "
"components of the time to include (the default is ``'auto'``). It can be one "
"of the following:"
msgstr ""

#: ../Doc/library/datetime.rst:1206 ../Doc/library/datetime.rst:1509
msgid ""
"``'auto'``: Same as ``'seconds'`` if :attr:`microsecond` is 0, same as "
"``'microseconds'`` otherwise."
msgstr ""

#: ../Doc/library/datetime.rst:1208 ../Doc/library/datetime.rst:1511
msgid "``'hours'``: Include the :attr:`hour` in the two-digit HH format."
msgstr ""

#: ../Doc/library/datetime.rst:1209 ../Doc/library/datetime.rst:1512
msgid "``'minutes'``: Include :attr:`hour` and :attr:`minute` in HH:MM format."
msgstr ""

#: ../Doc/library/datetime.rst:1210 ../Doc/library/datetime.rst:1513
msgid ""
"``'seconds'``: Include :attr:`hour`, :attr:`minute`, and :attr:`second` in "
"HH:MM:SS format."
msgstr ""

#: ../Doc/library/datetime.rst:1212 ../Doc/library/datetime.rst:1515
msgid ""
"``'milliseconds'``: Include full time, but truncate fractional second part "
"to milliseconds. HH:MM:SS.sss format."
msgstr ""

#: ../Doc/library/datetime.rst:1214 ../Doc/library/datetime.rst:1517
msgid "``'microseconds'``: Include full time in HH:MM:SS.mmmmmm format."
msgstr ""

#: ../Doc/library/datetime.rst:1218 ../Doc/library/datetime.rst:1521
msgid "Excluded time components are truncated, not rounded."
msgstr ""

#: ../Doc/library/datetime.rst:1220 ../Doc/library/datetime.rst:1523
msgid ":exc:`ValueError` will be raised on an invalid *timespec* argument."
msgstr ""

#: ../Doc/library/datetime.rst:1230 ../Doc/library/datetime.rst:1535
msgid "Added the *timespec* argument."
msgstr ""

#: ../Doc/library/datetime.rst:1236
msgid ""
"For a :class:`.datetime` instance *d*, ``str(d)`` is equivalent to ``d."
"isoformat(' ')``."
msgstr ""

#: ../Doc/library/datetime.rst:1242
msgid ""
"Return a string representing the date and time, for example ``datetime(2002, "
"12, 4, 20, 30, 40).ctime() == 'Wed Dec  4 20:30:40 2002'``. ``d.ctime()`` is "
"equivalent to ``time.ctime(time.mktime(d.timetuple()))`` on platforms where "
"the native C :c:func:`ctime` function (which :func:`time.ctime` invokes, but "
"which :meth:`datetime.ctime` does not invoke) conforms to the C standard."
msgstr ""

#: ../Doc/library/datetime.rst:1251
msgid ""
"Return a string representing the date and time, controlled by an explicit "
"format string.  For a complete list of formatting directives, see :ref:"
"`strftime-strptime-behavior`."
msgstr ""

#: ../Doc/library/datetime.rst:1258
msgid ""
"Same as :meth:`.datetime.strftime`.  This makes it possible to specify a "
"format string for a :class:`.datetime` object in :ref:`formatted string "
"literals <f-strings>` and when using :meth:`str.format`.  For a complete "
"list of formatting directives, see :ref:`strftime-strptime-behavior`."
msgstr ""

#: ../Doc/library/datetime.rst:1265
msgid "Examples of working with datetime objects:"
msgstr ""

#: ../Doc/library/datetime.rst:1312
msgid "Using datetime with tzinfo:"
msgstr "Utilisation de :class:`.datetime` avec *tzinfo* :"

#: ../Doc/library/datetime.rst:1372
msgid ":class:`time` Objects"
msgstr ""

#: ../Doc/library/datetime.rst:1374
msgid ""
"A time object represents a (local) time of day, independent of any "
"particular day, and subject to adjustment via a :class:`tzinfo` object."
msgstr ""

#: ../Doc/library/datetime.rst:1379
msgid ""
"All arguments are optional.  *tzinfo* may be ``None``, or an instance of a :"
"class:`tzinfo` subclass.  The remaining arguments may be integers, in the "
"following ranges:"
msgstr ""

#: ../Doc/library/datetime.rst:1389
msgid ""
"If an argument outside those ranges is given, :exc:`ValueError` is raised.  "
"All default to ``0`` except *tzinfo*, which defaults to :const:`None`."
msgstr ""

#: ../Doc/library/datetime.rst:1397
msgid "The earliest representable :class:`.time`, ``time(0, 0, 0, 0)``."
msgstr ""

#: ../Doc/library/datetime.rst:1402
msgid "The latest representable :class:`.time`, ``time(23, 59, 59, 999999)``."
msgstr ""

#: ../Doc/library/datetime.rst:1407
msgid ""
"The smallest possible difference between non-equal :class:`.time` objects, "
"``timedelta(microseconds=1)``, although note that arithmetic on :class:`."
"time` objects is not supported."
msgstr ""

#: ../Doc/library/datetime.rst:1436
msgid ""
"The object passed as the tzinfo argument to the :class:`.time` constructor, "
"or ``None`` if none was passed."
msgstr ""

#: ../Doc/library/datetime.rst:1453
msgid ""
"comparison of :class:`.time` to :class:`.time`, where *a* is considered less "
"than *b* when *a* precedes *b* in time.  If one comparand is naive and the "
"other is aware, :exc:`TypeError` is raised if an order comparison is "
"attempted. For equality comparisons, naive instances are never equal to "
"aware instances."
msgstr ""

#: ../Doc/library/datetime.rst:1458
msgid ""
"If both comparands are aware, and have the same :attr:`~time.tzinfo` "
"attribute, the common :attr:`~time.tzinfo` attribute is ignored and the base "
"times are compared.  If both comparands are aware and have different :attr:"
"`~time.tzinfo` attributes, the comparands are first adjusted by subtracting "
"their UTC offsets (obtained from ``self.utcoffset()``). In order to stop "
"mixed-type comparisons from falling back to the default comparison by object "
"address, when a :class:`.time` object is compared to an object of a "
"different type, :exc:`TypeError` is raised unless the comparison is ``==`` "
"or ``!=``.  The latter cases return :const:`False` or :const:`True`, "
"respectively."
msgstr ""

#: ../Doc/library/datetime.rst:1468
msgid ""
"Equality comparisons between naive and aware :class:`time` instances don't "
"raise :exc:`TypeError`."
msgstr ""

#: ../Doc/library/datetime.rst:1472
msgid "hash, use as dict key"
msgstr ""

#: ../Doc/library/datetime.rst:1474
msgid "efficient pickling"
msgstr ""

#: ../Doc/library/datetime.rst:1476
msgid ""
"In boolean contexts, a :class:`.time` object is always considered to be true."
msgstr ""

#: ../Doc/library/datetime.rst:1478
msgid ""
"Before Python 3.5, a :class:`.time` object was considered to be false if it "
"represented midnight in UTC.  This behavior was considered obscure and error-"
"prone and has been removed in Python 3.5.  See :issue:`13936` for full "
"details."
msgstr ""

#: ../Doc/library/datetime.rst:1489
msgid ""
"Return a :class:`.time` with the same value, except for those attributes "
"given new values by whichever keyword arguments are specified.  Note that "
"``tzinfo=None`` can be specified to create a naive :class:`.time` from an "
"aware :class:`.time`, without conversion of the time data."
msgstr ""

#: ../Doc/library/datetime.rst:1500
msgid ""
"Return a string representing the time in ISO 8601 format, HH:MM:SS.mmmmmm "
"or, if :attr:`microsecond` is 0, HH:MM:SS If :meth:`utcoffset` does not "
"return ``None``, a 6-character string is appended, giving the UTC offset in "
"(signed) hours and minutes: HH:MM:SS.mmmmmm+HH:MM or, if self.microsecond is "
"0, HH:MM:SS+HH:MM"
msgstr ""

#: ../Doc/library/datetime.rst:1541
msgid "For a time *t*, ``str(t)`` is equivalent to ``t.isoformat()``."
msgstr ""

#: ../Doc/library/datetime.rst:1546
msgid ""
"Return a string representing the time, controlled by an explicit format "
"string.  For a complete list of formatting directives, see :ref:`strftime-"
"strptime-behavior`."
msgstr ""

#: ../Doc/library/datetime.rst:1553
msgid ""
"Same as :meth:`.time.strftime`. This makes it possible to specify a format "
"string for a :class:`.time` object in :ref:`formatted string literals <f-"
"strings>` and when using :meth:`str.format`.  For a complete list of "
"formatting directives, see :ref:`strftime-strptime-behavior`."
msgstr ""

#: ../Doc/library/datetime.rst:1562
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"utcoffset(None)``, and raises an exception if the latter doesn't return "
"``None`` or a :class:`timedelta` object representing a whole number of "
"minutes with magnitude less than one day."
msgstr ""

#: ../Doc/library/datetime.rst:1570
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"dst(None)``, and raises an exception if the latter doesn't return ``None``, "
"or a :class:`timedelta` object representing a whole number of minutes with "
"magnitude less than one day."
msgstr ""

#: ../Doc/library/datetime.rst:1578
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"tzname(None)``, or raises an exception if the latter doesn't return ``None`` "
"or a string object."
msgstr ""

#: ../Doc/library/datetime.rst:1583
msgid "Example:"
msgstr "Exemple :"

#: ../Doc/library/datetime.rst:1613
msgid ":class:`tzinfo` Objects"
msgstr "Objets :class:`tzinfo`"

#: ../Doc/library/datetime.rst:1617
msgid ""
"This is an abstract base class, meaning that this class should not be "
"instantiated directly.  You need to derive a concrete subclass, and (at "
"least) supply implementations of the standard :class:`tzinfo` methods needed "
"by the :class:`.datetime` methods you use.  The :mod:`datetime` module "
"supplies a simple concrete subclass of :class:`tzinfo`, :class:`timezone`, "
"which can represent timezones with fixed offset from UTC such as UTC itself "
"or North American EST and EDT."
msgstr ""

#: ../Doc/library/datetime.rst:1625
msgid ""
"An instance of (a concrete subclass of) :class:`tzinfo` can be passed to the "
"constructors for :class:`.datetime` and :class:`.time` objects. The latter "
"objects view their attributes as being in local time, and the :class:"
"`tzinfo` object supports methods revealing offset of local time from UTC, "
"the name of the time zone, and DST offset, all relative to a date or time "
"object passed to them."
msgstr ""

#: ../Doc/library/datetime.rst:1631
msgid ""
"Special requirement for pickling:  A :class:`tzinfo` subclass must have an :"
"meth:`__init__` method that can be called with no arguments, else it can be "
"pickled but possibly not unpickled again.  This is a technical requirement "
"that may be relaxed in the future."
msgstr ""

#: ../Doc/library/datetime.rst:1636
msgid ""
"A concrete subclass of :class:`tzinfo` may need to implement the following "
"methods.  Exactly which methods are needed depends on the uses made of "
"aware :mod:`datetime` objects.  If in doubt, simply implement all of them."
msgstr ""

#: ../Doc/library/datetime.rst:1643
msgid ""
"Return offset of local time from UTC, in minutes east of UTC.  If local time "
"is west of UTC, this should be negative.  Note that this is intended to be "
"the total offset from UTC; for example, if a :class:`tzinfo` object "
"represents both time zone and DST adjustments, :meth:`utcoffset` should "
"return their sum.  If the UTC offset isn't known, return ``None``.  Else the "
"value returned must be a :class:`timedelta` object specifying a whole number "
"of minutes in the range -1439 to 1439 inclusive (1440 = 24\\*60; the "
"magnitude of the offset must be less than one day).  Most implementations "
"of :meth:`utcoffset` will probably look like one of these two::"
msgstr ""

#: ../Doc/library/datetime.rst:1656
msgid ""
"If :meth:`utcoffset` does not return ``None``, :meth:`dst` should not return "
"``None`` either."
msgstr ""

#: ../Doc/library/datetime.rst:1659
msgid ""
"The default implementation of :meth:`utcoffset` raises :exc:"
"`NotImplementedError`."
msgstr ""

#: ../Doc/library/datetime.rst:1665
msgid ""
"Return the daylight saving time (DST) adjustment, in minutes east of UTC, or "
"``None`` if DST information isn't known.  Return ``timedelta(0)`` if DST is "
"not in effect. If DST is in effect, return the offset as a :class:"
"`timedelta` object (see :meth:`utcoffset` for details). Note that DST "
"offset, if applicable, has already been added to the UTC offset returned by :"
"meth:`utcoffset`, so there's no need to consult :meth:`dst` unless you're "
"interested in obtaining DST info separately.  For example, :meth:`datetime."
"timetuple` calls its :attr:`~.datetime.tzinfo` attribute's :meth:`dst` "
"method to determine how the :attr:`tm_isdst` flag should be set, and :meth:"
"`tzinfo.fromutc` calls :meth:`dst` to account for DST changes when crossing "
"time zones."
msgstr ""

#: ../Doc/library/datetime.rst:1676
msgid ""
"An instance *tz* of a :class:`tzinfo` subclass that models both standard and "
"daylight times must be consistent in this sense:"
msgstr ""

#: ../Doc/library/datetime.rst:1679
msgid "``tz.utcoffset(dt) - tz.dst(dt)``"
msgstr "``tz.utcoffset(dt) - tz.dst(dt)``"

#: ../Doc/library/datetime.rst:1681
msgid ""
"must return the same result for every :class:`.datetime` *dt* with ``dt."
"tzinfo == tz``  For sane :class:`tzinfo` subclasses, this expression yields "
"the time zone's \"standard offset\", which should not depend on the date or "
"the time, but only on geographic location.  The implementation of :meth:"
"`datetime.astimezone` relies on this, but cannot detect violations; it's the "
"programmer's responsibility to ensure it.  If a :class:`tzinfo` subclass "
"cannot guarantee this, it may be able to override the default implementation "
"of :meth:`tzinfo.fromutc` to work correctly with :meth:`astimezone` "
"regardless."
msgstr ""

#: ../Doc/library/datetime.rst:1690
msgid ""
"Most implementations of :meth:`dst` will probably look like one of these "
"two::"
msgstr ""

#: ../Doc/library/datetime.rst:1696
msgid "or ::"
msgstr "ou : ::"

#: ../Doc/library/datetime.rst:1708
msgid ""
"The default implementation of :meth:`dst` raises :exc:`NotImplementedError`."
msgstr ""

#: ../Doc/library/datetime.rst:1713
msgid ""
"Return the time zone name corresponding to the :class:`.datetime` object "
"*dt*, as a string. Nothing about string names is defined by the :mod:"
"`datetime` module, and there's no requirement that it mean anything in "
"particular.  For example, \"GMT\", \"UTC\", \"-500\", \"-5:00\", \"EDT\", "
"\"US/Eastern\", \"America/New York\" are all valid replies.  Return ``None`` "
"if a string name isn't known.  Note that this is a method rather than a "
"fixed string primarily because some :class:`tzinfo` subclasses will wish to "
"return different names depending on the specific value of *dt* passed, "
"especially if the :class:`tzinfo` class is accounting for daylight time."
msgstr ""

#: ../Doc/library/datetime.rst:1723
msgid ""
"The default implementation of :meth:`tzname` raises :exc:"
"`NotImplementedError`."
msgstr ""

#: ../Doc/library/datetime.rst:1726
msgid ""
"These methods are called by a :class:`.datetime` or :class:`.time` object, "
"in response to their methods of the same names.  A :class:`.datetime` object "
"passes itself as the argument, and a :class:`.time` object passes ``None`` "
"as the argument.  A :class:`tzinfo` subclass's methods should therefore be "
"prepared to accept a *dt* argument of ``None``, or of class :class:`."
"datetime`."
msgstr ""

#: ../Doc/library/datetime.rst:1732
msgid ""
"When ``None`` is passed, it's up to the class designer to decide the best "
"response.  For example, returning ``None`` is appropriate if the class "
"wishes to say that time objects don't participate in the :class:`tzinfo` "
"protocols.  It may be more useful for ``utcoffset(None)`` to return the "
"standard UTC offset, as there is no other convention for discovering the "
"standard offset."
msgstr ""

#: ../Doc/library/datetime.rst:1738
msgid ""
"When a :class:`.datetime` object is passed in response to a :class:`."
"datetime` method, ``dt.tzinfo`` is the same object as *self*.  :class:"
"`tzinfo` methods can rely on this, unless user code calls :class:`tzinfo` "
"methods directly.  The intent is that the :class:`tzinfo` methods interpret "
"*dt* as being in local time, and not need worry about objects in other "
"timezones."
msgstr ""

#: ../Doc/library/datetime.rst:1744
msgid ""
"There is one more :class:`tzinfo` method that a subclass may wish to "
"override:"
msgstr ""

#: ../Doc/library/datetime.rst:1749
msgid ""
"This is called from the default :class:`datetime.astimezone()` "
"implementation.  When called from that, ``dt.tzinfo`` is *self*, and *dt*'s "
"date and time data are to be viewed as expressing a UTC time.  The purpose "
"of :meth:`fromutc` is to adjust the date and time data, returning an "
"equivalent datetime in *self*'s local time."
msgstr ""

#: ../Doc/library/datetime.rst:1755
msgid ""
"Most :class:`tzinfo` subclasses should be able to inherit the default :meth:"
"`fromutc` implementation without problems.  It's strong enough to handle "
"fixed-offset time zones, and time zones accounting for both standard and "
"daylight time, and the latter even if the DST transition times differ in "
"different years.  An example of a time zone the default :meth:`fromutc` "
"implementation may not handle correctly in all cases is one where the "
"standard offset (from UTC) depends on the specific date and time passed, "
"which can happen for political reasons. The default implementations of :meth:"
"`astimezone` and :meth:`fromutc` may not produce the result you want if the "
"result is one of the hours straddling the moment the standard offset changes."
msgstr ""

#: ../Doc/library/datetime.rst:1766
msgid ""
"Skipping code for error cases, the default :meth:`fromutc` implementation "
"acts like::"
msgstr ""

#: ../Doc/library/datetime.rst:1784
msgid "Example :class:`tzinfo` classes:"
msgstr "Exemple de classes :class:`tzinfo` :"

#: ../Doc/library/datetime.rst:1788
msgid ""
"Note that there are unavoidable subtleties twice per year in a :class:"
"`tzinfo` subclass accounting for both standard and daylight time, at the DST "
"transition points.  For concreteness, consider US Eastern (UTC -0500), where "
"EDT begins the minute after 1:59 (EST) on the second Sunday in March, and "
"ends the minute after 1:59 (EDT) on the first Sunday in November::"
msgstr ""

#: ../Doc/library/datetime.rst:1802
msgid ""
"When DST starts (the \"start\" line), the local wall clock leaps from 1:59 "
"to 3:00.  A wall time of the form 2:MM doesn't really make sense on that "
"day, so ``astimezone(Eastern)`` won't deliver a result with ``hour == 2`` on "
"the day DST begins.  For example, at the Spring forward transition of 2016, "
"we get"
msgstr ""

#: ../Doc/library/datetime.rst:1819
msgid ""
"When DST ends (the \"end\" line), there's a potentially worse problem: "
"there's an hour that can't be spelled unambiguously in local wall time: the "
"last hour of daylight time.  In Eastern, that's times of the form 5:MM UTC "
"on the day daylight time ends.  The local wall clock leaps from 1:59 "
"(daylight time) back to 1:00 (standard time) again. Local times of the form "
"1:MM are ambiguous. :meth:`astimezone` mimics the local clock's behavior by "
"mapping two adjacent UTC hours into the same local hour then.  In the "
"Eastern example, UTC times of the form 5:MM and 6:MM both map to 1:MM when "
"converted to Eastern, but earlier times have the :attr:`~datetime.fold` "
"attribute set to 0 and the later times have it set to 1. For example, at the "
"Fall back transition of 2016, we get"
msgstr ""

#: ../Doc/library/datetime.rst:1841
msgid ""
"Note that the :class:`datetime` instances that differ only by the value of "
"the :attr:`~datetime.fold` attribute are considered equal in comparisons."
msgstr ""

#: ../Doc/library/datetime.rst:1844
msgid ""
"Applications that can't bear wall-time ambiguities should explicitly check "
"the value of the :attr:`~datetime.fold` attribute or avoid using hybrid :"
"class:`tzinfo` subclasses; there are no ambiguities when using :class:"
"`timezone`, or any other fixed-offset :class:`tzinfo` subclass (such as a "
"class representing only EST (fixed offset -5 hours), or only EDT (fixed "
"offset -4 hours))."
msgstr ""

#: ../Doc/library/datetime.rst:1857
msgid "`datetuil.tz <https://dateutil.readthedocs.io/en/stable/tz.html>`_"
msgstr ""

#: ../Doc/library/datetime.rst:1853
msgid ""
"The standard library has :class:`timezone` class for handling arbitrary "
"fixed offsets from UTC and :attr:`timezone.utc` as UTC timezone instance."
msgstr ""

#: ../Doc/library/datetime.rst:1856
msgid ""
"*datetuil.tz* library brings the *IANA timezone database* (also known as the "
"Olson database) to Python and its usage is recommended."
msgstr ""

#: ../Doc/library/datetime.rst:1863
msgid "`IANA timezone database <https://www.iana.org/time-zones>`_"
msgstr ""
"`Base de données des fuseaux horaires de l'IANA <https://www.iana.org/time-"
"zones>`_"

#: ../Doc/library/datetime.rst:1860
msgid ""
"The Time Zone Database (often called tz, tzdata or zoneinfo) contains code "
"and data that represent the history of local time for many representative "
"locations around the globe. It is updated periodically to reflect changes "
"made by political bodies to time zone boundaries, UTC offsets, and daylight-"
"saving rules."
msgstr ""

#: ../Doc/library/datetime.rst:1870
msgid ":class:`timezone` Objects"
msgstr "Objets :class:`timezone`"

#: ../Doc/library/datetime.rst:1872
msgid ""
"The :class:`timezone` class is a subclass of :class:`tzinfo`, each instance "
"of which represents a timezone defined by a fixed offset from UTC.  Note "
"that objects of this class cannot be used to represent timezone information "
"in the locations where different offsets are used in different days of the "
"year or where historical changes have been made to civil time."
msgstr ""

#: ../Doc/library/datetime.rst:1882
msgid ""
"The *offset* argument must be specified as a :class:`timedelta` object "
"representing the difference between the local time and UTC.  It must be "
"strictly between ``-timedelta(hours=24)`` and ``timedelta(hours=24)`` and "
"represent a whole number of minutes, otherwise :exc:`ValueError` is raised."
msgstr ""

#: ../Doc/library/datetime.rst:1888
msgid ""
"The *name* argument is optional.  If specified it must be a string that will "
"be used as the value returned by the :meth:`datetime.tzname` method."
msgstr ""

#: ../Doc/library/datetime.rst:1895
msgid ""
"Return the fixed value specified when the :class:`timezone` instance is "
"constructed.  The *dt* argument is ignored.  The return value is a :class:"
"`timedelta` instance equal to the difference between the local time and UTC."
msgstr ""

#: ../Doc/library/datetime.rst:1902
msgid ""
"Return the fixed value specified when the :class:`timezone` instance is "
"constructed.  If *name* is not provided in the constructor, the name "
"returned by ``tzname(dt)`` is generated from the value of the ``offset`` as "
"follows.  If *offset* is ``timedelta(0)``, the name is \"UTC\", otherwise it "
"is a string 'UTC±HH:MM', where ± is the sign of ``offset``, HH and MM are "
"two digits of ``offset.hours`` and ``offset.minutes`` respectively."
msgstr ""

#: ../Doc/library/datetime.rst:1910
msgid ""
"Name generated from ``offset=timedelta(0)`` is now plain 'UTC', not 'UTC"
"+00:00'."
msgstr ""

#: ../Doc/library/datetime.rst:1917
msgid "Always returns ``None``."
msgstr "Renvoie toujours ``None``."

#: ../Doc/library/datetime.rst:1921
msgid ""
"Return ``dt + offset``.  The *dt* argument must be an aware :class:`."
"datetime` instance, with ``tzinfo`` set to ``self``."
msgstr ""

#: ../Doc/library/datetime.rst:1928
msgid "The UTC timezone, ``timezone(timedelta(0))``."
msgstr ""

#: ../Doc/library/datetime.rst:1934
msgid ":meth:`strftime` and :meth:`strptime` Behavior"
msgstr "Comportement de :meth:`strftime` et :meth:`strptime`"

#: ../Doc/library/datetime.rst:1936
msgid ""
":class:`date`, :class:`.datetime`, and :class:`.time` objects all support a "
"``strftime(format)`` method, to create a string representing the time under "
"the control of an explicit format string.  Broadly speaking, ``d."
"strftime(fmt)`` acts like the :mod:`time` module's ``time.strftime(fmt, d."
"timetuple())`` although not all objects support a :meth:`timetuple` method."
msgstr ""

#: ../Doc/library/datetime.rst:1942
msgid ""
"Conversely, the :meth:`datetime.strptime` class method creates a :class:`."
"datetime` object from a string representing a date and time and a "
"corresponding format string. ``datetime.strptime(date_string, format)`` is "
"equivalent to ``datetime(*(time.strptime(date_string, format)[0:6]))``."
msgstr ""

#: ../Doc/library/datetime.rst:1947
msgid ""
"For :class:`.time` objects, the format codes for year, month, and day should "
"not be used, as time objects have no such values.  If they're used anyway, "
"``1900`` is substituted for the year, and ``1`` for the month and day."
msgstr ""

#: ../Doc/library/datetime.rst:1951
msgid ""
"For :class:`date` objects, the format codes for hours, minutes, seconds, and "
"microseconds should not be used, as :class:`date` objects have no such "
"values.  If they're used anyway, ``0`` is substituted for them."
msgstr ""

#: ../Doc/library/datetime.rst:1955
msgid ""
"The full set of format codes supported varies across platforms, because "
"Python calls the platform C library's :func:`strftime` function, and "
"platform variations are common.  To see the full set of format codes "
"supported on your platform, consult the :manpage:`strftime(3)` documentation."
msgstr ""

#: ../Doc/library/datetime.rst:1960
msgid ""
"The following is a list of all the format codes that the C standard (1989 "
"version) requires, and these work on all platforms with a standard C "
"implementation.  Note that the 1999 version of the C standard added "
"additional format codes."
msgstr ""

#: ../Doc/library/datetime.rst:1966 ../Doc/library/datetime.rst:2072
msgid "Directive"
msgstr ""

#: ../Doc/library/datetime.rst:1966 ../Doc/library/datetime.rst:2072
msgid "Meaning"
msgstr "Signification"

#: ../Doc/library/datetime.rst:1966 ../Doc/library/datetime.rst:2072
msgid "Example"
msgstr "Exemple"

#: ../Doc/library/datetime.rst:1966 ../Doc/library/datetime.rst:2072
msgid "Notes"
msgstr "Notes"

#: ../Doc/library/datetime.rst:1968
msgid "``%a``"
msgstr "``%a``"

#: ../Doc/library/datetime.rst:1968
msgid "Weekday as locale's abbreviated name."
msgstr "Jour de la semaine abrégé dans la langue locale."

#: ../Doc/library/datetime.rst:0
msgid "Sun, Mon, ..., Sat (en_US);"
msgstr "Sun, Mon, ..., Sat (en_US);"

#: ../Doc/library/datetime.rst:0
msgid "So, Mo, ..., Sa (de_DE)"
msgstr "Lu, Ma, ..., Di (fr_FR)"

#: ../Doc/library/datetime.rst:1973
msgid "``%A``"
msgstr "``%A``"

#: ../Doc/library/datetime.rst:1973
msgid "Weekday as locale's full name."
msgstr "Jour de la semaine complet dans la langue locale."

#: ../Doc/library/datetime.rst:0
msgid "Sunday, Monday, ..., Saturday (en_US);"
msgstr "Sunday, Monday, ..., Saturday (en_US);"

#: ../Doc/library/datetime.rst:0
msgid "Sonntag, Montag, ..., Samstag (de_DE)"
msgstr "Lundi, Mardi, ..., Dimanche (fr_FR)"

#: ../Doc/library/datetime.rst:1978
msgid "``%w``"
msgstr "``%w``"

#: ../Doc/library/datetime.rst:1978
msgid "Weekday as a decimal number, where 0 is Sunday and 6 is Saturday."
msgstr ""
"Jour de la semaine en chiffre, avec 0 pour le dimanche et 6 pour le samedi."

#: ../Doc/library/datetime.rst:1978
msgid "0, 1, ..., 6"
msgstr "0, 1, ..., 6"

#: ../Doc/library/datetime.rst:1982
msgid "``%d``"
msgstr "``%d``"

#: ../Doc/library/datetime.rst:1982
msgid "Day of the month as a zero-padded decimal number."
msgstr "Jour du mois sur deux chiffres."

#: ../Doc/library/datetime.rst:1982
msgid "01, 02, ..., 31"
msgstr "01, 02, ..., 31"

#: ../Doc/library/datetime.rst:1985
msgid "``%b``"
msgstr "``%b``"

#: ../Doc/library/datetime.rst:1985
msgid "Month as locale's abbreviated name."
msgstr ""

#: ../Doc/library/datetime.rst:0
msgid "Jan, Feb, ..., Dec (en_US);"
msgstr ""

#: ../Doc/library/datetime.rst:0
msgid "Jan, Feb, ..., Dez (de_DE)"
msgstr ""

#: ../Doc/library/datetime.rst:1990
msgid "``%B``"
msgstr "``%B``"

#: ../Doc/library/datetime.rst:1990
msgid "Month as locale's full name."
msgstr ""

#: ../Doc/library/datetime.rst:0
msgid "January, February, ..., December (en_US);"
msgstr ""

#: ../Doc/library/datetime.rst:0
msgid "Januar, Februar, ..., Dezember (de_DE)"
msgstr ""

#: ../Doc/library/datetime.rst:1995
msgid "``%m``"
msgstr "``%m``"

#: ../Doc/library/datetime.rst:1995
msgid "Month as a zero-padded decimal number."
msgstr ""

#: ../Doc/library/datetime.rst:1995 ../Doc/library/datetime.rst:2007
msgid "01, 02, ..., 12"
msgstr "01, 02, ..., 12"

#: ../Doc/library/datetime.rst:1998
msgid "``%y``"
msgstr "``%y``"

#: ../Doc/library/datetime.rst:1998
msgid "Year without century as a zero-padded decimal number."
msgstr ""

#: ../Doc/library/datetime.rst:1998
msgid "00, 01, ..., 99"
msgstr "00, 01, ..., 99"

#: ../Doc/library/datetime.rst:2001
msgid "``%Y``"
msgstr "``%Y``"

#: ../Doc/library/datetime.rst:2001
msgid "Year with century as a decimal number."
msgstr ""

#: ../Doc/library/datetime.rst:2001 ../Doc/library/datetime.rst:2074
msgid "0001, 0002, ..., 2013, 2014, ..., 9998, 9999"
msgstr ""

#: ../Doc/library/datetime.rst:2004
msgid "``%H``"
msgstr "``%H``"

#: ../Doc/library/datetime.rst:2004
msgid "Hour (24-hour clock) as a zero-padded decimal number."
msgstr ""

#: ../Doc/library/datetime.rst:2004
msgid "00, 01, ..., 23"
msgstr "00, 01, ..., 23"

#: ../Doc/library/datetime.rst:2007
msgid "``%I``"
msgstr "``%I``"

#: ../Doc/library/datetime.rst:2007
msgid "Hour (12-hour clock) as a zero-padded decimal number."
msgstr ""

#: ../Doc/library/datetime.rst:2010
msgid "``%p``"
msgstr "``%p``"

#: ../Doc/library/datetime.rst:2010
msgid "Locale's equivalent of either AM or PM."
msgstr ""

#: ../Doc/library/datetime.rst:0
msgid "AM, PM (en_US);"
msgstr ""

#: ../Doc/library/datetime.rst:0
msgid "am, pm (de_DE)"
msgstr ""

#: ../Doc/library/datetime.rst:2010
msgid "\\(1), \\(3)"
msgstr "\\(1), \\(3)"

#: ../Doc/library/datetime.rst:2013
msgid "``%M``"
msgstr "``%M``"

#: ../Doc/library/datetime.rst:2013
msgid "Minute as a zero-padded decimal number."
msgstr ""

#: ../Doc/library/datetime.rst:2013 ../Doc/library/datetime.rst:2016
msgid "00, 01, ..., 59"
msgstr "00, 01, ..., 59"

#: ../Doc/library/datetime.rst:2016
msgid "``%S``"
msgstr "``%S``"

#: ../Doc/library/datetime.rst:2016
msgid "Second as a zero-padded decimal number."
msgstr ""

#: ../Doc/library/datetime.rst:2016
msgid "\\(4)"
msgstr "\\(4)"

#: ../Doc/library/datetime.rst:2019
msgid "``%f``"
msgstr "``%f``"

#: ../Doc/library/datetime.rst:2019
msgid "Microsecond as a decimal number, zero-padded on the left."
msgstr ""

#: ../Doc/library/datetime.rst:2019
msgid "000000, 000001, ..., 999999"
msgstr "000000, 000001, ..., 999999"

#: ../Doc/library/datetime.rst:2019
msgid "\\(5)"
msgstr "\\(5)"

#: ../Doc/library/datetime.rst:2023 ../Doc/library/datetime.rst:2142
msgid "``%z``"
msgstr "``%z``"

#: ../Doc/library/datetime.rst:2023
msgid ""
"UTC offset in the form +HHMM or -HHMM (empty string if the object is naive)."
msgstr ""

#: ../Doc/library/datetime.rst:2023
msgid "(empty), +0000, -0400, +1030"
msgstr ""

#: ../Doc/library/datetime.rst:2023
msgid "\\(6)"
msgstr "\\(6)"

#: ../Doc/library/datetime.rst:2027 ../Doc/library/datetime.rst:2147
msgid "``%Z``"
msgstr "``%Z``"

#: ../Doc/library/datetime.rst:2027
msgid "Time zone name (empty string if the object is naive)."
msgstr ""

#: ../Doc/library/datetime.rst:2027
msgid "(empty), UTC, EST, CST"
msgstr ""

#: ../Doc/library/datetime.rst:2030
msgid "``%j``"
msgstr "``%j``"

#: ../Doc/library/datetime.rst:2030
msgid "Day of the year as a zero-padded decimal number."
msgstr ""

#: ../Doc/library/datetime.rst:2030
msgid "001, 002, ..., 366"
msgstr "001, 002, ..., 366"

#: ../Doc/library/datetime.rst:2033
msgid "``%U``"
msgstr "``%U``"

#: ../Doc/library/datetime.rst:2033
msgid ""
"Week number of the year (Sunday as the first day of the week) as a zero "
"padded decimal number. All days in a new year preceding the first Sunday are "
"considered to be in week 0."
msgstr ""

#: ../Doc/library/datetime.rst:2033 ../Doc/library/datetime.rst:2041
msgid "00, 01, ..., 53"
msgstr "00, 01, ..., 53"

#: ../Doc/library/datetime.rst:2033 ../Doc/library/datetime.rst:2041
msgid "\\(7)"
msgstr "\\(7)"

#: ../Doc/library/datetime.rst:2041
msgid "``%W``"
msgstr "``%W``"

#: ../Doc/library/datetime.rst:2041
msgid ""
"Week number of the year (Monday as the first day of the week) as a decimal "
"number. All days in a new year preceding the first Monday are considered to "
"be in week 0."
msgstr ""

#: ../Doc/library/datetime.rst:2049
msgid "``%c``"
msgstr "``%c``"

#: ../Doc/library/datetime.rst:2049
msgid "Locale's appropriate date and time representation."
msgstr ""

#: ../Doc/library/datetime.rst:0
msgid "Tue Aug 16 21:30:00 1988 (en_US);"
msgstr ""

#: ../Doc/library/datetime.rst:0
msgid "Di 16 Aug 21:30:00 1988 (de_DE)"
msgstr ""

#: ../Doc/library/datetime.rst:2054
msgid "``%x``"
msgstr "``%x``"

#: ../Doc/library/datetime.rst:2054
msgid "Locale's appropriate date representation."
msgstr ""

#: ../Doc/library/datetime.rst:0
msgid "08/16/88 (None);"
msgstr ""

#: ../Doc/library/datetime.rst:0
msgid "08/16/1988 (en_US);"
msgstr ""

#: ../Doc/library/datetime.rst:0
msgid "16.08.1988 (de_DE)"
msgstr ""

#: ../Doc/library/datetime.rst:2058
msgid "``%X``"
msgstr "``%X``"

#: ../Doc/library/datetime.rst:2058
msgid "Locale's appropriate time representation."
msgstr ""

#: ../Doc/library/datetime.rst:0
msgid "21:30:00 (en_US);"
msgstr ""

#: ../Doc/library/datetime.rst:0
msgid "21:30:00 (de_DE)"
msgstr ""

#: ../Doc/library/datetime.rst:2061
msgid "``%%``"
msgstr "``%%``"

#: ../Doc/library/datetime.rst:2061
msgid "A literal ``'%'`` character."
msgstr ""

#: ../Doc/library/datetime.rst:2061
msgid "%"
msgstr "%"

#: ../Doc/library/datetime.rst:2064
msgid ""
"Several additional directives not required by the C89 standard are included "
"for convenience. These parameters all correspond to ISO 8601 date values. "
"These may not be available on all platforms when used with the :meth:"
"`strftime` method. The ISO 8601 year and ISO 8601 week directives are not "
"interchangeable with the year and week number directives above. Calling :"
"meth:`strptime` with incomplete or ambiguous ISO 8601 directives will raise "
"a :exc:`ValueError`."
msgstr ""

#: ../Doc/library/datetime.rst:2074
msgid "``%G``"
msgstr ""

#: ../Doc/library/datetime.rst:2074
msgid ""
"ISO 8601 year with century representing the year that contains the greater "
"part of the ISO week (``%V``)."
msgstr ""

#: ../Doc/library/datetime.rst:2074 ../Doc/library/datetime.rst:2082
msgid "\\(8)"
msgstr "\\(8)"

#: ../Doc/library/datetime.rst:2079
msgid "``%u``"
msgstr "``%u``"

#: ../Doc/library/datetime.rst:2079
msgid "ISO 8601 weekday as a decimal number where 1 is Monday."
msgstr ""

#: ../Doc/library/datetime.rst:2079
msgid "1, 2, ..., 7"
msgstr ""

#: ../Doc/library/datetime.rst:2082
msgid "``%V``"
msgstr ""

#: ../Doc/library/datetime.rst:2082
msgid ""
"ISO 8601 week as a decimal number with Monday as the first day of the week. "
"Week 01 is the week containing Jan 4."
msgstr ""

#: ../Doc/library/datetime.rst:2082
msgid "01, 02, ..., 53"
msgstr ""

#: ../Doc/library/datetime.rst:2089
msgid "``%G``, ``%u`` and ``%V`` were added."
msgstr ""

#: ../Doc/library/datetime.rst:2095
msgid ""
"Because the format depends on the current locale, care should be taken when "
"making assumptions about the output value. Field orderings will vary (for "
"example, \"month/day/year\" versus \"day/month/year\"), and the output may "
"contain Unicode characters encoded using the locale's default encoding (for "
"example, if the current locale is ``ja_JP``, the default encoding could be "
"any one of ``eucJP``, ``SJIS``, or ``utf-8``; use :meth:`locale.getlocale` "
"to determine the current locale's encoding)."
msgstr ""

#: ../Doc/library/datetime.rst:2104
msgid ""
"The :meth:`strptime` method can parse years in the full [1, 9999] range, but "
"years < 1000 must be zero-filled to 4-digit width."
msgstr ""

#: ../Doc/library/datetime.rst:2107
msgid ""
"In previous versions, :meth:`strftime` method was restricted to years >= "
"1900."
msgstr ""

#: ../Doc/library/datetime.rst:2111
msgid ""
"In version 3.2, :meth:`strftime` method was restricted to years >= 1000."
msgstr ""

#: ../Doc/library/datetime.rst:2116
msgid ""
"When used with the :meth:`strptime` method, the ``%p`` directive only "
"affects the output hour field if the ``%I`` directive is used to parse the "
"hour."
msgstr ""

#: ../Doc/library/datetime.rst:2120
msgid ""
"Unlike the :mod:`time` module, the :mod:`datetime` module does not support "
"leap seconds."
msgstr ""

#: ../Doc/library/datetime.rst:2124
msgid ""
"When used with the :meth:`strptime` method, the ``%f`` directive accepts "
"from one to six digits and zero pads on the right.  ``%f`` is an extension "
"to the set of format characters in the C standard (but implemented "
"separately in datetime objects, and therefore always available)."
msgstr ""

#: ../Doc/library/datetime.rst:2131
msgid ""
"For a naive object, the ``%z`` and ``%Z`` format codes are replaced by empty "
"strings."
msgstr ""

#: ../Doc/library/datetime.rst:2134
msgid "For an aware object:"
msgstr ""

#: ../Doc/library/datetime.rst:2137
msgid ""
":meth:`utcoffset` is transformed into a 5-character string of the form +HHMM "
"or -HHMM, where HH is a 2-digit string giving the number of UTC offset "
"hours, and MM is a 2-digit string giving the number of UTC offset minutes.  "
"For example, if :meth:`utcoffset` returns ``timedelta(hours=-3, "
"minutes=-30)``, ``%z`` is replaced with the string ``'-0330'``."
msgstr ""

#: ../Doc/library/datetime.rst:2145
msgid ""
"If :meth:`tzname` returns ``None``, ``%Z`` is replaced by an empty string.  "
"Otherwise ``%Z`` is replaced by the returned value, which must be a string."
msgstr ""

#: ../Doc/library/datetime.rst:2149
msgid ""
"When the ``%z`` directive is provided to the :meth:`strptime` method, an "
"aware :class:`.datetime` object will be produced.  The ``tzinfo`` of the "
"result will be set to a :class:`timezone` instance."
msgstr ""

#: ../Doc/library/datetime.rst:2155
msgid ""
"When used with the :meth:`strptime` method, ``%U`` and ``%W`` are only used "
"in calculations when the day of the week and the calendar year (``%Y``) are "
"specified."
msgstr ""

#: ../Doc/library/datetime.rst:2160
msgid ""
"Similar to ``%U`` and ``%W``, ``%V`` is only used in calculations when the "
"day of the week and the ISO year (``%G``) are specified in a :meth:"
"`strptime` format string. Also note that ``%G`` and ``%Y`` are not "
"interchangeable."
msgstr ""

#: ../Doc/library/datetime.rst:2166
msgid "Footnotes"
msgstr "Notes"

#: ../Doc/library/datetime.rst:2167
msgid "If, that is, we ignore the effects of Relativity"
msgstr "Si on ignore les effets de la Relativité"
