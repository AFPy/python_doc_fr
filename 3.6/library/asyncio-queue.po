# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:40+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/asyncio-queue.rst:4
msgid "Queues"
msgstr ""

#: ../Doc/library/asyncio-queue.rst:6
msgid "Queues:"
msgstr ""

#: ../Doc/library/asyncio-queue.rst:8
msgid ":class:`Queue`"
msgstr ":class:`Queue`"

#: ../Doc/library/asyncio-queue.rst:9
msgid ":class:`PriorityQueue`"
msgstr ":class:`PriorityQueue`"

#: ../Doc/library/asyncio-queue.rst:10
msgid ":class:`LifoQueue`"
msgstr ":class:`LifoQueue`"

#: ../Doc/library/asyncio-queue.rst:12
msgid ""
"asyncio queue API was designed to be close to classes of the :mod:`queue` "
"module (:class:`~queue.Queue`, :class:`~queue.PriorityQueue`, :class:`~queue."
"LifoQueue`), but it has no *timeout* parameter. The :func:`asyncio.wait_for` "
"function can be used to cancel a task after a timeout."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:18
msgid "Queue"
msgstr ""

#: ../Doc/library/asyncio-queue.rst:22
msgid "A queue, useful for coordinating producer and consumer coroutines."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:24
msgid ""
"If *maxsize* is less than or equal to zero, the queue size is infinite. If "
"it is an integer greater than ``0``, then ``yield from put()`` will block "
"when the queue reaches *maxsize*, until an item is removed by :meth:`get`."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:28
msgid ""
"Unlike the standard library :mod:`queue`, you can reliably know this Queue's "
"size with :meth:`qsize`, since your single-threaded asyncio application "
"won't be interrupted between calling :meth:`qsize` and doing an operation on "
"the Queue."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:33
msgid "This class is :ref:`not thread safe <asyncio-multithreading>`."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:35
msgid "New :meth:`join` and :meth:`task_done` methods."
msgstr "Les nouvelles méthodes :meth:`join` et :meth:`task_done`."

#: ../Doc/library/asyncio-queue.rst:40
msgid "Return ``True`` if the queue is empty, ``False`` otherwise."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:44
msgid "Return ``True`` if there are :attr:`maxsize` items in the queue."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:48
msgid ""
"If the Queue was initialized with ``maxsize=0`` (the default), then :meth:"
"`full()` is never ``True``."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:53
msgid ""
"Remove and return an item from the queue. If queue is empty, wait until an "
"item is available."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:56 ../Doc/library/asyncio-queue.rst:79
#: ../Doc/library/asyncio-queue.rst:88
msgid "This method is a :ref:`coroutine <coroutine>`."
msgstr "Cette méthode est une :ref:`coroutine <coroutine>`."

#: ../Doc/library/asyncio-queue.rst:60
msgid "The :meth:`empty` method."
msgstr "La méthode :meth:`empty`."

#: ../Doc/library/asyncio-queue.rst:64
msgid "Remove and return an item from the queue."
msgstr "Supprime et donne un élément de la queue."

#: ../Doc/library/asyncio-queue.rst:66
msgid ""
"Return an item if one is immediately available, else raise :exc:`QueueEmpty`."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:71
msgid "Block until all items in the queue have been gotten and processed."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:73
msgid ""
"The count of unfinished tasks goes up whenever an item is added to the "
"queue. The count goes down whenever a consumer thread calls :meth:"
"`task_done` to indicate that the item was retrieved and all work on it is "
"complete.  When the count of unfinished tasks drops to zero, :meth:`join` "
"unblocks."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:85
msgid ""
"Put an item into the queue. If the queue is full, wait until a free slot is "
"available before adding item."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:92
msgid "The :meth:`full` method."
msgstr "La méthode :meth:`full`."

#: ../Doc/library/asyncio-queue.rst:96
msgid "Put an item into the queue without blocking."
msgstr "Ajoute un élément dans la queue sans bloquer."

#: ../Doc/library/asyncio-queue.rst:98
msgid "If no free slot is immediately available, raise :exc:`QueueFull`."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:102
msgid "Number of items in the queue."
msgstr "Nombre d'éléments dans la queue."

#: ../Doc/library/asyncio-queue.rst:106
msgid "Indicate that a formerly enqueued task is complete."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:108
msgid ""
"Used by queue consumers. For each :meth:`~Queue.get` used to fetch a task, a "
"subsequent call to :meth:`task_done` tells the queue that the processing on "
"the task is complete."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:112
msgid ""
"If a :meth:`join` is currently blocking, it will resume when all items have "
"been processed (meaning that a :meth:`task_done` call was received for every "
"item that had been :meth:`~Queue.put` into the queue)."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:116
msgid ""
"Raises :exc:`ValueError` if called more times than there were items placed "
"in the queue."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:123
msgid "Number of items allowed in the queue."
msgstr "Nombre d'éléments autorisés dans la queue."

#: ../Doc/library/asyncio-queue.rst:127
msgid "PriorityQueue"
msgstr "PriorityQueue"

#: ../Doc/library/asyncio-queue.rst:131
msgid ""
"A subclass of :class:`Queue`; retrieves entries in priority order (lowest "
"first)."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:134
msgid "Entries are typically tuples of the form: (priority number, data)."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:138
msgid "LifoQueue"
msgstr ""

#: ../Doc/library/asyncio-queue.rst:142
msgid ""
"A subclass of :class:`Queue` that retrieves most recently added entries "
"first."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:147
msgid "Exceptions"
msgstr "Les exceptions"

#: ../Doc/library/asyncio-queue.rst:151
msgid ""
"Exception raised when the :meth:`~Queue.get_nowait` method is called on a :"
"class:`Queue` object which is empty."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:157
msgid ""
"Exception raised when the :meth:`~Queue.put_nowait` method is called on a :"
"class:`Queue` object which is full."
msgstr ""
