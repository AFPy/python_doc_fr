# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-02 22:11+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/asyncio-subprocess.rst:6
msgid "Subprocess"
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:9
msgid "Windows event loop"
msgstr "Boucle d'évènements Windows"

#: ../Doc/library/asyncio-subprocess.rst:11
msgid ""
"On Windows, the default event loop is :class:`SelectorEventLoop` which does "
"not support subprocesses. :class:`ProactorEventLoop` should be used instead. "
"Example to use it on Windows::"
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:23
msgid ""
":ref:`Available event loops <asyncio-event-loops>` and :ref:`Platform "
"support <asyncio-platform-support>`."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:28
msgid "Create a subprocess: high-level API using Process"
msgstr "Créer un processus fils : API de haut niveau utilisant ``Process``"

#: ../Doc/library/asyncio-subprocess.rst:32
msgid "Create a subprocess."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:34
msgid ""
"The *limit* parameter sets the buffer limit passed to the :class:"
"`StreamReader`. See :meth:`AbstractEventLoop.subprocess_exec` for other "
"parameters."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:38
#: ../Doc/library/asyncio-subprocess.rst:50
msgid "Return a :class:`~asyncio.subprocess.Process` instance."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:40
#: ../Doc/library/asyncio-subprocess.rst:59
msgid "This function is a :ref:`coroutine <coroutine>`."
msgstr "Cette fonction est une :ref:`coroutine <coroutine>`."

#: ../Doc/library/asyncio-subprocess.rst:44
msgid "Run the shell command *cmd*."
msgstr "Exécute la commande shell *cmd*."

#: ../Doc/library/asyncio-subprocess.rst:46
msgid ""
"The *limit* parameter sets the buffer limit passed to the :class:"
"`StreamReader`. See :meth:`AbstractEventLoop.subprocess_shell` for other "
"parameters."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:52
#: ../Doc/library/asyncio-subprocess.rst:135
msgid ""
"It is the application's responsibility to ensure that all whitespace and "
"metacharacters are quoted appropriately to avoid `shell injection <https://"
"en.wikipedia.org/wiki/Shell_injection#Shell_injection>`_ vulnerabilities. "
"The :func:`shlex.quote` function can be used to properly escape whitespace "
"and shell metacharacters in strings that are going to be used to construct "
"shell commands."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:61
msgid ""
"Use the :meth:`AbstractEventLoop.connect_read_pipe` and :meth:"
"`AbstractEventLoop.connect_write_pipe` methods to connect pipes."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:66
msgid "Create a subprocess: low-level API using subprocess.Popen"
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:68
msgid "Run subprocesses asynchronously using the :mod:`subprocess` module."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:72
msgid ""
"Create a subprocess from one or more string arguments (character strings or "
"bytes strings encoded to the :ref:`filesystem encoding <filesystem-"
"encoding>`), where the first string specifies the program to execute, and "
"the remaining strings specify the program's arguments. (Thus, together the "
"string arguments form the ``sys.argv`` value of the program, assuming it is "
"a Python script.) This is similar to the standard library :class:`subprocess."
"Popen` class called with shell=False and the list of strings passed as the "
"first argument; however, where :class:`~subprocess.Popen` takes a single "
"argument which is list of strings, :func:`subprocess_exec` takes multiple "
"string arguments."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:83
#: ../Doc/library/asyncio-subprocess.rst:126
msgid ""
"The *protocol_factory* must instantiate a subclass of the :class:`asyncio."
"SubprocessProtocol` class."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:86
msgid "Other parameters:"
msgstr "Autres paramètres :"

#: ../Doc/library/asyncio-subprocess.rst:88
msgid ""
"*stdin*: Either a file-like object representing the pipe to be connected to "
"the subprocess's standard input stream using :meth:`~AbstractEventLoop."
"connect_write_pipe`, or the constant :const:`subprocess.PIPE` (the default). "
"By default a new pipe will be created and connected."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:94
msgid ""
"*stdout*: Either a file-like object representing the pipe to be connected to "
"the subprocess's standard output stream using :meth:`~AbstractEventLoop."
"connect_read_pipe`, or the constant :const:`subprocess.PIPE` (the default). "
"By default a new pipe will be created and connected."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:100
msgid ""
"*stderr*: Either a file-like object representing the pipe to be connected to "
"the subprocess's standard error stream using :meth:`~AbstractEventLoop."
"connect_read_pipe`, or one of the constants :const:`subprocess.PIPE` (the "
"default) or :const:`subprocess.STDOUT`. By default a new pipe will be "
"created and connected. When :const:`subprocess.STDOUT` is specified, the "
"subprocess's standard error stream will be connected to the same pipe as the "
"standard output stream."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:108
msgid ""
"All other keyword arguments are passed to :class:`subprocess.Popen` without "
"interpretation, except for *bufsize*, *universal_newlines* and *shell*, "
"which should not be specified at all."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:112
#: ../Doc/library/asyncio-subprocess.rst:132
msgid ""
"Returns a pair of ``(transport, protocol)``, where *transport* is an "
"instance of :class:`BaseSubprocessTransport`."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:115
#: ../Doc/library/asyncio-subprocess.rst:142
#: ../Doc/library/asyncio-subprocess.rst:204
#: ../Doc/library/asyncio-subprocess.rst:232
msgid "This method is a :ref:`coroutine <coroutine>`."
msgstr "Cette méthode est une :ref:`coroutine <coroutine>`."

#: ../Doc/library/asyncio-subprocess.rst:117
msgid ""
"See the constructor of the :class:`subprocess.Popen` class for parameters."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:121
msgid ""
"Create a subprocess from *cmd*, which is a character string or a bytes "
"string encoded to the :ref:`filesystem encoding <filesystem-encoding>`, "
"using the platform's \"shell\" syntax. This is similar to the standard "
"library :class:`subprocess.Popen` class called with ``shell=True``."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:129
msgid ""
"See :meth:`~AbstractEventLoop.subprocess_exec` for more details about the "
"remaining arguments."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:146
msgid ""
"The :meth:`AbstractEventLoop.connect_read_pipe` and :meth:`AbstractEventLoop."
"connect_write_pipe` methods."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:151
msgid "Constants"
msgstr "Constantes"

#: ../Doc/library/asyncio-subprocess.rst:155
msgid ""
"Special value that can be used as the *stdin*, *stdout* or *stderr* argument "
"to :func:`create_subprocess_shell` and :func:`create_subprocess_exec` and "
"indicates that a pipe to the standard stream should be opened."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:161
msgid ""
"Special value that can be used as the *stderr* argument to :func:"
"`create_subprocess_shell` and :func:`create_subprocess_exec` and indicates "
"that standard error should go into the same handle as standard output."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:168
msgid ""
"Special value that can be used as the *stdin*, *stdout* or *stderr* argument "
"to :func:`create_subprocess_shell` and :func:`create_subprocess_exec` and "
"indicates that the special file :data:`os.devnull` will be used."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:174
msgid "Process"
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:178
msgid ""
"A subprocess created by the :func:`create_subprocess_exec` or the :func:"
"`create_subprocess_shell` function."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:181
msgid ""
"The API of the :class:`~asyncio.subprocess.Process` class was designed to be "
"close to the API of the :class:`subprocess.Popen` class, but there are some "
"differences:"
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:185
msgid "There is no explicit :meth:`~subprocess.Popen.poll` method"
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:186
msgid ""
"The :meth:`~subprocess.Popen.communicate` and :meth:`~subprocess.Popen.wait` "
"methods don't take a *timeout* parameter: use the :func:`wait_for` function"
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:189
msgid ""
"The *universal_newlines* parameter is not supported (only bytes strings are "
"supported)"
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:191
msgid ""
"The :meth:`~asyncio.subprocess.Process.wait` method of the :class:`~asyncio."
"subprocess.Process` class is asynchronous whereas the :meth:`~subprocess."
"Popen.wait` method of the :class:`~subprocess.Popen` class is implemented as "
"a busy loop."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:196
msgid ""
"This class is :ref:`not thread safe <asyncio-multithreading>`. See also the :"
"ref:`Subprocess and threads <asyncio-subprocess-threads>` section."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:201
msgid ""
"Wait for child process to terminate.  Set and return :attr:`returncode` "
"attribute."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:208
msgid ""
"This will deadlock when using ``stdout=PIPE`` or ``stderr=PIPE`` and the "
"child process generates enough output to a pipe such that it blocks waiting "
"for the OS pipe buffer to accept more data. Use the :meth:`communicate` "
"method when using pipes to avoid that."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:215
msgid ""
"Interact with process: Send data to stdin.  Read data from stdout and "
"stderr, until end-of-file is reached.  Wait for process to terminate. The "
"optional *input* argument should be data to be sent to the child process, or "
"``None``, if no data should be sent to the child.  The type of *input* must "
"be bytes."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:221
msgid ":meth:`communicate` returns a tuple ``(stdout_data, stderr_data)``."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:223
msgid ""
"If a :exc:`BrokenPipeError` or :exc:`ConnectionResetError` exception is "
"raised when writing *input* into stdin, the exception is ignored. It occurs "
"when the process exits before all data are written into stdin."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:227
msgid ""
"Note that if you want to send data to the process's stdin, you need to "
"create the Process object with ``stdin=PIPE``.  Similarly, to get anything "
"other than ``None`` in the result tuple, you need to give ``stdout=PIPE`` "
"and/or ``stderr=PIPE`` too."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:236
msgid ""
"The data read is buffered in memory, so do not use this method if the data "
"size is large or unlimited."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:239
msgid ""
"The method now ignores :exc:`BrokenPipeError` and :exc:"
"`ConnectionResetError`."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:245
msgid "Sends the signal *signal* to the child process."
msgstr "Envoie le signal *signal* au processus fils."

#: ../Doc/library/asyncio-subprocess.rst:249
msgid ""
"On Windows, :py:data:`SIGTERM` is an alias for :meth:`terminate`. "
"``CTRL_C_EVENT`` and ``CTRL_BREAK_EVENT`` can be sent to processes started "
"with a *creationflags* parameter which includes ``CREATE_NEW_PROCESS_GROUP``."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:256
msgid ""
"Stop the child. On Posix OSs the method sends :py:data:`signal.SIGTERM` to "
"the child. On Windows the Win32 API function :c:func:`TerminateProcess` is "
"called to stop the child."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:262
msgid ""
"Kills the child. On Posix OSs the function sends :py:data:`SIGKILL` to the "
"child.  On Windows :meth:`kill` is an alias for :meth:`terminate`."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:267
msgid ""
"Standard input stream (:class:`StreamWriter`), ``None`` if the process was "
"created with ``stdin=None``."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:272
msgid ""
"Standard output stream (:class:`StreamReader`), ``None`` if the process was "
"created with ``stdout=None``."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:277
msgid ""
"Standard error stream (:class:`StreamReader`), ``None`` if the process was "
"created with ``stderr=None``."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:282
msgid ""
"Use the :meth:`communicate` method rather than :attr:`.stdin.write "
"<stdin>`, :attr:`.stdout.read <stdout>` or :attr:`.stderr.read <stderr>` to "
"avoid deadlocks due to streams pausing reading or writing and blocking the "
"child process."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:289
msgid "The identifier of the process."
msgstr "L'identifiant du processus."

#: ../Doc/library/asyncio-subprocess.rst:291
msgid ""
"Note that for processes created by the :func:`create_subprocess_shell` "
"function, this attribute is the process identifier of the spawned shell."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:296
msgid ""
"Return code of the process when it exited.  A ``None`` value indicates that "
"the process has not terminated yet."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:299
msgid ""
"A negative value ``-N`` indicates that the child was terminated by signal "
"``N`` (Unix only)."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:306
msgid "Subprocess and threads"
msgstr "Processus fils et threads"

#: ../Doc/library/asyncio-subprocess.rst:308
msgid ""
"asyncio supports running subprocesses from different threads, but there are "
"limits:"
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:311
msgid "An event loop must run in the main thread"
msgstr "Une boucle d'évènements doit être exécutée sur le thread principal"

#: ../Doc/library/asyncio-subprocess.rst:312
msgid ""
"The child watcher must be instantiated in the main thread, before executing "
"subprocesses from other threads. Call the :func:`get_child_watcher` function "
"in the main thread to instantiate the child watcher."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:316
msgid "The :class:`asyncio.subprocess.Process` class is not thread safe."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:320
msgid ""
"The :ref:`Concurrency and multithreading in asyncio <asyncio-"
"multithreading>` section."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:325
msgid "Subprocess examples"
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:328
msgid "Subprocess using transport and protocol"
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:330
msgid ""
"Example of a subprocess protocol using to get the output of a subprocess and "
"to wait for the subprocess exit. The subprocess is created by the :meth:"
"`AbstractEventLoop.subprocess_exec` method::"
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:384
msgid "Subprocess using streams"
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:386
msgid ""
"Example using the :class:`~asyncio.subprocess.Process` class to control the "
"subprocess and the :class:`StreamReader` class to read from the standard "
"output.  The subprocess is created by the :func:`create_subprocess_exec` "
"function::"
msgstr ""
