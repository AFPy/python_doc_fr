# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:40+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/asyncio-protocol.rst:5
msgid "Transports  and protocols (callback based API)"
msgstr "Transports et protocoles (APi basée sur des fonctions de rappel)"

#: ../Doc/library/asyncio-protocol.rst:10
msgid "Transports"
msgstr "Transports"

#: ../Doc/library/asyncio-protocol.rst:12
msgid ""
"Transports are classes provided by :mod:`asyncio` in order to abstract "
"various kinds of communication channels.  You generally won't instantiate a "
"transport yourself; instead, you will call an :class:`AbstractEventLoop` "
"method which will create the transport and try to initiate the underlying "
"communication channel, calling you back when it succeeds."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:18
msgid ""
"Once the communication channel is established, a transport is always paired "
"with a :ref:`protocol <asyncio-protocol>` instance.  The protocol can then "
"call the transport's methods for various purposes."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:22
msgid ""
":mod:`asyncio` currently implements transports for TCP, UDP, SSL, and "
"subprocess pipes.  The methods available on a transport depend on the "
"transport's kind."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:26
msgid ""
"The transport classes are :ref:`not thread safe <asyncio-multithreading>`."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:30
msgid "BaseTransport"
msgstr "BaseTransport"

#: ../Doc/library/asyncio-protocol.rst:34
msgid "Base class for transports."
msgstr "Classe de base des transports."

#: ../Doc/library/asyncio-protocol.rst:38
msgid ""
"Close the transport.  If the transport has a buffer for outgoing data, "
"buffered data will be flushed asynchronously.  No more data will be "
"received.  After all buffered data is flushed, the protocol's :meth:"
"`connection_lost` method will be called with :const:`None` as its argument."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:46
msgid "Return ``True`` if the transport is closing or is closed."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:52
msgid ""
"Return optional transport information.  *name* is a string representing the "
"piece of transport-specific information to get, *default* is the value to "
"return if the information doesn't exist."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:56
msgid ""
"This method allows transport implementations to easily expose channel-"
"specific information."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:59
msgid "socket:"
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:61
msgid ""
"``'peername'``: the remote address to which the socket is connected, result "
"of :meth:`socket.socket.getpeername` (``None`` on error)"
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:63
msgid "``'socket'``: :class:`socket.socket` instance"
msgstr "``'socket'`` : Instance de :class:`socket.socket`"

#: ../Doc/library/asyncio-protocol.rst:64
msgid ""
"``'sockname'``: the socket's own address, result of :meth:`socket.socket."
"getsockname`"
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:67
msgid "SSL socket:"
msgstr "*Socket* SSL :"

#: ../Doc/library/asyncio-protocol.rst:69
msgid ""
"``'compression'``: the compression algorithm being used as a string, or "
"``None`` if the connection isn't compressed; result of :meth:`ssl.SSLSocket."
"compression`"
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:72
msgid ""
"``'cipher'``: a three-value tuple containing the name of the cipher being "
"used, the version of the SSL protocol that defines its use, and the number "
"of secret bits being used; result of :meth:`ssl.SSLSocket.cipher`"
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:76
msgid ""
"``'peercert'``: peer certificate; result of :meth:`ssl.SSLSocket.getpeercert`"
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:78
msgid "``'sslcontext'``: :class:`ssl.SSLContext` instance"
msgstr "``sslcontext'`` : Instance de :class:`ssl.SSLContext`"

#: ../Doc/library/asyncio-protocol.rst:79
msgid ""
"``'ssl_object'``: :class:`ssl.SSLObject` or :class:`ssl.SSLSocket` instance"
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:82
msgid "pipe:"
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:84
msgid "``'pipe'``: pipe object"
msgstr "``'pipe'`` : objet *pipe*"

#: ../Doc/library/asyncio-protocol.rst:86
msgid "subprocess:"
msgstr "processus fils :"

#: ../Doc/library/asyncio-protocol.rst:88
msgid "``'subprocess'``: :class:`subprocess.Popen` instance"
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:90
msgid "``'ssl_object'`` info was added to SSL sockets."
msgstr "``'ssl_object'`` est ajouté aux *sockets* SSL."

#: ../Doc/library/asyncio-protocol.rst:95
msgid "ReadTransport"
msgstr "ReadTransport"

#: ../Doc/library/asyncio-protocol.rst:99
msgid "Interface for read-only transports."
msgstr "Interface pour les transports en lecture seule."

#: ../Doc/library/asyncio-protocol.rst:103
msgid ""
"Pause the receiving end of the transport.  No data will be passed to the "
"protocol's :meth:`data_received` method until :meth:`resume_reading` is "
"called."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:109
msgid ""
"Resume the receiving end.  The protocol's :meth:`data_received` method will "
"be called once again if some data is available for reading."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:114
msgid "WriteTransport"
msgstr "WriteTransport"

#: ../Doc/library/asyncio-protocol.rst:118
msgid "Interface for write-only transports."
msgstr "Interface pour les transports en écriture seule."

#: ../Doc/library/asyncio-protocol.rst:122
#: ../Doc/library/asyncio-protocol.rst:204
msgid ""
"Close the transport immediately, without waiting for pending operations to "
"complete.  Buffered data will be lost.  No more data will be received. The "
"protocol's :meth:`connection_lost` method will eventually be called with :"
"const:`None` as its argument."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:129
msgid ""
"Return :const:`True` if the transport supports :meth:`write_eof`, :const:"
"`False` if not."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:134
msgid "Return the current size of the output buffer used by the transport."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:138
msgid ""
"Get the *high*- and *low*-water limits for write flow control. Return a "
"tuple ``(low, high)`` where *low* and *high* are positive number of bytes."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:142
msgid "Use :meth:`set_write_buffer_limits` to set the limits."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:148
msgid "Set the *high*- and *low*-water limits for write flow control."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:150
msgid ""
"These two values control when call the protocol's :meth:`pause_writing` and :"
"meth:`resume_writing` methods are called. If specified, the low-water limit "
"must be less than or equal to the high-water limit.  Neither *high* nor "
"*low* can be negative."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:155
msgid ""
"The defaults are implementation-specific.  If only the high-water limit is "
"given, the low-water limit defaults to an implementation-specific value less "
"than or equal to the high-water limit.  Setting *high* to zero forces *low* "
"to zero as well, and causes :meth:`pause_writing` to be called whenever the "
"buffer becomes non-empty.  Setting *low* to zero causes :meth:"
"`resume_writing` to be called only once the buffer is empty. Use of zero for "
"either limit is generally sub-optimal as it reduces opportunities for doing "
"I/O and computation concurrently."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:166
msgid "Use :meth:`get_write_buffer_limits` to get the limits."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:170
msgid "Write some *data* bytes to the transport."
msgstr "Écrit des octets de *data* sur le transport."

#: ../Doc/library/asyncio-protocol.rst:172
#: ../Doc/library/asyncio-protocol.rst:199
msgid ""
"This method does not block; it buffers the data and arranges for it to be "
"sent out asynchronously."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:177
msgid ""
"Write a list (or any iterable) of data bytes to the transport. This is "
"functionally equivalent to calling :meth:`write` on each element yielded by "
"the iterable, but may be implemented more efficiently."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:183
msgid ""
"Close the write end of the transport after flushing buffered data. Data may "
"still be received."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:186
msgid ""
"This method can raise :exc:`NotImplementedError` if the transport (e.g. SSL) "
"doesn't support half-closes."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:191
msgid "DatagramTransport"
msgstr "DatagramTransport"

#: ../Doc/library/asyncio-protocol.rst:195
msgid ""
"Send the *data* bytes to the remote peer given by *addr* (a transport-"
"dependent target address).  If *addr* is :const:`None`, the data is sent to "
"the target address given on transport creation."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:211
msgid "BaseSubprocessTransport"
msgstr "BaseSubprocessTransport"

#: ../Doc/library/asyncio-protocol.rst:217
msgid "Return the subprocess process id as an integer."
msgstr ""
"Donne l'identifiant du sous processus sous la forme d'un nombre entier."

#: ../Doc/library/asyncio-protocol.rst:221
msgid ""
"Return the transport for the communication pipe corresponding to the integer "
"file descriptor *fd*:"
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:224
msgid ""
"``0``: readable streaming transport of the standard input (*stdin*), or :"
"const:`None` if the subprocess was not created with ``stdin=PIPE``"
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:226
msgid ""
"``1``: writable streaming transport of the standard output (*stdout*), or :"
"const:`None` if the subprocess was not created with ``stdout=PIPE``"
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:228
msgid ""
"``2``: writable streaming transport of the standard error (*stderr*), or :"
"const:`None` if the subprocess was not created with ``stderr=PIPE``"
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:230
msgid "other *fd*: :const:`None`"
msgstr "autre *fd* : :const:`None`"

#: ../Doc/library/asyncio-protocol.rst:234
msgid ""
"Return the subprocess returncode as an integer or :const:`None` if it hasn't "
"returned, similarly to the :attr:`subprocess.Popen.returncode` attribute."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:240
msgid "Kill the subprocess, as in :meth:`subprocess.Popen.kill`."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:242
msgid ""
"On POSIX systems, the function sends SIGKILL to the subprocess. On Windows, "
"this method is an alias for :meth:`terminate`."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:247
msgid ""
"Send the *signal* number to the subprocess, as in :meth:`subprocess.Popen."
"send_signal`."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:252
msgid ""
"Ask the subprocess to stop, as in :meth:`subprocess.Popen.terminate`. This "
"method is an alias for the :meth:`close` method."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:255
msgid ""
"On POSIX systems, this method sends SIGTERM to the subprocess. On Windows, "
"the Windows API function TerminateProcess() is called to stop the subprocess."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:261
msgid ""
"Ask the subprocess to stop by calling the :meth:`terminate` method if the "
"subprocess hasn't returned yet, and close transports of all pipes (*stdin*, "
"*stdout* and *stderr*)."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:269
msgid "Protocols"
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:271
msgid ""
":mod:`asyncio` provides base classes that you can subclass to implement your "
"network protocols.  Those classes are used in conjunction with :ref:"
"`transports <asyncio-transport>` (see below): the protocol parses incoming "
"data and asks for the writing of outgoing data, while the transport is "
"responsible for the actual I/O and buffering."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:277
msgid ""
"When subclassing a protocol class, it is recommended you override certain "
"methods.  Those methods are callbacks: they will be called by the transport "
"on certain events (for example when some data is received); you shouldn't "
"call them yourself, unless you are implementing a transport."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:283
msgid ""
"All callbacks have default implementations, which are empty.  Therefore, you "
"only need to implement the callbacks for the events in which you are "
"interested."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:289
msgid "Protocol classes"
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:293
msgid ""
"The base class for implementing streaming protocols (for use with e.g. TCP "
"and SSL transports)."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:298
msgid ""
"The base class for implementing datagram protocols (for use with e.g. UDP "
"transports)."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:303
msgid ""
"The base class for implementing protocols communicating with child processes "
"(through a set of unidirectional pipes)."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:308
msgid "Connection callbacks"
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:310
#: ../Doc/library/asyncio-protocol.rst:422
msgid ""
"These callbacks may be called on :class:`Protocol`, :class:"
"`DatagramProtocol` and :class:`SubprocessProtocol` instances:"
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:315
msgid "Called when a connection is made."
msgstr "Appelé lorsqu'une connexion est établie."

#: ../Doc/library/asyncio-protocol.rst:317
msgid ""
"The *transport* argument is the transport representing the connection.  You "
"are responsible for storing it somewhere (e.g. as an attribute) if you need "
"to."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:323
msgid "Called when the connection is lost or closed."
msgstr "Appelé lorsqu'une connexion est perdue ou fermée."

#: ../Doc/library/asyncio-protocol.rst:325
msgid ""
"The argument is either an exception object or :const:`None`. The latter "
"means a regular EOF is received, or the connection was aborted or closed by "
"this side of the connection."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:329
msgid ""
":meth:`~BaseProtocol.connection_made` and :meth:`~BaseProtocol."
"connection_lost` are called exactly once per successful connection.  All "
"other callbacks will be called between those two methods, which allows for "
"easier resource management in your protocol implementation."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:334
msgid ""
"The following callbacks may be called only on :class:`SubprocessProtocol` "
"instances:"
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:339
msgid ""
"Called when the child process writes data into its stdout or stderr pipe. "
"*fd* is the integer file descriptor of the pipe.  *data* is a non-empty "
"bytes object containing the data."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:345
msgid ""
"Called when one of the pipes communicating with the child process is "
"closed.  *fd* is the integer file descriptor that was closed."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:350
msgid "Called when the child process has exited."
msgstr "Appelé lorsqu'un processus enfant se termine."

#: ../Doc/library/asyncio-protocol.rst:354
msgid "Streaming protocols"
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:356
msgid "The following callbacks are called on :class:`Protocol` instances:"
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:360
msgid ""
"Called when some data is received.  *data* is a non-empty bytes object "
"containing the incoming data."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:364
msgid ""
"Whether the data is buffered, chunked or reassembled depends on the "
"transport.  In general, you shouldn't rely on specific semantics and instead "
"make your parsing generic and flexible enough.  However, data is always "
"received in the correct order."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:371
msgid ""
"Calls when the other end signals it won't send any more data (for example by "
"calling :meth:`write_eof`, if the other end also uses asyncio)."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:375
msgid ""
"This method may return a false value (including ``None``), in which case the "
"transport will close itself.  Conversely, if this method returns a true "
"value, closing the transport is up to the protocol.  Since the default "
"implementation returns ``None``, it implicitly closes the connection."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:381
msgid ""
"Some transports such as SSL don't support half-closed connections, in which "
"case returning true from this method will not prevent closing the connection."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:385
msgid ""
":meth:`data_received` can be called an arbitrary number of times during a "
"connection.  However, :meth:`eof_received` is called at most once and, if "
"called, :meth:`data_received` won't be called after it."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:389
msgid "State machine:"
msgstr "Machine à états :"

#: ../Doc/library/asyncio-protocol.rst:391
msgid ""
"start -> :meth:`~BaseProtocol.connection_made` [-> :meth:`~Protocol."
"data_received` \\*] [-> :meth:`~Protocol.eof_received` ?] -> :meth:"
"`~BaseProtocol.connection_lost` -> end"
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:398
msgid "Datagram protocols"
msgstr "Protocoles de datagrammes"

#: ../Doc/library/asyncio-protocol.rst:400
msgid ""
"The following callbacks are called on :class:`DatagramProtocol` instances."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:404
msgid ""
"Called when a datagram is received.  *data* is a bytes object containing the "
"incoming data.  *addr* is the address of the peer sending the data; the "
"exact format depends on the transport."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:410
msgid ""
"Called when a previous send or receive operation raises an :class:"
"`OSError`.  *exc* is the :class:`OSError` instance."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:413
msgid ""
"This method is called in rare conditions, when the transport (e.g. UDP) "
"detects that a datagram couldn't be delivered to its recipient. In many "
"conditions though, undeliverable datagrams will be silently dropped."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:420
msgid "Flow control callbacks"
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:427
msgid "Called when the transport's buffer goes over the high-water mark."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:431
msgid "Called when the transport's buffer drains below the low-water mark."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:434
msgid ""
":meth:`pause_writing` and :meth:`resume_writing` calls are paired -- :meth:"
"`pause_writing` is called once when the buffer goes strictly over the high-"
"water mark (even if subsequent writes increases the buffer size even more), "
"and eventually :meth:`resume_writing` is called once when the buffer size "
"reaches the low-water mark."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:441
msgid ""
"If the buffer size equals the high-water mark, :meth:`pause_writing` is not "
"called -- it must go strictly over. Conversely, :meth:`resume_writing` is "
"called when the buffer size is equal or lower than the low-water mark.  "
"These end conditions are important to ensure that things go as expected when "
"either mark is zero."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:449
msgid ""
"On BSD systems (OS X, FreeBSD, etc.) flow control is not supported for :"
"class:`DatagramProtocol`, because send failures caused by writing too many "
"packets cannot be detected easily.  The socket always appears 'ready' and "
"excess packets are dropped; an :class:`OSError` with errno set to :const:"
"`errno.ENOBUFS` may or may not be raised; if it is raised, it will be "
"reported to :meth:`DatagramProtocol.error_received` but otherwise ignored."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:459
msgid "Coroutines and protocols"
msgstr "Coroutines et protocoles"

#: ../Doc/library/asyncio-protocol.rst:461
msgid ""
"Coroutines can be scheduled in a protocol method using :func:"
"`ensure_future`, but there is no guarantee made about the execution order.  "
"Protocols are not aware of coroutines created in protocol methods and so "
"will not wait for them."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:465
msgid ""
"To have a reliable execution order, use :ref:`stream objects <asyncio-"
"streams>` in a coroutine with ``yield from``. For example, the :meth:"
"`StreamWriter.drain` coroutine can be used to wait until the write buffer is "
"flushed."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:471
msgid "Protocol examples"
msgstr "Exemples de protocole"

#: ../Doc/library/asyncio-protocol.rst:476
msgid "TCP echo client protocol"
msgstr "Protocole \"echo client\" en TCP"

#: ../Doc/library/asyncio-protocol.rst:478
msgid ""
"TCP echo client  using the :meth:`AbstractEventLoop.create_connection` "
"method, send data and wait until the connection is closed::"
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:508
msgid ""
"The event loop is running twice. The :meth:`~AbstractEventLoop."
"run_until_complete` method is preferred in this short example to raise an "
"exception if the server is not listening, instead of having to write a short "
"coroutine to handle the exception and stop the running loop. At :meth:"
"`~AbstractEventLoop.run_until_complete` exit, the loop is no longer running, "
"so there is no need to stop the loop in case of an error."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:517
msgid ""
"The :ref:`TCP echo client using streams <asyncio-tcp-echo-client-streams>` "
"example uses the :func:`asyncio.open_connection` function."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:524
msgid "TCP echo server protocol"
msgstr "Protocole \"echo serveur\" en TCP"

#: ../Doc/library/asyncio-protocol.rst:526
msgid ""
"TCP echo server using the :meth:`AbstractEventLoop.create_server` method, "
"send back received data and close the connection::"
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:564
msgid ""
":meth:`Transport.close` can be called immediately after :meth:"
"`WriteTransport.write` even if data are not sent yet on the socket: both "
"methods are asynchronous. ``yield from`` is not needed because these "
"transport methods are not coroutines."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:571
msgid ""
"The :ref:`TCP echo server using streams <asyncio-tcp-echo-server-streams>` "
"example uses the :func:`asyncio.start_server` function."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:578
msgid "UDP echo client protocol"
msgstr "Protocole \"echo client\" en UDP"

#: ../Doc/library/asyncio-protocol.rst:580
msgid ""
"UDP echo client using the :meth:`AbstractEventLoop.create_datagram_endpoint` "
"method, send data and close the transport when we received the answer::"
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:624
msgid "UDP echo server protocol"
msgstr "Protocole \"echo serveur\" en UDP"

#: ../Doc/library/asyncio-protocol.rst:626
msgid ""
"UDP echo server using the :meth:`AbstractEventLoop.create_datagram_endpoint` "
"method, send back received data::"
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:660
msgid "Register an open socket to wait for data using a protocol"
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:662
msgid ""
"Wait until a socket receives data using the :meth:`AbstractEventLoop."
"create_connection` method with a protocol, and then close the event loop ::"
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:709
msgid ""
"The :ref:`watch a file descriptor for read events <asyncio-watch-read-"
"event>` example uses the low-level :meth:`AbstractEventLoop.add_reader` "
"method to register the file descriptor of a socket."
msgstr ""

#: ../Doc/library/asyncio-protocol.rst:714
msgid ""
"The :ref:`register an open socket to wait for data using streams <asyncio-"
"register-socket-streams>` example uses high-level streams created by the :"
"func:`open_connection` function in a coroutine."
msgstr ""
