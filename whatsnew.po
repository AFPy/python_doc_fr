# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2010, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2010-06-30 14:00\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 1.7.0\n"

msgid "What's New in Python 2.0"
msgstr "Nouveautés de Python 2.0"

msgid "Author"
msgstr "Auteur"

msgid "A.M. Kuchling and Moshe Zadka"
msgstr "A.M. Kuchling et Moshe Zadka"

msgid "Introduction"
msgstr "Introduction"

#, fuzzy
msgid "A new release of Python, version 2.0, was released on October 16, 2000. This article covers the exciting new features in 2.0, highlights some other useful changes, and points out a few incompatible changes that may require rewriting code."
msgstr ""
"Une nouvelle version de Python, la version 2.0, est sortie le 16 octobre "
"2000. Cet article traite des nouvelles fonctionnalités intéressantes de "
"cette version, met en évidence d'autres changements utiles, et souligne "
"quelques incompatibilités qui peuvent nécessiter la réécriture du code."

#, fuzzy
msgid "Python's development never completely stops between releases, and a steady flow of bug fixes and improvements are always being submitted. A host of minor fixes, a few optimizations, additional docstrings, and better error messages went into 2.0; to list them all would be impossible, but they're certainly significant. Consult the publicly-available CVS logs if you want to see the full list.  This progress is due to the five developers working for  PythonLabs are now getting paid to spend their days fixing bugs, and also due to the improved communication resulting  from moving to SourceForge."
msgstr ""
"Le développement de Python n'a jamais complétement été arrêté entre chaque "
"versions, et un flux constant de corrections de bogues et d'améliorations "
"ont toujours été soumis. Une foule de corrections mineures, quelques "
"optimisations, des docstrings supplémentaires, et de meilleurs messages "
"d'erreur sont apparus avec l'arrivée de la version 2.0; tous les énumérer "
"serait impossible, mais ils sont certainement significatif. Consultez les "
"journaux CVS publics disponibles pour obtenir la liste complète. Ce progrès "
"est dû aux cinq développeurs travaillant pour PythonLabs qui sont désormais "
"payés pour passer leurs journées à corriger les bugs, mais aussi en raison "
"de l'amélioration de la communication résultant du passage à SourceForge."

#, fuzzy
msgid "What About Python 1.6?"
msgstr "A propos de Python 1.6"

msgid "Python 1.6 can be thought of as the Contractual Obligations Python release. After the core development team left CNRI in May 2000, CNRI requested that a 1.6 release be created, containing all the work on Python that had been performed at CNRI.  Python 1.6 therefore represents the state of the CVS tree as of May 2000, with the most significant new feature being Unicode support.  Development continued after May, of course, so the 1.6 tree received a few fixes to ensure that it's forward-compatible with Python 2.0.  1.6 is therefore part of Python's evolution, and not a side branch."
msgstr ""

msgid "So, should you take much interest in Python 1.6?  Probably not.  The 1.6final and 2.0beta1 releases were made on the same day (September 5, 2000), the plan being to finalize Python 2.0 within a month or so.  If you have applications to maintain, there seems little point in breaking things by moving to 1.6, fixing them, and then having another round of breakage within a month by moving to 2.0; you're better off just going straight to 2.0.  Most of the really interesting features described in this document are only in 2.0, because a lot of work was done between May and September."
msgstr ""

msgid "New Development Process"
msgstr "Nouveau processus de développement"

msgid "The most important change in Python 2.0 may not be to the code at all, but to how Python is developed: in May 2000 the Python developers began using the tools made available by SourceForge for storing  source code, tracking bug reports, and managing the queue of patch submissions.  To report bugs or submit patches for Python 2.0, use the bug tracking and patch manager tools available from Python's project page, located at http://sourceforge.net/projects/python/."
msgstr ""

msgid "The most important of the services now hosted at SourceForge is the Python CVS tree, the version-controlled repository containing the source code for Python. Previously, there were roughly 7 or so people who had write access to the CVS tree, and all patches had to be inspected and checked in by one of the people on this short list. Obviously, this wasn't very scalable.  By moving the CVS tree to SourceForge, it became possible to grant write access to more people; as of September 2000 there were 27 people able to check in changes, a fourfold increase.  This makes possible large-scale changes that wouldn't be attempted if they'd have to be filtered through the small group of core developers.  For example, one day Peter Schneider-Kamp took it into his head to drop K&R C compatibility and convert the C source for Python to ANSI C. After getting approval on the python-dev mailing list, he launched into a flurry of checkins that lasted about a week, other developers joined in to help, and the job was done.  If there were only 5 people with write access, probably that task would have been viewed as \"nice, but not worth the time and effort needed\" and it would never have gotten done."
msgstr ""

msgid "The shift to using SourceForge's services has resulted in a remarkable increase in the speed of development.  Patches now get submitted, commented on, revised by people other than the original submitter, and bounced back and forth between people until the patch is deemed worth checking in.  Bugs are tracked in one central location and can be assigned to a specific person for fixing, and we can count the number of open bugs to measure progress.  This didn't come without a cost: developers now have more e-mail to deal with, more mailing lists to follow, and special tools had to be written for the new environment. For example, SourceForge sends default patch and bug notification e-mail messages that are completely unhelpful, so Ka-Ping Yee wrote an HTML screen-scraper that sends more useful messages."
msgstr ""

msgid "The ease of adding code caused a few initial growing pains, such as code was checked in before it was ready or without getting clear agreement from the developer group.  The approval process that has emerged is somewhat similar to that used by the Apache group. Developers can vote +1, +0, -0, or -1 on a patch; +1 and -1 denote acceptance or rejection, while +0 and -0 mean the developer is mostly indifferent to the change, though with a slight positive or negative slant.  The most significant change from the Apache model is that the voting is essentially advisory, letting Guido van Rossum, who has Benevolent Dictator For Life status, know what the general opinion is. He can still ignore the result of a vote, and approve or reject a change even if the community disagrees with him."
msgstr ""

msgid "Producing an actual patch is the last step in adding a new feature, and is usually easy compared to the earlier task of coming up with a good design. Discussions of new features can often explode into lengthy mailing list threads, making the discussion hard to follow, and no one can read every posting to python-dev.  Therefore, a relatively formal process has been set up to write Python Enhancement Proposals (PEPs), modelled on the Internet RFC process.  PEPs are draft documents that describe a proposed new feature, and are continually revised until the community reaches a consensus, either accepting or rejecting the proposal.  Quoting from the introduction to PEP 1, \"PEP Purpose and Guidelines\":"
msgstr ""

msgid "PEP stands for Python Enhancement Proposal.  A PEP is a design document providing information to the Python community, or describing a new feature for Python.  The PEP should provide a concise technical specification of the feature and a rationale for the feature."
msgstr ""

msgid "We intend PEPs to be the primary mechanisms for proposing new features, for collecting community input on an issue, and for documenting the design decisions that have gone into Python.  The PEP author is responsible for building consensus within the community and documenting dissenting opinions."
msgstr ""

msgid "Read the rest of PEP 1 for the details of the PEP editorial process, style, and format.  PEPs are kept in the Python CVS tree on SourceForge, though they're not part of the Python 2.0 distribution, and are also available in HTML form from http://www.python.org/peps/.  As of September 2000, there are 25 PEPS, ranging from PEP 201, \"Lockstep Iteration\", to PEP 225, \"Elementwise/Objectwise Operators\"."
msgstr ""

msgid "Unicode"
msgstr ""

msgid "The largest new feature in Python 2.0 is a new fundamental data type: Unicode strings.  Unicode uses 16-bit numbers to represent characters instead of the 8-bit number used by ASCII, meaning that 65,536 distinct characters can be supported."
msgstr ""

msgid "The final interface for Unicode support was arrived at through countless often- stormy discussions on the python-dev mailing list, and mostly implemented by Marc-André Lemburg, based on a Unicode string type implementation by Fredrik Lundh.  A detailed explanation of the interface was written up as :pep:`100`, \"Python Unicode Integration\". This article will simply cover the most significant points about the Unicode interfaces."
msgstr ""

msgid "In Python source code, Unicode strings are written as ``u\"string\"``.  Arbitrary Unicode characters can be written using a new escape sequence, ``\\uHHHH``, where *HHHH* is a 4-digit hexadecimal number from 0000 to FFFF.  The existing ``\\xHHHH`` escape sequence can also be used, and octal escapes can be used for characters up to U+01FF, which is represented by ``\\777``."
msgstr ""

msgid "Unicode strings, just like regular strings, are an immutable sequence type. They can be indexed and sliced, but not modified in place. Unicode strings have an ``encode( [encoding] )`` method that returns an 8-bit string in the desired encoding.  Encodings are named by strings, such as ``'ascii'``, ``'utf-8'``, ``'iso-8859-1'``, or whatever.  A codec API is defined for implementing and registering new encodings that are then available throughout a Python program. If an encoding isn't specified, the default encoding is usually 7-bit ASCII, though it can be changed for your Python installation by calling the :func:`sys.setdefaultencoding(encoding)` function in a customised version of :file:`site.py`."
msgstr ""

msgid "Combining 8-bit and Unicode strings always coerces to Unicode, using the default ASCII encoding; the result of ``'a' + u'bc'`` is ``u'abc'``."
msgstr ""

msgid "New built-in functions have been added, and existing built-ins modified to support Unicode:"
msgstr ""

msgid "``unichr(ch)`` returns a Unicode string 1 character long, containing the character *ch*."
msgstr ""

msgid "``ord(u)``, where *u* is a 1-character regular or Unicode string, returns the number of the character as an integer."
msgstr ""

msgid "``unicode(string [, encoding]  [, errors] )`` creates a Unicode string from an 8-bit string.  ``encoding`` is a string naming the encoding to use. The ``errors`` parameter specifies the treatment of characters that are invalid for the current encoding; passing ``'strict'`` as the value causes an exception to be raised on any encoding error, while ``'ignore'`` causes errors to be silently ignored and ``'replace'`` uses U+FFFD, the official replacement character, in case of any problems."
msgstr ""

msgid "The :keyword:`exec` statement, and various built-ins such as ``eval()``, ``getattr()``, and ``setattr()`` will also accept Unicode strings as well as regular strings.  (It's possible that the process of fixing this missed some built-ins; if you find a built-in function that accepts strings but doesn't accept Unicode strings at all, please report it as a bug.)"
msgstr ""

msgid "A new module, :mod:`unicodedata`, provides an interface to Unicode character properties.  For example, ``unicodedata.category(u'A')`` returns the 2-character string 'Lu', the 'L' denoting it's a letter, and 'u' meaning that it's uppercase. ``unicodedata.bidirectional(u'\\u0660')`` returns 'AN', meaning that U+0660 is an Arabic number."
msgstr ""

msgid "The :mod:`codecs` module contains functions to look up existing encodings and register new ones.  Unless you want to implement a new encoding, you'll most often use the :func:`codecs.lookup(encoding)` function, which returns a 4-element tuple: ``(encode_func, decode_func, stream_reader, stream_writer)``."
msgstr ""

msgid "*encode_func* is a function that takes a Unicode string, and returns a 2-tuple ``(string, length)``.  *string* is an 8-bit string containing a portion (perhaps all) of the Unicode string converted into the given encoding, and *length* tells you how much of the Unicode string was converted."
msgstr ""

msgid "*decode_func* is the opposite of *encode_func*, taking an 8-bit string and returning a 2-tuple ``(ustring, length)``, consisting of the resulting Unicode string *ustring* and the integer *length* telling how much of the 8-bit string was consumed."
msgstr ""

msgid "*stream_reader* is a class that supports decoding input from a stream. *stream_reader(file_obj)* returns an object that supports the :meth:`read`, :meth:`readline`, and :meth:`readlines` methods.  These methods will all translate from the given encoding and return Unicode strings."
msgstr ""

msgid "*stream_writer*, similarly, is a class that supports encoding output to a stream.  *stream_writer(file_obj)* returns an object that supports the :meth:`write` and :meth:`writelines` methods.  These methods expect Unicode strings, translating them to the given encoding on output."
msgstr ""

msgid "For example, the following code writes a Unicode string into a file,  encoding it as UTF-8::"
msgstr ""

msgid "import codecs  unistr = u'\\u0660\\u2000ab ...'  (UTF8_encode, UTF8_decode,  UTF8_streamreader, UTF8_streamwriter) = codecs.lookup('UTF-8')  output = UTF8_streamwriter( open( '/tmp/output', 'wb') ) output.write( unistr ) output.close()"
msgstr ""

msgid "The following code would then read UTF-8 input from the file::"
msgstr ""

msgid "input = UTF8_streamreader( open( '/tmp/output', 'rb') ) print repr(input.read()) input.close()"
msgstr ""

msgid "Unicode-aware regular expressions are available through the :mod:`re` module, which has a new underlying implementation called SRE written by Fredrik Lundh of Secret Labs AB."
msgstr ""

msgid "A ``-U`` command line option was added which causes the Python compiler to interpret all string literals as Unicode string literals. This is intended to be used in testing and future-proofing your Python code, since some future version of Python may drop support for 8-bit strings and provide only Unicode strings."
msgstr ""

msgid "List Comprehensions"
msgstr ""

msgid "Lists are a workhorse data type in Python, and many programs manipulate a list at some point.  Two common operations on lists are to loop over them, and either pick out the elements that meet a certain criterion, or apply some function to each element.  For example, given a list of strings, you might want to pull out all the strings containing a given substring, or strip off trailing whitespace from each line."
msgstr ""

msgid "The existing :func:`map` and :func:`filter` functions can be used for this purpose, but they require a function as one of their arguments.  This is fine if there's an existing built-in function that can be passed directly, but if there isn't, you have to create a little function to do the required work, and Python's scoping rules make the result ugly if the little function needs additional information.  Take the first example in the previous paragraph, finding all the strings in the list containing a given substring.  You could write the following to do it::"
msgstr ""

msgid "# Given the list L, make a list of all strings # containing the substring S. sublist = filter( lambda s, substring=S:                      string.find(s, substring) != -1,                   L)"
msgstr ""

msgid "Because of Python's scoping rules, a default argument is used so that the anonymous function created by the :keyword:`lambda` statement knows what substring is being searched for.  List comprehensions make this cleaner::"
msgstr ""

msgid "sublist = [ s for s in L if string.find(s, S) != -1 ]"
msgstr ""

msgid "List comprehensions have the form::"
msgstr ""

msgid "[ expression for expr in sequence1              for expr2 in sequence2 ...              for exprN in sequenceN              if condition ]"
msgstr ""

msgid "The :keyword:`for`...\\ :keyword:`in` clauses contain the sequences to be iterated over.  The sequences do not have to be the same length, because they are *not* iterated over in parallel, but from left to right; this is explained more clearly in the following paragraphs.  The elements of the generated list will be the successive values of *expression*.  The final :keyword:`if` clause is optional; if present, *expression* is only evaluated and added to the result if *condition* is true."
msgstr ""

msgid "To make the semantics very clear, a list comprehension is equivalent to the following Python code::"
msgstr ""

msgid "for expr1 in sequence1:     for expr2 in sequence2:     ...         for exprN in sequenceN:              if (condition):                   # Append the value of                   # the expression to the                   # resulting list."
msgstr ""

msgid "This means that when there are multiple :keyword:`for`...\\ :keyword:`in` clauses, the resulting list will be equal to the product of the lengths of all the sequences.  If you have two lists of length 3, the output list is 9 elements long::"
msgstr ""

msgid "seq1 = 'abc' seq2 = (1,2,3) >>> [ (x,y) for x in seq1 for y in seq2] [('a', 1), ('a', 2), ('a', 3), ('b', 1), ('b', 2), ('b', 3), ('c', 1), ('c', 2), ('c', 3)]"
msgstr ""

msgid "To avoid introducing an ambiguity into Python's grammar, if *expression* is creating a tuple, it must be surrounded with parentheses.  The first list comprehension below is a syntax error, while the second one is correct::"
msgstr ""

msgid "# Syntax error [ x,y for x in seq1 for y in seq2] # Correct [ (x,y) for x in seq1 for y in seq2]"
msgstr ""

msgid "The idea of list comprehensions originally comes from the functional programming language Haskell (http://www.haskell.org).  Greg Ewing argued most effectively for adding them to Python and wrote the initial list comprehension patch, which was then discussed for a seemingly endless time on the python-dev mailing list and kept up-to-date by Skip Montanaro."
msgstr ""

msgid "Augmented Assignment"
msgstr ""

msgid "Augmented assignment operators, another long-requested feature, have been added to Python 2.0.  Augmented assignment operators include ``+=``, ``-=``, ``*=``, and so forth.  For example, the statement ``a += 2`` increments the value of the variable  ``a`` by 2, equivalent to the slightly lengthier ``a = a + 2``."
msgstr ""

msgid "The full list of supported assignment operators is ``+=``, ``-=``, ``*=``, ``/=``, ``%=``, ``**=``, ``&=``, ``|=``, ``^=``, ``>>=``, and ``<<=``.  Python classes can override the augmented assignment operators by defining methods named :meth:`__iadd__`, :meth:`__isub__`, etc.  For example, the following :class:`Number` class stores a number and supports using += to create a new instance with an incremented value."
msgstr ""

msgid "class Number:     def __init__(self, value):         self.value = value     def __iadd__(self, increment):         return Number( self.value + increment)  n = Number(5) n += 3 print n.value"
msgstr ""

msgid "The :meth:`__iadd__` special method is called with the value of the increment, and should return a new instance with an appropriately modified value; this return value is bound as the new value of the variable on the left-hand side."
msgstr ""

msgid "Augmented assignment operators were first introduced in the C programming language, and most C-derived languages, such as :program:`awk`, C++, Java, Perl, and PHP also support them.  The augmented assignment patch was implemented by Thomas Wouters."
msgstr ""

msgid "String Methods"
msgstr ""

msgid "Until now string-manipulation functionality was in the :mod:`string` module, which was usually a front-end for the :mod:`strop` module written in C.  The addition of Unicode posed a difficulty for the :mod:`strop` module, because the functions would all need to be rewritten in order to accept either 8-bit or Unicode strings.  For functions such as :func:`string.replace`, which takes 3 string arguments, that means eight possible permutations, and correspondingly complicated code."
msgstr ""

msgid "Instead, Python 2.0 pushes the problem onto the string type, making string manipulation functionality available through methods on both 8-bit strings and Unicode strings.   ::"
msgstr ""

msgid ">>> 'andrew'.capitalize() 'Andrew' >>> 'hostname'.replace('os', 'linux') 'hlinuxtname' >>> 'moshe'.find('sh') 2"
msgstr ""

msgid "One thing that hasn't changed, a noteworthy April Fools' joke notwithstanding, is that Python strings are immutable. Thus, the string methods return new strings, and do not modify the string on which they operate."
msgstr ""

msgid "The old :mod:`string` module is still around for backwards compatibility, but it mostly acts as a front-end to the new string methods."
msgstr ""

msgid "Two methods which have no parallel in pre-2.0 versions, although they did exist in JPython for quite some time, are :meth:`startswith` and :meth:`endswith`. ``s.startswith(t)`` is equivalent to ``s[:len(t)] == t``, while ``s.endswith(t)`` is equivalent to ``s[-len(t):] == t``."
msgstr ""

msgid "One other method which deserves special mention is :meth:`join`.  The :meth:`join` method of a string receives one parameter, a sequence of strings, and is equivalent to the :func:`string.join` function from the old :mod:`string` module, with the arguments reversed. In other words, ``s.join(seq)`` is equivalent to the old ``string.join(seq, s)``."
msgstr ""

msgid "Garbage Collection of Cycles"
msgstr ""

msgid "The C implementation of Python uses reference counting to implement garbage collection.  Every Python object maintains a count of the number of references pointing to itself, and adjusts the count as references are created or destroyed.  Once the reference count reaches zero, the object is no longer accessible, since you need to have a reference to an object to access it, and if the count is zero, no references exist any longer."
msgstr ""

msgid "Reference counting has some pleasant properties: it's easy to understand and implement, and the resulting implementation is portable, fairly fast, and reacts well with other libraries that implement their own memory handling schemes.  The major problem with reference counting is that it sometimes doesn't realise that objects are no longer accessible, resulting in a memory leak.  This happens when there are cycles of references."
msgstr ""

msgid "Consider the simplest possible cycle,  a class instance which has a reference to itself::"
msgstr ""

msgid "instance = SomeClass() instance.myself = instance"
msgstr ""

msgid "After the above two lines of code have been executed, the reference count of ``instance`` is 2; one reference is from the variable named ``'instance'``, and the other is from the ``myself`` attribute of the instance."
msgstr ""

msgid "If the next line of code is ``del instance``, what happens?  The reference count of ``instance`` is decreased by 1, so it has a reference count of 1; the reference in the ``myself`` attribute still exists.  Yet the instance is no longer accessible through Python code, and it could be deleted.  Several objects can participate in a cycle if they have references to each other, causing all of the objects to be leaked."
msgstr ""

msgid "Python 2.0 fixes this problem by periodically executing a cycle detection algorithm which looks for inaccessible cycles and deletes the objects involved. A new :mod:`gc` module provides functions to perform a garbage collection, obtain debugging statistics, and tuning the collector's parameters."
msgstr ""

msgid "Running the cycle detection algorithm takes some time, and therefore will result in some additional overhead.  It is hoped that after we've gotten experience with the cycle collection from using 2.0, Python 2.1 will be able to minimize the overhead with careful tuning.  It's not yet obvious how much performance is lost, because benchmarking this is tricky and depends crucially on how often the program creates and destroys objects.  The detection of cycles can be disabled when Python is compiled, if you can't afford even a tiny speed penalty or suspect that the cycle collection is buggy, by specifying the :option:`--without-cycle-gc` switch when running the :program:`configure` script."
msgstr ""

msgid "Several people tackled this problem and contributed to a solution.  An early implementation of the cycle detection approach was written by Toby Kelsey.  The current algorithm was suggested by Eric Tiedemann during a visit to CNRI, and Guido van Rossum and Neil Schemenauer wrote two different implementations, which were later integrated by Neil.  Lots of other people offered suggestions along the way; the March 2000 archives of the python-dev mailing list contain most of the relevant discussion, especially in the threads titled \"Reference cycle collection for Python\" and \"Finalization again\"."
msgstr ""

msgid "Other Core Changes"
msgstr ""

msgid "Various minor changes have been made to Python's syntax and built-in functions. None of the changes are very far-reaching, but they're handy conveniences."
msgstr ""

msgid "Minor Language Changes"
msgstr ""

msgid "A new syntax makes it more convenient to call a given function with a tuple of arguments and/or a dictionary of keyword arguments. In Python 1.5 and earlier, you'd use the :func:`apply` built-in function: ``apply(f, args, kw)`` calls the function :func:`f` with the argument tuple *args* and the keyword arguments in the dictionary *kw*.  :func:`apply`  is the same in 2.0, but thanks to a patch from Greg Ewing, ``f(*args, **kw)`` as a shorter and clearer way to achieve the same effect.  This syntax is symmetrical with the syntax for defining functions::"
msgstr ""

msgid "def f(*args, **kw):     # args is a tuple of positional args,     # kw is a dictionary of keyword args     ..."
msgstr ""

msgid "The :keyword:`print` statement can now have its output directed to a file-like object by following the :keyword:`print` with  ``>> file``, similar to the redirection operator in Unix shells. Previously you'd either have to use the :meth:`write` method of the file-like object, which lacks the convenience and simplicity of :keyword:`print`, or you could assign a new value to ``sys.stdout`` and then restore the old value.  For sending output to standard error, it's much easier to write this::"
msgstr ""

msgid "print >> sys.stderr, \"Warning: action field not supplied\""
msgstr ""

msgid "Modules can now be renamed on importing them, using the syntax ``import module as name`` or ``from module import name as othername``.  The patch was submitted by Thomas Wouters."
msgstr ""

msgid "A new format style is available when using the ``%`` operator; '%r' will insert the :func:`repr` of its argument.  This was also added from symmetry considerations, this time for symmetry with the existing '%s' format style, which inserts the :func:`str` of its argument.  For example, ``'%r %s' % ('abc', 'abc')`` returns a string containing ``'abc' abc``."
msgstr ""

msgid "Previously there was no way to implement a class that overrode Python's built-in :keyword:`in` operator and implemented a custom version.  ``obj in seq`` returns true if *obj* is present in the sequence *seq*; Python computes this by simply trying every index of the sequence until either *obj* is found or an :exc:`IndexError` is encountered.  Moshe Zadka contributed a patch which adds a :meth:`__contains__` magic method for providing a custom implementation for :keyword:`in`. Additionally, new built-in objects written in C can define what :keyword:`in` means for them via a new slot in the sequence protocol."
msgstr ""

msgid "Earlier versions of Python used a recursive algorithm for deleting objects. Deeply nested data structures could cause the interpreter to fill up the C stack and crash; Christian Tismer rewrote the deletion logic to fix this problem.  On a related note, comparing recursive objects recursed infinitely and crashed; Jeremy Hylton rewrote the code to no longer crash, producing a useful result instead.  For example, after this code::"
msgstr ""

msgid "a = [] b = [] a.append(a) b.append(b)"
msgstr ""

msgid "The comparison ``a==b`` returns true, because the two recursive data structures are isomorphic. See the thread \"trashcan and PR#7\" in the April 2000 archives of the python-dev mailing list for the discussion leading up to this implementation, and some useful relevant links.    Note that comparisons can now also raise exceptions. In earlier versions of Python, a comparison operation such as ``cmp(a,b)`` would always produce an answer, even if a user-defined :meth:`__cmp__` method encountered an error, since the resulting exception would simply be silently swallowed."
msgstr ""

msgid "Work has been done on porting Python to 64-bit Windows on the Itanium processor, mostly by Trent Mick of ActiveState.  (Confusingly, ``sys.platform`` is still ``'win32'`` on Win64 because it seems that for ease of porting, MS Visual C++ treats code as 32 bit on Itanium.) PythonWin also supports Windows CE; see the Python CE page at http://pythonce.sourceforge.net/ for more information."
msgstr ""

msgid "Another new platform is Darwin/MacOS X; initial support for it is in Python 2.0. Dynamic loading works, if you specify \"configure --with-dyld --with-suffix=.x\". Consult the README in the Python source distribution for more instructions."
msgstr ""

msgid "An attempt has been made to alleviate one of Python's warts, the often-confusing :exc:`NameError` exception when code refers to a local variable before the variable has been assigned a value.  For example, the following code raises an exception on the :keyword:`print` statement in both 1.5.2 and 2.0; in 1.5.2 a :exc:`NameError` exception is raised, while 2.0 raises a new :exc:`UnboundLocalError` exception. :exc:`UnboundLocalError` is a subclass of :exc:`NameError`, so any existing code that expects :exc:`NameError` to be raised should still work. ::"
msgstr ""

msgid "def f():     print \"i=\",i     i = i + 1 f()"
msgstr ""

msgid "Two new exceptions, :exc:`TabError` and :exc:`IndentationError`, have been introduced.  They're both subclasses of :exc:`SyntaxError`, and are raised when Python code is found to be improperly indented."
msgstr ""

msgid "Changes to Built-in Functions"
msgstr ""

msgid "A new built-in, :func:`zip(seq1, seq2, ...)`, has been added.  :func:`zip` returns a list of tuples where each tuple contains the i-th element from each of the argument sequences.  The difference between :func:`zip` and ``map(None, seq1, seq2)`` is that :func:`map` pads the sequences with ``None`` if the sequences aren't all of the same length, while :func:`zip` truncates the returned list to the length of the shortest argument sequence."
msgstr ""

msgid "The :func:`int` and :func:`long` functions now accept an optional \"base\" parameter when the first argument is a string. ``int('123', 10)`` returns 123, while ``int('123', 16)`` returns 291.  ``int(123, 16)`` raises a :exc:`TypeError` exception with the message \"can't convert non-string with explicit base\"."
msgstr ""

msgid "A new variable holding more detailed version information has been added to the :mod:`sys` module.  ``sys.version_info`` is a tuple ``(major, minor, micro, level, serial)`` For example, in a hypothetical 2.0.1beta1, ``sys.version_info`` would be ``(2, 0, 1, 'beta', 1)``. *level* is a string such as ``\"alpha\"``, ``\"beta\"``, or ``\"final\"`` for a final release."
msgstr ""

msgid "Dictionaries have an odd new method, :meth:`setdefault(key, default)`, which behaves similarly to the existing :meth:`get` method.  However, if the key is missing, :meth:`setdefault` both returns the value of *default* as :meth:`get` would do, and also inserts it into the dictionary as the value for *key*.  Thus, the following lines of code::"
msgstr ""

msgid "if dict.has_key( key ): return dict[key] else:     dict[key] = []     return dict[key]"
msgstr ""

msgid "can be reduced to a single ``return dict.setdefault(key, [])`` statement."
msgstr ""

msgid "The interpreter sets a maximum recursion depth in order to catch runaway recursion before filling the C stack and causing a core dump or GPF.. Previously this limit was fixed when you compiled Python, but in 2.0 the maximum recursion depth can be read and modified using :func:`sys.getrecursionlimit` and :func:`sys.setrecursionlimit`. The default value is 1000, and a rough maximum value for a given platform can be found by running a new script, :file:`Misc/find_recursionlimit.py`."
msgstr ""

msgid "Porting to 2.0"
msgstr ""

msgid "New Python releases try hard to be compatible with previous releases, and the record has been pretty good.  However, some changes are considered useful enough, usually because they fix initial design decisions that turned out to be actively mistaken, that breaking backward compatibility can't always be avoided. This section lists the changes in Python 2.0 that may cause old Python code to break."
msgstr ""

msgid "The change which will probably break the most code is tightening up the arguments accepted by some methods.  Some methods would take multiple arguments and treat them as a tuple, particularly various list methods such as :meth:`.append` and :meth:`.insert`. In earlier versions of Python, if ``L`` is a list, ``L.append( 1,2 )`` appends the tuple ``(1,2)`` to the list.  In Python 2.0 this causes a :exc:`TypeError` exception to be raised, with the message: 'append requires exactly 1 argument; 2 given'.  The fix is to simply add an extra set of parentheses to pass both values as a tuple:  ``L.append( (1,2) )``."
msgstr ""

msgid "The earlier versions of these methods were more forgiving because they used an old function in Python's C interface to parse their arguments; 2.0 modernizes them to use :func:`PyArg_ParseTuple`, the current argument parsing function, which provides more helpful error messages and treats multi-argument calls as errors.  If you absolutely must use 2.0 but can't fix your code, you can edit :file:`Objects/listobject.c` and define the preprocessor symbol ``NO_STRICT_LIST_APPEND`` to preserve the old behaviour; this isn't recommended."
msgstr ""

msgid "Some of the functions in the :mod:`socket` module are still forgiving in this way.  For example, :func:`socket.connect( ('hostname', 25) )` is the correct form, passing a tuple representing an IP address, but :func:`socket.connect( 'hostname', 25 )` also works. :func:`socket.connect_ex` and :func:`socket.bind` are similarly easy-going.  2.0alpha1 tightened these functions up, but because the documentation actually used the erroneous multiple argument form, many people wrote code which would break with the stricter checking.  GvR backed out the changes in the face of public reaction, so for the :mod:`socket` module, the documentation was fixed and the multiple argument form is simply marked as deprecated; it *will* be tightened up again in a future Python version."
msgstr ""

msgid "The ``\\x`` escape in string literals now takes exactly 2 hex digits.  Previously it would consume all the hex digits following the 'x' and take the lowest 8 bits of the result, so ``\\x123456`` was equivalent to ``\\x56``."
msgstr ""

msgid "The :exc:`AttributeError` and :exc:`NameError` exceptions have a more friendly error message, whose text will be something like ``'Spam' instance has no attribute 'eggs'`` or ``name 'eggs' is not defined``.  Previously the error message was just the missing attribute name ``eggs``, and code written to take advantage of this fact will break in 2.0."
msgstr ""

msgid "Some work has been done to make integers and long integers a bit more interchangeable.  In 1.5.2, large-file support was added for Solaris, to allow reading files larger than 2 GiB; this made the :meth:`tell` method of file objects return a long integer instead of a regular integer.  Some code would subtract two file offsets and attempt to use the result to multiply a sequence or slice a string, but this raised a :exc:`TypeError`.  In 2.0, long integers can be used to multiply or slice a sequence, and it'll behave as you'd intuitively expect it to; ``3L * 'abc'`` produces 'abcabcabc', and ``(0,1,2,3)[2L:4L]`` produces (2,3). Long integers can also be used in various contexts where previously only integers were accepted, such as in the :meth:`seek` method of file objects, and in the formats supported by the ``%`` operator (``%d``, ``%i``, ``%x``, etc.).  For example, ``\"%d\" % 2L**64`` will produce the string ``18446744073709551616``."
msgstr ""

msgid "The subtlest long integer change of all is that the :func:`str` of a long integer no longer has a trailing 'L' character, though :func:`repr` still includes it.  The 'L' annoyed many people who wanted to print long integers that looked just like regular integers, since they had to go out of their way to chop off the character.  This is no longer a problem in 2.0, but code which does ``str(longval)[:-1]`` and assumes the 'L' is there, will now lose the final digit."
msgstr ""

msgid "Taking the :func:`repr` of a float now uses a different formatting precision than :func:`str`.  :func:`repr` uses ``%.17g`` format string for C's :func:`sprintf`, while :func:`str` uses ``%.12g`` as before.  The effect is that :func:`repr` may occasionally show more decimal places than  :func:`str`, for certain numbers.  For example, the number 8.1 can't be represented exactly in binary, so ``repr(8.1)`` is ``'8.0999999999999996'``, while str(8.1) is ``'8.1'``."
msgstr ""

msgid "The ``-X`` command-line option, which turned all standard exceptions into strings instead of classes, has been removed; the standard exceptions will now always be classes.  The :mod:`exceptions` module containing the standard exceptions was translated from Python to a built-in C module, written by Barry Warsaw and Fredrik Lundh."
msgstr ""

msgid "Extending/Embedding Changes"
msgstr ""

msgid "Some of the changes are under the covers, and will only be apparent to people writing C extension modules or embedding a Python interpreter in a larger application.  If you aren't dealing with Python's C API, you can safely skip this section."
msgstr ""

msgid "The version number of the Python C API was incremented, so C extensions compiled for 1.5.2 must be recompiled in order to work with 2.0.  On Windows, it's not possible for Python 2.0 to import a third party extension built for Python 1.5.x due to how Windows DLLs work, so Python will raise an exception and the import will fail."
msgstr ""

msgid "Users of Jim Fulton's ExtensionClass module will be pleased to find out that hooks have been added so that ExtensionClasses are now supported by :func:`isinstance` and :func:`issubclass`. This means you no longer have to remember to write code such as ``if type(obj) == myExtensionClass``, but can use the more natural ``if isinstance(obj, myExtensionClass)``."
msgstr ""

msgid "The :file:`Python/importdl.c` file, which was a mass of #ifdefs to support dynamic loading on many different platforms, was cleaned up and reorganised by Greg Stein.  :file:`importdl.c` is now quite small, and platform-specific code has been moved into a bunch of :file:`Python/dynload_\\*.c` files.  Another cleanup: there were also a number of :file:`my\\*.h` files in the Include/ directory that held various portability hacks; they've been merged into a single file, :file:`Include/pyport.h`."
msgstr ""

msgid "Vladimir Marangozov's long-awaited malloc restructuring was completed, to make it easy to have the Python interpreter use a custom allocator instead of C's standard :func:`malloc`.  For documentation, read the comments in :file:`Include/pymem.h` and :file:`Include/objimpl.h`.  For the lengthy discussions during which the interface was hammered out, see the Web archives of the 'patches' and 'python-dev' lists at python.org."
msgstr ""

msgid "Recent versions of the GUSI development environment for MacOS support POSIX threads.  Therefore, Python's POSIX threading support now works on the Macintosh.  Threading support using the user-space GNU ``pth`` library was also contributed."
msgstr ""

msgid "Threading support on Windows was enhanced, too.  Windows supports thread locks that use kernel objects only in case of contention; in the common case when there's no contention, they use simpler functions which are an order of magnitude faster.  A threaded version of Python 1.5.2 on NT is twice as slow as an unthreaded version; with the 2.0 changes, the difference is only 10%.  These improvements were contributed by Yakov Markovitch."
msgstr ""

msgid "Python 2.0's source now uses only ANSI C prototypes, so compiling Python now requires an ANSI C compiler, and can no longer be done using a compiler that only supports K&R C."
msgstr ""

msgid "Previously the Python virtual machine used 16-bit numbers in its bytecode, limiting the size of source files.  In particular, this affected the maximum size of literal lists and dictionaries in Python source; occasionally people who are generating Python code would run into this limit.  A patch by Charles G. Waldman raises the limit from ``2^16`` to ``2^{32}``."
msgstr ""

msgid "Three new convenience functions intended for adding constants to a module's dictionary at module initialization time were added: :func:`PyModule_AddObject`, :func:`PyModule_AddIntConstant`, and :func:`PyModule_AddStringConstant`.  Each of these functions takes a module object, a null-terminated C string containing the name to be added, and a third argument for the value to be assigned to the name.  This third argument is, respectively, a Python object, a C long, or a C string."
msgstr ""

msgid "A wrapper API was added for Unix-style signal handlers. :func:`PyOS_getsig` gets a signal handler and :func:`PyOS_setsig` will set a new handler."
msgstr ""

msgid "Distutils: Making Modules Easy to Install"
msgstr ""

msgid "Before Python 2.0, installing modules was a tedious affair -- there was no way to figure out automatically where Python is installed, or what compiler options to use for extension modules.  Software authors had to go through an arduous ritual of editing Makefiles and configuration files, which only really work on Unix and leave Windows and MacOS unsupported.  Python users faced wildly differing installation instructions which varied between different extension packages, which made administering a Python installation something of  a chore."
msgstr ""

msgid "The SIG for distribution utilities, shepherded by Greg Ward, has created the Distutils, a system to make package installation much easier.  They form the :mod:`distutils` package, a new part of Python's standard library. In the best case, installing a Python module from source will require the same steps: first you simply mean unpack the tarball or zip archive, and the run \"``python setup.py install``\".  The platform will be automatically detected, the compiler will be recognized, C extension modules will be compiled, and the distribution installed into the proper directory.  Optional command-line arguments provide more control over the installation process, the distutils package offers many places to override defaults -- separating the build from the install, building or installing in non-default directories, and more."
msgstr ""

msgid "In order to use the Distutils, you need to write a :file:`setup.py` script.  For the simple case, when the software contains only .py files, a minimal :file:`setup.py` can be just a few lines long::"
msgstr ""

msgid "from distutils.core import setup setup (name = \"foo\", version = \"1.0\",        py_modules = [\"module1\", \"module2\"])"
msgstr ""

msgid "The :file:`setup.py` file isn't much more complicated if the software consists of a few packages::"
msgstr ""

msgid "from distutils.core import setup setup (name = \"foo\", version = \"1.0\",        packages = [\"package\", \"package.subpackage\"])"
msgstr ""

msgid "A C extension can be the most complicated case; here's an example taken from the PyXML package::"
msgstr ""

msgid "from distutils.core import setup, Extension  expat_extension = Extension('xml.parsers.pyexpat',      define_macros = [('XML_NS', None)],      include_dirs = [ 'extensions/expat/xmltok',                       'extensions/expat/xmlparse' ],      sources = [ 'extensions/pyexpat.c',                  'extensions/expat/xmltok/xmltok.c',                  'extensions/expat/xmltok/xmlrole.c', ]        ) setup (name = \"PyXML\", version = \"0.5.4\",        ext_modules =[ expat_extension ] )"
msgstr ""

msgid "The Distutils can also take care of creating source and binary distributions. The \"sdist\" command, run by \"``python setup.py sdist``', builds a source distribution such as :file:`foo-1.0.tar.gz`. Adding new commands isn't difficult, \"bdist_rpm\" and \"bdist_wininst\" commands have already been contributed to create an RPM distribution and a Windows installer for the software, respectively.  Commands to create other distribution formats such as Debian packages and Solaris :file:`.pkg` files are in various stages of development."
msgstr ""

msgid "All this is documented in a new manual, *Distributing Python Modules*, that joins the basic set of Python documentation."
msgstr ""

msgid "XML Modules"
msgstr ""

msgid "Python 1.5.2 included a simple XML parser in the form of the :mod:`xmllib` module, contributed by Sjoerd Mullender.  Since 1.5.2's release, two different interfaces for processing XML have become common: SAX2 (version 2 of the Simple API for XML) provides an event-driven interface with some similarities to :mod:`xmllib`, and the DOM (Document Object Model) provides a tree-based interface, transforming an XML document into a tree of nodes that can be traversed and modified.  Python 2.0 includes a SAX2 interface and a stripped- down DOM interface as part of the :mod:`xml` package. Here we will give a brief overview of these new interfaces; consult the Python documentation or the source code for complete details. The Python XML SIG is also working on improved documentation."
msgstr ""

msgid "SAX2 Support"
msgstr ""

msgid "SAX defines an event-driven interface for parsing XML.  To use SAX, you must write a SAX handler class.  Handler classes inherit from various classes provided by SAX, and override various methods that will then be called by the XML parser.  For example, the :meth:`startElement` and :meth:`endElement` methods are called for every starting and end tag encountered by the parser, the :meth:`characters` method is called for every chunk of character data, and so forth."
msgstr ""

msgid "The advantage of the event-driven approach is that the whole document doesn't have to be resident in memory at any one time, which matters if you are processing really huge documents.  However, writing the SAX handler class can get very complicated if you're trying to modify the document structure in some elaborate way."
msgstr ""

msgid "For example, this little example program defines a handler that prints a message for every starting and ending tag, and then parses the file :file:`hamlet.xml` using it::"
msgstr ""

msgid "from xml import sax  class SimpleHandler(sax.ContentHandler):     def startElement(self, name, attrs):         print 'Start of element:', name, attrs.keys()      def endElement(self, name):         print 'End of element:', name  # Create a parser object parser = sax.make_parser()  # Tell it what handler to use handler = SimpleHandler() parser.setContentHandler( handler )  # Parse a file! parser.parse( 'hamlet.xml' )"
msgstr ""

msgid "For more information, consult the Python documentation, or the XML HOWTO at http://pyxml.sourceforge.net/topics/howto/xml-howto.html."
msgstr ""

msgid "DOM Support"
msgstr ""

msgid "The Document Object Model is a tree-based representation for an XML document.  A top-level :class:`Document` instance is the root of the tree, and has a single child which is the top-level :class:`Element` instance. This :class:`Element` has children nodes representing character data and any sub-elements, which may have further children of their own, and so forth.  Using the DOM you can traverse the resulting tree any way you like, access element and attribute values, insert and delete nodes, and convert the tree back into XML."
msgstr ""

msgid "The DOM is useful for modifying XML documents, because you can create a DOM tree, modify it by adding new nodes or rearranging subtrees, and then produce a new XML document as output.  You can also construct a DOM tree manually and convert it to XML, which can be a more flexible way of producing XML output than simply writing ``<tag1>``...\\ ``</tag1>`` to a file."
msgstr ""

msgid "The DOM implementation included with Python lives in the :mod:`xml.dom.minidom` module.  It's a lightweight implementation of the Level 1 DOM with support for XML namespaces.  The  :func:`parse` and :func:`parseString` convenience functions are provided for generating a DOM tree::"
msgstr ""

msgid "from xml.dom import minidom doc = minidom.parse('hamlet.xml')"
msgstr ""

msgid "``doc`` is a :class:`Document` instance.  :class:`Document`, like all the other DOM classes such as :class:`Element` and :class:`Text`, is a subclass of the :class:`Node` base class.  All the nodes in a DOM tree therefore support certain common methods, such as :meth:`toxml` which returns a string containing the XML representation of the node and its children.  Each class also has special methods of its own; for example, :class:`Element` and :class:`Document` instances have a method to find all child elements with a given tag name. Continuing from the previous 2-line example::"
msgstr ""

msgid "perslist = doc.getElementsByTagName( 'PERSONA' ) print perslist[0].toxml() print perslist[1].toxml()"
msgstr ""

msgid "For the *Hamlet* XML file, the above few lines output::"
msgstr ""

msgid "<PERSONA>CLAUDIUS, king of Denmark. </PERSONA> <PERSONA>HAMLET, son to the late, and nephew to the present king.</PERSONA>"
msgstr ""

msgid "The root element of the document is available as ``doc.documentElement``, and its children can be easily modified by deleting, adding, or removing nodes::"
msgstr ""

msgid "root = doc.documentElement  # Remove the first child root.removeChild( root.childNodes[0] )  # Move the new first child to the end root.appendChild( root.childNodes[0] )  # Insert the new first child (originally, # the third child) before the 20th child. root.insertBefore( root.childNodes[0], root.childNodes[20] )"
msgstr ""

msgid "Again, I will refer you to the Python documentation for a complete listing of the different :class:`Node` classes and their various methods."
msgstr ""

msgid "Relationship to PyXML"
msgstr ""

msgid "The XML Special Interest Group has been working on XML-related Python code for a while.  Its code distribution, called PyXML, is available from the SIG's Web pages at http://www.python.org/sigs/xml-sig/. The PyXML distribution also used the package name ``xml``.  If you've written programs that used PyXML, you're probably wondering about its compatibility with the 2.0 :mod:`xml` package."
msgstr ""

msgid "The answer is that Python 2.0's :mod:`xml` package isn't compatible with PyXML, but can be made compatible by installing a recent version PyXML.  Many applications can get by with the XML support that is included with Python 2.0, but more complicated applications will require that the full PyXML package will be installed.  When installed, PyXML versions 0.6.0 or greater will replace the :mod:`xml` package shipped with Python, and will be a strict superset of the standard package, adding a bunch of additional features.  Some of the additional features in PyXML include:"
msgstr ""

msgid "4DOM, a full DOM implementation from FourThought, Inc."
msgstr ""

msgid "The xmlproc validating parser, written by Lars Marius Garshol."
msgstr ""

msgid "The :mod:`sgmlop` parser accelerator module, written by Fredrik Lundh."
msgstr ""

msgid "Module changes"
msgstr ""

msgid "Lots of improvements and bugfixes were made to Python's extensive standard library; some of the affected modules include :mod:`readline`, :mod:`ConfigParser`, :mod:`cgi`, :mod:`calendar`, :mod:`posix`, :mod:`readline`, :mod:`xmllib`, :mod:`aifc`, :mod:`chunk, wave`, :mod:`random`, :mod:`shelve`, and :mod:`nntplib`.  Consult the CVS logs for the exact patch-by-patch details."
msgstr ""

msgid "Brian Gallew contributed OpenSSL support for the :mod:`socket` module.  OpenSSL is an implementation of the Secure Socket Layer, which encrypts the data being sent over a socket.  When compiling Python, you can edit :file:`Modules/Setup` to include SSL support, which adds an additional function to the :mod:`socket` module: :func:`socket.ssl(socket, keyfile, certfile)`, which takes a socket object and returns an SSL socket.  The :mod:`httplib` and :mod:`urllib` modules were also changed to support ``https://`` URLs, though no one has implemented FTP or SMTP over SSL."
msgstr ""

msgid "The :mod:`httplib` module has been rewritten by Greg Stein to support HTTP/1.1. Backward compatibility with the 1.5 version of :mod:`httplib` is provided, though using HTTP/1.1 features such as pipelining will require rewriting code to use a different set of interfaces."
msgstr ""

msgid "The :mod:`Tkinter` module now supports Tcl/Tk version 8.1, 8.2, or 8.3, and support for the older 7.x versions has been dropped.  The Tkinter module now supports displaying Unicode strings in Tk widgets. Also, Fredrik Lundh contributed an optimization which makes operations like ``create_line`` and ``create_polygon`` much faster, especially when using lots of coordinates."
msgstr ""

msgid "The :mod:`curses` module has been greatly extended, starting from Oliver Andrich's enhanced version, to provide many additional functions from ncurses and SYSV curses, such as colour, alternative character set support, pads, and mouse support.  This means the module is no longer compatible with operating systems that only have BSD curses, but there don't seem to be any currently maintained OSes that fall into this category."
msgstr ""

msgid "As mentioned in the earlier discussion of 2.0's Unicode support, the underlying implementation of the regular expressions provided by the :mod:`re` module has been changed.  SRE, a new regular expression engine written by Fredrik Lundh and partially funded by Hewlett Packard, supports matching against both 8-bit strings and Unicode strings."
msgstr ""

msgid "New modules"
msgstr ""

msgid "A number of new modules were added.  We'll simply list them with brief descriptions; consult the 2.0 documentation for the details of a particular module."
msgstr ""

msgid ":mod:`atexit`:  For registering functions to be called before the Python interpreter exits. Code that currently sets ``sys.exitfunc`` directly should be changed to  use the :mod:`atexit` module instead, importing :mod:`atexit` and calling :func:`atexit.register` with  the function to be called on exit. (Contributed by Skip Montanaro.)"
msgstr ""

msgid ":mod:`codecs`, :mod:`encodings`, :mod:`unicodedata`:  Added as part of the new Unicode support."
msgstr ""

msgid ":mod:`filecmp`: Supersedes the old :mod:`cmp`, :mod:`cmpcache` and :mod:`dircmp` modules, which have now become deprecated. (Contributed by Gordon MacMillan and Moshe Zadka.)"
msgstr ""

msgid ":mod:`gettext`: This module provides internationalization (I18N) and localization (L10N) support for Python programs by providing an interface to the GNU gettext message catalog library. (Integrated by Barry Warsaw, from separate contributions by Martin  von Löwis, Peter Funk, and James Henstridge.)"
msgstr ""

msgid ":mod:`linuxaudiodev`: Support for the :file:`/dev/audio` device on Linux, a twin to the existing :mod:`sunaudiodev` module. (Contributed by Peter Bosch, with fixes by Jeremy Hylton.)"
msgstr ""

msgid ":mod:`mmap`: An interface to memory-mapped files on both Windows and Unix.  A file's contents can be mapped directly into memory, at which point it behaves like a mutable string, so its contents can be read and modified.  They can even be passed to functions that expect ordinary strings, such as the :mod:`re` module. (Contributed by Sam Rushing, with some extensions by A.M. Kuchling.)"
msgstr ""

msgid ":mod:`pyexpat`: An interface to the Expat XML parser. (Contributed by Paul Prescod.)"
msgstr ""

msgid ":mod:`robotparser`: Parse a :file:`robots.txt` file, which is used for writing Web spiders that politely avoid certain areas of a Web site.  The parser accepts the contents of a :file:`robots.txt` file, builds a set of rules from it, and can then answer questions about the fetchability of a given URL.  (Contributed by Skip Montanaro.)"
msgstr ""

msgid ":mod:`tabnanny`: A module/script to  check Python source code for ambiguous indentation. (Contributed by Tim Peters.)"
msgstr ""

msgid ":mod:`UserString`: A base class useful for deriving objects that behave like strings."
msgstr ""

msgid ":mod:`webbrowser`: A module that provides a platform independent way to launch a web browser on a specific URL. For each platform, various browsers are tried in a specific order. The user can alter which browser is launched by setting the *BROWSER* environment variable.  (Originally inspired by Eric S. Raymond's patch to :mod:`urllib` which added similar functionality, but the final module comes from code originally  implemented by Fred Drake as :file:`Tools/idle/BrowserControl.py`, and adapted for the standard library by Fred.)"
msgstr ""

msgid ":mod:`_winreg`: An interface to the Windows registry.  :mod:`_winreg` is an adaptation of functions that have been part of PythonWin since 1995, but has now been added to the core  distribution, and enhanced to support Unicode. :mod:`_winreg` was written by Bill Tutt and Mark Hammond."
msgstr ""

msgid ":mod:`zipfile`: A module for reading and writing ZIP-format archives.  These are archives produced by :program:`PKZIP` on DOS/Windows or :program:`zip` on Unix, not to be confused with :program:`gzip`\\ -format files (which are supported by the :mod:`gzip` module) (Contributed by James C. Ahlstrom.)"
msgstr ""

msgid ":mod:`imputil`: A module that provides a simpler way for writing customised import hooks, in comparison to the existing :mod:`ihooks` module.  (Implemented by Greg Stein, with much discussion on python-dev along the way.)"
msgstr ""

msgid "IDLE Improvements"
msgstr ""

msgid "IDLE is the official Python cross-platform IDE, written using Tkinter. Python 2.0 includes IDLE 0.6, which adds a number of new features and improvements.  A partial list:"
msgstr ""

msgid "UI improvements and optimizations, especially in the area of syntax highlighting and auto-indentation."
msgstr ""

msgid "The class browser now shows more information, such as the top level functions in a module."
msgstr ""

msgid "Tab width is now a user settable option. When opening an existing Python file, IDLE automatically detects the indentation conventions, and adapts."
msgstr ""

msgid "There is now support for calling browsers on various platforms, used to open the Python documentation in a browser."
msgstr ""

msgid "IDLE now has a command line, which is largely similar to  the vanilla Python interpreter."
msgstr ""

msgid "Call tips were added in many places."
msgstr ""

msgid "IDLE can now be installed as a package."
msgstr ""

msgid "In the editor window, there is now a line/column bar at the bottom."
msgstr ""

msgid "Three new keystroke commands: Check module (Alt-F5), Import module (F5) and Run script (Ctrl-F5)."
msgstr ""

msgid "Deleted and Deprecated Modules"
msgstr ""

msgid "A few modules have been dropped because they're obsolete, or because there are now better ways to do the same thing.  The :mod:`stdwin` module is gone; it was for a platform-independent windowing toolkit that's no longer developed."
msgstr ""

msgid "A number of modules have been moved to the :file:`lib-old` subdirectory: :mod:`cmp`, :mod:`cmpcache`, :mod:`dircmp`, :mod:`dump`,  :mod:`find`, :mod:`grep`, :mod:`packmail`,  :mod:`poly`, :mod:`util`, :mod:`whatsound`, :mod:`zmod`.  If you have code which relies on a module  that's been moved to :file:`lib-old`, you can simply add that directory to ``sys.path``   to get them back, but you're encouraged to update any code that uses these modules."
msgstr ""

msgid "Acknowledgements"
msgstr ""

msgid "The authors would like to thank the following people for offering suggestions on various drafts of this article: David Bolen, Mark Hammond, Gregg Hauser, Jeremy Hylton, Fredrik Lundh, Detlef Lannert, Aahz Maruch, Skip Montanaro, Vladimir Marangozov, Tobias Polzin, Guido van Rossum, Neil Schemenauer, and Russ Schmidt."
msgstr ""

msgid "What's New in Python 2.1"
msgstr ""

msgid "A.M. Kuchling"
msgstr ""

msgid "This article explains the new features in Python 2.1.  While there aren't as many changes in 2.1 as there were in Python 2.0, there are still some pleasant surprises in store.  2.1 is the first release to be steered through the use of Python Enhancement Proposals, or PEPs, so most of the sizable changes have accompanying PEPs that provide more complete documentation and a design rationale for the change.  This article doesn't attempt to document the new features completely, but simply provides an overview of the new features for Python programmers. Refer to the Python 2.1 documentation, or to the specific PEP, for more details about any new feature that particularly interests you."
msgstr ""

msgid "One recent goal of the Python development team has been to accelerate the pace of new releases, with a new release coming every 6 to 9 months. 2.1 is the first release to come out at this faster pace, with the first alpha appearing in January, 3 months after the final version of 2.0 was released."
msgstr ""

msgid "The final release of Python 2.1 was made on April 17, 2001."
msgstr ""

msgid "PEP 227: Nested Scopes"
msgstr ""

msgid "The largest change in Python 2.1 is to Python's scoping rules.  In Python 2.0, at any given time there are at most three namespaces used to look up variable names: local, module-level, and the built-in namespace.  This often surprised people because it didn't match their intuitive expectations.  For example, a nested recursive function definition doesn't work::"
msgstr ""

msgid "def f():     ...     def g(value):         ...         return g(value-1) + 1     ..."
msgstr ""

msgid "The function :func:`g` will always raise a :exc:`NameError` exception, because the binding of the name ``g`` isn't in either its local namespace or in the module-level namespace.  This isn't much of a problem in practice (how often do you recursively define interior functions like this?), but this also made using the :keyword:`lambda` statement clumsier, and this was a problem in practice. In code which uses :keyword:`lambda` you can often find local variables being copied by passing them as the default values of arguments. ::"
msgstr ""

msgid "def find(self, name):     \"Return list of any entries equal to 'name'\"     L = filter(lambda x, name=name: x == name,                self.list_attribute)     return L"
msgstr ""

msgid "The readability of Python code written in a strongly functional style suffers greatly as a result."
msgstr ""

msgid "The most significant change to Python 2.1 is that static scoping has been added to the language to fix this problem.  As a first effect, the ``name=name`` default argument is now unnecessary in the above example.  Put simply, when a given variable name is not assigned a value within a function (by an assignment, or the :keyword:`def`, :keyword:`class`, or :keyword:`import` statements), references to the variable will be looked up in the local namespace of the enclosing scope.  A more detailed explanation of the rules, and a dissection of the implementation, can be found in the PEP."
msgstr ""

msgid "This change may cause some compatibility problems for code where the same variable name is used both at the module level and as a local variable within a function that contains further function definitions. This seems rather unlikely though, since such code would have been pretty confusing to read in the first place."
msgstr ""

msgid "One side effect of the change is that the ``from module import *`` and :keyword:`exec` statements have been made illegal inside a function scope under certain conditions.  The Python reference manual has said all along that ``from module import *`` is only legal at the top level of a module, but the CPython interpreter has never enforced this before.  As part of the implementation of nested scopes, the compiler which turns Python source into bytecodes has to generate different code to access variables in a containing scope.  ``from module import *`` and :keyword:`exec` make it impossible for the compiler to figure this out, because they add names to the local namespace that are unknowable at compile time. Therefore, if a function contains function definitions or :keyword:`lambda` expressions with free variables, the compiler will flag this by raising a :exc:`SyntaxError` exception."
msgstr ""

msgid "To make the preceding explanation a bit clearer, here's an example::"
msgstr ""

msgid "x = 1 def f():     # The next line is a syntax error     exec 'x=2'     def g():         return x"
msgstr ""

msgid "Line 4 containing the :keyword:`exec` statement is a syntax error, since :keyword:`exec` would define a new local variable named ``x`` whose value should be accessed by :func:`g`."
msgstr ""

msgid "This shouldn't be much of a limitation, since :keyword:`exec` is rarely used in most Python code (and when it is used, it's often a sign of a poor design anyway)."
msgstr ""

msgid "Compatibility concerns have led to nested scopes being introduced gradually; in Python 2.1, they aren't enabled by default, but can be turned on within a module by using a future statement as described in PEP 236.  (See the following section for further discussion of PEP 236.)  In Python 2.2, nested scopes will become the default and there will be no way to turn them off, but users will have had all of 2.1's lifetime to fix any breakage resulting from their introduction."
msgstr ""

msgid "See also"
msgstr ""

msgid "Written and implemented by Jeremy Hylton."
msgstr ""

msgid "PEP 236: __future__ Directives"
msgstr ""

msgid "The reaction to nested scopes was widespread concern about the dangers of breaking code with the 2.1 release, and it was strong enough to make the Pythoneers take a more conservative approach.  This approach consists of introducing a convention for enabling optional functionality in release N that will become compulsory in release N+1."
msgstr ""

msgid "The syntax uses a ``from...import`` statement using the reserved module name :mod:`__future__`.  Nested scopes can be enabled by the following statement::"
msgstr ""

msgid "from __future__ import nested_scopes"
msgstr ""

msgid "While it looks like a normal :keyword:`import` statement, it's not; there are strict rules on where such a future statement can be put. They can only be at the top of a module, and must precede any Python code or regular :keyword:`import` statements.  This is because such statements can affect how the Python bytecode compiler parses code and generates bytecode, so they must precede any statement that will result in bytecodes being produced."
msgstr ""

msgid "Written by Tim Peters, and primarily implemented by Jeremy Hylton."
msgstr ""

msgid "PEP 207: Rich Comparisons"
msgstr ""

msgid "In earlier versions, Python's support for implementing comparisons on user- defined classes and extension types was quite simple. Classes could implement a :meth:`__cmp__` method that was given two instances of a class, and could only return 0 if they were equal or +1 or -1 if they weren't; the method couldn't raise an exception or return anything other than a Boolean value.  Users of Numeric Python often found this model too weak and restrictive, because in the number-crunching programs that numeric Python is used for, it would be more useful to be able to perform elementwise comparisons of two matrices, returning a matrix containing the results of a given comparison for each element.  If the two matrices are of different sizes, then the compare has to be able to raise an exception to signal the error."
msgstr ""

msgid "In Python 2.1, rich comparisons were added in order to support this need. Python classes can now individually overload each of the ``<``, ``<=``, ``>``, ``>=``, ``==``, and ``!=`` operations.  The new magic method names are:"
msgstr ""

msgid "Operation"
msgstr ""

msgid "Method name"
msgstr ""

msgid "``<``"
msgstr ""

msgid ":meth:`__lt__`"
msgstr ""

msgid "``<=``"
msgstr ""

msgid ":meth:`__le__`"
msgstr ""

msgid "``>``"
msgstr ""

msgid ":meth:`__gt__`"
msgstr ""

msgid "``>=``"
msgstr ""

msgid ":meth:`__ge__`"
msgstr ""

msgid "``==``"
msgstr ""

msgid ":meth:`__eq__`"
msgstr ""

msgid "``!=``"
msgstr ""

msgid ":meth:`__ne__`"
msgstr ""

msgid "(The magic methods are named after the corresponding Fortran operators ``.LT.``. ``.LE.``, &c.  Numeric programmers are almost certainly quite familiar with these names and will find them easy to remember.)"
msgstr ""

msgid "Each of these magic methods is of the form ``method(self, other)``, where ``self`` will be the object on the left-hand side of the operator, while ``other`` will be the object on the right-hand side.  For example, the expression ``A < B`` will cause ``A.__lt__(B)`` to be called."
msgstr ""

msgid "Each of these magic methods can return anything at all: a Boolean, a matrix, a list, or any other Python object.  Alternatively they can raise an exception if the comparison is impossible, inconsistent, or otherwise meaningless."
msgstr ""

msgid "The built-in :func:`cmp(A,B)` function can use the rich comparison machinery, and now accepts an optional argument specifying which comparison operation to use; this is given as one of the strings ``\"<\"``, ``\"<=\"``, ``\">\"``, ``\">=\"``, ``\"==\"``, or ``\"!=\"``.  If called without the optional third argument, :func:`cmp` will only return -1, 0, or +1 as in previous versions of Python; otherwise it will call the appropriate method and can return any Python object."
msgstr ""

msgid "There are also corresponding changes of interest to C programmers; there's a new slot ``tp_richcmp`` in type objects and an API for performing a given rich comparison.  I won't cover the C API here, but will refer you to PEP 207, or to 2.1's C API documentation, for the full list of related functions."
msgstr ""

msgid "Written by Guido van Rossum, heavily based on earlier work by David Ascher, and implemented by Guido van Rossum."
msgstr ""

msgid "PEP 230: Warning Framework"
msgstr ""

msgid "Over its 10 years of existence, Python has accumulated a certain number of obsolete modules and features along the way.  It's difficult to know when a feature is safe to remove, since there's no way of knowing how much code uses it --- perhaps no programs depend on the feature, or perhaps many do.  To enable removing old features in a more structured way, a warning framework was added. When the Python developers want to get rid of a feature, it will first trigger a warning in the next version of Python.  The following Python version can then drop the feature, and users will have had a full release cycle to remove uses of the old feature."
msgstr ""

msgid "Python 2.1 adds the warning framework to be used in this scheme.  It adds a :mod:`warnings` module that provide functions to issue warnings, and to filter out warnings that you don't want to be displayed. Third-party modules can also use this framework to deprecate old features that they no longer wish to support."
msgstr ""

msgid "For example, in Python 2.1 the :mod:`regex` module is deprecated, so importing it causes a warning to be printed::"
msgstr ""

msgid ">>> import regex __main__:1: DeprecationWarning: the regex module          is deprecated; please use the re module >>>"
msgstr ""

msgid "Warnings can be issued by calling the :func:`warnings.warn` function::"
msgstr ""

msgid "warnings.warn(\"feature X no longer supported\")"
msgstr ""

msgid "The first parameter is the warning message; an additional optional parameters can be used to specify a particular warning category."
msgstr ""

msgid "Filters can be added to disable certain warnings; a regular expression pattern can be applied to the message or to the module name in order to suppress a warning.  For example, you may have a program that uses the :mod:`regex` module and not want to spare the time to convert it to use the :mod:`re` module right now.  The warning can be suppressed by calling ::"
msgstr ""

msgid "import warnings warnings.filterwarnings(action = 'ignore',                         message='.*regex module is deprecated',                         category=DeprecationWarning,                         module = '__main__')"
msgstr ""

msgid "This adds a filter that will apply only to warnings of the class :class:`DeprecationWarning` triggered in the :mod:`__main__` module, and applies a regular expression to only match the message about the :mod:`regex` module being deprecated, and will cause such warnings to be ignored.  Warnings can also be printed only once, printed every time the offending code is executed, or turned into exceptions that will cause the program to stop (unless the exceptions are caught in the usual way, of course)."
msgstr ""

msgid "Functions were also added to Python's C API for issuing warnings; refer to PEP 230 or to Python's API documentation for the details."
msgstr ""

msgid "Written by Paul Prescod, to specify procedures to be followed when removing old features from Python.  The policy described in this PEP hasn't been officially adopted, but the eventual policy probably won't be too different from Prescod's proposal."
msgstr ""

msgid "Written and implemented by Guido van Rossum."
msgstr ""

msgid "PEP 229: New Build System"
msgstr ""

msgid "When compiling Python, the user had to go in and edit the :file:`Modules/Setup` file in order to enable various additional modules; the default set is relatively small and limited to modules that compile on most Unix platforms. This means that on Unix platforms with many more features, most notably Linux, Python installations often don't contain all useful modules they could."
msgstr ""

msgid "Python 2.0 added the Distutils, a set of modules for distributing and installing extensions.  In Python 2.1, the Distutils are used to compile much of the standard library of extension modules, autodetecting which ones are supported on the current machine.  It's hoped that this will make Python installations easier and more featureful."
msgstr ""

msgid "Instead of having to edit the :file:`Modules/Setup` file in order to enable modules, a :file:`setup.py` script in the top directory of the Python source distribution is run at build time, and attempts to discover which modules can be enabled by examining the modules and header files on the system.  If a module is configured in :file:`Modules/Setup`, the :file:`setup.py` script won't attempt to compile that module and will defer to the :file:`Modules/Setup` file's contents.  This provides a way to specific any strange command-line flags or libraries that are required for a specific platform."
msgstr ""

msgid "In another far-reaching change to the build mechanism, Neil Schemenauer restructured things so Python now uses a single makefile that isn't recursive, instead of makefiles in the top directory and in each of the :file:`Python/`, :file:`Parser/`, :file:`Objects/`, and :file:`Modules/` subdirectories.  This makes building Python faster and also makes hacking the Makefiles clearer and simpler."
msgstr ""

msgid "Written and implemented by A.M. Kuchling."
msgstr ""

msgid "PEP 205: Weak References"
msgstr ""

msgid "Weak references, available through the :mod:`weakref` module, are a minor but useful new data type in the Python programmer's toolbox."
msgstr ""

msgid "Storing a reference to an object (say, in a dictionary or a list) has the side effect of keeping that object alive forever.  There are a few specific cases where this behaviour is undesirable, object caches being the most common one, and another being circular references in data structures such as trees."
msgstr ""

msgid "For example, consider a memoizing function that caches the results of another function :func:`f(x)` by storing the function's argument and its result in a dictionary::"
msgstr ""

msgid "_cache = {} def memoize(x):     if _cache.has_key(x):         return _cache[x]      retval = f(x)      # Cache the returned object     _cache[x] = retval      return retval"
msgstr ""

msgid "This version works for simple things such as integers, but it has a side effect; the ``_cache`` dictionary holds a reference to the return values, so they'll never be deallocated until the Python process exits and cleans up This isn't very noticeable for integers, but if :func:`f` returns an object, or a data structure that takes up a lot of memory, this can be a problem."
msgstr ""

msgid "Weak references provide a way to implement a cache that won't keep objects alive beyond their time.  If an object is only accessible through weak references, the object will be deallocated and the weak references will now indicate that the object it referred to no longer exists.  A weak reference to an object *obj* is created by calling ``wr = weakref.ref(obj)``.  The object being referred to is returned by calling the weak reference as if it were a function: ``wr()``.  It will return the referenced object, or ``None`` if the object no longer exists."
msgstr ""

msgid "This makes it possible to write a :func:`memoize` function whose cache doesn't keep objects alive, by storing weak references in the cache. ::"
msgstr ""

msgid "_cache = {} def memoize(x):     if _cache.has_key(x):         obj = _cache[x]()         # If weak reference object still exists,         # return it         if obj is not None: return obj      retval = f(x)      # Cache a weak reference     _cache[x] = weakref.ref(retval)      return retval"
msgstr ""

msgid "The :mod:`weakref` module also allows creating proxy objects which behave like weak references --- an object referenced only by proxy objects is deallocated -- but instead of requiring an explicit call to retrieve the object, the proxy transparently forwards all operations to the object as long as the object still exists.  If the object is deallocated, attempting to use a proxy will cause a :exc:`weakref.ReferenceError` exception to be raised. ::"
msgstr ""

msgid "proxy = weakref.proxy(obj) proxy.attr   # Equivalent to obj.attr proxy.meth() # Equivalent to obj.meth() del obj proxy.attr   # raises weakref.ReferenceError"
msgstr ""

msgid "Written and implemented by Fred L. Drake, Jr."
msgstr ""

msgid "PEP 232: Function Attributes"
msgstr ""

msgid "In Python 2.1, functions can now have arbitrary information attached to them. People were often using docstrings to hold information about functions and methods, because the ``__doc__`` attribute was the only way of attaching any information to a function.  For example, in the Zope Web application server, functions are marked as safe for public access by having a docstring, and in John Aycock's SPARK parsing framework, docstrings hold parts of the BNF grammar to be parsed.  This overloading is unfortunate, since docstrings are really intended to hold a function's documentation; for example, it means you can't properly document functions intended for private use in Zope."
msgstr ""

msgid "Arbitrary attributes can now be set and retrieved on functions using the regular Python syntax::"
msgstr ""

msgid "def f(): pass  f.publish = 1 f.secure = 1 f.grammar = \"A ::= B (C D)*\""
msgstr ""

msgid "The dictionary containing attributes can be accessed as the function's :attr:`__dict__`. Unlike the :attr:`__dict__` attribute of class instances, in functions you can actually assign a new dictionary to :attr:`__dict__`, though the new value is restricted to a regular Python dictionary; you *can't* be tricky and set it to a :class:`UserDict` instance, or any other random object that behaves like a mapping."
msgstr ""

msgid "Written and implemented by Barry Warsaw."
msgstr ""

msgid "PEP 235: Importing Modules on Case-Insensitive Platforms"
msgstr ""

msgid "Some operating systems have filesystems that are case-insensitive, MacOS and Windows being the primary examples; on these systems, it's impossible to distinguish the filenames ``FILE.PY`` and ``file.py``, even though they do store the file's name  in its original case (they're case-preserving, too)."
msgstr ""

msgid "In Python 2.1, the :keyword:`import` statement will work to simulate case- sensitivity on case-insensitive platforms.  Python will now search for the first case-sensitive match by default, raising an :exc:`ImportError` if no such file is found, so ``import file`` will not import a module named ``FILE.PY``.  Case- insensitive matching can be requested by setting the :envvar:`PYTHONCASEOK` environment variable before starting the Python interpreter."
msgstr ""

msgid "PEP 217: Interactive Display Hook"
msgstr ""

msgid "When using the Python interpreter interactively, the output of commands is displayed using the built-in :func:`repr` function. In Python 2.1, the variable :func:`sys.displayhook` can be set to a callable object which will be called instead of :func:`repr`. For example, you can set it to a special pretty- printing function::"
msgstr ""

msgid ">>> # Create a recursive data structure ... L = [1,2,3] >>> L.append(L) >>> L # Show Python's default output [1, 2, 3, [...]] >>> # Use pprint.pprint() as the display function ... import sys, pprint >>> sys.displayhook = pprint.pprint >>> L [1, 2, 3,  <Recursion on list with id=135143996>] >>>"
msgstr ""

msgid "Written and implemented by Moshe Zadka."
msgstr ""

msgid "PEP 208: New Coercion Model"
msgstr ""

msgid "How numeric coercion is done at the C level was significantly modified.  This will only affect the authors of C extensions to Python, allowing them more flexibility in writing extension types that support numeric operations."
msgstr ""

msgid "Extension types can now set the type flag ``Py_TPFLAGS_CHECKTYPES`` in their ``PyTypeObject`` structure to indicate that they support the new coercion model. In such extension types, the numeric slot functions can no longer assume that they'll be passed two arguments of the same type; instead they may be passed two arguments of differing types, and can then perform their own internal coercion. If the slot function is passed a type it can't handle, it can indicate the failure by returning a reference to the ``Py_NotImplemented`` singleton value. The numeric functions of the other type will then be tried, and perhaps they can handle the operation; if the other type also returns ``Py_NotImplemented``, then a :exc:`TypeError` will be raised.  Numeric methods written in Python can also return ``Py_NotImplemented``, causing the interpreter to act as if the method did not exist (perhaps raising a :exc:`TypeError`, perhaps trying another object's numeric methods)."
msgstr ""

msgid "Written and implemented by Neil Schemenauer, heavily based upon earlier work by Marc-André Lemburg.  Read this to understand the fine points of how numeric operations will now be processed at the C level."
msgstr ""

msgid "PEP 241: Metadata in Python Packages"
msgstr ""

msgid "A common complaint from Python users is that there's no single catalog of all the Python modules in existence.  T. Middleton's Vaults of Parnassus at http://www.vex.net/parnassus/ are the largest catalog of Python modules, but registering software at the Vaults is optional, and many people don't bother."
msgstr ""

msgid "As a first small step toward fixing the problem, Python software packaged using the Distutils :command:`sdist` command will include a file named :file:`PKG-INFO` containing information about the package such as its name, version, and author (metadata, in cataloguing terminology).  PEP 241 contains the full list of fields that can be present in the :file:`PKG-INFO` file.  As people began to package their software using Python 2.1, more and more packages will include metadata, making it possible to build automated cataloguing systems and experiment with them.  With the result experience, perhaps it'll be possible to design a really good catalog and then build support for it into Python 2.2. For example, the Distutils :command:`sdist` and :command:`bdist_\\*` commands could support a :option:`upload` option that would automatically upload your package to a catalog server."
msgstr ""

msgid "You can start creating packages containing :file:`PKG-INFO` even if you're not using Python 2.1, since a new release of the Distutils will be made for users of earlier Python versions.  Version 1.0.2 of the Distutils includes the changes described in PEP 241, as well as various bugfixes and enhancements.  It will be available from  the Distutils SIG at http://www.python.org/sigs/distutils-sig/."
msgstr ""

msgid "Written by Sean Reifschneider, this draft PEP describes a proposed mechanism for uploading  Python packages to a central server."
msgstr ""

msgid "New and Improved Modules"
msgstr ""

msgid "Ka-Ping Yee contributed two new modules: :mod:`inspect.py`, a module for getting information about live Python code, and :mod:`pydoc.py`, a module for interactively converting docstrings to HTML or text.  As a bonus, :file:`Tools/scripts/pydoc`, which is now automatically installed, uses :mod:`pydoc.py` to display documentation given a Python module, package, or class name.  For example, ``pydoc xml.dom`` displays the following::"
msgstr ""

msgid "Python Library Documentation: package xml.dom in xml  NAME     xml.dom - W3C Document Object Model implementation for Python.  FILE     /usr/local/lib/python2.1/xml/dom/__init__.pyc  DESCRIPTION     The Python mapping of the Document Object Model is documented in the     Python Library Reference in the section on the xml.dom package.      This package contains the following modules:       ..."
msgstr ""

msgid ":file:`pydoc` also includes a Tk-based interactive help browser.   :file:`pydoc` quickly becomes addictive; try it out!"
msgstr ""

msgid "Two different modules for unit testing were added to the standard library. The :mod:`doctest` module, contributed by Tim Peters, provides a testing framework based on running embedded examples in docstrings and comparing the results against the expected output.  PyUnit, contributed by Steve Purcell, is a unit testing framework inspired by JUnit, which was in turn an adaptation of Kent Beck's Smalltalk testing framework.  See http://pyunit.sourceforge.net/ for more information about PyUnit."
msgstr ""

msgid "The :mod:`difflib` module contains a class, :class:`SequenceMatcher`, which compares two sequences and computes the changes required to transform one sequence into the other.  For example, this module can be used to write a tool similar to the Unix :program:`diff` program, and in fact the sample program :file:`Tools/scripts/ndiff.py` demonstrates how to write such a script."
msgstr ""

msgid ":mod:`curses.panel`, a wrapper for the panel library, part of ncurses and of SYSV curses, was contributed by Thomas Gellekum.  The panel library provides windows with the additional feature of depth. Windows can be moved higher or lower in the depth ordering, and the panel library figures out where panels overlap and which sections are visible."
msgstr ""

msgid "The PyXML package has gone through a few releases since Python 2.0, and Python 2.1 includes an updated version of the :mod:`xml` package.  Some of the noteworthy changes include support for Expat 1.2 and later versions, the ability for Expat parsers to handle files in any encoding supported by Python, and various bugfixes for SAX, DOM, and the :mod:`minidom` module."
msgstr ""

msgid "Ping also contributed another hook for handling uncaught exceptions. :func:`sys.excepthook` can be set to a callable object.  When an exception isn't caught by any :keyword:`try`...\\ :keyword:`except` blocks, the exception will be passed to :func:`sys.excepthook`, which can then do whatever it likes.  At the Ninth Python Conference, Ping demonstrated an application for this hook: printing an extended traceback that not only lists the stack frames, but also lists the function arguments and the local variables for each frame."
msgstr ""

msgid "Various functions in the :mod:`time` module, such as :func:`asctime` and :func:`localtime`, require a floating point argument containing the time in seconds since the epoch.  The most common use of these functions is to work with the current time, so the floating point argument has been made optional; when a value isn't provided, the current time will be used.  For example, log file entries usually need a string containing the current time; in Python 2.1, ``time.asctime()`` can be used, instead of the lengthier ``time.asctime(time.localtime(time.time()))`` that was previously required."
msgstr ""

msgid "This change was proposed and implemented by Thomas Wouters."
msgstr ""

msgid "The :mod:`ftplib` module now defaults to retrieving files in passive mode, because passive mode is more likely to work from behind a firewall.  This request came from the Debian bug tracking system, since other Debian packages use :mod:`ftplib` to retrieve files and then don't work from behind a firewall. It's deemed unlikely that this will cause problems for anyone, because Netscape defaults to passive mode and few people complain, but if passive mode is unsuitable for your application or network setup, call :meth:`set_pasv(0)` on FTP objects to disable passive mode."
msgstr ""

msgid "Support for raw socket access has been added to the :mod:`socket` module, contributed by Grant Edwards."
msgstr ""

msgid "The :mod:`pstats` module now contains a simple interactive statistics browser for displaying timing profiles for Python programs, invoked when the module is run as a script.  Contributed by  Eric S. Raymond."
msgstr ""

msgid "A new implementation-dependent function, :func:`sys._getframe([depth])`, has been added to return a given frame object from the current call stack. :func:`sys._getframe` returns the frame at the top of the call stack;  if the optional integer argument *depth* is supplied, the function returns the frame that is *depth* calls below the top of the stack.  For example, ``sys._getframe(1)`` returns the caller's frame object."
msgstr ""

msgid "This function is only present in CPython, not in Jython or the .NET implementation.  Use it for debugging, and resist the temptation to put it into production code."
msgstr ""

msgid "Other Changes and Fixes"
msgstr ""

msgid "There were relatively few smaller changes made in Python 2.1 due to the shorter release cycle.  A search through the CVS change logs turns up 117 patches applied, and 136 bugs fixed; both figures are likely to be underestimates.  Some of the more notable changes are:"
msgstr ""

msgid "A specialized object allocator is now optionally available, that should be faster than the system :func:`malloc` and have less memory overhead.  The allocator uses C's :func:`malloc` function to get large pools of memory, and then fulfills smaller memory requests from these pools.  It can be enabled by providing the :option:`--with-pymalloc` option to the :program:`configure` script; see :file:`Objects/obmalloc.c` for the implementation details."
msgstr ""

msgid "Authors of C extension modules should test their code with the object allocator enabled, because some incorrect code may break, causing core dumps at runtime. There are a bunch of memory allocation functions in Python's C API that have previously been just aliases for the C library's :func:`malloc` and :func:`free`, meaning that if you accidentally called mismatched functions, the error wouldn't be noticeable.  When the object allocator is enabled, these functions aren't aliases of :func:`malloc` and :func:`free` any more, and calling the wrong function to free memory will get you a core dump.  For example, if memory was allocated using :func:`PyMem_New`, it has to be freed using :func:`PyMem_Del`, not :func:`free`.  A few modules included with Python fell afoul of this and had to be fixed; doubtless there are more third-party modules that will have the same problem."
msgstr ""

msgid "The object allocator was contributed by Vladimir Marangozov."
msgstr ""

msgid "The speed of line-oriented file I/O has been improved because people often complain about its lack of speed, and because it's often been used as a naïve benchmark.  The :meth:`readline` method of file objects has therefore been rewritten to be much faster.  The exact amount of the speedup will vary from platform to platform depending on how slow the C library's :func:`getc` was, but is around 66%, and potentially much faster on some particular operating systems. Tim Peters did much of the benchmarking and coding for this change, motivated by a discussion in comp.lang.python."
msgstr ""

msgid "A new module and method for file objects was also added, contributed by Jeff Epler. The new method, :meth:`xreadlines`, is similar to the existing :func:`xrange` built-in.  :func:`xreadlines` returns an opaque sequence object that only supports being iterated over, reading a line on every iteration but not reading the entire file into memory as the existing :meth:`readlines` method does. You'd use it like this::"
msgstr ""

msgid "for line in sys.stdin.xreadlines():     # ... do something for each line ...     ..."
msgstr ""

msgid "For a fuller discussion of the line I/O changes, see the python-dev summary for January 1-15, 2001 at http://www.python.org/dev/summary/2001-01-1/."
msgstr ""

msgid "A new method, :meth:`popitem`, was added to dictionaries to enable destructively iterating through the contents of a dictionary; this can be faster for large dictionaries because there's no need to construct a list containing all the keys or values. ``D.popitem()`` removes a random ``(key, value)`` pair from the dictionary ``D`` and returns it as a 2-tuple.  This was implemented mostly by Tim Peters and Guido van Rossum, after a suggestion and preliminary patch by Moshe Zadka."
msgstr ""

msgid "Modules can now control which names are imported when ``from module import *`` is used, by defining an ``__all__`` attribute containing a list of names that will be imported.  One common complaint is that if the module imports other modules such as :mod:`sys` or :mod:`string`, ``from module import *`` will add them to the importing module's namespace.  To fix this, simply list the public names in ``__all__``::"
msgstr ""

msgid "# List public names __all__ = ['Database', 'open']"
msgstr ""

msgid "A stricter version of this patch was first suggested and implemented by Ben Wolfson, but after some python-dev discussion, a weaker final version was checked in."
msgstr ""

msgid "Applying :func:`repr` to strings previously used octal escapes for non-printable characters; for example, a newline was ``'\\012'``.  This was a vestigial trace of Python's C ancestry, but today octal is of very little practical use.  Ka-Ping Yee suggested using hex escapes instead of octal ones, and using the ``\\n``, ``\\t``, ``\\r`` escapes for the appropriate characters, and implemented this new formatting."
msgstr ""

msgid "Syntax errors detected at compile-time can now raise exceptions containing the filename and line number of the error, a pleasant side effect of the compiler reorganization done by Jeremy Hylton."
msgstr ""

msgid "C extensions which import other modules have been changed to use :func:`PyImport_ImportModule`, which means that they will use any import hooks that have been installed.  This is also encouraged for third-party extensions that need to import some other module from C code."
msgstr ""

msgid "The size of the Unicode character database was shrunk by another 340K thanks to Fredrik Lundh."
msgstr ""

msgid "Some new ports were contributed: MacOS X (by Steven Majewski), Cygwin (by Jason Tishler); RISCOS (by Dietmar Schwertberger); Unixware 7  (by Billy G. Allie)."
msgstr ""

msgid "And there's the usual list of minor bugfixes, minor memory leaks, docstring edits, and other tweaks, too lengthy to be worth itemizing; see the CVS logs for the full details if you want them."
msgstr ""

msgid "The author would like to thank the following people for offering suggestions on various drafts of this article: Graeme Cross, David Goodger, Jay Graves, Michael Hudson, Marc-André Lemburg, Fredrik Lundh, Neil Schemenauer, Thomas Wouters."
msgstr ""

msgid "What's New in Python 2.2"
msgstr ""

msgid "This article explains the new features in Python 2.2.2, released on October 14, 2002.  Python 2.2.2 is a bugfix release of Python 2.2, originally released on December 21, 2001."
msgstr ""

msgid "Python 2.2 can be thought of as the \"cleanup release\".  There are some features such as generators and iterators that are completely new, but most of the changes, significant and far-reaching though they may be, are aimed at cleaning up irregularities and dark corners of the language design."
msgstr ""

msgid "This article doesn't attempt to provide a complete specification of the new features, but instead provides a convenient overview.  For full details, you should refer to the documentation for Python 2.2, such as the `Python Library Reference <http://www.python.org/doc/2.2/lib/lib.html>`_ and the `Python Reference Manual <http://www.python.org/doc/2.2/ref/ref.html>`_.  If you want to understand the complete implementation and design rationale for a change, refer to the PEP for a particular new feature."
msgstr ""

msgid "PEPs 252 and 253: Type and Class Changes"
msgstr ""

msgid "The largest and most far-reaching changes in Python 2.2 are to Python's model of objects and classes.  The changes should be backward compatible, so it's likely that your code will continue to run unchanged, but the changes provide some amazing new capabilities. Before beginning this, the longest and most complicated section of this article, I'll provide an overview of the changes and offer some comments."
msgstr ""

msgid "A long time ago I wrote a Web page listing flaws in Python's design.  One of the most significant flaws was that it's impossible to subclass Python types implemented in C.  In particular, it's not possible to subclass built-in types, so you can't just subclass, say, lists in order to add a single useful method to them. The :mod:`UserList` module provides a class that supports all of the methods of lists and that can be subclassed further, but there's lots of C code that expects a regular Python list and won't accept a :class:`UserList` instance."
msgstr ""

msgid "Python 2.2 fixes this, and in the process adds some exciting new capabilities. A brief summary:"
msgstr ""

msgid "You can subclass built-in types such as lists and even integers, and your subclasses should work in every place that requires the original type."
msgstr ""

msgid "It's now possible to define static and class methods, in addition to the instance methods available in previous versions of Python."
msgstr ""

msgid "It's also possible to automatically call methods on accessing or setting an instance attribute by using a new mechanism called :dfn:`properties`.  Many uses of :meth:`__getattr__` can be rewritten to use properties instead, making the resulting code simpler and faster.  As a small side benefit, attributes can now have docstrings, too."
msgstr ""

msgid "The list of legal attributes for an instance can be limited to a particular set using :dfn:`slots`, making it possible to safeguard against typos and perhaps make more optimizations possible in future versions of Python."
msgstr ""

msgid "Some users have voiced concern about all these changes.  Sure, they say, the new features are neat and lend themselves to all sorts of tricks that weren't possible in previous versions of Python, but they also make the language more complicated.  Some people have said that they've always recommended Python for its simplicity, and feel that its simplicity is being lost."
msgstr ""

msgid "Personally, I think there's no need to worry.  Many of the new features are quite esoteric, and you can write a lot of Python code without ever needed to be aware of them.  Writing a simple class is no more difficult than it ever was, so you don't need to bother learning or teaching them unless they're actually needed.  Some very complicated tasks that were previously only possible from C will now be possible in pure Python, and to my mind that's all for the better."
msgstr ""

msgid "I'm not going to attempt to cover every single corner case and small change that were required to make the new features work.  Instead this section will paint only the broad strokes.  See section :ref:`sect-rellinks`, \"Related Links\", for further sources of information about Python 2.2's new object model."
msgstr ""

msgid "Old and New Classes"
msgstr ""

msgid "First, you should know that Python 2.2 really has two kinds of classes: classic or old-style classes, and new-style classes.  The old-style class model is exactly the same as the class model in earlier versions of Python.  All the new features described in this section apply only to new-style classes. This divergence isn't intended to last forever; eventually old-style classes will be dropped, possibly in Python 3.0."
msgstr ""

msgid "So how do you define a new-style class?  You do it by subclassing an existing new-style class.  Most of Python's built-in types, such as integers, lists, dictionaries, and even files, are new-style classes now.  A new-style class named :class:`object`, the base class for all built-in types, has also been added so if no built-in type is suitable, you can just subclass :class:`object`::"
msgstr ""

msgid "class C(object):     def __init__ (self):         ...     ..."
msgstr ""

msgid "This means that :keyword:`class` statements that don't have any base classes are always classic classes in Python 2.2.  (Actually you can also change this by setting a module-level variable named :attr:`__metaclass__` --- see :pep:`253` for the details --- but it's easier to just subclass :keyword:`object`.)"
msgstr ""

msgid "The type objects for the built-in types are available as built-ins, named using a clever trick.  Python has always had built-in functions named :func:`int`, :func:`float`, and :func:`str`.  In 2.2, they aren't functions any more, but type objects that behave as factories when called. ::"
msgstr ""

msgid ">>> int <type 'int'> >>> int('123') 123"
msgstr ""

msgid "To make the set of types complete, new type objects such as :func:`dict` and :func:`file` have been added.  Here's a more interesting example, adding a :meth:`lock` method to file objects::"
msgstr ""

msgid "class LockableFile(file):     def lock (self, operation, length=0, start=0, whence=0):         import fcntl         return fcntl.lockf(self.fileno(), operation,                            length, start, whence)"
msgstr ""

msgid "The now-obsolete :mod:`posixfile` module contained a class that emulated all of a file object's methods and also added a :meth:`lock` method, but this class couldn't be passed to internal functions that expected a built-in file, something which is possible with our new :class:`LockableFile`."
msgstr ""

msgid "Descriptors"
msgstr ""

msgid "In previous versions of Python, there was no consistent way to discover what attributes and methods were supported by an object. There were some informal conventions, such as defining :attr:`__members__` and :attr:`__methods__` attributes that were lists of names, but often the author of an extension type or a class wouldn't bother to define them.  You could fall back on inspecting the :attr:`__dict__` of an object, but when class inheritance or an arbitrary :meth:`__getattr__` hook were in use this could still be inaccurate."
msgstr ""

msgid "The one big idea underlying the new class model is that an API for describing the attributes of an object using :dfn:`descriptors` has been formalized. Descriptors specify the value of an attribute, stating whether it's a method or a field.  With the descriptor API, static methods and class methods become possible, as well as more exotic constructs."
msgstr ""

msgid "Attribute descriptors are objects that live inside class objects, and have a few attributes of their own:"
msgstr ""

msgid ":attr:`__name__` is the attribute's name."
msgstr ""

msgid ":attr:`__doc__` is the attribute's docstring."
msgstr ""

msgid ":meth:`__get__(object)` is a method that retrieves the attribute value from *object*."
msgstr ""

msgid ":meth:`__set__(object, value)` sets the attribute on *object* to *value*."
msgstr ""

msgid ":meth:`__delete__(object, value)` deletes the *value*  attribute of *object*."
msgstr ""

msgid "For example, when you write ``obj.x``, the steps that Python actually performs are::"
msgstr ""

msgid "descriptor = obj.__class__.x descriptor.__get__(obj)"
msgstr ""

msgid "For methods, :meth:`descriptor.__get__` returns a temporary object that's callable, and wraps up the instance and the method to be called on it. This is also why static methods and class methods are now possible; they have descriptors that wrap up just the method, or the method and the class.  As a brief explanation of these new kinds of methods, static methods aren't passed the instance, and therefore resemble regular functions.  Class methods are passed the class of the object, but not the object itself.  Static and class methods are defined like this::"
msgstr ""

msgid "class C(object):     def f(arg1, arg2):         ...     f = staticmethod(f)      def g(cls, arg1, arg2):         ...     g = classmethod(g)"
msgstr ""

msgid "The :func:`staticmethod` function takes the function :func:`f`, and returns it wrapped up in a descriptor so it can be stored in the class object.  You might expect there to be special syntax for creating such methods (``def static f``, ``defstatic f()``, or something like that) but no such syntax has been defined yet; that's been left for future versions of Python."
msgstr ""

msgid "More new features, such as slots and properties, are also implemented as new kinds of descriptors, and it's not difficult to write a descriptor class that does something novel.  For example, it would be possible to write a descriptor class that made it possible to write Eiffel-style preconditions and postconditions for a method.  A class that used this feature might be defined like this::"
msgstr ""

msgid "from eiffel import eiffelmethod  class C(object):     def f(self, arg1, arg2):         # The actual function         ...     def pre_f(self):         # Check preconditions         ...     def post_f(self):         # Check postconditions         ...      f = eiffelmethod(f, pre_f, post_f)"
msgstr ""

msgid "Note that a person using the new :func:`eiffelmethod` doesn't have to understand anything about descriptors.  This is why I think the new features don't increase the basic complexity of the language. There will be a few wizards who need to know about it in order to write :func:`eiffelmethod` or the ZODB or whatever, but most users will just write code on top of the resulting libraries and ignore the implementation details."
msgstr ""

msgid "Multiple Inheritance: The Diamond Rule"
msgstr ""

msgid "Multiple inheritance has also been made more useful through changing the rules under which names are resolved.  Consider this set of classes (diagram taken from :pep:`253` by Guido van Rossum)::"
msgstr ""

msgid "class A:         ^ ^  def save(self): ...        /   \\       /     \\      /       \\     /         \\ class B     class C:     ^         ^  def save(self): ...      \\       /       \\     /        \\   /         \\ /       class D"
msgstr ""

msgid "The lookup rule for classic classes is simple but not very smart; the base classes are searched depth-first, going from left to right.  A reference to :meth:`D.save` will search the classes :class:`D`, :class:`B`, and then :class:`A`, where :meth:`save` would be found and returned.  :meth:`C.save` would never be found at all.  This is bad, because if :class:`C`'s :meth:`save` method is saving some internal state specific to :class:`C`, not calling it will result in that state never getting saved."
msgstr ""

msgid "New-style classes follow a different algorithm that's a bit more complicated to explain, but does the right thing in this situation. (Note that Python 2.3 changes this algorithm to one that produces the same results in most cases, but produces more useful results for really complicated inheritance graphs.)"
msgstr ""

msgid "List all the base classes, following the classic lookup rule and include a class multiple times if it's visited repeatedly.  In the above example, the list of visited classes is [:class:`D`, :class:`B`, :class:`A`, :class:`C`, :class:`A`]."
msgstr ""

msgid "Scan the list for duplicated classes.  If any are found, remove all but one occurrence, leaving the *last* one in the list.  In the above example, the list becomes [:class:`D`, :class:`B`, :class:`C`, :class:`A`] after dropping duplicates."
msgstr ""

msgid "Following this rule, referring to :meth:`D.save` will return :meth:`C.save`, which is the behaviour we're after.  This lookup rule is the same as the one followed by Common Lisp.  A new built-in function, :func:`super`, provides a way to get at a class's superclasses without having to reimplement Python's algorithm. The most commonly used form will be  :func:`super(class, obj)`, which returns  a bound superclass object (not the actual class object).  This form will be used in methods to call a method in the superclass; for example, :class:`D`'s :meth:`save` method would look like this::"
msgstr ""

msgid "class D (B,C):     def save (self):         # Call superclass .save()         super(D, self).save()         # Save D's private information here         ..."
msgstr ""

msgid ":func:`super` can also return unbound superclass objects when called as :func:`super(class)` or :func:`super(class1, class2)`, but this probably won't often be useful."
msgstr ""

msgid "Attribute Access"
msgstr ""

msgid "A fair number of sophisticated Python classes define hooks for attribute access using :meth:`__getattr__`; most commonly this is done for convenience, to make code more readable by automatically mapping an attribute access such as ``obj.parent`` into a method call such as ``obj.get_parent``.  Python 2.2 adds some new ways of controlling attribute access."
msgstr ""

msgid "First, :meth:`__getattr__(attr_name)` is still supported by new-style classes, and nothing about it has changed.  As before, it will be called when an attempt is made to access ``obj.foo`` and no attribute named ``foo`` is found in the instance's dictionary."
msgstr ""

msgid "New-style classes also support a new method, :meth:`__getattribute__(attr_name)`.  The difference between the two methods is that :meth:`__getattribute__` is *always* called whenever any attribute is accessed, while the old :meth:`__getattr__` is only called if ``foo`` isn't found in the instance's dictionary."
msgstr ""

msgid "However, Python 2.2's support for :dfn:`properties` will often be a simpler way to trap attribute references.  Writing a :meth:`__getattr__` method is complicated because to avoid recursion you can't use regular attribute accesses inside them, and instead have to mess around with the contents of :attr:`__dict__`. :meth:`__getattr__` methods also end up being called by Python when it checks for other methods such as :meth:`__repr__` or :meth:`__coerce__`, and so have to be written with this in mind. Finally, calling a function on every attribute access results in a sizable performance loss."
msgstr ""

msgid ":class:`property` is a new built-in type that packages up three functions that get, set, or delete an attribute, and a docstring.  For example, if you want to define a :attr:`size` attribute that's computed, but also settable, you could write::"
msgstr ""

msgid "class C(object):     def get_size (self):         result = ... computation ...         return result     def set_size (self, size):         ... compute something based on the size         and set internal state appropriately ...      # Define a property.  The 'delete this attribute'     # method is defined as None, so the attribute     # can't be deleted.     size = property(get_size, set_size,                     None,                     \"Storage size of this instance\")"
msgstr ""

msgid "That is certainly clearer and easier to write than a pair of :meth:`__getattr__`/:meth:`__setattr__` methods that check for the :attr:`size` attribute and handle it specially while retrieving all other attributes from the instance's :attr:`__dict__`.  Accesses to :attr:`size` are also the only ones which have to perform the work of calling a function, so references to other attributes run at their usual speed."
msgstr ""

msgid "Finally, it's possible to constrain the list of attributes that can be referenced on an object using the new :attr:`__slots__` class attribute. Python objects are usually very dynamic; at any time it's possible to define a new attribute on an instance by just doing ``obj.new_attr=1``.   A new-style class can define a class attribute named :attr:`__slots__` to limit the legal attributes  to a particular set of names.  An example will make this clear::"
msgstr ""

msgid ">>> class C(object): ...     __slots__ = ('template', 'name') ... >>> obj = C() >>> print obj.template None >>> obj.template = 'Test' >>> print obj.template Test >>> obj.newattr = None Traceback (most recent call last):   File \"<stdin>\", line 1, in ? AttributeError: 'C' object has no attribute 'newattr'"
msgstr ""

msgid "Note how you get an :exc:`AttributeError` on the attempt to assign to an attribute not listed in :attr:`__slots__`."
msgstr ""

msgid "Related Links"
msgstr ""

msgid "This section has just been a quick overview of the new features, giving enough of an explanation to start you programming, but many details have been simplified or ignored.  Where should you go to get a more complete picture?"
msgstr ""

msgid "http://www.python.org/2.2/descrintro.html is a lengthy tutorial introduction to the descriptor features, written by Guido van Rossum. If my description has whetted your appetite, go read this tutorial next, because it goes into much more detail about the new features while still remaining quite easy to read."
msgstr ""

msgid "Next, there are two relevant PEPs, :pep:`252` and :pep:`253`.  :pep:`252` is titled \"Making Types Look More Like Classes\", and covers the descriptor API. :pep:`253` is titled \"Subtyping Built-in Types\", and describes the changes to type objects that make it possible to subtype built-in objects.  :pep:`253` is the more complicated PEP of the two, and at a few points the necessary explanations of types and meta-types may cause your head to explode.  Both PEPs were written and implemented by Guido van Rossum, with substantial assistance from the rest of the Zope Corp. team."
msgstr ""

msgid "Finally, there's the ultimate authority: the source code.  Most of the machinery for the type handling is in :file:`Objects/typeobject.c`, but you should only resort to it after all other avenues have been exhausted, including posting a question to python-list or python-dev."
msgstr ""

msgid "PEP 234: Iterators"
msgstr ""

msgid "Another significant addition to 2.2 is an iteration interface at both the C and Python levels.  Objects can define how they can be looped over by callers."
msgstr ""

msgid "In Python versions up to 2.1, the usual way to make ``for item in obj`` work is to define a :meth:`__getitem__` method that looks something like this::"
msgstr ""

msgid "def __getitem__(self, index):     return <next item>"
msgstr ""

msgid ":meth:`__getitem__` is more properly used to define an indexing operation on an object so that you can write ``obj[5]`` to retrieve the sixth element.  It's a bit misleading when you're using this only to support :keyword:`for` loops. Consider some file-like object that wants to be looped over; the *index* parameter is essentially meaningless, as the class probably assumes that a series of :meth:`__getitem__` calls will be made with *index* incrementing by one each time.  In other words, the presence of the :meth:`__getitem__` method doesn't mean that using ``file[5]``  to randomly access the sixth element will work, though it really should."
msgstr ""

msgid "In Python 2.2, iteration can be implemented separately, and :meth:`__getitem__` methods can be limited to classes that really do support random access.  The basic idea of iterators is  simple.  A new built-in function, :func:`iter(obj)` or ``iter(C, sentinel)``, is used to get an iterator. :func:`iter(obj)` returns an iterator for the object *obj*, while ``iter(C, sentinel)`` returns an iterator that will invoke the callable object *C* until it returns *sentinel* to signal that the iterator is done."
msgstr ""

msgid "Python classes can define an :meth:`__iter__` method, which should create and return a new iterator for the object; if the object is its own iterator, this method can just return ``self``.  In particular, iterators will usually be their own iterators.  Extension types implemented in C can implement a :attr:`tp_iter` function in order to return an iterator, and extension types that want to behave as iterators can define a :attr:`tp_iternext` function."
msgstr ""

msgid "So, after all this, what do iterators actually do?  They have one required method, :meth:`next`, which takes no arguments and returns the next value.  When there are no more values to be returned, calling :meth:`next` should raise the :exc:`StopIteration` exception. ::"
msgstr ""

msgid ">>> L = [1,2,3] >>> i = iter(L) >>> print i <iterator object at 0x8116870> >>> i.next() 1 >>> i.next() 2 >>> i.next() 3 >>> i.next() Traceback (most recent call last):   File \"<stdin>\", line 1, in ? StopIteration >>>"
msgstr ""

msgid "In 2.2, Python's :keyword:`for` statement no longer expects a sequence; it expects something for which :func:`iter` will return an iterator. For backward compatibility and convenience, an iterator is automatically constructed for sequences that don't implement :meth:`__iter__` or a :attr:`tp_iter` slot, so ``for i in [1,2,3]`` will still work.  Wherever the Python interpreter loops over a sequence, it's been changed to use the iterator protocol.  This means you can do things like this::"
msgstr ""

msgid ">>> L = [1,2,3] >>> i = iter(L) >>> a,b,c = i >>> a,b,c (1, 2, 3)"
msgstr ""

msgid "Iterator support has been added to some of Python's basic types.   Calling :func:`iter` on a dictionary will return an iterator which loops over its keys::"
msgstr ""

msgid ">>> m = {'Jan': 1, 'Feb': 2, 'Mar': 3, 'Apr': 4, 'May': 5, 'Jun': 6, ...      'Jul': 7, 'Aug': 8, 'Sep': 9, 'Oct': 10, 'Nov': 11, 'Dec': 12} >>> for key in m: print key, m[key] ... Mar 3 Feb 2 Aug 8 Sep 9 May 5 Jun 6 Jul 7 Jan 1 Apr 4 Nov 11 Dec 12 Oct 10"
msgstr ""

msgid "That's just the default behaviour.  If you want to iterate over keys, values, or key/value pairs, you can explicitly call the :meth:`iterkeys`, :meth:`itervalues`, or :meth:`iteritems` methods to get an appropriate iterator. In a minor related change, the :keyword:`in` operator now works on dictionaries, so ``key in dict`` is now equivalent to ``dict.has_key(key)``."
msgstr ""

msgid "Files also provide an iterator, which calls the :meth:`readline` method until there are no more lines in the file.  This means you can now read each line of a file using code like this::"
msgstr ""

msgid "for line in file:     # do something for each line     ..."
msgstr ""

msgid "Note that you can only go forward in an iterator; there's no way to get the previous element, reset the iterator, or make a copy of it. An iterator object could provide such additional capabilities, but the iterator protocol only requires a :meth:`next` method."
msgstr ""

msgid "Written by Ka-Ping Yee and GvR; implemented  by the Python Labs crew, mostly by GvR and Tim Peters."
msgstr ""

msgid "PEP 255: Simple Generators"
msgstr ""

msgid "Generators are another new feature, one that interacts with the introduction of iterators."
msgstr ""

msgid "You're doubtless familiar with how function calls work in Python or C.  When you call a function, it gets a private namespace where its local variables are created.  When the function reaches a :keyword:`return` statement, the local variables are destroyed and the resulting value is returned to the caller.  A later call to the same function will get a fresh new set of local variables. But, what if the local variables weren't thrown away on exiting a function? What if you could later resume the function where it left off?  This is what generators provide; they can be thought of as resumable functions."
msgstr ""

msgid "Here's the simplest example of a generator function::"
msgstr ""

msgid "def generate_ints(N):     for i in range(N):         yield i"
msgstr ""

msgid "A new keyword, :keyword:`yield`, was introduced for generators.  Any function containing a :keyword:`yield` statement is a generator function; this is detected by Python's bytecode compiler which compiles the function specially as a result.  Because a new keyword was introduced, generators must be explicitly enabled in a module by including a ``from __future__ import generators`` statement near the top of the module's source code.  In Python 2.3 this statement will become unnecessary."
msgstr ""

msgid "When you call a generator function, it doesn't return a single value; instead it returns a generator object that supports the iterator protocol.  On executing the :keyword:`yield` statement, the generator outputs the value of ``i``, similar to a :keyword:`return` statement.  The big difference between :keyword:`yield` and a :keyword:`return` statement is that on reaching a :keyword:`yield` the generator's state of execution is suspended and local variables are preserved.  On the next call to the generator's ``next()`` method, the function will resume executing immediately after the :keyword:`yield` statement.  (For complicated reasons, the :keyword:`yield` statement isn't allowed inside the :keyword:`try` block of a :keyword:`try`...\\ :keyword:`finally` statement; read :pep:`255` for a full explanation of the interaction between :keyword:`yield` and exceptions.)"
msgstr ""

msgid "Here's a sample usage of the :func:`generate_ints` generator::"
msgstr ""

msgid ">>> gen = generate_ints(3) >>> gen <generator object at 0x8117f90> >>> gen.next() 0 >>> gen.next() 1 >>> gen.next() 2 >>> gen.next() Traceback (most recent call last):   File \"<stdin>\", line 1, in ?   File \"<stdin>\", line 2, in generate_ints StopIteration"
msgstr ""

msgid "You could equally write ``for i in generate_ints(5)``, or ``a,b,c = generate_ints(3)``."
msgstr ""

msgid "Inside a generator function, the :keyword:`return` statement can only be used without a value, and signals the end of the procession of values; afterwards the generator cannot return any further values. :keyword:`return` with a value, such as ``return 5``, is a syntax error inside a generator function.  The end of the generator's results can also be indicated by raising :exc:`StopIteration` manually, or by just letting the flow of execution fall off the bottom of the function."
msgstr ""

msgid "You could achieve the effect of generators manually by writing your own class and storing all the local variables of the generator as instance variables.  For example, returning a list of integers could be done by setting ``self.count`` to 0, and having the :meth:`next` method increment ``self.count`` and return it. However, for a moderately complicated generator, writing a corresponding class would be much messier. :file:`Lib/test/test_generators.py` contains a number of more interesting examples.  The simplest one implements an in-order traversal of a tree using generators recursively. ::"
msgstr ""

msgid "# A recursive generator that generates Tree leaves in in-order. def inorder(t):     if t:         for x in inorder(t.left):             yield x         yield t.label         for x in inorder(t.right):             yield x"
msgstr ""

msgid "Two other examples in :file:`Lib/test/test_generators.py` produce solutions for the N-Queens problem (placing $N$ queens on an $NxN$ chess board so that no queen threatens another) and the Knight's Tour (a route that takes a knight to every square of an $NxN$ chessboard without visiting any square twice)."
msgstr ""

msgid "The idea of generators comes from other programming languages, especially Icon (http://www.cs.arizona.edu/icon/), where the idea of generators is central.  In Icon, every expression and function call behaves like a generator.  One example from \"An Overview of the Icon Programming Language\" at http://www.cs.arizona.edu/icon/docs/ipd266.htm gives an idea of what this looks like::"
msgstr ""

msgid "sentence := \"Store it in the neighboring harbor\" if (i := find(\"or\", sentence)) > 5 then write(i)"
msgstr ""

msgid "In Icon the :func:`find` function returns the indexes at which the substring \"or\" is found: 3, 23, 33.  In the :keyword:`if` statement, ``i`` is first assigned a value of 3, but 3 is less than 5, so the comparison fails, and Icon retries it with the second value of 23.  23 is greater than 5, so the comparison now succeeds, and the code prints the value 23 to the screen."
msgstr ""

msgid "Python doesn't go nearly as far as Icon in adopting generators as a central concept.  Generators are considered a new part of the core Python language, but learning or using them isn't compulsory; if they don't solve any problems that you have, feel free to ignore them. One novel feature of Python's interface as compared to Icon's is that a generator's state is represented as a concrete object (the iterator) that can be passed around to other functions or stored in a data structure."
msgstr ""

msgid "Written by Neil Schemenauer, Tim Peters, Magnus Lie Hetland.  Implemented mostly by Neil Schemenauer and Tim Peters, with other fixes from the Python Labs crew."
msgstr ""

msgid "PEP 237: Unifying Long Integers and Integers"
msgstr ""

msgid "In recent versions, the distinction between regular integers, which are 32-bit values on most machines, and long integers, which can be of arbitrary size, was becoming an annoyance.  For example, on platforms that support files larger than ``2**32`` bytes, the :meth:`tell` method of file objects has to return a long integer. However, there were various bits of Python that expected plain integers and would raise an error if a long integer was provided instead.  For example, in Python 1.5, only regular integers could be used as a slice index, and ``'abc'[1L:]`` would raise a :exc:`TypeError` exception with the message 'slice index must be int'."
msgstr ""

msgid "Python 2.2 will shift values from short to long integers as required. The 'L' suffix is no longer needed to indicate a long integer literal, as now the compiler will choose the appropriate type.  (Using the 'L' suffix will be discouraged in future 2.x versions of Python, triggering a warning in Python 2.4, and probably dropped in Python 3.0.)  Many operations that used to raise an :exc:`OverflowError` will now return a long integer as their result.  For example::"
msgstr ""

msgid ">>> 1234567890123 1234567890123L >>> 2 ** 64 18446744073709551616L"
msgstr ""

msgid "In most cases, integers and long integers will now be treated identically.  You can still distinguish them with the :func:`type` built-in function, but that's rarely needed."
msgstr ""

msgid "Written by Moshe Zadka and Guido van Rossum.  Implemented mostly by Guido van Rossum."
msgstr ""

msgid "PEP 238: Changing the Division Operator"
msgstr ""

msgid "The most controversial change in Python 2.2 heralds the start of an effort to fix an old design flaw that's been in Python from the beginning. Currently Python's division operator, ``/``, behaves like C's division operator when presented with two integer arguments: it returns an integer result that's truncated down when there would be a fractional part.  For example, ``3/2`` is 1, not 1.5, and ``(-1)/2`` is -1, not -0.5.  This means that the results of division can vary unexpectedly depending on the type of the two operands and because Python is dynamically typed, it can be difficult to determine the possible types of the operands."
msgstr ""

msgid "(The controversy is over whether this is *really* a design flaw, and whether it's worth breaking existing code to fix this.  It's caused endless discussions on python-dev, and in July 2001 erupted into an storm of acidly sarcastic postings on :newsgroup:`comp.lang.python`. I won't argue for either side here and will stick to describing what's  implemented in 2.2.  Read :pep:`238` for a summary of arguments and counter-arguments.)"
msgstr ""

msgid "Because this change might break code, it's being introduced very gradually. Python 2.2 begins the transition, but the switch won't be complete until Python 3.0."
msgstr ""

msgid "First, I'll borrow some terminology from :pep:`238`.  \"True division\" is the division that most non-programmers are familiar with: 3/2 is 1.5, 1/4 is 0.25, and so forth.  \"Floor division\" is what Python's ``/`` operator currently does when given integer operands; the result is the floor of the value returned by true division.  \"Classic division\" is the current mixed behaviour of ``/``; it returns the result of floor division when the operands are integers, and returns the result of true division when one of the operands is a floating-point number."
msgstr ""

msgid "Here are the changes 2.2 introduces:"
msgstr ""

msgid "A new operator, ``//``, is the floor division operator. (Yes, we know it looks like C++'s comment symbol.)  ``//`` *always* performs floor division no matter what the types of its operands are, so ``1 // 2`` is 0 and ``1.0 // 2.0`` is also 0.0."
msgstr ""

msgid "``//`` is always available in Python 2.2; you don't need to enable it using a ``__future__`` statement."
msgstr ""

msgid "By including a ``from __future__ import division`` in a module, the ``/`` operator will be changed to return the result of true division, so ``1/2`` is 0.5.  Without the ``__future__`` statement, ``/`` still means classic division. The default meaning of ``/`` will not change until Python 3.0."
msgstr ""

msgid "Classes can define methods called :meth:`__truediv__` and :meth:`__floordiv__` to overload the two division operators.  At the C level, there are also slots in the :ctype:`PyNumberMethods` structure so extension types can define the two operators."
msgstr ""

msgid "Python 2.2 supports some command-line arguments for testing whether code will works with the changed division semantics.  Running python with :option:`-Q warn` will cause a warning to be issued whenever division is applied to two integers.  You can use this to find code that's affected by the change and fix it.  By default, Python 2.2 will simply perform classic division without a warning; the warning will be turned on by default in Python 2.3."
msgstr ""

msgid "Written by Moshe Zadka and  Guido van Rossum.  Implemented by Guido van Rossum.."
msgstr ""

msgid "Unicode Changes"
msgstr ""

msgid "Python's Unicode support has been enhanced a bit in 2.2.  Unicode strings are usually stored as UCS-2, as 16-bit unsigned integers. Python 2.2 can also be compiled to use UCS-4, 32-bit unsigned integers, as its internal encoding by supplying :option:`--enable-unicode=ucs4` to the configure script.   (It's also possible to specify :option:`--disable-unicode` to completely disable Unicode support.)"
msgstr ""

msgid "When built to use UCS-4 (a \"wide Python\"), the interpreter can natively handle Unicode characters from U+000000 to U+110000, so the range of legal values for the :func:`unichr` function is expanded accordingly.  Using an interpreter compiled to use UCS-2 (a \"narrow Python\"), values greater than 65535 will still cause :func:`unichr` to raise a :exc:`ValueError` exception. This is all described in :pep:`261`, \"Support for 'wide' Unicode characters\"; consult it for further details."
msgstr ""

msgid "Another change is simpler to explain. Since their introduction, Unicode strings have supported an :meth:`encode` method to convert the string to a selected encoding such as UTF-8 or Latin-1.  A symmetric :meth:`decode([*encoding*])` method has been added to 8-bit strings (though not to Unicode strings) in 2.2. :meth:`decode` assumes that the string is in the specified encoding and decodes it, returning whatever is returned by the codec."
msgstr ""

msgid "Using this new feature, codecs have been added for tasks not directly related to Unicode.  For example, codecs have been added for uu-encoding, MIME's base64 encoding, and compression with the :mod:`zlib` module::"
msgstr ""

msgid ">>> s = \"\"\"Here is a lengthy piece of redundant, overly verbose, ... and repetitive text. ... \"\"\" >>> data = s.encode('zlib') >>> data 'x\\x9c\\r\\xc9\\xc1\\r\\x80 \\x10\\x04\\xc0?Ul...' >>> data.decode('zlib') 'Here is a lengthy piece of redundant, overly verbose,\\nand repetitive text.\\n' >>> print s.encode('uu') begin 666 <data> M2&5R92!I<R!A(&QE;F=T:'D@<&EE8V4@;V8@<F5D=6YD86YT+\"!O=F5R;'D@ >=F5R8F]S92P*86YD(')E<&5T:71I=F4@=&5X=\"X*  end >>> \"sheesh\".encode('rot-13') 'furrfu'"
msgstr ""

msgid "To convert a class instance to Unicode, a :meth:`__unicode__` method can be defined by a class, analogous to :meth:`__str__`."
msgstr ""

msgid ":meth:`encode`, :meth:`decode`, and :meth:`__unicode__` were implemented by Marc-André Lemburg.  The changes to support using UCS-4 internally were implemented by Fredrik Lundh and Martin von Löwis."
msgstr ""

msgid "Written by Paul Prescod."
msgstr ""

msgid "In Python 2.1, statically nested scopes were added as an optional feature, to be enabled by a ``from __future__ import nested_scopes`` directive.  In 2.2 nested scopes no longer need to be specially enabled, and are now always present.  The rest of this section is a copy of the description of nested scopes from my \"What's New in Python 2.1\" document; if you read it when 2.1 came out, you can skip the rest of this section."
msgstr ""

msgid "The largest change introduced in Python 2.1, and made complete in 2.2, is to Python's scoping rules.  In Python 2.0, at any given time there are at most three namespaces used to look up variable names: local, module-level, and the built-in namespace.  This often surprised people because it didn't match their intuitive expectations.  For example, a nested recursive function definition doesn't work::"
msgstr ""

msgid "The most significant change to Python 2.2 is that static scoping has been added to the language to fix this problem.  As a first effect, the ``name=name`` default argument is now unnecessary in the above example.  Put simply, when a given variable name is not assigned a value within a function (by an assignment, or the :keyword:`def`, :keyword:`class`, or :keyword:`import` statements), references to the variable will be looked up in the local namespace of the enclosing scope.  A more detailed explanation of the rules, and a dissection of the implementation, can be found in the PEP."
msgstr ""

msgid "The :mod:`xmlrpclib` module was contributed to the standard library by Fredrik Lundh, providing support for writing XML-RPC clients.  XML-RPC is a simple remote procedure call protocol built on top of HTTP and XML. For example, the following snippet retrieves a list of RSS channels from the O'Reilly Network, and then  lists the recent headlines for one channel::"
msgstr ""

msgid "import xmlrpclib s = xmlrpclib.Server(       'http://www.oreillynet.com/meerkat/xml-rpc/server.php') channels = s.meerkat.getChannels() # channels is a list of dictionaries, like this: # [{'id': 4, 'title': 'Freshmeat Daily News'} #  {'id': 190, 'title': '32Bits Online'}, #  {'id': 4549, 'title': '3DGamers'}, ... ]  # Get the items for one channel items = s.meerkat.getItems( {'channel': 4} )  # 'items' is another list of dictionaries, like this: # [{'link': 'http://freshmeat.net/releases/52719/', #   'description': 'A utility which converts HTML to XSL FO.', #   'title': 'html2fo 0.3 (Default)'}, ... ]"
msgstr ""

msgid "The :mod:`SimpleXMLRPCServer` module makes it easy to create straightforward XML-RPC servers.  See http://www.xmlrpc.com/ for more information about XML-RPC."
msgstr ""

msgid "The new :mod:`hmac` module implements the HMAC algorithm described by :rfc:`2104`. (Contributed by Gerhard Häring.)"
msgstr ""

msgid "Several functions that originally returned lengthy tuples now return pseudo- sequences that still behave like tuples but also have mnemonic attributes such as memberst_mtime or :attr:`tm_year`. The enhanced functions include :func:`stat`, :func:`fstat`, :func:`statvfs`, and :func:`fstatvfs` in the :mod:`os` module, and :func:`localtime`, :func:`gmtime`, and :func:`strptime` in the :mod:`time` module."
msgstr ""

msgid "For example, to obtain a file's size using the old tuples, you'd end up writing something like ``file_size = os.stat(filename)[stat.ST_SIZE]``, but now this can be written more clearly as ``file_size = os.stat(filename).st_size``."
msgstr ""

msgid "The original patch for this feature was contributed by Nick Mathewson."
msgstr ""

msgid "The Python profiler has been extensively reworked and various errors in its output have been corrected.  (Contributed by Fred L. Drake, Jr. and Tim Peters.)"
msgstr ""

msgid "The :mod:`socket` module can be compiled to support IPv6; specify the :option:`--enable-ipv6` option to Python's configure script.  (Contributed by Jun-ichiro \"itojun\" Hagino.)"
msgstr ""

msgid "Two new format characters were added to the :mod:`struct` module for 64-bit integers on platforms that support the C :ctype:`long long` type.  ``q`` is for a signed 64-bit integer, and ``Q`` is for an unsigned one.  The value is returned in Python's long integer type.  (Contributed by Tim Peters.)"
msgstr ""

msgid "In the interpreter's interactive mode, there's a new built-in function :func:`help` that uses the :mod:`pydoc` module introduced in Python 2.1 to provide interactive help. ``help(object)`` displays any available help text about *object*.  :func:`help` with no argument puts you in an online help utility, where you can enter the names of functions, classes, or modules to read their help text. (Contributed by Guido van Rossum, using Ka-Ping Yee's :mod:`pydoc` module.)"
msgstr ""

msgid "Various bugfixes and performance improvements have been made to the SRE engine underlying the :mod:`re` module.  For example, the :func:`re.sub` and :func:`re.split` functions have been rewritten in C.  Another contributed patch speeds up certain Unicode character ranges by a factor of two, and a new :meth:`finditer`  method that returns an iterator over all the non-overlapping matches in  a given string.  (SRE is maintained by Fredrik Lundh.  The BIGCHARSET patch was contributed by Martin von Löwis.)"
msgstr ""

msgid "The :mod:`smtplib` module now supports :rfc:`2487`, \"Secure SMTP over TLS\", so it's now possible to encrypt the SMTP traffic between a Python program and the mail transport agent being handed a message.  :mod:`smtplib` also supports SMTP authentication.  (Contributed by Gerhard Häring.)"
msgstr ""

msgid "The :mod:`imaplib` module, maintained by Piers Lauder, has support for several new extensions: the NAMESPACE extension defined in :rfc:`2342`, SORT, GETACL and SETACL.  (Contributed by Anthony Baxter and Michel Pelletier.)"
msgstr ""

msgid "The :mod:`rfc822` module's parsing of email addresses is now compliant with :rfc:`2822`, an update to :rfc:`822`.  (The module's name is *not* going to be changed to ``rfc2822``.)  A new package, :mod:`email`, has also been added for parsing and generating e-mail messages.  (Contributed by Barry Warsaw, and arising out of his work on Mailman.)"
msgstr ""

msgid "The :mod:`difflib` module now contains a new :class:`Differ` class for producing human-readable lists of changes (a \"delta\") between two sequences of lines of text.  There are also two generator functions, :func:`ndiff` and :func:`restore`, which respectively return a delta from two sequences, or one of the original sequences from a delta. (Grunt work contributed by David Goodger, from ndiff.py code by Tim Peters who then did the generatorization.)"
msgstr ""

msgid "New constants :const:`ascii_letters`, :const:`ascii_lowercase`, and :const:`ascii_uppercase` were added to the :mod:`string` module.  There were several modules in the standard library that used :const:`string.letters` to mean the ranges A-Za-z, but that assumption is incorrect when locales are in use, because :const:`string.letters` varies depending on the set of legal characters defined by the current locale.  The buggy modules have all been fixed to use :const:`ascii_letters` instead. (Reported by an unknown person; fixed by Fred L. Drake, Jr.)"
msgstr ""

msgid "The :mod:`mimetypes` module now makes it easier to use alternative MIME-type databases by the addition of a :class:`MimeTypes` class, which takes a list of filenames to be parsed.  (Contributed by Fred L. Drake, Jr.)"
msgstr ""

msgid "A :class:`Timer` class was added to the :mod:`threading` module that allows scheduling an activity to happen at some future time.  (Contributed by Itamar Shtull-Trauring.)"
msgstr ""

msgid "Interpreter Changes and Fixes"
msgstr ""

msgid "Some of the changes only affect people who deal with the Python interpreter at the C level because they're writing Python extension modules, embedding the interpreter, or just hacking on the interpreter itself. If you only write Python code, none of the changes described here will affect you very much."
msgstr ""

msgid "Profiling and tracing functions can now be implemented in C, which can operate at much higher speeds than Python-based functions and should reduce the overhead of profiling and tracing.  This  will be of interest to authors of development environments for Python.  Two new C functions were added to Python's API, :cfunc:`PyEval_SetProfile` and :cfunc:`PyEval_SetTrace`. The existing :func:`sys.setprofile` and :func:`sys.settrace` functions still exist, and have simply been changed to use the new C-level interface.  (Contributed by Fred L. Drake, Jr.)"
msgstr ""

msgid "Another low-level API, primarily of interest to implementors of Python debuggers and development tools, was added. :cfunc:`PyInterpreterState_Head` and :cfunc:`PyInterpreterState_Next` let a caller walk through all the existing interpreter objects; :cfunc:`PyInterpreterState_ThreadHead` and :cfunc:`PyThreadState_Next` allow looping over all the thread states for a given interpreter.  (Contributed by David Beazley.)"
msgstr ""

msgid "The C-level interface to the garbage collector has been changed to make it easier to write extension types that support garbage collection and to debug misuses of the functions. Various functions have slightly different semantics, so a bunch of functions had to be renamed.  Extensions that use the old API will still compile but will *not* participate in garbage collection, so updating them for 2.2 should be considered fairly high priority."
msgstr ""

msgid "To upgrade an extension module to the new API, perform the following steps:"
msgstr ""

msgid "Rename :cfunc:`Py_TPFLAGS_GC` to :cfunc:`PyTPFLAGS_HAVE_GC`."
msgstr ""

msgid "objects, and :cfunc:`PyObject_GC_Del` to deallocate them."
msgstr ""

msgid ":cfunc:`PyObject_GC_Fini` to :cfunc:`PyObject_GC_UnTrack`."
msgstr ""

msgid "Remove :cfunc:`PyGC_HEAD_SIZE` from object size calculations."
msgstr ""

msgid "Remove calls to :cfunc:`PyObject_AS_GC` and :cfunc:`PyObject_FROM_GC`."
msgstr ""

msgid "A new ``et`` format sequence was added to :cfunc:`PyArg_ParseTuple`; ``et`` takes both a parameter and an encoding name, and converts the parameter to the given encoding if the parameter turns out to be a Unicode string, or leaves it alone if it's an 8-bit string, assuming it to already be in the desired encoding.  This differs from the ``es`` format character, which assumes that 8-bit strings are in Python's default ASCII encoding and converts them to the specified new encoding. (Contributed by M.-A. Lemburg, and used for the MBCS support on Windows described in the following section.)"
msgstr ""

msgid "A different argument parsing function, :cfunc:`PyArg_UnpackTuple`, has been added that's simpler and presumably faster.  Instead of specifying a format string, the caller simply gives the minimum and maximum number of arguments expected, and a set of pointers to :ctype:`PyObject\\*` variables that will be filled in with argument values."
msgstr ""

msgid "Two new flags :const:`METH_NOARGS` and :const:`METH_O` are available in method definition tables to simplify implementation of methods with no arguments or a single untyped argument. Calling such methods is more efficient than calling a corresponding method that uses :const:`METH_VARARGS`.  Also, the old :const:`METH_OLDARGS` style of writing C methods is  now officially deprecated."
msgstr ""

msgid "Two new wrapper functions, :cfunc:`PyOS_snprintf` and :cfunc:`PyOS_vsnprintf` were added to provide  cross-platform implementations for the relatively new :cfunc:`snprintf` and :cfunc:`vsnprintf` C lib APIs. In contrast to the standard :cfunc:`sprintf` and :cfunc:`vsprintf` functions, the Python versions check the bounds of the buffer used to protect against buffer overruns. (Contributed by M.-A. Lemburg.)"
msgstr ""

msgid "The :cfunc:`_PyTuple_Resize` function has lost an unused parameter, so now it takes 2 parameters instead of 3.  The third argument was never used, and can simply be discarded when porting code from earlier versions to Python 2.2."
msgstr ""

msgid "As usual there were a bunch of other improvements and bugfixes scattered throughout the source tree.  A search through the CVS change logs finds there were 527 patches applied and 683 bugs fixed between Python 2.1 and 2.2; 2.2.1 applied 139 patches and fixed 143 bugs; 2.2.2 applied 106 patches and fixed 82 bugs.  These figures are likely to be underestimates."
msgstr ""

msgid "Some of the more notable changes are:"
msgstr ""

msgid "The code for the MacOS port for Python, maintained by Jack Jansen, is now kept in the main Python CVS tree, and many changes have been made to support MacOS X."
msgstr ""

msgid "The most significant change is the ability to build Python as a framework, enabled by supplying the :option:`--enable-framework` option to the configure script when compiling Python.  According to Jack Jansen, \"This installs a self- contained Python installation plus the OS X framework \"glue\" into :file:`/Library/Frameworks/Python.framework` (or another location of choice). For now there is little immediate added benefit to this (actually, there is the disadvantage that you have to change your PATH to be able to find Python), but it is the basis for creating a full-blown Python application, porting the MacPython IDE, possibly using Python as a standard OSA scripting language and much more.\""
msgstr ""

msgid "Most of the MacPython toolbox modules, which interface to MacOS APIs such as windowing, QuickTime, scripting, etc. have been ported to OS X, but they've been left commented out in :file:`setup.py`.  People who want to experiment with these modules can uncomment them manually."
msgstr ""

msgid "Keyword arguments passed to built-in functions that don't take them now cause a :exc:`TypeError` exception to be raised, with the message \"*function* takes no keyword arguments\"."
msgstr ""

msgid "Weak references, added in Python 2.1 as an extension module, are now part of the core because they're used in the implementation of new-style classes.  The :exc:`ReferenceError` exception has therefore moved from the :mod:`weakref` module to become a built-in exception."
msgstr ""

msgid "A new script, :file:`Tools/scripts/cleanfuture.py` by Tim Peters, automatically removes obsolete ``__future__`` statements from Python source code."
msgstr ""

msgid "An additional *flags* argument has been added to the built-in function :func:`compile`, so the behaviour of ``__future__`` statements can now be correctly observed in simulated shells, such as those presented by IDLE and other development environments.  This is described in :pep:`264`. (Contributed by Michael Hudson.)"
msgstr ""

msgid "The new license introduced with Python 1.6 wasn't GPL-compatible.  This is fixed by some minor textual changes to the 2.2 license, so it's now legal to embed Python inside a GPLed program again.  Note that Python itself is not GPLed, but instead is under a license that's essentially equivalent to the BSD license, same as it always was.  The license changes were also applied to the Python 2.0.1 and 2.1.1 releases."
msgstr ""

msgid "When presented with a Unicode filename on Windows, Python will now convert it to an MBCS encoded string, as used by the Microsoft file APIs.  As MBCS is explicitly used by the file APIs, Python's choice of ASCII as the default encoding turns out to be an annoyance.  On Unix, the locale's character set is used if :func:`locale.nl_langinfo(CODESET)` is available.  (Windows support was contributed by Mark Hammond with assistance from Marc-André Lemburg. Unix support was added by Martin von Löwis.)"
msgstr ""

msgid "Large file support is now enabled on Windows.  (Contributed by Tim Peters.)"
msgstr ""

msgid "The :file:`Tools/scripts/ftpmirror.py` script now parses a :file:`.netrc` file, if you have one. (Contributed by Mike Romberg.)"
msgstr ""

msgid "Some features of the object returned by the :func:`xrange` function are now deprecated, and trigger warnings when they're accessed; they'll disappear in Python 2.3. :class:`xrange` objects tried to pretend they were full sequence types by supporting slicing, sequence multiplication, and the :keyword:`in` operator, but these features were rarely used and therefore buggy.  The :meth:`tolist` method and the :attr:`start`, :attr:`stop`, and :attr:`step` attributes are also being deprecated.  At the C level, the fourth argument to the :cfunc:`PyRange_New` function, ``repeat``, has also been deprecated."
msgstr ""

msgid "There were a bunch of patches to the dictionary implementation, mostly to fix potential core dumps if a dictionary contains objects that sneakily changed their hash value, or mutated the dictionary they were contained in. For a while python-dev fell into a gentle rhythm of Michael Hudson finding a case that dumped core, Tim Peters fixing the bug, Michael finding another case, and round and round it went."
msgstr ""

msgid "On Windows, Python can now be compiled with Borland C thanks to a number of patches contributed by Stephen Hansen, though the result isn't fully functional yet.  (But this *is* progress...)"
msgstr ""

msgid "Another Windows enhancement: Wise Solutions generously offered PythonLabs use of their InstallerMaster 8.1 system.  Earlier PythonLabs Windows installers used Wise 5.0a, which was beginning to show its age.  (Packaged up by Tim Peters.)"
msgstr ""

msgid "Files ending in ``.pyw`` can now be imported on Windows. ``.pyw`` is a Windows-only thing, used to indicate that a script needs to be run using PYTHONW.EXE instead of PYTHON.EXE in order to prevent a DOS console from popping up to display the output.  This patch makes it possible to import such scripts, in case they're also usable as modules.  (Implemented by David Bolen.)"
msgstr ""

msgid "On platforms where Python uses the C :cfunc:`dlopen` function  to load extension modules, it's now possible to set the flags used  by :cfunc:`dlopen` using the :func:`sys.getdlopenflags` and :func:`sys.setdlopenflags` functions. (Contributed by Bram Stolk.)"
msgstr ""

msgid "The :func:`pow` built-in function no longer supports 3 arguments when floating-point numbers are supplied. ``pow(x, y, z)`` returns ``(x**y) % z``, but this is never useful for floating point numbers, and the final result varies unpredictably depending on the platform.  A call such as ``pow(2.0, 8.0, 7.0)`` will now raise a :exc:`TypeError` exception."
msgstr ""

msgid "The author would like to thank the following people for offering suggestions, corrections and assistance with various drafts of this article: Fred Bremmer, Keith Briggs, Andrew Dalke, Fred L. Drake, Jr., Carel Fellinger, David Goodger, Mark Hammond, Stephen Hansen, Michael Hudson, Jack Jansen, Marc-André Lemburg, Martin von Löwis, Fredrik Lundh, Michael McLay, Nick Mathewson, Paul Moore, Gustavo Niemeyer, Don O'Donnell, Joonas Paalasma, Tim Peters, Jens Quade, Tom Reinhardt, Neil Schemenauer, Guido van Rossum, Greg Ward, Edward Welbourne."
msgstr ""

msgid "What's New in Python 2.3"
msgstr ""

msgid "This article explains the new features in Python 2.3.  Python 2.3 was released on July 29, 2003."
msgstr ""

msgid "The main themes for Python 2.3 are polishing some of the features added in 2.2, adding various small but useful enhancements to the core language, and expanding the standard library.  The new object model introduced in the previous version has benefited from 18 months of bugfixes and from optimization efforts that have improved the performance of new-style classes.  A few new built-in functions have been added such as :func:`sum` and :func:`enumerate`.  The :keyword:`in` operator can now be used for substring searches (e.g. ``\"ab\" in \"abc\"`` returns :const:`True`)."
msgstr ""

msgid "Some of the many new library features include Boolean, set, heap, and date/time data types, the ability to import modules from ZIP-format archives, metadata support for the long-awaited Python catalog, an updated version of IDLE, and modules for logging messages, wrapping text, parsing CSV files, processing command-line options, using BerkeleyDB databases...  the list of new and enhanced modules is lengthy."
msgstr ""

msgid "This article doesn't attempt to provide a complete specification of the new features, but instead provides a convenient overview.  For full details, you should refer to the documentation for Python 2.3, such as the Python Library Reference and the Python Reference Manual.  If you want to understand the complete implementation and design rationale, refer to the PEP for a particular new feature."
msgstr ""

msgid "PEP 218: A Standard Set Datatype"
msgstr ""

msgid "The new :mod:`sets` module contains an implementation of a set datatype.  The :class:`Set` class is for mutable sets, sets that can have members added and removed.  The :class:`ImmutableSet` class is for sets that can't be modified, and instances of :class:`ImmutableSet` can therefore be used as dictionary keys. Sets are built on top of dictionaries, so the elements within a set must be hashable."
msgstr ""

msgid "Here's a simple example::"
msgstr ""

msgid ">>> import sets >>> S = sets.Set([1,2,3]) >>> S Set([1, 2, 3]) >>> 1 in S True >>> 0 in S False >>> S.add(5) >>> S.remove(3) >>> S Set([1, 2, 5]) >>>"
msgstr ""

msgid "The union and intersection of sets can be computed with the :meth:`union` and :meth:`intersection` methods; an alternative notation uses the bitwise operators ``&`` and ``|``. Mutable sets also have in-place versions of these methods, :meth:`union_update` and :meth:`intersection_update`. ::"
msgstr ""

msgid ">>> S1 = sets.Set([1,2,3]) >>> S2 = sets.Set([4,5,6]) >>> S1.union(S2) Set([1, 2, 3, 4, 5, 6]) >>> S1 | S2                  # Alternative notation Set([1, 2, 3, 4, 5, 6]) >>> S1.intersection(S2) Set([]) >>> S1 & S2                  # Alternative notation Set([]) >>> S1.union_update(S2) >>> S1 Set([1, 2, 3, 4, 5, 6]) >>>"
msgstr ""

msgid "It's also possible to take the symmetric difference of two sets.  This is the set of all elements in the union that aren't in the intersection.  Another way of putting it is that the symmetric difference contains all elements that are in exactly one set.  Again, there's an alternative notation (``^``), and an in- place version with the ungainly name :meth:`symmetric_difference_update`. ::"
msgstr ""

msgid ">>> S1 = sets.Set([1,2,3,4]) >>> S2 = sets.Set([3,4,5,6]) >>> S1.symmetric_difference(S2) Set([1, 2, 5, 6]) >>> S1 ^ S2 Set([1, 2, 5, 6]) >>>"
msgstr ""

msgid "There are also :meth:`issubset` and :meth:`issuperset` methods for checking whether one set is a subset or superset of another::"
msgstr ""

msgid ">>> S1 = sets.Set([1,2,3]) >>> S2 = sets.Set([2,3]) >>> S2.issubset(S1) True >>> S1.issubset(S2) False >>> S1.issuperset(S2) True >>>"
msgstr ""

msgid "PEP written by Greg V. Wilson. Implemented by Greg V. Wilson, Alex Martelli, and GvR."
msgstr ""

msgid "In Python 2.2, generators were added as an optional feature, to be enabled by a ``from __future__ import generators`` directive.  In 2.3 generators no longer need to be specially enabled, and are now always present; this means that :keyword:`yield` is now always a keyword.  The rest of this section is a copy of the description of generators from the \"What's New in Python 2.2\" document; if you read it back when Python 2.2 came out, you can skip the rest of this section."
msgstr ""

msgid "You're doubtless familiar with how function calls work in Python or C. When you call a function, it gets a private namespace where its local variables are created.  When the function reaches a :keyword:`return` statement, the local variables are destroyed and the resulting value is returned to the caller.  A later call to the same function will get a fresh new set of local variables. But, what if the local variables weren't thrown away on exiting a function? What if you could later resume the function where it left off?  This is what generators provide; they can be thought of as resumable functions."
msgstr ""

msgid "A new keyword, :keyword:`yield`, was introduced for generators.  Any function containing a :keyword:`yield` statement is a generator function; this is detected by Python's bytecode compiler which compiles the function specially as a result."
msgstr ""

msgid "When you call a generator function, it doesn't return a single value; instead it returns a generator object that supports the iterator protocol.  On executing the :keyword:`yield` statement, the generator outputs the value of ``i``, similar to a :keyword:`return` statement.  The big difference between :keyword:`yield` and a :keyword:`return` statement is that on reaching a :keyword:`yield` the generator's state of execution is suspended and local variables are preserved.  On the next call to the generator's ``.next()`` method, the function will resume executing immediately after the :keyword:`yield` statement.  (For complicated reasons, the :keyword:`yield` statement isn't allowed inside the :keyword:`try` block of a :keyword:`try`...\\ :keyword:`finally` statement; read :pep:`255` for a full explanation of the interaction between :keyword:`yield` and exceptions.)"
msgstr ""

msgid ">>> gen = generate_ints(3) >>> gen <generator object at 0x8117f90> >>> gen.next() 0 >>> gen.next() 1 >>> gen.next() 2 >>> gen.next() Traceback (most recent call last):   File \"stdin\", line 1, in ?   File \"stdin\", line 2, in generate_ints StopIteration"
msgstr ""

msgid "Python doesn't go nearly as far as Icon in adopting generators as a central concept.  Generators are considered part of the core Python language, but learning or using them isn't compulsory; if they don't solve any problems that you have, feel free to ignore them. One novel feature of Python's interface as compared to Icon's is that a generator's state is represented as a concrete object (the iterator) that can be passed around to other functions or stored in a data structure."
msgstr ""

msgid "PEP 263: Source Code Encodings"
msgstr ""

msgid "Python source files can now be declared as being in different character set encodings.  Encodings are declared by including a specially formatted comment in the first or second line of the source file.  For example, a UTF-8 file can be declared with::"
msgstr ""

msgid "#!/usr/bin/env python # -*- coding: UTF-8 -*-"
msgstr ""

msgid "Without such an encoding declaration, the default encoding used is 7-bit ASCII. Executing or importing modules that contain string literals with 8-bit characters and have no encoding declaration will result in a :exc:`DeprecationWarning` being signalled by Python 2.3; in 2.4 this will be a syntax error."
msgstr ""

msgid "The encoding declaration only affects Unicode string literals, which will be converted to Unicode using the specified encoding.  Note that Python identifiers are still restricted to ASCII characters, so you can't have variable names that use characters outside of the usual alphanumerics."
msgstr ""

msgid "Written by Marc-André Lemburg and Martin von Löwis; implemented by Suzuki Hisao and Martin von Löwis."
msgstr ""

msgid "PEP 273: Importing Modules from ZIP Archives"
msgstr ""

msgid "The new :mod:`zipimport` module adds support for importing modules from a ZIP- format archive.  You don't need to import the module explicitly; it will be automatically imported if a ZIP archive's filename is added to ``sys.path``. For example::"
msgstr ""

msgid "amk@nyman:~/src/python$ unzip -l /tmp/example.zip Archive:  /tmp/example.zip   Length     Date   Time    Name  --------    ----   ----    ----      8467  11-26-02 22:30   jwzthreading.py  --------                   -------      8467                   1 file amk@nyman:~/src/python$ ./python Python 2.3 (#1, Aug 1 2003, 19:54:32) >>> import sys >>> sys.path.insert(0, '/tmp/example.zip')  # Add .zip file to front of path >>> import jwzthreading >>> jwzthreading.__file__ '/tmp/example.zip/jwzthreading.py' >>>"
msgstr ""

msgid "An entry in ``sys.path`` can now be the filename of a ZIP archive. The ZIP archive can contain any kind of files, but only files named :file:`\\*.py`, :file:`\\*.pyc`, or :file:`\\*.pyo` can be imported.  If an archive only contains :file:`\\*.py` files, Python will not attempt to modify the archive by adding the corresponding :file:`\\*.pyc` file, meaning that if a ZIP archive doesn't contain :file:`\\*.pyc` files, importing may be rather slow."
msgstr ""

msgid "A path within the archive can also be specified to only import from a subdirectory; for example, the path :file:`/tmp/example.zip/lib/` would only import from the :file:`lib/` subdirectory within the archive."
msgstr ""

msgid "Written by James C. Ahlstrom,  who also provided an implementation. Python 2.3 follows the specification in :pep:`273`,  but uses an implementation written by Just van Rossum  that uses the import hooks described in :pep:`302`. See section :ref:`section-pep302` for a description of the new import hooks."
msgstr ""

msgid "PEP 277: Unicode file name support for Windows NT"
msgstr ""

msgid "On Windows NT, 2000, and XP, the system stores file names as Unicode strings. Traditionally, Python has represented file names as byte strings, which is inadequate because it renders some file names inaccessible."
msgstr ""

msgid "Python now allows using arbitrary Unicode strings (within the limitations of the file system) for all functions that expect file names, most notably the :func:`open` built-in function. If a Unicode string is passed to :func:`os.listdir`, Python now returns a list of Unicode strings.  A new function, :func:`os.getcwdu`, returns the current directory as a Unicode string."
msgstr ""

msgid "Byte strings still work as file names, and on Windows Python will transparently convert them to Unicode using the ``mbcs`` encoding."
msgstr ""

msgid "Other systems also allow Unicode strings as file names but convert them to byte strings before passing them to the system, which can cause a :exc:`UnicodeError` to be raised. Applications can test whether arbitrary Unicode strings are supported as file names by checking :attr:`os.path.supports_unicode_filenames`, a Boolean value."
msgstr ""

msgid "Under MacOS, :func:`os.listdir` may now return Unicode filenames."
msgstr ""

msgid "Written by Neil Hodgson; implemented by Neil Hodgson, Martin von Löwis, and Mark Hammond."
msgstr ""

msgid "PEP 278: Universal Newline Support"
msgstr ""

msgid "The three major operating systems used today are Microsoft Windows, Apple's Macintosh OS, and the various Unix derivatives.  A minor irritation of cross- platform work  is that these three platforms all use different characters to mark the ends of lines in text files.  Unix uses the linefeed (ASCII character 10), MacOS uses the carriage return (ASCII character 13), and Windows uses a two-character sequence of a carriage return plus a newline."
msgstr ""

msgid "Python's file objects can now support end of line conventions other than the one followed by the platform on which Python is running. Opening a file with the mode ``'U'`` or ``'rU'`` will open a file for reading in universal newline mode. All three line ending conventions will be translated to a ``'\\n'`` in the strings returned by the various file methods such as :meth:`read` and :meth:`readline`."
msgstr ""

msgid "Universal newline support is also used when importing modules and when executing a file with the :func:`execfile` function.  This means that Python modules can be shared between all three operating systems without needing to convert the line-endings."
msgstr ""

msgid "This feature can be disabled when compiling Python by specifying the :option:`--without-universal-newlines` switch when running Python's :program:`configure` script."
msgstr ""

msgid "Written and implemented by Jack Jansen."
msgstr ""

msgid "PEP 279: enumerate()"
msgstr ""

msgid "A new built-in function, :func:`enumerate`, will make certain loops a bit clearer.  ``enumerate(thing)``, where *thing* is either an iterator or a sequence, returns a iterator that will return ``(0, thing[0])``, ``(1, thing[1])``, ``(2, thing[2])``, and so forth."
msgstr ""

msgid "A common idiom to change every element of a list looks like this::"
msgstr ""

msgid "for i in range(len(L)):     item = L[i]     # ... compute some result based on item ...     L[i] = result"
msgstr ""

msgid "This can be rewritten using :func:`enumerate` as::"
msgstr ""

msgid "for i, item in enumerate(L):     # ... compute some result based on item ...     L[i] = result"
msgstr ""

msgid "Written and implemented by Raymond D. Hettinger."
msgstr ""

msgid "PEP 282: The logging Package"
msgstr ""

msgid "A standard package for writing logs, :mod:`logging`, has been added to Python 2.3.  It provides a powerful and flexible mechanism for generating logging output which can then be filtered and processed in various ways.  A configuration file written in a standard format can be used to control the logging behavior of a program.  Python includes handlers that will write log records to standard error or to a file or socket, send them to the system log, or even e-mail them to a particular address; of course, it's also possible to write your own handler classes."
msgstr ""

msgid "The :class:`Logger` class is the primary class. Most application code will deal with one or more :class:`Logger` objects, each one used by a particular subsystem of the application. Each :class:`Logger` is identified by a name, and names are organized into a hierarchy using ``.``  as the component separator. For example, you might have :class:`Logger` instances named ``server``, ``server.auth`` and ``server.network``.  The latter two instances are below ``server`` in the hierarchy.  This means that if you turn up the verbosity for ``server`` or direct ``server`` messages to a different handler, the changes will also apply to records logged to ``server.auth`` and ``server.network``. There's also a root :class:`Logger` that's the parent of all other loggers."
msgstr ""

msgid "For simple uses, the :mod:`logging` package contains some convenience functions that always use the root log::"
msgstr ""

msgid "import logging  logging.debug('Debugging information') logging.info('Informational message') logging.warning('Warning:config file %s not found', 'server.conf') logging.error('Error occurred') logging.critical('Critical error -- shutting down')"
msgstr ""

msgid "This produces the following output::"
msgstr ""

msgid "WARNING:root:Warning:config file server.conf not found ERROR:root:Error occurred CRITICAL:root:Critical error -- shutting down"
msgstr ""

msgid "In the default configuration, informational and debugging messages are suppressed and the output is sent to standard error.  You can enable the display of informational and debugging messages by calling the :meth:`setLevel` method on the root logger."
msgstr ""

msgid "Notice the :func:`warning` call's use of string formatting operators; all of the functions for logging messages take the arguments ``(msg, arg1, arg2, ...)`` and log the string resulting from ``msg % (arg1, arg2, ...)``."
msgstr ""

msgid "There's also an :func:`exception` function that records the most recent traceback.  Any of the other functions will also record the traceback if you specify a true value for the keyword argument *exc_info*. ::"
msgstr ""

msgid "def f():     try:    1/0     except: logging.exception('Problem recorded')  f()"
msgstr ""

msgid "ERROR:root:Problem recorded Traceback (most recent call last):   File \"t.py\", line 6, in f     1/0 ZeroDivisionError: integer division or modulo by zero"
msgstr ""

msgid "Slightly more advanced programs will use a logger other than the root logger. The :func:`getLogger(name)` function is used to get a particular log, creating it if it doesn't exist yet. :func:`getLogger(None)` returns the root logger. ::"
msgstr ""

msgid "log = logging.getLogger('server')  ... log.info('Listening on port %i', port)  ... log.critical('Disk full')  ..."
msgstr ""

msgid "Log records are usually propagated up the hierarchy, so a message logged to ``server.auth`` is also seen by ``server`` and ``root``, but a :class:`Logger` can prevent this by setting its :attr:`propagate` attribute to :const:`False`."
msgstr ""

msgid "There are more classes provided by the :mod:`logging` package that can be customized.  When a :class:`Logger` instance is told to log a message, it creates a :class:`LogRecord` instance that is sent to any number of different :class:`Handler` instances.  Loggers and handlers can also have an attached list of filters, and each filter can cause the :class:`LogRecord` to be ignored or can modify the record before passing it along.  When they're finally output, :class:`LogRecord` instances are converted to text by a :class:`Formatter` class.  All of these classes can be replaced by your own specially-written classes."
msgstr ""

msgid "With all of these features the :mod:`logging` package should provide enough flexibility for even the most complicated applications.  This is only an incomplete overview of its features, so please see the package's reference documentation for all of the details.  Reading :pep:`282` will also be helpful."
msgstr ""

msgid "Written by Vinay Sajip and Trent Mick; implemented by Vinay Sajip."
msgstr ""

msgid "PEP 285: A Boolean Type"
msgstr ""

msgid "A Boolean type was added to Python 2.3.  Two new constants were added to the :mod:`__builtin__` module, :const:`True` and :const:`False`.  (:const:`True` and :const:`False` constants were added to the built-ins in Python 2.2.1, but the 2.2.1 versions are simply set to integer values of 1 and 0 and aren't a different type.)"
msgstr ""

msgid "The type object for this new type is named :class:`bool`; the constructor for it takes any Python value and converts it to :const:`True` or :const:`False`. ::"
msgstr ""

msgid ">>> bool(1) True >>> bool(0) False >>> bool([]) False >>> bool( (1,) ) True"
msgstr ""

msgid "Most of the standard library modules and built-in functions have been changed to return Booleans. ::"
msgstr ""

msgid ">>> obj = [] >>> hasattr(obj, 'append') True >>> isinstance(obj, list) True >>> isinstance(obj, tuple) False"
msgstr ""

msgid "Python's Booleans were added with the primary goal of making code clearer.  For example, if you're reading a function and encounter the statement ``return 1``, you might wonder whether the ``1`` represents a Boolean truth value, an index, or a coefficient that multiplies some other quantity.  If the statement is ``return True``, however, the meaning of the return value is quite clear."
msgstr ""

msgid "Python's Booleans were *not* added for the sake of strict type-checking.  A very strict language such as Pascal would also prevent you performing arithmetic with Booleans, and would require that the expression in an :keyword:`if` statement always evaluate to a Boolean result.  Python is not this strict and never will be, as :pep:`285` explicitly says.  This means you can still use any expression in an :keyword:`if` statement, even ones that evaluate to a list or tuple or some random object.  The Boolean type is a subclass of the :class:`int` class so that arithmetic using a Boolean still works. ::"
msgstr ""

msgid ">>> True + 1 2 >>> False + 1 1 >>> False * 75 0 >>> True * 75 75"
msgstr ""

msgid "To sum up :const:`True` and :const:`False` in a sentence: they're alternative ways to spell the integer values 1 and 0, with the single difference that :func:`str` and :func:`repr` return the strings ``'True'`` and ``'False'`` instead of ``'1'`` and ``'0'``."
msgstr ""

msgid "Written and implemented by GvR."
msgstr ""

msgid "PEP 293: Codec Error Handling Callbacks"
msgstr ""

msgid "When encoding a Unicode string into a byte string, unencodable characters may be encountered.  So far, Python has allowed specifying the error processing as either \"strict\" (raising :exc:`UnicodeError`), \"ignore\" (skipping the character), or \"replace\" (using a question mark in the output string), with \"strict\" being the default behavior. It may be desirable to specify alternative processing of such errors, such as inserting an XML character reference or HTML entity reference into the converted string."
msgstr ""

msgid "Python now has a flexible framework to add different processing strategies.  New error handlers can be added with :func:`codecs.register_error`, and codecs then can access the error handler with :func:`codecs.lookup_error`. An equivalent C API has been added for codecs written in C. The error handler gets the necessary state information such as the string being converted, the position in the string where the error was detected, and the target encoding.  The handler can then either raise an exception or return a replacement string."
msgstr ""

msgid "Two additional error handlers have been implemented using this framework: \"backslashreplace\" uses Python backslash quoting to represent unencodable characters and \"xmlcharrefreplace\" emits XML character references."
msgstr ""

msgid "Written and implemented by Walter Dörwald."
msgstr ""

msgid "PEP 301: Package Index and Metadata for Distutils"
msgstr ""

msgid "Support for the long-requested Python catalog makes its first appearance in 2.3."
msgstr ""

msgid "The heart of the catalog is the new Distutils :command:`register` command. Running ``python setup.py register`` will collect the metadata describing a package, such as its name, version, maintainer, description, &c., and send it to a central catalog server.  The resulting catalog is available from http://www.python.org/pypi."
msgstr ""

msgid "To make the catalog a bit more useful, a new optional *classifiers* keyword argument has been added to the Distutils :func:`setup` function.  A list of `Trove <http://catb.org/~esr/trove/>`_-style strings can be supplied to help classify the software."
msgstr ""

msgid "Here's an example :file:`setup.py` with classifiers, written to be compatible with older versions of the Distutils::"
msgstr ""

msgid "from distutils import core kw = {'name': \"Quixote\",       'version': \"0.5.1\",       'description': \"A highly Pythonic Web application framework\",       # ...       }  if (hasattr(core, 'setup_keywords') and     'classifiers' in core.setup_keywords):     kw['classifiers'] = \\         ['Topic :: Internet :: WWW/HTTP :: Dynamic Content',          'Environment :: No Input/Output (Daemon)',          'Intended Audience :: Developers'],  core.setup(**kw)"
msgstr ""

msgid "The full list of classifiers can be obtained by running  ``python setup.py register --list-classifiers``."
msgstr ""

msgid "Written and implemented by Richard Jones."
msgstr ""

msgid "PEP 302: New Import Hooks"
msgstr ""

msgid "While it's been possible to write custom import hooks ever since the :mod:`ihooks` module was introduced in Python 1.3, no one has ever been really happy with it because writing new import hooks is difficult and messy.  There have been various proposed alternatives such as the :mod:`imputil` and :mod:`iu` modules, but none of them has ever gained much acceptance, and none of them were easily usable from C code."
msgstr ""

msgid ":pep:`302` borrows ideas from its predecessors, especially from Gordon McMillan's :mod:`iu` module.  Three new items  are added to the :mod:`sys` module:"
msgstr ""

msgid "``sys.path_hooks`` is a list of callable objects; most  often they'll be classes.  Each callable takes a string containing a path and either returns an importer object that will handle imports from this path or raises an :exc:`ImportError` exception if it can't handle this path."
msgstr ""

msgid "``sys.path_importer_cache`` caches importer objects for each path, so ``sys.path_hooks`` will only need to be traversed once for each path."
msgstr ""

msgid "``sys.meta_path`` is a list of importer objects that will be traversed before ``sys.path`` is checked.  This list is initially empty, but user code can add objects to it.  Additional built-in and frozen modules can be imported by an object added to this list."
msgstr ""

msgid "Importer objects must have a single method, :meth:`find_module(fullname, path=None)`.  *fullname* will be a module or package name, e.g. ``string`` or ``distutils.core``.  :meth:`find_module` must return a loader object that has a single method, :meth:`load_module(fullname)`, that creates and returns the corresponding module object."
msgstr ""

msgid "Pseudo-code for Python's new import logic, therefore, looks something like this (simplified a bit; see :pep:`302` for the full details)::"
msgstr ""

msgid "for mp in sys.meta_path:     loader = mp(fullname)     if loader is not None:         <module> = loader.load_module(fullname)  for path in sys.path:     for hook in sys.path_hooks:         try:             importer = hook(path)         except ImportError:             # ImportError, so try the other path hooks             pass         else:             loader = importer.find_module(fullname)             <module> = loader.load_module(fullname)  # Not found! raise ImportError"
msgstr ""

msgid "Written by Just van Rossum and Paul Moore. Implemented by Just van Rossum."
msgstr ""

msgid "PEP 305: Comma-separated Files"
msgstr ""

msgid "Comma-separated files are a format frequently used for exporting data from databases and spreadsheets.  Python 2.3 adds a parser for comma-separated files."
msgstr ""

msgid "Comma-separated format is deceptively simple at first glance::"
msgstr ""

msgid "Costs,150,200,3.95"
msgstr ""

msgid "Read a line and call ``line.split(',')``: what could be simpler? But toss in string data that can contain commas, and things get more complicated::"
msgstr ""

msgid "\"Costs\",150,200,3.95,\"Includes taxes, shipping, and sundry items\""
msgstr ""

msgid "A big ugly regular expression can parse this, but using the new  :mod:`csv` package is much simpler::"
msgstr ""

msgid "import csv  input = open('datafile', 'rb') reader = csv.reader(input) for line in reader:     print line"
msgstr ""

msgid "The :func:`reader` function takes a number of different options. The field separator isn't limited to the comma and can be changed to any character, and so can the quoting and line-ending characters."
msgstr ""

msgid "Different dialects of comma-separated files can be defined and registered; currently there are two dialects, both used by Microsoft Excel. A separate :class:`csv.writer` class will generate comma-separated files from a succession of tuples or lists, quoting strings that contain the delimiter."
msgstr ""

msgid "Written and implemented  by Kevin Altis, Dave Cole, Andrew McNamara, Skip Montanaro, Cliff Wells."
msgstr ""

msgid "PEP 307: Pickle Enhancements"
msgstr ""

msgid "The :mod:`pickle` and :mod:`cPickle` modules received some attention during the 2.3 development cycle.  In 2.2, new-style classes could be pickled without difficulty, but they weren't pickled very compactly; :pep:`307` quotes a trivial example where a new-style class results in a pickled string three times longer than that for a classic class."
msgstr ""

msgid "The solution was to invent a new pickle protocol.  The :func:`pickle.dumps` function has supported a text-or-binary flag  for a long time.  In 2.3, this flag is redefined from a Boolean to an integer: 0 is the old text-mode pickle format, 1 is the old binary format, and now 2 is a new 2.3-specific format.  A new constant, :const:`pickle.HIGHEST_PROTOCOL`, can be used to select the fanciest protocol available."
msgstr ""

msgid "Unpickling is no longer considered a safe operation.  2.2's :mod:`pickle` provided hooks for trying to prevent unsafe classes from being unpickled (specifically, a :attr:`__safe_for_unpickling__` attribute), but none of this code was ever audited and therefore it's all been ripped out in 2.3.  You should not unpickle untrusted data in any version of Python."
msgstr ""

msgid "To reduce the pickling overhead for new-style classes, a new interface for customizing pickling was added using three special methods: :meth:`__getstate__`, :meth:`__setstate__`, and :meth:`__getnewargs__`.  Consult :pep:`307` for the full semantics  of these methods."
msgstr ""

msgid "As a way to compress pickles yet further, it's now possible to use integer codes instead of long strings to identify pickled classes. The Python Software Foundation will maintain a list of standardized codes; there's also a range of codes for private use.  Currently no codes have been specified."
msgstr ""

msgid "Written and implemented  by Guido van Rossum and Tim Peters."
msgstr ""

msgid "Extended Slices"
msgstr ""

msgid "Ever since Python 1.4, the slicing syntax has supported an optional third \"step\" or \"stride\" argument.  For example, these are all legal Python syntax: ``L[1:10:2]``, ``L[:-1:1]``, ``L[::-1]``.  This was added to Python at the request of the developers of Numerical Python, which uses the third argument extensively.  However, Python's built-in list, tuple, and string sequence types have never supported this feature, raising a :exc:`TypeError` if you tried it. Michael Hudson contributed a patch to fix this shortcoming."
msgstr ""

msgid "For example, you can now easily extract the elements of a list that have even indexes::"
msgstr ""

msgid ">>> L = range(10) >>> L[::2] [0, 2, 4, 6, 8]"
msgstr ""

msgid "Negative values also work to make a copy of the same list in reverse order::"
msgstr ""

msgid ">>> L[::-1] [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
msgstr ""

msgid "This also works for tuples, arrays, and strings::"
msgstr ""

msgid ">>> s='abcd' >>> s[::2] 'ac' >>> s[::-1] 'dcba'"
msgstr ""

msgid "If you have a mutable sequence such as a list or an array you can assign to or delete an extended slice, but there are some differences between assignment to extended and regular slices.  Assignment to a regular slice can be used to change the length of the sequence::"
msgstr ""

msgid ">>> a = range(3) >>> a [0, 1, 2] >>> a[1:3] = [4, 5, 6] >>> a [0, 4, 5, 6]"
msgstr ""

msgid "Extended slices aren't this flexible.  When assigning to an extended slice, the list on the right hand side of the statement must contain the same number of items as the slice it is replacing::"
msgstr ""

msgid ">>> a = range(4) >>> a [0, 1, 2, 3] >>> a[::2] [0, 2] >>> a[::2] = [0, -1] >>> a [0, 1, -1, 3] >>> a[::2] = [0,1,2] Traceback (most recent call last):   File \"<stdin>\", line 1, in ? ValueError: attempt to assign sequence of size 3 to extended slice of size 2"
msgstr ""

msgid "Deletion is more straightforward::"
msgstr ""

msgid ">>> a = range(4) >>> a [0, 1, 2, 3] >>> a[::2] [0, 2] >>> del a[::2] >>> a [1, 3]"
msgstr ""

msgid "One can also now pass slice objects to the :meth:`__getitem__` methods of the built-in sequences::"
msgstr ""

msgid ">>> range(10).__getitem__(slice(0, 5, 2)) [0, 2, 4]"
msgstr ""

msgid "Or use slice objects directly in subscripts::"
msgstr ""

msgid ">>> range(10)[slice(0, 5, 2)] [0, 2, 4]"
msgstr ""

msgid "To simplify implementing sequences that support extended slicing, slice objects now have a method :meth:`indices(length)` which, given the length of a sequence, returns a ``(start, stop, step)`` tuple that can be passed directly to :func:`range`. :meth:`indices` handles omitted and out-of-bounds indices in a manner consistent with regular slices (and this innocuous phrase hides a welter of confusing details!).  The method is intended to be used like this::"
msgstr ""

msgid "class FakeSeq:     ...     def calc_item(self, i):         ...     def __getitem__(self, item):         if isinstance(item, slice):             indices = item.indices(len(self))             return FakeSeq([self.calc_item(i) for i in range(*indices)])         else:             return self.calc_item(i)"
msgstr ""

msgid "From this example you can also see that the built-in :class:`slice` object is now the type object for the slice type, and is no longer a function.  This is consistent with Python 2.2, where :class:`int`, :class:`str`, etc., underwent the same change."
msgstr ""

msgid "Other Language Changes"
msgstr ""

msgid "Here are all of the changes that Python 2.3 makes to the core Python language."
msgstr ""

msgid "The :keyword:`yield` statement is now always a keyword, as described in section :ref:`section-generators` of this document."
msgstr ""

msgid "A new built-in function :func:`enumerate` was added, as described in section :ref:`section-enumerate` of this document."
msgstr ""

msgid "Two new constants, :const:`True` and :const:`False` were added along with the built-in :class:`bool` type, as described in section :ref:`section-bool` of this document."
msgstr ""

msgid "The :func:`int` type constructor will now return a long integer instead of raising an :exc:`OverflowError` when a string or floating-point number is too large to fit into an integer.  This can lead to the paradoxical result that ``isinstance(int(expression), int)`` is false, but that seems unlikely to cause problems in practice."
msgstr ""

msgid "Built-in types now support the extended slicing syntax, as described in section :ref:`section-slices` of this document."
msgstr ""

msgid "A new built-in function, :func:`sum(iterable, start=0)`,  adds up the numeric items in the iterable object and returns their sum.  :func:`sum` only accepts numbers, meaning that you can't use it to concatenate a bunch of strings. (Contributed by Alex Martelli.)"
msgstr ""

msgid "``list.insert(pos, value)`` used to  insert *value* at the front of the list when *pos* was negative.  The behaviour has now been changed to be consistent with slice indexing, so when *pos* is -1 the value will be inserted before the last element, and so forth."
msgstr ""

msgid "``list.index(value)``, which searches for *value*  within the list and returns its index, now takes optional  *start* and *stop* arguments to limit the search to  only part of the list."
msgstr ""

msgid "Dictionaries have a new method, :meth:`pop(key[, *default*])`, that returns the value corresponding to *key* and removes that key/value pair from the dictionary.  If the requested key isn't present in the dictionary, *default* is returned if it's specified and :exc:`KeyError` raised if it isn't. ::"
msgstr ""

msgid ">>> d = {1:2} >>> d {1: 2} >>> d.pop(4) Traceback (most recent call last):   File \"stdin\", line 1, in ? KeyError: 4 >>> d.pop(1) 2 >>> d.pop(1) Traceback (most recent call last):   File \"stdin\", line 1, in ? KeyError: 'pop(): dictionary is empty' >>> d {} >>>"
msgstr ""

msgid "There's also a new class method,  :meth:`dict.fromkeys(iterable, value)`, that creates a dictionary with keys taken from the supplied iterator *iterable* and all values set to *value*, defaulting to ``None``."
msgstr ""

msgid "(Patches contributed by Raymond Hettinger.)"
msgstr ""

msgid "Also, the :func:`dict` constructor now accepts keyword arguments to simplify creating small dictionaries::"
msgstr ""

msgid ">>> dict(red=1, blue=2, green=3, black=4) {'blue': 2, 'black': 4, 'green': 3, 'red': 1}"
msgstr ""

msgid "(Contributed by Just van Rossum.)"
msgstr ""

msgid "The :keyword:`assert` statement no longer checks the ``__debug__`` flag, so you can no longer disable assertions by assigning to ``__debug__``. Running Python with the :option:`-O` switch will still generate code that doesn't execute any assertions."
msgstr ""

msgid "Most type objects are now callable, so you can use them to create new objects such as functions, classes, and modules.  (This means that the :mod:`new` module can be deprecated in a future Python version, because you can now use the type objects available in the :mod:`types` module.) For example, you can create a new module object with the following code:"
msgstr ""

msgid ">>> import types >>> m = types.ModuleType('abc','docstring') >>> m <module 'abc' (built-in)> >>> m.__doc__ 'docstring'"
msgstr ""

msgid "A new warning, :exc:`PendingDeprecationWarning` was added to indicate features which are in the process of being deprecated.  The warning will *not* be printed by default.  To check for use of features that will be deprecated in the future, supply :option:`-Walways::PendingDeprecationWarning::` on the command line or use :func:`warnings.filterwarnings`."
msgstr ""

msgid "The process of deprecating string-based exceptions, as in ``raise \"Error occurred\"``, has begun.  Raising a string will now trigger :exc:`PendingDeprecationWarning`."
msgstr ""

msgid "Using ``None`` as a variable name will now result in a :exc:`SyntaxWarning` warning.  In a future version of Python, ``None`` may finally become a keyword."
msgstr ""

msgid "The :meth:`xreadlines` method of file objects, introduced in Python 2.1, is no longer necessary because files now behave as their own iterator. :meth:`xreadlines` was originally introduced as a faster way to loop over all the lines in a file, but now you can simply write ``for line in file_obj``. File objects also have a new read-only :attr:`encoding` attribute that gives the encoding used by the file; Unicode strings written to the file will be automatically  converted to bytes using the given encoding."
msgstr ""

msgid "The method resolution order used by new-style classes has changed, though you'll only notice the difference if you have a really complicated inheritance hierarchy.  Classic classes are unaffected by this change.  Python 2.2 originally used a topological sort of a class's ancestors, but 2.3 now uses the C3 algorithm as described in the paper `\"A Monotonic Superclass Linearization for Dylan\" <http://www.webcom.com/haahr/dylan/linearization-oopsla96.html>`_. To understand the motivation for this change,  read Michele Simionato's article `\"Python 2.3 Method Resolution Order\" <http://www.python.org/2.3/mro.html>`_, or read the thread on python-dev starting with the message at http://mail.python.org/pipermail/python-dev/2002-October/029035.html. Samuele Pedroni first pointed out the problem and also implemented the fix by coding the C3 algorithm."
msgstr ""

msgid "Python runs multithreaded programs by switching between threads after executing N bytecodes.  The default value for N has been increased from 10 to 100 bytecodes, speeding up single-threaded applications by reducing the switching overhead.  Some multithreaded applications may suffer slower response time, but that's easily fixed by setting the limit back to a lower number using :func:`sys.setcheckinterval(N)`. The limit can be retrieved with the new :func:`sys.getcheckinterval` function."
msgstr ""

msgid "One minor but far-reaching change is that the names of extension types defined by the modules included with Python now contain the module and a ``'.'`` in front of the type name.  For example, in Python 2.2, if you created a socket and printed its :attr:`__class__`, you'd get this output::"
msgstr ""

msgid ">>> s = socket.socket() >>> s.__class__ <type 'socket'>"
msgstr ""

msgid "In 2.3, you get this::"
msgstr ""

msgid ">>> s.__class__ <type '_socket.socket'>"
msgstr ""

msgid "One of the noted incompatibilities between old- and new-style classes has been removed: you can now assign to the :attr:`__name__` and :attr:`__bases__` attributes of new-style classes.  There are some restrictions on what can be assigned to :attr:`__bases__` along the lines of those relating to assigning to an instance's :attr:`__class__` attribute."
msgstr ""

msgid "String Changes"
msgstr ""

msgid "The :keyword:`in` operator now works differently for strings. Previously, when evaluating ``X in Y`` where *X* and *Y* are strings, *X* could only be a single character. That's now changed; *X* can be a string of any length, and ``X in Y`` will return :const:`True` if *X* is a substring of *Y*.  If *X* is the empty string, the result is always :const:`True`. ::"
msgstr ""

msgid ">>> 'ab' in 'abcd' True >>> 'ad' in 'abcd' False >>> '' in 'abcd' True"
msgstr ""

msgid "Note that this doesn't tell you where the substring starts; if you need that information, use the :meth:`find` string method."
msgstr ""

msgid "The :meth:`strip`, :meth:`lstrip`, and :meth:`rstrip` string methods now have an optional argument for specifying the characters to strip.  The default is still to remove all whitespace characters::"
msgstr ""

msgid ">>> '   abc '.strip() 'abc' >>> '><><abc<><><>'.strip('<>') 'abc' >>> '><><abc<><><>\\n'.strip('<>') 'abc<><><>\\n' >>> u'\\u4000\\u4001abc\\u4000'.strip(u'\\u4000') u'\\u4001abc' >>>"
msgstr ""

msgid "(Suggested by Simon Brunning and implemented by Walter Dörwald.)"
msgstr ""

msgid "The :meth:`startswith` and :meth:`endswith` string methods now accept negative numbers for the *start* and *end* parameters."
msgstr ""

msgid "Another new string method is :meth:`zfill`, originally a function in the :mod:`string` module.  :meth:`zfill` pads a numeric string with zeros on the left until it's the specified width. Note that the ``%`` operator is still more flexible and powerful than :meth:`zfill`. ::"
msgstr ""

msgid ">>> '45'.zfill(4) '0045' >>> '12345'.zfill(4) '12345' >>> 'goofy'.zfill(6) '0goofy'"
msgstr ""

msgid "(Contributed by Walter Dörwald.)"
msgstr ""

msgid "A new type object, :class:`basestring`, has been added. Both 8-bit strings and Unicode strings inherit from this type, so ``isinstance(obj, basestring)`` will return :const:`True` for either kind of string.  It's a completely abstract type, so you can't create :class:`basestring` instances."
msgstr ""

msgid "Interned strings are no longer immortal and will now be garbage-collected in the usual way when the only reference to them is from the internal dictionary of interned strings.  (Implemented by Oren Tirosh.)"
msgstr ""

msgid "Optimizations"
msgstr ""

msgid "The creation of new-style class instances has been made much faster; they're now faster than classic classes!"
msgstr ""

msgid "The :meth:`sort` method of list objects has been extensively rewritten by Tim Peters, and the implementation is significantly faster."
msgstr ""

msgid "Multiplication of large long integers is now much faster thanks to an implementation of Karatsuba multiplication, an algorithm that scales better than the O(n\\*n) required for the grade-school multiplication algorithm.  (Original patch by Christopher A. Craig, and significantly reworked by Tim Peters.)"
msgstr ""

msgid "The ``SET_LINENO`` opcode is now gone.  This may provide a small speed increase, depending on your compiler's idiosyncrasies. See section :ref:`23section-other` for a longer explanation. (Removed by Michael Hudson.)"
msgstr ""

msgid ":func:`xrange` objects now have their own iterator, making ``for i in xrange(n)`` slightly faster than ``for i in range(n)``.  (Patch by Raymond Hettinger.)"
msgstr ""

msgid "A number of small rearrangements have been made in various hotspots to improve performance, such as inlining a function or removing some code.  (Implemented mostly by GvR, but lots of people have contributed single changes.)"
msgstr ""

msgid "The net result of the 2.3 optimizations is that Python 2.3 runs the  pystone benchmark around 25% faster than Python 2.2."
msgstr ""

msgid "New, Improved, and Deprecated Modules"
msgstr ""

msgid "As usual, Python's standard library received a number of enhancements and bug fixes.  Here's a partial list of the most notable changes, sorted alphabetically by module name. Consult the :file:`Misc/NEWS` file in the source tree for a more complete list of changes, or look through the CVS logs for all the details."
msgstr ""

msgid "The :mod:`array` module now supports arrays of Unicode characters using the ``'u'`` format character.  Arrays also now support using the ``+=`` assignment operator to add another array's contents, and the ``*=`` assignment operator to repeat an array. (Contributed by Jason Orendorff.)"
msgstr ""

msgid "The :mod:`bsddb` module has been replaced by version 4.1.6 of the `PyBSDDB <http://pybsddb.sourceforge.net>`_ package, providing a more complete interface to the transactional features of the BerkeleyDB library."
msgstr ""

msgid "The old version of the module has been renamed to  :mod:`bsddb185` and is no longer built automatically; you'll  have to edit :file:`Modules/Setup` to enable it.  Note that the new :mod:`bsddb` package is intended to be compatible with the  old module, so be sure to file bugs if you discover any incompatibilities. When upgrading to Python 2.3, if the new interpreter is compiled with a new version of  the underlying BerkeleyDB library, you will almost certainly have to convert your database files to the new version.  You can do this fairly easily with the new scripts :file:`db2pickle.py` and :file:`pickle2db.py` which you will find in the distribution's :file:`Tools/scripts` directory.  If you've already been using the PyBSDDB package and importing it as :mod:`bsddb3`, you will have to change your ``import`` statements to import it as :mod:`bsddb`."
msgstr ""

msgid "The new :mod:`bz2` module is an interface to the bz2 data compression library. bz2-compressed data is usually smaller than  corresponding :mod:`zlib`\\ -compressed data. (Contributed by Gustavo Niemeyer.)"
msgstr ""

msgid "A set of standard date/time types has been added in the new :mod:`datetime` module.  See the following section for more details."
msgstr ""

msgid "The Distutils :class:`Extension` class now supports an extra constructor argument named *depends* for listing additional source files that an extension depends on.  This lets Distutils recompile the module if any of the dependency files are modified.  For example, if :file:`sampmodule.c` includes the header file :file:`sample.h`, you would create the :class:`Extension` object like this::"
msgstr ""

msgid "ext = Extension(\"samp\",                 sources=[\"sampmodule.c\"],                 depends=[\"sample.h\"])"
msgstr ""

msgid "Modifying :file:`sample.h` would then cause the module to be recompiled. (Contributed by Jeremy Hylton.)"
msgstr ""

msgid "Other minor changes to Distutils: it now checks for the :envvar:`CC`, :envvar:`CFLAGS`, :envvar:`CPP`, :envvar:`LDFLAGS`, and :envvar:`CPPFLAGS` environment variables, using them to override the settings in Python's configuration (contributed by Robert Weber)."
msgstr ""

msgid "Previously the :mod:`doctest` module would only search the docstrings of public methods and functions for test cases, but it now also examines private ones as well.  The :func:`DocTestSuite(` function creates a :class:`unittest.TestSuite` object from a set of :mod:`doctest` tests."
msgstr ""

msgid "The new :func:`gc.get_referents(object)` function returns a list of all the objects referenced by *object*."
msgstr ""

msgid "The :mod:`getopt` module gained a new function, :func:`gnu_getopt`, that supports the same arguments as the existing :func:`getopt` function but uses GNU-style scanning mode. The existing :func:`getopt` stops processing options as soon as a non-option argument is encountered, but in GNU-style mode processing continues, meaning that options and arguments can be mixed.  For example::"
msgstr ""

msgid ">>> getopt.getopt(['-f', 'filename', 'output', '-v'], 'f:v') ([('-f', 'filename')], ['output', '-v']) >>> getopt.gnu_getopt(['-f', 'filename', 'output', '-v'], 'f:v') ([('-f', 'filename'), ('-v', '')], ['output'])"
msgstr ""

msgid "(Contributed by Peter Åstrand.)"
msgstr ""

msgid "The :mod:`grp`, :mod:`pwd`, and :mod:`resource` modules now return enhanced tuples::"
msgstr ""

msgid ">>> import grp >>> g = grp.getgrnam('amk') >>> g.gr_name, g.gr_gid ('amk', 500)"
msgstr ""

msgid "The :mod:`gzip` module can now handle files exceeding 2 GiB."
msgstr ""

msgid "The new :mod:`heapq` module contains an implementation of a heap queue algorithm.  A heap is an array-like data structure that keeps items in a partially sorted order such that, for every index *k*, ``heap[k] <= heap[2*k+1]`` and ``heap[k] <= heap[2*k+2]``.  This makes it quick to remove the smallest item, and inserting a new item while maintaining the heap property is O(lg n).  (See http://www.nist.gov/dads/HTML/priorityque.html for more information about the priority queue data structure.)"
msgstr ""

msgid "The :mod:`heapq` module provides :func:`heappush` and :func:`heappop` functions for adding and removing items while maintaining the heap property on top of some other mutable Python sequence type.  Here's an example that uses a Python list::"
msgstr ""

msgid ">>> import heapq >>> heap = [] >>> for item in [3, 7, 5, 11, 1]: ...    heapq.heappush(heap, item) ... >>> heap [1, 3, 5, 11, 7] >>> heapq.heappop(heap) 1 >>> heapq.heappop(heap) 3 >>> heap [5, 7, 11]"
msgstr ""

msgid "(Contributed by Kevin O'Connor.)"
msgstr ""

msgid "The IDLE integrated development environment has been updated using the code from the IDLEfork project (http://idlefork.sf.net).  The most notable feature is that the code being developed is now executed in a subprocess, meaning that there's no longer any need for manual ``reload()`` operations. IDLE's core code has been incorporated into the standard library as the :mod:`idlelib` package."
msgstr ""

msgid "The :mod:`imaplib` module now supports IMAP over SSL. (Contributed by Piers Lauder and Tino Lange.)"
msgstr ""

msgid "The :mod:`itertools` contains a number of useful functions for use with iterators, inspired by various functions provided by the ML and Haskell languages.  For example, ``itertools.ifilter(predicate, iterator)`` returns all elements in the iterator for which the function :func:`predicate` returns :const:`True`, and ``itertools.repeat(obj, N)`` returns ``obj`` *N* times. There are a number of other functions in the module; see the package's reference documentation for details. (Contributed by Raymond Hettinger.)"
msgstr ""

msgid "Two new functions in the :mod:`math` module, :func:`degrees(rads)` and :func:`radians(degs)`, convert between radians and degrees.  Other functions in the :mod:`math` module such as :func:`math.sin` and :func:`math.cos` have always required input values measured in radians.  Also, an optional *base* argument was added to :func:`math.log` to make it easier to compute logarithms for bases other than ``e`` and ``10``.  (Contributed by Raymond Hettinger.)"
msgstr ""

msgid "Several new POSIX functions (:func:`getpgid`, :func:`killpg`, :func:`lchown`, :func:`loadavg`, :func:`major`, :func:`makedev`, :func:`minor`, and :func:`mknod`) were added to the :mod:`posix` module that underlies the :mod:`os` module. (Contributed by Gustavo Niemeyer, Geert Jansen, and Denis S. Otkidach.)"
msgstr ""

msgid "In the :mod:`os` module, the :func:`\\*stat` family of functions can now report fractions of a second in a timestamp.  Such time stamps are represented as floats, similar to the value returned by :func:`time.time`."
msgstr ""

msgid "During testing, it was found that some applications will break if time stamps are floats.  For compatibility, when using the tuple interface of the :class:`stat_result` time stamps will be represented as integers. When using named fields (a feature first introduced in Python 2.2), time stamps are still represented as integers, unless :func:`os.stat_float_times` is invoked to enable float return values::"
msgstr ""

msgid ">>> os.stat(\"/tmp\").st_mtime 1034791200 >>> os.stat_float_times(True) >>> os.stat(\"/tmp\").st_mtime 1034791200.6335014"
msgstr ""

msgid "In Python 2.4, the default will change to always returning floats."
msgstr ""

msgid "Application developers should enable this feature only if all their libraries work properly when confronted with floating point time stamps, or if they use the tuple API. If used, the feature should be activated on an application level instead of trying to enable it on a per-use basis."
msgstr ""

msgid "The :mod:`optparse` module contains a new parser for command-line arguments that can convert option values to a particular Python type  and will automatically generate a usage message.  See the following section for  more details."
msgstr ""

msgid "The old and never-documented :mod:`linuxaudiodev` module has been deprecated, and a new version named :mod:`ossaudiodev` has been added.  The module was renamed because the OSS sound drivers can be used on platforms other than Linux, and the interface has also been tidied and brought up to date in various ways. (Contributed by Greg Ward and Nicholas FitzRoy-Dale.)"
msgstr ""

msgid "The new :mod:`platform` module contains a number of functions that try to determine various properties of the platform you're running on.  There are functions for getting the architecture, CPU type, the Windows OS version, and even the Linux distribution version. (Contributed by Marc-André Lemburg.)"
msgstr ""

msgid "The parser objects provided by the :mod:`pyexpat` module can now optionally buffer character data, resulting in fewer calls to your character data handler and therefore faster performance.  Setting the parser object's :attr:`buffer_text` attribute to :const:`True` will enable buffering."
msgstr ""

msgid "The :func:`sample(population, k)` function was added to the :mod:`random` module.  *population* is a sequence or :class:`xrange` object containing the elements of a population, and :func:`sample` chooses *k* elements from the population without replacing chosen elements.  *k* can be any value up to ``len(population)``. For example::"
msgstr ""

msgid ">>> days = ['Mo', 'Tu', 'We', 'Th', 'Fr', 'St', 'Sn'] >>> random.sample(days, 3)      # Choose 3 elements ['St', 'Sn', 'Th'] >>> random.sample(days, 7)      # Choose 7 elements ['Tu', 'Th', 'Mo', 'We', 'St', 'Fr', 'Sn'] >>> random.sample(days, 7)      # Choose 7 again ['We', 'Mo', 'Sn', 'Fr', 'Tu', 'St', 'Th'] >>> random.sample(days, 8)      # Can't choose eight Traceback (most recent call last):   File \"<stdin>\", line 1, in ?   File \"random.py\", line 414, in sample       raise ValueError, \"sample larger than population\" ValueError: sample larger than population >>> random.sample(xrange(1,10000,2), 10)   # Choose ten odd nos. under 10000 [3407, 3805, 1505, 7023, 2401, 2267, 9733, 3151, 8083, 9195]"
msgstr ""

msgid "The :mod:`random` module now uses a new algorithm, the Mersenne Twister, implemented in C.  It's faster and more extensively studied than the previous algorithm."
msgstr ""

msgid "(All changes contributed by Raymond Hettinger.)"
msgstr ""

msgid "The :mod:`readline` module also gained a number of new functions: :func:`get_history_item`, :func:`get_current_history_length`, and :func:`redisplay`."
msgstr ""

msgid "The :mod:`rexec` and :mod:`Bastion` modules have been declared dead, and attempts to import them will fail with a :exc:`RuntimeError`.  New-style classes provide new ways to break out of the restricted execution environment provided by :mod:`rexec`, and no one has interest in fixing them or time to do so.  If you have applications using :mod:`rexec`, rewrite them to use something else."
msgstr ""

msgid "(Sticking with Python 2.2 or 2.1 will not make your applications any safer because there are known bugs in the :mod:`rexec` module in those versions.  To repeat: if you're using :mod:`rexec`, stop using it immediately.)"
msgstr ""

msgid "The :mod:`rotor` module has been deprecated because the  algorithm it uses for encryption is not believed to be secure.  If you need encryption, use one of the several AES Python modules that are available separately."
msgstr ""

msgid "The :mod:`shutil` module gained a :func:`move(src, dest)` function that recursively moves a file or directory to a new location."
msgstr ""

msgid "Support for more advanced POSIX signal handling was added to the :mod:`signal` but then removed again as it proved impossible to make it work reliably across platforms."
msgstr ""

msgid "The :mod:`socket` module now supports timeouts.  You can call the :meth:`settimeout(t)` method on a socket object to set a timeout of *t* seconds. Subsequent socket operations that take longer than *t* seconds to complete will abort and raise a :exc:`socket.timeout` exception."
msgstr ""

msgid "The original timeout implementation was by Tim O'Malley.  Michael Gilfix integrated it into the Python :mod:`socket` module and shepherded it through a lengthy review.  After the code was checked in, Guido van Rossum rewrote parts of it.  (This is a good example of a collaborative development process in action.)"
msgstr ""

msgid "On Windows, the :mod:`socket` module now ships with Secure  Sockets Layer (SSL) support."
msgstr ""

msgid "The value of the C :const:`PYTHON_API_VERSION` macro is now exposed at the Python level as ``sys.api_version``.  The current exception can be cleared by calling the new :func:`sys.exc_clear` function."
msgstr ""

msgid "The new :mod:`tarfile` module  allows reading from and writing to :program:`tar`\\ -format archive files. (Contributed by Lars Gustäbel.)"
msgstr ""

msgid "The new :mod:`textwrap` module contains functions for wrapping strings containing paragraphs of text.  The :func:`wrap(text, width)` function takes a string and returns a list containing the text split into lines of no more than the chosen width.  The :func:`fill(text, width)` function returns a single string, reformatted to fit into lines no longer than the chosen width. (As you can guess, :func:`fill` is built on top of :func:`wrap`.  For example::"
msgstr ""

msgid ">>> import textwrap >>> paragraph = \"Not a whit, we defy augury: ... more text ...\" >>> textwrap.wrap(paragraph, 60) [\"Not a whit, we defy augury: there's a special providence in\",  \"the fall of a sparrow. If it be now, 'tis not to come; if it\",  ...] >>> print textwrap.fill(paragraph, 35) Not a whit, we defy augury: there's a special providence in the fall of a sparrow. If it be now, 'tis not to come; if it be not to come, it will be now; if it be not now, yet it will come: the readiness is all. >>>"
msgstr ""

msgid "The module also contains a :class:`TextWrapper` class that actually implements the text wrapping strategy.   Both the :class:`TextWrapper` class and the :func:`wrap` and :func:`fill` functions support a number of additional keyword arguments for fine-tuning the formatting; consult the module's documentation for details. (Contributed by Greg Ward.)"
msgstr ""

msgid "The :mod:`thread` and :mod:`threading` modules now have companion modules, :mod:`dummy_thread` and :mod:`dummy_threading`, that provide a do-nothing implementation of the :mod:`thread` module's interface for platforms where threads are not supported.  The intention is to simplify thread-aware modules (ones that *don't* rely on threads to run) by putting the following code at the top::"
msgstr ""

msgid "try:     import threading as _threading except ImportError:     import dummy_threading as _threading"
msgstr ""

msgid "In this example, :mod:`_threading` is used as the module name to make it clear that the module being used is not necessarily the actual :mod:`threading` module. Code can call functions and use classes in :mod:`_threading` whether or not threads are supported, avoiding an :keyword:`if` statement and making the code slightly clearer.  This module will not magically make multithreaded code run without threads; code that waits for another thread to return or to do something will simply hang forever."
msgstr ""

msgid "The :mod:`time` module's :func:`strptime` function has long been an annoyance because it uses the platform C library's :func:`strptime` implementation, and different platforms sometimes have odd bugs.  Brett Cannon contributed a portable implementation that's written in pure Python and should behave identically on all platforms."
msgstr ""

msgid "The new :mod:`timeit` module helps measure how long snippets of Python code take to execute.  The :file:`timeit.py` file can be run directly from the command line, or the module's :class:`Timer` class can be imported and used directly.  Here's a short example that figures out whether it's faster to convert an 8-bit string to Unicode by appending an empty Unicode string to it or by using the :func:`unicode` function::"
msgstr ""

msgid "import timeit  timer1 = timeit.Timer('unicode(\"abc\")') timer2 = timeit.Timer('\"abc\" + u\"\"')  # Run three trials print timer1.repeat(repeat=3, number=100000) print timer2.repeat(repeat=3, number=100000)  # On my laptop this outputs: # [0.36831796169281006, 0.37441694736480713, 0.35304892063140869] # [0.17574405670166016, 0.18193507194519043, 0.17565798759460449]"
msgstr ""

msgid "The :mod:`Tix` module has received various bug fixes and updates for the current version of the Tix package."
msgstr ""

msgid "The :mod:`Tkinter` module now works with a thread-enabled  version of Tcl. Tcl's threading model requires that widgets only be accessed from the thread in which they're created; accesses from another thread can cause Tcl to panic.  For certain Tcl interfaces, :mod:`Tkinter` will now automatically avoid this  when a widget is accessed from a different thread by marshalling a command, passing it to the correct thread, and waiting for the results.  Other interfaces can't be handled automatically but :mod:`Tkinter` will now raise an exception on such an access so that you can at least find out about the problem.  See http://mail.python.org/pipermail/python-dev/2002-December/031107.html for a more detailed explanation of this change.  (Implemented by Martin von Löwis.)"
msgstr ""

msgid "Calling Tcl methods through :mod:`_tkinter` no longer  returns only strings. Instead, if Tcl returns other objects those objects are converted to their Python equivalent, if one exists, or wrapped with a :class:`_tkinter.Tcl_Obj` object if no Python equivalent exists. This behavior can be controlled through the :meth:`wantobjects` method of :class:`tkapp` objects."
msgstr ""

msgid "When using :mod:`_tkinter` through the :mod:`Tkinter` module (as most Tkinter applications will), this feature is always activated. It should not cause compatibility problems, since Tkinter would always convert string results to Python types where possible."
msgstr ""

msgid "If any incompatibilities are found, the old behavior can be restored by setting the :attr:`wantobjects` variable in the :mod:`Tkinter` module to false before creating the first :class:`tkapp` object. ::"
msgstr ""

msgid "import Tkinter Tkinter.wantobjects = 0"
msgstr ""

msgid "Any breakage caused by this change should be reported as a bug."
msgstr ""

msgid "The :mod:`UserDict` module has a new :class:`DictMixin` class which defines all dictionary methods for classes that already have a minimum mapping interface.  This greatly simplifies writing classes that need to be substitutable for dictionaries, such as the classes in  the :mod:`shelve` module."
msgstr ""

msgid "Adding the mix-in as a superclass provides the full dictionary interface whenever the class defines :meth:`__getitem__`, :meth:`__setitem__`, :meth:`__delitem__`, and :meth:`keys`. For example::"
msgstr ""

msgid ">>> import UserDict >>> class SeqDict(UserDict.DictMixin): ...     \"\"\"Dictionary lookalike implemented with lists.\"\"\" ...     def __init__(self): ...         self.keylist = [] ...         self.valuelist = [] ...     def __getitem__(self, key): ...         try: ...             i = self.keylist.index(key) ...         except ValueError: ...             raise KeyError ...         return self.valuelist[i] ...     def __setitem__(self, key, value): ...         try: ...             i = self.keylist.index(key) ...             self.valuelist[i] = value ...         except ValueError: ...             self.keylist.append(key) ...             self.valuelist.append(value) ...     def __delitem__(self, key): ...         try: ...             i = self.keylist.index(key) ...         except ValueError: ...             raise KeyError ...         self.keylist.pop(i) ...         self.valuelist.pop(i) ...     def keys(self): ...         return list(self.keylist) ... >>> s = SeqDict() >>> dir(s)      # See that other dictionary methods are implemented ['__cmp__', '__contains__', '__delitem__', '__doc__', '__getitem__',  '__init__', '__iter__', '__len__', '__module__', '__repr__',  '__setitem__', 'clear', 'get', 'has_key', 'items', 'iteritems',  'iterkeys', 'itervalues', 'keylist', 'keys', 'pop', 'popitem',  'setdefault', 'update', 'valuelist', 'values']"
msgstr ""

msgid "(Contributed by Raymond Hettinger.)"
msgstr ""

msgid "The DOM implementation in :mod:`xml.dom.minidom` can now generate XML output in a particular encoding by providing an optional encoding argument to the :meth:`toxml` and :meth:`toprettyxml` methods of DOM nodes."
msgstr ""

msgid "The :mod:`xmlrpclib` module now supports an XML-RPC extension for handling nil data values such as Python's ``None``.  Nil values are always supported on unmarshalling an XML-RPC response.  To generate requests containing ``None``, you must supply a true value for the *allow_none* parameter when creating a :class:`Marshaller` instance."
msgstr ""

msgid "The new :mod:`DocXMLRPCServer` module allows writing self-documenting XML-RPC servers. Run it in demo mode (as a program) to see it in action.   Pointing the Web browser to the RPC server produces pydoc-style documentation; pointing xmlrpclib to the server allows invoking the actual methods. (Contributed by Brian Quinlan.)"
msgstr ""

msgid "Support for internationalized domain names (RFCs 3454, 3490, 3491, and 3492) has been added. The \"idna\" encoding can be used to convert between a Unicode domain name and the ASCII-compatible encoding (ACE) of that name. ::"
msgstr ""

msgid ">{}>{}> u\"www.Alliancefrançaise.nu\".encode(\"idna\") 'www.xn--alliancefranaise-npb.nu'"
msgstr ""

msgid "The :mod:`socket` module has also been extended to transparently convert Unicode hostnames to the ACE version before passing them to the C library. Modules that deal with hostnames such as :mod:`httplib` and :mod:`ftplib`) also support Unicode host names; :mod:`httplib` also sends HTTP ``Host`` headers using the ACE version of the domain name.  :mod:`urllib` supports Unicode URLs with non-ASCII host names as long as the ``path`` part of the URL is ASCII only."
msgstr ""

msgid "To implement this change, the :mod:`stringprep` module, the  ``mkstringprep`` tool and the ``punycode`` encoding have been added."
msgstr ""

msgid "Date/Time Type"
msgstr ""

msgid "Date and time types suitable for expressing timestamps were added as the :mod:`datetime` module.  The types don't support different calendars or many fancy features, and just stick to the basics of representing time."
msgstr ""

msgid "The three primary types are: :class:`date`, representing a day, month, and year; :class:`time`, consisting of hour, minute, and second; and :class:`datetime`, which contains all the attributes of both :class:`date` and :class:`time`. There's also a :class:`timedelta` class representing differences between two points in time, and time zone logic is implemented by classes inheriting from the abstract :class:`tzinfo` class."
msgstr ""

msgid "You can create instances of :class:`date` and :class:`time` by either supplying keyword arguments to the appropriate constructor, e.g. ``datetime.date(year=1972, month=10, day=15)``, or by using one of a number of class methods.  For example, the :meth:`date.today` class method returns the current local date."
msgstr ""

msgid "Once created, instances of the date/time classes are all immutable. There are a number of methods for producing formatted strings from objects::"
msgstr ""

msgid ">>> import datetime >>> now = datetime.datetime.now() >>> now.isoformat() '2002-12-30T21:27:03.994956' >>> now.ctime()  # Only available on date, datetime 'Mon Dec 30 21:27:03 2002' >>> now.strftime('%Y %d %b') '2002 30 Dec'"
msgstr ""

msgid "The :meth:`replace` method allows modifying one or more fields  of a :class:`date` or :class:`datetime` instance, returning a new instance::"
msgstr ""

msgid ">>> d = datetime.datetime.now() >>> d datetime.datetime(2002, 12, 30, 22, 15, 38, 827738) >>> d.replace(year=2001, hour = 12) datetime.datetime(2001, 12, 30, 12, 15, 38, 827738) >>>"
msgstr ""

msgid "Instances can be compared, hashed, and converted to strings (the result is the same as that of :meth:`isoformat`).  :class:`date` and :class:`datetime` instances can be subtracted from each other, and added to :class:`timedelta` instances.  The largest missing feature is that there's no standard library support for parsing strings and getting back a :class:`date` or :class:`datetime`."
msgstr ""

msgid "For more information, refer to the module's reference documentation. (Contributed by Tim Peters.)"
msgstr ""

msgid "The optparse Module"
msgstr ""

msgid "The :mod:`getopt` module provides simple parsing of command-line arguments.  The new :mod:`optparse` module (originally named Optik) provides more elaborate command-line parsing that follows the Unix conventions, automatically creates the output for :option:`--help`, and can perform different actions for different options."
msgstr ""

msgid "You start by creating an instance of :class:`OptionParser` and telling it what your program's options are. ::"
msgstr ""

msgid "import sys from optparse import OptionParser  op = OptionParser() op.add_option('-i', '--input',               action='store', type='string', dest='input',               help='set input filename') op.add_option('-l', '--length',               action='store', type='int', dest='length',               help='set maximum length of output')"
msgstr ""

msgid "Parsing a command line is then done by calling the :meth:`parse_args` method. ::"
msgstr ""

msgid "options, args = op.parse_args(sys.argv[1:]) print options print args"
msgstr ""

msgid "This returns an object containing all of the option values, and a list of strings containing the remaining arguments."
msgstr ""

msgid "Invoking the script with the various arguments now works as you'd expect it to. Note that the length argument is automatically converted to an integer. ::"
msgstr ""

msgid "$ ./python opt.py -i data arg1 <Values at 0x400cad4c: {'input': 'data', 'length': None}> ['arg1'] $ ./python opt.py --input=data --length=4 <Values at 0x400cad2c: {'input': 'data', 'length': 4}> [] $"
msgstr ""

msgid "The help message is automatically generated for you::"
msgstr ""

msgid "$ ./python opt.py --help usage: opt.py [options]  options:   -h, --help            show this help message and exit   -iINPUT, --input=INPUT                         set input filename   -lLENGTH, --length=LENGTH                         set maximum length of output $"
msgstr ""

msgid "See the module's documentation for more details."
msgstr ""

msgid "Optik was written by Greg Ward, with suggestions from the readers of the Getopt SIG."
msgstr ""

msgid "Pymalloc: A Specialized Object Allocator"
msgstr ""

msgid "Pymalloc, a specialized object allocator written by Vladimir Marangozov, was a feature added to Python 2.1.  Pymalloc is intended to be faster than the system :cfunc:`malloc` and to have less memory overhead for allocation patterns typical of Python programs. The allocator uses C's :cfunc:`malloc` function to get large pools of memory and then fulfills smaller memory requests from these pools."
msgstr ""

msgid "In 2.1 and 2.2, pymalloc was an experimental feature and wasn't enabled by default; you had to explicitly enable it when compiling Python by providing the :option:`--with-pymalloc` option to the :program:`configure` script.  In 2.3, pymalloc has had further enhancements and is now enabled by default; you'll have to supply :option:`--without-pymalloc` to disable it."
msgstr ""

msgid "This change is transparent to code written in Python; however, pymalloc may expose bugs in C extensions.  Authors of C extension modules should test their code with pymalloc enabled, because some incorrect code may cause core dumps at runtime."
msgstr ""

msgid "There's one particularly common error that causes problems.  There are a number of memory allocation functions in Python's C API that have previously just been aliases for the C library's :cfunc:`malloc` and :cfunc:`free`, meaning that if you accidentally called mismatched functions the error wouldn't be noticeable. When the object allocator is enabled, these functions aren't aliases of :cfunc:`malloc` and :cfunc:`free` any more, and calling the wrong function to free memory may get you a core dump.  For example, if memory was allocated using :cfunc:`PyObject_Malloc`, it has to be freed using :cfunc:`PyObject_Free`, not :cfunc:`free`.  A few modules included with Python fell afoul of this and had to be fixed; doubtless there are more third-party modules that will have the same problem."
msgstr ""

msgid "As part of this change, the confusing multiple interfaces for allocating memory have been consolidated down into two API families. Memory allocated with one family must not be manipulated with functions from the other family.  There is one family for allocating chunks of memory and another family of functions specifically for allocating Python objects."
msgstr ""

msgid "To allocate and free an undistinguished chunk of memory use the \"raw memory\" family: :cfunc:`PyMem_Malloc`, :cfunc:`PyMem_Realloc`, and :cfunc:`PyMem_Free`."
msgstr ""

msgid "The \"object memory\" family is the interface to the pymalloc facility described above and is biased towards a large number of \"small\" allocations: :cfunc:`PyObject_Malloc`, :cfunc:`PyObject_Realloc`, and :cfunc:`PyObject_Free`."
msgstr ""

msgid "To allocate and free Python objects, use the \"object\" family :cfunc:`PyObject_New`, :cfunc:`PyObject_NewVar`, and :cfunc:`PyObject_Del`."
msgstr ""

msgid "Thanks to lots of work by Tim Peters, pymalloc in 2.3 also provides debugging features to catch memory overwrites and doubled frees in both extension modules and in the interpreter itself.  To enable this support, compile a debugging version of the Python interpreter by running :program:`configure` with :option:`--with-pydebug`."
msgstr ""

msgid "To aid extension writers, a header file :file:`Misc/pymemcompat.h` is distributed with the source to Python 2.3 that allows Python extensions to use the 2.3 interfaces to memory allocation while compiling against any version of Python since 1.5.2.  You would copy the file from Python's source distribution and bundle it with the source of your extension."
msgstr ""

msgid "For the full details of the pymalloc implementation, see the comments at the top of the file :file:`Objects/obmalloc.c` in the Python source code. The above link points to the file within the python.org SVN browser."
msgstr ""

msgid "Build and C API Changes"
msgstr ""

msgid "Changes to Python's build process and to the C API include:"
msgstr ""

msgid "The cycle detection implementation used by the garbage collection has proven to be stable, so it's now been made mandatory.  You can no longer compile Python without it, and the :option:`--with-cycle-gc` switch to :program:`configure` has been removed."
msgstr ""

msgid "Python can now optionally be built as a shared library (:file:`libpython2.3.so`) by supplying :option:`--enable-shared` when running Python's :program:`configure` script.  (Contributed by Ondrej Palkovsky.)"
msgstr ""

msgid "The :cmacro:`DL_EXPORT` and :cmacro:`DL_IMPORT` macros are now deprecated. Initialization functions for Python extension modules should now be declared using the new macro :cmacro:`PyMODINIT_FUNC`, while the Python core will generally use the :cmacro:`PyAPI_FUNC` and :cmacro:`PyAPI_DATA` macros."
msgstr ""

msgid "The interpreter can be compiled without any docstrings for the built-in functions and modules by supplying :option:`--without-doc-strings` to the :program:`configure` script. This makes the Python executable about 10% smaller, but will also mean that you can't get help for Python's built-ins.  (Contributed by Gustavo Niemeyer.)"
msgstr ""

msgid "The :cfunc:`PyArg_NoArgs` macro is now deprecated, and code that uses it should be changed.  For Python 2.2 and later, the method definition table can specify the :const:`METH_NOARGS` flag, signalling that there are no arguments, and the argument checking can then be removed.  If compatibility with pre-2.2 versions of Python is important, the code could use ``PyArg_ParseTuple(args, \"\")`` instead, but this will be slower than using :const:`METH_NOARGS`."
msgstr ""

msgid ":cfunc:`PyArg_ParseTuple` accepts new format characters for various sizes of unsigned integers: ``B`` for :ctype:`unsigned char`, ``H`` for :ctype:`unsigned short int`,  ``I`` for :ctype:`unsigned int`,  and ``K`` for :ctype:`unsigned long long`."
msgstr ""

msgid "A new function, :cfunc:`PyObject_DelItemString(mapping, char \\*key)` was added as shorthand for ``PyObject_DelItem(mapping, PyString_New(key))``."
msgstr ""

msgid "File objects now manage their internal string buffer differently, increasing it exponentially when needed.  This results in the benchmark tests in :file:`Lib/test/test_bufio.py` speeding up considerably (from 57 seconds to 1.7 seconds, according to one measurement)."
msgstr ""

msgid "It's now possible to define class and static methods for a C extension type by setting either the :const:`METH_CLASS` or :const:`METH_STATIC` flags in a method's :ctype:`PyMethodDef` structure."
msgstr ""

msgid "Python now includes a copy of the Expat XML parser's source code, removing any dependence on a system version or local installation of Expat."
msgstr ""

msgid "If you dynamically allocate type objects in your extension, you should be aware of a change in the rules relating to the :attr:`__module__` and :attr:`__name__` attributes.  In summary, you will want to ensure the type's dictionary contains a ``'__module__'`` key; making the module name the part of the type name leading up to the final period will no longer have the desired effect.  For more detail, read the API reference documentation or the  source."
msgstr ""

msgid "Port-Specific Changes"
msgstr ""

msgid "Support for a port to IBM's OS/2 using the EMX runtime environment was merged into the main Python source tree.  EMX is a POSIX emulation layer over the OS/2 system APIs.  The Python port for EMX tries to support all the POSIX-like capability exposed by the EMX runtime, and mostly succeeds; :func:`fork` and :func:`fcntl` are restricted by the limitations of the underlying emulation layer.  The standard OS/2 port, which uses IBM's Visual Age compiler, also gained support for case-sensitive import semantics as part of the integration of the EMX port into CVS.  (Contributed by Andrew MacIntyre.)"
msgstr ""

msgid "On MacOS, most toolbox modules have been weaklinked to improve backward compatibility.  This means that modules will no longer fail to load if a single routine is missing on the current OS version. Instead calling the missing routine will raise an exception. (Contributed by Jack Jansen.)"
msgstr ""

msgid "The RPM spec files, found in the :file:`Misc/RPM/` directory in the Python source distribution, were updated for 2.3.  (Contributed by Sean Reifschneider.)"
msgstr ""

msgid "Other new platforms now supported by Python include AtheOS (http://www.atheos.cx/), GNU/Hurd, and OpenVMS."
msgstr ""

msgid "As usual, there were a bunch of other improvements and bugfixes scattered throughout the source tree.  A search through the CVS change logs finds there were 523 patches applied and 514 bugs fixed between Python 2.2 and 2.3.  Both figures are likely to be underestimates."
msgstr ""

msgid "If the :envvar:`PYTHONINSPECT` environment variable is set, the Python interpreter will enter the interactive prompt after running a Python program, as if Python had been invoked with the :option:`-i` option. The environment variable can be set before running the Python interpreter, or it can be set by the Python program as part of its execution."
msgstr ""

msgid "The :file:`regrtest.py` script now provides a way to allow \"all resources except *foo*.\"  A resource name passed to the :option:`-u` option can now be prefixed with a hyphen (``'-'``) to mean \"remove this resource.\"  For example, the option '``-uall,-bsddb``' could be used to enable the use of all resources except ``bsddb``."
msgstr ""

msgid "The tools used to build the documentation now work under Cygwin as well as Unix."
msgstr ""

msgid "The ``SET_LINENO`` opcode has been removed.  Back in the mists of time, this opcode was needed to produce line numbers in tracebacks and support trace functions (for, e.g., :mod:`pdb`). Since Python 1.5, the line numbers in tracebacks have been computed using a different mechanism that works with \"python -O\".  For Python 2.3 Michael Hudson implemented a similar scheme to determine when to call the trace function, removing the need for ``SET_LINENO`` entirely."
msgstr ""

msgid "It would be difficult to detect any resulting difference from Python code, apart from a slight speed up when Python is run without :option:`-O`."
msgstr ""

msgid "C extensions that access the :attr:`f_lineno` field of frame objects should instead call ``PyCode_Addr2Line(f->f_code, f->f_lasti)``. This will have the added effect of making the code work as desired under \"python -O\" in earlier versions of Python."
msgstr ""

msgid "A nifty new feature is that trace functions can now assign to the :attr:`f_lineno` attribute of frame objects, changing the line that will be executed next.  A ``jump`` command has been added to the :mod:`pdb` debugger taking advantage of this new feature. (Implemented by Richie Hindle.)"
msgstr ""

msgid "Porting to Python 2.3"
msgstr ""

msgid "This section lists previously described changes that may require changes to your code:"
msgstr ""

msgid ":keyword:`yield` is now always a keyword; if it's used as a variable name in your code, a different name must be chosen."
msgstr ""

msgid "For strings *X* and *Y*, ``X in Y`` now works if *X* is more than one character long."
msgstr ""

msgid "The :func:`int` type constructor will now return a long integer instead of raising an :exc:`OverflowError` when a string or floating-point number is too large to fit into an integer."
msgstr ""

msgid "If you have Unicode strings that contain 8-bit characters, you must declare the file's encoding (UTF-8, Latin-1, or whatever) by adding a comment to the top of the file.  See section :ref:`section-encodings` for more information."
msgstr ""

msgid "Calling Tcl methods through :mod:`_tkinter` no longer  returns only strings. Instead, if Tcl returns other objects those objects are converted to their Python equivalent, if one exists, or wrapped with a :class:`_tkinter.Tcl_Obj` object if no Python equivalent exists."
msgstr ""

msgid "Large octal and hex literals such as ``0xffffffff`` now trigger a :exc:`FutureWarning`. Currently they're stored as 32-bit numbers and result in a negative value, but in Python 2.4 they'll become positive long integers."
msgstr ""

msgid "There are a few ways to fix this warning.  If you really need a positive number, just add an ``L`` to the end of the literal.  If you're trying to get a 32-bit integer with low bits set and have previously used an expression such as ``~(1 << 31)``, it's probably clearest to start with all bits set and clear the desired upper bits. For example, to clear just the top bit (bit 31), you could write ``0xffffffffL &~(1L<<31)``."
msgstr ""

msgid "You can no longer disable assertions by assigning to ``__debug__``."
msgstr ""

msgid "The Distutils :func:`setup` function has gained various new keyword arguments such as *depends*.  Old versions of the Distutils will abort if passed unknown keywords.  A solution is to check for the presence of the new :func:`get_distutil_options` function in your :file:`setup.py` and only uses the new keywords with a version of the Distutils that supports them::"
msgstr ""

msgid "from distutils import core  kw = {'sources': 'foo.c', ...} if hasattr(core, 'get_distutil_options'):     kw['depends'] = ['foo.h'] ext = Extension(**kw)"
msgstr ""

msgid "Using ``None`` as a variable name will now result in a :exc:`SyntaxWarning` warning."
msgstr ""

msgid "Names of extension types defined by the modules included with Python now contain the module and a ``'.'`` in front of the type name."
msgstr ""

msgid "The author would like to thank the following people for offering suggestions, corrections and assistance with various drafts of this article: Jeff Bauer, Simon Brunning, Brett Cannon, Michael Chermside, Andrew Dalke, Scott David Daniels, Fred L. Drake, Jr., David Fraser,  Kelly Gerber, Raymond Hettinger, Michael Hudson, Chris Lambert, Detlef Lannert, Martin von Löwis, Andrew MacIntyre, Lalo Martins, Chad Netzer, Gustavo Niemeyer, Neal Norwitz, Hans Nowak, Chris Reedy, Francesco Ricciardi, Vinay Sajip, Neil Schemenauer, Roman Suzi, Jason Tishler, Just van Rossum."
msgstr ""

msgid "What's New in Python 2.4"
msgstr ""

msgid "This article explains the new features in Python 2.4.1, released on March 30, 2005."
msgstr ""

msgid "Python 2.4 is a medium-sized release.  It doesn't introduce as many changes as the radical Python 2.2, but introduces more features than the conservative 2.3 release.  The most significant new language features are function decorators and generator expressions; most other changes are to the standard library."
msgstr ""

msgid "According to the CVS change logs, there were 481 patches applied and 502 bugs fixed between Python 2.3 and 2.4.  Both figures are likely to be underestimates."
msgstr ""

msgid "This article doesn't attempt to provide a complete specification of every single new feature, but instead provides a brief introduction to each feature.  For full details, you should refer to the documentation for Python 2.4, such as the Python Library Reference and the Python Reference Manual.  Often you will be referred to the PEP for a particular new feature for explanations of the implementation and design rationale."
msgstr ""

msgid "PEP 218: Built-In Set Objects"
msgstr ""

msgid "Python 2.3 introduced the :mod:`sets` module.  C implementations of set data types have now been added to the Python core as two new built-in types, :func:`set(iterable)` and :func:`frozenset(iterable)`.  They provide high speed operations for membership testing, for eliminating duplicates from sequences, and for mathematical operations like unions, intersections, differences, and symmetric differences. ::"
msgstr ""

msgid ">>> a = set('abracadabra')              # form a set from a string >>> 'z' in a                            # fast membership testing False >>> a                                   # unique letters in a set(['a', 'r', 'b', 'c', 'd']) >>> ''.join(a)                          # convert back into a string 'arbcd'  >>> b = set('alacazam')                 # form a second set >>> a - b                               # letters in a but not in b set(['r', 'd', 'b']) >>> a | b                               # letters in either a or b set(['a', 'c', 'r', 'd', 'b', 'm', 'z', 'l']) >>> a & b                               # letters in both a and b set(['a', 'c']) >>> a ^ b                               # letters in a or b but not both set(['r', 'd', 'b', 'm', 'z', 'l'])  >>> a.add('z')                          # add a new element >>> a.update('wxy')                     # add multiple new elements >>> a set(['a', 'c', 'b', 'd', 'r', 'w', 'y', 'x', 'z']) >>> a.remove('x')                       # take one element out >>> a set(['a', 'c', 'b', 'd', 'r', 'w', 'y', 'z'])"
msgstr ""

msgid "The :func:`frozenset` type is an immutable version of :func:`set`. Since it is immutable and hashable, it may be used as a dictionary key or as a member of another set."
msgstr ""

msgid "The :mod:`sets` module remains in the standard library, and may be useful if you wish to subclass the :class:`Set` or :class:`ImmutableSet` classes.  There are currently no plans to deprecate the module."
msgstr ""

msgid "Originally proposed by Greg Wilson and ultimately implemented by Raymond Hettinger."
msgstr ""

msgid "The lengthy transition process for this PEP, begun in Python 2.2, takes another step forward in Python 2.4.  In 2.3, certain integer operations that would behave differently after int/long unification triggered :exc:`FutureWarning` warnings and returned values limited to 32 or 64 bits (depending on your platform).  In 2.4, these expressions no longer produce a warning and instead produce a different result that's usually a long integer."
msgstr ""

msgid "The problematic expressions are primarily left shifts and lengthy hexadecimal and octal constants.  For example, ``2 << 32`` results in a warning in 2.3, evaluating to 0 on 32-bit platforms.  In Python 2.4, this expression now returns the correct answer, 8589934592."
msgstr ""

msgid "Original PEP written by Moshe Zadka and GvR.  The changes for 2.4 were implemented by  Kalle Svensson."
msgstr ""

msgid "PEP 289: Generator Expressions"
msgstr ""

msgid "The iterator feature introduced in Python 2.2 and the :mod:`itertools` module make it easier to write programs that loop through large data sets without having the entire data set in memory at one time.  List comprehensions don't fit into this picture very well because they produce a Python list object containing all of the items.  This unavoidably pulls all of the objects into memory, which can be a problem if your data set is very large.  When trying to write a functionally-styled program, it would be natural to write something like::"
msgstr ""

msgid "links = [link for link in get_all_links() if not link.followed] for link in links:     ..."
msgstr ""

msgid "instead of  ::"
msgstr ""

msgid "for link in get_all_links():     if link.followed:         continue     ..."
msgstr ""

msgid "The first form is more concise and perhaps more readable, but if you're dealing with a large number of link objects you'd have to write the second form to avoid having all link objects in memory at the same time."
msgstr ""

msgid "Generator expressions work similarly to list comprehensions but don't materialize the entire list; instead they create a generator that will return elements one by one.  The above example could be written as::"
msgstr ""

msgid "links = (link for link in get_all_links() if not link.followed) for link in links:     ..."
msgstr ""

msgid "Generator expressions always have to be written inside parentheses, as in the above example.  The parentheses signalling a function call also count, so if you want to create an iterator that will be immediately passed to a function you could write::"
msgstr ""

msgid "print sum(obj.count for obj in list_all_objects())"
msgstr ""

msgid "Generator expressions differ from list comprehensions in various small ways. Most notably, the loop variable (*obj* in the above example) is not accessible outside of the generator expression.  List comprehensions leave the variable assigned to its last value; future versions of Python will change this, making list comprehensions match generator expressions in this respect."
msgstr ""

msgid "Proposed by Raymond Hettinger and implemented by Jiwon Seo with early efforts steered by Hye-Shik Chang."
msgstr ""

msgid "PEP 292: Simpler String Substitutions"
msgstr ""

msgid "Some new classes in the standard library provide an alternative mechanism for substituting variables into strings; this style of substitution may be better for applications where untrained users need to edit templates."
msgstr ""

msgid "The usual way of substituting variables by name is the ``%`` operator::"
msgstr ""

msgid ">>> '%(page)i: %(title)s' % {'page':2, 'title': 'The Best of Times'} '2: The Best of Times'"
msgstr ""

msgid "When writing the template string, it can be easy to forget the ``i`` or ``s`` after the closing parenthesis.  This isn't a big problem if the template is in a Python module, because you run the code, get an \"Unsupported format character\" :exc:`ValueError`, and fix the problem.  However, consider an application such as Mailman where template strings or translations are being edited by users who aren't aware of the Python language.  The format string's syntax is complicated to explain to such users, and if they make a mistake, it's difficult to provide helpful feedback to them."
msgstr ""

msgid "PEP 292 adds a :class:`Template` class to the :mod:`string` module that uses ``$`` to indicate a substitution::"
msgstr ""

msgid ">>> import string >>> t = string.Template('$page: $title') >>> t.substitute({'page':2, 'title': 'The Best of Times'}) '2: The Best of Times'"
msgstr ""

msgid "If a key is missing from the dictionary, the :meth:`substitute` method will raise a :exc:`KeyError`.  There's also a :meth:`safe_substitute` method that ignores missing keys::"
msgstr ""

msgid ">>> t = string.Template('$page: $title') >>> t.safe_substitute({'page':3}) '3: $title'"
msgstr ""

msgid "Written and implemented  by Barry Warsaw."
msgstr ""

msgid "PEP 318: Decorators for Functions and Methods"
msgstr ""

msgid "Python 2.2 extended Python's object model by adding static methods and class methods, but it didn't extend Python's syntax to provide any new way of defining static or class methods.  Instead, you had to write a :keyword:`def` statement in the usual way, and pass the resulting method to a :func:`staticmethod` or :func:`classmethod` function that would wrap up the function as a method of the new type. Your code would look like this::"
msgstr ""

msgid "class C:    def meth (cls):        ...     meth = classmethod(meth)   # Rebind name to wrapped-up class method"
msgstr ""

msgid "If the method was very long, it would be easy to miss or forget the :func:`classmethod` invocation after the function body."
msgstr ""

msgid "The intention was always to add some syntax to make such definitions more readable, but at the time of 2.2's release a good syntax was not obvious.  Today a good syntax *still* isn't obvious but users are asking for easier access to the feature; a new syntactic feature has been added to meet this need."
msgstr ""

msgid "The new feature is called \"function decorators\".  The name comes from the idea that :func:`classmethod`, :func:`staticmethod`, and friends are storing additional information on a function object; they're *decorating* functions with more details."
msgstr ""

msgid "The notation borrows from Java and uses the ``'@'`` character as an indicator. Using the new syntax, the example above would be written::"
msgstr ""

msgid "class C:     @classmethod    def meth (cls):        ..."
msgstr ""

msgid "The ``@classmethod`` is shorthand for the ``meth=classmethod(meth)`` assignment. More generally, if you have the following::"
msgstr ""

msgid "@A @B @C def f ():     ..."
msgstr ""

msgid "It's equivalent to the following pre-decorator code::"
msgstr ""

msgid "def f(): ... f = A(B(C(f)))"
msgstr ""

msgid "Decorators must come on the line before a function definition, one decorator per line, and can't be on the same line as the def statement, meaning that ``@A def f(): ...`` is illegal.  You can only decorate function definitions, either at the module level or inside a class; you can't decorate class definitions."
msgstr ""

msgid "A decorator is just a function that takes the function to be decorated as an argument and returns either the same function or some new object.  The return value of the decorator need not be callable (though it typically is), unless further decorators will be applied to the result.  It's easy to write your own decorators.  The following simple example just sets an attribute on the function object::"
msgstr ""

msgid ">>> def deco(func): ...    func.attr = 'decorated' ...    return func ... >>> @deco ... def f(): pass ... >>> f <function f at 0x402ef0d4> >>> f.attr 'decorated' >>>"
msgstr ""

msgid "As a slightly more realistic example, the following decorator checks that the supplied argument is an integer::"
msgstr ""

msgid "def require_int (func):     def wrapper (arg):         assert isinstance(arg, int)         return func(arg)      return wrapper  @require_int def p1 (arg):     print arg  @require_int def p2(arg):     print arg*2"
msgstr ""

msgid "An example in :pep:`318` contains a fancier version of this idea that lets you both specify the required type and check the returned type."
msgstr ""

msgid "Decorator functions can take arguments.  If arguments are supplied, your decorator function is called with only those arguments and must return a new decorator function; this function must take a single function and return a function, as previously described.  In other words, ``@A @B @C(args)`` becomes::"
msgstr ""

msgid "def f(): ... _deco = C(args) f = A(B(_deco(f)))"
msgstr ""

msgid "Getting this right can be slightly brain-bending, but it's not too difficult."
msgstr ""

msgid "A small related change makes the :attr:`func_name` attribute of functions writable.  This attribute is used to display function names in tracebacks, so decorators should change the name of any new function that's constructed and returned."
msgstr ""

msgid "Written  by Kevin D. Smith, Jim Jewett, and Skip Montanaro.  Several people wrote patches implementing function decorators, but the one that was actually checked in was patch #979728, written by Mark Russell."
msgstr ""

msgid "This Wiki page contains several examples of decorators."
msgstr ""

msgid "PEP 322: Reverse Iteration"
msgstr ""

msgid "A new built-in function, :func:`reversed(seq)`, takes a sequence and returns an iterator that loops over the elements of the sequence  in reverse order.   ::"
msgstr ""

msgid ">>> for i in reversed(xrange(1,4)): ...    print i ... 3 2 1"
msgstr ""

msgid "Compared to extended slicing, such as ``range(1,4)[::-1]``, :func:`reversed` is easier to read, runs faster, and uses substantially less memory."
msgstr ""

msgid "Note that :func:`reversed` only accepts sequences, not arbitrary iterators.  If you want to reverse an iterator, first convert it to  a list with :func:`list`. ::"
msgstr ""

msgid ">>> input = open('/etc/passwd', 'r') >>> for line in reversed(list(input)): ...   print line ... root:*:0:0:System Administrator:/var/root:/bin/tcsh   ..."
msgstr ""

msgid "Written and implemented by Raymond Hettinger."
msgstr ""

msgid "PEP 324: New subprocess Module"
msgstr ""

msgid "The standard library provides a number of ways to execute a subprocess, offering different features and different levels of complexity. :func:`os.system(command)` is easy to use, but slow (it runs a shell process which executes the command) and dangerous (you have to be careful about escaping the shell's metacharacters).  The :mod:`popen2` module offers classes that can capture standard output and standard error from the subprocess, but the naming is confusing.  The :mod:`subprocess` module cleans  this up, providing a unified interface that offers all the features you might need."
msgstr ""

msgid "Instead of :mod:`popen2`'s collection of classes, :mod:`subprocess` contains a single class called :class:`Popen`  whose constructor supports a number of different keyword arguments. ::"
msgstr ""

msgid "class Popen(args, bufsize=0, executable=None,             stdin=None, stdout=None, stderr=None,             preexec_fn=None, close_fds=False, shell=False,             cwd=None, env=None, universal_newlines=False,             startupinfo=None, creationflags=0):"
msgstr ""

msgid "*args* is commonly a sequence of strings that will be the arguments to the program executed as the subprocess.  (If the *shell* argument is true, *args* can be a string which will then be passed on to the shell for interpretation, just as :func:`os.system` does.)"
msgstr ""

msgid "*stdin*, *stdout*, and *stderr* specify what the subprocess's input, output, and error streams will be.  You can provide a file object or a file descriptor, or you can use the constant ``subprocess.PIPE`` to create a pipe between the subprocess and the parent."
msgstr ""

msgid "The constructor has a number of handy options:"
msgstr ""

msgid "*close_fds* requests that all file descriptors be closed before running the subprocess."
msgstr ""

msgid "*cwd* specifies the working directory in which the subprocess will be executed (defaulting to whatever the parent's working directory is)."
msgstr ""

msgid "*env* is a dictionary specifying environment variables."
msgstr ""

msgid "*preexec_fn* is a function that gets called before the child is started."
msgstr ""

msgid "*universal_newlines* opens the child's input and output using Python's universal newline feature."
msgstr ""

msgid "Once you've created the :class:`Popen` instance,  you can call its :meth:`wait` method to pause until the subprocess has exited, :meth:`poll` to check if it's exited without pausing,  or :meth:`communicate(data)` to send the string *data* to the subprocess's standard input.   :meth:`communicate(data)`  then reads any data that the subprocess has sent to its standard output  or standard error, returning a tuple ``(stdout_data, stderr_data)``."
msgstr ""

msgid ":func:`call` is a shortcut that passes its arguments along to the :class:`Popen` constructor, waits for the command to complete, and returns the status code of the subprocess.  It can serve as a safer analog to :func:`os.system`::"
msgstr ""

msgid "sts = subprocess.call(['dpkg', '-i', '/tmp/new-package.deb']) if sts == 0:     # Success     ... else:     # dpkg returned an error     ..."
msgstr ""

msgid "The command is invoked without use of the shell.  If you really do want to  use the shell, you can add ``shell=True`` as a keyword argument and provide a string instead of a sequence::"
msgstr ""

msgid "sts = subprocess.call('dpkg -i /tmp/new-package.deb', shell=True)"
msgstr ""

msgid "The PEP takes various examples of shell and Python code and shows how they'd be translated into Python code that uses :mod:`subprocess`.  Reading this section of the PEP is highly recommended."
msgstr ""

msgid "Written and implemented by Peter Åstrand, with assistance from Fredrik Lundh and others."
msgstr ""

msgid "PEP 327: Decimal Data Type"
msgstr ""

msgid "Python has always supported floating-point (FP) numbers, based on the underlying C :ctype:`double` type, as a data type.  However, while most programming languages provide a floating-point type, many people (even programmers) are unaware that floating-point numbers don't represent certain decimal fractions accurately.  The new :class:`Decimal` type can represent these fractions accurately, up to a user-specified precision limit."
msgstr ""

msgid "Why is Decimal needed?"
msgstr ""

msgid "The limitations arise from the representation used for floating-point numbers. FP numbers are made up of three components:"
msgstr ""

msgid "The sign, which is positive or negative."
msgstr ""

msgid "The mantissa, which is a single-digit binary number   followed by a fractional part.  For example, ``1.01`` in base-2 notation is ``1 + 0/2 + 1/4``, or 1.25 in decimal notation."
msgstr ""

msgid "The exponent, which tells where the decimal point is located in the number represented."
msgstr ""

msgid "For example, the number 1.25 has positive sign, a mantissa value of 1.01 (in binary), and an exponent of 0 (the decimal point doesn't need to be shifted). The number 5 has the same sign and mantissa, but the exponent is 2 because the mantissa is multiplied by 4 (2 to the power of the exponent 2); 1.25 \\* 4 equals 5."
msgstr ""

msgid "Modern systems usually provide floating-point support that conforms to a standard called IEEE 754.  C's :ctype:`double` type is usually implemented as a 64-bit IEEE 754 number, which uses 52 bits of space for the mantissa.  This means that numbers can only be specified to 52 bits of precision.  If you're trying to represent numbers whose expansion repeats endlessly, the expansion is cut off after 52 bits. Unfortunately, most software needs to produce output in base 10, and common fractions in base 10 are often repeating decimals in binary. For example, 1.1 decimal is binary ``1.0001100110011 ...``; .1 = 1/16 + 1/32 + 1/256 plus an infinite number of additional terms.  IEEE 754 has to chop off that infinitely repeated decimal after 52 digits, so the representation is slightly inaccurate."
msgstr ""

msgid "Sometimes you can see this inaccuracy when the number is printed::"
msgstr ""

msgid ">>> 1.1 1.1000000000000001"
msgstr ""

msgid "The inaccuracy isn't always visible when you print the number because the FP-to- decimal-string conversion is provided by the C library, and most C libraries try to produce sensible output.  Even if it's not displayed, however, the inaccuracy is still there and subsequent operations can magnify the error."
msgstr ""

msgid "For many applications this doesn't matter.  If I'm plotting points and displaying them on my monitor, the difference between 1.1 and 1.1000000000000001 is too small to be visible.  Reports often limit output to a certain number of decimal places, and if you round the number to two or three or even eight decimal places, the error is never apparent.  However, for applications where it does matter,  it's a lot of work to implement your own custom arithmetic routines."
msgstr ""

msgid "Hence, the :class:`Decimal` type was created."
msgstr ""

msgid "The :class:`Decimal` type"
msgstr ""

msgid "A new module, :mod:`decimal`, was added to Python's standard library.  It contains two classes, :class:`Decimal` and :class:`Context`.  :class:`Decimal` instances represent numbers, and :class:`Context` instances are used to wrap up various settings such as the precision and default rounding mode."
msgstr ""

msgid ":class:`Decimal` instances are immutable, like regular Python integers and FP numbers; once it's been created, you can't change the value an instance represents.  :class:`Decimal` instances can be created from integers or strings::"
msgstr ""

msgid ">>> import decimal >>> decimal.Decimal(1972) Decimal(\"1972\") >>> decimal.Decimal(\"1.1\") Decimal(\"1.1\")"
msgstr ""

msgid "You can also provide tuples containing the sign, the mantissa represented  as a tuple of decimal digits, and the exponent::"
msgstr ""

msgid ">>> decimal.Decimal((1, (1, 4, 7, 5), -2)) Decimal(\"-14.75\")"
msgstr ""

msgid "Cautionary note: the sign bit is a Boolean value, so 0 is positive and 1 is negative."
msgstr ""

msgid "Converting from floating-point numbers poses a bit of a problem: should the FP number representing 1.1 turn into the decimal number for exactly 1.1, or for 1.1 plus whatever inaccuracies are introduced? The decision was to dodge the issue and leave such a conversion out of the API.  Instead, you should convert the floating-point number into a string using the desired precision and pass the string to the :class:`Decimal` constructor::"
msgstr ""

msgid ">>> f = 1.1 >>> decimal.Decimal(str(f)) Decimal(\"1.1\") >>> decimal.Decimal('%.12f' % f) Decimal(\"1.100000000000\")"
msgstr ""

msgid "Once you have :class:`Decimal` instances, you can perform the usual mathematical operations on them.  One limitation: exponentiation requires an integer exponent::"
msgstr ""

msgid ">>> a = decimal.Decimal('35.72') >>> b = decimal.Decimal('1.73') >>> a+b Decimal(\"37.45\") >>> a-b Decimal(\"33.99\") >>> a*b Decimal(\"61.7956\") >>> a/b Decimal(\"20.64739884393063583815028902\") >>> a ** 2 Decimal(\"1275.9184\") >>> a**b Traceback (most recent call last):   ... decimal.InvalidOperation: x ** (non-integer)"
msgstr ""

msgid "You can combine :class:`Decimal` instances with integers, but not with floating- point numbers::"
msgstr ""

msgid ">>> a + 4 Decimal(\"39.72\") >>> a + 4.5 Traceback (most recent call last):   ... TypeError: You can interact Decimal only with int, long or Decimal data types. >>>"
msgstr ""

msgid ":class:`Decimal` numbers can be used with the :mod:`math` and :mod:`cmath` modules, but note that they'll be immediately converted to  floating-point numbers before the operation is performed, resulting in a possible loss of precision and accuracy.  You'll also get back a regular floating-point number and not a :class:`Decimal`.   ::"
msgstr ""

msgid ">>> import math, cmath >>> d = decimal.Decimal('123456789012.345') >>> math.sqrt(d) 351364.18288201344 >>> cmath.sqrt(-d) 351364.18288201344j"
msgstr ""

msgid ":class:`Decimal` instances have a :meth:`sqrt` method that returns a :class:`Decimal`, but if you need other things such as trigonometric functions you'll have to implement them. ::"
msgstr ""

msgid ">>> d.sqrt() Decimal(\"351364.1828820134592177245001\")"
msgstr ""

msgid "The :class:`Context` type"
msgstr ""

msgid "Instances of the :class:`Context` class encapsulate several settings for decimal operations:"
msgstr ""

msgid ":attr:`prec` is the precision, the number of decimal places."
msgstr ""

msgid ":attr:`rounding` specifies the rounding mode.  The :mod:`decimal` module has constants for the various possibilities: :const:`ROUND_DOWN`, :const:`ROUND_CEILING`,  :const:`ROUND_HALF_EVEN`, and various others."
msgstr ""

msgid ":attr:`traps` is a dictionary specifying what happens on encountering certain error conditions: either  an exception is raised or  a value is returned.  Some examples of error conditions are division by zero, loss of precision, and overflow."
msgstr ""

msgid "There's a thread-local default context available by calling :func:`getcontext`; you can change the properties of this context to alter the default precision, rounding, or trap handling.  The following example shows the effect of changing the precision of the default context::"
msgstr ""

msgid ">>> decimal.getcontext().prec 28 >>> decimal.Decimal(1) / decimal.Decimal(7) Decimal(\"0.1428571428571428571428571429\") >>> decimal.getcontext().prec = 9 >>> decimal.Decimal(1) / decimal.Decimal(7) Decimal(\"0.142857143\")"
msgstr ""

msgid "The default action for error conditions is selectable; the module can either return a special value such as infinity or not-a-number, or exceptions can be raised::"
msgstr ""

msgid ">>> decimal.Decimal(1) / decimal.Decimal(0) Traceback (most recent call last):   ... decimal.DivisionByZero: x / 0 >>> decimal.getcontext().traps[decimal.DivisionByZero] = False >>> decimal.Decimal(1) / decimal.Decimal(0) Decimal(\"Infinity\") >>>"
msgstr ""

msgid "The :class:`Context` instance also has various methods for formatting  numbers such as :meth:`to_eng_string` and :meth:`to_sci_string`."
msgstr ""

msgid "For more information, see the documentation for the :mod:`decimal` module, which includes a quick-start tutorial and a reference."
msgstr ""

msgid "Written by Facundo Batista and implemented by Facundo Batista, Eric Price, Raymond Hettinger, Aahz, and Tim Peters."
msgstr ""

msgid "The article uses Fortran code to illustrate many of the problems that floating- point inaccuracy can cause."
msgstr ""

msgid "A description of a decimal-based representation.  This representation is being proposed as a standard, and underlies the new Python decimal type.  Much of this material was written by Mike Cowlishaw, designer of the Rexx language."
msgstr ""

msgid "PEP 328: Multi-line Imports"
msgstr ""

msgid "One language change is a small syntactic tweak aimed at making it easier to import many names from a module.  In a ``from module import names`` statement, *names* is a sequence of names separated by commas.  If the sequence is  very long, you can either write multiple imports from the same module, or you can use backslashes to escape the line endings like this::"
msgstr ""

msgid "from SimpleXMLRPCServer import SimpleXMLRPCServer,\\             SimpleXMLRPCRequestHandler,\\             CGIXMLRPCRequestHandler,\\             resolve_dotted_attribute"
msgstr ""

msgid "The syntactic change in Python 2.4 simply allows putting the names within parentheses.  Python ignores newlines within a parenthesized expression, so the backslashes are no longer needed::"
msgstr ""

msgid "from SimpleXMLRPCServer import (SimpleXMLRPCServer,                                 SimpleXMLRPCRequestHandler,                                 CGIXMLRPCRequestHandler,                                 resolve_dotted_attribute)"
msgstr ""

msgid "The PEP also proposes that all :keyword:`import` statements be absolute imports, with a leading ``.`` character to indicate a relative import.  This part of the PEP was not implemented for Python 2.4, but was completed for Python 2.5."
msgstr ""

msgid "Written by Aahz.  Multi-line imports were implemented by Dima Dorfman."
msgstr ""

msgid "PEP 331: Locale-Independent Float/String Conversions"
msgstr ""

msgid "The :mod:`locale` modules lets Python software select various conversions and display conventions that are localized to a particular country or language. However, the module was careful to not change the numeric locale because various functions in Python's implementation required that the numeric locale remain set to the ``'C'`` locale.  Often this was because the code was using the C library's :cfunc:`atof` function."
msgstr ""

msgid "Not setting the numeric locale caused trouble for extensions that used third- party C libraries, however, because they wouldn't have the correct locale set. The motivating example was GTK+, whose user interface widgets weren't displaying numbers in the current locale."
msgstr ""

msgid "The solution described in the PEP is to add three new functions to the Python API that perform ASCII-only conversions, ignoring the locale setting:"
msgstr ""

msgid ":cfunc:`PyOS_ascii_strtod(str, ptr)`  and :cfunc:`PyOS_ascii_atof(str, ptr)` both convert a string to a C :ctype:`double`."
msgstr ""

msgid ":cfunc:`PyOS_ascii_formatd(buffer, buf_len, format, d)` converts a :ctype:`double` to an ASCII string."
msgstr ""

msgid "The code for these functions came from the GLib library (http://library.gnome.org/devel/glib/stable/), whose developers kindly relicensed the relevant functions and donated them to the Python Software Foundation.  The :mod:`locale` module  can now change the numeric locale, letting extensions such as GTK+  produce the correct results."
msgstr ""

msgid "Written by Christian R. Reis, and implemented by Gustavo Carneiro."
msgstr ""

msgid "Here are all of the changes that Python 2.4 makes to the core Python language."
msgstr ""

msgid "Decorators for functions and methods were added (:pep:`318`)."
msgstr ""

msgid "Built-in :func:`set` and :func:`frozenset` types were  added (:pep:`218`). Other new built-ins include the :func:`reversed(seq)` function (:pep:`322`)."
msgstr ""

msgid "Generator expressions were added (:pep:`289`)."
msgstr ""

msgid "Certain numeric expressions no longer return values restricted to 32 or 64 bits (:pep:`237`)."
msgstr ""

msgid "You can now put parentheses around the list of names in a ``from module import names`` statement (:pep:`328`)."
msgstr ""

msgid "The :meth:`dict.update` method now accepts the same argument forms as the :class:`dict` constructor.  This includes any mapping, any iterable of key/value pairs, and keyword arguments. (Contributed by Raymond Hettinger.)"
msgstr ""

msgid "The string methods :meth:`ljust`, :meth:`rjust`, and :meth:`center` now take an optional argument for specifying a fill character other than a space. (Contributed by Raymond Hettinger.)"
msgstr ""

msgid "Strings also gained an :meth:`rsplit` method that works like the :meth:`split` method but splits from the end of the string.   (Contributed by Sean Reifschneider.) ::"
msgstr ""

msgid ">>> 'www.python.org'.split('.', 1) ['www', 'python.org'] 'www.python.org'.rsplit('.', 1) ['www.python', 'org']"
msgstr ""

msgid "Three keyword parameters, *cmp*, *key*, and *reverse*, were added to the :meth:`sort` method of lists. These parameters make some common usages of :meth:`sort` simpler. All of these parameters are optional."
msgstr ""

msgid "For the *cmp* parameter, the value should be a comparison function that takes two parameters and returns -1, 0, or +1 depending on how the parameters compare. This function will then be used to sort the list.  Previously this was the only parameter that could be provided to :meth:`sort`."
msgstr ""

msgid "*key* should be a single-parameter function that takes a list element and returns a comparison key for the element.  The list is then sorted using the comparison keys.  The following example sorts a list case-insensitively::"
msgstr ""

msgid ">>> L = ['A', 'b', 'c', 'D'] >>> L.sort()                 # Case-sensitive sort >>> L ['A', 'D', 'b', 'c'] >>> # Using 'key' parameter to sort list >>> L.sort(key=lambda x: x.lower()) >>> L ['A', 'b', 'c', 'D'] >>> # Old-fashioned way >>> L.sort(cmp=lambda x,y: cmp(x.lower(), y.lower())) >>> L ['A', 'b', 'c', 'D']"
msgstr ""

msgid "The last example, which uses the *cmp* parameter, is the old way to perform a case-insensitive sort.  It works but is slower than using a *key* parameter. Using *key* calls :meth:`lower` method once for each element in the list while using *cmp* will call it twice for each comparison, so using *key* saves on invocations of the :meth:`lower` method."
msgstr ""

msgid "For simple key functions and comparison functions, it is often possible to avoid a :keyword:`lambda` expression by using an unbound method instead.  For example, the above case-insensitive sort is best written as::"
msgstr ""

msgid ">>> L.sort(key=str.lower) >>> L ['A', 'b', 'c', 'D']"
msgstr ""

msgid "Finally, the *reverse* parameter takes a Boolean value.  If the value is true, the list will be sorted into reverse order. Instead of ``L.sort() ; L.reverse()``, you can now write ``L.sort(reverse=True)``."
msgstr ""

msgid "The results of sorting are now guaranteed to be stable.  This means that two entries with equal keys will be returned in the same order as they were input. For example, you can sort a list of people by name, and then sort the list by age, resulting in a list sorted by age where people with the same age are in name-sorted order."
msgstr ""

msgid "(All changes to :meth:`sort` contributed by Raymond Hettinger.)"
msgstr ""

msgid "There is a new built-in function :func:`sorted(iterable)` that works like the in-place :meth:`list.sort` method but can be used in expressions.  The differences are:"
msgstr ""

msgid "the input may be any iterable;"
msgstr ""

msgid "a newly formed copy is sorted, leaving the original intact; and"
msgstr ""

msgid "the expression returns the new sorted copy"
msgstr ""

msgid ">>> L = [9,7,8,3,2,4,1,6,5] >>> [10+i for i in sorted(L)]       # usable in a list comprehension [11, 12, 13, 14, 15, 16, 17, 18, 19] >>> L                               # original is left unchanged [9,7,8,3,2,4,1,6,5] >>> sorted('Monty Python')          # any iterable may be an input [' ', 'M', 'P', 'h', 'n', 'n', 'o', 'o', 't', 't', 'y', 'y']  >>> # List the contents of a dict sorted by key values >>> colormap = dict(red=1, blue=2, green=3, black=4, yellow=5) >>> for k, v in sorted(colormap.iteritems()): ...     print k, v ... black 4 blue 2 green 3 red 1 yellow 5"
msgstr ""

msgid "Integer operations will no longer trigger an :exc:`OverflowWarning`. The :exc:`OverflowWarning` warning will disappear in Python 2.5."
msgstr ""

msgid "The interpreter gained a new switch, :option:`-m`, that takes a name, searches for the corresponding  module on ``sys.path``, and runs the module as a script. For example,  you can now run the Python profiler with ``python -m profile``. (Contributed by Nick Coghlan.)"
msgstr ""

msgid "The :func:`eval(expr, globals, locals)` and :func:`execfile(filename, globals, locals)` functions and the :keyword:`exec` statement now accept any mapping type for the *locals* parameter.  Previously this had to be a regular Python dictionary.  (Contributed by Raymond Hettinger.)"
msgstr ""

msgid "The :func:`zip` built-in function and :func:`itertools.izip` now return an empty list if called with no arguments. Previously they raised a :exc:`TypeError` exception.  This makes them more suitable for use with variable length argument lists::"
msgstr ""

msgid ">>> def transpose(array): ...    return zip(*array) ... >>> transpose([(1,2,3), (4,5,6)]) [(1, 4), (2, 5), (3, 6)] >>> transpose([]) []"
msgstr ""

msgid "Encountering a failure while importing a module no longer leaves a partially- initialized module object in ``sys.modules``.  The incomplete module object left behind would fool further imports of the same module into succeeding, leading to confusing errors.   (Fixed by Tim Peters.)"
msgstr ""

msgid ":const:`None` is now a constant; code that binds a new value to  the name ``None`` is now a syntax error. (Contributed by Raymond Hettinger.)"
msgstr ""

msgid "The inner loops for list and tuple slicing were optimized and now run about one-third faster.  The inner loops for dictionaries were also optimized, resulting in performance boosts for :meth:`keys`, :meth:`values`, :meth:`items`, :meth:`iterkeys`, :meth:`itervalues`, and :meth:`iteritems`. (Contributed by Raymond Hettinger.)"
msgstr ""

msgid "The machinery for growing and shrinking lists was optimized for speed and for space efficiency.  Appending and popping from lists now runs faster due to more efficient code paths and less frequent use of the underlying system :cfunc:`realloc`.  List comprehensions also benefit.   :meth:`list.extend` was also optimized and no longer converts its argument into a temporary list before extending the base list.  (Contributed by Raymond Hettinger.)"
msgstr ""

msgid ":func:`list`, :func:`tuple`, :func:`map`, :func:`filter`, and :func:`zip` now run several times faster with non-sequence arguments that supply a :meth:`__len__` method.  (Contributed by Raymond Hettinger.)"
msgstr ""

msgid "The methods :meth:`list.__getitem__`, :meth:`dict.__getitem__`, and :meth:`dict.__contains__` are are now implemented as :class:`method_descriptor` objects rather than :class:`wrapper_descriptor` objects.  This form of  access doubles their performance and makes them more suitable for use as arguments to functionals: ``map(mydict.__getitem__, keylist)``. (Contributed by Raymond Hettinger.)"
msgstr ""

msgid "Added a new opcode, ``LIST_APPEND``, that simplifies the generated bytecode for list comprehensions and speeds them up by about a third.  (Contributed by Raymond Hettinger.)"
msgstr ""

msgid "The peephole bytecode optimizer has been improved to  produce shorter, faster bytecode; remarkably, the resulting bytecode is  more readable.  (Enhanced by Raymond Hettinger.)"
msgstr ""

msgid "String concatenations in statements of the form ``s = s + \"abc\"`` and ``s += \"abc\"`` are now performed more efficiently in certain circumstances.  This optimization won't be present in other Python implementations such as Jython, so you shouldn't rely on it; using the :meth:`join` method of strings is still recommended when you want to efficiently glue a large number of strings together. (Contributed by Armin Rigo.)"
msgstr ""

msgid "The net result of the 2.4 optimizations is that Python 2.4 runs the pystone benchmark around 5% faster than Python 2.3 and 35% faster than Python 2.2. (pystone is not a particularly good benchmark, but it's the most commonly used measurement of Python's performance.  Your own applications may show greater or smaller benefits from Python 2.4.)"
msgstr ""

msgid "The :mod:`asyncore` module's :func:`loop` function now has a *count* parameter that lets you perform a limited number of passes through the polling loop.  The default is still to loop forever."
msgstr ""

msgid "The :mod:`base64` module now has more complete RFC 3548 support for Base64, Base32, and Base16 encoding and decoding, including optional case folding and optional alternative alphabets. (Contributed by Barry Warsaw.)"
msgstr ""

msgid "The :mod:`bisect` module now has an underlying C implementation for improved performance. (Contributed by Dmitry Vasiliev.)"
msgstr ""

msgid "The CJKCodecs collections of East Asian codecs, maintained by Hye-Shik Chang, was integrated into 2.4.   The new encodings are:"
msgstr ""

msgid "Chinese (PRC): gb2312, gbk, gb18030, big5hkscs, hz"
msgstr ""

msgid "Chinese (ROC): big5, cp950"
msgstr ""

msgid "iso-2022-jp-1, iso-2022-jp-2, iso-2022-jp-3, iso-2022-jp-ext, iso-2022-jp-2004, shift-jis, shift-jisx0213, shift-jis-2004"
msgstr ""

msgid "Korean: cp949, euc-kr, johab, iso-2022-kr"
msgstr ""

msgid "Some other new encodings were added: HP Roman8,  ISO_8859-11, ISO_8859-16, PCTP-154, and TIS-620."
msgstr ""

msgid "The UTF-8 and UTF-16 codecs now cope better with receiving partial input. Previously the :class:`StreamReader` class would try to read more data, making it impossible to resume decoding from the stream.  The :meth:`read` method will now return as much data as it can and future calls will resume decoding where previous ones left off.  (Implemented by Walter Dörwald.)"
msgstr ""

msgid "There is a new :mod:`collections` module for  various specialized collection datatypes.   Currently it contains just one type, :class:`deque`,  a double- ended queue that supports efficiently adding and removing elements from either end::"
msgstr ""

msgid ">>> from collections import deque >>> d = deque('ghi')        # make a new deque with three items >>> d.append('j')           # add a new entry to the right side >>> d.appendleft('f')       # add a new entry to the left side >>> d                       # show the representation of the deque deque(['f', 'g', 'h', 'i', 'j']) >>> d.pop()                 # return and remove the rightmost item 'j' >>> d.popleft()             # return and remove the leftmost item 'f' >>> list(d)                 # list the contents of the deque ['g', 'h', 'i'] >>> 'h' in d                # search the deque True"
msgstr ""

msgid "Several modules, such as the :mod:`Queue` and :mod:`threading` modules, now take advantage of :class:`collections.deque` for improved performance.  (Contributed by Raymond Hettinger.)"
msgstr ""

msgid "The :mod:`ConfigParser` classes have been enhanced slightly. The :meth:`read` method now returns a list of the files that were successfully parsed, and the :meth:`set` method raises :exc:`TypeError` if passed a *value* argument that isn't a string.   (Contributed by John Belmonte and David Goodger.)"
msgstr ""

msgid "The :mod:`curses` module now supports the ncurses extension :func:`use_default_colors`.  On platforms where the terminal supports transparency, this makes it possible to use a transparent background. (Contributed by Jörg Lehmann.)"
msgstr ""

msgid "The :mod:`difflib` module now includes an :class:`HtmlDiff` class that creates an HTML table showing a side by side comparison of two versions of a text. (Contributed by Dan Gass.)"
msgstr ""

msgid "The :mod:`email` package was updated to version 3.0,  which dropped various deprecated APIs and removes support for Python versions earlier than 2.3.  The 3.0 version of the package uses a new incremental parser for MIME messages, available in the :mod:`email.FeedParser` module.  The new parser doesn't require reading the entire message into memory, and doesn't throw exceptions if a message is malformed; instead it records any problems in the  :attr:`defect` attribute of the message.  (Developed by Anthony Baxter, Barry Warsaw, Thomas Wouters, and others.)"
msgstr ""

msgid "The :mod:`heapq` module has been converted to C.  The resulting tenfold improvement in speed makes the module suitable for handling high volumes of data.  In addition, the module has two new functions :func:`nlargest` and :func:`nsmallest` that use heaps to find the N largest or smallest values in a dataset without the expense of a full sort.  (Contributed by Raymond Hettinger.)"
msgstr ""

msgid "The :mod:`httplib` module now contains constants for HTTP status codes defined in various HTTP-related RFC documents.  Constants have names such as :const:`OK`, :const:`CREATED`, :const:`CONTINUE`, and :const:`MOVED_PERMANENTLY`; use pydoc to get a full list.  (Contributed by Andrew Eland.)"
msgstr ""

msgid "The :mod:`imaplib` module now supports IMAP's THREAD command (contributed by Yves Dionne) and new :meth:`deleteacl` and :meth:`myrights` methods (contributed by Arnaud Mazin)."
msgstr ""

msgid "The :mod:`itertools` module gained a :func:`groupby(iterable[, *func*])` function. *iterable* is something that can be iterated over to return a stream of elements, and the optional *func* parameter is a function that takes an element and returns a key value; if omitted, the key is simply the element itself.  :func:`groupby` then groups the elements into subsequences which have matching values of the key, and returns a series of 2-tuples containing the key value and an iterator over the subsequence."
msgstr ""

msgid "Here's an example to make this clearer.  The *key* function simply returns whether a number is even or odd, so the result of :func:`groupby` is to return consecutive runs of odd or even numbers. ::"
msgstr ""

msgid ">>> import itertools >>> L = [2, 4, 6, 7, 8, 9, 11, 12, 14] >>> for key_val, it in itertools.groupby(L, lambda x: x % 2): ...    print key_val, list(it) ... 0 [2, 4, 6] 1 [7] 0 [8] 1 [9, 11] 0 [12, 14] >>>"
msgstr ""

msgid ":func:`groupby` is typically used with sorted input.  The logic for :func:`groupby` is similar to the Unix ``uniq`` filter which makes it handy for eliminating, counting, or identifying duplicate elements::"
msgstr ""

msgid ">>> word = 'abracadabra' >>> letters = sorted(word)   # Turn string into a sorted list of letters >>> letters ['a', 'a', 'a', 'a', 'a', 'b', 'b', 'c', 'd', 'r', 'r'] >>> for k, g in itertools.groupby(letters): ...    print k, list(g) ... a ['a', 'a', 'a', 'a', 'a'] b ['b', 'b'] c ['c'] d ['d'] r ['r', 'r'] >>> # List unique letters >>> [k for k, g in groupby(letters)] ['a', 'b', 'c', 'd', 'r'] >>> # Count letter occurrences >>> [(k, len(list(g))) for k, g in groupby(letters)] [('a', 5), ('b', 2), ('c', 1), ('d', 1), ('r', 2)]"
msgstr ""

msgid "(Contributed by Hye-Shik Chang.)"
msgstr ""

msgid ":mod:`itertools` also gained a function named :func:`tee(iterator, N)` that returns *N* independent iterators that replicate *iterator*.  If *N* is omitted, the default is 2. ::"
msgstr ""

msgid ">>> L = [1,2,3] >>> i1, i2 = itertools.tee(L) >>> i1,i2 (<itertools.tee object at 0x402c2080>, <itertools.tee object at 0x402c2090>) >>> list(i1)               # Run the first iterator to exhaustion [1, 2, 3] >>> list(i2)               # Run the second iterator to exhaustion [1, 2, 3]"
msgstr ""

msgid "Note that :func:`tee` has to keep copies of the values returned  by the iterator; in the worst case, it may need to keep all of them.   This should therefore be used carefully if the leading iterator can run far ahead of the trailing iterator in a long stream of inputs. If the separation is large, then you might as well use  :func:`list` instead.  When the iterators track closely with one another, :func:`tee` is ideal.  Possible applications include bookmarking, windowing, or lookahead iterators. (Contributed by Raymond Hettinger.)"
msgstr ""

msgid "A number of functions were added to the :mod:`locale`  module, such as :func:`bind_textdomain_codeset` to specify a particular encoding and a family of :func:`l\\*gettext` functions that return messages in the chosen encoding. (Contributed by Gustavo Niemeyer.)"
msgstr ""

msgid "Some keyword arguments were added to the :mod:`logging` package's :func:`basicConfig` function to simplify log configuration.  The default behavior is to log messages to standard error, but various keyword arguments can be specified to log to a particular file, change the logging format, or set the logging level. For example::"
msgstr ""

msgid "import logging logging.basicConfig(filename='/var/log/application.log',     level=0,  # Log all messages     format='%(levelname):%(process):%(thread):%(message)')"
msgstr ""

msgid "Other additions to the :mod:`logging` package include a :meth:`log(level, msg)` convenience method, as well as a :class:`TimedRotatingFileHandler` class that rotates its log files at a timed interval.  The module already had :class:`RotatingFileHandler`, which rotated logs once the file exceeded a certain size.  Both classes derive from a new :class:`BaseRotatingHandler` class that can be used to implement other rotating handlers."
msgstr ""

msgid "(Changes implemented by Vinay Sajip.)"
msgstr ""

msgid "The :mod:`marshal` module now shares interned strings on unpacking a  data structure.  This may shrink the size of certain pickle strings, but the primary effect is to make :file:`.pyc` files significantly smaller. (Contributed by Martin von Löwis.)"
msgstr ""

msgid "The :mod:`nntplib` module's :class:`NNTP` class gained :meth:`description` and :meth:`descriptions` methods to retrieve  newsgroup descriptions for a single group or for a range of groups. (Contributed by Jürgen A. Erhard.)"
msgstr ""

msgid "Two new functions were added to the :mod:`operator` module, :func:`attrgetter(attr)` and :func:`itemgetter(index)`. Both functions return callables that take a single argument and return the corresponding attribute or item; these callables make excellent data extractors when used with :func:`map` or :func:`sorted`.  For example::"
msgstr ""

msgid ">>> L = [('c', 2), ('d', 1), ('a', 4), ('b', 3)] >>> map(operator.itemgetter(0), L) ['c', 'd', 'a', 'b'] >>> map(operator.itemgetter(1), L) [2, 1, 4, 3] >>> sorted(L, key=operator.itemgetter(1)) # Sort list by second tuple item [('d', 1), ('c', 2), ('b', 3), ('a', 4)]"
msgstr ""

msgid "The :mod:`optparse` module was updated in various ways.  The module now passes its messages through :func:`gettext.gettext`, making it possible to internationalize Optik's help and error messages.  Help messages for options can now include the string ``'%default'``, which will be replaced by the option's default value.  (Contributed by Greg Ward.)"
msgstr ""

msgid "The long-term plan is to deprecate the :mod:`rfc822` module in some future Python release in favor of the :mod:`email` package. To this end, the :func:`email.Utils.formatdate` function has been changed to make it usable as a replacement for :func:`rfc822.formatdate`.  You may want to write new e-mail processing code with this in mind.  (Change implemented by Anthony Baxter.)"
msgstr ""

msgid "A new :func:`urandom(n)` function was added to the :mod:`os` module, returning a string containing *n* bytes of random data.  This function provides access to platform-specific sources of randomness such as :file:`/dev/urandom` on Linux or the Windows CryptoAPI.  (Contributed by Trevor Perrin.)"
msgstr ""

msgid "Another new function: :func:`os.path.lexists(path)`  returns true if the file specified by *path* exists, whether or not it's a symbolic link.  This differs from the existing :func:`os.path.exists(path)` function, which returns false if *path* is a symlink that points to a destination that doesn't exist. (Contributed by Beni Cherniavsky.)"
msgstr ""

msgid "A new :func:`getsid` function was added to the :mod:`posix` module that underlies the :mod:`os` module. (Contributed by J. Raynor.)"
msgstr ""

msgid "The :mod:`poplib` module now supports POP over SSL.  (Contributed by Hector Urtubia.)"
msgstr ""

msgid "The :mod:`profile` module can now profile C extension functions. (Contributed by Nick Bastin.)"
msgstr ""

msgid "The :mod:`random` module has a new method called :meth:`getrandbits(N)` that returns a long integer *N* bits in length.  The existing :meth:`randrange` method now uses :meth:`getrandbits` where appropriate, making generation of arbitrarily large random numbers more efficient.  (Contributed by Raymond Hettinger.)"
msgstr ""

msgid "The regular expression language accepted by the :mod:`re` module was extended with simple conditional expressions, written as ``(?(group)A|B)``.  *group* is either a numeric group ID or a group name defined with ``(?P<group>...)`` earlier in the expression.  If the specified group matched, the regular expression pattern *A* will be tested against the string; if the group didn't match, the pattern *B* will be used instead. (Contributed by Gustavo Niemeyer.)"
msgstr ""

msgid "The :mod:`re` module is also no longer recursive, thanks to a massive amount of work by Gustavo Niemeyer.  In a recursive regular expression engine, certain patterns result in a large amount of C stack space being consumed, and it was possible to overflow the stack. For example, if you matched a 30000-byte string of ``a`` characters against the expression ``(a|b)+``, one stack frame was consumed per character.  Python 2.3 tried to check for stack overflow and raise a :exc:`RuntimeError` exception, but certain patterns could sidestep the checking and if you were unlucky Python could segfault. Python 2.4's regular expression engine can match this pattern without problems."
msgstr ""

msgid "The :mod:`signal` module now performs tighter error-checking on the parameters to the :func:`signal.signal` function.  For example, you can't set a handler on the :const:`SIGKILL` signal; previous versions of Python would quietly accept this, but 2.4 will raise a :exc:`RuntimeError` exception."
msgstr ""

msgid "Two new functions were added to the :mod:`socket` module. :func:`socketpair` returns a pair of connected sockets and :func:`getservbyport(port)` looks up the service name for a given port number. (Contributed by Dave Cole and Barry Warsaw.)"
msgstr ""

msgid "The :func:`sys.exitfunc` function has been deprecated.  Code should be using the existing :mod:`atexit` module, which correctly handles calling multiple exit functions.  Eventually :func:`sys.exitfunc` will become a purely internal interface, accessed only by :mod:`atexit`."
msgstr ""

msgid "The :mod:`tarfile` module now generates GNU-format tar files by default. (Contributed by Lars Gustaebel.)"
msgstr ""

msgid "The :mod:`threading` module now has an elegantly simple way to support thread-local data.  The module contains a :class:`local` class whose attribute values are local to different threads. ::"
msgstr ""

msgid "import threading  data = threading.local() data.number = 42 data.url = ('www.python.org', 80)"
msgstr ""

msgid "Other threads can assign and retrieve their own values for the :attr:`number` and :attr:`url` attributes.  You can subclass :class:`local` to initialize attributes or to add methods. (Contributed by Jim Fulton.)"
msgstr ""

msgid "The :mod:`timeit` module now automatically disables periodic garbage collection during the timing loop.  This change makes consecutive timings more comparable.  (Contributed by Raymond Hettinger.)"
msgstr ""

msgid "The :mod:`weakref` module now supports a wider variety of objects including Python functions, class instances, sets, frozensets, deques, arrays, files, sockets, and regular expression pattern objects. (Contributed by Raymond Hettinger.)"
msgstr ""

msgid "The :mod:`xmlrpclib` module now supports a multi-call extension for transmitting multiple XML-RPC calls in a single HTTP operation. (Contributed by Brian Quinlan.)"
msgstr ""

msgid "The :mod:`mpz`, :mod:`rotor`, and :mod:`xreadlines` modules have  been removed."
msgstr ""

msgid "cookielib"
msgstr ""

msgid "The :mod:`cookielib` library supports client-side handling for HTTP cookies, mirroring the :mod:`Cookie` module's server-side cookie support. Cookies are stored in cookie jars; the library transparently stores cookies offered by the web server in the cookie jar, and fetches the cookie from the jar when connecting to the server. As in web browsers, policy objects control whether cookies are accepted or not."
msgstr ""

msgid "In order to store cookies across sessions, two implementations of cookie jars are provided: one that stores cookies in the Netscape format so applications can use the Mozilla or Lynx cookie files, and one that stores cookies in the same format as the Perl libwww library."
msgstr ""

msgid ":mod:`urllib2` has been changed to interact with :mod:`cookielib`: :class:`HTTPCookieProcessor` manages a cookie jar that is used when accessing URLs."
msgstr ""

msgid "This module was contributed by John J. Lee."
msgstr ""

msgid "doctest"
msgstr ""

msgid "The :mod:`doctest` module underwent considerable refactoring thanks to Edward Loper and Tim Peters.  Testing can still be as simple as running :func:`doctest.testmod`, but the refactorings allow customizing the module's operation in various ways"
msgstr ""

msgid "The new :class:`DocTestFinder` class extracts the tests from a given  object's docstrings::"
msgstr ""

msgid "def f (x, y):     \"\"\">>> f(2,2) 4 >>> f(3,2) 6     \"\"\"     return x*y  finder = doctest.DocTestFinder()  # Get list of DocTest instances tests = finder.find(f)"
msgstr ""

msgid "The new :class:`DocTestRunner` class then runs individual tests and can produce a summary of the results::"
msgstr ""

msgid "runner = doctest.DocTestRunner() for t in tests:     tried, failed = runner.run(t)  runner.summarize(verbose=1)"
msgstr ""

msgid "The above example produces the following output::"
msgstr ""

msgid "1 items passed all tests:    2 tests in f 2 tests in 1 items. 2 passed and 0 failed. Test passed."
msgstr ""

msgid ":class:`DocTestRunner` uses an instance of the :class:`OutputChecker` class to compare the expected output with the actual output.  This class takes a number of different flags that customize its behaviour; ambitious users can also write a completely new subclass of :class:`OutputChecker`."
msgstr ""

msgid "The default output checker provides a number of handy features. For example, with the :const:`doctest.ELLIPSIS` option flag, an ellipsis (``...``) in the expected output matches any substring,  making it easier to accommodate outputs that vary in minor ways::"
msgstr ""

msgid "def o (n):     \"\"\">>> o(1) <__main__.C instance at 0x...> >>> \"\"\""
msgstr ""

msgid "Another special string, ``<BLANKLINE>``, matches a blank line::"
msgstr ""

msgid "def p (n):     \"\"\">>> p(1) <BLANKLINE> >>> \"\"\""
msgstr ""

msgid "Another new capability is producing a diff-style display of the output by specifying the :const:`doctest.REPORT_UDIFF` (unified diffs), :const:`doctest.REPORT_CDIFF` (context diffs), or :const:`doctest.REPORT_NDIFF` (delta-style) option flags.  For example::"
msgstr ""

msgid "def g (n):     \"\"\">>> g(4) here is a lengthy >>>\"\"\"     L = 'here is a rather lengthy list of words'.split()     for word in L[:n]:         print word"
msgstr ""

msgid "Running the above function's tests with :const:`doctest.REPORT_UDIFF` specified, you get the following output::"
msgstr ""

msgid "********************************************************************** File \"t.py\", line 15, in g Failed example:     g(4) Differences (unified diff with -expected +actual):     @@ -2,3 +2,3 @@      is      a     -lengthy     +rather **********************************************************************"
msgstr ""

msgid "Some of the changes to Python's build process and to the C API are:"
msgstr ""

msgid "Three new convenience macros were added for common return values from extension functions: :cmacro:`Py_RETURN_NONE`, :cmacro:`Py_RETURN_TRUE`, and :cmacro:`Py_RETURN_FALSE`. (Contributed by Brett Cannon.)"
msgstr ""

msgid "Another new macro, :cmacro:`Py_CLEAR(obj)`,  decreases the reference count of *obj* and sets *obj* to the null pointer.  (Contributed by Jim Fulton.)"
msgstr ""

msgid "A new function, :cfunc:`PyTuple_Pack(N, obj1, obj2, ..., objN)`, constructs tuples from a variable length argument list of Python objects.  (Contributed by Raymond Hettinger.)"
msgstr ""

msgid "A new function, :cfunc:`PyDict_Contains(d, k)`, implements fast dictionary lookups without masking exceptions raised during the look-up process. (Contributed by Raymond Hettinger.)"
msgstr ""

msgid "The :cmacro:`Py_IS_NAN(X)` macro returns 1 if  its float or double argument *X* is a NaN.   (Contributed by Tim Peters.)"
msgstr ""

msgid "C code can avoid unnecessary locking by using the new :cfunc:`PyEval_ThreadsInitialized` function to tell  if any thread operations have been performed.  If this function  returns false, no lock operations are needed. (Contributed by Nick Coghlan.)"
msgstr ""

msgid "A new function, :cfunc:`PyArg_VaParseTupleAndKeywords`, is the same as :cfunc:`PyArg_ParseTupleAndKeywords` but takes a  :ctype:`va_list` instead of a number of arguments. (Contributed by Greg Chapman.)"
msgstr ""

msgid "A new method flag, :const:`METH_COEXISTS`, allows a function defined in slots to co-exist with a :ctype:`PyCFunction` having the same name.  This can halve the access time for a method such as :meth:`set.__contains__`.  (Contributed by Raymond Hettinger.)"
msgstr ""

msgid "Python can now be built with additional profiling for the interpreter itself, intended as an aid to people developing the Python core.  Providing :option:`----enable-profiling` to the :program:`configure` script will let you profile the interpreter with :program:`gprof`, and providing the :option:`----with-tsc` switch enables profiling using the Pentium's Time-Stamp- Counter register.  Note that the :option:`----with-tsc` switch is slightly misnamed, because the profiling feature also works on the PowerPC platform, though that processor architecture doesn't call that register \"the TSC register\".  (Contributed by Jeremy Hylton.)"
msgstr ""

msgid "The :ctype:`tracebackobject` type has been renamed to :ctype:`PyTracebackObject`."
msgstr ""

msgid "The Windows port now builds under MSVC++ 7.1 as well as version 6. (Contributed by Martin von Löwis.)"
msgstr ""

msgid "Porting to Python 2.4"
msgstr ""

msgid "Left shifts and hexadecimal/octal constants that are too  large no longer trigger a :exc:`FutureWarning` and return  a value limited to 32 or 64 bits; instead they return a long integer."
msgstr ""

msgid "The :func:`zip` built-in function and :func:`itertools.izip` now return  an empty list instead of raising a :exc:`TypeError` exception if called with no arguments."
msgstr ""

msgid "You can no longer compare the :class:`date` and :class:`datetime` instances provided by the :mod:`datetime` module.  Two  instances of different classes will now always be unequal, and  relative comparisons (``<``, ``>``) will raise a :exc:`TypeError`."
msgstr ""

msgid ":func:`dircache.listdir` now passes exceptions to the caller instead of returning empty lists."
msgstr ""

msgid ":func:`LexicalHandler.startDTD` used to receive the public and system IDs in the wrong order.  This has been corrected; applications relying on the wrong order need to be fixed."
msgstr ""

msgid ":func:`fcntl.ioctl` now warns if the *mutate*  argument is omitted and relevant."
msgstr ""

msgid "The :mod:`tarfile` module now generates GNU-format tar files by default."
msgstr ""

msgid "Encountering a failure while importing a module no longer leaves a partially- initialized module object in ``sys.modules``."
msgstr ""

msgid ":const:`None` is now a constant; code that binds a new value to  the name ``None`` is now a syntax error."
msgstr ""

msgid "The :func:`signals.signal` function now raises a :exc:`RuntimeError` exception for certain illegal values; previously these errors would pass silently.  For example, you can no longer set a handler on the :const:`SIGKILL` signal."
msgstr ""

msgid "The author would like to thank the following people for offering suggestions, corrections and assistance with various drafts of this article: Koray Can, Hye- Shik Chang, Michael Dyck, Raymond Hettinger, Brian Hurt, Hamish Lawson, Fredrik Lundh, Sean Reifschneider, Sadruddin Rejeb."
msgstr ""

msgid "What's New in Python 2.5"
msgstr ""

msgid "This article explains the new features in Python 2.5.  The final release of Python 2.5 is scheduled for August 2006; :pep:`356` describes the planned release schedule."
msgstr ""

msgid "The changes in Python 2.5 are an interesting mix of language and library improvements. The library enhancements will be more important to Python's user community, I think, because several widely-useful packages were added.  New modules include ElementTree for XML processing (:mod:`xml.etree`), the SQLite database module (:mod:`sqlite`), and the :mod:`ctypes` module for calling C functions."
msgstr ""

msgid "The language changes are of middling significance.  Some pleasant new features were added, but most of them aren't features that you'll use every day. Conditional expressions were finally added to the language using a novel syntax; see section :ref:`pep-308`.  The new ':keyword:`with`' statement will make writing cleanup code easier (section :ref:`pep-343`).  Values can now be passed into generators (section :ref:`pep-342`).  Imports are now visible as either absolute or relative (section :ref:`pep-328`).  Some corner cases of exception handling are handled better (section :ref:`pep-341`).  All these improvements are worthwhile, but they're improvements to one specific language feature or another; none of them are broad modifications to Python's semantics."
msgstr ""

msgid "As well as the language and library additions, other improvements and bugfixes were made throughout the source tree.  A search through the SVN change logs finds there were 353 patches applied and 458 bugs fixed between Python 2.4 and 2.5.  (Both figures are likely to be underestimates.)"
msgstr ""

msgid "This article doesn't try to be a complete specification of the new features; instead changes are briefly introduced using helpful examples.  For full details, you should always refer to the documentation for Python 2.5 at http://docs.python.org. If you want to understand the complete implementation and design rationale, refer to the PEP for a particular new feature."
msgstr ""

msgid "Comments, suggestions, and error reports for this document are welcome; please e-mail them to the author or open a bug in the Python bug tracker."
msgstr ""

msgid "PEP 308: Conditional Expressions"
msgstr ""

msgid "For a long time, people have been requesting a way to write conditional expressions, which are expressions that return value A or value B depending on whether a Boolean value is true or false.  A conditional expression lets you write a single assignment statement that has the same effect as the following::"
msgstr ""

msgid "if condition:     x = true_value else:     x = false_value"
msgstr ""

msgid "There have been endless tedious discussions of syntax on both python-dev and comp.lang.python.  A vote was even held that found the majority of voters wanted conditional expressions in some form, but there was no syntax that was preferred by a clear majority. Candidates included C's ``cond ? true_v : false_v``, ``if cond then true_v else false_v``, and 16 other variations."
msgstr ""

msgid "Guido van Rossum eventually chose a surprising syntax::"
msgstr ""

msgid "x = true_value if condition else false_value"
msgstr ""

msgid "Evaluation is still lazy as in existing Boolean expressions, so the order of evaluation jumps around a bit.  The *condition* expression in the middle is evaluated first, and the *true_value* expression is evaluated only if the condition was true.  Similarly, the *false_value* expression is only evaluated when the condition is false."
msgstr ""

msgid "This syntax may seem strange and backwards; why does the condition go in the *middle* of the expression, and not in the front as in C's ``c ? x : y``?  The decision was checked by applying the new syntax to the modules in the standard library and seeing how the resulting code read.  In many cases where a conditional expression is used, one value seems to be the 'common case' and one value is an 'exceptional case', used only on rarer occasions when the condition isn't met.  The conditional syntax makes this pattern a bit more obvious::"
msgstr ""

msgid "contents = ((doc + '\\n') if doc else '')"
msgstr ""

msgid "I read the above statement as meaning \"here *contents* is  usually assigned a value of ``doc+'\\n'``; sometimes  *doc* is empty, in which special case an empty string is returned.\"   I doubt I will use conditional expressions very often where there  isn't a clear common and uncommon case."
msgstr ""

msgid "There was some discussion of whether the language should require surrounding conditional expressions with parentheses.  The decision was made to *not* require parentheses in the Python language's grammar, but as a matter of style I think you should always use them. Consider these two statements::"
msgstr ""

msgid "# First version -- no parens level = 1 if logging else 0  # Second version -- with parens level = (1 if logging else 0)"
msgstr ""

msgid "In the first version, I think a reader's eye might group the statement into 'level = 1', 'if logging', 'else 0', and think that the condition decides whether the assignment to *level* is performed.  The second version reads better, in my opinion, because it makes it clear that the assignment is always performed and the choice is being made between two values."
msgstr ""

msgid "Another reason for including the brackets: a few odd combinations of list comprehensions and lambdas could look like incorrect conditional expressions. See :pep:`308` for some examples.  If you put parentheses around your conditional expressions, you won't run into this case."
msgstr ""

msgid "PEP written by Guido van Rossum and Raymond D. Hettinger; implemented by Thomas Wouters."
msgstr ""

msgid "PEP 309: Partial Function Application"
msgstr ""

msgid "The :mod:`functools` module is intended to contain tools for functional-style programming."
msgstr ""

msgid "One useful tool in this module is the :func:`partial` function. For programs written in a functional style, you'll sometimes want to construct variants of existing functions that have some of the parameters filled in.  Consider a Python function ``f(a, b, c)``; you could create a new function ``g(b, c)`` that was equivalent to ``f(1, b, c)``.  This is called \"partial function application\"."
msgstr ""

msgid ":func:`partial` takes the arguments ``(function, arg1, arg2, ... kwarg1=value1, kwarg2=value2)``.  The resulting object is callable, so you can just call it to invoke *function* with the filled-in arguments."
msgstr ""

msgid "Here's a small but realistic example::"
msgstr ""

msgid "import functools  def log (message, subsystem):     \"Write the contents of 'message' to the specified subsystem.\"     print '%s: %s' % (subsystem, message)     ...  server_log = functools.partial(log, subsystem='server') server_log('Unable to open socket')"
msgstr ""

msgid "Here's another example, from a program that uses PyGTK.  Here a context- sensitive pop-up menu is being constructed dynamically.  The callback provided for the menu option is a partially applied version of the :meth:`open_item` method, where the first argument has been provided. ::"
msgstr ""

msgid "... class Application:     def open_item(self, path):        ...     def init (self):         open_func = functools.partial(self.open_item, item_path)         popup_menu.append( (\"Open\", open_func, 1) )"
msgstr ""

msgid "Another function in the :mod:`functools` module is the :func:`update_wrapper(wrapper, wrapped)` function that helps you write well- behaved decorators.  :func:`update_wrapper` copies the name, module, and docstring attribute to a wrapper function so that tracebacks inside the wrapped function are easier to understand.  For example, you might write::"
msgstr ""

msgid "def my_decorator(f):     def wrapper(*args, **kwds):         print 'Calling decorated function'         return f(*args, **kwds)     functools.update_wrapper(wrapper, f)     return wrapper"
msgstr ""

msgid ":func:`wraps` is a decorator that can be used inside your own decorators to copy the wrapped function's information.  An alternate  version of the previous example would be::"
msgstr ""

msgid "def my_decorator(f):     @functools.wraps(f)     def wrapper(*args, **kwds):         print 'Calling decorated function'         return f(*args, **kwds)     return wrapper"
msgstr ""

msgid "PEP proposed and written by Peter Harris; implemented by Hye-Shik Chang and Nick Coghlan, with adaptations by Raymond Hettinger."
msgstr ""

msgid "PEP 314: Metadata for Python Software Packages v1.1"
msgstr ""

msgid "Some simple dependency support was added to Distutils.  The :func:`setup` function now has ``requires``, ``provides``, and ``obsoletes`` keyword parameters.  When you build a source distribution using the ``sdist`` command, the dependency information will be recorded in the :file:`PKG-INFO` file."
msgstr ""

msgid "Another new keyword parameter is ``download_url``, which should be set to a URL for the package's source code.  This means it's now possible to look up an entry in the package index, determine the dependencies for a package, and download the required packages. ::"
msgstr ""

msgid "VERSION = '1.0' setup(name='PyPackage',       version=VERSION,       requires=['numarray', 'zlib (>=1.1.4)'],       obsoletes=['OldPackage']       download_url=('http://www.example.com/pypackage/dist/pkg-%s.tar.gz'                     % VERSION),      )"
msgstr ""

msgid "Another new enhancement to the Python package index at http://cheeseshop.python.org is storing source and binary archives for a package.  The new :command:`upload` Distutils command will upload a package to the repository."
msgstr ""

msgid "Before a package can be uploaded, you must be able to build a distribution using the :command:`sdist` Distutils command.  Once that works, you can run ``python setup.py upload`` to add your package to the PyPI archive.  Optionally you can GPG-sign the package by supplying the :option:`--sign` and :option:`--identity` options."
msgstr ""

msgid "Package uploading was implemented by Martin von Löwis and Richard Jones."
msgstr ""

msgid "PEP proposed and written by A.M. Kuchling, Richard Jones, and Fred Drake; implemented by Richard Jones and Fred Drake."
msgstr ""

msgid "PEP 328: Absolute and Relative Imports"
msgstr ""

msgid "The simpler part of PEP 328 was implemented in Python 2.4: parentheses could now be used to enclose the names imported from a module using the ``from ... import ...`` statement, making it easier to import many different names."
msgstr ""

msgid "The more complicated part has been implemented in Python 2.5: importing a module can be specified to use absolute or package-relative imports.  The plan is to move toward making absolute imports the default in future versions of Python."
msgstr ""

msgid "Let's say you have a package directory like this::"
msgstr ""

msgid "pkg/ pkg/__init__.py pkg/main.py pkg/string.py"
msgstr ""

msgid "This defines a package named :mod:`pkg` containing the :mod:`pkg.main` and :mod:`pkg.string` submodules."
msgstr ""

msgid "Consider the code in the :file:`main.py` module.  What happens if it executes the statement ``import string``?  In Python 2.4 and earlier, it will first look in the package's directory to perform a relative import, finds :file:`pkg/string.py`, imports the contents of that file as the :mod:`pkg.string` module, and that module is bound to the name ``string`` in the :mod:`pkg.main` module's namespace."
msgstr ""

msgid "That's fine if :mod:`pkg.string` was what you wanted.  But what if you wanted Python's standard :mod:`string` module?  There's no clean way to ignore :mod:`pkg.string` and look for the standard module; generally you had to look at the contents of ``sys.modules``, which is slightly unclean.    Holger Krekel's :mod:`py.std` package provides a tidier way to perform imports from the standard library, ``import py ; py.std.string.join()``, but that package isn't available on all Python installations."
msgstr ""

msgid "Reading code which relies on relative imports is also less clear, because a reader may be confused about which module, :mod:`string` or :mod:`pkg.string`, is intended to be used.  Python users soon learned not to duplicate the names of standard library modules in the names of their packages' submodules, but you can't protect against having your submodule's name being used for a new module added in a future version of Python."
msgstr ""

msgid "In Python 2.5, you can switch :keyword:`import`'s behaviour to  absolute imports using a ``from __future__ import absolute_import`` directive.  This absolute- import behaviour will become the default in a future version (probably Python 2.7).  Once absolute imports  are the default, ``import string`` will always find the standard library's version. It's suggested that users should begin using absolute imports as much as possible, so it's preferable to begin writing ``from pkg import string`` in your code."
msgstr ""

msgid "Relative imports are still possible by adding a leading period  to the module name when using the ``from ... import`` form::"
msgstr ""

msgid "# Import names from pkg.string from .string import name1, name2 # Import pkg.string from . import string"
msgstr ""

msgid "This imports the :mod:`string` module relative to the current package, so in :mod:`pkg.main` this will import *name1* and *name2* from :mod:`pkg.string`. Additional leading periods perform the relative import starting from the parent of the current package.  For example, code in the :mod:`A.B.C` module can do::"
msgstr ""

msgid "from . import D                 # Imports A.B.D from .. import E                # Imports A.E from ..F import G               # Imports A.F.G"
msgstr ""

msgid "Leading periods cannot be used with the ``import modname``  form of the import statement, only the ``from ... import`` form."
msgstr ""

msgid "PEP written by Aahz; implemented by Thomas Wouters."
msgstr ""

msgid "The py library by Holger Krekel, which contains the :mod:`py.std` package."
msgstr ""

msgid "PEP 338: Executing Modules as Scripts"
msgstr ""

msgid "The :option:`-m` switch added in Python 2.4 to execute a module as a script gained a few more abilities.  Instead of being implemented in C code inside the Python interpreter, the switch now uses an implementation in a new module, :mod:`runpy`."
msgstr ""

msgid "The :mod:`runpy` module implements a more sophisticated import mechanism so that it's now possible to run modules in a package such as :mod:`pychecker.checker`. The module also supports alternative import mechanisms such as the :mod:`zipimport` module.  This means you can add a .zip archive's path to ``sys.path`` and then use the :option:`-m` switch to execute code from the archive."
msgstr ""

msgid "PEP written and  implemented by Nick Coghlan."
msgstr ""

msgid "PEP 341: Unified try/except/finally"
msgstr ""

msgid "Until Python 2.5, the :keyword:`try` statement came in two flavours. You could use a :keyword:`finally` block to ensure that code is always executed, or one or more :keyword:`except` blocks to catch  specific exceptions.  You couldn't combine both :keyword:`except` blocks and a :keyword:`finally` block, because generating the right bytecode for the combined version was complicated and it wasn't clear what the semantics of the combined statement should be."
msgstr ""

msgid "Guido van Rossum spent some time working with Java, which does support the equivalent of combining :keyword:`except` blocks and a :keyword:`finally` block, and this clarified what the statement should mean.  In Python 2.5, you can now write::"
msgstr ""

msgid "try:     block-1 ... except Exception1:     handler-1 ... except Exception2:     handler-2 ... else:     else-block finally:     final-block"
msgstr ""

msgid "The code in *block-1* is executed.  If the code raises an exception, the various :keyword:`except` blocks are tested: if the exception is of class :class:`Exception1`, *handler-1* is executed; otherwise if it's of class :class:`Exception2`, *handler-2* is executed, and so forth.  If no exception is raised, the *else-block* is executed."
msgstr ""

msgid "No matter what happened previously, the *final-block* is executed once the code block is complete and any raised exceptions handled. Even if there's an error in an exception handler or the *else-block* and a new exception is raised, the code in the *final-block* is still run."
msgstr ""

msgid "PEP written by Georg Brandl;  implementation by Thomas Lee."
msgstr ""

msgid "PEP 342: New Generator Features"
msgstr ""

msgid "Python 2.5 adds a simple way to pass values *into* a generator. As introduced in Python 2.3, generators only produce output; once a generator's code was invoked to create an iterator, there was no way to pass any new information into the function when its execution is resumed.  Sometimes the ability to pass in some information would be useful.  Hackish solutions to this include making the generator's code look at a global variable and then changing the global variable's value, or passing in some mutable object that callers then modify."
msgstr ""

msgid "To refresh your memory of basic generators, here's a simple example::"
msgstr ""

msgid "def counter (maximum):     i = 0     while i < maximum:         yield i         i += 1"
msgstr ""

msgid "When you call ``counter(10)``, the result is an iterator that returns the values from 0 up to 9.  On encountering the :keyword:`yield` statement, the iterator returns the provided value and suspends the function's execution, preserving the local variables. Execution resumes on the following call to the iterator's :meth:`next` method, picking up after the :keyword:`yield` statement."
msgstr ""

msgid "In Python 2.3, :keyword:`yield` was a statement; it didn't return any value.  In 2.5, :keyword:`yield` is now an expression, returning a value that can be assigned to a variable or otherwise operated on::"
msgstr ""

msgid "val = (yield i)"
msgstr ""

msgid "I recommend that you always put parentheses around a :keyword:`yield` expression when you're doing something with the returned value, as in the above example. The parentheses aren't always necessary, but it's easier to always add them instead of having to remember when they're needed."
msgstr ""

msgid "(:pep:`342` explains the exact rules, which are that a :keyword:`yield`\\ -expression must always be parenthesized except when it occurs at the top-level expression on the right-hand side of an assignment.  This means you can write ``val = yield i`` but have to use parentheses when there's an operation, as in ``val = (yield i) + 12``.)"
msgstr ""

msgid "Values are sent into a generator by calling its :meth:`send(value)` method.  The generator's code is then resumed and the :keyword:`yield` expression returns the specified *value*.  If the regular :meth:`next` method is called, the :keyword:`yield` returns :const:`None`."
msgstr ""

msgid "Here's the previous example, modified to allow changing the value of the internal counter. ::"
msgstr ""

msgid "def counter (maximum):     i = 0     while i < maximum:         val = (yield i)         # If value provided, change counter         if val is not None:             i = val         else:             i += 1"
msgstr ""

msgid "And here's an example of changing the counter::"
msgstr ""

msgid ">>> it = counter(10) >>> print it.next() 0 >>> print it.next() 1 >>> print it.send(8) 8 >>> print it.next() 9 >>> print it.next() Traceback (most recent call last):   File \"t.py\", line 15, in ?     print it.next() StopIteration"
msgstr ""

msgid ":keyword:`yield` will usually return :const:`None`, so you should always check for this case.  Don't just use its value in expressions unless you're sure that the :meth:`send` method will be the only method used to resume your generator function."
msgstr ""

msgid "In addition to :meth:`send`, there are two other new methods on generators:"
msgstr ""

msgid ":meth:`throw(type, value=None, traceback=None)` is used to raise an exception inside the generator; the exception is raised by the :keyword:`yield` expression where the generator's execution is paused."
msgstr ""

msgid ":meth:`close` raises a new :exc:`GeneratorExit` exception inside the generator to terminate the iteration.  On receiving this exception, the generator's code must either raise :exc:`GeneratorExit` or :exc:`StopIteration`.  Catching the :exc:`GeneratorExit` exception and returning a value is illegal and will trigger a :exc:`RuntimeError`; if the function raises some other exception, that exception is propagated to the caller.  :meth:`close` will also be called by Python's garbage collector when the generator is garbage-collected."
msgstr ""

msgid "If you need to run cleanup code when a :exc:`GeneratorExit` occurs, I suggest using a ``try: ... finally:`` suite instead of  catching :exc:`GeneratorExit`."
msgstr ""

msgid "The cumulative effect of these changes is to turn generators from one-way producers of information into both producers and consumers."
msgstr ""

msgid "Generators also become *coroutines*, a more generalized form of subroutines. Subroutines are entered at one point and exited at another point (the top of the function, and a :keyword:`return` statement), but coroutines can be entered, exited, and resumed at many different points (the :keyword:`yield` statements). We'll have to figure out patterns for using coroutines effectively in Python."
msgstr ""

msgid "The addition of the :meth:`close` method has one side effect that isn't obvious. :meth:`close` is called when a generator is garbage-collected, so this means the generator's code gets one last chance to run before the generator is destroyed. This last chance means that ``try...finally`` statements in generators can now be guaranteed to work; the :keyword:`finally` clause will now always get a chance to run.  The syntactic restriction that you couldn't mix :keyword:`yield` statements with a ``try...finally`` suite has therefore been removed.  This seems like a minor bit of language trivia, but using generators and ``try...finally`` is actually necessary in order to implement the :keyword:`with` statement described by PEP 343.  I'll look at this new statement in the following  section."
msgstr ""

msgid "Another even more esoteric effect of this change: previously, the :attr:`gi_frame` attribute of a generator was always a frame object. It's now possible for :attr:`gi_frame` to be ``None`` once the generator has been exhausted."
msgstr ""

msgid "PEP written by  Guido van Rossum and Phillip J. Eby; implemented by Phillip J. Eby.  Includes examples of  some fancier uses of generators as coroutines."
msgstr ""

msgid "Earlier versions of these features were proposed in  :pep:`288` by Raymond Hettinger and :pep:`325` by Samuele Pedroni."
msgstr ""

msgid "The Wikipedia entry for  coroutines."
msgstr ""

msgid "An explanation of coroutines from a Perl point of view, written by Dan Sugalski."
msgstr ""

msgid "PEP 343: The 'with' statement"
msgstr ""

msgid "The ':keyword:`with`' statement clarifies code that previously would use ``try...finally`` blocks to ensure that clean-up code is executed.  In this section, I'll discuss the statement as it will commonly be used.  In the next section, I'll examine the implementation details and show how to write objects for use with this statement."
msgstr ""

msgid "The ':keyword:`with`' statement is a new control-flow structure whose basic structure is::"
msgstr ""

msgid "with expression [as variable]:     with-block"
msgstr ""

msgid "The expression is evaluated, and it should result in an object that supports the context management protocol (that is, has :meth:`__enter__` and :meth:`__exit__` methods."
msgstr ""

msgid "The object's :meth:`__enter__` is called before *with-block* is executed and therefore can run set-up code. It also may return a value that is bound to the name *variable*, if given.  (Note carefully that *variable* is *not* assigned the result of *expression*.)"
msgstr ""

msgid "After execution of the *with-block* is finished, the object's :meth:`__exit__` method is called, even if the block raised an exception, and can therefore run clean-up code."
msgstr ""

msgid "To enable the statement in Python 2.5, you need to add the following directive to your module::"
msgstr ""

msgid "from __future__ import with_statement"
msgstr ""

msgid "The statement will always be enabled in Python 2.6."
msgstr ""

msgid "Some standard Python objects now support the context management protocol and can be used with the ':keyword:`with`' statement. File objects are one example::"
msgstr ""

msgid "with open('/etc/passwd', 'r') as f:     for line in f:         print line         ... more processing code ..."
msgstr ""

msgid "After this statement has executed, the file object in *f* will have been automatically closed, even if the :keyword:`for` loop raised an exception part- way through the block."
msgstr ""

msgid "In this case, *f* is the same object created by :func:`open`, because :meth:`file.__enter__` returns *self*."
msgstr ""

msgid "The :mod:`threading` module's locks and condition variables  also support the ':keyword:`with`' statement::"
msgstr ""

msgid "lock = threading.Lock() with lock:     # Critical section of code     ..."
msgstr ""

msgid "The lock is acquired before the block is executed and always released once  the block is complete."
msgstr ""

msgid "The new :func:`localcontext` function in the :mod:`decimal` module makes it easy to save and restore the current decimal context, which encapsulates the desired precision and rounding characteristics for computations::"
msgstr ""

msgid "from decimal import Decimal, Context, localcontext  # Displays with default precision of 28 digits v = Decimal('578') print v.sqrt()  with localcontext(Context(prec=16)):     # All code in this block uses a precision of 16 digits.     # The original context is restored on exiting the block.     print v.sqrt()"
msgstr ""

msgid "Writing Context Managers"
msgstr ""

msgid "Under the hood, the ':keyword:`with`' statement is fairly complicated. Most people will only use ':keyword:`with`' in company with existing objects and don't need to know these details, so you can skip the rest of this section if you like.  Authors of new objects will need to understand the details of the underlying implementation and should keep reading."
msgstr ""

msgid "A high-level explanation of the context management protocol is:"
msgstr ""

msgid "The expression is evaluated and should result in an object called a \"context manager\".  The context manager must have :meth:`__enter__` and :meth:`__exit__` methods."
msgstr ""

msgid "The context manager's :meth:`__enter__` method is called.  The value returned is assigned to *VAR*.  If no ``'as VAR'`` clause is present, the value is simply discarded."
msgstr ""

msgid "The code in *BLOCK* is executed."
msgstr ""

msgid "If *BLOCK* raises an exception, the :meth:`__exit__(type, value, traceback)` is called with the exception details, the same values returned by :func:`sys.exc_info`.  The method's return value controls whether the exception is re-raised: any false value re-raises the exception, and ``True`` will result in suppressing it.  You'll only rarely want to suppress the exception, because if you do the author of the code containing the ':keyword:`with`' statement will never realize anything went wrong."
msgstr ""

msgid "If *BLOCK* didn't raise an exception,  the :meth:`__exit__` method is still called, but *type*, *value*, and *traceback* are all ``None``."
msgstr ""

msgid "Let's think through an example.  I won't present detailed code but will only sketch the methods necessary for a database that supports transactions."
msgstr ""

msgid "(For people unfamiliar with database terminology: a set of changes to the database are grouped into a transaction.  Transactions can be either committed, meaning that all the changes are written into the database, or rolled back, meaning that the changes are all discarded and the database is unchanged.  See any database textbook for more information.)"
msgstr ""

msgid "Let's assume there's an object representing a database connection. Our goal will be to let the user write code like this::"
msgstr ""

msgid "db_connection = DatabaseConnection() with db_connection as cursor:     cursor.execute('insert into ...')     cursor.execute('delete from ...')     # ... more operations ..."
msgstr ""

msgid "The transaction should be committed if the code in the block runs flawlessly or rolled back if there's an exception. Here's the basic interface for :class:`DatabaseConnection` that I'll assume::"
msgstr ""

msgid "class DatabaseConnection:     # Database interface     def cursor (self):         \"Returns a cursor object and starts a new transaction\"     def commit (self):         \"Commits current transaction\"     def rollback (self):         \"Rolls back current transaction\""
msgstr ""

msgid "The :meth:`__enter__` method is pretty easy, having only to start a new transaction.  For this application the resulting cursor object would be a useful result, so the method will return it.  The user can then add ``as cursor`` to their ':keyword:`with`' statement to bind the cursor to a variable name. ::"
msgstr ""

msgid "class DatabaseConnection:     ...     def __enter__ (self):         # Code to start a new transaction         cursor = self.cursor()         return cursor"
msgstr ""

msgid "The :meth:`__exit__` method is the most complicated because it's where most of the work has to be done.  The method has to check if an exception occurred.  If there was no exception, the transaction is committed.  The transaction is rolled back if there was an exception."
msgstr ""

msgid "In the code below, execution will just fall off the end of the function, returning the default value of ``None``.  ``None`` is false, so the exception will be re-raised automatically.  If you wished, you could be more explicit and add a :keyword:`return` statement at the marked location. ::"
msgstr ""

msgid "class DatabaseConnection:     ...     def __exit__ (self, type, value, tb):         if tb is None:             # No exception, so commit             self.commit()         else:             # Exception occurred, so rollback.             self.rollback()             # return False"
msgstr ""

msgid "The contextlib module"
msgstr ""

msgid "The new :mod:`contextlib` module provides some functions and a decorator that are useful for writing objects for use with the ':keyword:`with`' statement."
msgstr ""

msgid "The decorator is called :func:`contextmanager`, and lets you write a single generator function instead of defining a new class.  The generator should yield exactly one value.  The code up to the :keyword:`yield` will be executed as the :meth:`__enter__` method, and the value yielded will be the method's return value that will get bound to the variable in the ':keyword:`with`' statement's :keyword:`as` clause, if any.  The code after the :keyword:`yield` will be executed in the :meth:`__exit__` method.  Any exception raised in the block will be raised by the :keyword:`yield` statement."
msgstr ""

msgid "Our database example from the previous section could be written  using this decorator as::"
msgstr ""

msgid "from contextlib import contextmanager  @contextmanager def db_transaction (connection):     cursor = connection.cursor()     try:         yield cursor     except:         connection.rollback()         raise     else:         connection.commit()  db = DatabaseConnection() with db_transaction(db) as cursor:     ..."
msgstr ""

msgid "The :mod:`contextlib` module also has a :func:`nested(mgr1, mgr2, ...)` function that combines a number of context managers so you don't need to write nested ':keyword:`with`' statements.  In this example, the single ':keyword:`with`' statement both starts a database transaction and acquires a thread lock::"
msgstr ""

msgid "lock = threading.Lock() with nested (db_transaction(db), lock) as (cursor, locked):     ..."
msgstr ""

msgid "Finally, the :func:`closing(object)` function returns *object* so that it can be bound to a variable, and calls ``object.close`` at the end of the block. ::"
msgstr ""

msgid "import urllib, sys from contextlib import closing  with closing(urllib.urlopen('http://www.yahoo.com')) as f:     for line in f:         sys.stdout.write(line)"
msgstr ""

msgid "PEP written by Guido van Rossum and Nick Coghlan; implemented by Mike Bland, Guido van Rossum, and Neal Norwitz.  The PEP shows the code generated for a ':keyword:`with`' statement, which can be helpful in learning how the statement works."
msgstr ""

msgid "The documentation  for the :mod:`contextlib` module."
msgstr ""

msgid "PEP 352: Exceptions as New-Style Classes"
msgstr ""

msgid "Exception classes can now be new-style classes, not just classic classes, and the built-in :exc:`Exception` class and all the standard built-in exceptions (:exc:`NameError`, :exc:`ValueError`, etc.) are now new-style classes."
msgstr ""

msgid "The inheritance hierarchy for exceptions has been rearranged a bit. In 2.5, the inheritance relationships are::"
msgstr ""

msgid "BaseException       # New in Python 2.5 |- KeyboardInterrupt |- SystemExit |- Exception    |- (all other current built-in exceptions)"
msgstr ""

msgid "This rearrangement was done because people often want to catch all exceptions that indicate program errors.  :exc:`KeyboardInterrupt` and :exc:`SystemExit` aren't errors, though, and usually represent an explicit action such as the user hitting Control-C or code calling :func:`sys.exit`.  A bare ``except:`` will catch all exceptions, so you commonly need to list :exc:`KeyboardInterrupt` and :exc:`SystemExit` in order to re-raise them.  The usual pattern is::"
msgstr ""

msgid "try:     ... except (KeyboardInterrupt, SystemExit):     raise except:     # Log error...     # Continue running program..."
msgstr ""

msgid "In Python 2.5, you can now write ``except Exception`` to achieve the same result, catching all the exceptions that usually indicate errors  but leaving :exc:`KeyboardInterrupt` and :exc:`SystemExit` alone.  As in previous versions, a bare ``except:`` still catches all exceptions."
msgstr ""

msgid "The goal for Python 3.0 is to require any class raised as an exception to derive from :exc:`BaseException` or some descendant of :exc:`BaseException`, and future releases in the Python 2.x series may begin to enforce this constraint. Therefore, I suggest you begin making all your exception classes derive from :exc:`Exception` now.  It's been suggested that the bare ``except:`` form should be removed in Python 3.0, but Guido van Rossum hasn't decided whether to do this or not."
msgstr ""

msgid "Raising of strings as exceptions, as in the statement ``raise \"Error occurred\"``, is deprecated in Python 2.5 and will trigger a warning.  The aim is to be able to remove the string-exception feature in a few releases."
msgstr ""

msgid "PEP written by  Brett Cannon and Guido van Rossum; implemented by Brett Cannon."
msgstr ""

msgid "PEP 353: Using ssize_t as the index type"
msgstr ""

msgid "A wide-ranging change to Python's C API, using a new  :ctype:`Py_ssize_t` type definition instead of :ctype:`int`,  will permit the interpreter to handle more data on 64-bit platforms. This change doesn't affect Python's capacity on 32-bit platforms."
msgstr ""

msgid "Various pieces of the Python interpreter used C's :ctype:`int` type to store sizes or counts; for example, the number of items in a list or tuple were stored in an :ctype:`int`.  The C compilers for most 64-bit platforms still define :ctype:`int` as a 32-bit type, so that meant that lists could only hold up to ``2**31 - 1`` = 2147483647 items. (There are actually a few different programming models that 64-bit C compilers can use -- see http://www.unix.org/version2/whatsnew/lp64_wp.html for a discussion -- but the most commonly available model leaves :ctype:`int` as 32 bits.)"
msgstr ""

msgid "A limit of 2147483647 items doesn't really matter on a 32-bit platform because you'll run out of memory before hitting the length limit. Each list item requires space for a pointer, which is 4 bytes, plus space for a :ctype:`PyObject` representing the item.  2147483647\\*4 is already more bytes than a 32-bit address space can contain."
msgstr ""

msgid "It's possible to address that much memory on a 64-bit platform, however.  The pointers for a list that size would only require 16 GiB of space, so it's not unreasonable that Python programmers might construct lists that large. Therefore, the Python interpreter had to be changed to use some type other than :ctype:`int`, and this will be a 64-bit type on 64-bit platforms.  The change will cause incompatibilities on 64-bit machines, so it was deemed worth making the transition now, while the number of 64-bit users is still relatively small. (In 5 or 10 years, we may *all* be on 64-bit machines, and the transition would be more painful then.)"
msgstr ""

msgid "This change most strongly affects authors of C extension modules.   Python strings and container types such as lists and tuples  now use :ctype:`Py_ssize_t` to store their size.   Functions such as :cfunc:`PyList_Size`  now return :ctype:`Py_ssize_t`.  Code in extension modules may therefore need to have some variables changed to :ctype:`Py_ssize_t`."
msgstr ""

msgid "The :cfunc:`PyArg_ParseTuple` and :cfunc:`Py_BuildValue` functions have a new conversion code, ``n``, for :ctype:`Py_ssize_t`.   :cfunc:`PyArg_ParseTuple`'s ``s#`` and ``t#`` still output :ctype:`int` by default, but you can define the macro  :cmacro:`PY_SSIZE_T_CLEAN` before including :file:`Python.h`  to make them return :ctype:`Py_ssize_t`."
msgstr ""

msgid ":pep:`353` has a section on conversion guidelines that  extension authors should read to learn about supporting 64-bit platforms."
msgstr ""

msgid "PEP written and implemented by Martin von Löwis."
msgstr ""

msgid "PEP 357: The '__index__' method"
msgstr ""

msgid "The NumPy developers had a problem that could only be solved by adding a new special method, :meth:`__index__`.  When using slice notation, as in ``[start:stop:step]``, the values of the *start*, *stop*, and *step* indexes must all be either integers or long integers.  NumPy defines a variety of specialized integer types corresponding to unsigned and signed integers of 8, 16, 32, and 64 bits, but there was no way to signal that these types could be used as slice indexes."
msgstr ""

msgid "Slicing can't just use the existing :meth:`__int__` method because that method is also used to implement coercion to integers.  If slicing used :meth:`__int__`, floating-point numbers would also become legal slice indexes and that's clearly an undesirable behaviour."
msgstr ""

msgid "Instead, a new special method called :meth:`__index__` was added.  It takes no arguments and returns an integer giving the slice index to use.  For example::"
msgstr ""

msgid "class C:     def __index__ (self):         return self.value"
msgstr ""

msgid "The return value must be either a Python integer or long integer. The interpreter will check that the type returned is correct, and raises a :exc:`TypeError` if this requirement isn't met."
msgstr ""

msgid "A corresponding :attr:`nb_index` slot was added to the C-level :ctype:`PyNumberMethods` structure to let C extensions implement this protocol. :cfunc:`PyNumber_Index(obj)` can be used in extension code to call the :meth:`__index__` function and retrieve its result."
msgstr ""

msgid "PEP written  and implemented by Travis Oliphant."
msgstr ""

msgid "Here are all of the changes that Python 2.5 makes to the core Python language."
msgstr ""

msgid "The :class:`dict` type has a new hook for letting subclasses provide a default value when a key isn't contained in the dictionary. When a key isn't found, the dictionary's :meth:`__missing__(key)` method will be called.  This hook is used to implement the new :class:`defaultdict` class in the :mod:`collections` module.  The following example defines a dictionary  that returns zero for any missing key::"
msgstr ""

msgid "class zerodict (dict):     def __missing__ (self, key):         return 0  d = zerodict({1:1, 2:2}) print d[1], d[2]   # Prints 1, 2 print d[3], d[4]   # Prints 0, 0"
msgstr ""

msgid "Both 8-bit and Unicode strings have new :meth:`partition(sep)`  and :meth:`rpartition(sep)` methods that simplify a common use case."
msgstr ""

msgid "The :meth:`find(S)` method is often used to get an index which is then used to slice the string and obtain the pieces that are before and after the separator. :meth:`partition(sep)` condenses this pattern into a single method call that returns a 3-tuple containing the substring before the separator, the separator itself, and the substring after the separator.  If the separator isn't found, the first element of the tuple is the entire string and the other two elements are empty.  :meth:`rpartition(sep)` also returns a 3-tuple but starts searching from the end of the string; the ``r`` stands for 'reverse'."
msgstr ""

msgid "Some examples::"
msgstr ""

msgid ">>> ('http://www.python.org').partition('://') ('http', '://', 'www.python.org') >>> ('file:/usr/share/doc/index.html').partition('://') ('file:/usr/share/doc/index.html', '', '') >>> (u'Subject: a quick question').partition(':') (u'Subject', u':', u' a quick question') >>> 'www.python.org'.rpartition('.') ('www.python', '.', 'org') >>> 'www.python.org'.rpartition(':') ('', '', 'www.python.org')"
msgstr ""

msgid "(Implemented by Fredrik Lundh following a suggestion by Raymond Hettinger.)"
msgstr ""

msgid "The :meth:`startswith` and :meth:`endswith` methods of string types now accept tuples of strings to check for. ::"
msgstr ""

msgid "def is_image_file (filename):     return filename.endswith(('.gif', '.jpg', '.tiff'))"
msgstr ""

msgid "(Implemented by Georg Brandl following a suggestion by Tom Lynn.)"
msgstr ""

msgid "The :func:`min` and :func:`max` built-in functions gained a ``key`` keyword parameter analogous to the ``key`` argument for :meth:`sort`.  This parameter supplies a function that takes a single argument and is called for every value in the list; :func:`min`/:func:`max` will return the element with the smallest/largest return value from this function. For example, to find the longest string in a list, you can do::"
msgstr ""

msgid "L = ['medium', 'longest', 'short'] # Prints 'longest' print max(L, key=len) # Prints 'short', because lexicographically 'short' has the largest value print max(L)"
msgstr ""

msgid "(Contributed by Steven Bethard and Raymond Hettinger.)"
msgstr ""

msgid "Two new built-in functions, :func:`any` and :func:`all`, evaluate whether an iterator contains any true or false values.  :func:`any` returns :const:`True` if any value returned by the iterator is true; otherwise it will return :const:`False`.  :func:`all` returns :const:`True` only if all of the values returned by the iterator evaluate as true. (Suggested by Guido van Rossum, and implemented by Raymond Hettinger.)"
msgstr ""

msgid "The result of a class's :meth:`__hash__` method can now be either a long integer or a regular integer.  If a long integer is returned, the hash of that value is taken.  In earlier versions the hash value was required to be a regular integer, but in 2.5 the :func:`id` built-in was changed to always return non-negative numbers, and users often seem to use ``id(self)`` in :meth:`__hash__` methods (though this is discouraged)."
msgstr ""

msgid "ASCII is now the default encoding for modules.  It's now  a syntax error if a module contains string literals with 8-bit characters but doesn't have an encoding declaration.  In Python 2.4 this triggered a warning, not a syntax error.  See :pep:`263`  for how to declare a module's encoding; for example, you might add  a line like this near the top of the source file::"
msgstr ""

msgid "# -*- coding: latin1 -*-"
msgstr ""

msgid "A new warning, :class:`UnicodeWarning`, is triggered when  you attempt to compare a Unicode string and an 8-bit string  that can't be converted to Unicode using the default ASCII encoding.   The result of the comparison is false::"
msgstr ""

msgid ">>> chr(128) == unichr(128)   # Can't convert chr(128) to Unicode __main__:1: UnicodeWarning: Unicode equal comparison failed   to convert both arguments to Unicode - interpreting them   as being unequal False >>> chr(127) == unichr(127)   # chr(127) can be converted True"
msgstr ""

msgid "Previously this would raise a :class:`UnicodeDecodeError` exception, but in 2.5 this could result in puzzling problems when accessing a dictionary.  If you looked up ``unichr(128)`` and ``chr(128)`` was being used as a key, you'd get a :class:`UnicodeDecodeError` exception.  Other changes in 2.5 resulted in this exception being raised instead of suppressed by the code in :file:`dictobject.c` that implements dictionaries."
msgstr ""

msgid "Raising an exception for such a comparison is strictly correct, but the change might have broken code, so instead  :class:`UnicodeWarning` was introduced."
msgstr ""

msgid "(Implemented by Marc-André Lemburg.)"
msgstr ""

msgid "One error that Python programmers sometimes make is forgetting to include an :file:`__init__.py` module in a package directory. Debugging this mistake can be confusing, and usually requires running Python with the :option:`-v` switch to log all the paths searched. In Python 2.5, a new :exc:`ImportWarning` warning is triggered when an import would have picked up a directory as a package but no :file:`__init__.py` was found.  This warning is silently ignored by default; provide the :option:`-Wd` option when running the Python executable to display the warning message. (Implemented by Thomas Wouters.)"
msgstr ""

msgid "The list of base classes in a class definition can now be empty.   As an example, this is now legal::"
msgstr ""

msgid "class C():     pass"
msgstr ""

msgid "(Implemented by Brett Cannon.)"
msgstr ""

msgid "Interactive Interpreter Changes"
msgstr ""

msgid "In the interactive interpreter, ``quit`` and ``exit``  have long been strings so that new users get a somewhat helpful message when they try to quit::"
msgstr ""

msgid ">>> quit 'Use Ctrl-D (i.e. EOF) to exit.'"
msgstr ""

msgid "In Python 2.5, ``quit`` and ``exit`` are now objects that still produce string representations of themselves, but are also callable. Newbies who try ``quit()`` or ``exit()`` will now exit the interpreter as they expect.  (Implemented by Georg Brandl.)"
msgstr ""

msgid "The Python executable now accepts the standard long options  :option:`--help` and :option:`--version`; on Windows,  it also accepts the :option:`/?` option for displaying a help message. (Implemented by Georg Brandl.)"
msgstr ""

msgid "Several of the optimizations were developed at the NeedForSpeed sprint, an event held in Reykjavik, Iceland, from May 21--28 2006. The sprint focused on speed enhancements to the CPython implementation and was funded by EWT LLC with local support from CCP Games.  Those optimizations added at this sprint are specially marked in the following list."
msgstr ""

msgid "When they were introduced  in Python 2.4, the built-in :class:`set` and :class:`frozenset` types were built on top of Python's dictionary type.   In 2.5 the internal data structure has been customized for implementing sets, and as a result sets will use a third less memory and are somewhat faster. (Implemented by Raymond Hettinger.)"
msgstr ""

msgid "The speed of some Unicode operations, such as finding substrings, string splitting, and character map encoding and decoding, has been improved. (Substring search and splitting improvements were added by Fredrik Lundh and Andrew Dalke at the NeedForSpeed sprint. Character maps were improved by Walter Dörwald and Martin von Löwis.)"
msgstr ""

msgid "The :func:`long(str, base)` function is now faster on long digit strings because fewer intermediate results are calculated.  The peak is for strings of around 800--1000 digits where  the function is 6 times faster. (Contributed by Alan McIntyre and committed at the NeedForSpeed sprint.)"
msgstr ""

msgid "It's now illegal to mix iterating over a file  with ``for line in file`` and calling  the file object's :meth:`read`/:meth:`readline`/:meth:`readlines` methods.  Iteration uses an internal buffer and the  :meth:`read\\*` methods don't use that buffer.   Instead they would return the data following the buffer, causing the data to appear out of order.  Mixing iteration and these methods will now trigger a :exc:`ValueError` from the :meth:`read\\*` method. (Implemented by Thomas Wouters.)"
msgstr ""

msgid "The :mod:`struct` module now compiles structure format  strings into an internal representation and caches this representation, yielding a 20% speedup. (Contributed by Bob Ippolito at the NeedForSpeed sprint.)"
msgstr ""

msgid "The :mod:`re` module got a 1 or 2% speedup by switching to  Python's allocator functions instead of the system's  :cfunc:`malloc` and :cfunc:`free`. (Contributed by Jack Diederich at the NeedForSpeed sprint.)"
msgstr ""

msgid "The code generator's peephole optimizer now performs simple constant folding in expressions.  If you write something like ``a = 2+3``, the code generator will do the arithmetic and produce code corresponding to ``a = 5``.  (Proposed and implemented  by Raymond Hettinger.)"
msgstr ""

msgid "Function calls are now faster because code objects now keep  the most recently finished frame (a \"zombie frame\") in an internal field of the code object, reusing it the next time the code object is invoked.  (Original patch by Michael Hudson, modified by Armin Rigo and Richard Jones; committed at the NeedForSpeed sprint.)  Frame objects are also slightly smaller, which may improve cache locality and reduce memory usage a bit.  (Contributed by Neal Norwitz.)"
msgstr ""

msgid "Python's built-in exceptions are now new-style classes, a change that speeds up instantiation considerably.  Exception handling in Python 2.5 is therefore about 30% faster than in 2.4. (Contributed by Richard Jones, Georg Brandl and Sean Reifschneider at the NeedForSpeed sprint.)"
msgstr ""

msgid "Importing now caches the paths tried, recording whether  they exist or not so that the interpreter makes fewer  :cfunc:`open` and :cfunc:`stat` calls on startup. (Contributed by Martin von Löwis and Georg Brandl.)"
msgstr ""

msgid "New, Improved, and Removed Modules"
msgstr ""

msgid "The standard library received many enhancements and bug fixes in Python 2.5. Here's a partial list of the most notable changes, sorted alphabetically by module name. Consult the :file:`Misc/NEWS` file in the source tree for a more complete list of changes, or look through the SVN logs for all the details."
msgstr ""

msgid "The :mod:`audioop` module now supports the a-LAW encoding, and the code for u-LAW encoding has been improved.  (Contributed by Lars Immisch.)"
msgstr ""

msgid "The :mod:`codecs` module gained support for incremental codecs.  The :func:`codec.lookup` function now returns a :class:`CodecInfo` instance instead of a tuple. :class:`CodecInfo` instances behave like a 4-tuple to preserve backward compatibility but also have the attributes :attr:`encode`, :attr:`decode`, :attr:`incrementalencoder`, :attr:`incrementaldecoder`, :attr:`streamwriter`, and :attr:`streamreader`.  Incremental codecs  can receive input and produce output in multiple chunks; the output is the same as if the entire input was fed to the non-incremental codec. See the :mod:`codecs` module documentation for details. (Designed and implemented by Walter Dörwald.)"
msgstr ""

msgid "The :mod:`collections` module gained a new type, :class:`defaultdict`, that subclasses the standard :class:`dict` type.  The new type mostly behaves like a dictionary but constructs a default value when a key isn't present, automatically adding it to the dictionary for the requested key value."
msgstr ""

msgid "The first argument to :class:`defaultdict`'s constructor is a factory function that gets called whenever a key is requested but not found. This factory function receives no arguments, so you can use built-in type constructors such as :func:`list` or :func:`int`.  For example,  you can make an index of words based on their initial letter like this::"
msgstr ""

msgid "words = \"\"\"Nel mezzo del cammin di nostra vita mi ritrovai per una selva oscura che la diritta via era smarrita\"\"\".lower().split()  index = defaultdict(list)  for w in words:     init_letter = w[0]     index[init_letter].append(w)"
msgstr ""

msgid "Printing ``index`` results in the following output::"
msgstr ""

msgid "defaultdict(<type 'list'>, {'c': ['cammin', 'che'], 'e': ['era'],         'd': ['del', 'di', 'diritta'], 'm': ['mezzo', 'mi'],         'l': ['la'], 'o': ['oscura'], 'n': ['nel', 'nostra'],         'p': ['per'], 's': ['selva', 'smarrita'],         'r': ['ritrovai'], 'u': ['una'], 'v': ['vita', 'via']}"
msgstr ""

msgid "(Contributed by Guido van Rossum.)"
msgstr ""

msgid "The :class:`deque` double-ended queue type supplied by the :mod:`collections` module now has a :meth:`remove(value)` method that removes the first occurrence of *value* in the queue, raising :exc:`ValueError` if the value isn't found. (Contributed by Raymond Hettinger.)"
msgstr ""

msgid "New module: The :mod:`contextlib` module contains helper functions for use with the new ':keyword:`with`' statement.  See section :ref:`contextlibmod` for more about this module."
msgstr ""

msgid "New module: The :mod:`cProfile` module is a C implementation of  the existing :mod:`profile` module that has much lower overhead. The module's interface is the same as :mod:`profile`: you run ``cProfile.run('main()')`` to profile a function, can save profile data to a file, etc.  It's not yet known if the Hotshot profiler, which is also written in C but doesn't match the :mod:`profile` module's interface, will continue to be maintained in future versions of Python.  (Contributed by Armin Rigo.)"
msgstr ""

msgid "Also, the :mod:`pstats` module for analyzing the data measured by the profiler now supports directing the output to any file object by supplying a *stream* argument to the :class:`Stats` constructor. (Contributed by Skip Montanaro.)"
msgstr ""

msgid "The :mod:`csv` module, which parses files in comma-separated value format, received several enhancements and a number of bugfixes.  You can now set the maximum size in bytes of a field by calling the :meth:`csv.field_size_limit(new_limit)` function; omitting the *new_limit* argument will return the currently-set limit.  The :class:`reader` class now has a :attr:`line_num` attribute that counts the number of physical lines read from the source; records can span multiple physical lines, so :attr:`line_num` is not the same as the number of records read."
msgstr ""

msgid "The CSV parser is now stricter about multi-line quoted fields. Previously, if a line ended within a quoted field without a terminating newline character, a newline would be inserted into the returned field. This behavior caused problems when reading files that contained carriage return characters within fields, so the code was changed to return the field without inserting newlines. As a consequence, if newlines embedded within fields are important, the input should be split into lines in a manner that preserves the newline characters."
msgstr ""

msgid "(Contributed by Skip Montanaro and Andrew McNamara.)"
msgstr ""

msgid "The :class:`datetime` class in the :mod:`datetime`  module now has a :meth:`strptime(string, format)`  method for parsing date strings, contributed by Josh Spoerri. It uses the same format characters as :func:`time.strptime` and :func:`time.strftime`::"
msgstr ""

msgid "from datetime import datetime  ts = datetime.strptime('10:13:15 2006-03-07',                        '%H:%M:%S %Y-%m-%d')"
msgstr ""

msgid "The :meth:`SequenceMatcher.get_matching_blocks` method in the :mod:`difflib` module now guarantees to return a minimal list of blocks describing matching subsequences.  Previously, the algorithm would occasionally break a block of matching elements into two list entries. (Enhancement by Tim Peters.)"
msgstr ""

msgid "The :mod:`doctest` module gained a ``SKIP`` option that keeps an example from being executed at all.  This is intended for code snippets that are usage examples intended for the reader and aren't actually test cases."
msgstr ""

msgid "An *encoding* parameter was added to the :func:`testfile` function and the :class:`DocFileSuite` class to specify the file's encoding.  This makes it easier to use non-ASCII characters in  tests contained within a docstring. (Contributed by Bjorn Tillenius.)"
msgstr ""

msgid "The :mod:`email` package has been updated to version 4.0. (Contributed by Barry Warsaw.)"
msgstr ""

msgid "The :mod:`fileinput` module was made more flexible. Unicode filenames are now supported, and a *mode* parameter that defaults to ``\"r\"`` was added to the :func:`input` function to allow opening files in binary or universal-newline mode.  Another new parameter, *openhook*, lets you use a function other than :func:`open`  to open the input files.  Once you're iterating over  the set of files, the :class:`FileInput` object's new :meth:`fileno` returns the file descriptor for the currently opened file. (Contributed by Georg Brandl.)"
msgstr ""

msgid "In the :mod:`gc` module, the new :func:`get_count` function returns a 3-tuple containing the current collection counts for the three GC generations.  This is accounting information for the garbage collector; when these counts reach a specified threshold, a garbage collection sweep will be made.  The existing :func:`gc.collect` function now takes an optional *generation* argument of 0, 1, or 2 to specify which generation to collect. (Contributed by Barry Warsaw.)"
msgstr ""

msgid "The :func:`nsmallest` and  :func:`nlargest` functions in the :mod:`heapq` module  now support a ``key`` keyword parameter similar to the one provided by the :func:`min`/:func:`max` functions and the :meth:`sort` methods.  For example::"
msgstr ""

msgid ">>> import heapq >>> L = [\"short\", 'medium', 'longest', 'longer still'] >>> heapq.nsmallest(2, L)  # Return two lowest elements, lexicographically ['longer still', 'longest'] >>> heapq.nsmallest(2, L, key=len)   # Return two shortest elements ['short', 'medium']"
msgstr ""

msgid "The :func:`itertools.islice` function now accepts ``None`` for the start and step arguments.  This makes it more compatible with the attributes of slice objects, so that you can now write the following::"
msgstr ""

msgid "s = slice(5)     # Create slice object itertools.islice(iterable, s.start, s.stop, s.step)"
msgstr ""

msgid "The :func:`format` function in the :mod:`locale` module has been modified and two new functions were added, :func:`format_string` and :func:`currency`."
msgstr ""

msgid "The :func:`format` function's *val* parameter could previously be a string as long as no more than one %char specifier appeared; now the parameter must be exactly one %char specifier with no surrounding text.  An optional *monetary* parameter was also added which, if ``True``, will use the locale's rules for formatting currency in placing a separator between groups of three digits."
msgstr ""

msgid "To format strings with multiple %char specifiers, use the new :func:`format_string` function that works like :func:`format` but also supports mixing %char specifiers with arbitrary text."
msgstr ""

msgid "A new :func:`currency` function was also added that formats a number according to the current locale's settings."
msgstr ""

msgid "(Contributed by Georg Brandl.)"
msgstr ""

msgid "The :mod:`mailbox` module underwent a massive rewrite to add the capability to modify mailboxes in addition to reading them.  A new set of classes that include :class:`mbox`, :class:`MH`, and :class:`Maildir` are used to read mailboxes, and have an :meth:`add(message)` method to add messages, :meth:`remove(key)` to remove messages, and :meth:`lock`/:meth:`unlock` to lock/unlock the mailbox. The following example converts a maildir-format mailbox into an mbox-format one::"
msgstr ""

msgid "import mailbox  # 'factory=None' uses email.Message.Message as the class representing # individual messages. src = mailbox.Maildir('maildir', factory=None) dest = mailbox.mbox('/tmp/mbox')  for msg in src:     dest.add(msg)"
msgstr ""

msgid "(Contributed by Gregory K. Johnson.  Funding was provided by Google's 2005 Summer of Code.)"
msgstr ""

msgid "New module: the :mod:`msilib` module allows creating Microsoft Installer :file:`.msi` files and CAB files.  Some support for reading the :file:`.msi` database is also included. (Contributed by Martin von Löwis.)"
msgstr ""

msgid "The :mod:`nis` module now supports accessing domains other than the system default domain by supplying a *domain* argument to the :func:`nis.match` and :func:`nis.maps` functions. (Contributed by Ben Bell.)"
msgstr ""

msgid "The :mod:`operator` module's :func:`itemgetter`  and :func:`attrgetter` functions now support multiple fields.   A call such as ``operator.attrgetter('a', 'b')`` will return a function  that retrieves the :attr:`a` and :attr:`b` attributes.  Combining  this new feature with the :meth:`sort` method's ``key`` parameter  lets you easily sort lists using multiple fields. (Contributed by Raymond Hettinger.)"
msgstr ""

msgid "The :mod:`optparse` module was updated to version 1.5.1 of the Optik library. The :class:`OptionParser` class gained an :attr:`epilog` attribute, a string that will be printed after the help message, and a :meth:`destroy` method to break reference cycles created by the object. (Contributed by Greg Ward.)"
msgstr ""

msgid "The :mod:`os` module underwent several changes.  The :attr:`stat_float_times` variable now defaults to true, meaning that :func:`os.stat` will now return time values as floats.  (This doesn't necessarily mean that :func:`os.stat` will return times that are precise to fractions of a second; not all systems support such precision.)"
msgstr ""

msgid "Constants named :attr:`os.SEEK_SET`, :attr:`os.SEEK_CUR`, and :attr:`os.SEEK_END` have been added; these are the parameters to the :func:`os.lseek` function.  Two new constants for locking are :attr:`os.O_SHLOCK` and :attr:`os.O_EXLOCK`."
msgstr ""

msgid "Two new functions, :func:`wait3` and :func:`wait4`, were added.  They're similar the :func:`waitpid` function which waits for a child process to exit and returns a tuple of the process ID and its exit status, but :func:`wait3` and :func:`wait4` return additional information.  :func:`wait3` doesn't take a process ID as input, so it waits for any child process to exit and returns a 3-tuple of *process-id*, *exit-status*, *resource-usage* as returned from the :func:`resource.getrusage` function. :func:`wait4(pid)` does take a process ID. (Contributed by Chad J. Schroeder.)"
msgstr ""

msgid "On FreeBSD, the :func:`os.stat` function now returns  times with nanosecond resolution, and the returned object now has :attr:`st_gen` and :attr:`st_birthtime`. The :attr:`st_flags` member is also available, if the platform supports it. (Contributed by Antti Louko and  Diego Pettenò.)"
msgstr ""

msgid "The Python debugger provided by the :mod:`pdb` module can now store lists of commands to execute when a breakpoint is reached and execution stops.  Once breakpoint #1 has been created, enter ``commands 1`` and enter a series of commands to be executed, finishing the list with ``end``.  The command list can include commands that resume execution, such as ``continue`` or ``next``. (Contributed by Grégoire Dooms.)"
msgstr ""

msgid "The :mod:`pickle` and :mod:`cPickle` modules no longer accept a return value of ``None`` from the :meth:`__reduce__` method; the method must return a tuple of arguments instead.  The ability to return ``None`` was deprecated in Python 2.4, so this completes the removal of the feature."
msgstr ""

msgid "The :mod:`pkgutil` module, containing various utility functions for finding packages, was enhanced to support PEP 302's import hooks and now also works for packages stored in ZIP-format archives. (Contributed by Phillip J. Eby.)"
msgstr ""

msgid "The pybench benchmark suite by Marc-André Lemburg is now included in the :file:`Tools/pybench` directory.  The pybench suite is an improvement on the commonly used :file:`pystone.py` program because pybench provides a more detailed measurement of the interpreter's speed.  It times particular operations such as function calls, tuple slicing, method lookups, and numeric operations, instead of performing many different operations and reducing the result to a single number as :file:`pystone.py` does."
msgstr ""

msgid "The :mod:`pyexpat` module now uses version 2.0 of the Expat parser. (Contributed by Trent Mick.)"
msgstr ""

msgid "The :class:`Queue` class provided by the :mod:`Queue` module gained two new methods.  :meth:`join` blocks until all items in the queue have been retrieved and all processing work on the items  have been completed.  Worker threads call the other new method,  :meth:`task_done`, to signal that processing for an item has been completed.  (Contributed by Raymond Hettinger.)"
msgstr ""

msgid "The old :mod:`regex` and :mod:`regsub` modules, which have been  deprecated ever since Python 2.0, have finally been deleted.   Other deleted modules: :mod:`statcache`, :mod:`tzparse`, :mod:`whrandom`."
msgstr ""

msgid "Also deleted: the :file:`lib-old` directory, which includes ancient modules such as :mod:`dircmp` and :mod:`ni`, was removed.  :file:`lib-old` wasn't on the default ``sys.path``, so unless your programs explicitly added the directory to ``sys.path``, this removal shouldn't affect your code."
msgstr ""

msgid "The :mod:`rlcompleter` module is no longer  dependent on importing the :mod:`readline` module and therefore now works on non-Unix platforms. (Patch from Robert Kiendl.)"
msgstr ""

msgid "The :mod:`SimpleXMLRPCServer` and :mod:`DocXMLRPCServer`  classes now have a :attr:`rpc_paths` attribute that constrains XML-RPC operations to a limited set of URL paths; the default is to allow only ``'/'`` and ``'/RPC2'``.  Setting :attr:`rpc_paths` to ``None`` or an empty tuple disables  this path checking."
msgstr ""

msgid "The :mod:`socket` module now supports :const:`AF_NETLINK` sockets on Linux, thanks to a patch from Philippe Biondi.   Netlink sockets are a Linux-specific mechanism for communications between a user-space process and kernel code; an introductory  article about them is at http://www.linuxjournal.com/article/7356. In Python code, netlink addresses are represented as a tuple of 2 integers, ``(pid, group_mask)``."
msgstr ""

msgid "Two new methods on socket objects, :meth:`recv_into(buffer)` and :meth:`recvfrom_into(buffer)`, store the received data in an object  that supports the buffer protocol instead of returning the data as a string.  This means you can put the data directly into an array or a memory-mapped file."
msgstr ""

msgid "Socket objects also gained :meth:`getfamily`, :meth:`gettype`, and :meth:`getproto` accessor methods to retrieve the family, type, and protocol values for the socket."
msgstr ""

msgid "New module: the :mod:`spwd` module provides functions for accessing the shadow password database on systems that support  shadow passwords."
msgstr ""

msgid "The :mod:`struct` is now faster because it  compiles format strings into :class:`Struct` objects with :meth:`pack` and :meth:`unpack` methods.  This is similar to how the :mod:`re` module lets you create compiled regular expression objects.  You can still use the module-level  :func:`pack` and :func:`unpack` functions; they'll create  :class:`Struct` objects and cache them.  Or you can use  :class:`Struct` instances directly::"
msgstr ""

msgid "s = struct.Struct('ih3s')  data = s.pack(1972, 187, 'abc') year, number, name = s.unpack(data)"
msgstr ""

msgid "You can also pack and unpack data to and from buffer objects directly using the :meth:`pack_into(buffer, offset, v1, v2, ...)` and :meth:`unpack_from(buffer, offset)` methods.  This lets you store data directly into an array or a memory- mapped file."
msgstr ""

msgid "(:class:`Struct` objects were implemented by Bob Ippolito at the NeedForSpeed sprint.  Support for buffer objects was added by Martin Blais, also at the NeedForSpeed sprint.)"
msgstr ""

msgid "The Python developers switched from CVS to Subversion during the 2.5 development process.  Information about the exact build version is available as the ``sys.subversion`` variable, a 3-tuple of ``(interpreter-name, branch-name, revision-range)``.  For example, at the time of writing my copy of 2.5 was reporting ``('CPython', 'trunk', '45313:45315')``."
msgstr ""

msgid "This information is also available to C extensions via the :cfunc:`Py_GetBuildInfo` function that returns a  string of build information like this: ``\"trunk:45355:45356M, Apr 13 2006, 07:42:19\"``.   (Contributed by Barry Warsaw.)"
msgstr ""

msgid "Another new function, :func:`sys._current_frames`, returns the current stack frames for all running threads as a dictionary mapping thread identifiers to the topmost stack frame currently active in that thread at the time the function is called.  (Contributed by Tim Peters.)"
msgstr ""

msgid "The :class:`TarFile` class in the :mod:`tarfile` module now has an :meth:`extractall` method that extracts all members from the archive into the current working directory.  It's also possible to set a different directory as the extraction target, and to unpack only a subset of the archive's members."
msgstr ""

msgid "The compression used for a tarfile opened in stream mode can now be autodetected using the mode ``'r|*'``. (Contributed by Lars Gustäbel.)"
msgstr ""

msgid "The :mod:`threading` module now lets you set the stack size used when new threads are created. The :func:`stack_size([*size*])` function returns the currently configured stack size, and supplying the optional *size* parameter sets a new value.  Not all platforms support changing the stack size, but Windows, POSIX threading, and OS/2 all do. (Contributed by Andrew MacIntyre.)"
msgstr ""

msgid "The :mod:`unicodedata` module has been updated to use version 4.1.0 of the Unicode character database.  Version 3.2.0 is required  by some specifications, so it's still available as  :attr:`unicodedata.ucd_3_2_0`."
msgstr ""

msgid "New module: the  :mod:`uuid` module generates  universally unique identifiers (UUIDs) according to :rfc:`4122`.  The RFC defines several different UUID versions that are generated from a starting string, from system properties, or purely randomly.  This module contains a :class:`UUID` class and  functions named :func:`uuid1`, :func:`uuid3`, :func:`uuid4`,  and  :func:`uuid5` to generate different versions of UUID.  (Version 2 UUIDs  are not specified in :rfc:`4122` and are not supported by this module.) ::"
msgstr ""

msgid ">>> import uuid >>> # make a UUID based on the host ID and current time >>> uuid.uuid1() UUID('a8098c1a-f86e-11da-bd1a-00112444be1e')  >>> # make a UUID using an MD5 hash of a namespace UUID and a name >>> uuid.uuid3(uuid.NAMESPACE_DNS, 'python.org') UUID('6fa459ea-ee8a-3ca4-894e-db77e160355e')  >>> # make a random UUID >>> uuid.uuid4() UUID('16fd2706-8baf-433b-82eb-8c7fada847da')  >>> # make a UUID using a SHA-1 hash of a namespace UUID and a name >>> uuid.uuid5(uuid.NAMESPACE_DNS, 'python.org') UUID('886313e1-3b8a-5372-9b90-0c9aee199e5d')"
msgstr ""

msgid "(Contributed by Ka-Ping Yee.)"
msgstr ""

msgid "The :mod:`weakref` module's :class:`WeakKeyDictionary` and :class:`WeakValueDictionary` types gained new methods for iterating over the weak references contained in the dictionary.  :meth:`iterkeyrefs` and :meth:`keyrefs` methods were added to :class:`WeakKeyDictionary`, and :meth:`itervaluerefs` and :meth:`valuerefs` were added to :class:`WeakValueDictionary`.  (Contributed by Fred L. Drake, Jr.)"
msgstr ""

msgid "The :mod:`webbrowser` module received a number of enhancements. It's now usable as a script with ``python -m webbrowser``, taking a URL as the argument; there are a number of switches  to control the behaviour (:option:`-n` for a new browser window,  :option:`-t` for a new tab).  New module-level functions, :func:`open_new` and :func:`open_new_tab`, were added  to support this.  The module's :func:`open` function supports an additional feature, an *autoraise* parameter that signals whether to raise the open window when possible. A number of additional browsers were added to the supported list such as Firefox, Opera, Konqueror, and elinks.  (Contributed by Oleg Broytmann and Georg Brandl.)"
msgstr ""

msgid "The :mod:`xmlrpclib` module now supports returning  :class:`datetime` objects for the XML-RPC date type.  Supply  ``use_datetime=True`` to the :func:`loads` function or the :class:`Unmarshaller` class to enable this feature. (Contributed by Skip Montanaro.)"
msgstr ""

msgid "The :mod:`zipfile` module now supports the ZIP64 version of the  format, meaning that a .zip archive can now be larger than 4 GiB and can contain individual files larger than 4 GiB.  (Contributed by Ronald Oussoren.)"
msgstr ""

msgid "The :mod:`zlib` module's :class:`Compress` and :class:`Decompress` objects now support a :meth:`copy` method that makes a copy of the  object's internal state and returns a new  :class:`Compress` or :class:`Decompress` object. (Contributed by Chris AtLee.)"
msgstr ""

msgid "The ctypes package"
msgstr ""

msgid "The :mod:`ctypes` package, written by Thomas Heller, has been added  to the standard library.  :mod:`ctypes` lets you call arbitrary functions  in shared libraries or DLLs.  Long-time users may remember the :mod:`dl` module, which provides functions for loading shared libraries and calling functions in them. The :mod:`ctypes` package is much fancier."
msgstr ""

msgid "To load a shared library or DLL, you must create an instance of the :class:`CDLL` class and provide the name or path of the shared library or DLL. Once that's done, you can call arbitrary functions by accessing them as attributes of the :class:`CDLL` object.   ::"
msgstr ""

msgid "import ctypes  libc = ctypes.CDLL('libc.so.6') result = libc.printf(\"Line of output\\n\")"
msgstr ""

msgid "Type constructors for the various C types are provided: :func:`c_int`, :func:`c_float`, :func:`c_double`, :func:`c_char_p` (equivalent to :ctype:`char \\*`), and so forth.  Unlike Python's types, the C versions are all mutable; you can assign to their :attr:`value` attribute to change the wrapped value.  Python integers and strings will be automatically converted to the corresponding C types, but for other types you  must call the correct type constructor.  (And I mean *must*;  getting it wrong will often result in the interpreter crashing with a segmentation fault.)"
msgstr ""

msgid "You shouldn't use :func:`c_char_p` with a Python string when the C function will be modifying the memory area, because Python strings are  supposed to be immutable; breaking this rule will cause puzzling bugs.  When you need a modifiable memory area, use :func:`create_string_buffer`::"
msgstr ""

msgid "s = \"this is a string\" buf = ctypes.create_string_buffer(s) libc.strfry(buf)"
msgstr ""

msgid "C functions are assumed to return integers, but you can set the :attr:`restype` attribute of the function object to  change this::"
msgstr ""

msgid ">>> libc.atof('2.71828') -1783957616 >>> libc.atof.restype = ctypes.c_double >>> libc.atof('2.71828') 2.71828"
msgstr ""

msgid ":mod:`ctypes` also provides a wrapper for Python's C API  as the ``ctypes.pythonapi`` object.  This object does *not*  release the global interpreter lock before calling a function, because the lock must be held when calling into the interpreter's code.   There's a :class:`py_object()` type constructor that will create a  :ctype:`PyObject \\*` pointer.  A simple usage::"
msgstr ""

msgid "import ctypes  d = {} ctypes.pythonapi.PyObject_SetItem(ctypes.py_object(d),           ctypes.py_object(\"abc\"),  ctypes.py_object(1)) # d is now {'abc', 1}."
msgstr ""

msgid "Don't forget to use :class:`py_object()`; if it's omitted you end  up with a segmentation fault."
msgstr ""

msgid ":mod:`ctypes` has been around for a while, but people still write  and distribution hand-coded extension modules because you can't rely on :mod:`ctypes` being present. Perhaps developers will begin to write  Python wrappers atop a library accessed through :mod:`ctypes` instead of extension modules, now that :mod:`ctypes` is included with core Python."
msgstr ""

msgid "The ctypes web page, with a tutorial, reference, and FAQ."
msgstr ""

msgid "The documentation  for the :mod:`ctypes` module."
msgstr ""

msgid "The ElementTree package"
msgstr ""

msgid "A subset of Fredrik Lundh's ElementTree library for processing XML has been added to the standard library as :mod:`xml.etree`.  The available modules are :mod:`ElementTree`, :mod:`ElementPath`, and :mod:`ElementInclude` from ElementTree 1.2.6.    The :mod:`cElementTree` accelerator module is also included."
msgstr ""

msgid "The rest of this section will provide a brief overview of using ElementTree. Full documentation for ElementTree is available at http://effbot.org/zone/element-index.htm."
msgstr ""

msgid "ElementTree represents an XML document as a tree of element nodes. The text content of the document is stored as the :attr:`.text` and :attr:`.tail` attributes of  (This is one of the major differences between ElementTree and the Document Object Model; in the DOM there are many different types of node, including :class:`TextNode`.)"
msgstr ""

msgid "The most commonly used parsing function is :func:`parse`, that takes either a string (assumed to contain a filename) or a file-like object and returns an :class:`ElementTree` instance::"
msgstr ""

msgid "from xml.etree import ElementTree as ET  tree = ET.parse('ex-1.xml')  feed = urllib.urlopen(           'http://planet.python.org/rss10.xml') tree = ET.parse(feed)"
msgstr ""

msgid "Once you have an :class:`ElementTree` instance, you can call its :meth:`getroot` method to get the root :class:`Element` node."
msgstr ""

msgid "There's also an :func:`XML` function that takes a string literal and returns an :class:`Element` node (not an :class:`ElementTree`).   This function provides a tidy way to incorporate XML fragments, approaching the convenience of an XML literal::"
msgstr ""

msgid "svg = ET.XML(\"\"\"<svg width=\"10px\" version=\"1.0\">              </svg>\"\"\") svg.set('height', '320px') svg.append(elem1)"
msgstr ""

msgid "Each XML element supports some dictionary-like and some list-like access methods.  Dictionary-like operations are used to access attribute values, and list-like operations are used to access child nodes."
msgstr ""

msgid "Result"
msgstr ""

msgid "``elem[n]``"
msgstr ""

msgid "Returns n'th child element."
msgstr ""

msgid "``elem[m:n]``"
msgstr ""

msgid "Returns list of m'th through n'th child elements."
msgstr ""

msgid "``len(elem)``"
msgstr ""

msgid "Returns number of child elements."
msgstr ""

msgid "``list(elem)``"
msgstr ""

msgid "Returns list of child elements."
msgstr ""

msgid "``elem.append(elem2)``"
msgstr ""

msgid "Adds *elem2* as a child."
msgstr ""

msgid "``elem.insert(index, elem2)``"
msgstr ""

msgid "Inserts *elem2* at the specified location."
msgstr ""

msgid "``del elem[n]``"
msgstr ""

msgid "Deletes n'th child element."
msgstr ""

msgid "``elem.keys()``"
msgstr ""

msgid "Returns list of attribute names."
msgstr ""

msgid "``elem.get(name)``"
msgstr ""

msgid "Returns value of attribute *name*."
msgstr ""

msgid "``elem.set(name, value)``"
msgstr ""

msgid "Sets new value for attribute *name*."
msgstr ""

msgid "``elem.attrib``"
msgstr ""

msgid "Retrieves the dictionary containing attributes."
msgstr ""

msgid "``del elem.attrib[name]``"
msgstr ""

msgid "Deletes attribute *name*."
msgstr ""

msgid "Comments and processing instructions are also represented as :class:`Element` nodes.  To check if a node is a comment or processing instructions::"
msgstr ""

msgid "if elem.tag is ET.Comment:     ... elif elem.tag is ET.ProcessingInstruction:     ..."
msgstr ""

msgid "To generate XML output, you should call the :meth:`ElementTree.write` method. Like :func:`parse`, it can take either a string or a file-like object::"
msgstr ""

msgid "# Encoding is US-ASCII tree.write('output.xml')  # Encoding is UTF-8 f = open('output.xml', 'w') tree.write(f, encoding='utf-8')"
msgstr ""

msgid "(Caution: the default encoding used for output is ASCII.  For general XML work, where an element's name may contain arbitrary Unicode characters, ASCII isn't a very useful encoding because it will raise an exception if an element's name contains any characters with values greater than 127.  Therefore, it's best to specify a different encoding such as UTF-8 that can handle any Unicode character.)"
msgstr ""

msgid "This section is only a partial description of the ElementTree interfaces. Please read the package's official documentation for more details."
msgstr ""

msgid "Official documentation for ElementTree."
msgstr ""

msgid "The hashlib package"
msgstr ""

msgid "A new :mod:`hashlib` module, written by Gregory P. Smith,  has been added to replace the :mod:`md5` and :mod:`sha` modules.  :mod:`hashlib` adds support for additional secure hashes (SHA-224, SHA-256, SHA-384, and SHA-512). When available, the module uses OpenSSL for fast platform optimized implementations of algorithms."
msgstr ""

msgid "The old :mod:`md5` and :mod:`sha` modules still exist as wrappers around hashlib to preserve backwards compatibility.  The new module's interface is very close to that of the old modules, but not identical. The most significant difference is that the constructor functions for creating new hashing objects are named differently. ::"
msgstr ""

msgid "# Old versions h = md5.md5() h = md5.new()  # New version h = hashlib.md5()  # Old versions h = sha.sha() h = sha.new()  # New version h = hashlib.sha1()  # Hash that weren't previously available h = hashlib.sha224() h = hashlib.sha256() h = hashlib.sha384() h = hashlib.sha512()  # Alternative form h = hashlib.new('md5')          # Provide algorithm as a string"
msgstr ""

msgid "Once a hash object has been created, its methods are the same as before: :meth:`update(string)` hashes the specified string into the  current digest state, :meth:`digest` and :meth:`hexdigest` return the digest value as a binary string or a string of hex digits, and :meth:`copy` returns a new hashing object with the same digest state."
msgstr ""

msgid "The documentation  for the :mod:`hashlib` module."
msgstr ""

msgid "The sqlite3 package"
msgstr ""

msgid "The pysqlite module (http://www.pysqlite.org), a wrapper for the SQLite embedded database, has been added to the standard library under the package name :mod:`sqlite3`."
msgstr ""

msgid "SQLite is a C library that provides a lightweight disk-based database that doesn't require a separate server process and allows accessing the database using a nonstandard variant of the SQL query language. Some applications can use SQLite for internal data storage.  It's also possible to prototype an application using SQLite and then port the code to a larger database such as PostgreSQL or Oracle."
msgstr ""

msgid "pysqlite was written by Gerhard Häring and provides a SQL interface compliant with the DB-API 2.0 specification described by :pep:`249`."
msgstr ""

msgid "If you're compiling the Python source yourself, note that the source tree doesn't include the SQLite code, only the wrapper module. You'll need to have the SQLite libraries and headers installed before compiling Python, and the build process will compile the module when the necessary headers are available."
msgstr ""

msgid "To use the module, you must first create a :class:`Connection` object that represents the database.  Here the data will be stored in the :file:`/tmp/example` file::"
msgstr ""

msgid "conn = sqlite3.connect('/tmp/example')"
msgstr ""

msgid "You can also supply the special name ``:memory:`` to create a database in RAM."
msgstr ""

msgid "Once you have a :class:`Connection`, you can create a :class:`Cursor`  object and call its :meth:`execute` method to perform SQL commands::"
msgstr ""

msgid "c = conn.cursor()  # Create table c.execute('''create table stocks (date text, trans text, symbol text,  qty real, price real)''')  # Insert a row of data c.execute(\"\"\"insert into stocks           values ('2006-01-05','BUY','RHAT',100,35.14)\"\"\")"
msgstr ""

msgid "Usually your SQL operations will need to use values from Python variables.  You shouldn't assemble your query using Python's string operations because doing so is insecure; it makes your program vulnerable to an SQL injection attack."
msgstr ""

msgid "Instead, use the DB-API's parameter substitution.  Put ``?`` as a placeholder wherever you want to use a value, and then provide a tuple of values as the second argument to the cursor's :meth:`execute` method.  (Other database modules may use a different placeholder, such as ``%s`` or ``:1``.) For example::"
msgstr ""

msgid "# Never do this -- insecure! symbol = 'IBM' c.execute(\"... where symbol = '%s'\" % symbol)  # Do this instead t = (symbol,) c.execute('select * from stocks where symbol=?', t)  # Larger example for t in (('2006-03-28', 'BUY', 'IBM', 1000, 45.00),           ('2006-04-05', 'BUY', 'MSOFT', 1000, 72.00),           ('2006-04-06', 'SELL', 'IBM', 500, 53.00),          ):     c.execute('insert into stocks values (?,?,?,?,?)', t)"
msgstr ""

msgid "To retrieve data after executing a SELECT statement, you can either  treat the cursor as an iterator, call the cursor's :meth:`fetchone` method to retrieve a single matching row,  or call :meth:`fetchall` to get a list of the matching rows."
msgstr ""

msgid "This example uses the iterator form::"
msgstr ""

msgid ">>> c = conn.cursor() >>> c.execute('select * from stocks order by price') >>> for row in c: ...    print row ... (u'2006-01-05', u'BUY', u'RHAT', 100, 35.140000000000001) (u'2006-03-28', u'BUY', u'IBM', 1000, 45.0) (u'2006-04-06', u'SELL', u'IBM', 500, 53.0) (u'2006-04-05', u'BUY', u'MSOFT', 1000, 72.0) >>>"
msgstr ""

msgid "For more information about the SQL dialect supported by SQLite, see http://www.sqlite.org."
msgstr ""

msgid "The pysqlite web page."
msgstr ""

msgid "The SQLite web page; the documentation describes the syntax and the available data types for the supported SQL dialect."
msgstr ""

msgid "The documentation  for the :mod:`sqlite3` module."
msgstr ""

msgid "PEP written by Marc-André Lemburg."
msgstr ""

msgid "The wsgiref package"
msgstr ""

msgid "The Web Server Gateway Interface (WSGI) v1.0 defines a standard interface between web servers and Python web applications and is described in :pep:`333`. The :mod:`wsgiref` package is a reference implementation of the WSGI specification."
msgstr ""

msgid "The package includes a basic HTTP server that will run a WSGI application; this server is useful for debugging but isn't intended for  production use.  Setting up a server takes only a few lines of code::"
msgstr ""

msgid "from wsgiref import simple_server  wsgi_app = ...  host = '' port = 8000 httpd = simple_server.make_server(host, port, wsgi_app) httpd.serve_forever()"
msgstr ""

msgid "A central web site for WSGI-related resources."
msgstr ""

msgid "PEP written by Phillip J. Eby."
msgstr ""

msgid "The Python source tree was converted from CVS to Subversion,  in a complex migration procedure that was supervised and flawlessly carried out by Martin von Löwis.  The procedure was developed as :pep:`347`."
msgstr ""

msgid "Coverity, a company that markets a source code analysis tool called Prevent, provided the results of their examination of the Python source code.  The analysis found about 60 bugs that  were quickly fixed.  Many of the bugs were refcounting problems, often occurring in error-handling code.  See http://scan.coverity.com for the statistics."
msgstr ""

msgid "The largest change to the C API came from :pep:`353`, which modifies the interpreter to use a :ctype:`Py_ssize_t` type definition instead of :ctype:`int`.  See the earlier section :ref:`pep-353` for a discussion of this change."
msgstr ""

msgid "The design of the bytecode compiler has changed a great deal,  no longer generating bytecode by traversing the parse tree.  Instead the parse tree is converted to an abstract syntax tree (or AST), and it is  the abstract syntax tree that's traversed to produce the bytecode."
msgstr ""

msgid "It's possible for Python code to obtain AST objects by using the :func:`compile` built-in and specifying ``_ast.PyCF_ONLY_AST`` as the value of the  *flags* parameter::"
msgstr ""

msgid "from _ast import PyCF_ONLY_AST ast = compile(\"\"\"a=0 for i in range(10):     a += i \"\"\", \"<string>\", 'exec', PyCF_ONLY_AST)  assignment = ast.body[0] for_loop = ast.body[1]"
msgstr ""

msgid "No official documentation has been written for the AST code yet, but :pep:`339` discusses the design.  To start learning about the code, read the definition of the various AST nodes in :file:`Parser/Python.asdl`.  A Python script reads this file and generates a set of C structure definitions in :file:`Include/Python-ast.h`.  The :cfunc:`PyParser_ASTFromString` and :cfunc:`PyParser_ASTFromFile`, defined in :file:`Include/pythonrun.h`, take Python source as input and return the root of an AST representing the contents. This AST can then be turned into a code object by :cfunc:`PyAST_Compile`.  For more information, read the source code, and then ask questions on python-dev."
msgstr ""

msgid "The AST code was developed under Jeremy Hylton's management, and implemented by (in alphabetical order) Brett Cannon, Nick Coghlan, Grant Edwards, John Ehresman, Kurt Kaiser, Neal Norwitz, Tim Peters, Armin Rigo, and Neil Schemenauer, plus the participants in a number of AST sprints at conferences such as PyCon."
msgstr ""

msgid "Evan Jones's patch to obmalloc, first described in a talk at PyCon DC 2005, was applied.  Python 2.4 allocated small objects in 256K-sized arenas, but never freed arenas.  With this patch, Python will free arenas when they're empty.  The net effect is that on some platforms, when you allocate many objects, Python's memory usage may actually drop when you delete them and the memory may be returned to the operating system.  (Implemented by Evan Jones, and reworked by Tim Peters.)"
msgstr ""

msgid "Note that this change means extension modules must be more careful when allocating memory.  Python's API has many different functions for allocating memory that are grouped into families.  For example, :cfunc:`PyMem_Malloc`, :cfunc:`PyMem_Realloc`, and :cfunc:`PyMem_Free` are one family that allocates raw memory, while :cfunc:`PyObject_Malloc`, :cfunc:`PyObject_Realloc`, and :cfunc:`PyObject_Free` are another family that's supposed to be used for creating Python objects."
msgstr ""

msgid "Previously these different families all reduced to the platform's :cfunc:`malloc` and :cfunc:`free` functions.  This meant  it didn't matter if you got things wrong and allocated memory with the :cfunc:`PyMem` function but freed it with the :cfunc:`PyObject` function.  With 2.5's changes to obmalloc, these families now do different things and mismatches will probably result in a segfault.  You should carefully test your C extension modules with Python 2.5."
msgstr ""

msgid "The built-in set types now have an official C API.  Call :cfunc:`PySet_New` and :cfunc:`PyFrozenSet_New` to create a new set, :cfunc:`PySet_Add` and :cfunc:`PySet_Discard` to add and remove elements, and :cfunc:`PySet_Contains` and :cfunc:`PySet_Size` to examine the set's state. (Contributed by Raymond Hettinger.)"
msgstr ""

msgid "C code can now obtain information about the exact revision of the Python interpreter by calling the  :cfunc:`Py_GetBuildInfo` function that returns a string of build information like this: ``\"trunk:45355:45356M, Apr 13 2006, 07:42:19\"``.   (Contributed by Barry Warsaw.)"
msgstr ""

msgid "Two new macros can be used to indicate C functions that are local to the current file so that a faster calling convention can be used. :cfunc:`Py_LOCAL(type)` declares the function as returning a value of the specified *type* and uses a fast-calling qualifier. :cfunc:`Py_LOCAL_INLINE(type)` does the same thing and also requests the function be inlined.  If :cfunc:`PY_LOCAL_AGGRESSIVE` is defined before :file:`python.h` is included, a set of more aggressive optimizations are enabled for the module; you should benchmark the results to find out if these optimizations actually make the code faster.  (Contributed by Fredrik Lundh at the NeedForSpeed sprint.)"
msgstr ""

msgid ":cfunc:`PyErr_NewException(name, base, dict)` can now accept a tuple of base classes as its *base* argument.  (Contributed by Georg Brandl.)"
msgstr ""

msgid "The :cfunc:`PyErr_Warn` function for issuing warnings is now deprecated in favour of :cfunc:`PyErr_WarnEx(category, message, stacklevel)` which lets you specify the number of stack frames separating this function and the caller.  A *stacklevel* of 1 is the function calling :cfunc:`PyErr_WarnEx`, 2 is the function above that, and so forth.  (Added by Neal Norwitz.)"
msgstr ""

msgid "The CPython interpreter is still written in C, but  the code can now be compiled with a C++ compiler without errors.   (Implemented by Anthony Baxter, Martin von Löwis, Skip Montanaro.)"
msgstr ""

msgid "The :cfunc:`PyRange_New` function was removed.  It was never documented, never used in the core code, and had dangerously lax error checking.  In the unlikely case that your extensions were using it, you can replace it by something like the following::"
msgstr ""

msgid "range = PyObject_CallFunction((PyObject*) &PyRange_Type, \"lll\",                               start, stop, step);"
msgstr ""

msgid "MacOS X (10.3 and higher): dynamic loading of modules now uses the :cfunc:`dlopen` function instead of MacOS-specific functions."
msgstr ""

msgid "MacOS X: an :option:`--enable-universalsdk` switch was added to the :program:`configure` script that compiles the interpreter as a universal binary able to run on both PowerPC and Intel processors. (Contributed by Ronald Oussoren; :issue:`2573`.)"
msgstr ""

msgid "Windows: :file:`.dll` is no longer supported as a filename extension for extension modules.  :file:`.pyd` is now the only filename extension that will be searched for."
msgstr ""

msgid "Porting to Python 2.5"
msgstr ""

msgid "ASCII is now the default encoding for modules.  It's now  a syntax error if a module contains string literals with 8-bit characters but doesn't have an encoding declaration.  In Python 2.4 this triggered a warning, not a syntax error."
msgstr ""

msgid "Previously, the :attr:`gi_frame` attribute of a generator was always a frame object.  Because of the :pep:`342` changes described in section :ref:`pep-342`, it's now possible for :attr:`gi_frame` to be ``None``."
msgstr ""

msgid "A new warning, :class:`UnicodeWarning`, is triggered when  you attempt to compare a Unicode string and an 8-bit string that can't be converted to Unicode using the default ASCII encoding.  Previously such comparisons would raise a :class:`UnicodeDecodeError` exception."
msgstr ""

msgid "Library: the :mod:`csv` module is now stricter about multi-line quoted fields. If your files contain newlines embedded within fields, the input should be split into lines in a manner which preserves the newline characters."
msgstr ""

msgid "Library: the :mod:`locale` module's  :func:`format` function's would previously  accept any string as long as no more than one %char specifier appeared.  In Python 2.5, the argument must be exactly one %char specifier with no surrounding text."
msgstr ""

msgid "Library: The :mod:`pickle` and :mod:`cPickle` modules no longer accept a return value of ``None`` from the :meth:`__reduce__` method; the method must return a tuple of arguments instead.  The modules also no longer accept the deprecated *bin* keyword parameter."
msgstr ""

msgid "Library: The :mod:`SimpleXMLRPCServer` and :mod:`DocXMLRPCServer`  classes now have a :attr:`rpc_paths` attribute that constrains XML-RPC operations to a limited set of URL paths; the default is to allow only ``'/'`` and ``'/RPC2'``. Setting  :attr:`rpc_paths` to ``None`` or an empty tuple disables  this path checking."
msgstr ""

msgid "C API: Many functions now use :ctype:`Py_ssize_t`  instead of :ctype:`int` to allow processing more data on 64-bit machines.  Extension code may need to make the same change to avoid warnings and to support 64-bit machines.  See the earlier section :ref:`pep-353` for a discussion of this change."
msgstr ""

msgid "C API:  The obmalloc changes mean that  you must be careful to not mix usage of the :cfunc:`PyMem_\\*` and :cfunc:`PyObject_\\*` families of functions. Memory allocated with  one family's :cfunc:`\\*_Malloc` must be  freed with the corresponding family's :cfunc:`\\*_Free` function."
msgstr ""

msgid "The author would like to thank the following people for offering suggestions, corrections and assistance with various drafts of this article: Georg Brandl, Nick Coghlan, Phillip J. Eby, Lars Gustäbel, Raymond Hettinger, Ralf W. Grosse- Kunstleve, Kent Johnson, Iain Lowe, Martin von Löwis, Fredrik Lundh, Andrew McNamara, Skip Montanaro, Gustavo Niemeyer, Paul Prescod, James Pryor, Mike Rovner, Scott Weikart, Barry Warsaw, Thomas Wouters."
msgstr ""

msgid "What's New in Python 2.6"
msgstr ""

msgid "A.M. Kuchling (amk at amk.ca)"
msgstr ""

msgid "Release"
msgstr ""

msgid "|release|"
msgstr ""

msgid "Date"
msgstr ""

msgid "|today|"
msgstr ""

msgid "This article explains the new features in Python 2.6, released on October 1 2008.  The release schedule is described in :pep:`361`."
msgstr ""

msgid "The major theme of Python 2.6 is preparing the migration path to Python 3.0, a major redesign of the language.  Whenever possible, Python 2.6 incorporates new features and syntax from 3.0 while remaining compatible with existing code by not removing older features or syntax.  When it's not possible to do that, Python 2.6 tries to do what it can, adding compatibility functions in a :mod:`future_builtins` module and a :option:`-3` switch to warn about usages that will become unsupported in 3.0."
msgstr ""

msgid "Some significant new packages have been added to the standard library, such as the :mod:`multiprocessing` and :mod:`json` modules, but there aren't many new features that aren't related to Python 3.0 in some way."
msgstr ""

msgid "Python 2.6 also sees a number of improvements and bugfixes throughout the source.  A search through the change logs finds there were 259 patches applied and 612 bugs fixed between Python 2.5 and 2.6.  Both figures are likely to be underestimates."
msgstr ""

msgid "This article doesn't attempt to provide a complete specification of the new features, but instead provides a convenient overview.  For full details, you should refer to the documentation for Python 2.6. If you want to understand the rationale for the design and implementation, refer to the PEP for a particular new feature. Whenever possible, \"What's New in Python\" links to the bug/patch item for each change."
msgstr ""

msgid "Python 3.0"
msgstr ""

msgid "The development cycle for Python versions 2.6 and 3.0 was synchronized, with the alpha and beta releases for both versions being made on the same days.  The development of 3.0 has influenced many features in 2.6."
msgstr ""

msgid "Python 3.0 is a far-ranging redesign of Python that breaks compatibility with the 2.x series.  This means that existing Python code will need some conversion in order to run on Python 3.0.  However, not all the changes in 3.0 necessarily break compatibility.  In cases where new features won't cause existing code to break, they've been backported to 2.6 and are described in this document in the appropriate place.  Some of the 3.0-derived features are:"
msgstr ""

msgid "A :meth:`__complex__` method for converting objects to a complex number."
msgstr ""

msgid "Alternate syntax for catching exceptions: ``except TypeError as exc``."
msgstr ""

msgid "The addition of :func:`functools.reduce` as a synonym for the built-in :func:`reduce` function."
msgstr ""

msgid "Python 3.0 adds several new built-in functions and changes the semantics of some existing builtins.  Functions that are new in 3.0 such as :func:`bin` have simply been added to Python 2.6, but existing builtins haven't been changed; instead, the :mod:`future_builtins` module has versions with the new 3.0 semantics.  Code written to be compatible with 3.0 can do ``from future_builtins import hex, map`` as necessary."
msgstr ""

msgid "A new command-line switch, :option:`-3`, enables warnings about features that will be removed in Python 3.0.  You can run code with this switch to see how much work will be necessary to port code to 3.0.  The value of this switch is available to Python code as the boolean variable :data:`sys.py3kwarning`, and to C extension code as :cdata:`Py_Py3kWarningFlag`."
msgstr ""

msgid "The 3xxx series of PEPs, which contains proposals for Python 3.0. :pep:`3000` describes the development process for Python 3.0. Start with :pep:`3100` that describes the general goals for Python 3.0, and then explore the higher-numbered PEPS that propose specific features."
msgstr ""

msgid "Changes to the Development Process"
msgstr ""

msgid "While 2.6 was being developed, the Python development process underwent two significant changes: we switched from SourceForge's issue tracker to a customized Roundup installation, and the documentation was converted from LaTeX to reStructuredText."
msgstr ""

msgid "New Issue Tracker: Roundup"
msgstr ""

msgid "For a long time, the Python developers had been growing increasingly annoyed by SourceForge's bug tracker.  SourceForge's hosted solution doesn't permit much customization; for example, it wasn't possible to customize the life cycle of issues."
msgstr ""

msgid "The infrastructure committee of the Python Software Foundation therefore posted a call for issue trackers, asking volunteers to set up different products and import some of the bugs and patches from SourceForge.  Four different trackers were examined: `Jira <http://www.atlassian.com/software/jira/>`__, `Launchpad <http://www.launchpad.net>`__, `Roundup <http://roundup.sourceforge.net/>`__, and `Trac <http://trac.edgewall.org/>`__. The committee eventually settled on Jira and Roundup as the two candidates.  Jira is a commercial product that offers no-cost hosted instances to free-software projects; Roundup is an open-source project that requires volunteers to administer it and a server to host it."
msgstr ""

msgid "After posting a call for volunteers, a new Roundup installation was set up at http://bugs.python.org.  One installation of Roundup can host multiple trackers, and this server now also hosts issue trackers for Jython and for the Python web site.  It will surely find other uses in the future.  Where possible, this edition of \"What's New in Python\" links to the bug/patch item for each change."
msgstr ""

msgid "Hosting of the Python bug tracker is kindly provided by `Upfront Systems <http://www.upfrontsystems.co.za/>`__ of Stellenbosch, South Africa.  Martin von Loewis put a lot of effort into importing existing bugs and patches from SourceForge; his scripts for this import operation are at http://svn.python.org/view/tracker/importer/ and may be useful to other projects wishing to move from SourceForge to Roundup."
msgstr ""

msgid "The Python bug tracker."
msgstr ""

msgid "The Jython bug tracker."
msgstr ""

msgid "Roundup downloads and documentation."
msgstr ""

msgid "Martin von Loewis's conversion scripts."
msgstr ""

msgid "New Documentation Format: reStructuredText Using Sphinx"
msgstr ""

msgid "The Python documentation was written using LaTeX since the project started around 1989.  In the 1980s and early 1990s, most documentation was printed out for later study, not viewed online. LaTeX was widely used because it provided attractive printed output while remaining straightforward to write once the basic rules of the markup were learned."
msgstr ""

msgid "Today LaTeX is still used for writing publications destined for printing, but the landscape for programming tools has shifted.  We no longer print out reams of documentation; instead, we browse through it online and HTML has become the most important format to support. Unfortunately, converting LaTeX to HTML is fairly complicated and Fred L. Drake Jr., the long-time Python documentation editor, spent a lot of time maintaining the conversion process.  Occasionally people would suggest converting the documentation into SGML and later XML, but performing a good conversion is a major task and no one ever committed the time required to finish the job."
msgstr ""

msgid "During the 2.6 development cycle, Georg Brandl put a lot of effort into building a new toolchain for processing the documentation.  The resulting package is called Sphinx, and is available from http://sphinx.pocoo.org/."
msgstr ""

msgid "Sphinx concentrates on HTML output, producing attractively styled and modern HTML; printed output is still supported through conversion to LaTeX.  The input format is reStructuredText, a markup syntax supporting custom extensions and directives that is commonly used in the Python community."
msgstr ""

msgid "Sphinx is a standalone package that can be used for writing, and almost two dozen other projects (`listed on the Sphinx web site <http://sphinx.pocoo.org/examples.html>`__) have adopted Sphinx as their documentation tool."
msgstr ""

msgid "Describes how to write for Python's documentation."
msgstr ""

msgid "Documentation and code for the Sphinx toolchain."
msgstr ""

msgid "The underlying reStructuredText parser and toolset."
msgstr ""

msgid "The previous version, Python 2.5, added the ':keyword:`with`' statement as an optional feature, to be enabled by a ``from __future__ import with_statement`` directive.  In 2.6 the statement no longer needs to be specially enabled; this means that :keyword:`with` is now always a keyword.  The rest of this section is a copy of the corresponding section from the \"What's New in Python 2.5\" document; if you're familiar with the ':keyword:`with`' statement from Python 2.5, you can skip this section."
msgstr ""

msgid "The ':keyword:`with`' statement is a control-flow structure whose basic structure is::"
msgstr ""

msgid "The expression is evaluated, and it should result in an object that supports the context management protocol (that is, has :meth:`__enter__` and :meth:`__exit__` methods)."
msgstr ""

msgid "The :func:`localcontext` function in the :mod:`decimal` module makes it easy to save and restore the current decimal context, which encapsulates the desired precision and rounding characteristics for computations::"
msgstr ""

msgid "The context manager's :meth:`__enter__` method is called.  The value returned is assigned to *VAR*.  If no ``as VAR`` clause is present, the value is simply discarded."
msgstr ""

msgid "If *BLOCK* raises an exception, the context manager's :meth:`__exit__` method is called with three arguments, the exception details (``type, value, traceback``, the same values returned by :func:`sys.exc_info`, which can also be ``None`` if no exception occurred).  The method's return value controls whether an exception is re-raised: any false value re-raises the exception, and ``True`` will result in suppressing it.  You'll only rarely want to suppress the exception, because if you do the author of the code containing the ':keyword:`with`' statement will never realize anything went wrong."
msgstr ""

msgid "class DatabaseConnection:     # Database interface     def cursor(self):         \"Returns a cursor object and starts a new transaction\"     def commit(self):         \"Commits current transaction\"     def rollback(self):         \"Rolls back current transaction\""
msgstr ""

msgid "class DatabaseConnection:     ...     def __enter__(self):         # Code to start a new transaction         cursor = self.cursor()         return cursor"
msgstr ""

msgid "class DatabaseConnection:     ...     def __exit__(self, type, value, tb):         if tb is None:             # No exception, so commit             self.commit()         else:             # Exception occurred, so rollback.             self.rollback()             # return False"
msgstr ""

msgid "The :mod:`contextlib` module provides some functions and a decorator that are useful when writing objects for use with the ':keyword:`with`' statement."
msgstr ""

msgid "Using this decorator, our database example from the previous section could be written as::"
msgstr ""

msgid "from contextlib import contextmanager  @contextmanager def db_transaction(connection):     cursor = connection.cursor()     try:         yield cursor     except:         connection.rollback()         raise     else:         connection.commit()  db = DatabaseConnection() with db_transaction(db) as cursor:     ..."
msgstr ""

msgid "The :mod:`contextlib` module also has a ``nested(mgr1, mgr2, ...)`` function that combines a number of context managers so you don't need to write nested ':keyword:`with`' statements.  In this example, the single ':keyword:`with`' statement both starts a database transaction and acquires a thread lock::"
msgstr ""

msgid "Finally, the :func:`closing` function returns its argument so that it can be bound to a variable, and calls the argument's ``.close()`` method at the end of the block. ::"
msgstr ""

msgid "PEP 366: Explicit Relative Imports From a Main Module"
msgstr ""

msgid "Python's :option:`-m` switch allows running a module as a script. When you ran a module that was located inside a package, relative imports didn't work correctly."
msgstr ""

msgid "The fix for Python 2.6 adds a :attr:`__package__` attribute to modules.  When this attribute is present, relative imports will be relative to the value of this attribute instead of the :attr:`__name__` attribute."
msgstr ""

msgid "PEP 302-style importers can then set :attr:`__package__` as necessary. The :mod:`runpy` module that implements the :option:`-m` switch now does this, so relative imports will now work correctly in scripts running from inside a package."
msgstr ""

msgid "PEP 370: Per-user ``site-packages`` Directory"
msgstr ""

msgid "When you run Python, the module search path ``sys.path`` usually includes a directory whose path ends in ``\"site-packages\"``.  This directory is intended to hold locally-installed packages available to all users using a machine or a particular site installation."
msgstr ""

msgid "Python 2.6 introduces a convention for user-specific site directories. The directory varies depending on the platform:"
msgstr ""

msgid "Unix and Mac OS X: :file:`~/.local/`"
msgstr ""

msgid "Windows: :file:`%APPDATA%/Python`"
msgstr ""

msgid "Within this directory, there will be version-specific subdirectories, such as :file:`lib/python2.6/site-packages` on Unix/Mac OS and :file:`Python26/site-packages` on Windows."
msgstr ""

msgid "If you don't like the default directory, it can be overridden by an environment variable.  :envvar:`PYTHONUSERBASE` sets the root directory used for all Python versions supporting this feature.  On Windows, the directory for application-specific data can be changed by setting the :envvar:`APPDATA` environment variable.  You can also modify the :file:`site.py` file for your Python installation."
msgstr ""

msgid "The feature can be disabled entirely by running Python with the :option:`-s` option or setting the :envvar:`PYTHONNOUSERSITE` environment variable."
msgstr ""

msgid "PEP written and implemented by Christian Heimes."
msgstr ""

msgid "PEP 371: The ``multiprocessing`` Package"
msgstr ""

msgid "The new :mod:`multiprocessing` package lets Python programs create new processes that will perform a computation and return a result to the parent.  The parent and child processes can communicate using queues and pipes, synchronize their operations using locks and semaphores, and can share simple arrays of data."
msgstr ""

msgid "The :mod:`multiprocessing` module started out as an exact emulation of the :mod:`threading` module using processes instead of threads.  That goal was discarded along the path to Python 2.6, but the general approach of the module is still similar.  The fundamental class is the :class:`Process`, which is passed a callable object and a collection of arguments.  The :meth:`start` method sets the callable running in a subprocess, after which you can call the :meth:`is_alive` method to check whether the subprocess is still running and the :meth:`join` method to wait for the process to exit."
msgstr ""

msgid "Here's a simple example where the subprocess will calculate a factorial.  The function doing the calculation is written strangely so that it takes significantly longer when the input argument is a multiple of 4."
msgstr ""

msgid "import time from multiprocessing import Process, Queue   def factorial(queue, N):     \"Compute a factorial.\"     # If N is a multiple of 4, this function will take much longer.     if (N % 4) == 0:         time.sleep(.05 * N/4)      # Calculate the result     fact = 1L     for i in range(1, N+1):         fact = fact * i      # Put the result on the queue     queue.put(fact)  if __name__ == '__main__':     queue = Queue()      N = 5      p = Process(target=factorial, args=(queue, N))     p.start()     p.join()      result = queue.get()     print 'Factorial', N, '=', result"
msgstr ""

msgid "A :class:`Queue` is used to communicate the input parameter *N* and the result.  The :class:`Queue` object is stored in a global variable. The child process will use the value of the variable when the child was created; because it's a :class:`Queue`, parent and child can use the object to communicate.  (If the parent were to change the value of the global variable, the child's value would be unaffected, and vice versa.)"
msgstr ""

msgid "Two other classes, :class:`Pool` and :class:`Manager`, provide higher-level interfaces.  :class:`Pool` will create a fixed number of worker processes, and requests can then be distributed to the workers by calling :meth:`apply` or :meth:`apply_async` to add a single request, and :meth:`map` or :meth:`map_async` to add a number of requests.  The following code uses a :class:`Pool` to spread requests across 5 worker processes and retrieve a list of results::"
msgstr ""

msgid "from multiprocessing import Pool  def factorial(N, dictionary):     \"Compute a factorial.\"     ... p = Pool(5) result = p.map(factorial, range(1, 1000, 10)) for v in result:     print v"
msgstr ""

msgid "1 39916800 51090942171709440000 8222838654177922817725562880000000 33452526613163807108170062053440751665152000000000 ..."
msgstr ""

msgid "The other high-level interface, the :class:`Manager` class, creates a separate server process that can hold master copies of Python data structures.  Other processes can then access and modify these data structures using proxy objects.  The following example creates a shared dictionary by calling the :meth:`dict` method; the worker processes then insert values into the dictionary.  (Locking is not done for you automatically, which doesn't matter in this example. :class:`Manager`'s methods also include :meth:`Lock`, :meth:`RLock`, and :meth:`Semaphore` to create shared locks.)"
msgstr ""

msgid "import time from multiprocessing import Pool, Manager  def factorial(N, dictionary):     \"Compute a factorial.\"     # Calculate the result     fact = 1L     for i in range(1, N+1):         fact = fact * i      # Store result in dictionary     dictionary[N] = fact  if __name__ == '__main__':     p = Pool(5)     mgr = Manager()     d = mgr.dict()         # Create shared dictionary      # Run tasks using the pool     for N in range(1, 1000, 10):         p.apply_async(factorial, (N, d))      # Mark pool as closed -- no more tasks can be added.     p.close()      # Wait for tasks to exit     p.join()      # Output results     for k, v in sorted(d.items()):         print k, v"
msgstr ""

msgid "This will produce the output::"
msgstr ""

msgid "1 1 11 39916800 21 51090942171709440000 31 8222838654177922817725562880000000 41 33452526613163807108170062053440751665152000000000 51 15511187532873822802242430164693032110632597200169861120000..."
msgstr ""

msgid "The documentation for the :mod:`multiprocessing` module."
msgstr ""

msgid "PEP written by Jesse Noller and Richard Oudkerk; implemented by Richard Oudkerk and Jesse Noller."
msgstr ""

msgid "PEP 3101: Advanced String Formatting"
msgstr ""

msgid "In Python 3.0, the `%` operator is supplemented by a more powerful string formatting method, :meth:`format`.  Support for the :meth:`str.format` method has been backported to Python 2.6."
msgstr ""

msgid "In 2.6, both 8-bit and Unicode strings have a `.format()` method that treats the string as a template and takes the arguments to be formatted. The formatting template uses curly brackets (`{`, `}`) as special characters::"
msgstr ""

msgid ">>> # Substitute positional argument 0 into the string. >>> \"User ID: {0}\".format(\"root\") 'User ID: root' >>> # Use the named keyword arguments >>> \"User ID: {uid}   Last seen: {last_login}\".format( ...    uid=\"root\", ...    last_login = \"5 Mar 2008 07:20\") 'User ID: root   Last seen: 5 Mar 2008 07:20'"
msgstr ""

msgid "Curly brackets can be escaped by doubling them::"
msgstr ""

msgid ">>> \"Empty dict: {{}}\".format() \"Empty dict: {}\""
msgstr ""

msgid "Field names can be integers indicating positional arguments, such as ``{0}``, ``{1}``, etc. or names of keyword arguments.  You can also supply compound field names that read attributes or access dictionary keys::"
msgstr ""

msgid ">>> import sys >>> print 'Platform: {0.platform}\\nPython version: {0.version}'.format(sys) Platform: darwin Python version: 2.6a1+ (trunk:61261M, Mar  5 2008, 20:29:41) [GCC 4.0.1 (Apple Computer, Inc. build 5367)]'  >>> import mimetypes >>> 'Content-type: {0[.mp4]}'.format(mimetypes.types_map) 'Content-type: video/mp4'"
msgstr ""

msgid "Note that when using dictionary-style notation such as ``[.mp4]``, you don't need to put any quotation marks around the string; it will look up the value using ``.mp4`` as the key.  Strings beginning with a number will be converted to an integer.  You can't write more complicated expressions inside a format string."
msgstr ""

msgid "So far we've shown how to specify which field to substitute into the resulting string.  The precise formatting used is also controllable by adding a colon followed by a format specifier.  For example::"
msgstr ""

msgid ">>> # Field 0: left justify, pad to 15 characters >>> # Field 1: right justify, pad to 6 characters >>> fmt = '{0:15} ${1:>6}' >>> fmt.format('Registration', 35) 'Registration    $    35' >>> fmt.format('Tutorial', 50) 'Tutorial        $    50' >>> fmt.format('Banquet', 125) 'Banquet         $   125'"
msgstr ""

msgid "Format specifiers can reference other fields through nesting::"
msgstr ""

msgid ">>> fmt = '{0:{1}}' >>> width = 15 >>> fmt.format('Invoice #1234', width) 'Invoice #1234  ' >>> width = 35 >>> fmt.format('Invoice #1234', width) 'Invoice #1234                      '"
msgstr ""

msgid "The alignment of a field within the desired width can be specified:"
msgstr ""

msgid "Character"
msgstr ""

msgid "Effect"
msgstr ""

msgid "< (default)"
msgstr ""

msgid "Left-align"
msgstr ""

msgid ">"
msgstr ""

msgid "Right-align"
msgstr ""

msgid "^"
msgstr ""

msgid "Center"
msgstr ""

msgid "="
msgstr ""

msgid "(For numeric types only) Pad after the sign."
msgstr ""

msgid "Format specifiers can also include a presentation type, which controls how the value is formatted.  For example, floating-point numbers can be formatted as a general number or in exponential notation::"
msgstr ""

msgid ">>> '{0:g}'.format(3.75) '3.75' >>> '{0:e}'.format(3.75) '3.750000e+00'"
msgstr ""

msgid "A variety of presentation types are available.  Consult the 2.6 documentation for a :ref:`complete list <formatstrings>`; here's a sample:"
msgstr ""

msgid "``b``"
msgstr ""

msgid "Binary. Outputs the number in base 2."
msgstr ""

msgid "``c``"
msgstr ""

msgid "Character. Converts the integer to the corresponding Unicode character before printing."
msgstr ""

msgid "``d``"
msgstr ""

msgid "Decimal Integer. Outputs the number in base 10."
msgstr ""

msgid "``o``"
msgstr ""

msgid "Octal format. Outputs the number in base 8."
msgstr ""

msgid "``x``"
msgstr ""

msgid "Hex format. Outputs the number in base 16, using lower-case letters for the digits above 9."
msgstr ""

msgid "``e``"
msgstr ""

msgid "Exponent notation. Prints the number in scientific notation using the letter 'e' to indicate the exponent."
msgstr ""

msgid "``g``"
msgstr ""

msgid "General format. This prints the number as a fixed-point number, unless the number is too large, in which case it switches to 'e' exponent notation."
msgstr ""

msgid "``n``"
msgstr ""

msgid "Number. This is the same as 'g' (for floats) or 'd' (for integers), except that it uses the current locale setting to insert the appropriate number separator characters."
msgstr ""

msgid "``%``"
msgstr ""

msgid "Percentage. Multiplies the number by 100 and displays in fixed ('f') format, followed by a percent sign."
msgstr ""

msgid "Classes and types can define a :meth:`__format__` method to control how they're formatted.  It receives a single argument, the format specifier::"
msgstr ""

msgid "def __format__(self, format_spec):     if isinstance(format_spec, unicode):         return unicode(str(self))     else:         return str(self)"
msgstr ""

msgid "There's also a :func:`format` builtin that will format a single value.  It calls the type's :meth:`__format__` method with the provided specifier::"
msgstr ""

msgid ">>> format(75.6564, '.2f') '75.66'"
msgstr ""

msgid "The reference documentation for format fields."
msgstr ""

msgid "PEP written by Talin. Implemented by Eric Smith."
msgstr ""

msgid "PEP 3105: ``print`` As a Function"
msgstr ""

msgid "The ``print`` statement becomes the :func:`print` function in Python 3.0. Making :func:`print` a function makes it possible to replace the function by doing ``def print(...)`` or importing a new function from somewhere else."
msgstr ""

msgid "Python 2.6 has a ``__future__`` import that removes ``print`` as language syntax, letting you use the functional form instead.  For example::"
msgstr ""

msgid ">>> from __future__ import print_function >>> print('# of entries', len(dictionary), file=sys.stderr)"
msgstr ""

msgid "The signature of the new function is::"
msgstr ""

msgid "def print(*args, sep=' ', end='\\n', file=None)"
msgstr ""

msgid "The parameters are:"
msgstr ""

msgid "*args*: positional arguments whose values will be printed out."
msgstr ""

msgid "*sep*: the separator, which will be printed between arguments."
msgstr ""

msgid "*end*: the ending text, which will be printed after all of the arguments have been output."
msgstr ""

msgid "*file*: the file object to which the output will be sent."
msgstr ""

msgid "PEP written by Georg Brandl."
msgstr ""

msgid "PEP 3110: Exception-Handling Changes"
msgstr ""

msgid "One error that Python programmers occasionally make is writing the following code::"
msgstr ""

msgid "try:     ... except TypeError, ValueError:  # Wrong!     ..."
msgstr ""

msgid "The author is probably trying to catch both :exc:`TypeError` and :exc:`ValueError` exceptions, but this code actually does something different: it will catch :exc:`TypeError` and bind the resulting exception object to the local name ``\"ValueError\"``.  The :exc:`ValueError` exception will not be caught at all.  The correct code specifies a tuple of exceptions::"
msgstr ""

msgid "try:     ... except (TypeError, ValueError):     ..."
msgstr ""

msgid "This error happens because the use of the comma here is ambiguous: does it indicate two different nodes in the parse tree, or a single node that's a tuple?"
msgstr ""

msgid "Python 3.0 makes this unambiguous by replacing the comma with the word \"as\".  To catch an exception and store the exception object in the variable ``exc``, you must write::"
msgstr ""

msgid "try:     ... except TypeError as exc:     ..."
msgstr ""

msgid "Python 3.0 will only support the use of \"as\", and therefore interprets the first example as catching two different exceptions.  Python 2.6 supports both the comma and \"as\", so existing code will continue to work.  We therefore suggest using \"as\" when writing new Python code that will only be executed with 2.6."
msgstr ""

msgid "PEP written and implemented by Collin Winter."
msgstr ""

msgid "PEP 3112: Byte Literals"
msgstr ""

msgid "Python 3.0 adopts Unicode as the language's fundamental string type and denotes 8-bit literals differently, either as ``b'string'`` or using a :class:`bytes` constructor.  For future compatibility, Python 2.6 adds :class:`bytes` as a synonym for the :class:`str` type, and it also supports the ``b''`` notation."
msgstr ""

msgid "The 2.6 :class:`str` differs from 3.0's :class:`bytes` type in various ways; most notably, the constructor is completely different.  In 3.0, ``bytes([65, 66, 67])`` is 3 elements long, containing the bytes representing ``ABC``; in 2.6, ``bytes([65, 66, 67])`` returns the 12-byte string representing the :func:`str` of the list."
msgstr ""

msgid "The primary use of :class:`bytes` in 2.6 will be to write tests of object type such as ``isinstance(x, bytes)``.  This will help the 2to3 converter, which can't tell whether 2.x code intends strings to contain either characters or 8-bit bytes; you can now use either :class:`bytes` or :class:`str` to represent your intention exactly, and the resulting code will also be correct in Python 3.0."
msgstr ""

msgid "There's also a ``__future__`` import that causes all string literals to become Unicode strings.  This means that ``\\u`` escape sequences can be used to include Unicode characters::"
msgstr ""

msgid "from __future__ import unicode_literals  s = ('\\u751f\\u3080\\u304e\\u3000\\u751f\\u3054'      '\\u3081\\u3000\\u751f\\u305f\\u307e\\u3054')  print len(s)               # 12 Unicode characters"
msgstr ""

msgid "At the C level, Python 3.0 will rename the existing 8-bit string type, called :ctype:`PyStringObject` in Python 2.x, to :ctype:`PyBytesObject`.  Python 2.6 uses ``#define`` to support using the names :cfunc:`PyBytesObject`, :cfunc:`PyBytes_Check`, :cfunc:`PyBytes_FromStringAndSize`, and all the other functions and macros used with strings."
msgstr ""

msgid "Instances of the :class:`bytes` type are immutable just as strings are.  A new :class:`bytearray` type stores a mutable sequence of bytes::"
msgstr ""

msgid ">>> bytearray([65, 66, 67]) bytearray(b'ABC') >>> b = bytearray(u'\\u21ef\\u3244', 'utf-8') >>> b bytearray(b'\\xe2\\x87\\xaf\\xe3\\x89\\x84') >>> b[0] = '\\xe3' >>> b bytearray(b'\\xe3\\x87\\xaf\\xe3\\x89\\x84') >>> unicode(str(b), 'utf-8') u'\\u31ef \\u3244'"
msgstr ""

msgid "Byte arrays support most of the methods of string types, such as :meth:`startswith`/:meth:`endswith`, :meth:`find`/:meth:`rfind`, and some of the methods of lists, such as :meth:`append`, :meth:`pop`,  and :meth:`reverse`."
msgstr ""

msgid ">>> b = bytearray('ABC') >>> b.append('d') >>> b.append(ord('e')) >>> b bytearray(b'ABCde')"
msgstr ""

msgid "There's also a corresponding C API, with :cfunc:`PyByteArray_FromObject`, :cfunc:`PyByteArray_FromStringAndSize`, and various other functions."
msgstr ""

msgid "PEP written by Jason Orendorff; backported to 2.6 by Christian Heimes."
msgstr ""

msgid "PEP 3116: New I/O Library"
msgstr ""

msgid "Python's built-in file objects support a number of methods, but file-like objects don't necessarily support all of them.  Objects that imitate files usually support :meth:`read` and :meth:`write`, but they may not support :meth:`readline`, for example.  Python 3.0 introduces a layered I/O library in the :mod:`io` module that separates buffering and text-handling features from the fundamental read and write operations."
msgstr ""

msgid "There are three levels of abstract base classes provided by the :mod:`io` module:"
msgstr ""

msgid ":class:`RawIOBase` defines raw I/O operations: :meth:`read`, :meth:`readinto`, :meth:`write`, :meth:`seek`, :meth:`tell`, :meth:`truncate`, and :meth:`close`. Most of the methods of this class will often map to a single system call. There are also :meth:`readable`, :meth:`writable`, and :meth:`seekable` methods for determining what operations a given object will allow."
msgstr ""

msgid "Python 3.0 has concrete implementations of this class for files and sockets, but Python 2.6 hasn't restructured its file and socket objects in this way."
msgstr ""

msgid ":class:`BufferedIOBase` is an abstract base class that buffers data in memory to reduce the number of system calls used, making I/O processing more efficient. It supports all of the methods of :class:`RawIOBase`, and adds a :attr:`raw` attribute holding the underlying raw object."
msgstr ""

msgid "There are five concrete classes implementing this ABC. :class:`BufferedWriter` and :class:`BufferedReader` are for objects that support write-only or read-only usage that have a :meth:`seek` method for random access.  :class:`BufferedRandom` objects support read and write access upon the same underlying stream, and :class:`BufferedRWPair` is for objects such as TTYs that have both read and write operations acting upon unconnected streams of data. The :class:`BytesIO` class supports reading, writing, and seeking over an in-memory buffer."
msgstr ""

msgid ":class:`TextIOBase`: Provides functions for reading and writing strings (remember, strings will be Unicode in Python 3.0), and supporting universal newlines.  :class:`TextIOBase` defines the :meth:`readline` method and supports iteration upon objects."
msgstr ""

msgid "There are two concrete implementations.  :class:`TextIOWrapper` wraps a buffered I/O object, supporting all of the methods for text I/O and adding a :attr:`buffer` attribute for access to the underlying object.  :class:`StringIO` simply buffers everything in memory without ever writing anything to disk."
msgstr ""

msgid "(In Python 2.6, :class:`io.StringIO` is implemented in pure Python, so it's pretty slow.   You should therefore stick with the existing :mod:`StringIO` module or :mod:`cStringIO` for now.  At some point Python 3.0's :mod:`io` module will be rewritten into C for speed, and perhaps the C implementation will be  backported to the 2.x releases.)"
msgstr ""

msgid "In Python 2.6, the underlying implementations haven't been restructured to build on top of the :mod:`io` module's classes.  The module is being provided to make it easier to write code that's forward-compatible with 3.0, and to save developers the effort of writing their own implementations of buffering and text I/O."
msgstr ""

msgid "PEP written by Daniel Stutzbach, Mike Verdone, and Guido van Rossum. Code by Guido van Rossum, Georg Brandl, Walter Doerwald, Jeremy Hylton, Martin von Loewis, Tony Lownds, and others."
msgstr ""

msgid "PEP 3118: Revised Buffer Protocol"
msgstr ""

msgid "The buffer protocol is a C-level API that lets Python types exchange pointers into their internal representations.  A memory-mapped file can be viewed as a buffer of characters, for example, and this lets another module such as :mod:`re` treat memory-mapped files as a string of characters to be searched."
msgstr ""

msgid "The primary users of the buffer protocol are numeric-processing packages such as NumPy, which expose the internal representation of arrays so that callers can write data directly into an array instead of going through a slower API.  This PEP updates the buffer protocol in light of experience from NumPy development, adding a number of new features such as indicating the shape of an array or locking a memory region."
msgstr ""

msgid "The most important new C API function is ``PyObject_GetBuffer(PyObject *obj, Py_buffer *view, int flags)``, which takes an object and a set of flags, and fills in the ``Py_buffer`` structure with information about the object's memory representation.  Objects can use this operation to lock memory in place while an external caller could be modifying the contents, so there's a corresponding ``PyBuffer_Release(Py_buffer *view)`` to indicate that the external caller is done."
msgstr ""

msgid "The *flags* argument to :cfunc:`PyObject_GetBuffer` specifies constraints upon the memory returned.  Some examples are:"
msgstr ""

msgid ":const:`PyBUF_WRITABLE` indicates that the memory must be writable."
msgstr ""

msgid ":const:`PyBUF_LOCK` requests a read-only or exclusive lock on the memory."
msgstr ""

msgid ":const:`PyBUF_C_CONTIGUOUS` and :const:`PyBUF_F_CONTIGUOUS` requests a C-contiguous (last dimension varies the fastest) or Fortran-contiguous (first dimension varies the fastest) array layout."
msgstr ""

msgid "Two new argument codes for :cfunc:`PyArg_ParseTuple`, ``s*`` and ``z*``, return locked buffer objects for a parameter."
msgstr ""

msgid "PEP written by Travis Oliphant and Carl Banks; implemented by Travis Oliphant."
msgstr ""

msgid "PEP 3119: Abstract Base Classes"
msgstr ""

msgid "Some object-oriented languages such as Java support interfaces, declaring that a class has a given set of methods or supports a given access protocol.  Abstract Base Classes (or ABCs) are an equivalent feature for Python. The ABC support consists of an :mod:`abc` module containing a metaclass called :class:`ABCMeta`, special handling of this metaclass by the :func:`isinstance` and :func:`issubclass` builtins, and a collection of basic ABCs that the Python developers think will be widely useful.  Future versions of Python will probably add more ABCs."
msgstr ""

msgid "Let's say you have a particular class and wish to know whether it supports dictionary-style access.  The phrase \"dictionary-style\" is vague, however. It probably means that accessing items with ``obj[1]`` works. Does it imply that setting items with ``obj[2] = value`` works? Or that the object will have :meth:`keys`, :meth:`values`, and :meth:`items` methods?  What about the iterative variants  such as :meth:`iterkeys`?  :meth:`copy` and :meth:`update`?  Iterating over the object with :func:`iter`?"
msgstr ""

msgid "The Python 2.6 :mod:`collections` module includes a number of different ABCs that represent these distinctions.  :class:`Iterable` indicates that a class defines :meth:`__iter__`, and :class:`Container` means the class defines a :meth:`__contains__` method and therefore supports ``x in y`` expressions.  The basic dictionary interface of getting items, setting items, and :meth:`keys`, :meth:`values`, and :meth:`items`, is defined by the :class:`MutableMapping` ABC."
msgstr ""

msgid "You can derive your own classes from a particular ABC to indicate they support that ABC's interface::"
msgstr ""

msgid "import collections  class Storage(collections.MutableMapping):     ..."
msgstr ""

msgid "Alternatively, you could write the class without deriving from the desired ABC and instead register the class by calling the ABC's :meth:`register` method::"
msgstr ""

msgid "import collections  class Storage:     ...  collections.MutableMapping.register(Storage)"
msgstr ""

msgid "For classes that you write, deriving from the ABC is probably clearer. The :meth:`register`  method is useful when you've written a new ABC that can describe an existing type or class, or if you want to declare that some third-party class implements an ABC. For example, if you defined a :class:`PrintableType` ABC, it's legal to do::"
msgstr ""

msgid "# Register Python's types PrintableType.register(int) PrintableType.register(float) PrintableType.register(str)"
msgstr ""

msgid "Classes should obey the semantics specified by an ABC, but Python can't check this; it's up to the class author to understand the ABC's requirements and to implement the code accordingly."
msgstr ""

msgid "To check whether an object supports a particular interface, you can now write::"
msgstr ""

msgid "def func(d):     if not isinstance(d, collections.MutableMapping):         raise ValueError(\"Mapping object expected, not %r\" % d)"
msgstr ""

msgid "Don't feel that you must now begin writing lots of checks as in the above example.  Python has a strong tradition of duck-typing, where explicit type-checking is never done and code simply calls methods on an object, trusting that those methods will be there and raising an exception if they aren't.  Be judicious in checking for ABCs and only do it where it's absolutely necessary."
msgstr ""

msgid "You can write your own ABCs by using ``abc.ABCMeta`` as the metaclass in a class definition::"
msgstr ""

msgid "from abc import ABCMeta, abstractmethod  class Drawable():     __metaclass__ = ABCMeta      @abstractmethod     def draw(self, x, y, scale=1.0):         pass      def draw_doubled(self, x, y):         self.draw(x, y, scale=2.0)   class Square(Drawable):     def draw(self, x, y, scale):         ..."
msgstr ""

msgid "In the :class:`Drawable` ABC above, the :meth:`draw_doubled` method renders the object at twice its size and can be implemented in terms of other methods described in :class:`Drawable`.  Classes implementing this ABC therefore don't need to provide their own implementation of :meth:`draw_doubled`, though they can do so.  An implementation of :meth:`draw` is necessary, though; the ABC can't provide a useful generic implementation."
msgstr ""

msgid "You can apply the ``@abstractmethod`` decorator to methods such as :meth:`draw` that must be implemented; Python will then raise an exception for classes that don't define the method. Note that the exception is only raised when you actually try to create an instance of a subclass lacking the method::"
msgstr ""

msgid ">>> class Circle(Drawable): ...     pass ... >>> c = Circle() Traceback (most recent call last):   File \"<stdin>\", line 1, in <module> TypeError: Can't instantiate abstract class Circle with abstract methods draw >>>"
msgstr ""

msgid "Abstract data attributes can be declared using the ``@abstractproperty`` decorator::"
msgstr ""

msgid "from abc import abstractproperty ...  @abstractproperty def readonly(self):    return self._x"
msgstr ""

msgid "Subclasses must then define a :meth:`readonly` property."
msgstr ""

msgid "PEP written by Guido van Rossum and Talin. Implemented by Guido van Rossum. Backported to 2.6 by Benjamin Aranguren, with Alex Martelli."
msgstr ""

msgid "PEP 3127: Integer Literal Support and Syntax"
msgstr ""

msgid "Python 3.0 changes the syntax for octal (base-8) integer literals, prefixing them with \"0o\" or \"0O\" instead of a leading zero, and adds support for binary (base-2) integer literals, signalled by a \"0b\" or \"0B\" prefix."
msgstr ""

msgid "Python 2.6 doesn't drop support for a leading 0 signalling an octal number, but it does add support for \"0o\" and \"0b\"::"
msgstr ""

msgid ">>> 0o21, 2*8 + 1 (17, 17) >>> 0b101111 47"
msgstr ""

msgid "The :func:`oct` builtin still returns numbers prefixed with a leading zero, and a new :func:`bin` builtin returns the binary representation for a number::"
msgstr ""

msgid ">>> oct(42) '052' >>> future_builtins.oct(42) '0o52' >>> bin(173) '0b10101101'"
msgstr ""

msgid "The :func:`int` and :func:`long` builtins will now accept the \"0o\" and \"0b\" prefixes when base-8 or base-2 are requested, or when the *base* argument is zero (signalling that the base used should be determined from the string)::"
msgstr ""

msgid ">>> int ('0o52', 0) 42 >>> int('1101', 2) 13 >>> int('0b1101', 2) 13 >>> int('0b1101', 0) 13"
msgstr ""

msgid "PEP written by Patrick Maupin; backported to 2.6 by Eric Smith."
msgstr ""

msgid "PEP 3129: Class Decorators"
msgstr ""

msgid "Decorators have been extended from functions to classes.  It's now legal to write::"
msgstr ""

msgid "@foo @bar class A:   pass"
msgstr ""

msgid "This is equivalent to::"
msgstr ""

msgid "class A:   pass  A = foo(bar(A))"
msgstr ""

msgid "PEP written by Collin Winter."
msgstr ""

msgid "PEP 3141: A Type Hierarchy for Numbers"
msgstr ""

msgid "Python 3.0 adds several abstract base classes for numeric types inspired by Scheme's numeric tower.  These classes were backported to 2.6 as the :mod:`numbers` module."
msgstr ""

msgid "The most general ABC is :class:`Number`.  It defines no operations at all, and only exists to allow checking if an object is a number by doing ``isinstance(obj, Number)``."
msgstr ""

msgid ":class:`Complex` is a subclass of :class:`Number`.  Complex numbers can undergo the basic operations of addition, subtraction, multiplication, division, and exponentiation, and you can retrieve the real and imaginary parts and obtain a number's conjugate.  Python's built-in complex type is an implementation of :class:`Complex`."
msgstr ""

msgid ":class:`Real` further derives from :class:`Complex`, and adds operations that only work on real numbers: :func:`floor`, :func:`trunc`, rounding, taking the remainder mod N, floor division, and comparisons."
msgstr ""

msgid ":class:`Rational` numbers derive from :class:`Real`, have :attr:`numerator` and :attr:`denominator` properties, and can be converted to floats.  Python 2.6 adds a simple rational-number class, :class:`Fraction`, in the :mod:`fractions` module.  (It's called :class:`Fraction` instead of :class:`Rational` to avoid a name clash with :class:`numbers.Rational`.)"
msgstr ""

msgid ":class:`Integral` numbers derive from :class:`Rational`, and can be shifted left and right with ``<<`` and ``>>``, combined using bitwise operations such as ``&`` and ``|``, and can be used as array indexes and slice boundaries."
msgstr ""

msgid "In Python 3.0, the PEP slightly redefines the existing builtins :func:`round`, :func:`math.floor`, :func:`math.ceil`, and adds a new one, :func:`math.trunc`, that's been backported to Python 2.6. :func:`math.trunc` rounds toward zero, returning the closest :class:`Integral` that's between the function's argument and zero."
msgstr ""

msgid "PEP written by Jeffrey Yasskin."
msgstr ""

msgid "`Scheme's numerical tower <http://www.gnu.org/software/guile/manual/html_node/Numerical-Tower.html#Numerical-Tower>`__, from the Guile manual."
msgstr ""

msgid "`Scheme's number datatypes <http://schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-9.html#%_sec_6.2>`__ from the R5RS Scheme specification."
msgstr ""

msgid "The :mod:`fractions` Module"
msgstr ""

msgid "To fill out the hierarchy of numeric types, the :mod:`fractions` module provides a rational-number class.  Rational numbers store their values as a numerator and denominator forming a fraction, and can exactly represent numbers such as ``2/3`` that floating-point numbers can only approximate."
msgstr ""

msgid "The :class:`Fraction` constructor takes two :class:`Integral` values that will be the numerator and denominator of the resulting fraction. ::"
msgstr ""

msgid ">>> from fractions import Fraction >>> a = Fraction(2, 3) >>> b = Fraction(2, 5) >>> float(a), float(b) (0.66666666666666663, 0.40000000000000002) >>> a+b Fraction(16, 15) >>> a/b Fraction(5, 3)"
msgstr ""

msgid "For converting floating-point numbers to rationals, the float type now has an :meth:`as_integer_ratio()` method that returns the numerator and denominator for a fraction that evaluates to the same floating-point value::"
msgstr ""

msgid ">>> (2.5) .as_integer_ratio() (5, 2) >>> (3.1415) .as_integer_ratio() (7074029114692207L, 2251799813685248L) >>> (1./3) .as_integer_ratio() (6004799503160661L, 18014398509481984L)"
msgstr ""

msgid "Note that values that can only be approximated by floating-point numbers, such as 1./3, are not simplified to the number being approximated; the fraction attempts to match the floating-point value **exactly**."
msgstr ""

msgid "The :mod:`fractions` module is based upon an implementation by Sjoerd Mullender that was in Python's :file:`Demo/classes/` directory for a long time.  This implementation was significantly updated by Jeffrey Yasskin."
msgstr ""

msgid "Some smaller changes made to the core Python language are:"
msgstr ""

msgid "Directories and zip archives containing a :file:`__main__.py` file can now be executed directly by passing their name to the interpreter. The directory or zip archive is automatically inserted as the first entry in sys.path.  (Suggestion and initial patch by Andy Chu, subsequently revised by Phillip J. Eby and Nick Coghlan; :issue:`1739468`.)"
msgstr ""

msgid "The :func:`hasattr` function was catching and ignoring all errors, under the assumption that they meant a :meth:`__getattr__` method was failing somehow and the return value of :func:`hasattr` would therefore be ``False``.  This logic shouldn't be applied to :exc:`KeyboardInterrupt` and :exc:`SystemExit`, however; Python 2.6 will no longer discard such exceptions when :func:`hasattr` encounters them.  (Fixed by Benjamin Peterson; :issue:`2196`.)"
msgstr ""

msgid "When calling a function using the ``**`` syntax to provide keyword arguments, you are no longer required to use a Python dictionary; any mapping will now work::"
msgstr ""

msgid ">>> def f(**kw): ...    print sorted(kw) ... >>> ud=UserDict.UserDict() >>> ud['a'] = 1 >>> ud['b'] = 'string' >>> f(**ud) ['a', 'b']"
msgstr ""

msgid "(Contributed by Alexander Belopolsky; :issue:`1686487`.)"
msgstr ""

msgid "It's also become legal to provide keyword arguments after a ``*args`` argument to a function call. ::"
msgstr ""

msgid ">>> def f(*args, **kw): ...     print args, kw ... >>> f(1,2,3, *(4,5,6), keyword=13) (1, 2, 3, 4, 5, 6) {'keyword': 13}"
msgstr ""

msgid "Previously this would have been a syntax error. (Contributed by Amaury Forgeot d'Arc; :issue:`3473`.)"
msgstr ""

msgid "A new builtin, ``next(iterator, [default])`` returns the next item from the specified iterator.  If the *default* argument is supplied, it will be returned if *iterator* has been exhausted; otherwise, the :exc:`StopIteration` exception will be raised.  (Backported in :issue:`2719`.)"
msgstr ""

msgid "Tuples now have :meth:`index` and :meth:`count` methods matching the list type's :meth:`index` and :meth:`count` methods::"
msgstr ""

msgid ">>> t = (0,1,2,3,4,0,1,2) >>> t.index(3) 3 >>> t.count(0) 2"
msgstr ""

msgid "(Contributed by Raymond Hettinger)"
msgstr ""

msgid "The built-in types now have improved support for extended slicing syntax, accepting various combinations of ``(start, stop, step)``. Previously, the support was partial and certain corner cases wouldn't work. (Implemented by Thomas Wouters.)"
msgstr ""

msgid "Properties now have three attributes, :attr:`getter`, :attr:`setter` and :attr:`deleter`, that are decorators providing useful shortcuts for adding a getter, setter or deleter function to an existing property. You would use them like this::"
msgstr ""

msgid "class C(object):     @property     def x(self):         return self._x      @x.setter     def x(self, value):         self._x = value      @x.deleter     def x(self):         del self._x  class D(C):     @C.x.getter     def x(self):         return self._x * 2      @x.setter     def x(self, value):         self._x = value / 2"
msgstr ""

msgid "Several methods of the built-in set types now accept multiple iterables: :meth:`intersection`, :meth:`intersection_update`, :meth:`union`, :meth:`update`, :meth:`difference` and :meth:`difference_update`."
msgstr ""

msgid ">>> s=set('1234567890') >>> s.intersection('abc123', 'cdf246')  # Intersection between all inputs set(['2']) >>> s.difference('246', '789') set(['1', '0', '3', '5'])"
msgstr ""

msgid "Many floating-point features were added.  The :func:`float` function will now turn the string ``nan`` into an IEEE 754 Not A Number value, and ``+inf`` and ``-inf`` into positive or negative infinity.  This works on any platform with IEEE 754 semantics.  (Contributed by Christian Heimes; :issue:`1635`.)"
msgstr ""

msgid "Other functions in the :mod:`math` module, :func:`isinf` and :func:`isnan`, return true if their floating-point argument is infinite or Not A Number.  (:issue:`1640`)"
msgstr ""

msgid "Conversion functions were added to convert floating-point numbers into hexadecimal strings (:issue:`3008`).  These functions convert floats to and from a string representation without introducing rounding errors from the conversion between decimal and binary.  Floats have a :meth:`hex` method that returns a string representation, and the ``float.fromhex()`` method converts a string back into a number::"
msgstr ""

msgid ">>> a = 3.75 >>> a.hex() '0x1.e000000000000p+1' >>> float.fromhex('0x1.e000000000000p+1') 3.75 >>> b=1./3 >>> b.hex() '0x1.5555555555555p-2'"
msgstr ""

msgid "A numerical nicety: when creating a complex number from two floats on systems that support signed zeros (-0 and +0), the :func:`complex` constructor will now preserve the sign of the zero.  (Fixed by Mark T. Dickinson; :issue:`1507`.)"
msgstr ""

msgid "Classes that inherit a :meth:`__hash__` method from a parent class can set ``__hash__ = None`` to indicate that the class isn't hashable.  This will make ``hash(obj)`` raise a :exc:`TypeError` and the class will not be indicated as implementing the :class:`Hashable` ABC."
msgstr ""

msgid "You should do this when you've defined a :meth:`__cmp__` or :meth:`__eq__` method that compares objects by their value rather than by identity.  All objects have a default hash method that uses ``id(obj)`` as the hash value.  There's no tidy way to remove the :meth:`__hash__` method inherited from a parent class, so assigning ``None`` was implemented as an override.  At the C level, extensions can set ``tp_hash`` to :cfunc:`PyObject_HashNotImplemented`. (Fixed by Nick Coghlan and Amaury Forgeot d'Arc; :issue:`2235`.)"
msgstr ""

msgid "The :exc:`GeneratorExit` exception now subclasses :exc:`BaseException` instead of :exc:`Exception`.  This means that an exception handler that does ``except Exception:`` will not inadvertently catch :exc:`GeneratorExit`. (Contributed by Chad Austin; :issue:`1537`.)"
msgstr ""

msgid "Generator objects now have a :attr:`gi_code` attribute that refers to the original code object backing the generator. (Contributed by Collin Winter; :issue:`1473257`.)"
msgstr ""

msgid "The :func:`compile` built-in function now accepts keyword arguments as well as positional parameters.  (Contributed by Thomas Wouters; :issue:`1444529`.)"
msgstr ""

msgid "The :func:`complex` constructor now accepts strings containing parenthesized complex numbers, meaning that ``complex(repr(cplx))`` will now round-trip values.  For example, ``complex('(3+4j)')`` now returns the value (3+4j).  (:issue:`1491866`)"
msgstr ""

msgid "The string :meth:`translate` method now accepts ``None`` as the translation table parameter, which is treated as the identity transformation.   This makes it easier to carry out operations that only delete characters.  (Contributed by Bengt Richter and implemented by Raymond Hettinger; :issue:`1193128`.)"
msgstr ""

msgid "The built-in :func:`dir` function now checks for a :meth:`__dir__` method on the objects it receives.  This method must return a list of strings containing the names of valid attributes for the object, and lets the object control the value that :func:`dir` produces. Objects that have :meth:`__getattr__` or :meth:`__getattribute__` methods can use this to advertise pseudo-attributes they will honor. (:issue:`1591665`)"
msgstr ""

msgid "Instance method objects have new attributes for the object and function comprising the method; the new synonym for :attr:`im_self` is :attr:`__self__`, and :attr:`im_func` is also available as :attr:`__func__`. The old names are still supported in Python 2.6, but are gone in 3.0."
msgstr ""

msgid "An obscure change: when you use the :func:`locals` function inside a :keyword:`class` statement, the resulting dictionary no longer returns free variables.  (Free variables, in this case, are variables referenced in the :keyword:`class` statement  that aren't attributes of the class.)"
msgstr ""

msgid "The :mod:`warnings` module has been rewritten in C.  This makes it possible to invoke warnings from the parser, and may also make the interpreter's startup faster. (Contributed by Neal Norwitz and Brett Cannon; :issue:`1631171`.)"
msgstr ""

msgid "Type objects now have a cache of methods that can reduce the work required to find the correct method implementation for a particular class; once cached, the interpreter doesn't need to traverse base classes to figure out the right method to call. The cache is cleared if a base class or the class itself is modified, so the cache should remain correct even in the face of Python's dynamic nature. (Original optimization implemented by Armin Rigo, updated for Python 2.6 by Kevin Jacobs; :issue:`1700288`.)"
msgstr ""

msgid "By default, this change is only applied to types that are included with the Python core.  Extension modules may not necessarily be compatible with this cache, so they must explicitly add :cmacro:`Py_TPFLAGS_HAVE_VERSION_TAG` to the module's ``tp_flags`` field to enable the method cache. (To be compatible with the method cache, the extension module's code must not directly access and modify the ``tp_dict`` member of any of the types it implements.  Most modules don't do this, but it's impossible for the Python interpreter to determine that. See :issue:`1878` for some discussion.)"
msgstr ""

msgid "Function calls that use keyword arguments are significantly faster by doing a quick pointer comparison, usually saving the time of a full string comparison.  (Contributed by Raymond Hettinger, after an initial implementation by Antoine Pitrou; :issue:`1819`.)"
msgstr ""

msgid "All of the functions in the :mod:`struct` module have been rewritten in C, thanks to work at the Need For Speed sprint. (Contributed by Raymond Hettinger.)"
msgstr ""

msgid "Some of the standard built-in types now set a bit in their type objects.  This speeds up checking whether an object is a subclass of one of these types.  (Contributed by Neal Norwitz.)"
msgstr ""

msgid "Unicode strings now use faster code for detecting whitespace and line breaks; this speeds up the :meth:`split` method by about 25% and :meth:`splitlines` by 35%. (Contributed by Antoine Pitrou.)  Memory usage is reduced by using pymalloc for the Unicode string's data."
msgstr ""

msgid "The ``with`` statement now stores the :meth:`__exit__` method on the stack, producing a small speedup.  (Implemented by Jeffrey Yasskin.)"
msgstr ""

msgid "To reduce memory usage, the garbage collector will now clear internal free lists when garbage-collecting the highest generation of objects. This may return memory to the operating system sooner."
msgstr ""

msgid "Interpreter Changes"
msgstr ""

msgid "Two command-line options have been reserved for use by other Python implementations.  The :option:`-J` switch has been reserved for use by Jython for Jython-specific options, such as switches that are passed to the underlying JVM.  :option:`-X` has been reserved for options specific to a particular implementation of Python such as CPython, Jython, or IronPython.  If either option is used with Python 2.6, the interpreter will report that the option isn't currently used."
msgstr ""

msgid "Python can now be prevented from writing :file:`.pyc` or :file:`.pyo` files by supplying the :option:`-B` switch to the Python interpreter, or by setting the :envvar:`PYTHONDONTWRITEBYTECODE` environment variable before running the interpreter.  This setting is available to Python programs as the ``sys.dont_write_bytecode`` variable, and Python code can change the value to modify the interpreter's behaviour.  (Contributed by Neal Norwitz and Georg Brandl.)"
msgstr ""

msgid "The encoding used for standard input, output, and standard error can be specified by setting the :envvar:`PYTHONIOENCODING` environment variable before running the interpreter.  The value should be a string in the form ``<encoding>`` or ``<encoding>:<errorhandler>``. The *encoding* part specifies the encoding's name, e.g. ``utf-8`` or ``latin-1``; the optional *errorhandler* part specifies what to do with characters that can't be handled by the encoding, and  should be one of \"error\", \"ignore\", or \"replace\".   (Contributed by Martin von Loewis.)"
msgstr ""

msgid "As in every release, Python's standard library received a number of enhancements and bug fixes.  Here's a partial list of the most notable changes, sorted alphabetically by module name. Consult the :file:`Misc/NEWS` file in the source tree for a more complete list of changes, or look through the Subversion logs for all the details."
msgstr ""

msgid "The :mod:`asyncore` and :mod:`asynchat` modules are being actively maintained again, and a number of patches and bugfixes were applied.  (Maintained by Josiah Carlson; see :issue:`1736190` for one patch.)"
msgstr ""

msgid "The :mod:`bsddb` module also has a new maintainer, Jesús Cea Avion, and the package is now available as a standalone package.  The web page for the package is `www.jcea.es/programacion/pybsddb.htm <http://www.jcea.es/programacion/pybsddb.htm>`__. The plan is to remove the package from the standard library in Python 3.0, because its pace of releases is much more frequent than Python's."
msgstr ""

msgid "The :mod:`bsddb.dbshelve` module now uses the highest pickling protocol available, instead of restricting itself to protocol 1. (Contributed by W. Barnes.)"
msgstr ""

msgid "The :mod:`cgi` module will now read variables from the query string of an HTTP POST request.  This makes it possible to use form actions with URLs that include query strings such as \"/cgi-bin/add.py?category=1\".  (Contributed by Alexandre Fiori and Nubis; :issue:`1817`.)"
msgstr ""

msgid "The :func:`parse_qs` and :func:`parse_qsl` functions have been relocated from the :mod:`cgi` module to the :mod:`urlparse` module. The versions still available in the :mod:`cgi` module will trigger :exc:`PendingDeprecationWarning` messages in 2.6 (:issue:`600362`)."
msgstr ""

msgid "The :mod:`cmath` module underwent extensive revision, contributed by Mark Dickinson and Christian Heimes. Five new functions were added:"
msgstr ""

msgid ":func:`polar` converts a complex number to polar form, returning the modulus and argument of the complex number."
msgstr ""

msgid ":func:`rect` does the opposite, turning a modulus, argument pair back into the corresponding complex number."
msgstr ""

msgid ":func:`phase` returns the argument (also called the angle) of a complex number."
msgstr ""

msgid ":func:`isnan` returns True if either the real or imaginary part of its argument is a NaN."
msgstr ""

msgid ":func:`isinf` returns True if either the real or imaginary part of its argument is infinite."
msgstr ""

msgid "The revisions also improved the numerical soundness of the :mod:`cmath` module.  For all functions, the real and imaginary parts of the results are accurate to within a few units of least precision (ulps) whenever possible.  See :issue:`1381` for the details.  The branch cuts for :func:`asinh`, :func:`atanh`: and :func:`atan` have also been corrected."
msgstr ""

msgid "The tests for the module have been greatly expanded; nearly 2000 new test cases exercise the algebraic functions."
msgstr ""

msgid "On IEEE 754 platforms, the :mod:`cmath` module now handles IEEE 754 special values and floating-point exceptions in a manner consistent with Annex 'G' of the C99 standard."
msgstr ""

msgid "A new data type in the :mod:`collections` module: :class:`namedtuple(typename, fieldnames)` is a factory function that creates subclasses of the standard tuple whose fields are accessible by name as well as index.  For example::"
msgstr ""

msgid ">>> var_type = collections.namedtuple('variable', ...             'id name type size') >>> # Names are separated by spaces or commas. >>> # 'id, name, type, size' would also work. >>> var_type._fields ('id', 'name', 'type', 'size')  >>> var = var_type(1, 'frequency', 'int', 4) >>> print var[0], var.id    # Equivalent 1 1 >>> print var[2], var.type  # Equivalent int int >>> var._asdict() {'size': 4, 'type': 'int', 'id': 1, 'name': 'frequency'} >>> v2 = var._replace(name='amplitude') >>> v2 variable(id=1, name='amplitude', type='int', size=4)"
msgstr ""

msgid "Several places in the standard library that returned tuples have been modified to return :class:`namedtuple` instances.  For example, the :meth:`Decimal.as_tuple` method now returns a named tuple with :attr:`sign`, :attr:`digits`, and :attr:`exponent` fields."
msgstr ""

msgid "Another change to the :mod:`collections` module is that the :class:`deque` type now supports an optional *maxlen* parameter; if supplied, the deque's size will be restricted to no more than *maxlen* items.  Adding more items to a full deque causes old items to be discarded."
msgstr ""

msgid ">>> from collections import deque >>> dq=deque(maxlen=3) >>> dq deque([], maxlen=3) >>> dq.append(1) ; dq.append(2) ; dq.append(3) >>> dq deque([1, 2, 3], maxlen=3) >>> dq.append(4) >>> dq deque([2, 3, 4], maxlen=3)"
msgstr ""

msgid "The :mod:`Cookie` module's :class:`Morsel` objects now support an :attr:`httponly` attribute.  In some browsers. cookies with this attribute set cannot be accessed or manipulated by JavaScript code. (Contributed by Arvin Schnell; :issue:`1638033`.)"
msgstr ""

msgid "A new window method in the :mod:`curses` module, :meth:`chgat`, changes the display attributes for a certain number of characters on a single line.  (Contributed by Fabian Kreutz.)"
msgstr ""

msgid "# Boldface text starting at y=0,x=21 # and affecting the rest of the line. stdscr.chgat(0, 21, curses.A_BOLD)"
msgstr ""

msgid "The :class:`Textbox` class in the :mod:`curses.textpad` module now supports editing in insert mode as well as overwrite mode. Insert mode is enabled by supplying a true value for the *insert_mode* parameter when creating the :class:`Textbox` instance."
msgstr ""

msgid "The :mod:`datetime` module's :meth:`strftime` methods now support a ``%f`` format code that expands to the number of microseconds in the object, zero-padded on the left to six places.  (Contributed by Skip Montanaro; :issue:`1158`.)"
msgstr ""

msgid "The :mod:`decimal` module was updated to version 1.66 of `the General Decimal Specification <http://www2.hursley.ibm.com/decimal/decarith.html>`__.  New features include some methods for some basic mathematical functions such as :meth:`exp` and :meth:`log10`::"
msgstr ""

msgid ">>> Decimal(1).exp() Decimal(\"2.718281828459045235360287471\") >>> Decimal(\"2.7182818\").ln() Decimal(\"0.9999999895305022877376682436\") >>> Decimal(1000).log10() Decimal(\"3\")"
msgstr ""

msgid "The :meth:`as_tuple` method of :class:`Decimal` objects now returns a named tuple with :attr:`sign`, :attr:`digits`, and :attr:`exponent` fields."
msgstr ""

msgid "(Implemented by Facundo Batista and Mark Dickinson.  Named tuple support added by Raymond Hettinger.)"
msgstr ""

msgid "The :mod:`difflib` module's :class:`SequenceMatcher` class now returns named tuples representing matches, with :attr:`a`, :attr:`b`, and :attr:`size` attributes. (Contributed by Raymond Hettinger.)"
msgstr ""

msgid "An optional ``timeout`` parameter, specifying a timeout measured in seconds, was added to the :class:`ftplib.FTP` class constructor as well as the :meth:`connect` method.  (Added by Facundo Batista.) Also, the :class:`FTP` class's :meth:`storbinary` and :meth:`storlines` now take an optional *callback* parameter that will be called with each block of data after the data has been sent. (Contributed by Phil Schwartz; :issue:`1221598`.)"
msgstr ""

msgid "The :func:`reduce` built-in function is also available in the :mod:`functools` module.  In Python 3.0, the builtin has been dropped and :func:`reduce` is only available from :mod:`functools`; currently there are no plans to drop the builtin in the 2.x series. (Patched by Christian Heimes; :issue:`1739906`.)"
msgstr ""

msgid "When possible, the :mod:`getpass` module will now use :file:`/dev/tty` to print a prompt message and read the password, falling back to standard error and standard input.  If the password may be echoed to the terminal, a warning is printed before the prompt is displayed.  (Contributed by Gregory P. Smith.)"
msgstr ""

msgid "The :func:`glob.glob` function can now return Unicode filenames if a Unicode path was used and Unicode filenames are matched within the directory.  (:issue:`1001604`)"
msgstr ""

msgid "A new function in the :mod:`heapq` module, ``merge(iter1, iter2, ...)``, takes any number of iterables returning data in sorted order, and returns a new generator that returns the contents of all the iterators, also in sorted order.  For example::"
msgstr ""

msgid ">>> list(heapq.merge([1, 3, 5, 9], [2, 8, 16])) [1, 2, 3, 5, 8, 9, 16]"
msgstr ""

msgid "Another new function, ``heappushpop(heap, item)``, pushes *item* onto *heap*, then pops off and returns the smallest item. This is more efficient than making a call to :func:`heappush` and then :func:`heappop`."
msgstr ""

msgid ":mod:`heapq` is now implemented to only use less-than comparison, instead of the less-than-or-equal comparison it previously used. This makes :mod:`heapq`'s usage of a type match the :meth:`list.sort` method. (Contributed by Raymond Hettinger.)"
msgstr ""

msgid "An optional ``timeout`` parameter, specifying a timeout measured in seconds, was added to the :class:`httplib.HTTPConnection` and :class:`HTTPSConnection` class constructors.  (Added by Facundo Batista.)"
msgstr ""

msgid "Most of the :mod:`inspect` module's functions, such as :func:`getmoduleinfo` and :func:`getargs`, now return named tuples. In addition to behaving like tuples, the elements of the  return value can also be accessed as attributes. (Contributed by Raymond Hettinger.)"
msgstr ""

msgid "Some new functions in the module include :func:`isgenerator`, :func:`isgeneratorfunction`, and :func:`isabstract`."
msgstr ""

msgid "The :mod:`itertools` module gained several new functions."
msgstr ""

msgid "``izip_longest(iter1, iter2, ...[, fillvalue])`` makes tuples from each of the elements; if some of the iterables are shorter than others, the missing values are set to *fillvalue*.  For example::"
msgstr ""

msgid ">>> tuple(itertools.izip_longest([1,2,3], [1,2,3,4,5])) ((1, 1), (2, 2), (3, 3), (None, 4), (None, 5))"
msgstr ""

msgid "``product(iter1, iter2, ..., [repeat=N])`` returns the Cartesian product of the supplied iterables, a set of tuples containing every possible combination of the elements returned from each iterable. ::"
msgstr ""

msgid ">>> list(itertools.product([1,2,3], [4,5,6])) [(1, 4), (1, 5), (1, 6),  (2, 4), (2, 5), (2, 6),  (3, 4), (3, 5), (3, 6)]"
msgstr ""

msgid "The optional *repeat* keyword argument is used for taking the product of an iterable or a set of iterables with themselves, repeated *N* times.  With a single iterable argument, *N*-tuples are returned::"
msgstr ""

msgid ">>> list(itertools.product([1,2], repeat=3)) [(1, 1, 1), (1, 1, 2), (1, 2, 1), (1, 2, 2),  (2, 1, 1), (2, 1, 2), (2, 2, 1), (2, 2, 2)]"
msgstr ""

msgid "With two iterables, *2N*-tuples are returned. ::"
msgstr ""

msgid ">>> list(itertools.product([1,2], [3,4], repeat=2)) [(1, 3, 1, 3), (1, 3, 1, 4), (1, 3, 2, 3), (1, 3, 2, 4),  (1, 4, 1, 3), (1, 4, 1, 4), (1, 4, 2, 3), (1, 4, 2, 4),  (2, 3, 1, 3), (2, 3, 1, 4), (2, 3, 2, 3), (2, 3, 2, 4),  (2, 4, 1, 3), (2, 4, 1, 4), (2, 4, 2, 3), (2, 4, 2, 4)]"
msgstr ""

msgid "``combinations(iterable, r)`` returns sub-sequences of length *r* from the elements of *iterable*. ::"
msgstr ""

msgid ">>> list(itertools.combinations('123', 2)) [('1', '2'), ('1', '3'), ('2', '3')] >>> list(itertools.combinations('123', 3)) [('1', '2', '3')] >>> list(itertools.combinations('1234', 3)) [('1', '2', '3'), ('1', '2', '4'),  ('1', '3', '4'), ('2', '3', '4')]"
msgstr ""

msgid "``permutations(iter[, r])`` returns all the permutations of length *r* of the iterable's elements.  If *r* is not specified, it will default to the number of elements produced by the iterable. ::"
msgstr ""

msgid ">>> list(itertools.permutations([1,2,3,4], 2)) [(1, 2), (1, 3), (1, 4),  (2, 1), (2, 3), (2, 4),  (3, 1), (3, 2), (3, 4),  (4, 1), (4, 2), (4, 3)]"
msgstr ""

msgid "``itertools.chain(*iterables)`` is an existing function in :mod:`itertools` that gained a new constructor in Python 2.6. ``itertools.chain.from_iterable(iterable)`` takes a single iterable that should return other iterables.  :func:`chain` will then return all the elements of the first iterable, then all the elements of the second, and so on. ::"
msgstr ""

msgid ">>> list(itertools.chain.from_iterable([[1,2,3], [4,5,6]])) [1, 2, 3, 4, 5, 6]"
msgstr ""

msgid "(All contributed by Raymond Hettinger.)"
msgstr ""

msgid "The :mod:`logging` module's :class:`FileHandler` class and its subclasses :class:`WatchedFileHandler`, :class:`RotatingFileHandler`, and :class:`TimedRotatingFileHandler` now have an optional *delay* parameter to their constructors.  If *delay* is true, opening of the log file is deferred until the first :meth:`emit` call is made.  (Contributed by Vinay Sajip.)"
msgstr ""

msgid ":class:`TimedRotatingFileHandler` also has a *utc* constructor parameter.  If the argument is true, UTC time will be used in determining when midnight occurs and in generating filenames; otherwise local time will be used."
msgstr ""

msgid "Several new functions were added to the :mod:`math` module:"
msgstr ""

msgid ":func:`~math.isinf` and :func:`~math.isnan` determine whether a given float is a (positive or negative) infinity or a NaN (Not a Number), respectively."
msgstr ""

msgid ":func:`~math.copysign` copies the sign bit of an IEEE 754 number, returning the absolute value of *x* combined with the sign bit of *y*.  For example, ``math.copysign(1, -0.0)`` returns -1.0. (Contributed by Christian Heimes.)"
msgstr ""

msgid ":func:`~math.factorial` computes the factorial of a number. (Contributed by Raymond Hettinger; :issue:`2138`.)"
msgstr ""

msgid ":func:`~math.fsum` adds up the stream of numbers from an iterable, and is careful to avoid loss of precision through using partial sums. (Contributed by Jean Brouwers, Raymond Hettinger, and Mark Dickinson; :issue:`2819`.)"
msgstr ""

msgid ":func:`~math.acosh`, :func:`~math.asinh` and :func:`~math.atanh` compute the inverse hyperbolic functions."
msgstr ""

msgid ":func:`~math.log1p` returns the natural logarithm of *1+x* (base *e*)."
msgstr ""

msgid ":func:`trunc` rounds a number toward zero, returning the closest :class:`Integral` that's between the function's argument and zero. Added as part of the backport of `PEP 3141's type hierarchy for numbers <#pep-3141>`__."
msgstr ""

msgid "The :mod:`math` module has been improved to give more consistent behaviour across platforms, especially with respect to handling of floating-point exceptions and IEEE 754 special values."
msgstr ""

msgid "Whenever possible, the module follows the recommendations of the C99 standard about 754's special values.  For example, ``sqrt(-1.)`` should now give a :exc:`ValueError` across almost all platforms, while ``sqrt(float('NaN'))`` should return a NaN on all IEEE 754 platforms.  Where Annex 'F' of the C99 standard recommends signaling 'divide-by-zero' or 'invalid', Python will raise :exc:`ValueError`. Where Annex 'F' of the C99 standard recommends signaling 'overflow', Python will raise :exc:`OverflowError`.  (See :issue:`711019` and :issue:`1640`.)"
msgstr ""

msgid "(Contributed by Christian Heimes and Mark Dickinson.)"
msgstr ""

msgid ":class:`mmap` objects now have a :meth:`rfind` method that searches for a substring beginning at the end of the string and searching backwards.  The :meth:`find` method also gained an *end* parameter giving an index at which to stop searching. (Contributed by John Lenton.)"
msgstr ""

msgid "The :mod:`operator` module gained a :func:`methodcaller` function that takes a name and an optional set of arguments, returning a callable that will call the named function on any arguments passed to it.  For example::"
msgstr ""

msgid ">>> # Equivalent to lambda s: s.replace('old', 'new') >>> replacer = operator.methodcaller('replace', 'old', 'new') >>> replacer('old wine in old bottles') 'new wine in new bottles'"
msgstr ""

msgid "(Contributed by Georg Brandl, after a suggestion by Gregory Petrosyan.)"
msgstr ""

msgid "The :func:`attrgetter` function now accepts dotted names and performs the corresponding attribute lookups::"
msgstr ""

msgid ">>> inst_name = operator.attrgetter( ...        '__class__.__name__') >>> inst_name('') 'str' >>> inst_name(help) '_Helper'"
msgstr ""

msgid "(Contributed by Georg Brandl, after a suggestion by Barry Warsaw.)"
msgstr ""

msgid "The :mod:`os` module now wraps several new system calls. ``fchmod(fd, mode)`` and ``fchown(fd, uid, gid)`` change the mode and ownership of an opened file, and ``lchmod(path, mode)`` changes the mode of a symlink.  (Contributed by Georg Brandl and Christian Heimes.)"
msgstr ""

msgid ":func:`chflags` and :func:`lchflags` are wrappers for the corresponding system calls (where they're available), changing the flags set on a file.  Constants for the flag values are defined in the :mod:`stat` module; some possible values include :const:`UF_IMMUTABLE` to signal the file may not be changed and :const:`UF_APPEND` to indicate that data can only be appended to the file.  (Contributed by M. Levinson.)"
msgstr ""

msgid "``os.closerange(low, high)`` efficiently closes all file descriptors from *low* to *high*, ignoring any errors and not including *high* itself. This function is now used by the :mod:`subprocess` module to make starting processes faster.  (Contributed by Georg Brandl; :issue:`1663329`.)"
msgstr ""

msgid "The ``os.environ`` object's :meth:`clear` method will now unset the environment variables using :func:`os.unsetenv` in addition to clearing the object's keys.  (Contributed by Martin Horcicka; :issue:`1181`.)"
msgstr ""

msgid "The :func:`os.walk` function now has a ``followlinks`` parameter. If set to True, it will follow symlinks pointing to directories and visit the directory's contents.  For backward compatibility, the parameter's default value is false.  Note that the function can fall into an infinite recursion if there's a symlink that points to a parent directory.  (:issue:`1273829`)"
msgstr ""

msgid "In the :mod:`os.path` module, the :func:`splitext` function has been changed to not split on leading period characters. This produces better results when operating on Unix's dot-files. For example, ``os.path.splitext('.ipython')`` now returns ``('.ipython', '')`` instead of ``('', '.ipython')``. (:issue:`1115886`)"
msgstr ""

msgid "A new function, ``os.path.relpath(path, start='.')``, returns a relative path from the ``start`` path, if it's supplied, or from the current working directory to the destination ``path``.  (Contributed by Richard Barran; :issue:`1339796`.)"
msgstr ""

msgid "On Windows, :func:`os.path.expandvars` will now expand environment variables given in the form \"%var%\", and \"~user\" will be expanded into the user's home directory path.  (Contributed by Josiah Carlson; :issue:`957650`.)"
msgstr ""

msgid "The Python debugger provided by the :mod:`pdb` module gained a new command: \"run\" restarts the Python program being debugged and can optionally take new command-line arguments for the program. (Contributed by Rocky Bernstein; :issue:`1393667`.)"
msgstr ""

msgid "The :func:`pdb.post_mortem` function, used to begin debugging a traceback, will now use the traceback returned by :func:`sys.exc_info` if no traceback is supplied.   (Contributed by Facundo Batista; :issue:`1106316`.)"
msgstr ""

msgid "The :mod:`pickletools` module now has an :func:`optimize` function that takes a string containing a pickle and removes some unused opcodes, returning a shorter pickle that contains the same data structure. (Contributed by Raymond Hettinger.)"
msgstr ""

msgid "A :func:`get_data` function was added to the :mod:`pkgutil` module that returns the contents of resource files included with an installed Python package.  For example::"
msgstr ""

msgid ">>> import pkgutil >>> print pkgutil.get_data('test', 'exception_hierarchy.txt') BaseException  +-- SystemExit  +-- KeyboardInterrupt  +-- GeneratorExit  +-- Exception       +-- StopIteration       +-- StandardError  ..."
msgstr ""

msgid "(Contributed by Paul Moore; :issue:`2439`.)"
msgstr ""

msgid "The :mod:`pyexpat` module's :class:`Parser` objects now allow setting their :attr:`buffer_size` attribute to change the size of the buffer used to hold character data. (Contributed by Achim Gaedke; :issue:`1137`.)"
msgstr ""

msgid "The :mod:`Queue` module now provides queue variants that retrieve entries in different orders.  The :class:`PriorityQueue` class stores queued items in a heap and retrieves them in priority order, and :class:`LifoQueue` retrieves the most recently added entries first, meaning that it behaves like a stack. (Contributed by Raymond Hettinger.)"
msgstr ""

msgid "The :mod:`random` module's :class:`Random` objects can now be pickled on a 32-bit system and unpickled on a 64-bit system, and vice versa.  Unfortunately, this change also means that Python 2.6's :class:`Random` objects can't be unpickled correctly on earlier versions of Python. (Contributed by Shawn Ligocki; :issue:`1727780`.)"
msgstr ""

msgid "The new ``triangular(low, high, mode)`` function returns random numbers following a triangular distribution.   The returned values are between *low* and *high*, not including *high* itself, and with *mode* as the most frequently occurring value in the distribution.  (Contributed by Wladmir van der Laan and Raymond Hettinger; :issue:`1681432`.)"
msgstr ""

msgid "Long regular expression searches carried out by the  :mod:`re` module will check for signals being delivered, so time-consuming searches can now be interrupted. (Contributed by Josh Hoyt and Ralf Schmitt; :issue:`846388`.)"
msgstr ""

msgid "The regular expression module is implemented by compiling bytecodes for a tiny regex-specific virtual machine.  Untrusted code could create malicious strings of bytecode directly and cause crashes, so Python 2.6 includes a verifier for the regex bytecode. (Contributed by Guido van Rossum from work for Google App Engine; :issue:`3487`.)"
msgstr ""

msgid "The :mod:`rlcompleter` module's :meth:`Completer.complete()` method will now ignore exceptions triggered while evaluating a name. (Fixed by Lorenz Quack; :issue:`2250`.)"
msgstr ""

msgid "The :mod:`sched` module's :class:`scheduler` instances now have a read-only :attr:`queue` attribute that returns the contents of the scheduler's queue, represented as a list of named tuples with the fields ``(time, priority, action, argument)``. (Contributed by Raymond Hettinger; :issue:`1861`.)"
msgstr ""

msgid "The :mod:`select` module now has wrapper functions for the Linux :cfunc:`epoll` and BSD :cfunc:`kqueue` system calls. :meth:`modify` method was added to the existing :class:`poll` objects; ``pollobj.modify(fd, eventmask)`` takes a file descriptor or file object and an event mask, modifying the recorded event mask for that file. (Contributed by Christian Heimes; :issue:`1657`.)"
msgstr ""

msgid "The :func:`shutil.copytree` function now has an optional *ignore* argument that takes a callable object.  This callable will receive each directory path and a list of the directory's contents, and returns a list of names that will be ignored, not copied."
msgstr ""

msgid "The :mod:`shutil` module also provides an :func:`ignore_patterns` function for use with this new parameter.  :func:`ignore_patterns` takes an arbitrary number of glob-style patterns and returns a callable that will ignore any files and directories that match any of these patterns.  The following example copies a directory tree, but skips both :file:`.svn` directories and Emacs backup files, which have names ending with '~'::"
msgstr ""

msgid "shutil.copytree('Doc/library', '/tmp/library',                 ignore=shutil.ignore_patterns('*~', '.svn'))"
msgstr ""

msgid "(Contributed by Tarek Ziadé; :issue:`2663`.)"
msgstr ""

msgid "Integrating signal handling with GUI handling event loops like those used by Tkinter or GTk+ has long been a problem; most software ends up polling, waking up every fraction of a second to check if any GUI events have occurred. The :mod:`signal` module can now make this more efficient. Calling ``signal.set_wakeup_fd(fd)`` sets a file descriptor to be used; when a signal is received, a byte is written to that file descriptor.  There's also a C-level function, :cfunc:`PySignal_SetWakeupFd`, for setting the descriptor."
msgstr ""

msgid "Event loops will use this by opening a pipe to create two descriptors, one for reading and one for writing.  The writable descriptor will be passed to :func:`set_wakeup_fd`, and the readable descriptor will be added to the list of descriptors monitored by the event loop via :cfunc:`select` or :cfunc:`poll`. On receiving a signal, a byte will be written and the main event loop will be woken up, avoiding the need to poll."
msgstr ""

msgid "(Contributed by Adam Olsen; :issue:`1583`.)"
msgstr ""

msgid "The :func:`siginterrupt` function is now available from Python code, and allows changing whether signals can interrupt system calls or not. (Contributed by Ralf Schmitt.)"
msgstr ""

msgid "The :func:`setitimer` and :func:`getitimer` functions have also been added (where they're available).  :func:`setitimer` allows setting interval timers that will cause a signal to be delivered to the process after a specified time, measured in wall-clock time, consumed process time, or combined process+system time.  (Contributed by Guilherme Polo; :issue:`2240`.)"
msgstr ""

msgid "The :mod:`smtplib` module now supports SMTP over SSL thanks to the addition of the :class:`SMTP_SSL` class. This class supports an interface identical to the existing :class:`SMTP` class. (Contributed by Monty Taylor.)  Both class constructors also have an optional ``timeout`` parameter that specifies a timeout for the initial connection attempt, measured in seconds.  (Contributed by Facundo Batista.)"
msgstr ""

msgid "An implementation of the LMTP protocol (:rfc:`2033`) was also added to the module.  LMTP is used in place of SMTP when transferring e-mail between agents that don't manage a mail queue.  (LMTP implemented by Leif Hedstrom; :issue:`957003`.)"
msgstr ""

msgid ":meth:`SMTP.starttls` now complies with :rfc:`3207` and forgets any knowledge obtained from the server not obtained from the TLS negotiation itself.  (Patch contributed by Bill Fenner; :issue:`829951`.)"
msgstr ""

msgid "The :mod:`socket` module now supports TIPC (http://tipc.sf.net), a high-performance non-IP-based protocol designed for use in clustered environments.  TIPC addresses are 4- or 5-tuples. (Contributed by Alberto Bertogli; :issue:`1646`.)"
msgstr ""

msgid "A new function, :func:`create_connection`, takes an address and connects to it using an optional timeout value, returning the connected socket object.  This function also looks up the address's type and connects to it using IPv4 or IPv6 as appropriate.  Changing your code to use :func:`create_connection` instead of ``socket(socket.AF_INET, ...)`` may be all that's required to make your code work with IPv6."
msgstr ""

msgid "The base classes in the :mod:`SocketServer` module now support calling a :meth:`handle_timeout` method after a span of inactivity specified by the server's :attr:`timeout` attribute.  (Contributed by Michael Pomraning.)  The :meth:`serve_forever` method now takes an optional poll interval measured in seconds, controlling how often the server will check for a shutdown request. (Contributed by Pedro Werneck and Jeffrey Yasskin; :issue:`742598`, :issue:`1193577`.)"
msgstr ""

msgid "The :mod:`sqlite3` module, maintained by Gerhard Haering, has been updated from version 2.3.2 in Python 2.5 to version 2.4.1."
msgstr ""

msgid "The :mod:`struct` module now supports the C99 :ctype:`_Bool` type, using the format character ``'?'``. (Contributed by David Remahl.)"
msgstr ""

msgid "The :class:`Popen` objects provided by the :mod:`subprocess` module now have :meth:`terminate`, :meth:`kill`, and :meth:`send_signal` methods. On Windows, :meth:`send_signal` only supports the :const:`SIGTERM` signal, and all these methods are aliases for the Win32 API function :cfunc:`TerminateProcess`. (Contributed by Christian Heimes.)"
msgstr ""

msgid "A new variable in the :mod:`sys` module, :attr:`float_info`, is an object containing information derived from the :file:`float.h` file about the platform's floating-point support.  Attributes of this object include :attr:`mant_dig` (number of digits in the mantissa), :attr:`epsilon` (smallest difference between 1.0 and the next largest value representable), and several others.  (Contributed by Christian Heimes; :issue:`1534`.)"
msgstr ""

msgid "Another new variable, :attr:`dont_write_bytecode`, controls whether Python writes any :file:`.pyc` or :file:`.pyo` files on importing a module. If this variable is true, the compiled files are not written.  The variable is initially set on start-up by supplying the :option:`-B` switch to the Python interpreter, or by setting the :envvar:`PYTHONDONTWRITEBYTECODE` environment variable before running the interpreter.  Python code can subsequently change the value of this variable to control whether bytecode files are written or not. (Contributed by Neal Norwitz and Georg Brandl.)"
msgstr ""

msgid "Information about the command-line arguments supplied to the Python interpreter is available by reading attributes of a named tuple available as ``sys.flags``.  For example, the :attr:`verbose` attribute is true if Python was executed in verbose mode, :attr:`debug` is true in debugging mode, etc. These attributes are all read-only. (Contributed by Christian Heimes.)"
msgstr ""

msgid "A new function, :func:`getsizeof`, takes a Python object and returns the amount of memory used by the object, measured in bytes.  Built-in objects return correct results; third-party extensions may not, but can define a :meth:`__sizeof__` method to return the object's size. (Contributed by Robert Schuppenies; :issue:`2898`.)"
msgstr ""

msgid "It's now possible to determine the current profiler and tracer functions by calling :func:`sys.getprofile` and :func:`sys.gettrace`. (Contributed by Georg Brandl; :issue:`1648`.)"
msgstr ""

msgid "The :mod:`tarfile` module now supports POSIX.1-2001 (pax) tarfiles in addition to the POSIX.1-1988 (ustar) and GNU tar formats that were already supported.  The default format is GNU tar; specify the ``format`` parameter to open a file using a different format::"
msgstr ""

msgid "tar = tarfile.open(\"output.tar\", \"w\",                    format=tarfile.PAX_FORMAT)"
msgstr ""

msgid "The new ``encoding`` and ``errors`` parameters specify an encoding and an error handling scheme for character conversions.  ``'strict'``, ``'ignore'``, and ``'replace'`` are the three standard ways Python can handle errors,; ``'utf-8'`` is a special value that replaces bad characters with their UTF-8 representation.  (Character conversions occur because the PAX format supports Unicode filenames, defaulting to UTF-8 encoding.)"
msgstr ""

msgid "The :meth:`TarFile.add` method now accepts an ``exclude`` argument that's a function that can be used to exclude certain filenames from an archive. The function must take a filename and return true if the file should be excluded or false if it should be archived. The function is applied to both the name initially passed to :meth:`add` and to the names of files in recursively-added directories."
msgstr ""

msgid "(All changes contributed by Lars Gustäbel)."
msgstr ""

msgid "An optional ``timeout`` parameter was added to the :class:`telnetlib.Telnet` class constructor, specifying a timeout measured in seconds.  (Added by Facundo Batista.)"
msgstr ""

msgid "The :class:`tempfile.NamedTemporaryFile` class usually deletes the temporary file it created when the file is closed.  This behaviour can now be changed by passing ``delete=False`` to the constructor.  (Contributed by Damien Miller; :issue:`1537850`.)"
msgstr ""

msgid "A new class, :class:`SpooledTemporaryFile`, behaves like a temporary file but stores its data in memory until a maximum size is exceeded.  On reaching that limit, the contents will be written to an on-disk temporary file.  (Contributed by Dustin J. Mitchell.)"
msgstr ""

msgid "The :class:`NamedTemporaryFile` and :class:`SpooledTemporaryFile` classes both work as context managers, so you can write ``with tempfile.NamedTemporaryFile() as tmp: ...``. (Contributed by Alexander Belopolsky; :issue:`2021`.)"
msgstr ""

msgid "The :mod:`test.test_support` module gained a number of context managers useful for writing tests. :func:`EnvironmentVarGuard` is a context manager that temporarily changes environment variables and automatically restores them to their old values."
msgstr ""

msgid "Another context manager, :class:`TransientResource`, can surround calls to resources that may or may not be available; it will catch and ignore a specified list of exceptions.  For example, a network test may ignore certain failures when connecting to an external web site::"
msgstr ""

msgid "with test_support.TransientResource(IOError,                                 errno=errno.ETIMEDOUT):     f = urllib.urlopen('https://sf.net')     ..."
msgstr ""

msgid "Finally, :func:`check_warnings` resets the :mod:`warning` module's warning filters and returns an object that will record all warning messages triggered (:issue:`3781`)::"
msgstr ""

msgid "with test_support.check_warnings() as wrec:     warnings.simplefilter(\"always\")     # ... code that triggers a warning ...     assert str(wrec.message) == \"function is outdated\"     assert len(wrec.warnings) == 1, \"Multiple warnings raised\""
msgstr ""

msgid "(Contributed by Brett Cannon.)"
msgstr ""

msgid "The :mod:`textwrap` module can now preserve existing whitespace at the beginnings and ends of the newly-created lines by specifying ``drop_whitespace=False`` as an argument::"
msgstr ""

msgid ">>> S = \"\"\"This  sentence  has a bunch   of ...   extra   whitespace.\"\"\" >>> print textwrap.fill(S, width=15) This  sentence has a bunch of    extra whitespace. >>> print textwrap.fill(S, drop_whitespace=False, width=15) This  sentence   has a bunch    of    extra    whitespace. >>>"
msgstr ""

msgid "(Contributed by Dwayne Bailey; :issue:`1581073`.)"
msgstr ""

msgid "The :mod:`threading` module API is being changed to use properties such as :attr:`daemon` instead of :meth:`setDaemon` and :meth:`isDaemon` methods, and some methods have been renamed to use underscores instead of camel-case; for example, the :meth:`activeCount` method is renamed to :meth:`active_count`.  Both the 2.6 and 3.0 versions of the module support the same properties and renamed methods, but don't remove the old methods.  No date has been set for the deprecation of the old APIs in Python 3.x; the old APIs won't be removed in any 2.x version. (Carried out by several people, most notably Benjamin Peterson.)"
msgstr ""

msgid "The :mod:`threading` module's :class:`Thread` objects gained an :attr:`ident` property that returns the thread's identifier, a nonzero integer.  (Contributed by Gregory P. Smith; :issue:`2871`.)"
msgstr ""

msgid "The :mod:`timeit` module now accepts callables as well as strings for the statement being timed and for the setup code. Two convenience functions were added for creating :class:`Timer` instances: ``repeat(stmt, setup, time, repeat, number)`` and ``timeit(stmt, setup, time, number)`` create an instance and call the corresponding method. (Contributed by Erik Demaine; :issue:`1533909`.)"
msgstr ""

msgid "The :mod:`Tkinter` module now accepts lists and tuples for options, separating the elements by spaces before passing the resulting value to Tcl/Tk. (Contributed by Guilherme Polo; :issue:`2906`.)"
msgstr ""

msgid "The :mod:`turtle` module for turtle graphics was greatly enhanced by Gregor Lingl.  New features in the module include:"
msgstr ""

msgid "Better animation of turtle movement and rotation."
msgstr ""

msgid "Control over turtle movement using the new :meth:`delay`, :meth:`tracer`, and :meth:`speed` methods."
msgstr ""

msgid "The ability to set new shapes for the turtle, and to define a new coordinate system."
msgstr ""

msgid "Turtles now have an :meth:`undo()` method that can roll back actions."
msgstr ""

msgid "Simple support for reacting to input events such as mouse and keyboard activity, making it possible to write simple games."
msgstr ""

msgid "A :file:`turtle.cfg` file can be used to customize the starting appearance of the turtle's screen."
msgstr ""

msgid "The module's docstrings can be replaced by new docstrings that have been translated into another language."
msgstr ""

msgid "(:issue:`1513695`)"
msgstr ""

msgid "An optional ``timeout`` parameter was added to the :func:`urllib.urlopen` function and the :class:`urllib.ftpwrapper` class constructor, as well as the :func:`urllib2.urlopen` function.  The parameter specifies a timeout measured in seconds.   For example::"
msgstr ""

msgid ">>> u = urllib2.urlopen(\"http://slow.example.com\",                         timeout=3) Traceback (most recent call last):   ... urllib2.URLError: <urlopen error timed out> >>>"
msgstr ""

msgid "(Added by Facundo Batista.)"
msgstr ""

msgid "The Unicode database provided by the :mod:`unicodedata` module has been updated to version 5.1.0.  (Updated by Martin von Loewis; :issue:`3811`.)"
msgstr ""

msgid "The :mod:`warnings` module's :func:`formatwarning` and :func:`showwarning` gained an optional *line* argument that can be used to supply the line of source code.  (Added as part of :issue:`1631171`, which re-implemented part of the :mod:`warnings` module in C code.)"
msgstr ""

msgid "A new function, :func:`catch_warnings`, is a context manager intended for testing purposes that lets you temporarily modify the warning filters and then restore their original values (:issue:`3781`)."
msgstr ""

msgid "The XML-RPC :class:`SimpleXMLRPCServer` and :class:`DocXMLRPCServer` classes can now be prevented from immediately opening and binding to their socket by passing True as the ``bind_and_activate`` constructor parameter.  This can be used to modify the instance's :attr:`allow_reuse_address` attribute before calling the :meth:`server_bind` and :meth:`server_activate` methods to open the socket and begin listening for connections. (Contributed by Peter Parente; :issue:`1599845`.)"
msgstr ""

msgid ":class:`SimpleXMLRPCServer` also has a :attr:`_send_traceback_header` attribute; if true, the exception and formatted traceback are returned as HTTP headers \"X-Exception\" and \"X-Traceback\".  This feature is for debugging purposes only and should not be used on production servers because the tracebacks might reveal passwords or other sensitive information.  (Contributed by Alan McIntyre as part of his project for Google's Summer of Code 2007.)"
msgstr ""

msgid "The :mod:`xmlrpclib` module no longer automatically converts :class:`datetime.date` and :class:`datetime.time` to the :class:`xmlrpclib.DateTime` type; the conversion semantics were not necessarily correct for all applications.  Code using :mod:`xmlrpclib` should convert :class:`date` and :class:`time` instances. (:issue:`1330538`)  The code can also handle dates before 1900 (contributed by Ralf Schmitt; :issue:`2014`) and 64-bit integers represented by using ``<i8>`` in XML-RPC responses (contributed by Riku Lindblad; :issue:`2985`)."
msgstr ""

msgid "The :mod:`zipfile` module's :class:`ZipFile` class now has :meth:`extract` and :meth:`extractall` methods that will unpack a single file or all the files in the archive to the current directory, or to a specified directory::"
msgstr ""

msgid "z = zipfile.ZipFile('python-251.zip')  # Unpack a single file, writing it relative # to the /tmp directory. z.extract('Python/sysmodule.c', '/tmp')  # Unpack all the files in the archive. z.extractall()"
msgstr ""

msgid "(Contributed by Alan McIntyre; :issue:`467924`.)"
msgstr ""

msgid "The :meth:`open`, :meth:`read` and :meth:`extract` methods can now take either a filename or a :class:`ZipInfo` object.  This is useful when an archive accidentally contains a duplicated filename. (Contributed by Graham Horler; :issue:`1775025`.)"
msgstr ""

msgid "Finally, :mod:`zipfile` now supports using Unicode filenames for archived files.  (Contributed by Alexey Borzenkov; :issue:`1734346`.)"
msgstr ""

msgid "The :mod:`ast` module"
msgstr ""

msgid "The :mod:`ast` module provides an Abstract Syntax Tree representation of Python code, and Armin Ronacher contributed a set of helper functions that perform a variety of common tasks.  These will be useful for HTML templating packages, code analyzers, and similar tools that process Python code."
msgstr ""

msgid "The :func:`parse` function takes an expression and returns an AST. The :func:`dump` function outputs a representation of a tree, suitable for debugging::"
msgstr ""

msgid "import ast  t = ast.parse(\"\"\" d = {} for i in 'abcdefghijklm':     d[i + i] = ord(i) - ord('a') + 1 print d \"\"\") print ast.dump(t)"
msgstr ""

msgid "This outputs a deeply nested tree::"
msgstr ""

msgid "Module(body=[   Assign(targets=[     Name(id='d', ctx=Store())    ], value=Dict(keys=[], values=[]))   For(target=Name(id='i', ctx=Store()),       iter=Str(s='abcdefghijklm'), body=[     Assign(targets=[       Subscript(value=         Name(id='d', ctx=Load()),           slice=           Index(value=             BinOp(left=Name(id='i', ctx=Load()), op=Add(),              right=Name(id='i', ctx=Load()))), ctx=Store())      ], value=      BinOp(left=       BinOp(left=        Call(func=         Name(id='ord', ctx=Load()), args=[           Name(id='i', ctx=Load())          ], keywords=[], starargs=None, kwargs=None),        op=Sub(), right=Call(func=         Name(id='ord', ctx=Load()), args=[           Str(s='a')          ], keywords=[], starargs=None, kwargs=None)),        op=Add(), right=Num(n=1)))     ], orelse=[])    Print(dest=None, values=[      Name(id='d', ctx=Load())    ], nl=True)  ])"
msgstr ""

msgid "The :func:`literal_eval` method takes a string or an AST representing a literal expression, parses and evaluates it, and returns the resulting value.  A literal expression is a Python expression containing only strings, numbers, dictionaries, etc. but no statements or function calls.  If you need to evaluate an expression but cannot accept the security risk of using an :func:`eval` call, :func:`literal_eval` will handle it safely::"
msgstr ""

msgid ">>> literal = '(\"a\", \"b\", {2:4, 3:8, 1:2})' >>> print ast.literal_eval(literal) ('a', 'b', {1: 2, 2: 4, 3: 8}) >>> print ast.literal_eval('\"a\" + \"b\"') Traceback (most recent call last):   ... ValueError: malformed string"
msgstr ""

msgid "The module also includes :class:`NodeVisitor` and :class:`NodeTransformer` classes for traversing and modifying an AST, and functions for common transformations such as changing line numbers."
msgstr ""

msgid "The :mod:`future_builtins` module"
msgstr ""

msgid "Python 3.0 makes many changes to the repertoire of built-in functions, and most of the changes can't be introduced in the Python 2.x series because they would break compatibility. The :mod:`future_builtins` module provides versions of these built-in functions that can be imported when writing 3.0-compatible code."
msgstr ""

msgid "The functions in this module currently include:"
msgstr ""

msgid "``ascii(obj)``: equivalent to :func:`repr`.  In Python 3.0, :func:`repr` will return a Unicode string, while :func:`ascii` will return a pure ASCII bytestring."
msgstr ""

msgid "``filter(predicate, iterable)``, ``map(func, iterable1, ...)``: the 3.0 versions return iterators, unlike the 2.x builtins which return lists."
msgstr ""

msgid "``hex(value)``, ``oct(value)``: instead of calling the :meth:`__hex__` or :meth:`__oct__` methods, these versions will call the :meth:`__index__` method and convert the result to hexadecimal or octal.  :func:`oct` will use the new ``0o`` notation for its result."
msgstr ""

msgid "The :mod:`json` module: JavaScript Object Notation"
msgstr ""

msgid "The new :mod:`json` module supports the encoding and decoding of Python types in JSON (Javascript Object Notation). JSON is a lightweight interchange format often used in web applications. For more information about JSON, see http://www.json.org."
msgstr ""

msgid ":mod:`json` comes with support for decoding and encoding most built-in Python types. The following example encodes and decodes a dictionary::"
msgstr ""

msgid ">>> import json >>> data = {\"spam\" : \"foo\", \"parrot\" : 42} >>> in_json = json.dumps(data) # Encode the data >>> in_json '{\"parrot\": 42, \"spam\": \"foo\"}' >>> json.loads(in_json) # Decode into a Python object {\"spam\" : \"foo\", \"parrot\" : 42}"
msgstr ""

msgid "It's also possible to write your own decoders and encoders to support more types. Pretty-printing of the JSON strings is also supported."
msgstr ""

msgid ":mod:`json` (originally called simplejson) was written by Bob Ippolito."
msgstr ""

msgid "The :mod:`plistlib` module: A Property-List Parser"
msgstr ""

msgid "The ``.plist`` format is commonly used on Mac OS X to store basic data types (numbers, strings, lists, and dictionaries) by serializing them into an XML-based format. It resembles the XML-RPC serialization of data types."
msgstr ""

msgid "Despite being primarily used on Mac OS X, the format has nothing Mac-specific about it and the Python implementation works on any platform that Python supports, so the :mod:`plistlib` module has been promoted to the standard library."
msgstr ""

msgid "Using the module is simple::"
msgstr ""

msgid "import sys import plistlib import datetime  # Create data structure data_struct = dict(lastAccessed=datetime.datetime.now(),                    version=1,                    categories=('Personal','Shared','Private'))  # Create string containing XML. plist_str = plistlib.writePlistToString(data_struct) new_struct = plistlib.readPlistFromString(plist_str) print data_struct print new_struct  # Write data structure to a file and read it back. plistlib.writePlist(data_struct, '/tmp/customizations.plist') new_struct = plistlib.readPlist('/tmp/customizations.plist')  # read/writePlist accepts file-like objects as well as paths. plistlib.writePlist(data_struct, sys.stdout)"
msgstr ""

msgid "ctypes Enhancements"
msgstr ""

msgid "Thomas Heller continued to maintain and enhance the :mod:`ctypes` module."
msgstr ""

msgid ":mod:`ctypes` now supports a :class:`c_bool` datatype that represents the C99 ``bool`` type.  (Contributed by David Remahl; :issue:`1649190`.)"
msgstr ""

msgid "The :mod:`ctypes` string, buffer and array types have improved support for extended slicing syntax, where various combinations of ``(start, stop, step)`` are supplied. (Implemented by Thomas Wouters.)"
msgstr ""

msgid "All :mod:`ctypes` data types now support :meth:`from_buffer` and :meth:`from_buffer_copy` methods that create a ctypes instance based on a provided buffer object.  :meth:`from_buffer_copy` copies the contents of the object, while :meth:`from_buffer` will share the same memory area."
msgstr ""

msgid "A new calling convention tells :mod:`ctypes` to clear the ``errno`` or Win32 LastError variables at the outset of each wrapped call. (Implemented by Thomas Heller; :issue:`1798`.)"
msgstr ""

msgid "You can now retrieve the Unix ``errno`` variable after a function call.  When creating a wrapped function, you can supply ``use_errno=True`` as a keyword parameter to the :func:`DLL` function and then call the module-level methods :meth:`set_errno` and :meth:`get_errno` to set and retrieve the error value."
msgstr ""

msgid "The Win32 LastError variable is similarly supported by the :func:`DLL`, :func:`OleDLL`, and :func:`WinDLL` functions. You supply ``use_last_error=True`` as a keyword parameter and then call the module-level methods :meth:`set_last_error` and :meth:`get_last_error`."
msgstr ""

msgid "The :func:`byref` function, used to retrieve a pointer to a ctypes instance, now has an optional *offset* parameter that is a byte count that will be added to the returned pointer."
msgstr ""

msgid "Improved SSL Support"
msgstr ""

msgid "Bill Janssen made extensive improvements to Python 2.6's support for the Secure Sockets Layer by adding a new module, :mod:`ssl`, that's built atop the `OpenSSL <http://www.openssl.org/>`__ library. This new module provides more control over the protocol negotiated, the X.509 certificates used, and has better support for writing SSL servers (as opposed to clients) in Python.  The existing SSL support in the :mod:`socket` module hasn't been removed and continues to work, though it will be removed in Python 3.0."
msgstr ""

msgid "To use the new module, you must first create a TCP connection in the usual way and then pass it to the :func:`ssl.wrap_socket` function. It's possible to specify whether a certificate is required, and to obtain certificate info by calling the :meth:`getpeercert` method."
msgstr ""

msgid "The documentation for the :mod:`ssl` module."
msgstr ""

msgid "Deprecations and Removals"
msgstr ""

msgid "String exceptions have been removed.  Attempting to use them raises a :exc:`TypeError`."
msgstr ""

msgid "Changes to the :class:`Exception` interface as dictated by :pep:`352` continue to be made.  For 2.6, the :attr:`message` attribute is being deprecated in favor of the :attr:`args` attribute."
msgstr ""

msgid "(3.0-warning mode) Python 3.0 will feature a reorganized standard library that will drop many outdated modules and rename others. Python 2.6 running in 3.0-warning mode will warn about these modules when they are imported."
msgstr ""

msgid "The list of deprecated modules is: :mod:`audiodev`, :mod:`bgenlocations`, :mod:`buildtools`, :mod:`bundlebuilder`, :mod:`Canvas`, :mod:`compiler`, :mod:`dircache`, :mod:`dl`, :mod:`fpformat`, :mod:`gensuitemodule`, :mod:`ihooks`, :mod:`imageop`, :mod:`imgfile`, :mod:`linuxaudiodev`, :mod:`mhlib`, :mod:`mimetools`, :mod:`multifile`, :mod:`new`, :mod:`pure`, :mod:`statvfs`, :mod:`sunaudiodev`, :mod:`test.testall`, and :mod:`toaiff`."
msgstr ""

msgid "The :mod:`gopherlib` module has been removed."
msgstr ""

msgid "The :mod:`MimeWriter` module and :mod:`mimify` module have been deprecated; use the :mod:`email` package instead."
msgstr ""

msgid "The :mod:`md5` module has been deprecated; use the :mod:`hashlib` module instead."
msgstr ""

msgid "The :mod:`posixfile` module has been deprecated; :func:`fcntl.lockf` provides better locking."
msgstr ""

msgid "The :mod:`popen2` module has been deprecated; use the :mod:`subprocess` module."
msgstr ""

msgid "The :mod:`rgbimg` module has been removed."
msgstr ""

msgid "The :mod:`sets` module has been deprecated; it's better to use the built-in :class:`set` and :class:`frozenset` types."
msgstr ""

msgid "The :mod:`sha` module has been deprecated; use the :mod:`hashlib` module instead."
msgstr ""

msgid "Python now must be compiled with C89 compilers (after 19 years!).  This means that the Python source tree has dropped its own implementations of :cfunc:`memmove` and :cfunc:`strerror`, which are in the C89 standard library."
msgstr ""

msgid "Python 2.6 can be built with Microsoft Visual Studio 2008 (version 9.0), and this is the new default compiler.  See the :file:`PCbuild` directory for the build files.  (Implemented by Christian Heimes.)"
msgstr ""

msgid "On Mac OS X, Python 2.6 can be compiled as a 4-way universal build. The :program:`configure` script can take a :option:`--with-universal-archs=[32-bit|64-bit|all]` switch, controlling whether the binaries are built for 32-bit architectures (x86, PowerPC), 64-bit (x86-64 and PPC-64), or both. (Contributed by Ronald Oussoren.)"
msgstr ""

msgid "The BerkeleyDB module now has a C API object, available as ``bsddb.db.api``.   This object can be used by other C extensions that wish to use the :mod:`bsddb` module for their own purposes. (Contributed by Duncan Grisby.)"
msgstr ""

msgid "The new buffer interface, previously described in `the PEP 3118 section <#pep-3118-revised-buffer-protocol>`__, adds :cfunc:`PyObject_GetBuffer` and :cfunc:`PyBuffer_Release`, as well as a few other functions."
msgstr ""

msgid "Python's use of the C stdio library is now thread-safe, or at least as thread-safe as the underlying library is.  A long-standing potential bug occurred if one thread closed a file object while another thread was reading from or writing to the object.  In 2.6 file objects have a reference count, manipulated by the :cfunc:`PyFile_IncUseCount` and :cfunc:`PyFile_DecUseCount` functions.  File objects can't be closed unless the reference count is zero.  :cfunc:`PyFile_IncUseCount` should be called while the GIL is still held, before carrying out an I/O operation using the ``FILE *`` pointer, and :cfunc:`PyFile_DecUseCount` should be called immediately after the GIL is re-acquired. (Contributed by Antoine Pitrou and Gregory P. Smith.)"
msgstr ""

msgid "Importing modules simultaneously in two different threads no longer deadlocks; it will now raise an :exc:`ImportError`.  A new API function, :cfunc:`PyImport_ImportModuleNoBlock`, will look for a module in ``sys.modules`` first, then try to import it after acquiring an import lock.  If the import lock is held by another thread, an :exc:`ImportError` is raised. (Contributed by Christian Heimes.)"
msgstr ""

msgid "Several functions return information about the platform's floating-point support.  :cfunc:`PyFloat_GetMax` returns the maximum representable floating point value, and :cfunc:`PyFloat_GetMin` returns the minimum positive value.  :cfunc:`PyFloat_GetInfo` returns an object containing more information from the :file:`float.h` file, such as ``\"mant_dig\"`` (number of digits in the mantissa), ``\"epsilon\"`` (smallest difference between 1.0 and the next largest value representable), and several others. (Contributed by Christian Heimes; :issue:`1534`.)"
msgstr ""

msgid "C functions and methods that use :cfunc:`PyComplex_AsCComplex` will now accept arguments that have a :meth:`__complex__` method.  In particular, the functions in the :mod:`cmath` module will now accept objects with this method. This is a backport of a Python 3.0 change. (Contributed by Mark Dickinson; :issue:`1675423`.)"
msgstr ""

msgid "Python's C API now includes two functions for case-insensitive string comparisons, ``PyOS_stricmp(char*, char*)`` and ``PyOS_strnicmp(char*, char*, Py_ssize_t)``. (Contributed by Christian Heimes; :issue:`1635`.)"
msgstr ""

msgid "Many C extensions define their own little macro for adding integers and strings to the module's dictionary in the ``init*`` function.  Python 2.6 finally defines standard macros for adding values to a module, :cmacro:`PyModule_AddStringMacro` and :cmacro:`PyModule_AddIntMacro()`.  (Contributed by Christian Heimes.)"
msgstr ""

msgid "Some macros were renamed in both 3.0 and 2.6 to make it clearer that they are macros, not functions.  :cmacro:`Py_Size()` became :cmacro:`Py_SIZE()`, :cmacro:`Py_Type()` became :cmacro:`Py_TYPE()`, and :cmacro:`Py_Refcnt()` became :cmacro:`Py_REFCNT()`. The mixed-case macros are still available in Python 2.6 for backward compatibility. (:issue:`1629`)"
msgstr ""

msgid "Distutils now places C extensions it builds in a different directory when running on a debug version of Python. (Contributed by Collin Winter; :issue:`1530959`.)"
msgstr ""

msgid "Several basic data types, such as integers and strings, maintain internal free lists of objects that can be re-used.  The data structures for these free lists now follow a naming convention: the variable is always named ``free_list``, the counter is always named ``numfree``, and a macro ``Py<typename>_MAXFREELIST`` is always defined."
msgstr ""

msgid "A new Makefile target, \"make patchcheck\", prepares the Python source tree for making a patch: it fixes trailing whitespace in all modified ``.py`` files, checks whether the documentation has been changed, and reports whether the :file:`Misc/ACKS` and :file:`Misc/NEWS` files have been updated. (Contributed by Brett Cannon.)"
msgstr ""

msgid "Another new target, \"make profile-opt\", compiles a Python binary using GCC's profile-guided optimization.  It compiles Python with profiling enabled, runs the test suite to obtain a set of profiling results, and then compiles using these results for optimization. (Contributed by Gregory P. Smith.)"
msgstr ""

msgid "Port-Specific Changes: Windows"
msgstr ""

msgid "The support for Windows 95, 98, ME and NT4 has been dropped. Python 2.6 requires at least Windows 2000 SP4."
msgstr ""

msgid "The new default compiler on Windows is Visual Studio 2008 (version 9.0). The build directories for Visual Studio 2003 (version 7.1) and 2005 (version 8.0) were moved into the PC/ directory. The new :file:`PCbuild` directory supports cross compilation for X64, debug builds and Profile Guided Optimization (PGO). PGO builds are roughly 10% faster than normal builds.  (Contributed by Christian Heimes with help from Amaury Forgeot d'Arc and Martin von Loewis.)"
msgstr ""

msgid "The :mod:`msvcrt` module now supports both the normal and wide char variants of the console I/O API.  The :func:`getwch` function reads a keypress and returns a Unicode value, as does the :func:`getwche` function.  The :func:`putwch` function takes a Unicode character and writes it to the console. (Contributed by Christian Heimes.)"
msgstr ""

msgid ":func:`os.path.expandvars` will now expand environment variables in the form \"%var%\", and \"~user\" will be expanded into the user's home directory path.  (Contributed by Josiah Carlson; :issue:`957650`.)"
msgstr ""

msgid "The :mod:`socket` module's socket objects now have an :meth:`ioctl` method that provides a limited interface to the :cfunc:`WSAIoctl` system interface."
msgstr ""

msgid "The :mod:`_winreg` module now has a function, :func:`ExpandEnvironmentStrings`, that expands environment variable references such as ``%NAME%`` in an input string.  The handle objects provided by this module now support the context protocol, so they can be used in :keyword:`with` statements. (Contributed by Christian Heimes.)"
msgstr ""

msgid ":mod:`_winreg` also has better support for x64 systems, exposing the :func:`DisableReflectionKey`, :func:`EnableReflectionKey`, and :func:`QueryReflectionKey` functions, which enable and disable registry reflection for 32-bit processes running on 64-bit systems. (:issue:`1753245`)"
msgstr ""

msgid "The :mod:`msilib` module's :class:`Record` object gained :meth:`GetInteger` and :meth:`GetString` methods that return field values as an integer or a string. (Contributed by Floris Bruynooghe; :issue:`2125`.)"
msgstr ""

msgid "Port-Specific Changes: Mac OS X"
msgstr ""

msgid "When compiling a framework build of Python, you can now specify the framework name to be used by providing the :option:`--with-framework-name=` option to the :program:`configure` script."
msgstr ""

msgid "The :mod:`macfs` module has been removed.  This in turn required the :func:`macostools.touched` function to be removed because it depended on the :mod:`macfs` module.  (:issue:`1490190`)"
msgstr ""

msgid "Many other Mac OS modules have been deprecated and will removed in Python 3.0: :mod:`_builtinSuites`, :mod:`aepack`, :mod:`aetools`, :mod:`aetypes`, :mod:`applesingle`, :mod:`appletrawmain`, :mod:`appletrunner`, :mod:`argvemulator`, :mod:`Audio_mac`, :mod:`autoGIL`, :mod:`Carbon`, :mod:`cfmfile`, :mod:`CodeWarrior`, :mod:`ColorPicker`, :mod:`EasyDialogs`, :mod:`Explorer`, :mod:`Finder`, :mod:`FrameWork`, :mod:`findertools`, :mod:`ic`, :mod:`icglue`, :mod:`icopen`, :mod:`macerrors`, :mod:`MacOS`, :mod:`macfs`, :mod:`macostools`, :mod:`macresource`, :mod:`MiniAEFrame`, :mod:`Nav`, :mod:`Netscape`, :mod:`OSATerminology`, :mod:`pimp`, :mod:`PixMapWrapper`, :mod:`StdSuites`, :mod:`SystemEvents`, :mod:`Terminal`, and :mod:`terminalcommand`."
msgstr ""

msgid "Port-Specific Changes: IRIX"
msgstr ""

msgid "A number of old IRIX-specific modules were deprecated and will be removed in Python 3.0: :mod:`al` and :mod:`AL`, :mod:`cd`, :mod:`cddb`, :mod:`cdplayer`, :mod:`CL` and :mod:`cl`, :mod:`DEVICE`, :mod:`ERRNO`, :mod:`FILE`, :mod:`FL` and :mod:`fl`, :mod:`flp`, :mod:`fm`, :mod:`GET`, :mod:`GLWS`, :mod:`GL` and :mod:`gl`, :mod:`IN`, :mod:`IOCTL`, :mod:`jpeg`, :mod:`panelparser`, :mod:`readcd`, :mod:`SV` and :mod:`sv`, :mod:`torgb`, :mod:`videoreader`, and :mod:`WAIT`."
msgstr ""

msgid "Porting to Python 2.6"
msgstr ""

msgid "This section lists previously described changes and other bugfixes that may require changes to your code:"
msgstr ""

msgid "Classes that aren't supposed to be hashable should set ``__hash__ = None`` in their definitions to indicate the fact."
msgstr ""

msgid "The :meth:`__init__` method of :class:`collections.deque` now clears any existing contents of the deque before adding elements from the iterable.  This change makes the behavior match ``list.__init__()``."
msgstr ""

msgid ":meth:`object.__init__` previously accepted arbitrary arguments and keyword arguments, ignoring them.  In Python 2.6, this is no longer allowed and will result in a :exc:`TypeError`.  This will affect :meth:`__init__` methods that end up calling the corresponding method on :class:`object` (perhaps through using :func:`super`). See :issue:`1683368` for discussion."
msgstr ""

msgid "The :class:`Decimal` constructor now accepts leading and trailing whitespace when passed a string.  Previously it would raise an :exc:`InvalidOperation` exception.  On the other hand, the :meth:`create_decimal` method of :class:`Context` objects now explicitly disallows extra whitespace, raising a :exc:`ConversionSyntax` exception."
msgstr ""

msgid "Due to an implementation accident, if you passed a file path to the built-in  :func:`__import__` function, it would actually import the specified file.  This was never intended to work, however, and the implementation now explicitly checks for this case and raises an :exc:`ImportError`."
msgstr ""

msgid "C API: the :cfunc:`PyImport_Import` and :cfunc:`PyImport_ImportModule` functions now default to absolute imports, not relative imports. This will affect C extensions that import other modules."
msgstr ""

msgid "C API: extension data types that shouldn't be hashable should define their ``tp_hash`` slot to :cfunc:`PyObject_HashNotImplemented`."
msgstr ""

msgid "The :mod:`socket` module exception :exc:`socket.error` now inherits from :exc:`IOError`.  Previously it wasn't a subclass of :exc:`StandardError` but now it is, through :exc:`IOError`. (Implemented by Gregory P. Smith; :issue:`1706815`.)"
msgstr ""

msgid "The :mod:`xmlrpclib` module no longer automatically converts :class:`datetime.date` and :class:`datetime.time` to the :class:`xmlrpclib.DateTime` type; the conversion semantics were not necessarily correct for all applications.  Code using :mod:`xmlrpclib` should convert :class:`date` and :class:`time` instances. (:issue:`1330538`)"
msgstr ""

msgid "(3.0-warning mode) The :class:`Exception` class now warns when accessed using slicing or index access; having :class:`Exception` behave like a tuple is being phased out."
msgstr ""

msgid "(3.0-warning mode) inequality comparisons between two dictionaries or two objects that don't implement comparison methods are reported as warnings.  ``dict1 == dict2`` still works, but ``dict1 < dict2`` is being phased out."
msgstr ""

msgid "Comparisons between cells, which are an implementation detail of Python's scoping rules, also cause warnings because such comparisons are forbidden entirely in 3.0."
msgstr ""

msgid "The author would like to thank the following people for offering suggestions, corrections and assistance with various drafts of this article: Georg Brandl, Steve Brown, Nick Coghlan, Ralph Corderoy, Jim Jewett, Kent Johnson, Chris Lambacher,  Martin Michlmayr, Antoine Pitrou, Brian Warner."
msgstr ""

msgid "What's New in Python 2.7"
msgstr ""

msgid "This article explains the new features in Python 2.7.  The final release of 2.7 is currently scheduled for July 2010; the detailed schedule is described in :pep:`373`."
msgstr ""

msgid "Numeric handling has been improved in many ways, for both floating-point numbers and for the :class:`Decimal` class.  There are some useful additions to the standard library, such as a greatly enhanced :mod:`unittest` module, the :mod:`argparse` module for parsing command-line options, convenient ordered-dictionary and :class:`Counter` classes in the :mod:`collections` module, and many other improvements."
msgstr ""

msgid "Python 2.7 is planned to be the last of the 2.x releases, so we worked on making it a good release for the long term.  To help with porting to Python 3, several new features from the Python 3.x series have been included in 2.7."
msgstr ""

msgid "This article doesn't attempt to provide a complete specification of the new features, but instead provides a convenient overview.  For full details, you should refer to the documentation for Python 2.7 at http://docs.python.org. If you want to understand the rationale for the design and implementation, refer to the PEP for a particular new feature or the issue on http://bugs.python.org in which a change was discussed.  Whenever possible, \"What's New in Python\" links to the bug/patch item for each change."
msgstr ""

msgid "The Future for Python 2.x"
msgstr ""

msgid "Python 2.7 is intended to be the last major release in the 2.x series. The Python maintainers are planning to focus their future efforts on the Python 3.x series."
msgstr ""

msgid "This means that 2.7 will remain in place for a long time, running production systems that have not been ported to Python 3.x. Two consequences of the long-term significance of 2.7 are:"
msgstr ""

msgid "It's very likely the 2.7 release will have a longer period of maintenance compared to earlier 2.x versions.  Python 2.7 will continue to be maintained while the transition to 3.x continues, and the developers are planning to support Python 2.7 with bug-fix releases beyond the typical two years."
msgstr ""

msgid "A policy decision was made to silence warnings only of interest to developers.  :exc:`DeprecationWarning` and its descendants are now ignored unless otherwise requested, preventing users from seeing warnings triggered by an application.  This change was also made in the branch that will become Python 3.2. (Discussed on stdlib-sig and carried out in :issue:`7319`.)"
msgstr ""

msgid "In previous releases, :exc:`DeprecationWarning` messages were enabled by default, providing Python developers with a clear indication of where their code may break in a future major version of Python."
msgstr ""

msgid "However, there are increasingly many users of Python-based applications who are not directly involved in the development of those applications.  :exc:`DeprecationWarning` messages are irrelevant to such users, making them worry about an application that's actually working correctly and burdening application developers with responding to these concerns."
msgstr ""

msgid "You can re-enable display of :exc:`DeprecationWarning` messages by running Python with the :option:`-Wdefault` (short form: :option:`-Wd`) switch, or by setting the :envvar:`PYTHONWARNINGS` environment variable to ``\"default\"`` (or ``\"d\"``) before running Python.  Python code can also re-enable them by calling ``warnings.simplefilter('default')``."
msgstr ""

msgid "Python 3.1 Features"
msgstr ""

msgid "Much as Python 2.6 incorporated features from Python 3.0, version 2.7 incorporates some of the new features in Python 3.1.  The 2.x series continues to provide tools for migrating to the 3.x series."
msgstr ""

msgid "A partial list of 3.1 features that were backported to 2.7:"
msgstr ""

msgid "The syntax for set literals (``{1,2,3}`` is a mutable set)."
msgstr ""

msgid "Dictionary and set comprehensions (``{ i: i*2 for i in range(3)}``)."
msgstr ""

msgid "Multiple context managers in a single :keyword:`with` statement."
msgstr ""

msgid "A new version of the :mod:`io` library, rewritten in C for performance."
msgstr ""

msgid "The ordered-dictionary type described in :ref:`pep-0372`."
msgstr ""

msgid "The new ``\",\"`` format specifier described in :ref:`pep-0378`."
msgstr ""

msgid "The :class:`memoryview` object."
msgstr ""

msgid "A small subset of the :mod:`importlib` module, `described below <#importlib-section>`__."
msgstr ""

msgid "Float-to-string and string-to-float conversions now round their results more correctly, and :func:`repr` of a floating-point number *x* returns a result that's guaranteed to round back to the same number when converted back to a string."
msgstr ""

msgid "The :ctype:`PyCapsule` type, used to provide a C API for extension modules."
msgstr ""

msgid "The :cfunc:`PyLong_AsLongAndOverflow` C API function."
msgstr ""

msgid "Other new Python3-mode warnings include:"
msgstr ""

msgid ":func:`operator.isCallable` and :func:`operator.sequenceIncludes`, which are not supported in 3.x, now trigger warnings."
msgstr ""

msgid "The :option:`-3` switch now automatically enables the :option:`-Qwarn` switch that causes warnings about using classic division with integers and long integers."
msgstr ""

msgid "PEP 372: Adding an Ordered Dictionary to collections"
msgstr ""

msgid "Regular Python dictionaries iterate over key/value pairs in arbitrary order. Over the years, a number of authors have written alternative implementations that remember the order that the keys were originally inserted.  Based on the experiences from those implementations, 2.7 introduces a new :class:`~collections.OrderedDict` class in the :mod:`collections` module."
msgstr ""

msgid "The :class:`~collections.OrderedDict` API provides the same interface as regular dictionaries but iterates over keys and values in a guaranteed order depending on when a key was first inserted::"
msgstr ""

msgid ">>> from collections import OrderedDict >>> d = OrderedDict([('first', 1), ...                  ('second', 2), ...                  ('third', 3)]) >>> d.items() [('first', 1), ('second', 2), ('third', 3)]"
msgstr ""

msgid "If a new entry overwrites an existing entry, the original insertion position is left unchanged::"
msgstr ""

msgid ">>> d['second'] = 4 >>> d.items() [('first', 1), ('second', 4), ('third', 3)]"
msgstr ""

msgid "Deleting an entry and reinserting it will move it to the end::"
msgstr ""

msgid ">>> del d['second'] >>> d['second'] = 5 >>> d.items() [('first', 1), ('third', 3), ('second', 5)]"
msgstr ""

msgid "The :meth:`~collections.OrderedDict.popitem` method has an optional *last* argument that defaults to True.  If *last* is True, the most recently added key is returned and removed; if it's False, the oldest key is selected::"
msgstr ""

msgid ">>> od = OrderedDict([(x,0) for x in range(20)]) >>> od.popitem() (19, 0) >>> od.popitem() (18, 0) >>> od.popitem(last=False) (0, 0) >>> od.popitem(last=False) (1, 0)"
msgstr ""

msgid "Comparing two ordered dictionaries checks both the keys and values, and requires that the insertion order was the same::"
msgstr ""

msgid ">>> od1 = OrderedDict([('first', 1), ...                    ('second', 2), ...                    ('third', 3)]) >>> od2 = OrderedDict([('third', 3), ...                    ('first', 1), ...                    ('second', 2)]) >>> od1 == od2 False >>> # Move 'third' key to the end >>> del od2['third']; od2['third'] = 3 >>> od1 == od2 True"
msgstr ""

msgid "Comparing an :class:`~collections.OrderedDict` with a regular dictionary ignores the insertion order and just compares the keys and values."
msgstr ""

msgid "How does the :class:`~collections.OrderedDict` work?  It maintains a doubly-linked list of keys, appending new keys to the list as they're inserted. A secondary dictionary maps keys to their corresponding list node, so deletion doesn't have to traverse the entire linked list and therefore remains O(1)."
msgstr ""

msgid "The standard library now supports use of ordered dictionaries in several modules."
msgstr ""

msgid "The :mod:`ConfigParser` module uses them by default, meaning that configuration files can now read, modified, and then written back in their original order."
msgstr ""

msgid "The :meth:`~collections.somenamedtuple._asdict()` method for :func:`collections.namedtuple` now returns an ordered dictionary with the values appearing in the same order as the underlying tuple indices."
msgstr ""

msgid "The :mod:`json` module's :class:`~json.JSONDecoder` class constructor was extended with an *object_pairs_hook* parameter to allow :class:`OrderedDict` instances to be built by the decoder. Support was also added for third-party tools like `PyYAML <http://pyyaml.org/>`_."
msgstr ""

msgid "PEP written by Armin Ronacher and Raymond Hettinger; implemented by Raymond Hettinger."
msgstr ""

msgid "PEP 378: Format Specifier for Thousands Separator"
msgstr ""

msgid "To make program output more readable, it can be useful to add separators to large numbers, rendering them as 18,446,744,073,709,551,616 instead of 18446744073709551616."
msgstr ""

msgid "The fully general solution for doing this is the :mod:`locale` module, which can use different separators (\",\" in North America, \".\" in Europe) and different grouping sizes, but :mod:`locale` is complicated to use and unsuitable for multi-threaded applications where different threads are producing output for different locales."
msgstr ""

msgid "Therefore, a simple comma-grouping mechanism has been added to the mini-language used by the :meth:`str.format` method.  When formatting a floating-point number, simply include a comma between the width and the precision::"
msgstr ""

msgid ">>> '{:20,.2f}'.format(18446744073709551616.0) '18,446,744,073,709,551,616.00'"
msgstr ""

msgid "When formatting an integer, include the comma after the width:"
msgstr ""

msgid ">>> '{:20,d}'.format(18446744073709551616) '18,446,744,073,709,551,616'"
msgstr ""

msgid "This mechanism is not adaptable at all; commas are always used as the separator and the grouping is always into three-digit groups.  The comma-formatting mechanism isn't as general as the :mod:`locale` module, but it's easier to use."
msgstr ""

msgid "PEP written by Raymond Hettinger; implemented by Eric Smith."
msgstr ""

msgid "PEP 389: The argparse Module for Parsing Command Lines"
msgstr ""

msgid "The :mod:`argparse` module for parsing command-line arguments was added as a more powerful replacement for the :mod:`optparse` module."
msgstr ""

msgid "This means Python now supports three different modules for parsing command-line arguments: :mod:`getopt`, :mod:`optparse`, and :mod:`argparse`.  The :mod:`getopt` module closely resembles the C library's :cfunc:`getopt` function, so it remains useful if you're writing a Python prototype that will eventually be rewritten in C. :mod:`optparse` becomes redundant, but there are no plans to remove it because there are many scripts still using it, and there's no automated way to update these scripts.  (Making the :mod:`argparse` API consistent with :mod:`optparse`'s interface was discussed but rejected as too messy and difficult.)"
msgstr ""

msgid "In short, if you're writing a new script and don't need to worry about compatibility with earlier versions of Python, use :mod:`argparse` instead of :mod:`optparse`."
msgstr ""

msgid "Here's an example::"
msgstr ""

msgid "import argparse  parser = argparse.ArgumentParser(description='Command-line example.')  # Add optional switches parser.add_argument('-v', action='store_true', dest='is_verbose',                     help='produce verbose output') parser.add_argument('-o', action='store', dest='output',                     metavar='FILE',                     help='direct output to FILE instead of stdout') parser.add_argument('-C', action='store', type=int, dest='context',                     metavar='NUM', default=0,                     help='display NUM lines of added context')  # Allow any number of additional arguments. parser.add_argument(nargs='*', action='store', dest='inputs',                     help='input filenames (default is stdin)')  args = parser.parse_args() print args.__dict__"
msgstr ""

msgid "Unless you override it, :option:`-h` and :option:`--help` switches are automatically added, and produce neatly formatted output::"
msgstr ""

msgid "-> ./python.exe argparse-example.py --help usage: argparse-example.py [-h] [-v] [-o FILE] [-C NUM] [inputs [inputs ...]]  Command-line example.  positional arguments:   inputs      input filenames (default is stdin)  optional arguments:   -h, --help  show this help message and exit   -v          produce verbose output   -o FILE     direct output to FILE instead of stdout   -C NUM      display NUM lines of added context"
msgstr ""

msgid "As with :mod:`optparse`, the command-line switches and arguments are returned as an object with attributes named by the *dest* parameters::"
msgstr ""

msgid "-> ./python.exe argparse-example.py -v {'output': None,  'is_verbose': True,  'context': 0,  'inputs': []}  -> ./python.exe argparse-example.py -v -o /tmp/output -C 4 file1 file2 {'output': '/tmp/output',  'is_verbose': True,  'context': 4,  'inputs': ['file1', 'file2']}"
msgstr ""

msgid ":mod:`argparse` has much fancier validation than :mod:`optparse`; you can specify an exact number of arguments as an integer, 0 or more arguments by passing ``'*'``, 1 or more by passing ``'+'``, or an optional argument with ``'?'``.  A top-level parser can contain sub-parsers to define subcommands that have different sets of switches, as in ``svn commit``, ``svn checkout``, etc.  You can specify an argument's type as :class:`~argparse.FileType`, which will automatically open files for you and understands that ``'-'`` means standard input or output."
msgstr ""

msgid "`argparse module documentation <http://docs.python.org/dev/library/argparse.html>`__"
msgstr ""

msgid "Part of the Python documentation, describing how to convert code that uses :mod:`optparse`."
msgstr ""

msgid "PEP written and implemented by Steven Bethard."
msgstr ""

msgid "PEP 391: Dictionary-Based Configuration For Logging"
msgstr ""

msgid "The :mod:`logging` module is very flexible; applications can define a tree of logging subsystems, and each logger in this tree can filter out certain messages, format them differently, and direct messages to a varying number of handlers."
msgstr ""

msgid "All this flexibility can require a lot of configuration.  You can write Python statements to create objects and set their properties, but a complex set-up requires verbose but boring code. :mod:`logging` also supports a :func:`~logging.config.fileConfig` function that parses a file, but the file format doesn't support configuring filters, and it's messier to generate programmatically."
msgstr ""

msgid "Python 2.7 adds a :func:`~logging.config.dictConfig` function that uses a dictionary to configure logging.  There are many ways to produce a dictionary from different sources: construct one with code; parse a file containing JSON; or use a YAML parsing library if one is installed."
msgstr ""

msgid "The following example configures two loggers, the root logger and a logger named \"network\".   Messages sent to the root logger will be sent to the system log using the syslog protocol, and messages to the \"network\" logger will be written to a :file:`network.log` file that will be rotated once the log reaches 1Mb."
msgstr ""

msgid "import logging import logging.config  configdict = {  'version': 1,    # Configuration schema in use; must be 1 for now  'formatters': {      'standard': {          'format': ('%(asctime)s %(name)-15s '                     '%(levelname)-8s %(message)s')}},   'handlers': {'netlog': {'backupCount': 10,                      'class': 'logging.handlers.RotatingFileHandler',                      'filename': '/logs/network.log',                      'formatter': 'standard',                      'level': 'INFO',                      'maxBytes': 1024*1024},               'syslog': {'class': 'logging.handlers.SysLogHandler',                          'formatter': 'standard',                          'level': 'ERROR'}},   # Specify all the subordinate loggers  'loggers': {              'network': {                          'handlers': ['netlog']              }  },  # Specify properties of the root logger  'root': {           'handlers': ['syslog']  }, }  # Set up configuration logging.config.dictConfig(configdict)  # As an example, log two error messages logger = logging.getLogger('/') logger.error('Database not found')  netlogger = logging.getLogger('network') netlogger.error('Connection failed')"
msgstr ""

msgid "Three smaller enhancements to the :mod:`logging` module, all implemented by Vinay Sajip, are:"
msgstr ""

msgid "The :class:`~logging.handlers.SysLogHandler` class now supports syslogging over TCP.  The constructor has a *socktype* parameter giving the type of socket to use, either :const:`socket.SOCK_DGRAM` for UDP or :const:`socket.SOCK_STREAM` for TCP.  The default protocol remains UDP."
msgstr ""

msgid ":class:`Logger` instances gained a :meth:`getChild` method that retrieves a descendant logger using a relative path.  For example, once you retrieve a logger by doing ``log = getLogger('app')``, calling ``log.getChild('network.listen')`` is equivalent to ``getLogger('app.network.listen')``."
msgstr ""

msgid "The :class:`LoggerAdapter` class gained a :meth:`isEnabledFor` method that takes a *level* and returns whether the underlying logger would process a message of that level of importance."
msgstr ""

msgid "PEP written and implemented by Vinay Sajip."
msgstr ""

msgid "PEP 3106: Dictionary Views"
msgstr ""

msgid "The dictionary methods :meth:`keys`, :meth:`values`, and :meth:`items` are different in Python 3.x.  They return an object called a :dfn:`view` instead of a fully materialized list."
msgstr ""

msgid "It's not possible to change the return values of :meth:`keys`, :meth:`values`, and :meth:`items` in Python 2.7 because too much code would break.  Instead the 3.x versions were added under the new names :meth:`viewkeys`, :meth:`viewvalues`, and :meth:`viewitems`."
msgstr ""

msgid ">>> d = dict((i*10, chr(65+i)) for i in range(26)) >>> d {0: 'A', 130: 'N', 10: 'B', 140: 'O', 20: ..., 250: 'Z'} >>> d.viewkeys() dict_keys([0, 130, 10, 140, 20, 150, 30, ..., 250])"
msgstr ""

msgid "Views can be iterated over, but the key and item views also behave like sets.  The ``&`` operator performs intersection, and ``|`` performs a union::"
msgstr ""

msgid ">>> d1 = dict((i*10, chr(65+i)) for i in range(26)) >>> d2 = dict((i**.5, i) for i in range(1000)) >>> d1.viewkeys() & d2.viewkeys() set([0.0, 10.0, 20.0, 30.0]) >>> d1.viewkeys() | range(0, 30) set([0, 1, 130, 3, 4, 5, 6, ..., 120, 250])"
msgstr ""

msgid "The view keeps track of the dictionary and its contents change as the dictionary is modified::"
msgstr ""

msgid ">>> vk = d.viewkeys() >>> vk dict_keys([0, 130, 10, ..., 250]) >>> d[260] = '&' >>> vk dict_keys([0, 130, 260, 10, ..., 250])"
msgstr ""

msgid "However, note that you can't add or remove keys while you're iterating over the view::"
msgstr ""

msgid ">>> for k in vk: ...     d[k*2] = k ... Traceback (most recent call last):   File \"<stdin>\", line 1, in <module> RuntimeError: dictionary changed size during iteration"
msgstr ""

msgid "You can use the view methods in Python 2.x code, and the 2to3 converter will change them to the standard :meth:`keys`, :meth:`values`, and :meth:`items` methods."
msgstr ""

msgid "PEP written by Guido van Rossum. Backported to 2.7 by Alexandre Vassalotti; :issue:`1967`."
msgstr ""

msgid "PEP 3137: The memoryview Object"
msgstr ""

msgid "The :class:`memoryview` object provides a view of another object's memory content that matches the :class:`bytes` type's interface."
msgstr ""

msgid ">>> import string >>> m = memoryview(string.letters) >>> m <memory at 0x37f850> >>> len(m)           # Returns length of underlying object 52 >>> m[0], m[25], m[26]   # Indexing returns one byte ('a', 'z', 'A') >>> m2 = m[0:26]         # Slicing returns another memoryview >>> m2 <memory at 0x37f080>"
msgstr ""

msgid "The content of the view can be converted to a string of bytes or a list of integers:"
msgstr ""

msgid ">>> m2.tobytes() 'abcdefghijklmnopqrstuvwxyz' >>> m2.tolist() [97, 98, 99, 100, 101, 102, 103, ... 121, 122] >>>"
msgstr ""

msgid ":class:`memoryview` objects allow modifying the underlying object if it's a mutable object."
msgstr ""

msgid ">>> m2[0] = 75 Traceback (most recent call last):   File \"<stdin>\", line 1, in <module> TypeError: cannot modify read-only memory >>> b = bytearray(string.letters)  # Creating a mutable object >>> b bytearray(b'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ') >>> mb = memoryview(b) >>> mb[0] = '*'         # Assign to view, changing the bytearray. >>> b[0:5]              # The bytearray has been changed. bytearray(b'*bcde') >>>"
msgstr ""

msgid "PEP written by Guido van Rossum. Implemented by Travis Oliphant, Antoine Pitrou and others. Backported to 2.7 by Antoine Pitrou; :issue:`2396`."
msgstr ""

msgid "The syntax for set literals has been backported from Python 3.x. Curly brackets are used to surround the contents of the resulting mutable set; set literals are distinguished from dictionaries by not containing colons and values. ``{}`` continues to represent an empty dictionary; use ``set()`` for an empty set."
msgstr ""

msgid ">>> {1,2,3,4,5} set([1, 2, 3, 4, 5]) >>> set() # empty set set([]) >>> {}    # empty dict {}"
msgstr ""

msgid "Backported by Alexandre Vassalotti; :issue:`2335`."
msgstr ""

msgid "Dictionary and set comprehensions are another feature backported from 3.x, generalizing list/generator comprehensions to use the literal syntax for sets and dictionaries."
msgstr ""

msgid ">>> {x: x*x for x in range(6)} {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25} >>> {('a'*x) for x in range(6)} set(['', 'a', 'aa', 'aaa', 'aaaa', 'aaaaa'])"
msgstr ""

msgid "Backported by Alexandre Vassalotti; :issue:`2333`."
msgstr ""

msgid "The :keyword:`with` statement can now use multiple context managers in one statement.  Context managers are processed from left to right and each one is treated as beginning a new :keyword:`with` statement. This means that::"
msgstr ""

msgid "with A() as a, B() as b:     ... suite of statements ..."
msgstr ""

msgid "is equivalent to::"
msgstr ""

msgid "with A() as a:     with B() as b:         ... suite of statements ..."
msgstr ""

msgid "The :func:`contextlib.nested` function provides a very similar function, so it's no longer necessary and has been deprecated."
msgstr ""

msgid "(Proposed in http://codereview.appspot.com/53094; implemented by Georg Brandl.)"
msgstr ""

msgid "Conversions between floating-point numbers and strings are now correctly rounded on most platforms.  These conversions occur in many different places: :func:`str` on floats and complex numbers; the :class:`float` and :class:`complex` constructors; numeric formatting; serializing and deserializing floats and complex numbers using the :mod:`marshal`, :mod:`pickle` and :mod:`json` modules; parsing of float and imaginary literals in Python code; and :class:`~decimal.Decimal`-to-float conversion."
msgstr ""

msgid "Related to this, the :func:`repr` of a floating-point number *x* now returns a result based on the shortest decimal string that's guaranteed to round back to *x* under correct rounding (with round-half-to-even rounding mode).  Previously it gave a string based on rounding x to 17 decimal digits."
msgstr ""

msgid "The rounding library responsible for this improvement works on Windows and on Unix platforms using the gcc, icc, or suncc compilers.  There may be a small number of platforms where correct operation of this code cannot be guaranteed, so the code is not used on such systems.  You can find out which code is being used by checking :data:`sys.float_repr_style`,  which will be ``short`` if the new code is in use and ``legacy`` if it isn't."
msgstr ""

msgid "Implemented by Eric Smith and Mark Dickinson, using David Gay's :file:`dtoa.c` library; :issue:`7117`."
msgstr ""

msgid "Conversions from long integers and regular integers to floating point now round differently, returning the floating-point number closest to the number.  This doesn't matter for small integers that can be converted exactly, but for large numbers that will unavoidably lose precision, Python 2.7 now approximates more closely.  For example, Python 2.6 computed the following::"
msgstr ""

msgid ">>> n = 295147905179352891391 >>> float(n) 2.9514790517935283e+20 >>> n - long(float(n)) 65535L"
msgstr ""

msgid "Python 2.7's floating-point result is larger, but much closer to the true value::"
msgstr ""

msgid ">>> n = 295147905179352891391 >>> float(n) 2.9514790517935289e+20 >>> n - long(float(n)) -1L"
msgstr ""

msgid "(Implemented by Mark Dickinson; :issue:`3166`.)"
msgstr ""

msgid "Integer division is also more accurate in its rounding behaviours.  (Also implemented by Mark Dickinson; :issue:`1811`.)"
msgstr ""

msgid "Implicit coercion for complex numbers has been removed; the interpreter will no longer ever attempt to call a :meth:`__coerce__` method on complex objects.  (Removed by Meador Inge and Mark Dickinson; :issue:`5211`.)"
msgstr ""

msgid "The :meth:`str.format` method now supports automatic numbering of the replacement fields.  This makes using :meth:`str.format` more closely resemble using ``%s`` formatting::"
msgstr ""

msgid ">>> '{}:{}:{}'.format(2009, 04, 'Sunday') '2009:4:Sunday' >>> '{}:{}:{day}'.format(2009, 4, day='Sunday') '2009:4:Sunday'"
msgstr ""

msgid "The auto-numbering takes the fields from left to right, so the first ``{...}`` specifier will use the first argument to :meth:`str.format`, the next specifier will use the next argument, and so on.  You can't mix auto-numbering and explicit numbering -- either number all of your specifier fields or none of them -- but you can mix auto-numbering and named fields, as in the second example above.  (Contributed by Eric Smith; :issue:`5237`.)"
msgstr ""

msgid "Complex numbers now correctly support usage with :func:`format`, and default to being right-aligned. Specifying a precision or comma-separation applies to both the real and imaginary parts of the number, but a specified field width and alignment is applied to the whole of the resulting ``1.5+3j`` output.  (Contributed by Eric Smith; :issue:`1588` and :issue:`7988`.)"
msgstr ""

msgid "The 'F' format code now always formats its output using uppercase characters, so it will now produce 'INF' and 'NAN'. (Contributed by Eric Smith; :issue:`3382`.)"
msgstr ""

msgid "A low-level change: the :meth:`object.__format__` method now triggers a :exc:`PendingDeprecationWarning` if it's passed a format string, because the :meth:`__format__` method for :class:`object` converts the object to a string representation and formats that.  Previously the method silently applied the format string to the string representation, but that could hide mistakes in Python code.  If you're supplying formatting information such as an alignment or precision, presumably you're expecting the formatting to be applied in some object-specific way.  (Fixed by Eric Smith; :issue:`7994`.)"
msgstr ""

msgid "The :func:`int` and :func:`long` types gained a ``bit_length`` method that returns the number of bits necessary to represent its argument in binary::"
msgstr ""

msgid ">>> n = 37 >>> bin(n) '0b100101' >>> n.bit_length() 6 >>> n = 2**123-1 >>> n.bit_length() 123 >>> (n+1).bit_length() 124"
msgstr ""

msgid "(Contributed by Fredrik Johansson and Victor Stinner; :issue:`3439`.)"
msgstr ""

msgid "The :keyword:`import` statement will no longer try a relative import if an absolute import (e.g. ``from .os import sep``) fails.  This fixes a bug, but could possibly break certain :keyword:`import` statements that were only working by accident.  (Fixed by Meador Inge; :issue:`7902`.)"
msgstr ""

msgid "It's now possible for a subclass of the built-in :class:`unicode` type to override the :meth:`__unicode__` method.  (Implemented by Victor Stinner; :issue:`1583863`.)"
msgstr ""

msgid "The :class:`bytearray` type's :meth:`~bytearray.translate` method now accepts ``None`` as its first argument.  (Fixed by Georg Brandl; :issue:`4759`.)"
msgstr ""

msgid "When using ``@classmethod`` and ``@staticmethod`` to wrap methods as class or static methods, the wrapper object now exposes the wrapped function as their :attr:`__func__` attribute. (Contributed by Amaury Forgeot d'Arc, after a suggestion by George Sakkis; :issue:`5982`.)"
msgstr ""

msgid "When a restricted set of attributes were set using ``__slots__``, deleting an unset attribute would not raise :exc:`AttributeError` as you would expect.  Fixed by Benjamin Peterson; :issue:`7604`.)"
msgstr ""

msgid "Two new encodings are now supported: \"cp720\", used primarily for Arabic text; and \"cp858\", a variant of CP 850 that adds the euro symbol.  (CP720 contributed by Alexander Belchenko and Amaury Forgeot d'Arc in :issue:`1616979`; CP858 contributed by Tim Hatch in :issue:`8016`.)"
msgstr ""

msgid "The :class:`file` object will now set the :attr:`filename` attribute on the :exc:`IOError` exception when trying to open a directory on POSIX platforms (noted by Jan Kaliszewski; :issue:`4764`), and now explicitly checks for and forbids writing to read-only file objects instead of trusting the C library to catch and report the error (fixed by Stefan Krah; :issue:`5677`)."
msgstr ""

msgid "The Python tokenizer now translates line endings itself, so the :func:`compile` built-in function now accepts code using any line-ending convention.  Additionally, it no longer requires that the code end in a newline."
msgstr ""

msgid "Extra parentheses in function definitions are illegal in Python 3.x, meaning that you get a syntax error from ``def f((x)): pass``.  In Python3-warning mode, Python 2.7 will now warn about this odd usage. (Noted by James Lingard; :issue:`7362`.)"
msgstr ""

msgid "It's now possible to create weak references to old-style class objects.  New-style classes were always weak-referenceable.  (Fixed by Antoine Pitrou; :issue:`8268`.)"
msgstr ""

msgid "When a module object is garbage-collected, the module's dictionary is now only cleared if no one else is holding a reference to the dictionary (:issue:`7140`)."
msgstr ""

msgid "A new environment variable, :envvar:`PYTHONWARNINGS`, allows controlling warnings.  It should be set to a string containing warning settings, equivalent to those used with the :option:`-W` switch, separated by commas. (Contributed by Brian Curtin; :issue:`7301`.)"
msgstr ""

msgid "For example, the following setting will print warnings every time they occur, but turn warnings from the :mod:`Cookie` module into an error.  (The exact syntax for setting an environment variable varies across operating systems and shells.)"
msgstr ""

msgid "export PYTHONWARNINGS=all,error:::Cookie:0"
msgstr ""

msgid "When running a module using the interpreter's :option:`-m` switch, ``sys.argv[0]`` will now be set to the string ``'-m'`` while the module is being located, while executing the :file:`__init__.py` files for any parent packages of the module to be executed. (Suggested by Michael Foord; implemented by Nick Coghlan; :issue:`8202`.)"
msgstr ""

msgid "Several performance enhancements have been added:"
msgstr ""

msgid "A new opcode was added to perform the initial setup for :keyword:`with` statements, looking up the :meth:`__enter__` and :meth:`__exit__` methods.  (Contributed by Benjamin Peterson.)"
msgstr ""

msgid "The garbage collector now performs better for one common usage pattern: when many objects are being allocated without deallocating any of them.  This would previously take quadratic time for garbage collection, but now the number of full garbage collections is reduced as the number of objects on the heap grows. The new logic only performs a full garbage collection pass when the middle generation has been collected 10 times and when the number of survivor objects from the middle generation exceeds 10% of the number of objects in the oldest generation.  (Suggested by Martin von Löwis and implemented by Antoine Pitrou; :issue:`4074`.)"
msgstr ""

msgid "The garbage collector tries to avoid tracking simple containers which can't be part of a cycle. In Python 2.7, this is now true for tuples and dicts containing atomic types (such as ints, strings, etc.). Transitively, a dict containing tuples of atomic types won't be tracked either. This helps reduce the cost of each garbage collection by decreasing the number of objects to be considered and traversed by the collector. (Contributed by Antoine Pitrou; :issue:`4688`.)"
msgstr ""

msgid "Long integers are now stored internally either in base 2**15 or in base 2**30, the base being determined at build time.  Previously, they were always stored in base 2**15.  Using base 2**30 gives significant performance improvements on 64-bit machines, but benchmark results on 32-bit machines have been mixed.  Therefore, the default is to use base 2**30 on 64-bit machines and base 2**15 on 32-bit machines; on Unix, there's a new configure option :option:`--enable-big-digits` that can be used to override this default."
msgstr ""

msgid "Apart from the performance improvements this change should be invisible to end users, with one exception: for testing and debugging purposes there's a new structseq :data:`sys.long_info` that provides information about the internal format, giving the number of bits per digit and the size in bytes of the C type used to store each digit::"
msgstr ""

msgid ">>> import sys >>> sys.long_info sys.long_info(bits_per_digit=30, sizeof_digit=4)"
msgstr ""

msgid "(Contributed by Mark Dickinson; :issue:`4258`.)"
msgstr ""

msgid "Another set of changes made long objects a few bytes smaller: 2 bytes smaller on 32-bit systems and 6 bytes on 64-bit. (Contributed by Mark Dickinson; :issue:`5260`.)"
msgstr ""

msgid "The division algorithm for long integers has been made faster by tightening the inner loop, doing shifts instead of multiplications, and fixing an unnecessary extra iteration. Various benchmarks show speedups of between 50% and 150% for long integer divisions and modulo operations. (Contributed by Mark Dickinson; :issue:`5512`.) Bitwise operations are also significantly faster (initial patch by Gregory Smith; :issue:`1087418`)."
msgstr ""

msgid "The implementation of ``%`` checks for the left-side operand being a Python string and special-cases it; this results in a 1-3% performance increase for applications that frequently use ``%`` with strings, such as templating libraries. (Implemented by Collin Winter; :issue:`5176`.)"
msgstr ""

msgid "List comprehensions with an ``if`` condition are compiled into faster bytecode.  (Patch by Antoine Pitrou, back-ported to 2.7 by Jeffrey Yasskin; :issue:`4715`.)"
msgstr ""

msgid "Converting an integer or long integer to a decimal string was made faster by special-casing base 10 instead of using a generalized conversion function that supports arbitrary bases. (Patch by Gawain Bolton; :issue:`6713`.)"
msgstr ""

msgid "The :meth:`split`, :meth:`replace`, :meth:`rindex`, :meth:`rpartition`, and :meth:`rsplit` methods of string-like types (strings, Unicode strings, and :class:`bytearray` objects) now use a fast reverse-search algorithm instead of a character-by-character scan.  This is sometimes faster by a factor of 10.  (Added by Florent Xicluna; :issue:`7462` and :issue:`7622`.)"
msgstr ""

msgid "The :mod:`pickle` and :mod:`cPickle` modules now automatically intern the strings used for attribute names, reducing memory usage of the objects resulting from unpickling.  (Contributed by Jake McGuire; :issue:`5084`.)"
msgstr ""

msgid "The :mod:`cPickle` module now special-cases dictionaries, nearly halving the time required to pickle them. (Contributed by Collin Winter; :issue:`5670`.)"
msgstr ""

msgid "The :mod:`bdb` module's base debugging class :class:`~bdb.Bdb` gained a feature for skipping modules.  The constructor now takes an iterable containing glob-style patterns such as ``django.*``; the debugger will not step into stack frames from a module that matches one of these patterns. (Contributed by Maru Newby after a suggestion by Senthil Kumaran; :issue:`5142`.)"
msgstr ""

msgid "The :mod:`binascii` module now supports the buffer API, so it can be used with :class:`memoryview` instances and other similar buffer objects. (Backported from 3.x by Florent Xicluna; :issue:`7703`.)"
msgstr ""

msgid "Updated module: the :mod:`bsddb` module has been updated from 4.7.2devel9 to version 4.8.4 of `the pybsddb package <http://www.jcea.es/programacion/pybsddb.htm>`__. The new version features better Python 3.x compatibility, various bug fixes, and adds several new BerkeleyDB flags and methods. (Updated by Jesús Cea Avión; :issue:`8156`.  The pybsddb changelog can be read at http://hg.jcea.es/pybsddb/file/tip/ChangeLog.)"
msgstr ""

msgid "The :mod:`bz2` module's :class:`~bz2.BZ2File` now supports the context management protocol, so you can write ``with bz2.BZ2File(...) as f:``. (Contributed by Hagen Fürstenau; :issue:`3860`.)"
msgstr ""

msgid "New class: the :class:`~collections.Counter` class in the :mod:`collections` module is useful for tallying data.  :class:`~collections.Counter` instances behave mostly like dictionaries but return zero for missing keys instead of raising a :exc:`KeyError`:"
msgstr ""

msgid ">>> from collections import Counter >>> c = Counter() >>> for letter in 'here is a sample of english text': ...   c[letter] += 1 ... >>> c Counter({' ': 6, 'e': 5, 's': 3, 'a': 2, 'i': 2, 'h': 2, 'l': 2, 't': 2, 'g': 1, 'f': 1, 'm': 1, 'o': 1, 'n': 1, 'p': 1, 'r': 1, 'x': 1}) >>> c['e'] 5 >>> c['z'] 0"
msgstr ""

msgid "There are three additional :class:`~collections.Counter` methods. :meth:`~collections.Counter.most_common` returns the N most common elements and their counts.  :meth:`~collections.Counter.elements` returns an iterator over the contained elements, repeating each element as many times as its count. :meth:`~collections.Counter.subtract` takes an iterable and subtracts one for each element instead of adding; if the argument is a dictionary or another :class:`Counter`, the counts are subtracted. ::"
msgstr ""

msgid ">>> c.most_common(5) [(' ', 6), ('e', 5), ('s', 3), ('a', 2), ('i', 2)] >>> c.elements() ->    'a', 'a', ' ', ' ', ' ', ' ', ' ', ' ',    'e', 'e', 'e', 'e', 'e', 'g', 'f', 'i', 'i',    'h', 'h', 'm', 'l', 'l', 'o', 'n', 'p', 's',    's', 's', 'r', 't', 't', 'x' >>> c['e'] 5 >>> c.subtract('very heavy on the letter e') >>> c['e']    # Count is now lower -1"
msgstr ""

msgid "Contributed by Raymond Hettinger; :issue:`1696199`."
msgstr ""

msgid "New class: :class:`~collections.OrderedDict` is described in the earlier section :ref:`pep-0372`."
msgstr ""

msgid "New method: The :class:`~collections.deque` data type now has a :meth:`~collections.deque.count` method that returns the number of contained elements equal to the supplied argument *x*, and a :meth:`~collections.deque.reverse` method that reverses the elements of the deque in-place.  :class:`deque` also exposes its maximum length as the read-only :attr:`~collections.deque.maxlen` attribute. (Both features added by Raymond Hettinger.)"
msgstr ""

msgid "The :class:`~collections.namedtuple` class now has an optional *rename* parameter. If *rename* is true, field names that are invalid because they've been repeated or aren't legal Python identifiers will be renamed to legal names that are derived from the field's position within the list of fields:"
msgstr ""

msgid ">>> from collections import namedtuple >>> T = namedtuple('T', ['field1', '$illegal', 'for', 'field2'], rename=True) >>> T._fields ('field1', '_1', '_2', 'field2')"
msgstr ""

msgid "(Added by Raymond Hettinger; :issue:`1818`.)"
msgstr ""

msgid "Finally, the :class:`~collections.Mapping` abstract base class now raises a :exc:`NotImplemented` exception if a mapping is compared to another type that isn't a :class:`Mapping`. (Fixed by Daniel Stutzbach; :issue:`8729`.)"
msgstr ""

msgid "Constructors for the parsing classes in the :mod:`ConfigParser` module now take a *allow_no_value* parameter, defaulting to false; if true, options without values will be allowed.  For example::"
msgstr ""

msgid ">>> import ConfigParser, StringIO >>> sample_config = \"\"\" ... [mysqld] ... user = mysql ... pid-file = /var/run/mysqld/mysqld.pid ... skip-bdb ... \"\"\" >>> config = ConfigParser.RawConfigParser(allow_no_value=True) >>> config.readfp(StringIO.StringIO(sample_config)) >>> config.get('mysqld', 'user') 'mysql' >>> print config.get('mysqld', 'skip-bdb') None >>> print config.get('mysqld', 'unknown') Traceback (most recent call last):   ... NoOptionError: No option 'unknown' in section: 'mysqld'"
msgstr ""

msgid "(Contributed by Mats Kindahl; :issue:`7005`.)"
msgstr ""

msgid "Deprecated function: :func:`contextlib.nested`, which allows handling more than one context manager with a single :keyword:`with` statement, has been deprecated, because the :keyword:`with` statement now supports multiple context managers."
msgstr ""

msgid "The :mod:`cookielib` module now ignores cookies that have an invalid version field, one that doesn't contain an integer value.  (Fixed by John J. Lee; :issue:`3924`.)"
msgstr ""

msgid "The :mod:`copy` module's :func:`~copy.deepcopy` function will now correctly copy bound instance methods.  (Implemented by Robert Collins; :issue:`1515`.)"
msgstr ""

msgid "The :mod:`ctypes` module now always converts ``None`` to a C NULL pointer for arguments declared as pointers.  (Changed by Thomas Heller; :issue:`4606`.)  The underlying `libffi library <http://sourceware.org/libffi/>`__ has been updated to version 3.0.9, containing various fixes for different platforms.  (Updated by Matthias Klose; :issue:`8142`.)"
msgstr ""

msgid "New method: the :mod:`datetime` module's :class:`~datetime.timedelta` class gained a :meth:`~datetime.timedelta.total_seconds` method that returns the number of seconds in the duration.  (Contributed by Brian Quinlan; :issue:`5788`.)"
msgstr ""

msgid "New method: the :class:`~decimal.Decimal` class gained a :meth:`~decimal.Decimal.from_float` class method that performs an exact conversion of a floating-point number to a :class:`~decimal.Decimal`. This exact conversion strives for the closest decimal approximation to the floating-point representation's value; the resulting decimal value will therefore still include the inaccuracy, if any. For example, ``Decimal.from_float(0.1)`` returns ``Decimal('0.1000000000000000055511151231257827021181583404541015625')``. (Implemented by Raymond Hettinger; :issue:`4796`.)"
msgstr ""

msgid "Comparing instances of :class:`Decimal` with floating-point numbers now produces sensible results based on the numeric values of the operands.  Previously such comparisons would fall back to Python's default rules for comparing objects, which produced arbitrary results based on their type.  Note that you still cannot combine :class:`Decimal` and floating-point in other operations such as addition, since you should be explicitly choosing how to convert between float and :class:`Decimal`. (Fixed by Mark Dickinson; :issue:`2531`.)"
msgstr ""

msgid "The constructor for :class:`~decimal.Decimal` now accepts floating-point numbers (added by Raymond Hettinger; :issue:`8257`) and non-European Unicode characters such as Arabic-Indic digits (contributed by Mark Dickinson; :issue:`6595`)."
msgstr ""

msgid "Most of the methods of the :class:`~decimal.Context` class now accept integers as well as :class:`~decimal.Decimal` instances; the only exceptions are the :meth:`~decimal.Context.canonical` and :meth:`~decimal.Context.is_canonical` methods.  (Patch by Juan José Conti; :issue:`7633`.)"
msgstr ""

msgid "When using :class:`~decimal.Decimal` instances with a string's :meth:`~str.format` method, the default alignment was previously left-alignment.  This has been changed to right-alignment, which is more sensible for numeric types.  (Changed by Mark Dickinson; :issue:`6857`.)"
msgstr ""

msgid "Comparisons involving a signaling NaN value (or ``sNAN``) now signal :const:`InvalidOperation` instead of silently returning a true or false value depending on the comparison operator.  Quiet NaN values (or ``NaN``) are now hashable.  (Fixed by Mark Dickinson; :issue:`7279`.)"
msgstr ""

msgid "The :mod:`difflib` module now produces output that is more compatible with modern :command:`diff`/:command:`patch` tools through one small change, using a tab character instead of spaces as a separator in the header giving the filename.  (Fixed by Anatoly Techtonik; :issue:`7585`.)"
msgstr ""

msgid "The Distutils ``sdist`` command now always regenerates the :file:`MANIFEST` file, since even if the :file:`MANIFEST.in` or :file:`setup.py` files haven't been modified, the user might have created some new files that should be included. (Fixed by Tarek Ziadé; :issue:`8688`.)"
msgstr ""

msgid "The :mod:`doctest` module's :const:`IGNORE_EXCEPTION_DETAIL` flag will now ignore the name of the module containing the exception being tested.  (Patch by Lennart Regebro; :issue:`7490`.)"
msgstr ""

msgid "The :mod:`email` module's :class:`~email.message.Message` class will now accept a Unicode-valued payload, automatically converting the payload to the encoding specified by :attr:`output_charset`. (Added by R. David Murray; :issue:`1368247`.)"
msgstr ""

msgid "The :class:`~fractions.Fraction` class now accepts a single float or :class:`~decimal.Decimal` instance, or two rational numbers, as arguments to its constructor.  (Implemented by Mark Dickinson; rationals added in :issue:`5812`, and float/decimal in :issue:`8294`.)"
msgstr ""

msgid "Ordering comparisons (``<``, ``<=``, ``>``, ``>=``) between fractions and complex numbers now raise a :exc:`TypeError`. This fixes an oversight, making the :class:`Fraction` match the other numeric types."
msgstr ""

msgid "New class: :class:`~ftplib.FTP_TLS` in the :mod:`ftplib` module provides secure FTP connections using TLS encapsulation of authentication as well as subsequent control and data transfers. (Contributed by Giampaolo Rodola; :issue:`2054`.)"
msgstr ""

msgid "The :meth:`~ftplib.FTP.storbinary` method for binary uploads can now restart uploads thanks to an added *rest* parameter (patch by Pablo Mouzo; :issue:`6845`.)"
msgstr ""

msgid "New class decorator: :func:`total_ordering` in the :mod:`functools` module takes a class that defines an :meth:`__eq__` method and one of :meth:`__lt__`, :meth:`__le__`, :meth:`__gt__`, or :meth:`__ge__`, and generates the missing comparison methods.  Since the :meth:`__cmp__` method is being deprecated in Python 3.x, this decorator makes it easier to define ordered classes. (Added by Raymond Hettinger; :issue:`5479`.)"
msgstr ""

msgid "New function: :func:`cmp_to_key` will take an old-style comparison function that expects two arguments and return a new callable that can be used as the *key* parameter to functions such as :func:`sorted`, :func:`min` and :func:`max`, etc.  The primary intended use is to help with making code compatible with Python 3.x. (Added by Raymond Hettinger.)"
msgstr ""

msgid "New function: the :mod:`gc` module's :func:`~gc.is_tracked` returns true if a given instance is tracked by the garbage collector, false otherwise. (Contributed by Antoine Pitrou; :issue:`4688`.)"
msgstr ""

msgid "The :mod:`gzip` module's :class:`~gzip.GzipFile` now supports the context management protocol, so you can write ``with gzip.GzipFile(...) as f:`` (contributed by Hagen Fürstenau; :issue:`3860`), and it now implements the :class:`io.BufferedIOBase` ABC, so you can wrap it with :class:`io.BufferedReader` for faster processing (contributed by Nir Aides; :issue:`7471`). It's also now possible to override the modification time recorded in a gzipped file by providing an optional timestamp to the constructor.  (Contributed by Jacques Frechet; :issue:`4272`.)"
msgstr ""

msgid "Files in gzip format can be padded with trailing zero bytes; the :mod:`gzip` module will now consume these trailing bytes.  (Fixed by Tadek Pietraszek and Brian Curtin; :issue:`2846`.)"
msgstr ""

msgid "New attribute: the :mod:`hashlib` module now has an :attr:`~hashlib.hashlib.algorithms` attribute containing a tuple naming the supported algorithms. In Python 2.7, ``hashlib.algorithms`` contains ``('md5', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512')``. (Contributed by Carl Chenet; :issue:`7418`.)"
msgstr ""

msgid "The default :class:`~httplib.HTTPResponse` class used by the :mod:`httplib` module now supports buffering, resulting in much faster reading of HTTP responses. (Contributed by Kristján Valur Jónsson; :issue:`4879`.)"
msgstr ""

msgid "The :class:`~httplib.HTTPConnection` and :class:`~httplib.HTTPSConnection` classes now support a *source_address* parameter, a ``(host, port)`` 2-tuple giving the source address that will be used for the connection. (Contributed by Eldon Ziegler; :issue:`3972`.)"
msgstr ""

msgid "The :mod:`ihooks` module now supports relative imports.  Note that :mod:`ihooks` is an older module for customizing imports, superseded by the :mod:`imputil` module added in Python 2.0. (Relative import support added by Neil Schemenauer.)"
msgstr ""

msgid "The :mod:`imaplib` module now supports IPv6 addresses. (Contributed by Derek Morr; :issue:`1655`.)"
msgstr ""

msgid "New function: the :mod:`inspect` module's :func:`~inspect.getcallargs` takes a callable and its positional and keyword arguments, and figures out which of the callable's parameters will receive each argument, returning a dictionary mapping argument names to their values.  For example::"
msgstr ""

msgid ">>> from inspect import getcallargs >>> def f(a, b=1, *pos, **named): ...     pass >>> getcallargs(f, 1, 2, 3) {'a': 1, 'b': 2, 'pos': (3,), 'named': {}} >>> getcallargs(f, a=2, x=4) {'a': 2, 'b': 1, 'pos': (), 'named': {'x': 4}} >>> getcallargs(f) Traceback (most recent call last): ... TypeError: f() takes at least 1 argument (0 given)"
msgstr ""

msgid "Contributed by George Sakkis; :issue:`3135`."
msgstr ""

msgid "Updated module: The :mod:`io` library has been upgraded to the version shipped with Python 3.1.  For 3.1, the I/O library was entirely rewritten in C and is 2 to 20 times faster depending on the task being performed.  The original Python version was renamed to the :mod:`_pyio` module."
msgstr ""

msgid "One minor resulting change: the :class:`io.TextIOBase` class now has an :attr:`errors` attribute giving the error setting used for encoding and decoding errors (one of ``'strict'``, ``'replace'``, ``'ignore'``)."
msgstr ""

msgid "The :class:`io.FileIO` class now raises an :exc:`OSError` when passed an invalid file descriptor.  (Implemented by Benjamin Peterson; :issue:`4991`.)  The :meth:`~io.IOBase.truncate` method now preserves the file position; previously it would change the file position to the end of the new file.  (Fixed by Pascal Chambon; :issue:`6939`.)"
msgstr ""

msgid "New function: ``itertools.compress(data, selectors)`` takes two iterators.  Elements of *data* are returned if the corresponding value in *selectors* is true::"
msgstr ""

msgid "itertools.compress('ABCDEF', [1,0,1,0,1,1]) =>   A, C, E, F"
msgstr ""

msgid "New function: ``itertools.combinations_with_replacement(iter, r)`` returns all the possible *r*-length combinations of elements from the iterable *iter*.  Unlike :func:`~itertools.combinations`, individual elements can be repeated in the generated combinations::"
msgstr ""

msgid "itertools.combinations_with_replacement('abc', 2) =>   ('a', 'a'), ('a', 'b'), ('a', 'c'),   ('b', 'b'), ('b', 'c'), ('c', 'c')"
msgstr ""

msgid "Note that elements are treated as unique depending on their position in the input, not their actual values."
msgstr ""

msgid "The :func:`itertools.count` function now has a *step* argument that allows incrementing by values other than 1.  :func:`~itertools.count` also now allows keyword arguments, and using non-integer values such as floats or :class:`~decimal.Decimal` instances.  (Implemented by Raymond Hettinger; :issue:`5032`.)"
msgstr ""

msgid ":func:`itertools.combinations` and :func:`itertools.product` previously raised :exc:`ValueError` for values of *r* larger than the input iterable.  This was deemed a specification error, so they now return an empty iterator.  (Fixed by Raymond Hettinger; :issue:`4816`.)"
msgstr ""

msgid "Updated module: The :mod:`json` module was upgraded to version 2.0.9 of the simplejson package, which includes a C extension that makes encoding and decoding faster. (Contributed by Bob Ippolito; :issue:`4136`.)"
msgstr ""

msgid "To support the new :class:`collections.OrderedDict` type, :func:`json.load` now has an optional *object_pairs_hook* parameter that will be called with any object literal that decodes to a list of pairs. (Contributed by Raymond Hettinger; :issue:`5381`.)"
msgstr ""

msgid "The :mod:`mailbox` module's :class:`Maildir` class now records the timestamp on the directories it reads, and only re-reads them if the modification time has subsequently changed.  This improves performance by avoiding unneeded directory scans.  (Fixed by A.M. Kuchling and Antoine Pitrou; :issue:`1607951`, :issue:`6896`.)"
msgstr ""

msgid "New functions: the :mod:`math` module gained :func:`~math.erf` and :func:`~math.erfc` for the error function and the complementary error function, :func:`~math.expm1` which computes ``e**x - 1`` with more precision than using :func:`~math.exp` and subtracting 1, :func:`~math.gamma` for the Gamma function, and :func:`~math.lgamma` for the natural log of the Gamma function. (Contributed by Mark Dickinson and nirinA raseliarison; :issue:`3366`.)"
msgstr ""

msgid "The :mod:`multiprocessing` module's :class:`Manager*` classes can now be passed a callable that will be called whenever a subprocess is started, along with a set of arguments that will be passed to the callable. (Contributed by lekma; :issue:`5585`.)"
msgstr ""

msgid "The :class:`~multiprocessing.Pool` class, which controls a pool of worker processes, now has an optional *maxtasksperchild* parameter.  Worker processes will perform the specified number of tasks and then exit, causing the :class:`~multiprocessing.Pool` to start a new worker.  This is useful if tasks may leak memory or other resources, or if some tasks will cause the worker to become very large. (Contributed by Charles Cazabon; :issue:`6963`.)"
msgstr ""

msgid "The :mod:`nntplib` module now supports IPv6 addresses. (Contributed by Derek Morr; :issue:`1664`.)"
msgstr ""

msgid "New functions: the :mod:`os` module wraps the following POSIX system calls: :func:`~os.getresgid` and :func:`~os.getresuid`, which return the real, effective, and saved GIDs and UIDs; :func:`~os.setresgid` and :func:`~os.setresuid`, which set real, effective, and saved GIDs and UIDs to new values; :func:`~os.initgroups`, which initialize the group access list for the current process.  (GID/UID functions contributed by Travis H.; :issue:`6508`.  Support for initgroups added by Jean-Paul Calderone; :issue:`7333`.)"
msgstr ""

msgid "The :func:`os.fork` function now re-initializes the import lock in the child process; this fixes problems on Solaris when :func:`~os.fork` is called from a thread.  (Fixed by Zsolt Cserna; :issue:`7242`.)"
msgstr ""

msgid "In the :mod:`os.path` module, the :func:`~os.path.normpath` and :func:`~os.path.abspath` functions now preserve Unicode; if their input path is a Unicode string, the return value is also a Unicode string. (:meth:`~os.path.normpath` fixed by Matt Giuca in :issue:`5827`; :meth:`~os.path.abspath` fixed by Ezio Melotti in :issue:`3426`.)"
msgstr ""

msgid "The :mod:`pydoc` module now has help for the various symbols that Python uses.  You can now do ``help('<<')`` or ``help('@')``, for example. (Contributed by David Laban; :issue:`4739`.)"
msgstr ""

msgid "The :mod:`re` module's :func:`~re.split`, :func:`~re.sub`, and :func:`~re.subn` now accept an optional *flags* argument, for consistency with the other functions in the module.  (Added by Gregory P. Smith.)"
msgstr ""

msgid "New function: :func:`~runpy.run_path` in the :mod:`runpy` module will execute the code at a provided *path* argument.  *path* can be the path of a Python source file (:file:`example.py`), a compiled bytecode file (:file:`example.pyc`), a directory (:file:`./package/`), or a zip archive (:file:`example.zip`).  If a directory or zip path is provided, it will be added to the front of ``sys.path`` and the module :mod:`__main__` will be imported.  It's expected that the directory or zip contains a :file:`__main__.py`; if it doesn't, some other :file:`__main__.py` might be imported from a location later in ``sys.path``.  This makes some of the machinery of :mod:`runpy` available to scripts that want to mimic the way Python's :option:`-m` processes an explicit path name. (Added by Nick Coghlan; :issue:`6816`.)"
msgstr ""

msgid "New function: in the :mod:`shutil` module, :func:`~shutil.make_archive` takes a filename, archive type (zip or tar-format), and a directory path, and creates an archive containing the directory's contents. (Added by Tarek Ziadé.)"
msgstr ""

msgid ":mod:`shutil`'s :func:`~shutil.copyfile` and :func:`~shutil.copytree` functions now raise a :exc:`~shutil.SpecialFileError` exception when asked to copy a named pipe.  Previously the code would treat named pipes like a regular file by opening them for reading, and this would block indefinitely.  (Fixed by Antoine Pitrou; :issue:`3002`.)"
msgstr ""

msgid "The :mod:`signal` module no longer re-installs the signal handler unless this is truly necessary, which fixes a bug that could make it impossible to catch the EINTR signal robustly.  (Fixed by Charles-Francois Natali; :issue:`8354`.)"
msgstr ""

msgid "New functions: in the :mod:`site` module, three new functions return various site- and user-specific paths. :func:`~site.getsitepackages` returns a list containing all global site-packages directories, :func:`~site.getusersitepackages` returns the path of the user's site-packages directory, and :func:`~site.getuserbase` returns the value of the :envvar:`USER_BASE` environment variable, giving the path to a directory that can be used to store data. (Contributed by Tarek Ziadé; :issue:`6693`.)"
msgstr ""

msgid "The :mod:`site` module now reports exceptions occurring when the :mod:`sitecustomize` module is imported, and will no longer catch and swallow the :exc:`KeyboardInterrupt` exception.  (Fixed by Victor Stinner; :issue:`3137`.)"
msgstr ""

msgid "The :func:`~socket.create_connection` function gained a *source_address* parameter, a ``(host, port)`` 2-tuple giving the source address that will be used for the connection. (Contributed by Eldon Ziegler; :issue:`3972`.)"
msgstr ""

msgid "The :meth:`~socket.socket.recv_into` and :meth:`~socket.socket.recvfrom_into` methods will now write into objects that support the buffer API, most usefully the :class:`bytearray` and :class:`memoryview` objects.  (Implemented by Antoine Pitrou; :issue:`8104`.)"
msgstr ""

msgid "The :mod:`SocketServer` module's :class:`~SocketServer.TCPServer` class now supports socket timeouts and disabling the Nagle algorithm. The :attr:`~SocketServer.TCPServer.disable_nagle_algorithm` class attribute defaults to False; if overridden to be True, new request connections will have the TCP_NODELAY option set to prevent buffering many small sends into a single TCP packet. The :attr:`~SocketServer.TCPServer.timeout` class attribute can hold a timeout in seconds that will be applied to the request socket; if no request is received within that time, :meth:`handle_timeout` will be called and :meth:`handle_request` will return. (Contributed by Kristján Valur Jónsson; :issue:`6192` and :issue:`6267`.)"
msgstr ""

msgid "Updated module: the :mod:`sqlite3` module has been updated to version 2.6.0 of the `pysqlite package <http://code.google.com/p/pysqlite/>`__. Version 2.6.0 includes a number of bugfixes, and adds the ability to load SQLite extensions from shared libraries. Call the ``enable_load_extension(True)`` method to enable extensions, and then call :meth:`~sqlite3.Connection.load_extension` to load a particular shared library. (Updated by Gerhard Häring.)"
msgstr ""

msgid "The :mod:`ssl` module's :class:`ssl.SSLSocket` objects now support the buffer API, which fixed a test suite failure (fix by Antoine Pitrou; :issue:`7133`) and automatically set OpenSSL's :cmacro:`SSL_MODE_AUTO_RETRY`, which will prevent an error code being returned from :meth:`recv` operations that trigger an SSL renegotiation (fix by Antoine Pitrou; :issue:`8222`)."
msgstr ""

msgid "The :func:`ssl.wrap_socket` constructor function now takes a *ciphers* argument that's a string listing the encryption algorithms to be allowed; the format of the string is described `in the OpenSSL documentation <http://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT>`__. (Added by Antoine Pitrou; :issue:`8322`.)"
msgstr ""

msgid "Another change makes the extension load all of OpenSSL's ciphers and digest algorithms so that they're all available.  Some SSL certificates couldn't be verified, reporting an \"unknown algorithm\" error.  (Reported by Beda Kosata, and fixed by Antoine Pitrou; :issue:`8484`.)"
msgstr ""

msgid "The version of OpenSSL being used is now available as the module attributes :data:`ssl.OPENSSL_VERSION` (a string), :data:`ssl.OPENSSL_VERSION_INFO` (a 5-tuple), and :data:`ssl.OPENSSL_VERSION_NUMBER` (an integer).  (Added by Antoine Pitrou; :issue:`8321`.)"
msgstr ""

msgid "The :mod:`struct` module will no longer silently ignore overflow errors when a value is too large for a particular integer format code (one of ``bBhHiIlLqQ``); it now always raises a :exc:`struct.error` exception.  (Changed by Mark Dickinson; :issue:`1523`.)  The :func:`~struct.pack` function will also attempt to use :meth:`__index__` to convert and pack non-integers before trying the :meth:`__int__` method or reporting an error. (Changed by Mark Dickinson; :issue:`8300`.)"
msgstr ""

msgid "New function: the :mod:`subprocess` module's :func:`~subprocess.check_output` runs a command with a specified set of arguments and returns the command's output as a string when the command runs without error, or raises a :exc:`~subprocess.CalledProcessError` exception otherwise."
msgstr ""

msgid ">>> subprocess.check_output(['df', '-h', '.']) 'Filesystem     Size   Used  Avail Capacity  Mounted on\\n /dev/disk0s2    52G    49G   3.0G    94%    /\\n'  >>> subprocess.check_output(['df', '-h', '/bogus'])   ... subprocess.CalledProcessError: Command '['df', '-h', '/bogus']' returned non-zero exit status 1"
msgstr ""

msgid "(Contributed by Gregory P. Smith.)"
msgstr ""

msgid "The :mod:`subprocess` module will now retry its internal system calls on receiving an :const:`EINTR` signal.  (Reported by several people; final patch by Gregory P. Smith in :issue:`1068268`.)"
msgstr ""

msgid "New function: :func:`~symtable.is_declared_global` in the :mod:`symtable` module returns true for variables that are explicitly declared to be global, false for ones that are implicitly global. (Contributed by Jeremy Hylton.)"
msgstr ""

msgid "The :mod:`syslog` module will now use the value of ``sys.argv[0]`` as the identifier instead of the previous default value of ``'python'``. (Changed by Sean Reifschneider; :issue:`8451`.)"
msgstr ""

msgid "The ``sys.version_info`` value is now a named tuple, with attributes named :attr:`major`, :attr:`minor`, :attr:`micro`, :attr:`releaselevel`, and :attr:`serial`.  (Contributed by Ross Light; :issue:`4285`.)"
msgstr ""

msgid ":func:`sys.getwindowsversion` also returns a named tuple, with attributes named :attr:`major`, :attr:`minor`, :attr:`build`, :attr:`platform`, :attr:`service_pack`, :attr:`service_pack_major`, :attr:`service_pack_minor`, :attr:`suite_mask`, and :attr:`product_type`.  (Contributed by Brian Curtin; :issue:`7766`.)"
msgstr ""

msgid "The :mod:`tarfile` module's default error handling has changed, to no longer suppress fatal errors.  The default error level was previously 0, which meant that errors would only result in a message being written to the debug log, but because the debug log is not activated by default, these errors go unnoticed.  The default error level is now 1, which raises an exception if there's an error. (Changed by Lars Gustäbel; :issue:`7357`.)"
msgstr ""

msgid ":mod:`tarfile` now supports filtering the :class:`~tarfile.TarInfo` objects being added to a tar file.  When you call :meth:`~tarfile.TarFile.add`, you may supply an optional *filter* argument that's a callable.  The *filter* callable will be passed the :class:`~tarfile.TarInfo` for every file being added, and can modify and return it. If the callable returns ``None``, the file will be excluded from the resulting archive.  This is more powerful than the existing *exclude* argument, which has therefore been deprecated. (Added by Lars Gustäbel; :issue:`6856`.) The :class:`~tarfile.TarFile` class also now supports the context manager protocol. (Added by Lars Gustäbel; :issue:`7232`.)"
msgstr ""

msgid "The :meth:`~threading.Event.wait` method of the :class:`threading.Event` class now returns the internal flag on exit.  This means the method will usually return true because :meth:`~threading.Event.wait` is supposed to block until the internal flag becomes true.  The return value will only be false if a timeout was provided and the operation timed out. (Contributed by Tim Lesher; :issue:`1674032`.)"
msgstr ""

msgid "The Unicode database provided by the :mod:`unicodedata` module is now used internally to determine which characters are numeric, whitespace, or represent line breaks.  The database also includes information from the :file:`Unihan.txt` data file (patch by Anders Chrigström and Amaury Forgeot d'Arc; :issue:`1571184`) and has been updated to version 5.2.0 (updated by Florent Xicluna; :issue:`8024`)."
msgstr ""

msgid "The :mod:`urlparse` module's :func:`~urlparse.urlsplit` now handles unknown URL schemes in a fashion compliant with :rfc:`3986`: if the URL is of the form ``\"<something>://...\"``, the text before the ``://`` is treated as the scheme, even if it's a made-up scheme that the module doesn't know about.  This change may break code that worked around the old behaviour.  For example, Python 2.6.4 or 2.5 will return the following:"
msgstr ""

msgid ">>> import urlparse >>> urlparse.urlsplit('invented://host/filename?query') ('invented', '', '//host/filename?query', '', '')"
msgstr ""

msgid "Python 2.7 (and Python 2.6.5) will return:"
msgstr ""

msgid ">>> import urlparse >>> urlparse.urlsplit('invented://host/filename?query') ('invented', 'host', '/filename?query', '', '')"
msgstr ""

msgid "(Python 2.7 actually produces slightly different output, since it returns a named tuple instead of a standard tuple.)"
msgstr ""

msgid "The :mod:`urlparse` module also supports IPv6 literal addresses as defined by :rfc:`2732` (contributed by Senthil Kumaran; :issue:`2987`). ::"
msgstr ""

msgid ">>> urlparse.urlparse('http://[1080::8:800:200C:417A]/foo') ParseResult(scheme='http', netloc='[1080::8:800:200C:417A]',             path='/foo', params='', query='', fragment='')"
msgstr ""

msgid "New class: the :class:`~weakref.WeakSet` class in the :mod:`weakref` module is a set that only holds weak references to its elements; elements will be removed once there are no references pointing to them. (Originally implemented in Python 3.x by Raymond Hettinger, and backported to 2.7 by Michael Foord.)"
msgstr ""

msgid "The ElementTree library, :mod:`xml.etree`, no longer escapes ampersands and angle brackets when outputting an XML processing instruction (which looks like ``<?xml-stylesheet href=\"#style1\"?>``) or comment (which looks like ``<!-- comment -->``). (Patch by Neil Muller; :issue:`2746`.)"
msgstr ""

msgid "The XML-RPC client and server, provided by the :mod:`xmlrpclib` and :mod:`SimpleXMLRPCServer` modules, have improved performance by supporting HTTP/1.1 keep-alive and by optionally using gzip encoding to compress the XML being exchanged.  The gzip compression is controlled by the :attr:`encode_threshold` attribute of :class:`SimpleXMLRPCRequestHandler`, which contains a size in bytes; responses larger than this will be compressed. (Contributed by Kristján Valur Jónsson; :issue:`6267`.)"
msgstr ""

msgid "The :mod:`zipfile` module's :class:`~zipfile.ZipFile` now supports the context management protocol, so you can write ``with zipfile.ZipFile(...) as f:``. (Contributed by Brian Curtin; :issue:`5511`.)"
msgstr ""

msgid ":mod:`zipfile` now also supports archiving empty directories and extracts them correctly.  (Fixed by Kuba Wieczorek; :issue:`4710`.) Reading files out of an archive is faster, and interleaving :meth:`~zipfile.ZipFile.read` and :meth:`~zipfile.ZipFile.readline` now works correctly. (Contributed by Nir Aides; :issue:`7610`.)"
msgstr ""

msgid "The :func:`~zipfile.is_zipfile` function now accepts a file object, in addition to the path names accepted in earlier versions.  (Contributed by Gabriel Genellina; :issue:`4756`.)"
msgstr ""

msgid "The :meth:`~zipfile.ZipFile.writestr` method now has an optional *compress_type* parameter that lets you override the default compression method specified in the :class:`~zipfile.ZipFile` constructor.  (Contributed by Ronald Oussoren; :issue:`6003`.)"
msgstr ""

msgid "New module: importlib"
msgstr ""

msgid "Python 3.1 includes the :mod:`importlib` package, a re-implementation of the logic underlying Python's :keyword:`import` statement. :mod:`importlib` is useful for implementors of Python interpreters and to users who wish to write new importers that can participate in the import process.  Python 2.7 doesn't contain the complete :mod:`importlib` package, but instead has a tiny subset that contains a single function, :func:`~importlib.import_module`."
msgstr ""

msgid "``import_module(name, package=None)`` imports a module.  *name* is a string containing the module or package's name.  It's possible to do relative imports by providing a string that begins with a ``.`` character, such as ``..utils.errors``.  For relative imports, the *package* argument must be provided and is the name of the package that will be used as the anchor for the relative import.  :func:`~importlib.import_module` both inserts the imported module into ``sys.modules`` and returns the module object."
msgstr ""

msgid "Here are some examples::"
msgstr ""

msgid ">>> from importlib import import_module >>> anydbm = import_module('anydbm')  # Standard absolute import >>> anydbm <module 'anydbm' from '/p/python/Lib/anydbm.py'> >>> # Relative import >>> file_util = import_module('..file_util', 'distutils.command') >>> file_util <module 'distutils.file_util' from '/python/Lib/distutils/file_util.pyc'>"
msgstr ""

msgid ":mod:`importlib` was implemented by Brett Cannon and introduced in Python 3.1."
msgstr ""

msgid "New module: sysconfig"
msgstr ""

msgid "The :mod:`sysconfig` module has been pulled out of the Distutils package, becoming a new top-level module in its own right. :mod:`sysconfig` provides functions for getting information about Python's build process: compiler switches, installation paths, the platform name, and whether Python is running from its source directory."
msgstr ""

msgid "Some of the functions in the module are:"
msgstr ""

msgid ":func:`~sysconfig.get_config_var` returns variables from Python's Makefile and the :file:`pyconfig.h` file."
msgstr ""

msgid ":func:`~sysconfig.get_config_vars` returns a dictionary containing all of the configuration variables."
msgstr ""

msgid ":func:`~sysconfig.getpath` returns the configured path for a particular type of module: the standard library, site-specific modules, platform-specific modules, etc."
msgstr ""

msgid ":func:`~sysconfig.is_python_build` returns true if you're running a binary from a Python source tree, and false otherwise."
msgstr ""

msgid "Consult the :mod:`sysconfig` documentation for more details and for a complete list of functions."
msgstr ""

msgid "The Distutils package and :mod:`sysconfig` are now maintained by Tarek Ziadé, who has also started a Distutils2 package (source repository at http://hg.python.org/distutils2/) for developing a next-generation version of Distutils."
msgstr ""

msgid "ttk: Themed Widgets for Tk"
msgstr ""

msgid "Tcl/Tk 8.5 includes a set of themed widgets that re-implement basic Tk widgets but have a more customizable appearance and can therefore more closely resemble the native platform's widgets.  This widget set was originally called Tile, but was renamed to Ttk (for \"themed Tk\") on being added to Tcl/Tck release 8.5."
msgstr ""

msgid "To learn more, read the :mod:`ttk` module documentation.  You may also wish to read the Tcl/Tk manual page describing the Ttk theme engine, available at http://www.tcl.tk/man/tcl8.5/TkCmd/ttk_intro.htm. Some screenshots of the Python/Ttk code in use are at http://code.google.com/p/python-ttk/wiki/Screenshots."
msgstr ""

msgid "The :mod:`ttk` module was written by Guilherme Polo and added in :issue:`2983`.  An alternate version called ``Tile.py``, written by Martin Franklin and maintained by Kevin Walzer, was proposed for inclusion in :issue:`2618`, but the authors argued that Guilherme Polo's work was more comprehensive."
msgstr ""

msgid "Updated module: unittest"
msgstr ""

msgid "The :mod:`unittest` module was greatly enhanced; many new features were added.  Most of these features were implemented by Michael Foord, unless otherwise noted.  The enhanced version of the module is downloadable separately for use with Python versions 2.4 to 2.6, packaged as the :mod:`unittest2` package, from http://pypi.python.org/pypi/unittest2."
msgstr ""

msgid "When used from the command line, the module can automatically discover tests.  It's not as fancy as `py.test <http://pytest.org>`__ or `nose <http://code.google.com/p/python-nose/>`__, but provides a simple way to run tests kept within a set of package directories.  For example, the following command will search the :file:`test/` subdirectory for any importable test files named ``test*.py``::"
msgstr ""

msgid "python -m unittest discover -s test"
msgstr ""

msgid "Consult the :mod:`unittest` module documentation for more details. (Developed in :issue:`6001`.)"
msgstr ""

msgid "The :func:`main` function supports some other new options:"
msgstr ""

msgid ":option:`-b` or :option:`--buffer` will buffer the standard output and standard error streams during each test.  If the test passes, any resulting output will be discarded; on failure, the buffered output will be displayed."
msgstr ""

msgid ":option:`-c` or :option:`--catch` will cause the control-C interrupt to be handled more gracefully.  Instead of interrupting the test process immediately, the currently running test will be completed and then the partial results up to the interruption will be reported. If you're impatient, a second press of control-C will cause an immediate interruption."
msgstr ""

msgid "This control-C handler tries to avoid causing problems when the code being tested or the tests being run have defined a signal handler of their own, by noticing that a signal handler was already set and calling it.  If this doesn't work for you, there's a :func:`removeHandler` decorator that can be used to mark tests that should have the control-C handling disabled."
msgstr ""

msgid ":option:`-f` or :option:`--failfast` makes test execution stop immediately when a test fails instead of continuing to execute further tests.  (Suggested by Cliff Dyer and implemented by Michael Foord; :issue:`8074`.)"
msgstr ""

msgid "The progress messages now show 'x' for expected failures and 'u' for unexpected successes when run in verbose mode. (Contributed by Benjamin Peterson.)"
msgstr ""

msgid "Test cases can raise the :exc:`~unittest.SkipTest` exception to skip a test (:issue:`1034053`)."
msgstr ""

msgid "The error messages for :meth:`~unittest.TestCase.assertEqual`, :meth:`~unittest.TestCase.assertTrue`, and :meth:`~unittest.TestCase.assertFalse` failures now provide more information.  If you set the :attr:`~unittest.TestCase.longMessage` attribute of your :class:`~unittest.TestCase` classes to True, both the standard error message and any additional message you provide will be printed for failures.  (Added by Michael Foord; :issue:`5663`.)"
msgstr ""

msgid "The :meth:`~unittest.TestCase.assertRaises` method now returns a context handler when called without providing a callable object to run.  For example, you can write this::"
msgstr ""

msgid "with self.assertRaises(KeyError):     {}['foo']"
msgstr ""

msgid "(Implemented by Antoine Pitrou; :issue:`4444`.)"
msgstr ""

msgid "Module- and class-level setup and teardown fixtures are now supported. Modules can contain :func:`~unittest.setUpModule` and :func:`~unittest.tearDownModule` functions.  Classes can have :meth:`~unittest.TestCase.setUpClass` and :meth:`~unittest.TestCase.tearDownClass` methods that must be defined as class methods (using ``@classmethod`` or equivalent).  These functions and methods are invoked when the test runner switches to a test case in a different module or class."
msgstr ""

msgid "The methods :meth:`~unittest.TestCase.addCleanup` and :meth:`~unittest.TestCase.doCleanups` were added. :meth:`~unittest.TestCase.addCleanup` lets you add cleanup functions that will be called unconditionally (after :meth:`~unittest.TestCase.setUp` if :meth:`~unittest.TestCase.setUp` fails, otherwise after :meth:`~unittest.TestCase.tearDown`). This allows for much simpler resource allocation and deallocation during tests (:issue:`5679`)."
msgstr ""

msgid "A number of new methods were added that provide more specialized tests.  Many of these methods were written by Google engineers for use in their test suites; Gregory P. Smith, Michael Foord, and GvR worked on merging them into Python's version of :mod:`unittest`."
msgstr ""

msgid ":meth:`~unittest.TestCase.assertIsNone` and :meth:`~unittest.TestCase.assertIsNotNone` take one expression and verify that the result is or is not ``None``."
msgstr ""

msgid ":meth:`~unittest.TestCase.assertIs` and :meth:`~unittest.TestCase.assertIsNot` take two values and check whether the two values evaluate to the same object or not. (Added by Michael Foord; :issue:`2578`.)"
msgstr ""

msgid ":meth:`~unittest.TestCase.assertIsInstance` and :meth:`~unittest.TestCase.assertNotIsInstance` check whether the resulting object is an instance of a particular class, or of one of a tuple of classes.  (Added by Georg Brandl; :issue:`7031`.)"
msgstr ""

msgid ":meth:`~unittest.TestCase.assertGreater`, :meth:`~unittest.TestCase.assertGreaterEqual`, :meth:`~unittest.TestCase.assertLess`, and :meth:`~unittest.TestCase.assertLessEqual` compare two quantities."
msgstr ""

msgid ":meth:`~unittest.TestCase.assertMultiLineEqual` compares two strings, and if they're not equal, displays a helpful comparison that highlights the differences in the two strings.  This comparison is now used by default when Unicode strings are compared with :meth:`~unittest.TestCase.assertEqual`."
msgstr ""

msgid ":meth:`~unittest.TestCase.assertRegexpMatches` and :meth:`~unittest.TestCase.assertNotRegexpMatches` checks whether the first argument is a string matching or not matching the regular expression provided as the second argument (:issue:`8038`)."
msgstr ""

msgid ":meth:`~unittest.TestCase.assertRaisesRegexp` checks whether a particular exception is raised, and then also checks that the string representation of the exception matches the provided regular expression."
msgstr ""

msgid ":meth:`~unittest.TestCase.assertIn` and :meth:`~unittest.TestCase.assertNotIn` tests whether *first* is or is not in  *second*."
msgstr ""

msgid ":meth:`~unittest.TestCase.assertItemsEqual` tests whether two provided sequences contain the same elements."
msgstr ""

msgid ":meth:`~unittest.TestCase.assertSetEqual` compares whether two sets are equal, and only reports the differences between the sets in case of error."
msgstr ""

msgid "Similarly, :meth:`~unittest.TestCase.assertListEqual` and :meth:`~unittest.TestCase.assertTupleEqual` compare the specified types and explain any differences without necessarily printing their full values; these methods are now used by default when comparing lists and tuples using :meth:`~unittest.TestCase.assertEqual`. More generally, :meth:`~unittest.TestCase.assertSequenceEqual` compares two sequences and can optionally check whether both sequences are of a particular type."
msgstr ""

msgid ":meth:`~unittest.TestCase.assertDictEqual` compares two dictionaries and reports the differences; it's now used by default when you compare two dictionaries using :meth:`~unittest.TestCase.assertEqual`.  :meth:`~unittest.TestCase.assertDictContainsSubset` checks whether all of the key/value pairs in *first* are found in *second*."
msgstr ""

msgid ":meth:`~unittest.TestCase.assertAlmostEqual` and :meth:`~unittest.TestCase.assertNotAlmostEqual` test whether *first* and *second* are approximately equal.  This method can either round their difference to an optionally-specified number of *places* (the default is 7) and compare it to zero, or require the difference to be smaller than a supplied *delta* value."
msgstr ""

msgid ":meth:`~unittest.TestLoader.loadTestsFromName` properly honors the :attr:`~unittest.TestLoader.suiteClass` attribute of the :class:`~unittest.TestLoader`. (Fixed by Mark Roddy; :issue:`6866`.)"
msgstr ""

msgid "A new hook lets you extend the :meth:`~unittest.TestCase.assertEqual` method to handle new data types.  The :meth:`~unittest.TestCase.addTypeEqualityFunc` method takes a type object and a function. The function will be used when both of the objects being compared are of the specified type.  This function should compare the two objects and raise an exception if they don't match; it's a good idea for the function to provide additional information about why the two objects aren't matching, much as the new sequence comparison methods do."
msgstr ""

msgid ":func:`unittest.main` now takes an optional ``exit`` argument.  If False, :func:`~unittest.main` doesn't call :func:`sys.exit`, allowing :func:`main` to be used from the interactive interpreter. (Contributed by J. Pablo Fernández; :issue:`3379`.)"
msgstr ""

msgid ":class:`~unittest.TestResult` has new :meth:`~unittest.TestResult.startTestRun` and :meth:`~unittest.TestResult.stopTestRun` methods that are called immediately before and after a test run.  (Contributed by Robert Collins; :issue:`5728`.)"
msgstr ""

msgid "With all these changes, the :file:`unittest.py` was becoming awkwardly large, so the module was turned into a package and the code split into several files (by Benjamin Peterson).  This doesn't affect how the module is imported or used."
msgstr ""

msgid "Describes the new features, how to use them, and the rationale for various design decisions.  (By Michael Foord.)"
msgstr ""

msgid "Updated module: ElementTree 1.3"
msgstr ""

msgid "The version of the ElementTree library included with Python was updated to version 1.3.  Some of the new features are:"
msgstr ""

msgid "The various parsing functions now take a *parser* keyword argument giving an :class:`XMLParser` instance that will be used.  This makes it possible to override the file's internal encoding::"
msgstr ""

msgid "p = ET.XMLParser(encoding='utf-8') t = ET.XML(\"\"\"<root/>\"\"\", parser=p)"
msgstr ""

msgid "Errors in parsing XML now raise a :exc:`ParseError` exception, whose instances have a :attr:`position` attribute containing a (*line*, *column*) tuple giving the location of the problem."
msgstr ""

msgid "ElementTree's code for converting trees to a string has been significantly reworked, making it roughly twice as fast in many cases.  The :class:`ElementTree` :meth:`write` and :class:`Element` :meth:`write` methods now have a *method* parameter that can be \"xml\" (the default), \"html\", or \"text\".  HTML mode will output empty elements as ``<empty></empty>`` instead of ``<empty/>``, and text mode will skip over elements and only output the text chunks.  If you set the :attr:`tag` attribute of an element to ``None`` but leave its children in place, the element will be omitted when the tree is written out, so you don't need to do more extensive rearrangement to remove a single element."
msgstr ""

msgid "Namespace handling has also been improved.  All ``xmlns:<whatever>`` declarations are now output on the root element, not scattered throughout the resulting XML.  You can set the default namespace for a tree by setting the :attr:`default_namespace` attribute and can register new prefixes with :meth:`register_namespace`.  In XML mode, you can use the true/false *xml_declaration* parameter to suppress the XML declaration."
msgstr ""

msgid "New :class:`Element` method: :meth:`extend` appends the items from a sequence to the element's children.  Elements themselves behave like sequences, so it's easy to move children from one element to another::"
msgstr ""

msgid "from xml.etree import ElementTree as ET  t = ET.XML(\"\"\"<list>   <item>1</item> <item>2</item>  <item>3</item> </list>\"\"\") new = ET.XML('<root/>') new.extend(t)  # Outputs <root><item>1</item>...</root> print ET.tostring(new)"
msgstr ""

msgid "New :class:`Element` method: :meth:`iter` yields the children of the element as a generator.  It's also possible to write ``for child in elem:`` to loop over an element's children.  The existing method :meth:`getiterator` is now deprecated, as is :meth:`getchildren` which constructs and returns a list of children."
msgstr ""

msgid "New :class:`Element` method: :meth:`itertext` yields all chunks of text that are descendants of the element.  For example::"
msgstr ""

msgid "t = ET.XML(\"\"\"<list>   <item>1</item> <item>2</item>  <item>3</item> </list>\"\"\")  # Outputs ['\\n  ', '1', ' ', '2', '  ', '3', '\\n'] print list(t.itertext())"
msgstr ""

msgid "Deprecated: using an element as a Boolean (i.e., ``if elem:``) would return true if the element had any children, or false if there were no children.  This behaviour is confusing -- ``None`` is false, but so is a childless element? -- so it will now trigger a :exc:`FutureWarning`.  In your code, you should be explicit: write ``len(elem) != 0`` if you're interested in the number of children, or ``elem is not None``."
msgstr ""

msgid "Fredrik Lundh develops ElementTree and produced the 1.3 version; you can read his article describing 1.3 at http://effbot.org/zone/elementtree-13-intro.htm. Florent Xicluna updated the version included with Python, after discussions on python-dev and in :issue:`6472`.)"
msgstr ""

msgid "The latest release of the GNU Debugger, GDB 7, can be `scripted using Python <http://sourceware.org/gdb/current/onlinedocs/gdb/Python.html>`__. When you begin debugging an executable program P, GDB will look for a file named ``P-gdb.py`` and automatically read it.  Dave Malcolm contributed a :file:`python-gdb.py` that adds a number of commands useful when debugging Python itself.  For example, ``py-up`` and ``py-down`` go up or down one Python stack frame, which usually corresponds to several C stack frames.  ``py-print`` prints the value of a Python variable, and ``py-bt`` prints the Python stack trace.  (Added as a result of :issue:`8032`.)"
msgstr ""

msgid "If you use the :file:`.gdbinit` file provided with Python, the \"pyo\" macro in the 2.7 version now works correctly when the thread being debugged doesn't hold the GIL; the macro now acquires it before printing. (Contributed by Victor Stinner; :issue:`3632`.)"
msgstr ""

msgid ":cfunc:`Py_AddPendingCall` is now thread-safe, letting any worker thread submit notifications to the main Python thread.  This is particularly useful for asynchronous IO operations. (Contributed by Kristján Valur Jónsson; :issue:`4293`.)"
msgstr ""

msgid "New function: :cfunc:`PyCode_NewEmpty` creates an empty code object; only the filename, function name, and first line number are required. This is useful for extension modules that are attempting to construct a more useful traceback stack.  Previously such extensions needed to call :cfunc:`PyCode_New`, which had many more arguments.  (Added by Jeffrey Yasskin.)"
msgstr ""

msgid "New function: :cfunc:`PyErr_NewExceptionWithDoc` creates a new exception class, just as the existing :cfunc:`PyErr_NewException` does, but takes an extra ``char *`` argument containing the docstring for the new exception class.  (Added by 'lekma' on the Python bug tracker; :issue:`7033`.)"
msgstr ""

msgid "New function: :cfunc:`PyFrame_GetLineNumber` takes a frame object and returns the line number that the frame is currently executing. Previously code would need to get the index of the bytecode instruction currently executing, and then look up the line number corresponding to that address.  (Added by Jeffrey Yasskin.)"
msgstr ""

msgid "New functions: :cfunc:`PyLong_AsLongAndOverflow` and :cfunc:`PyLong_AsLongLongAndOverflow`  approximates a Python long integer as a C :ctype:`long` or :ctype:`long long`. If the number is too large to fit into the output type, an *overflow* flag is set and returned to the caller. (Contributed by Case Van Horsen; :issue:`7528` and :issue:`7767`.)"
msgstr ""

msgid "New function: stemming from the rewrite of string-to-float conversion, a new :cfunc:`PyOS_string_to_double` function was added.  The old :cfunc:`PyOS_ascii_strtod` and :cfunc:`PyOS_ascii_atof` functions are now deprecated."
msgstr ""

msgid "New function: :cfunc:`PySys_SetArgvEx` sets the value of ``sys.argv`` and can optionally update ``sys.path`` to include the directory containing the script named by ``sys.argv[0]`` depending on the value of an *updatepath* parameter."
msgstr ""

msgid "This function was added to close a security hole for applications that embed Python.  The old function, :cfunc:`PySys_SetArgv`, would always update ``sys.path``, and sometimes it would add the current directory.  This meant that, if you ran an application embedding Python in a directory controlled by someone else, attackers could put a Trojan-horse module in the directory (say, a file named :file:`os.py`) that your application would then import and run."
msgstr ""

msgid "If you maintain a C/C++ application that embeds Python, check whether you're calling :cfunc:`PySys_SetArgv` and carefully consider whether the application should be using :cfunc:`PySys_SetArgvEx` with *updatepath* set to false."
msgstr ""

msgid "Security issue reported as `CVE-2008-5983 <http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5983>`_; discussed in :issue:`5753`, and fixed by Antoine Pitrou."
msgstr ""

msgid "New macros: the Python header files now define the following macros: :cmacro:`Py_ISALNUM`, :cmacro:`Py_ISALPHA`, :cmacro:`Py_ISDIGIT`, :cmacro:`Py_ISLOWER`, :cmacro:`Py_ISSPACE`, :cmacro:`Py_ISUPPER`, :cmacro:`Py_ISXDIGIT`, and :cmacro:`Py_TOLOWER`, :cmacro:`Py_TOUPPER`. All of these functions are analogous to the C standard macros for classifying characters, but ignore the current locale setting, because in several places Python needs to analyze characters in a locale-independent way.  (Added by Eric Smith; :issue:`5793`.)"
msgstr ""

msgid "Removed function: :cmacro:`PyEval_CallObject` is now only available as a macro.  A function version was being kept around to preserve ABI linking compatibility, but that was in 1997; it can certainly be deleted by now.  (Removed by Antoine Pitrou; :issue:`8276`.)"
msgstr ""

msgid "New format codes: the :cfunc:`PyFormat_FromString`, :cfunc:`PyFormat_FromStringV`, and :cfunc:`PyErr_Format` functions now accept ``%lld`` and ``%llu`` format codes for displaying C's :ctype:`long long` types. (Contributed by Mark Dickinson; :issue:`7228`.)"
msgstr ""

msgid "The complicated interaction between threads and process forking has been changed.  Previously, the child process created by :func:`os.fork` might fail because the child is created with only a single thread running, the thread performing the :func:`os.fork`. If other threads were holding a lock, such as Python's import lock, when the fork was performed, the lock would still be marked as \"held\" in the new process.  But in the child process nothing would ever release the lock, since the other threads weren't replicated, and the child process would no longer be able to perform imports."
msgstr ""

msgid "Python 2.7 acquires the import lock before performing an :func:`os.fork`, and will also clean up any locks created using the :mod:`threading` module.  C extension modules that have internal locks, or that call :cfunc:`fork()` themselves, will not benefit from this clean-up."
msgstr ""

msgid "(Fixed by Thomas Wouters; :issue:`1590864`.)"
msgstr ""

msgid "The :cfunc:`Py_Finalize` function now calls the internal :func:`threading._shutdown` function; this prevents some exceptions from being raised when an interpreter shuts down. (Patch by Adam Olsen; :issue:`1722344`.)"
msgstr ""

msgid "When using the :ctype:`PyMemberDef` structure to define attributes of a type, Python will no longer let you try to delete or set a :const:`T_STRING_INPLACE` attribute."
msgstr ""

msgid "Global symbols defined by the :mod:`ctypes` module are now prefixed with ``Py``, or with ``_ctypes``.  (Implemented by Thomas Heller; :issue:`3102`.)"
msgstr ""

msgid "New configure option: the :option:`--with-system-expat` switch allows building the :mod:`pyexpat` module to use the system Expat library. (Contributed by Arfrever Frehtes Taifersar Arahesis; :issue:`7609`.)"
msgstr ""

msgid "New configure option: the :option:`--with-valgrind` option will now disable the pymalloc allocator, which is difficult for the Valgrind memory-error detector to analyze correctly. Valgrind will therefore be better at detecting memory leaks and overruns. (Contributed by James Henstridge; :issue:`2422`.)"
msgstr ""

msgid "New configure option: you can now supply an empty string to :option:`--with-dbmliborder=` in order to disable all of the various DBM modules.  (Added by Arfrever Frehtes Taifersar Arahesis; :issue:`6491`.)"
msgstr ""

msgid "The :program:`configure` script now checks for floating-point rounding bugs on certain 32-bit Intel chips and defines a :cmacro:`X87_DOUBLE_ROUNDING` preprocessor definition.  No code currently uses this definition, but it's available if anyone wishes to use it. (Added by Mark Dickinson; :issue:`2937`.)"
msgstr ""

msgid ":program:`configure` also now sets a :envvar:`LDCXXSHARED` Makefile variable for supporting C++ linking.  (Contributed by Arfrever Frehtes Taifersar Arahesis; :issue:`1222585`.)"
msgstr ""

msgid "The build process now creates the necessary files for pkg-config support.  (Contributed by Clinton Roy; :issue:`3585`.)"
msgstr ""

msgid "The build process now supports Subversion 1.7.  (Contributed by Arfrever Frehtes Taifersar Arahesis; :issue:`6094`.)"
msgstr ""

msgid "Capsules"
msgstr ""

msgid "Python 3.1 adds a new C datatype, :ctype:`PyCapsule`, for providing a C API to an extension module.  A capsule is essentially the holder of a C ``void *`` pointer, and is made available as a module attribute; for example, the :mod:`socket` module's API is exposed as ``socket.CAPI``, and :mod:`unicodedata` exposes ``ucnhash_CAPI``.  Other extensions can import the module, access its dictionary to get the capsule object, and then get the ``void *`` pointer, which will usually point to an array of pointers to the module's various API functions."
msgstr ""

msgid "There is an existing data type already used for this, :ctype:`PyCObject`, but it doesn't provide type safety.  Evil code written in pure Python could cause a segmentation fault by taking a :ctype:`PyCObject` from module A and somehow substituting it for the :ctype:`PyCObject` in module B.   Capsules know their own name, and getting the pointer requires providing the name::"
msgstr ""

msgid "void *vtable;  if (!PyCapsule_IsValid(capsule, \"mymodule.CAPI\") {         PyErr_SetString(PyExc_ValueError, \"argument type invalid\");         return NULL; }  vtable = PyCapsule_GetPointer(capsule, \"mymodule.CAPI\");"
msgstr ""

msgid "You are assured that ``vtable`` points to whatever you're expecting. If a different capsule was passed in, :cfunc:`PyCapsule_IsValid` would detect the mismatched name and return false.  Refer to :ref:`using-capsules` for more information on using these objects."
msgstr ""

msgid "Python 2.7 now uses capsules internally to provide various extension-module APIs, but the :cfunc:`PyCObject_AsVoidPtr` was modified to handle capsules, preserving compile-time compatibility with the :ctype:`CObject` interface.  Use of :cfunc:`PyCObject_AsVoidPtr` will signal a :exc:`PendingDeprecationWarning`, which is silent by default."
msgstr ""

msgid "Implemented in Python 3.1 and backported to 2.7 by Larry Hastings; discussed in :issue:`5630`."
msgstr ""

msgid "The :mod:`msvcrt` module now contains some constants from the :file:`crtassem.h` header file: :data:`CRT_ASSEMBLY_VERSION`, :data:`VC_ASSEMBLY_PUBLICKEYTOKEN`, and :data:`LIBRARIES_ASSEMBLY_NAME_PREFIX`. (Contributed by David Cournapeau; :issue:`4365`.)"
msgstr ""

msgid "The :mod:`_winreg` module for accessing the registry now implements the :func:`CreateKeyEx` and :func:`DeleteKeyEx` functions, extended versions of previously-supported functions that take several extra arguments.  The :func:`DisableReflectionKey`, :func:`EnableReflectionKey`, and :func:`QueryReflectionKey` were also tested and documented. (Implemented by Brian Curtin: :issue:`7347`.)"
msgstr ""

msgid "The new :cfunc:`_beginthreadex` API is used to start threads, and the native thread-local storage functions are now used. (Contributed by Kristján Valur Jónsson; :issue:`3582`.)"
msgstr ""

msgid "The :func:`os.kill` function now works on Windows.  The signal value can be the constants :const:`CTRL_C_EVENT`, :const:`CTRL_BREAK_EVENT`, or any integer.  The first two constants will send Control-C and Control-Break keystroke events to subprocesses; any other value will use the :cfunc:`TerminateProcess` API.  (Contributed by Miki Tebeka; :issue:`1220212`.)"
msgstr ""

msgid "The :func:`os.listdir` function now correctly fails for an empty path.  (Fixed by Hirokazu Yamamoto; :issue:`5913`.)"
msgstr ""

msgid "The :mod:`mimelib` module will now read the MIME database from the Windows registry when initializing. (Patch by Gabriel Genellina; :issue:`4969`.)"
msgstr ""

msgid "The path ``/Library/Python/2.7/site-packages`` is now appended to ``sys.path``, in order to share added packages between the system installation and a user-installed copy of the same version. (Changed by Ronald Oussoren; :issue:`4865`.)"
msgstr ""

msgid "Port-Specific Changes: FreeBSD"
msgstr ""

msgid "FreeBSD 7.1's :const:`SO_SETFIB` constant, used with :func:`~socket.getsockopt`/:func:`~socket.setsockopt` to select an alternate routing table, is now available in the :mod:`socket` module.  (Added by Kyle VanderBeek; :issue:`8235`.)"
msgstr ""

msgid "Two benchmark scripts, :file:`iobench` and :file:`ccbench`, were added to the :file:`Tools` directory.  :file:`iobench` measures the speed of the built-in file I/O objects returned by :func:`open` while performing various operations, and :file:`ccbench` is a concurrency benchmark that tries to measure computing throughput, thread switching latency, and IO processing bandwidth when performing several tasks using a varying number of threads."
msgstr ""

msgid "The :file:`Tools/i18n/msgfmt.py` script now understands plural forms in :file:`.po` files.  (Fixed by Martin von Löwis; :issue:`5464`.)"
msgstr ""

msgid "When importing a module from a :file:`.pyc` or :file:`.pyo` file with an existing :file:`.py` counterpart, the :attr:`co_filename` attributes of the resulting code objects are overwritten when the original filename is obsolete.  This can happen if the file has been renamed, moved, or is accessed through different paths.  (Patch by Ziga Seilnacht and Jean-Paul Calderone; :issue:`1180193`.)"
msgstr ""

msgid "The :file:`regrtest.py` script now takes a :option:`--randseed=` switch that takes an integer that will be used as the random seed for the :option:`-r` option that executes tests in random order. The :option:`-r` option also reports the seed that was used (Added by Collin Winter.)"
msgstr ""

msgid "Another :file:`regrtest.py` switch is :option:`-j`, which takes an integer specifying how many tests run in parallel. This allows reducing the total runtime on multi-core machines. This option is compatible with several other options, including the :option:`-R` switch which is known to produce long runtimes. (Added by Antoine Pitrou, :issue:`6152`.)  This can also be used with a new :option:`-F` switch that runs selected tests in a loop until they fail.  (Added by Antoine Pitrou; :issue:`7312`.)"
msgstr ""

msgid "When executed as a script, the :file:`py_compile.py` module now accepts ``'-'`` as an argument, which will read standard input for the list of filenames to be compiled.  (Contributed by Piotr Ożarowski; :issue:`8233`.)"
msgstr ""

msgid "Porting to Python 2.7"
msgstr ""

msgid "The :func:`range` function processes its arguments more consistently; it will now call :meth:`__int__` on non-float, non-integer arguments that are supplied to it.  (Fixed by Alexander Belopolsky; :issue:`1533`.)"
msgstr ""

msgid "The string :meth:`format` method changed the default precision used for floating-point and complex numbers from 6 decimal places to 12, which matches the precision used by :func:`str`. (Changed by Eric Smith; :issue:`5920`.)"
msgstr ""

msgid "Because of an optimization for the :keyword:`with` statement, the special methods :meth:`__enter__` and :meth:`__exit__` must belong to the object's type, and cannot be directly attached to the object's instance.  This affects new-style classes (derived from :class:`object`) and C extension types.  (:issue:`6101`.)"
msgstr ""

msgid "Due to a bug in Python 2.6, the *exc_value* parameter to :meth:`__exit__` methods was often the string representation of the exception, not an instance.  This was fixed in 2.7, so *exc_value* will be an instance as expected.  (Fixed by Florent Xicluna; :issue:`7853`.)"
msgstr ""

msgid "In the standard library:"
msgstr ""

msgid "Operations with :class:`datetime` instances that resulted in a year falling outside the supported range didn't always raise :exc:`OverflowError`.  Such errors are now checked more carefully and will now raise the exception. (Reported by Mark Leander, patch by Anand B. Pillai and Alexander Belopolsky; :issue:`7150`.)"
msgstr ""

msgid "When using :class:`Decimal` instances with a string's :meth:`format` method, the default alignment was previously left-alignment.  This has been changed to right-alignment, which might change the output of your programs. (Changed by Mark Dickinson; :issue:`6857`.)"
msgstr ""

msgid "The ElementTree library, :mod:`xml.etree`, no longer escapes ampersands and angle brackets when outputting an XML processing instruction (which looks like `<?xml-stylesheet href=\"#style1\"?>`) or comment (which looks like `<!-- comment -->`). (Patch by Neil Muller; :issue:`2746`.)"
msgstr ""

msgid "The :meth:`readline` method of :class:`StringIO` objects now does nothing when a negative length is requested, as other file-like objects do.  (:issue:`7348`)."
msgstr ""

msgid "For C extensions:"
msgstr ""

msgid "C extensions that use integer format codes with the ``PyArg_Parse*`` family of functions will now raise a :exc:`TypeError` exception instead of triggering a :exc:`DeprecationWarning` (:issue:`5080`)."
msgstr ""

msgid "Use the new :cfunc:`PyOS_string_to_double` function instead of the old :cfunc:`PyOS_ascii_strtod` and :cfunc:`PyOS_ascii_atof` functions, which are now deprecated."
msgstr ""

msgid "For applications that embed Python:"
msgstr ""

msgid "The :cfunc:`PySys_SetArgvEx` function was added, letting applications close a security hole when the existing :cfunc:`PySys_SetArgv` function was used.  Check whether you're calling :cfunc:`PySys_SetArgv` and carefully consider whether the application should be using :cfunc:`PySys_SetArgvEx` with *updatepath* set to false."
msgstr ""

msgid "The author would like to thank the following people for offering suggestions, corrections and assistance with various drafts of this article: Nick Coghlan, Philip Jenvey, Ryan Lovett, R. David Murray, Hugh Secker-Walker."
msgstr ""

msgid "What's New In Python 3.0"
msgstr ""

msgid "Guido van Rossum"
msgstr ""

msgid "This article explains the new features in Python 3.0, compared to 2.6. Python 3.0, also known as \"Python 3000\" or \"Py3K\", is the first ever *intentionally backwards incompatible* Python release.  There are more changes than in a typical release, and more that are important for all Python users.  Nevertheless, after digesting the changes, you'll find that Python really hasn't changed all that much -- by and large, we're mostly fixing well-known annoyances and warts, and removing a lot of old cruft."
msgstr ""

msgid "This article doesn't attempt to provide a complete specification of all new features, but instead tries to give a convenient overview. For full details, you should refer to the documentation for Python 3.0, and/or the many PEPs referenced in the text. If you want to understand the complete implementation and design rationale for a particular feature, PEPs usually have more details than the regular documentation; but note that PEPs usually are not kept up-to-date once a feature has been fully implemented."
msgstr ""

msgid "Due to time constraints this document is not as complete as it should have been.  As always for a new release, the ``Misc/NEWS`` file in the source distribution contains a wealth of detailed information about every small thing that was changed."
msgstr ""

msgid "Common Stumbling Blocks"
msgstr ""

msgid "This section lists those few changes that are most likely to trip you up if you're used to Python 2.5."
msgstr ""

msgid "Print Is A Function"
msgstr ""

msgid "The :keyword:`print` statement has been replaced with a :func:`print` function, with keyword arguments to replace most of the special syntax of the old :keyword:`print` statement (:pep:`3105`).  Examples::"
msgstr ""

msgid "Old: print \"The answer is\", 2*2 New: print(\"The answer is\", 2*2)  Old: print x,           # Trailing comma suppresses newline New: print(x, end=\" \")  # Appends a space instead of a newline  Old: print              # Prints a newline New: print()            # You must call the function!  Old: print >>sys.stderr, \"fatal error\" New: print(\"fatal error\", file=sys.stderr)  Old: print (x, y)       # prints repr((x, y)) New: print((x, y))      # Not the same as print(x, y)!"
msgstr ""

msgid "You can also customize the separator between items, e.g.::"
msgstr ""

msgid "print(\"There are <\", 2**32, \"> possibilities!\", sep=\"\")"
msgstr ""

msgid "which produces::"
msgstr ""

msgid "There are <4294967296> possibilities!"
msgstr ""

msgid "Note:"
msgstr ""

msgid "The :func:`print` function doesn't support the \"softspace\" feature of the old :keyword:`print` statement.  For example, in Python 2.x, ``print \"A\\n\", \"B\"`` would write ``\"A\\nB\\n\"``; but in Python 3.0, ``print(\"A\\n\", \"B\")`` writes ``\"A\\n B\\n\"``."
msgstr ""

msgid "Initially, you'll be finding yourself typing the old ``print x`` a lot in interactive mode.  Time to retrain your fingers to type ``print(x)`` instead!"
msgstr ""

msgid "When using the ``2to3`` source-to-source conversion tool, all :keyword:`print` statements are automatically converted to :func:`print` function calls, so this is mostly a non-issue for larger projects."
msgstr ""

msgid "Views And Iterators Instead Of Lists"
msgstr ""

msgid "Some well-known APIs no longer return lists:"
msgstr ""

msgid ":class:`dict` methods :meth:`dict.keys`, :meth:`dict.items` and :meth:`dict.values` return \"views\" instead of lists.  For example, this no longer works: ``k = d.keys(); k.sort()``.  Use ``k = sorted(d)`` instead (this works in Python 2.5 too and is just as efficient)."
msgstr ""

msgid "Also, the :meth:`dict.iterkeys`, :meth:`dict.iteritems` and :meth:`dict.itervalues` methods are no longer supported."
msgstr ""

msgid ":func:`map` and :func:`filter` return iterators.  If you really need a list, a quick fix is e.g.  ``list(map(...))``, but a better fix is often to use a list comprehension (especially when the original code uses :keyword:`lambda`), or rewriting the code so it doesn't need a list at all.  Particularly tricky is :func:`map` invoked for the side effects of the function; the correct transformation is to use a regular :keyword:`for` loop (since creating a list would just be wasteful)."
msgstr ""

msgid ":func:`range` now behaves like :func:`xrange` used to behave, except it works with values of arbitrary size.  The latter no longer exists."
msgstr ""

msgid ":func:`zip` now returns an iterator."
msgstr ""

msgid "Ordering Comparisons"
msgstr ""

msgid "Python 3.0 has simplified the rules for ordering comparisons:"
msgstr ""

msgid "The ordering comparison operators (``<``, ``<=``, ``>=``, ``>``) raise a TypeError exception when the operands don't have a meaningful natural ordering.  Thus, expressions like ``1 < ''``, ``0 > None`` or ``len <= len`` are no longer valid, and e.g. ``None < None`` raises :exc:`TypeError` instead of returning :keyword:`False`.  A corollary is that sorting a heterogeneous list no longer makes sense -- all the elements must be comparable to each other.  Note that this does not apply to the ``==`` and ``!=`` operators: objects of different incomparable types always compare unequal to each other."
msgstr ""

msgid ":meth:`builtin.sorted` and :meth:`list.sort` no longer accept the *cmp* argument providing a comparison function.  Use the *key* argument instead. N.B. the *key* and *reverse* arguments are now \"keyword-only\"."
msgstr ""

msgid "The :func:`cmp` function should be treated as gone, and the :meth:`__cmp__` special method is no longer supported.  Use :meth:`__lt__` for sorting, :meth:`__eq__` with :meth:`__hash__`, and other rich comparisons as needed. (If you really need the :func:`cmp` functionality, you could use the expression ``(a > b) - (a < b)`` as the equivalent for ``cmp(a, b)``.)"
msgstr ""

msgid "Integers"
msgstr ""

msgid ":pep:`0237`: Essentially, :class:`long` renamed to :class:`int`. That is, there is only one built-in integral type, named :class:`int`; but it behaves mostly like the old :class:`long` type."
msgstr ""

msgid ":pep:`0238`: An expression like ``1/2`` returns a float.  Use ``1//2`` to get the truncating behavior.  (The latter syntax has existed for years, at least since Python 2.2.)"
msgstr ""

msgid "The :data:`sys.maxint` constant was removed, since there is no longer a limit to the value of integers.  However, :data:`sys.maxsize` can be used as an integer larger than any practical list or string index.  It conforms to the implementation's \"natural\" integer size and is typically the same as :data:`sys.maxint` in previous releases on the same platform (assuming the same build options)."
msgstr ""

msgid "The :func:`repr` of a long integer doesn't include the trailing ``L`` anymore, so code that unconditionally strips that character will chop off the last digit instead.  (Use :func:`str` instead.)"
msgstr ""

msgid "Octal literals are no longer of the form ``0720``; use ``0o720`` instead."
msgstr ""

msgid "Text Vs. Data Instead Of Unicode Vs. 8-bit"
msgstr ""

msgid "Everything you thought you knew about binary data and Unicode has changed."
msgstr ""

msgid "Python 3.0 uses the concepts of *text* and (binary) *data* instead of Unicode strings and 8-bit strings.  All text is Unicode; however *encoded* Unicode is represented as binary data.  The type used to hold text is :class:`str`, the type used to hold data is :class:`bytes`.  The biggest difference with the 2.x situation is that any attempt to mix text and data in Python 3.0 raises :exc:`TypeError`, whereas if you were to mix Unicode and 8-bit strings in Python 2.x, it would work if the 8-bit string happened to contain only 7-bit (ASCII) bytes, but you would get :exc:`UnicodeDecodeError` if it contained non-ASCII values.  This value-specific behavior has caused numerous sad faces over the years."
msgstr ""

msgid "As a consequence of this change in philosophy, pretty much all code that uses Unicode, encodings or binary data most likely has to change.  The change is for the better, as in the 2.x world there were numerous bugs having to do with mixing encoded and unencoded text.  To be prepared in Python 2.x, start using :class:`unicode` for all unencoded text, and :class:`str` for binary or encoded data only.  Then the ``2to3`` tool will do most of the work for you."
msgstr ""

msgid "You can no longer use ``u\"...\"`` literals for Unicode text. However, you must use ``b\"...\"`` literals for binary data."
msgstr ""

msgid "As the :class:`str` and :class:`bytes` types cannot be mixed, you must always explicitly convert between them.  Use :meth:`str.encode` to go from :class:`str` to :class:`bytes`, and :meth:`bytes.decode` to go from :class:`bytes` to :class:`str`.  You can also use ``bytes(s, encoding=...)`` and ``str(b, encoding=...)``, respectively."
msgstr ""

msgid "Like :class:`str`, the :class:`bytes` type is immutable.  There is a separate *mutable* type to hold buffered binary data, :class:`bytearray`.  Nearly all APIs that accept :class:`bytes` also accept :class:`bytearray`.  The mutable API is based on :class:`collections.MutableSequence`."
msgstr ""

msgid "All backslashes in raw string literals are interpreted literally. This means that ``'\\U'`` and ``'\\u'`` escapes in raw strings are not treated specially.  For example, ``r'\\u20ac'`` is a string of 6 characters in Python 3.0, whereas in 2.6, ``ur'\\u20ac'`` was the single \"euro\" character.  (Of course, this change only affects raw string literals; the euro character is ``'\\u20ac'`` in Python 3.0.)"
msgstr ""

msgid "The built-in :class:`basestring` abstract type was removed.  Use :class:`str` instead.  The :class:`str` and :class:`bytes` types don't have functionality enough in common to warrant a shared base class.  The ``2to3`` tool (see below) replaces every occurrence of :class:`basestring` with :class:`str`."
msgstr ""

msgid "Files opened as text files (still the default mode for :func:`open`) always use an encoding to map between strings (in memory) and bytes (on disk).  Binary files (opened with a ``b`` in the mode argument) always use bytes in memory.  This means that if a file is opened using an incorrect mode or encoding, I/O will likely fail loudly, instead of silently producing incorrect data.  It also means that even Unix users will have to specify the correct mode (text or binary) when opening a file.  There is a platform-dependent default encoding, which on Unixy platforms can be set with the ``LANG`` environment variable (and sometimes also with some other platform-specific locale-related environment variables).  In many cases, but not all, the system default is UTF-8; you should never count on this default.  Any application reading or writing more than pure ASCII text should probably have a way to override the encoding. There is no longer any need for using the encoding-aware streams in the :mod:`codecs` module."
msgstr ""

msgid "Filenames are passed to and returned from APIs as (Unicode) strings. This can present platform-specific problems because on some platforms filenames are arbitrary byte strings.  (On the other hand, on Windows filenames are natively stored as Unicode.)  As a work-around, most APIs (e.g. :func:`open` and many functions in the :mod:`os` module) that take filenames accept :class:`bytes` objects as well as strings, and a few APIs have a way to ask for a :class:`bytes` return value.  Thus, :func:`os.listdir` returns a list of :class:`bytes` instances if the argument is a :class:`bytes` instance, and :func:`os.getcwdb` returns the current working directory as a :class:`bytes` instance.  Note that when :func:`os.listdir` returns a list of strings, filenames that cannot be decoded properly are omitted rather than raising :exc:`UnicodeError`."
msgstr ""

msgid "Some system APIs like :data:`os.environ` and :data:`sys.argv` can also present problems when the bytes made available by the system is not interpretable using the default encoding.  Setting the ``LANG`` variable and rerunning the program is probably the best approach."
msgstr ""

msgid ":pep:`3138`: The :func:`repr` of a string no longer escapes non-ASCII characters.  It still escapes control characters and code points with non-printable status in the Unicode standard, however."
msgstr ""

msgid ":pep:`3120`: The default source encoding is now UTF-8."
msgstr ""

msgid ":pep:`3131`: Non-ASCII letters are now allowed in identifiers. (However, the standard library remains ASCII-only with the exception of contributor names in comments.)"
msgstr ""

msgid "The :mod:`StringIO` and :mod:`cStringIO` modules are gone.  Instead, import the :mod:`io` module and use :class:`io.StringIO` or :class:`io.BytesIO` for text and data respectively."
msgstr ""

msgid "See also the :ref:`unicode-howto`, which was updated for Python 3.0."
msgstr ""

msgid "Overview Of Syntax Changes"
msgstr ""

msgid "This section gives a brief overview of every *syntactic* change in Python 3.0."
msgstr ""

msgid "New Syntax"
msgstr ""

msgid ":pep:`3107`: Function argument and return value annotations.  This provides a standardized way of annotating a function's parameters and return value.  There are no semantics attached to such annotations except that they can be introspected at runtime using the :attr:`__annotations__` attribute.  The intent is to encourage experimentation through metaclasses, decorators or frameworks."
msgstr ""

msgid ":pep:`3102`: Keyword-only arguments.  Named parameters occurring after ``*args`` in the parameter list *must* be specified using keyword syntax in the call.  You can also use a bare ``*`` in the parameter list to indicate that you don't accept a variable-length argument list, but you do have keyword-only arguments."
msgstr ""

msgid "Keyword arguments are allowed after the list of base classes in a class definition.  This is used by the new convention for specifying a metaclass (see next section), but can be used for other purposes as well, as long as the metaclass supports it."
msgstr ""

msgid ":pep:`3104`: :keyword:`nonlocal` statement.  Using ``nonlocal x`` you can now assign directly to a variable in an outer (but non-global) scope.  :keyword:`nonlocal` is a new reserved word."
msgstr ""

msgid ":pep:`3132`: Extended Iterable Unpacking.  You can now write things like ``a, b, *rest = some_sequence``.  And even ``*rest, a = stuff``.  The ``rest`` object is always a (possibly empty) list; the right-hand side may be any iterable.  Example::"
msgstr ""

msgid "(a, *rest, b) = range(5)"
msgstr ""

msgid "This sets *a* to ``0``, *b* to ``4``, and *rest* to ``[1, 2, 3]``."
msgstr ""

msgid "Dictionary comprehensions: ``{k: v for k, v in stuff}`` means the same thing as ``dict(stuff)`` but is more flexible.  (This is :pep:`0274` vindicated. :-)"
msgstr ""

msgid "Set literals, e.g. ``{1, 2}``.  Note that ``{}`` is an empty dictionary; use ``set()`` for an empty set.  Set comprehensions are also supported; e.g., ``{x for x in stuff}`` means the same thing as ``set(stuff)`` but is more flexible."
msgstr ""

msgid "New octal literals, e.g. ``0o720`` (already in 2.6).  The old octal literals (``0720``) are gone."
msgstr ""

msgid "New binary literals, e.g. ``0b1010`` (already in 2.6), and there is a new corresponding built-in function, :func:`bin`."
msgstr ""

msgid "Bytes literals are introduced with a leading ``b`` or ``B``, and there is a new corresponding built-in function, :func:`bytes`."
msgstr ""

msgid "Changed Syntax"
msgstr ""

msgid ":pep:`3109` and :pep:`3134`: new :keyword:`raise` statement syntax: :samp:`raise [{expr} [from {expr}]]`.  See below."
msgstr ""

msgid ":keyword:`as` and :keyword:`with` are now reserved words.  (Since 2.6, actually.)"
msgstr ""

msgid ":keyword:`True`, :keyword:`False`, and :keyword:`None` are reserved words.  (2.6 partially enforced the restrictions on :keyword:`None` already.)"
msgstr ""

msgid "Change from :keyword:`except` *exc*, *var* to :keyword:`except` *exc* :keyword:`as` *var*.  See :pep:`3110`."
msgstr ""

msgid ":pep:`3115`: New Metaclass Syntax.  Instead of::"
msgstr ""

msgid "class C:     __metaclass__ = M     ..."
msgstr ""

msgid "you must now use::"
msgstr ""

msgid "class C(metaclass=M):     ..."
msgstr ""

msgid "The module-global :data:`__metaclass__` variable is no longer supported.  (It was a crutch to make it easier to default to new-style classes without deriving every class from :class:`object`.)"
msgstr ""

msgid "List comprehensions no longer support the syntactic form :samp:`[... for {var} in {item1}, {item2}, ...]`.  Use :samp:`[... for {var} in ({item1}, {item2}, ...)]` instead. Also note that list comprehensions have different semantics: they are closer to syntactic sugar for a generator expression inside a :func:`list` constructor, and in particular the loop control variables are no longer leaked into the surrounding scope."
msgstr ""

msgid "The *ellipsis* (``...``) can be used as an atomic expression anywhere.  (Previously it was only allowed in slices.)  Also, it *must* now be spelled as ``...``.  (Previously it could also be spelled as ``. . .``, by a mere accident of the grammar.)"
msgstr ""

msgid "Removed Syntax"
msgstr ""

msgid ":pep:`3113`: Tuple parameter unpacking removed.  You can no longer write ``def foo(a, (b, c)): ...``. Use ``def foo(a, b_c): b, c = b_c`` instead."
msgstr ""

msgid "Removed backticks (use :func:`repr` instead)."
msgstr ""

msgid "Removed ``<>`` (use ``!=`` instead)."
msgstr ""

msgid "Removed keyword: :func:`exec` is no longer a keyword; it remains as a function.  (Fortunately the function syntax was also accepted in 2.x.)  Also note that :func:`exec` no longer takes a stream argument; instead of ``exec(f)`` you can use ``exec(f.read())``."
msgstr ""

msgid "Integer literals no longer support a trailing ``l`` or ``L``."
msgstr ""

msgid "String literals no longer support a leading ``u`` or ``U``."
msgstr ""

msgid "The :keyword:`from` *module* :keyword:`import` ``*`` syntax is only allowed at the module level, no longer inside functions."
msgstr ""

msgid "The only acceptable syntax for relative imports is :samp:`from .[{module}] import {name}`.  All :keyword:`import` forms not starting with ``.`` are interpreted as absolute imports.  (:pep:`0328`)"
msgstr ""

msgid "Classic classes are gone."
msgstr ""

msgid "Changes Already Present In Python 2.6"
msgstr ""

msgid "Since many users presumably make the jump straight from Python 2.5 to Python 3.0, this section reminds the reader of new features that were originally designed for Python 3.0 but that were back-ported to Python 2.6.  The corresponding sections in :ref:`whats-new-in-2.6` should be consulted for longer descriptions."
msgstr ""

msgid ":ref:`pep-0343`.  The :keyword:`with` statement is now a standard feature and no longer needs to be imported from the :mod:`__future__`. Also check out :ref:`new-26-context-managers` and :ref:`new-module-contextlib`."
msgstr ""

msgid ":ref:`pep-0366`.  This enhances the usefulness of the :option:`-m` option when the referenced module lives in a package."
msgstr ""

msgid ":ref:`pep-0370`."
msgstr ""

msgid ":ref:`pep-0371`."
msgstr ""

msgid ":ref:`pep-3101`.  Note: the 2.6 description mentions the :meth:`format` method for both 8-bit and Unicode strings.  In 3.0, only the :class:`str` type (text strings with Unicode support) supports this method; the :class:`bytes` type does not.  The plan is to eventually make this the only API for string formatting, and to start deprecating the ``%`` operator in Python 3.1."
msgstr ""

msgid ":ref:`pep-3105`.  This is now a standard feature and no longer needs to be imported from :mod:`__future__`.  More details were given above."
msgstr ""

msgid ":ref:`pep-3110`.  The :keyword:`except` *exc* :keyword:`as` *var* syntax is now standard and :keyword:`except` *exc*, *var* is no longer supported.  (Of course, the :keyword:`as` *var* part is still optional.)"
msgstr ""

msgid ":ref:`pep-3112`.  The ``b\"...\"`` string literal notation (and its variants like ``b'...'``, ``b\"\"\"...\"\"\"``, and ``br\"...\"``) now produces a literal of type :class:`bytes`."
msgstr ""

msgid ":ref:`pep-3116`.  The :mod:`io` module is now the standard way of doing file I/O, and the initial values of :data:`sys.stdin`, :data:`sys.stdout` and :data:`sys.stderr` are now instances of :class:`io.TextIOBase`.  The built-in :func:`open` function is now an alias for :func:`io.open` and has additional keyword arguments *encoding*, *errors*, *newline* and *closefd*.  Also note that an invalid *mode* argument now raises :exc:`ValueError`, not :exc:`IOError`.  The binary file object underlying a text file object can be accessed as :attr:`f.buffer` (but beware that the text object maintains a buffer of itself in order to speed up the encoding and decoding operations)."
msgstr ""

msgid ":ref:`pep-3118`.  The old builtin :func:`buffer` is now really gone; the new builtin :func:`memoryview` provides (mostly) similar functionality."
msgstr ""

msgid ":ref:`pep-3119`.  The :mod:`abc` module and the ABCs defined in the :mod:`collections` module plays a somewhat more prominent role in the language now, and built-in collection types like :class:`dict` and :class:`list` conform to the :class:`collections.MutableMapping` and :class:`collections.MutableSequence` ABCs, respectively."
msgstr ""

msgid ":ref:`pep-3127`.  As mentioned above, the new octal literal notation is the only one supported, and binary literals have been added."
msgstr ""

msgid ":ref:`pep-3129`."
msgstr ""

msgid ":ref:`pep-3141`.  The :mod:`numbers` module is another new use of ABCs, defining Python's \"numeric tower\".  Also note the new :mod:`fractions` module which implements :class:`numbers.Rational`."
msgstr ""

msgid "Library Changes"
msgstr ""

msgid "Due to time constraints, this document does not exhaustively cover the very extensive changes to the standard library.  :pep:`3108` is the reference for the major changes to the library.  Here's a capsule review:"
msgstr ""

msgid "Many old modules were removed.  Some, like :mod:`gopherlib` (no longer used) and :mod:`md5` (replaced by :mod:`hashlib`), were already deprecated by :pep:`0004`.  Others were removed as a result of the removal of support for various platforms such as Irix, BeOS and Mac OS 9 (see :pep:`0011`).  Some modules were also selected for removal in Python 3.0 due to lack of use or because a better replacement exists.  See :pep:`3108` for an exhaustive list."
msgstr ""

msgid "The :mod:`bsddb3` package was removed because its presence in the core standard library has proved over time to be a particular burden for the core developers due to testing instability and Berkeley DB's release schedule.  However, the package is alive and well, externally maintained at http://www.jcea.es/programacion/pybsddb.htm."
msgstr ""

msgid "Some modules were renamed because their old name disobeyed :pep:`0008`, or for various other reasons.  Here's the list:"
msgstr ""

msgid "Old Name"
msgstr ""

msgid "New Name"
msgstr ""

msgid "_winreg"
msgstr ""

msgid "winreg"
msgstr ""

msgid "ConfigParser"
msgstr ""

msgid "configparser"
msgstr ""

msgid "copy_reg"
msgstr ""

msgid "copyreg"
msgstr ""

msgid "Queue"
msgstr ""

msgid "queue"
msgstr ""

msgid "SocketServer"
msgstr ""

msgid "socketserver"
msgstr ""

msgid "markupbase"
msgstr ""

msgid "_markupbase"
msgstr ""

msgid "repr"
msgstr ""

msgid "reprlib"
msgstr ""

msgid "test.test_support"
msgstr ""

msgid "test.support"
msgstr ""

msgid "A common pattern in Python 2.x is to have one version of a module implemented in pure Python, with an optional accelerated version implemented as a C extension; for example, :mod:`pickle` and :mod:`cPickle`.  This places the burden of importing the accelerated version and falling back on the pure Python version on each user of these modules.  In Python 3.0, the accelerated versions are considered implementation details of the pure Python versions. Users should always import the standard version, which attempts to import the accelerated version and falls back to the pure Python version.  The :mod:`pickle` / :mod:`cPickle` pair received this treatment.  The :mod:`profile` module is on the list for 3.1.  The :mod:`StringIO` module has been turned into a class in the :mod:`io` module."
msgstr ""

msgid "Some related modules have been grouped into packages, and usually the submodule names have been simplified.  The resulting new packages are:"
msgstr ""

msgid ":mod:`dbm` (:mod:`anydbm`, :mod:`dbhash`, :mod:`dbm`, :mod:`dumbdbm`, :mod:`gdbm`, :mod:`whichdb`)."
msgstr ""

msgid ":mod:`html` (:mod:`HTMLParser`, :mod:`htmlentitydefs`)."
msgstr ""

msgid ":mod:`http` (:mod:`httplib`, :mod:`BaseHTTPServer`, :mod:`CGIHTTPServer`, :mod:`SimpleHTTPServer`, :mod:`Cookie`, :mod:`cookielib`)."
msgstr ""

msgid ":mod:`tkinter` (all :mod:`Tkinter`-related modules except :mod:`turtle`).  The target audience of :mod:`turtle` doesn't really care about :mod:`tkinter`.  Also note that as of Python 2.6, the functionality of :mod:`turtle` has been greatly enhanced."
msgstr ""

msgid ":mod:`urllib` (:mod:`urllib`, :mod:`urllib2`, :mod:`urlparse`, :mod:`robotparse`)."
msgstr ""

msgid ":mod:`xmlrpc` (:mod:`xmlrpclib`, :mod:`DocXMLRPCServer`, :mod:`SimpleXMLRPCServer`)."
msgstr ""

msgid "Some other changes to standard library modules, not covered by :pep:`3108`:"
msgstr ""

msgid "Killed :mod:`sets`.  Use the built-in :func:`set` class."
msgstr ""

msgid "Cleanup of the :mod:`sys` module: removed :func:`sys.exitfunc`, :func:`sys.exc_clear`, :data:`sys.exc_type`, :data:`sys.exc_value`, :data:`sys.exc_traceback`.  (Note that :data:`sys.last_type` etc. remain.)"
msgstr ""

msgid "Cleanup of the :class:`array.array` type: the :meth:`read` and :meth:`write` methods are gone; use :meth:`fromfile` and :meth:`tofile` instead.  Also, the ``'c'`` typecode for array is gone -- use either ``'b'`` for bytes or ``'u'`` for Unicode characters."
msgstr ""

msgid "Cleanup of the :mod:`operator` module: removed :func:`sequenceIncludes` and :func:`isCallable`."
msgstr ""

msgid "Cleanup of the :mod:`thread` module: :func:`acquire_lock` and :func:`release_lock` are gone; use :func:`acquire` and :func:`release` instead."
msgstr ""

msgid "Cleanup of the :mod:`random` module: removed the :func:`jumpahead` API."
msgstr ""

msgid "The :mod:`new` module is gone."
msgstr ""

msgid "The functions :func:`os.tmpnam`, :func:`os.tempnam` and :func:`os.tmpfile` have been removed in favor of the :mod:`tempfile` module."
msgstr ""

msgid "The :mod:`tokenize` module has been changed to work with bytes.  The main entry point is now :func:`tokenize.tokenize`, instead of generate_tokens."
msgstr ""

msgid ":data:`string.letters` and its friends (:data:`string.lowercase` and :data:`string.uppercase`) are gone.  Use :data:`string.ascii_letters` etc. instead.  (The reason for the removal is that :data:`string.letters` and friends had locale-specific behavior, which is a bad idea for such attractively-named global \"constants\".)"
msgstr ""

msgid "Renamed module :mod:`__builtin__` to :mod:`builtins` (removing the underscores, adding an 's').  The :data:`__builtins__` variable found in most global namespaces is unchanged.  To modify a builtin, you should use :mod:`builtins`, not :data:`__builtins__`!"
msgstr ""

msgid ":pep:`3101`: A New Approach To String Formatting"
msgstr ""

msgid "A new system for  built-in string formatting operations replaces the ``%`` string  formatting operator.   (However, the ``%``  operator is still supported;  it will  be deprecated in  Python 3.1  and removed from the language at some later time.)  Read :pep:`3101` for the full scoop."
msgstr ""

msgid "Changes To Exceptions"
msgstr ""

msgid "The APIs for raising and catching exception have been cleaned up and new powerful features added:"
msgstr ""

msgid ":pep:`0352`: All exceptions must be derived (directly or indirectly) from :exc:`BaseException`.  This is the root of the exception hierarchy.  This is not new as a recommendation, but the *requirement* to inherit from :exc:`BaseException` is new.  (Python 2.6 still allowed classic classes to be raised, and placed no restriction on what you can catch.)  As a consequence, string exceptions are finally truly and utterly dead."
msgstr ""

msgid "Almost all exceptions should actually derive from :exc:`Exception`; :exc:`BaseException` should only be used as a base class for exceptions that should only be handled at the top level, such as :exc:`SystemExit` or :exc:`KeyboardInterrupt`.  The recommended idiom for handling all exceptions except for this latter category is to use :keyword:`except` :exc:`Exception`."
msgstr ""

msgid ":exc:`StandardError` was removed."
msgstr ""

msgid "Exceptions no longer behave as sequences.  Use the :attr:`args` attribute instead."
msgstr ""

msgid ":pep:`3109`: Raising exceptions.  You must now use :samp:`raise {Exception}({args})` instead of :samp:`raise {Exception}, {args}`. Additionally, you can no longer explicitly specify a traceback; instead, if you *have* to do this, you can assign directly to the :attr:`__traceback__` attribute (see below)."
msgstr ""

msgid ":pep:`3110`: Catching exceptions.  You must now use :samp:`except {SomeException} as {variable}` instead of :samp:`except {SomeException}, {variable}`.  Moreover, the *variable* is explicitly deleted when the :keyword:`except` block is left."
msgstr ""

msgid ":pep:`3134`: Exception chaining.  There are two cases: implicit chaining and explicit chaining.  Implicit chaining happens when an exception is raised in an :keyword:`except` or :keyword:`finally` handler block.  This usually happens due to a bug in the handler block; we call this a *secondary* exception.  In this case, the original exception (that was being handled) is saved as the :attr:`__context__` attribute of the secondary exception. Explicit chaining is invoked with this syntax::"
msgstr ""

msgid "raise SecondaryException() from primary_exception"
msgstr ""

msgid "(where *primary_exception* is any expression that produces an exception object, probably an exception that was previously caught). In this case, the primary exception is stored on the :attr:`__cause__` attribute of the secondary exception.  The traceback printed when an unhandled exception occurs walks the chain of :attr:`__cause__` and :attr:`__context__` attributes and prints a separate traceback for each component of the chain, with the primary exception at the top.  (Java users may recognize this behavior.)"
msgstr ""

msgid ":pep:`3134`: Exception objects now store their traceback as the :attr:`__traceback__` attribute.  This means that an exception object now contains all the information pertaining to an exception, and there are fewer reasons to use :func:`sys.exc_info` (though the latter is not removed)."
msgstr ""

msgid "A few exception messages are improved when Windows fails to load an extension module.  For example, ``error code 193`` is now ``%1 is not a valid Win32 application``.  Strings now deal with non-English locales."
msgstr ""

msgid "Miscellaneous Other Changes"
msgstr ""

msgid "Operators And Special Methods"
msgstr ""

msgid "``!=`` now returns the opposite of ``==``, unless ``==`` returns :data:`NotImplemented`."
msgstr ""

msgid "The concept of \"unbound methods\" has been removed from the language. When referencing a method as a class attribute, you now get a plain function object."
msgstr ""

msgid ":meth:`__getslice__`, :meth:`__setslice__` and :meth:`__delslice__` were killed.  The syntax ``a[i:j]`` now translates to ``a.__getitem__(slice(i, j))`` (or :meth:`__setitem__` or :meth:`__delitem__`, when used as an assignment or deletion target, respectively)."
msgstr ""

msgid ":pep:`3114`: the standard :meth:`next` method has been renamed to :meth:`__next__`."
msgstr ""

msgid "The :meth:`__oct__` and :meth:`__hex__` special methods are removed -- :func:`oct` and :func:`hex` use :meth:`__index__` now to convert the argument to an integer."
msgstr ""

msgid "Removed support for :attr:`__members__` and :attr:`__methods__`."
msgstr ""

msgid "The function attributes named :attr:`func_X` have been renamed to use the :data:`__X__` form, freeing up these names in the function attribute namespace for user-defined attributes.  To wit, :attr:`func_closure`, :attr:`func_code`, :attr:`func_defaults`, :attr:`func_dict`, :attr:`func_doc`, :attr:`func_globals`, :attr:`func_name` were renamed to :attr:`__closure__`, :attr:`__code__`, :attr:`__defaults__`, :attr:`__dict__`, :attr:`__doc__`, :attr:`__globals__`, :attr:`__name__`, respectively."
msgstr ""

msgid ":meth:`__nonzero__` is now :meth:`__bool__`."
msgstr ""

msgid "Builtins"
msgstr ""

msgid ":pep:`3135`: New :func:`super`.  You can now invoke :func:`super` without arguments and (assuming this is in a regular instance method defined inside a :keyword:`class` statement) the right class and instance will automatically be chosen.  With arguments, the behavior of :func:`super` is unchanged."
msgstr ""

msgid ":pep:`3111`: :func:`raw_input` was renamed to :func:`input`.  That is, the new :func:`input` function reads a line from :data:`sys.stdin` and returns it with the trailing newline stripped. It raises :exc:`EOFError` if the input is terminated prematurely. To get the old behavior of :func:`input`, use ``eval(input())``."
msgstr ""

msgid "A new built-in function :func:`next` was added to call the :meth:`__next__` method on an object."
msgstr ""

msgid "The :func:`round` function rounding strategy and return type have changed.  Exact halfway cases are now rounded to the nearest even result instead of away from zero.  (For example, ``round(2.5)`` now returns ``2`` rather than ``3``.)  :func:`round(x[, n])` now delegates to ``x.__round__([n])`` instead of always returning a float.  It generally returns an integer when called with a single argument and a value of the same type as ``x`` when called with two arguments."
msgstr ""

msgid "Moved :func:`intern` to :func:`sys.intern`."
msgstr ""

msgid "Removed: :func:`apply`.  Instead of ``apply(f, args)`` use ``f(*args)``."
msgstr ""

msgid "Removed :func:`callable`.  Instead of ``callable(f)`` you can use ``isinstance(f, collections.Callable)``.  The :func:`operator.isCallable` function is also gone."
msgstr ""

msgid "Removed :func:`coerce`.  This function no longer serves a purpose now that classic classes are gone."
msgstr ""

msgid "Removed :func:`execfile`.  Instead of ``execfile(fn)`` use ``exec(open(fn).read())``."
msgstr ""

msgid "Removed the :class:`file` type.  Use :func:`open`.  There are now several different kinds of streams that open can return in the :mod:`io` module."
msgstr ""

msgid "Removed :func:`reduce`.  Use :func:`functools.reduce` if you really need it; however, 99 percent of the time an explicit :keyword:`for` loop is more readable."
msgstr ""

msgid "Removed :func:`reload`.  Use :func:`imp.reload`."
msgstr ""

msgid "Removed. :meth:`dict.has_key` -- use the :keyword:`in` operator instead."
msgstr ""

msgid "Due to time constraints, here is a *very* incomplete list of changes to the C API."
msgstr ""

msgid "Support for several platforms was dropped, including but not limited to Mac OS 9, BeOS, RISCOS, Irix, and Tru64."
msgstr ""

msgid ":pep:`3118`: New Buffer API."
msgstr ""

msgid ":pep:`3121`: Extension Module Initialization & Finalization."
msgstr ""

msgid ":pep:`3123`: Making :cmacro:`PyObject_HEAD` conform to standard C."
msgstr ""

msgid "No more C API support for restricted execution."
msgstr ""

msgid ":cfunc:`PyNumber_Coerce`, :cfunc:`PyNumber_CoerceEx`, :cfunc:`PyMember_Get`, and :cfunc:`PyMember_Set` C APIs are removed."
msgstr ""

msgid "New C API :cfunc:`PyImport_ImportModuleNoBlock`, works like :cfunc:`PyImport_ImportModule` but won't block on the import lock (returning an error instead)."
msgstr ""

msgid "Renamed the boolean conversion C-level slot and method: ``nb_nonzero`` is now ``nb_bool``."
msgstr ""

msgid "Removed :cmacro:`METH_OLDARGS` and :cmacro:`WITH_CYCLE_GC` from the C API."
msgstr ""

msgid "Performance"
msgstr ""

msgid "The net result of the 3.0 generalizations is that Python 3.0 runs the pystone benchmark around 10% slower than Python 2.5.  Most likely the biggest cause is the removal of special-casing for small integers. There's room for improvement, but it will happen after 3.0 is released!"
msgstr ""

msgid "Porting To Python 3.0"
msgstr ""

msgid "For porting existing Python 2.5 or 2.6 source code to Python 3.0, the best strategy is the following:"
msgstr ""

msgid "(Prerequisite:) Start with excellent test coverage."
msgstr ""

msgid "Port to Python 2.6.  This should be no more work than the average port from Python 2.x to Python 2.(x+1).  Make sure all your tests pass."
msgstr ""

msgid "(Still using 2.6:) Turn on the :option:`-3` command line switch. This enables warnings about features that will be removed (or change) in 3.0.  Run your test suite again, and fix code that you get warnings about until there are no warnings left, and all your tests still pass."
msgstr ""

msgid "Run the ``2to3`` source-to-source translator over your source code tree.  (See :ref:`2to3-reference` for more on this tool.)  Run the result of the translation under Python 3.0.  Manually fix up any remaining issues, fixing problems until all tests pass again."
msgstr ""

msgid "It is not recommended to try to write source code that runs unchanged under both Python 2.6 and 3.0; you'd have to use a very contorted coding style, e.g. avoiding :keyword:`print` statements, metaclasses, and much more.  If you are maintaining a library that needs to support both Python 2.6 and Python 3.0, the best approach is to modify step 3 above by editing the 2.6 version of the source code and running the ``2to3`` translator again, rather than editing the 3.0 version of the source code."
msgstr ""

msgid "For porting C extensions to Python 3.0, please see :ref:`cporting-howto`."
msgstr ""

msgid "What's New In Python 3.1"
msgstr ""

msgid "Raymond Hettinger"
msgstr ""

msgid "This article explains the new features in Python 3.1, compared to 3.0."
msgstr ""

msgid "PEP 372: Ordered Dictionaries"
msgstr ""

msgid "Regular Python dictionaries iterate over key/value pairs in arbitrary order. Over the years, a number of authors have written alternative implementations that remember the order that the keys were originally inserted.  Based on the experiences from those implementations, a new :class:`collections.OrderedDict` class has been introduced."
msgstr ""

msgid "The OrderedDict API is substantially the same as regular dictionaries but will iterate over keys and values in a guaranteed order depending on when a key was first inserted.  If a new entry overwrites an existing entry, the original insertion position is left unchanged.  Deleting an entry and reinserting it will move it to the end."
msgstr ""

msgid "The standard library now supports use of ordered dictionaries in several modules.  The :mod:`configparser` module uses them by default.  This lets configuration files be read, modified, and then written back in their original order.  The *_asdict()* method for :func:`collections.namedtuple` now returns an ordered dictionary with the values appearing in the same order as the underlying tuple indicies.  The :mod:`json` module is being built-out with an *object_pairs_hook* to allow OrderedDicts to be built by the decoder. Support was also added for third-party tools like `PyYAML <http://pyyaml.org/>`_."
msgstr ""

msgid "PEP written by Armin Ronacher and Raymond Hettinger.  Implementation written by Raymond Hettinger."
msgstr ""

msgid "The built-in :func:`format` function and the :meth:`str.format` method use a mini-language that now includes a simple, non-locale aware way to format a number with a thousands separator.  That provides a way to humanize a program's output, improving its professional appearance and readability::"
msgstr ""

msgid ">>> format(1234567, ',d') '1,234,567' >>> format(1234567.89, ',.2f') '1,234,567.89' >>> format(12345.6 + 8901234.12j, ',f') '12,345.600000+8,901,234.120000j' >>> format(Decimal('1234567.89'), ',f') '1,234,567.89'"
msgstr ""

msgid "The supported types are :class:`int`, :class:`float`, :class:`complex` and :class:`decimal.Decimal`."
msgstr ""

msgid "Discussions are underway about how to specify alternative separators like dots, spaces, apostrophes, or underscores.  Locale-aware applications should use the existing *n* format specifier which already has some support for thousands separators."
msgstr ""

msgid "PEP written by Raymond Hettinger and implemented by Eric Smith and Mark Dickinson."
msgstr ""

msgid "Directories and zip archives containing a :file:`__main__.py` file can now be executed directly by passing their name to the interpreter. The directory/zipfile is automatically inserted as the first entry in sys.path.  (Suggestion and initial patch by Andy Chu; revised patch by Phillip J. Eby and Nick Coghlan; :issue:`1739468`.)"
msgstr ""

msgid "The :func:`int` type gained a ``bit_length`` method that returns the number of bits necessary to represent its argument in binary::"
msgstr ""

msgid ">>> n = 37 >>> bin(37) '0b100101' >>> n.bit_length() 6 >>> n = 2**123-1 >>> n.bit_length() 123 >>> (n+1).bit_length() 124"
msgstr ""

msgid "(Contributed by Fredrik Johansson, Victor Stinner, Raymond Hettinger, and Mark Dickinson; :issue:`3439`.)"
msgstr ""

msgid "The fields in :func:`format` strings can now be automatically numbered::"
msgstr ""

msgid ">>> 'Sir {} of {}'.format('Gallahad', 'Camelot') 'Sir Gallahad of Camelot'"
msgstr ""

msgid "Formerly, the string would have required numbered fields such as: ``'Sir {0} of {1}'``."
msgstr ""

msgid "(Contributed by Eric Smith; :issue:`5237`.)"
msgstr ""

msgid "The :func:`string.maketrans` function is deprecated and is replaced by new static methods, :meth:`bytes.maketrans` and :meth:`bytearray.maketrans`. This change solves the confusion around which types were supported by the :mod:`string` module. Now, :class:`str`, :class:`bytes`, and :class:`bytearray` each have their own **maketrans** and **translate** methods with intermediate translation tables of the appropriate type."
msgstr ""

msgid "(Contributed by Georg Brandl; :issue:`5675`.)"
msgstr ""

msgid "The syntax of the :keyword:`with` statement now allows multiple context managers in a single statement::"
msgstr ""

msgid ">>> with open('mylog.txt') as infile, open('a.out', 'w') as outfile: ...     for line in infile: ...         if '<critical>' in line: ...             outfile.write(line)"
msgstr ""

msgid "With the new syntax, the :func:`contextlib.nested` function is no longer needed and is now deprecated."
msgstr ""

msgid "(Contributed by Georg Brandl and Mattias Brändström; `appspot issue 53094 <http://codereview.appspot.com/53094>`_.)"
msgstr ""

msgid "``round(x, n)`` now returns an integer if *x* is an integer. Previously it returned a float::"
msgstr ""

msgid ">>> round(1123, -2) 1100"
msgstr ""

msgid "(Contributed by Mark Dickinson; :issue:`4707`.)"
msgstr ""

msgid "Python now uses David Gay's algorithm for finding the shortest floating point representation that doesn't change its value.  This should help mitigate some of the confusion surrounding binary floating point numbers."
msgstr ""

msgid "The significance is easily seen with a number like ``1.1`` which does not have an exact equivalent in binary floating point.  Since there is no exact equivalent, an expression like ``float('1.1')`` evaluates to the nearest representable value which is ``0x1.199999999999ap+0`` in hex or ``1.100000000000000088817841970012523233890533447265625`` in decimal. That nearest value was and still is used in subsequent floating point calculations."
msgstr ""

msgid "What is new is how the number gets displayed.  Formerly, Python used a simple approach.  The value of ``repr(1.1)`` was computed as ``format(1.1, '.17g')`` which evaluated to ``'1.1000000000000001'``. The advantage of using 17 digits was that it relied on IEEE-754 guarantees to assure that ``eval(repr(1.1))`` would round-trip exactly to its original value.  The disadvantage is that many people found the output to be confusing (mistaking intrinsic limitations of binary floating point representation as being a problem with Python itself)."
msgstr ""

msgid "The new algorithm for ``repr(1.1)`` is smarter and returns ``'1.1'``. Effectively, it searches all equivalent string representations (ones that get stored with the same underlying float value) and returns the shortest representation."
msgstr ""

msgid "The new algorithm tends to emit cleaner representations when possible, but it does not change the underlying values.  So, it is still the case that ``1.1 + 2.2 != 3.3`` even though the representations may suggest otherwise."
msgstr ""

msgid "The new algorithm depends on certain features in the underlying floating point implementation.  If the required features are not found, the old algorithm will continue to be used.  Also, the text pickle protocols assure cross-platform portability by using the old algorithm."
msgstr ""

msgid "(Contributed by Eric Smith and Mark Dickinson; :issue:`1580`)"
msgstr ""

msgid "Added a :class:`collections.Counter` class to support convenient counting of unique items in a sequence or iterable::"
msgstr ""

msgid ">>> Counter(['red', 'blue', 'red', 'green', 'blue', 'blue']) Counter({'blue': 3, 'red': 2, 'green': 1})"
msgstr ""

msgid "(Contributed by Raymond Hettinger; :issue:`1696199`.)"
msgstr ""

msgid "Added a new module, :mod:`tkinter.ttk` for access to the Tk themed widget set. The basic idea of ttk is to separate, to the extent possible, the code implementing a widget's behavior from the code implementing its appearance."
msgstr ""

msgid "(Contributed by Guilherme Polo; :issue:`2983`.)"
msgstr ""

msgid "The :class:`gzip.GzipFile` and :class:`bz2.BZ2File` classes now support the context manager protocol::"
msgstr ""

msgid ">>> # Automatically close file after writing >>> with gzip.GzipFile(filename, \"wb\") as f: ...     f.write(b\"xxx\")"
msgstr ""

msgid "(Contributed by Antoine Pitrou.)"
msgstr ""

msgid "The :mod:`decimal` module now supports methods for creating a decimal object from a binary :class:`float`.  The conversion is exact but can sometimes be surprising::"
msgstr ""

msgid ">>> Decimal.from_float(1.1) Decimal('1.100000000000000088817841970012523233890533447265625')"
msgstr ""

msgid "The long decimal result shows the actual binary fraction being stored for *1.1*.  The fraction has many digits because *1.1* cannot be exactly represented in binary."
msgstr ""

msgid "(Contributed by Raymond Hettinger and Mark Dickinson.)"
msgstr ""

msgid "The :mod:`itertools` module grew two new functions.  The :func:`itertools.combinations_with_replacement` function is one of four for generating combinatorics including permutations and Cartesian products.  The :func:`itertools.compress` function mimics its namesake from APL.  Also, the existing :func:`itertools.count` function now has an optional *step* argument and can accept any type of counting sequence including :class:`fractions.Fraction` and :class:`decimal.Decimal`::"
msgstr ""

msgid ">>> [p+q for p,q in combinations_with_replacement('LOVE', 2)] ['LL', 'LO', 'LV', 'LE', 'OO', 'OV', 'OE', 'VV', 'VE', 'EE']  >>> list(compress(data=range(10), selectors=[0,0,1,1,0,1,0,1,0,0])) [2, 3, 5, 7]  >>> c = count(start=Fraction(1,2), step=Fraction(1,6)) >>> [next(c), next(c), next(c), next(c)] [Fraction(1, 2), Fraction(2, 3), Fraction(5, 6), Fraction(1, 1)]"
msgstr ""

msgid ":func:`collections.namedtuple` now supports a keyword argument *rename* which lets invalid fieldnames be automatically converted to positional names in the form _0, _1, etc.  This is useful when the field names are being created by an external source such as a CSV header, SQL field list, or user input::"
msgstr ""

msgid ">>> query = input() SELECT region, dept, count(*) FROM main GROUPBY region, dept  >>> cursor.execute(query) >>> query_fields = [desc[0] for desc in cursor.description] >>> UserQuery = namedtuple('UserQuery', query_fields, rename=True) >>> pprint.pprint([UserQuery(*row) for row in cursor]) [UserQuery(region='South', dept='Shipping', _2=185),  UserQuery(region='North', dept='Accounting', _2=37),  UserQuery(region='West', dept='Sales', _2=419)]"
msgstr ""

msgid "(Contributed by Raymond Hettinger; :issue:`1818`.)"
msgstr ""

msgid "The :func:`re.sub`, :func:`re.subn` and :func:`re.split` functions now accept a flags parameter."
msgstr ""

msgid "(Contributed by Gregory Smith.)"
msgstr ""

msgid "The :mod:`logging` module now implements a simple :class:`logging.NullHandler` class for applications that are not using logging but are calling library code that does.  Setting-up a null handler will suppress spurious warnings such as \"No handlers could be found for logger foo\"::"
msgstr ""

msgid ">>> h = logging.NullHandler() >>> logging.getLogger(\"foo\").addHandler(h)"
msgstr ""

msgid "(Contributed by Vinay Sajip; :issue:`4384`)."
msgstr ""

msgid "The :mod:`runpy` module which supports the ``-m`` command line switch now supports the execution of packages by looking for and executing a ``__main__`` submodule when a package name is supplied."
msgstr ""

msgid "(Contributed by Andi Vajda; :issue:`4195`.)"
msgstr ""

msgid "The :mod:`pdb` module can now access and display source code loaded via :mod:`zipimport` (or any other conformant :pep:`302` loader)."
msgstr ""

msgid "(Contributed by Alexander Belopolsky; :issue:`4201`.)"
msgstr ""

msgid ":class:`functools.partial` objects can now be pickled."
msgstr ""

msgid "(Suggested by Antoine Pitrou and Jesse Noller.  Implemented by Jack Diedrich; :issue:`5228`.)"
msgstr ""

msgid "Add :mod:`pydoc` help topics for symbols so that ``help('@')`` works as expected in the interactive environment."
msgstr ""

msgid "(Contributed by David Laban; :issue:`4739`.)"
msgstr ""

msgid "The :mod:`unittest` module now supports skipping individual tests or classes of tests. And it supports marking a test as a expected failure, a test that is known to be broken, but shouldn't be counted as a failure on a TestResult::"
msgstr ""

msgid "class TestGizmo(unittest.TestCase):      @unittest.skipUnless(sys.platform.startswith(\"win\"), \"requires Windows\")     def test_gizmo_on_windows(self):         ...      @unittest.expectedFailure     def test_gimzo_without_required_library(self):         ..."
msgstr ""

msgid "Also, tests for exceptions have been builtout to work with context managers using the :keyword:`with` statement::"
msgstr ""

msgid "def test_division_by_zero(self):     with self.assertRaises(ZeroDivisionError):         x / 0"
msgstr ""

msgid "In addition, several new assertion methods were added including :func:`assertSetEqual`, :func:`assertDictEqual`, :func:`assertDictContainsSubset`, :func:`assertListEqual`, :func:`assertTupleEqual`, :func:`assertSequenceEqual`, :func:`assertRaisesRegexp`, :func:`assertIsNone`, and :func:`assertIsNotNone`."
msgstr ""

msgid "(Contributed by Benjamin Peterson and Antoine Pitrou.)"
msgstr ""

msgid "The :mod:`io` module has three new constants for the :meth:`seek` method :data:`SEEK_SET`, :data:`SEEK_CUR`, and :data:`SEEK_END`."
msgstr ""

msgid "The :attr:`sys.version_info` tuple is now a named tuple::"
msgstr ""

msgid ">>> sys.version_info sys.version_info(major=3, minor=1, micro=0, releaselevel='alpha', serial=2)"
msgstr ""

msgid "(Contributed by Ross Light; :issue:`4285`.)"
msgstr ""

msgid "The :mod:`nntplib` and :mod:`imaplib` modules now support IPv6."
msgstr ""

msgid "(Contributed by Derek Morr; :issue:`1655` and :issue:`1664`.)"
msgstr ""

msgid "The :mod:`pickle` module has been adapted for better interoperability with Python 2.x when used with protocol 2 or lower.  The reorganization of the standard library changed the formal reference for many objects.  For example, ``__builtin__.set`` in Python 2 is called ``builtins.set`` in Python 3. This change confounded efforts to share data between different versions of Python.  But now when protocol 2 or lower is selected, the pickler will automatically use the old Python 2 names for both loading and dumping. This remapping is turned-on by default but can be disabled with the *fix_imports* option::"
msgstr ""

msgid ">>> s = {1, 2, 3} >>> pickle.dumps(s, protocol=0) b'c__builtin__\\nset\\np0\\n((lp1\\nL1L\\naL2L\\naL3L\\natp2\\nRp3\\n.' >>> pickle.dumps(s, protocol=0, fix_imports=False) b'cbuiltins\\nset\\np0\\n((lp1\\nL1L\\naL2L\\naL3L\\natp2\\nRp3\\n.'"
msgstr ""

msgid "An unfortunate but unavoidable side-effect of this change is that protocol 2 pickles produced by Python 3.1 won't be readable with Python 3.0. The latest pickle protocol, protocol 3, should be used when migrating data between Python 3.x implementations, as it doesn't attempt to remain compatible with Python 2.x."
msgstr ""

msgid "(Contributed by Alexandre Vassalotti and Antoine Pitrou, :issue:`6137`.)"
msgstr ""

msgid "A new module, :mod:`importlib` was added.  It provides a complete, portable, pure Python reference implementation of the :keyword:`import` statement and its counterpart, the :func:`__import__` function.  It represents a substantial step forward in documenting and defining the actions that take place during imports."
msgstr ""

msgid "Major performance enhancements have been added:"
msgstr ""

msgid "The new I/O library (as defined in :pep:`3116`) was mostly written in Python and quickly proved to be a problematic bottleneck in Python 3.0. In Python 3.1, the I/O library has been entirely rewritten in C and is 2 to 20 times faster depending on the task at hand. The pure Python version is still available for experimentation purposes through the ``_pyio`` module."
msgstr ""

msgid "(Contributed by Amaury Forgeot d'Arc and Antoine Pitrou.)"
msgstr ""

msgid "Added a heuristic so that tuples and dicts containing only untrackable objects are not tracked by the garbage collector. This can reduce the size of collections and therefore the garbage collection overhead on long-running programs, depending on their particular use of datatypes."
msgstr ""

msgid "(Contributed by Antoine Pitrou, :issue:`4688`.)"
msgstr ""

msgid "Enabling a configure option named ``--with-computed-gotos`` on compilers that support it (notably: gcc, SunPro, icc), the bytecode evaluation loop is compiled with a new dispatch mechanism which gives speedups of up to 20%, depending on the system, the compiler, and the benchmark."
msgstr ""

msgid "(Contributed by Antoine Pitrou along with a number of other participants, :issue:`4753`)."
msgstr ""

msgid "The decoding of UTF-8, UTF-16 and LATIN-1 is now two to four times faster."
msgstr ""

msgid "(Contributed by Antoine Pitrou and Amaury Forgeot d'Arc, :issue:`4868`.)"
msgstr ""

msgid "The :mod:`json` module now has a C extension to substantially improve its performance.  In addition, the API was modified so that json works only with :class:`str`, not with :class:`bytes`.  That change makes the module closely match the `JSON specification <http://json.org/>`_ which is defined in terms of Unicode."
msgstr ""

msgid "(Contributed by Bob Ippolito and converted to Py3.1 by Antoine Pitrou and Benjamin Peterson; :issue:`4136`.)"
msgstr ""

msgid "Unpickling now interns the attribute names of pickled objects.  This saves memory and allows pickles to be smaller."
msgstr ""

msgid "(Contributed by Jake McGuire and Antoine Pitrou; :issue:`5084`.)"
msgstr ""

msgid "IDLE"
msgstr ""

msgid "IDLE's format menu now provides an option to strip trailing whitespace from a source file."
msgstr ""

msgid "(Contributed by Roger D. Serwy; :issue:`5150`.)"
msgstr ""

msgid "Integers are now stored internally either in base 2**15 or in base 2**30, the base being determined at build time.  Previously, they were always stored in base 2**15.  Using base 2**30 gives significant performance improvements on 64-bit machines, but benchmark results on 32-bit machines have been mixed.  Therefore, the default is to use base 2**30 on 64-bit machines and base 2**15 on 32-bit machines; on Unix, there's a new configure option ``--enable-big-digits`` that can be used to override this default."
msgstr ""

msgid "Apart from the performance improvements this change should be invisible to end users, with one exception: for testing and debugging purposes there's a new :attr:`sys.int_info` that provides information about the internal format, giving the number of bits per digit and the size in bytes of the C type used to store each digit::"
msgstr ""

msgid ">>> import sys >>> sys.int_info sys.int_info(bits_per_digit=30, sizeof_digit=4)"
msgstr ""

msgid "The :cfunc:`PyLong_AsUnsignedLongLong()` function now handles a negative *pylong* by raising :exc:`OverflowError` instead of :exc:`TypeError`."
msgstr ""

msgid "(Contributed by Mark Dickinson and Lisandro Dalcrin; :issue:`5175`.)"
msgstr ""

msgid "Deprecated :cfunc:`PyNumber_Int`.  Use :cfunc:`PyNumber_Long` instead."
msgstr ""

msgid "(Contributed by Mark Dickinson; :issue:`4910`.)"
msgstr ""

msgid "Added a new :cfunc:`PyOS_string_to_double` function to replace the deprecated functions :cfunc:`PyOS_ascii_strtod` and :cfunc:`PyOS_ascii_atof`."
msgstr ""

msgid "(Contributed by Mark Dickinson; :issue:`5914`.)"
msgstr ""

msgid "Added :ctype:`PyCapsule` as a replacement for the :ctype:`PyCObject` API. The principal difference is that the new type has a well defined interface for passing typing safety information and a less complicated signature for calling a destructor.  The old type had a problematic API and is now deprecated."
msgstr ""

msgid "(Contributed by Larry Hastings; :issue:`5630`.)"
msgstr ""

msgid "Porting to Python 3.1"
msgstr ""

msgid "The new floating point string representations can break existing doctests. For example::"
msgstr ""

msgid "def e():     '''Compute the base of natural logarithms.      >>> e()     2.7182818284590451      '''     return sum(1/math.factorial(x) for x in reversed(range(30)))  doctest.testmod()  ********************************************************************** Failed example:     e() Expected:     2.7182818284590451 Got:     2.718281828459045 **********************************************************************"
msgstr ""

msgid "The automatic name remapping in the pickle module for protocol 2 or lower can make Python 3.1 pickles unreadable in Python 3.0.  One solution is to use protocol 3.  Another solution is to set the *fix_imports* option to **False**. See the discussion above for more details."
msgstr ""

msgid "What's New In Python 3.2"
msgstr ""

msgid "This article explains the new features in Python 3.2, compared to 3.1."
msgstr ""

msgid "PEP XXX: Stub"
msgstr ""

msgid "Stub"
msgstr ""

msgid "The :class:`ftplib.FTP` class now supports the context manager protocol (Contributed by Tarek Ziadé and Giampaolo Rodolà; :issue:`4972`.)"
msgstr ""

msgid "The previously deprecated :func:`string.maketrans` function has been removed in favor of the static methods, :meth:`bytes.maketrans` and :meth:`bytearray.maketrans`.  This change solves the confusion around which types were supported by the :mod:`string` module. Now, :class:`str`, :class:`bytes`, and :class:`bytearray` each have their own **maketrans** and **translate** methods with intermediate translation tables of the appropriate type."
msgstr ""

msgid "The previously deprecated :func:`contextlib.nested` function has been removed in favor of a plain :keyword:`with` statement which can accept multiple context managers.  The latter technique is faster (because it is built-in), and it does a better job finalizing multiple context managers when one of them raises an exception."
msgstr ""

msgid "The :func:`shutil.copytree` function has two new options:"
msgstr ""

msgid "*ignore_dangling_symlinks*: when ``symlinks=False`` (meaning that the function copies the file pointed to by the symlink, not the symlink itself) this option will silence the error thrown if the file doesn't exist."
msgstr ""

msgid "*copy_function*: a callable that will be used to copy files. :func:`shutil.copy2` is used by default."
msgstr ""

msgid "(Contributed by Tarek Ziade.)"
msgstr ""

msgid "The *sqlite3* module has some new features:"
msgstr "Le module *sqlite3* a quelques nouvelles fonctionnalités : "

msgid "XXX *enable_load_extension*"
msgstr ""

msgid "XXX *load_extension*"
msgstr ""

msgid "New :class:`~sqlite3.Connection` attribute :attr:`~sqlite3.Connection.in_transaction` is :const:`True` when there are uncommitted changes, and :const:`False` otherwise.  (Contributed by R. David Murray and Shashwat Anand, :issue:`8845`.)"
msgstr ""

msgid "Multi-threading"
msgstr ""

msgid "The mechanism for serializing execution of concurrently running Python threads (generally known as the GIL or Global Interpreter Lock) has been rewritten.  Among the objectives were more predictable switching intervals and reduced overhead due to lock contention and the number of ensuing system calls.  The notion of a \"check interval\" to allow thread switches has been abandoned and replaced by an absolute duration expressed in seconds.  This parameter is tunable through :func:`sys.setswitchinterval()`. It currently defaults to 5 milliseconds."
msgstr ""

msgid "Additional details about the implementation can be read from a `python-dev mailing-list message <http://mail.python.org/pipermail/python-dev/2009-October/093321.html>`_ (however, \"priority requests\" as exposed in this message have not been kept for inclusion)."
msgstr ""

msgid "Recursive locks (created with the :func:`threading.RLock` API) now benefit from a C implementation which makes them as fast as regular locks, and between 10x and 15x faster than their previous pure Python implementation."
msgstr ""

msgid "(Contributed by Antoine Pitrou; :issue:`3001`.)"
msgstr "(Contribution par Antoine Pitrou; :issue:`3001`.)"

msgid "Regular and recursive locks now accept an optional *timeout* argument to their ``acquire`` method. (Contributed by Antoine Pitrou; :issue:`7316`) Similarly, :meth:`threading.Semaphore.acquire` also gains a *timeout* argument. (Contributed by Torsten Landschoff; :issue:`850728`.)"
msgstr ""
"Les verrous standards et récursifs acceptent désormais un argument optionnel "
"*timeout* à leur méthode ``acquire``. (Contribution par Antoine Pitrou; "
":issue:`7316`). Pareillement, :meth:`threading.Semaphore.acquire` acquière "
"d'un argument *timeout* (Contribution par Torsten Landschoff; "
":issue:`850728`)."

msgid "Porting to Python 3.2"
msgstr "Portage vers Python 3.2"

msgid "bytearray objects cannot be used anymore as filenames: convert them to bytes"
msgstr ""
"Les objets bytearray ne peuvent plus être utilisés en tant que nom de "
"fichiers : les convertir en octets"

msgid "PyArg_Parse*() functions:"
msgstr "Les fonctions PyArg_Parse*() :"

msgid "\"t#\" format has been removed: use \"s#\" or \"s*\" instead"
msgstr "Le format \"t#\" a été supprimé : utiliser \"s#\" ou \"s*\" à la place"

msgid "\"w\" and \"w#\" formats has been removed: use \"w*\" instead"
msgstr "Les formats \"w\" et \"w#\" ont été supprimés : utiliser \"w*\" à la place"

msgid "What's New in Python"
msgstr "Quoi de neuf dans Python"

msgid "The \"What's New in Python\" series of essays takes tours through the most important changes between major Python versions.  They are a \"must read\" for anyone wishing to stay up-to-date after a new release."
msgstr ""
"La série d'essais \"Quoi de neuf dans Python\" reprend les plus importants "
"changements entres les versions majeures de Python. Elles sont à lire pour "
"quiconque souhaitant être à jour suite à une nouvelle sortie."
